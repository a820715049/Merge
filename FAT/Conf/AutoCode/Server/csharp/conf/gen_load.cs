// Code generated by protokitgo. DO NOT EDIT.
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System;
using System.Collections.Generic;
using fat.conf.conf_loader;

using rawAdSetting = fat.rawdata.AdSetting;
using AdSettingVisitor = fat.conf.AdSettingVisitor;
using rawAdsFeature = fat.rawdata.AdsFeature;
using AdsFeatureVisitor = fat.conf.AdsFeatureVisitor;
using rawAutoFingerInfo = fat.rawdata.AutoFingerInfo;
using AutoFingerInfoVisitor = fat.conf.AutoFingerInfoVisitor;
using rawBGM = fat.rawdata.BGM;
using BGMVisitor = fat.conf.BGMVisitor;
using rawBpDetail = fat.rawdata.BpDetail;
using BpDetailVisitor = fat.conf.BpDetailVisitor;
using rawBpMilestone = fat.rawdata.BpMilestone;
using BpMilestoneVisitor = fat.conf.BpMilestoneVisitor;
using rawBpPackInfo = fat.rawdata.BpPackInfo;
using BpPackInfoVisitor = fat.conf.BpPackInfoVisitor;
using rawBpTask = fat.rawdata.BpTask;
using BpTaskVisitor = fat.conf.BpTaskVisitor;
using rawBubbleSpawn = fat.rawdata.BubbleSpawn;
using BubbleSpawnVisitor = fat.conf.BubbleSpawnVisitor;
using rawBuildingBase = fat.rawdata.BuildingBase;
using BuildingBaseVisitor = fat.conf.BuildingBaseVisitor;
using rawBuildingCost = fat.rawdata.BuildingCost;
using BuildingCostVisitor = fat.conf.BuildingCostVisitor;
using rawBuildingLevel = fat.rawdata.BuildingLevel;
using BuildingLevelVisitor = fat.conf.BuildingLevelVisitor;
using rawBuildingScene = fat.rawdata.BuildingScene;
using BuildingSceneVisitor = fat.conf.BuildingSceneVisitor;
using rawBumperInfo = fat.rawdata.BumperInfo;
using BumperInfoVisitor = fat.conf.BumperInfoVisitor;
using rawCardGroup = fat.rawdata.CardGroup;
using CardGroupVisitor = fat.conf.CardGroupVisitor;
using rawCardLimit = fat.rawdata.CardLimit;
using CardLimitVisitor = fat.conf.CardLimitVisitor;
using rawCastleMilestone = fat.rawdata.CastleMilestone;
using CastleMilestoneVisitor = fat.conf.CastleMilestoneVisitor;
using rawCastleMilestoneDetail = fat.rawdata.CastleMilestoneDetail;
using CastleMilestoneDetailVisitor = fat.conf.CastleMilestoneDetailVisitor;
using rawCastleMilestoneGroup = fat.rawdata.CastleMilestoneGroup;
using CastleMilestoneGroupVisitor = fat.conf.CastleMilestoneGroupVisitor;
using rawComMergeActiveSource = fat.rawdata.ComMergeActiveSource;
using ComMergeActiveSourceVisitor = fat.conf.ComMergeActiveSourceVisitor;
using rawComMergeAutoSource = fat.rawdata.ComMergeAutoSource;
using ComMergeAutoSourceVisitor = fat.conf.ComMergeAutoSourceVisitor;
using rawComMergeBonus = fat.rawdata.ComMergeBonus;
using ComMergeBonusVisitor = fat.conf.ComMergeBonusVisitor;
using rawComMergeBox = fat.rawdata.ComMergeBox;
using ComMergeBoxVisitor = fat.conf.ComMergeBoxVisitor;
using rawComMergeChest = fat.rawdata.ComMergeChest;
using ComMergeChestVisitor = fat.conf.ComMergeChestVisitor;
using rawComMergeChoiceBox = fat.rawdata.ComMergeChoiceBox;
using ComMergeChoiceBoxVisitor = fat.conf.ComMergeChoiceBoxVisitor;
using rawComMergeDying = fat.rawdata.ComMergeDying;
using ComMergeDyingVisitor = fat.conf.ComMergeDyingVisitor;
using rawComMergeEat = fat.rawdata.ComMergeEat;
using ComMergeEatVisitor = fat.conf.ComMergeEatVisitor;
using rawComMergeEatSource = fat.rawdata.ComMergeEatSource;
using ComMergeEatSourceVisitor = fat.conf.ComMergeEatSourceVisitor;
using rawComMergeFeature = fat.rawdata.ComMergeFeature;
using ComMergeFeatureVisitor = fat.conf.ComMergeFeatureVisitor;
using rawComMergeJumpCD = fat.rawdata.ComMergeJumpCD;
using ComMergeJumpCDVisitor = fat.conf.ComMergeJumpCDVisitor;
using rawComMergeMixSource = fat.rawdata.ComMergeMixSource;
using ComMergeMixSourceVisitor = fat.conf.ComMergeMixSourceVisitor;
using rawComMergeOrderBox = fat.rawdata.ComMergeOrderBox;
using ComMergeOrderBoxVisitor = fat.conf.ComMergeOrderBoxVisitor;
using rawComMergeSkill = fat.rawdata.ComMergeSkill;
using ComMergeSkillVisitor = fat.conf.ComMergeSkillVisitor;
using rawComMergeSpecialBox = fat.rawdata.ComMergeSpecialBox;
using ComMergeSpecialBoxVisitor = fat.conf.ComMergeSpecialBoxVisitor;
using rawComMergeTapSource = fat.rawdata.ComMergeTapSource;
using ComMergeTapSourceVisitor = fat.conf.ComMergeTapSourceVisitor;
using rawComMergeTimeSkip = fat.rawdata.ComMergeTimeSkip;
using ComMergeTimeSkipVisitor = fat.conf.ComMergeTimeSkipVisitor;
using rawComMergeTokenMultiplier = fat.rawdata.ComMergeTokenMultiplier;
using ComMergeTokenMultiplierVisitor = fat.conf.ComMergeTokenMultiplierVisitor;
using rawComMergeToolSource = fat.rawdata.ComMergeToolSource;
using ComMergeToolSourceVisitor = fat.conf.ComMergeToolSourceVisitor;
using rawComTapBonus = fat.rawdata.ComTapBonus;
using ComTapBonusVisitor = fat.conf.ComTapBonusVisitor;
using rawComTimeMachine = fat.rawdata.ComTimeMachine;
using ComTimeMachineVisitor = fat.conf.ComTimeMachineVisitor;
using rawComTrigAutoDetail = fat.rawdata.ComTrigAutoDetail;
using ComTrigAutoDetailVisitor = fat.conf.ComTrigAutoDetailVisitor;
using rawComTrigAutoSource = fat.rawdata.ComTrigAutoSource;
using ComTrigAutoSourceVisitor = fat.conf.ComTrigAutoSourceVisitor;
using rawCommunityLink = fat.rawdata.CommunityLink;
using CommunityLinkVisitor = fat.conf.CommunityLinkVisitor;
using rawCurrencyPack = fat.rawdata.CurrencyPack;
using CurrencyPackVisitor = fat.conf.CurrencyPackVisitor;
using rawDEGroup = fat.rawdata.DEGroup;
using DEGroupVisitor = fat.conf.DEGroupVisitor;
using rawDEMInfo = fat.rawdata.DEMInfo;
using DEMInfoVisitor = fat.conf.DEMInfoVisitor;
using rawDailyEventGroup = fat.rawdata.DailyEventGroup;
using DailyEventGroupVisitor = fat.conf.DailyEventGroupVisitor;
using rawDailyEventList = fat.rawdata.DailyEventList;
using DailyEventListVisitor = fat.conf.DailyEventListVisitor;
using rawDailyEventMilestone = fat.rawdata.DailyEventMilestone;
using DailyEventMilestoneVisitor = fat.conf.DailyEventMilestoneVisitor;
using rawDailyEventTask = fat.rawdata.DailyEventTask;
using DailyEventTaskVisitor = fat.conf.DailyEventTaskVisitor;
using rawDailyPopPack = fat.rawdata.DailyPopPack;
using DailyPopPackVisitor = fat.conf.DailyPopPackVisitor;
using rawDiscountPack = fat.rawdata.DiscountPack;
using DiscountPackVisitor = fat.conf.DiscountPackVisitor;
using rawDiscountProgress = fat.rawdata.DiscountProgress;
using DiscountProgressVisitor = fat.conf.DiscountProgressVisitor;
using rawDropInfo = fat.rawdata.DropInfo;
using DropInfoVisitor = fat.conf.DropInfoVisitor;
using rawDropLimitItem = fat.rawdata.DropLimitItem;
using DropLimitItemVisitor = fat.conf.DropLimitItemVisitor;
using rawDropLimitScore = fat.rawdata.DropLimitScore;
using DropLimitScoreVisitor = fat.conf.DropLimitScoreVisitor;
using rawEndlessPack = fat.rawdata.EndlessPack;
using EndlessPackVisitor = fat.conf.EndlessPackVisitor;
using rawEndlessPackDetail = fat.rawdata.EndlessPackDetail;
using EndlessPackDetailVisitor = fat.conf.EndlessPackDetailVisitor;
using rawEndlessPackProgress = fat.rawdata.EndlessPackProgress;
using EndlessPackProgressVisitor = fat.conf.EndlessPackProgressVisitor;
using rawEndlessPackToken = fat.rawdata.EndlessPackToken;
using EndlessPackTokenVisitor = fat.conf.EndlessPackTokenVisitor;
using rawEndlessThreePack = fat.rawdata.EndlessThreePack;
using EndlessThreePackVisitor = fat.conf.EndlessThreePackVisitor;
using rawEndlessThreePackDetail = fat.rawdata.EndlessThreePackDetail;
using EndlessThreePackDetailVisitor = fat.conf.EndlessThreePackDetailVisitor;
using rawEndlessThreePackProgress = fat.rawdata.EndlessThreePackProgress;
using EndlessThreePackProgressVisitor = fat.conf.EndlessThreePackProgressVisitor;
using rawEndlessThreePackToken = fat.rawdata.EndlessThreePackToken;
using EndlessThreePackTokenVisitor = fat.conf.EndlessThreePackTokenVisitor;
using rawEnergyBoost = fat.rawdata.EnergyBoost;
using EnergyBoostVisitor = fat.conf.EnergyBoostVisitor;
using rawEnergyMultiPack = fat.rawdata.EnergyMultiPack;
using EnergyMultiPackVisitor = fat.conf.EnergyMultiPackVisitor;
using rawEnergyPack = fat.rawdata.EnergyPack;
using EnergyPackVisitor = fat.conf.EnergyPackVisitor;
using rawEntrance = fat.rawdata.Entrance;
using EntranceVisitor = fat.conf.EntranceVisitor;
using rawErgListDetail = fat.rawdata.ErgListDetail;
using ErgListDetailVisitor = fat.conf.ErgListDetailVisitor;
using rawErgListPack = fat.rawdata.ErgListPack;
using ErgListPackVisitor = fat.conf.ErgListPackVisitor;
using rawErgListTask = fat.rawdata.ErgListTask;
using ErgListTaskVisitor = fat.conf.ErgListTaskVisitor;
using rawEventBingoTask = fat.rawdata.EventBingoTask;
using EventBingoTaskVisitor = fat.conf.EventBingoTaskVisitor;
using rawEventBingoTaskDetail = fat.rawdata.EventBingoTaskDetail;
using EventBingoTaskDetailVisitor = fat.conf.EventBingoTaskDetailVisitor;
using rawEventBingoTaskInfo = fat.rawdata.EventBingoTaskInfo;
using EventBingoTaskInfoVisitor = fat.conf.EventBingoTaskInfoVisitor;
using rawEventBp = fat.rawdata.EventBp;
using EventBpVisitor = fat.conf.EventBpVisitor;
using rawEventCardAlbum = fat.rawdata.EventCardAlbum;
using EventCardAlbumVisitor = fat.conf.EventCardAlbumVisitor;
using rawEventCardRound = fat.rawdata.EventCardRound;
using EventCardRoundVisitor = fat.conf.EventCardRoundVisitor;
using rawEventCartOnePlusOne = fat.rawdata.EventCartOnePlusOne;
using EventCartOnePlusOneVisitor = fat.conf.EventCartOnePlusOneVisitor;
using rawEventClawOrder = fat.rawdata.EventClawOrder;
using EventClawOrderVisitor = fat.conf.EventClawOrderVisitor;
using rawEventClawOrderDraw = fat.rawdata.EventClawOrderDraw;
using EventClawOrderDrawVisitor = fat.conf.EventClawOrderDrawVisitor;
using rawEventClawOrderGroup = fat.rawdata.EventClawOrderGroup;
using EventClawOrderGroupVisitor = fat.conf.EventClawOrderGroupVisitor;
using rawEventClawOrderReDiff = fat.rawdata.EventClawOrderReDiff;
using EventClawOrderReDiffVisitor = fat.conf.EventClawOrderReDiffVisitor;
using rawEventClawOrderResource = fat.rawdata.EventClawOrderResource;
using EventClawOrderResourceVisitor = fat.conf.EventClawOrderResourceVisitor;
using rawEventClawOrderToken = fat.rawdata.EventClawOrderToken;
using EventClawOrderTokenVisitor = fat.conf.EventClawOrderTokenVisitor;
using rawEventCommunity = fat.rawdata.EventCommunity;
using EventCommunityVisitor = fat.conf.EventCommunityVisitor;
using rawEventDecorate = fat.rawdata.EventDecorate;
using EventDecorateVisitor = fat.conf.EventDecorateVisitor;
using rawEventDecorateGroup = fat.rawdata.EventDecorateGroup;
using EventDecorateGroupVisitor = fat.conf.EventDecorateGroupVisitor;
using rawEventDecorateInfo = fat.rawdata.EventDecorateInfo;
using EventDecorateInfoVisitor = fat.conf.EventDecorateInfoVisitor;
using rawEventDecorateLevel = fat.rawdata.EventDecorateLevel;
using EventDecorateLevelVisitor = fat.conf.EventDecorateLevelVisitor;
using rawEventDigging = fat.rawdata.EventDigging;
using EventDiggingVisitor = fat.conf.EventDiggingVisitor;
using rawEventDiggingBoard = fat.rawdata.EventDiggingBoard;
using EventDiggingBoardVisitor = fat.conf.EventDiggingBoardVisitor;
using rawEventDiggingDetail = fat.rawdata.EventDiggingDetail;
using EventDiggingDetailVisitor = fat.conf.EventDiggingDetailVisitor;
using rawEventDiggingItem = fat.rawdata.EventDiggingItem;
using EventDiggingItemVisitor = fat.conf.EventDiggingItemVisitor;
using rawEventDiggingLevel = fat.rawdata.EventDiggingLevel;
using EventDiggingLevelVisitor = fat.conf.EventDiggingLevelVisitor;
using rawEventDiggingRound = fat.rawdata.EventDiggingRound;
using EventDiggingRoundVisitor = fat.conf.EventDiggingRoundVisitor;
using rawEventExtraScore = fat.rawdata.EventExtraScore;
using EventExtraScoreVisitor = fat.conf.EventExtraScoreVisitor;
using rawEventFarmBoard = fat.rawdata.EventFarmBoard;
using EventFarmBoardVisitor = fat.conf.EventFarmBoardVisitor;
using rawEventFarmBoardAnimal = fat.rawdata.EventFarmBoardAnimal;
using EventFarmBoardAnimalVisitor = fat.conf.EventFarmBoardAnimalVisitor;
using rawEventFarmBoardDetail = fat.rawdata.EventFarmBoardDetail;
using EventFarmBoardDetailVisitor = fat.conf.EventFarmBoardDetailVisitor;
using rawEventFarmBoardFarm = fat.rawdata.EventFarmBoardFarm;
using EventFarmBoardFarmVisitor = fat.conf.EventFarmBoardFarmVisitor;
using rawEventFarmBoardGroup = fat.rawdata.EventFarmBoardGroup;
using EventFarmBoardGroupVisitor = fat.conf.EventFarmBoardGroupVisitor;
using rawEventFarmDrop = fat.rawdata.EventFarmDrop;
using EventFarmDropVisitor = fat.conf.EventFarmDropVisitor;
using rawEventFarmEndless = fat.rawdata.EventFarmEndless;
using EventFarmEndlessVisitor = fat.conf.EventFarmEndlessVisitor;
using rawEventFarmEndlessInfo = fat.rawdata.EventFarmEndlessInfo;
using EventFarmEndlessInfoVisitor = fat.conf.EventFarmEndlessInfoVisitor;
using rawEventFarmRow = fat.rawdata.EventFarmRow;
using EventFarmRowVisitor = fat.conf.EventFarmRowVisitor;
using rawEventFight = fat.rawdata.EventFight;
using EventFightVisitor = fat.conf.EventFightVisitor;
using rawEventFightDetail = fat.rawdata.EventFightDetail;
using EventFightDetailVisitor = fat.conf.EventFightDetailVisitor;
using rawEventFightLevel = fat.rawdata.EventFightLevel;
using EventFightLevelVisitor = fat.conf.EventFightLevelVisitor;
using rawEventFightOnePlusOne = fat.rawdata.EventFightOnePlusOne;
using EventFightOnePlusOneVisitor = fat.conf.EventFightOnePlusOneVisitor;
using rawEventFish = fat.rawdata.EventFish;
using EventFishVisitor = fat.conf.EventFishVisitor;
using rawEventFishDetail = fat.rawdata.EventFishDetail;
using EventFishDetailVisitor = fat.conf.EventFishDetailVisitor;
using rawEventFishMilestone = fat.rawdata.EventFishMilestone;
using EventFishMilestoneVisitor = fat.conf.EventFishMilestoneVisitor;
using rawEventFlashOrder = fat.rawdata.EventFlashOrder;
using EventFlashOrderVisitor = fat.conf.EventFlashOrderVisitor;
using rawEventGuess = fat.rawdata.EventGuess;
using EventGuessVisitor = fat.conf.EventGuessVisitor;
using rawEventGuessDetail = fat.rawdata.EventGuessDetail;
using EventGuessDetailVisitor = fat.conf.EventGuessDetailVisitor;
using rawEventGuessLevel = fat.rawdata.EventGuessLevel;
using EventGuessLevelVisitor = fat.conf.EventGuessLevelVisitor;
using rawEventGuessMilestone = fat.rawdata.EventGuessMilestone;
using EventGuessMilestoneVisitor = fat.conf.EventGuessMilestoneVisitor;
using rawEventGuessRound = fat.rawdata.EventGuessRound;
using EventGuessRoundVisitor = fat.conf.EventGuessRoundVisitor;
using rawEventInvite = fat.rawdata.EventInvite;
using EventInviteVisitor = fat.conf.EventInviteVisitor;
using rawEventItemBingo = fat.rawdata.EventItemBingo;
using EventItemBingoVisitor = fat.conf.EventItemBingoVisitor;
using rawEventItemBingoDetail = fat.rawdata.EventItemBingoDetail;
using EventItemBingoDetailVisitor = fat.conf.EventItemBingoDetailVisitor;
using rawEventItemBingoRound = fat.rawdata.EventItemBingoRound;
using EventItemBingoRoundVisitor = fat.conf.EventItemBingoRoundVisitor;
using rawEventLandmark = fat.rawdata.EventLandmark;
using EventLandmarkVisitor = fat.conf.EventLandmarkVisitor;
using rawEventLimitMerge = fat.rawdata.EventLimitMerge;
using EventLimitMergeVisitor = fat.conf.EventLimitMergeVisitor;
using rawEventLimitMergeGroup = fat.rawdata.EventLimitMergeGroup;
using EventLimitMergeGroupVisitor = fat.conf.EventLimitMergeGroupVisitor;
using rawEventLimitMergeOrder = fat.rawdata.EventLimitMergeOrder;
using EventLimitMergeOrderVisitor = fat.conf.EventLimitMergeOrderVisitor;
using rawEventLoginGift = fat.rawdata.EventLoginGift;
using EventLoginGiftVisitor = fat.conf.EventLoginGiftVisitor;
using rawEventMarketIAPGift = fat.rawdata.EventMarketIAPGift;
using EventMarketIAPGiftVisitor = fat.conf.EventMarketIAPGiftVisitor;
using rawEventMine = fat.rawdata.EventMine;
using EventMineVisitor = fat.conf.EventMineVisitor;
using rawEventMineBoardDetail = fat.rawdata.EventMineBoardDetail;
using EventMineBoardDetailVisitor = fat.conf.EventMineBoardDetailVisitor;
using rawEventMineBoardRow = fat.rawdata.EventMineBoardRow;
using EventMineBoardRowVisitor = fat.conf.EventMineBoardRowVisitor;
using rawEventMineCart = fat.rawdata.EventMineCart;
using EventMineCartVisitor = fat.conf.EventMineCartVisitor;
using rawEventMineCartDetail = fat.rawdata.EventMineCartDetail;
using EventMineCartDetailVisitor = fat.conf.EventMineCartDetailVisitor;
using rawEventMineCartDrop = fat.rawdata.EventMineCartDrop;
using EventMineCartDropVisitor = fat.conf.EventMineCartDropVisitor;
using rawEventMineCartOrderItem = fat.rawdata.EventMineCartOrderItem;
using EventMineCartOrderItemVisitor = fat.conf.EventMineCartOrderItemVisitor;
using rawEventMineCartReward = fat.rawdata.EventMineCartReward;
using EventMineCartRewardVisitor = fat.conf.EventMineCartRewardVisitor;
using rawEventMineCartRound = fat.rawdata.EventMineCartRound;
using EventMineCartRoundVisitor = fat.conf.EventMineCartRoundVisitor;
using rawEventMineCartRow = fat.rawdata.EventMineCartRow;
using EventMineCartRowVisitor = fat.conf.EventMineCartRowVisitor;
using rawEventMineCartRowGrp = fat.rawdata.EventMineCartRowGrp;
using EventMineCartRowGrpVisitor = fat.conf.EventMineCartRowGrpVisitor;
using rawEventMineGroup = fat.rawdata.EventMineGroup;
using EventMineGroupVisitor = fat.conf.EventMineGroupVisitor;
using rawEventMineOnePlusOne = fat.rawdata.EventMineOnePlusOne;
using EventMineOnePlusOneVisitor = fat.conf.EventMineOnePlusOneVisitor;
using rawEventMineReward = fat.rawdata.EventMineReward;
using EventMineRewardVisitor = fat.conf.EventMineRewardVisitor;
using rawEventMiniBoard = fat.rawdata.EventMiniBoard;
using EventMiniBoardVisitor = fat.conf.EventMiniBoardVisitor;
using rawEventMiniBoardDetail = fat.rawdata.EventMiniBoardDetail;
using EventMiniBoardDetailVisitor = fat.conf.EventMiniBoardDetailVisitor;
using rawEventMiniBoardDrop = fat.rawdata.EventMiniBoardDrop;
using EventMiniBoardDropVisitor = fat.conf.EventMiniBoardDropVisitor;
using rawEventMiniBoardMulti = fat.rawdata.EventMiniBoardMulti;
using EventMiniBoardMultiVisitor = fat.conf.EventMiniBoardMultiVisitor;
using rawEventMiniBoardMultiDrop = fat.rawdata.EventMiniBoardMultiDrop;
using EventMiniBoardMultiDropVisitor = fat.conf.EventMiniBoardMultiDropVisitor;
using rawEventMiniBoardMultiGroup = fat.rawdata.EventMiniBoardMultiGroup;
using EventMiniBoardMultiGroupVisitor = fat.conf.EventMiniBoardMultiGroupVisitor;
using rawEventMiniBoardMultiInfo = fat.rawdata.EventMiniBoardMultiInfo;
using EventMiniBoardMultiInfoVisitor = fat.conf.EventMiniBoardMultiInfoVisitor;
using rawEventOnline = fat.rawdata.EventOnline;
using EventOnlineVisitor = fat.conf.EventOnlineVisitor;
using rawEventOnlineDetail = fat.rawdata.EventOnlineDetail;
using EventOnlineDetailVisitor = fat.conf.EventOnlineDetailVisitor;
using rawEventOrderBonus = fat.rawdata.EventOrderBonus;
using EventOrderBonusVisitor = fat.conf.EventOrderBonusVisitor;
using rawEventOrderBonusDetail = fat.rawdata.EventOrderBonusDetail;
using EventOrderBonusDetailVisitor = fat.conf.EventOrderBonusDetailVisitor;
using rawEventOrderBonusGroup = fat.rawdata.EventOrderBonusGroup;
using EventOrderBonusGroupVisitor = fat.conf.EventOrderBonusGroupVisitor;
using rawEventOrderDash = fat.rawdata.EventOrderDash;
using EventOrderDashVisitor = fat.conf.EventOrderDashVisitor;
using rawEventOrderExtra = fat.rawdata.EventOrderExtra;
using EventOrderExtraVisitor = fat.conf.EventOrderExtraVisitor;
using rawEventOrderLike = fat.rawdata.EventOrderLike;
using EventOrderLikeVisitor = fat.conf.EventOrderLikeVisitor;
using rawEventOrderLikeDetail = fat.rawdata.EventOrderLikeDetail;
using EventOrderLikeDetailVisitor = fat.conf.EventOrderLikeDetailVisitor;
using rawEventOrderRate = fat.rawdata.EventOrderRate;
using EventOrderRateVisitor = fat.conf.EventOrderRateVisitor;
using rawEventOrderRateBox = fat.rawdata.EventOrderRateBox;
using EventOrderRateBoxVisitor = fat.conf.EventOrderRateBoxVisitor;
using rawEventOrderRateDetail = fat.rawdata.EventOrderRateDetail;
using EventOrderRateDetailVisitor = fat.conf.EventOrderRateDetailVisitor;
using rawEventOrderRateRandom = fat.rawdata.EventOrderRateRandom;
using EventOrderRateRandomVisitor = fat.conf.EventOrderRateRandomVisitor;
using rawEventOrderStreak = fat.rawdata.EventOrderStreak;
using EventOrderStreakVisitor = fat.conf.EventOrderStreakVisitor;
using rawEventOrderStreakDetail = fat.rawdata.EventOrderStreakDetail;
using EventOrderStreakDetailVisitor = fat.conf.EventOrderStreakDetailVisitor;
using rawEventPachinko = fat.rawdata.EventPachinko;
using EventPachinkoVisitor = fat.conf.EventPachinkoVisitor;
using rawEventPachinkoDetail = fat.rawdata.EventPachinkoDetail;
using EventPachinkoDetailVisitor = fat.conf.EventPachinkoDetailVisitor;
using rawEventPachinkoMilestone = fat.rawdata.EventPachinkoMilestone;
using EventPachinkoMilestoneVisitor = fat.conf.EventPachinkoMilestoneVisitor;
using rawEventPachinkoRound = fat.rawdata.EventPachinkoRound;
using EventPachinkoRoundVisitor = fat.conf.EventPachinkoRoundVisitor;
using rawEventPuzzle = fat.rawdata.EventPuzzle;
using EventPuzzleVisitor = fat.conf.EventPuzzleVisitor;
using rawEventPuzzleDetaile = fat.rawdata.EventPuzzleDetaile;
using EventPuzzleDetaileVisitor = fat.conf.EventPuzzleDetaileVisitor;
using rawEventPuzzleRewards = fat.rawdata.EventPuzzleRewards;
using EventPuzzleRewardsVisitor = fat.conf.EventPuzzleRewardsVisitor;
using rawEventPuzzleRound = fat.rawdata.EventPuzzleRound;
using EventPuzzleRoundVisitor = fat.conf.EventPuzzleRoundVisitor;
using rawEventRace = fat.rawdata.EventRace;
using EventRaceVisitor = fat.conf.EventRaceVisitor;
using rawEventRaceGroup = fat.rawdata.EventRaceGroup;
using EventRaceGroupVisitor = fat.conf.EventRaceGroupVisitor;
using rawEventRaceReward = fat.rawdata.EventRaceReward;
using EventRaceRewardVisitor = fat.conf.EventRaceRewardVisitor;
using rawEventRaceRobot = fat.rawdata.EventRaceRobot;
using EventRaceRobotVisitor = fat.conf.EventRaceRobotVisitor;
using rawEventRaceRobotIcon = fat.rawdata.EventRaceRobotIcon;
using EventRaceRobotIconVisitor = fat.conf.EventRaceRobotIconVisitor;
using rawEventRaceRound = fat.rawdata.EventRaceRound;
using EventRaceRoundVisitor = fat.conf.EventRaceRoundVisitor;
using rawEventRank = fat.rawdata.EventRank;
using EventRankVisitor = fat.conf.EventRankVisitor;
using rawEventRankReward = fat.rawdata.EventRankReward;
using EventRankRewardVisitor = fat.conf.EventRankRewardVisitor;
using rawEventRedeem = fat.rawdata.EventRedeem;
using EventRedeemVisitor = fat.conf.EventRedeemVisitor;
using rawEventRedeemDetail = fat.rawdata.EventRedeemDetail;
using EventRedeemDetailVisitor = fat.conf.EventRedeemDetailVisitor;
using rawEventRedeemGrp = fat.rawdata.EventRedeemGrp;
using EventRedeemGrpVisitor = fat.conf.EventRedeemGrpVisitor;
using rawEventRedeemMilestone = fat.rawdata.EventRedeemMilestone;
using EventRedeemMilestoneVisitor = fat.conf.EventRedeemMilestoneVisitor;
using rawEventRedeemReward = fat.rawdata.EventRedeemReward;
using EventRedeemRewardVisitor = fat.conf.EventRedeemRewardVisitor;
using rawEventScore = fat.rawdata.EventScore;
using EventScoreVisitor = fat.conf.EventScoreVisitor;
using rawEventScoreDetail = fat.rawdata.EventScoreDetail;
using EventScoreDetailVisitor = fat.conf.EventScoreDetailVisitor;
using rawEventScoreDuel = fat.rawdata.EventScoreDuel;
using EventScoreDuelVisitor = fat.conf.EventScoreDuelVisitor;
using rawEventScoreDuelDetail = fat.rawdata.EventScoreDuelDetail;
using EventScoreDuelDetailVisitor = fat.conf.EventScoreDuelDetailVisitor;
using rawEventScoreDuelSTG = fat.rawdata.EventScoreDuelSTG;
using EventScoreDuelSTGVisitor = fat.conf.EventScoreDuelSTGVisitor;
using rawEventSeaMilestoneReward = fat.rawdata.EventSeaMilestoneReward;
using EventSeaMilestoneRewardVisitor = fat.conf.EventSeaMilestoneRewardVisitor;
using rawEventSeaRace = fat.rawdata.EventSeaRace;
using EventSeaRaceVisitor = fat.conf.EventSeaRaceVisitor;
using rawEventSeaRaceDetail = fat.rawdata.EventSeaRaceDetail;
using EventSeaRaceDetailVisitor = fat.conf.EventSeaRaceDetailVisitor;
using rawEventSeaRaceReward = fat.rawdata.EventSeaRaceReward;
using EventSeaRaceRewardVisitor = fat.conf.EventSeaRaceRewardVisitor;
using rawEventSeaRaceRobot = fat.rawdata.EventSeaRaceRobot;
using EventSeaRaceRobotVisitor = fat.conf.EventSeaRaceRobotVisitor;
using rawEventSeaRaceRound = fat.rawdata.EventSeaRaceRound;
using EventSeaRaceRoundVisitor = fat.conf.EventSeaRaceRoundVisitor;
using rawEventSevenDayTask = fat.rawdata.EventSevenDayTask;
using EventSevenDayTaskVisitor = fat.conf.EventSevenDayTaskVisitor;
using rawEventStamp = fat.rawdata.EventStamp;
using EventStampVisitor = fat.conf.EventStampVisitor;
using rawEventStampRound = fat.rawdata.EventStampRound;
using EventStampRoundVisitor = fat.conf.EventStampRoundVisitor;
using rawEventStep = fat.rawdata.EventStep;
using EventStepVisitor = fat.conf.EventStepVisitor;
using rawEventStepDetail = fat.rawdata.EventStepDetail;
using EventStepDetailVisitor = fat.conf.EventStepDetailVisitor;
using rawEventStepTask = fat.rawdata.EventStepTask;
using EventStepTaskVisitor = fat.conf.EventStepTaskVisitor;
using rawEventSurvey = fat.rawdata.EventSurvey;
using EventSurveyVisitor = fat.conf.EventSurveyVisitor;
using rawEventTheme = fat.rawdata.EventTheme;
using EventThemeVisitor = fat.conf.EventThemeVisitor;
using rawEventThreeSign = fat.rawdata.EventThreeSign;
using EventThreeSignVisitor = fat.conf.EventThreeSignVisitor;
using rawEventThreeSignPool = fat.rawdata.EventThreeSignPool;
using EventThreeSignPoolVisitor = fat.conf.EventThreeSignPoolVisitor;
using rawEventTime = fat.rawdata.EventTime;
using EventTimeVisitor = fat.conf.EventTimeVisitor;
using rawEventTrainMission = fat.rawdata.EventTrainMission;
using EventTrainMissionVisitor = fat.conf.EventTrainMissionVisitor;
using rawEventTrainMissionDetail = fat.rawdata.EventTrainMissionDetail;
using EventTrainMissionDetailVisitor = fat.conf.EventTrainMissionDetailVisitor;
using rawEventTrainMissionRound = fat.rawdata.EventTrainMissionRound;
using EventTrainMissionRoundVisitor = fat.conf.EventTrainMissionRoundVisitor;
using rawEventTreasure = fat.rawdata.EventTreasure;
using EventTreasureVisitor = fat.conf.EventTreasureVisitor;
using rawEventTreasureGroup = fat.rawdata.EventTreasureGroup;
using EventTreasureGroupVisitor = fat.conf.EventTreasureGroupVisitor;
using rawEventTreasureGroupDetail = fat.rawdata.EventTreasureGroupDetail;
using EventTreasureGroupDetailVisitor = fat.conf.EventTreasureGroupDetailVisitor;
using rawEventTreasureLevel = fat.rawdata.EventTreasureLevel;
using EventTreasureLevelVisitor = fat.conf.EventTreasureLevelVisitor;
using rawEventTreasureReward = fat.rawdata.EventTreasureReward;
using EventTreasureRewardVisitor = fat.conf.EventTreasureRewardVisitor;
using rawEventTrigger = fat.rawdata.EventTrigger;
using EventTriggerVisitor = fat.conf.EventTriggerVisitor;
using rawEventTypeInfo = fat.rawdata.EventTypeInfo;
using EventTypeInfoVisitor = fat.conf.EventTypeInfoVisitor;
using rawEventVineLeap = fat.rawdata.EventVineLeap;
using EventVineLeapVisitor = fat.conf.EventVineLeapVisitor;
using rawEventVineLeapDiff = fat.rawdata.EventVineLeapDiff;
using EventVineLeapDiffVisitor = fat.conf.EventVineLeapDiffVisitor;
using rawEventVineLeapGroup = fat.rawdata.EventVineLeapGroup;
using EventVineLeapGroupVisitor = fat.conf.EventVineLeapGroupVisitor;
using rawEventVineLeapLevel = fat.rawdata.EventVineLeapLevel;
using EventVineLeapLevelVisitor = fat.conf.EventVineLeapLevelVisitor;
using rawEventVineLeapOut = fat.rawdata.EventVineLeapOut;
using EventVineLeapOutVisitor = fat.conf.EventVineLeapOutVisitor;
using rawEventVineLeapReward = fat.rawdata.EventVineLeapReward;
using EventVineLeapRewardVisitor = fat.conf.EventVineLeapRewardVisitor;
using rawEventWeeklyRaffle = fat.rawdata.EventWeeklyRaffle;
using EventWeeklyRaffleVisitor = fat.conf.EventWeeklyRaffleVisitor;
using rawEventWeeklyRaffleDetail = fat.rawdata.EventWeeklyRaffleDetail;
using EventWeeklyRaffleDetailVisitor = fat.conf.EventWeeklyRaffleDetailVisitor;
using rawEventWeeklyRaffleGrp = fat.rawdata.EventWeeklyRaffleGrp;
using EventWeeklyRaffleGrpVisitor = fat.conf.EventWeeklyRaffleGrpVisitor;
using rawEventWeeklyRaffleReward = fat.rawdata.EventWeeklyRaffleReward;
using EventWeeklyRaffleRewardVisitor = fat.conf.EventWeeklyRaffleRewardVisitor;
using rawEventWeeklyTask = fat.rawdata.EventWeeklyTask;
using EventWeeklyTaskVisitor = fat.conf.EventWeeklyTaskVisitor;
using rawEventWeeklyTaskDetail = fat.rawdata.EventWeeklyTaskDetail;
using EventWeeklyTaskDetailVisitor = fat.conf.EventWeeklyTaskDetailVisitor;
using rawEventWeeklyTaskGrp = fat.rawdata.EventWeeklyTaskGrp;
using EventWeeklyTaskGrpVisitor = fat.conf.EventWeeklyTaskGrpVisitor;
using rawEventWeeklyTaskInfo = fat.rawdata.EventWeeklyTaskInfo;
using EventWeeklyTaskInfoVisitor = fat.conf.EventWeeklyTaskInfoVisitor;
using rawEventWishBarReward = fat.rawdata.EventWishBarReward;
using EventWishBarRewardVisitor = fat.conf.EventWishBarRewardVisitor;
using rawEventWishBoard = fat.rawdata.EventWishBoard;
using EventWishBoardVisitor = fat.conf.EventWishBoardVisitor;
using rawEventWishBoardDetail = fat.rawdata.EventWishBoardDetail;
using EventWishBoardDetailVisitor = fat.conf.EventWishBoardDetailVisitor;
using rawEventWishBoardGroup = fat.rawdata.EventWishBoardGroup;
using EventWishBoardGroupVisitor = fat.conf.EventWishBoardGroupVisitor;
using rawEventWishDrop = fat.rawdata.EventWishDrop;
using EventWishDropVisitor = fat.conf.EventWishDropVisitor;
using rawEventWishEndless = fat.rawdata.EventWishEndless;
using EventWishEndlessVisitor = fat.conf.EventWishEndlessVisitor;
using rawEventWishEndlessInfo = fat.rawdata.EventWishEndlessInfo;
using EventWishEndlessInfoVisitor = fat.conf.EventWishEndlessInfoVisitor;
using rawEventWishKey = fat.rawdata.EventWishKey;
using EventWishKeyVisitor = fat.conf.EventWishKeyVisitor;
using rawEventWishMilestone = fat.rawdata.EventWishMilestone;
using EventWishMilestoneVisitor = fat.conf.EventWishMilestoneVisitor;
using rawEventWishOrderItem = fat.rawdata.EventWishOrderItem;
using EventWishOrderItemVisitor = fat.conf.EventWishOrderItemVisitor;
using rawEventWishRow = fat.rawdata.EventWishRow;
using EventWishRowVisitor = fat.conf.EventWishRowVisitor;
using rawEventWishUpon = fat.rawdata.EventWishUpon;
using EventWishUponVisitor = fat.conf.EventWishUponVisitor;
using rawEventWishUponDetail = fat.rawdata.EventWishUponDetail;
using EventWishUponDetailVisitor = fat.conf.EventWishUponDetailVisitor;
using rawEventWishing = fat.rawdata.EventWishing;
using EventWishingVisitor = fat.conf.EventWishingVisitor;
using rawEventWishingRecycle = fat.rawdata.EventWishingRecycle;
using EventWishingRecycleVisitor = fat.conf.EventWishingRecycleVisitor;
using rawEventZeroQuest = fat.rawdata.EventZeroQuest;
using EventZeroQuestVisitor = fat.conf.EventZeroQuestVisitor;
using rawEventZeroQuestGroup = fat.rawdata.EventZeroQuestGroup;
using EventZeroQuestGroupVisitor = fat.conf.EventZeroQuestGroupVisitor;
using rawEventZeroQuestRandom = fat.rawdata.EventZeroQuestRandom;
using EventZeroQuestRandomVisitor = fat.conf.EventZeroQuestRandomVisitor;
using rawExchangeCardWhitelist = fat.rawdata.ExchangeCardWhitelist;
using ExchangeCardWhitelistVisitor = fat.conf.ExchangeCardWhitelistVisitor;
using rawFaqConfig = fat.rawdata.FaqConfig;
using FaqConfigVisitor = fat.conf.FaqConfigVisitor;
using rawFeatureUnlock = fat.rawdata.FeatureUnlock;
using FeatureUnlockVisitor = fat.conf.FeatureUnlockVisitor;
using rawFishInfo = fat.rawdata.FishInfo;
using FishInfoVisitor = fat.conf.FishInfoVisitor;
using rawFishRarity = fat.rawdata.FishRarity;
using FishRarityVisitor = fat.conf.FishRarityVisitor;
using rawFrozenItem = fat.rawdata.FrozenItem;
using FrozenItemVisitor = fat.conf.FrozenItemVisitor;
using rawFrozenItemDetail = fat.rawdata.FrozenItemDetail;
using FrozenItemDetailVisitor = fat.conf.FrozenItemDetailVisitor;
using rawGalleryCategory = fat.rawdata.GalleryCategory;
using GalleryCategoryVisitor = fat.conf.GalleryCategoryVisitor;
using rawGallerySpecial = fat.rawdata.GallerySpecial;
using GallerySpecialVisitor = fat.conf.GallerySpecialVisitor;
using rawGameDiff = fat.rawdata.GameDiff;
using GameDiffVisitor = fat.conf.GameDiffVisitor;
using rawGemEndlessThree = fat.rawdata.GemEndlessThree;
using GemEndlessThreeVisitor = fat.conf.GemEndlessThreeVisitor;
using rawGemEndlessThreeDetail = fat.rawdata.GemEndlessThreeDetail;
using GemEndlessThreeDetailVisitor = fat.conf.GemEndlessThreeDetailVisitor;
using rawGemThreeForOne = fat.rawdata.GemThreeForOne;
using GemThreeForOneVisitor = fat.conf.GemThreeForOneVisitor;
using rawGlobal = fat.rawdata.Global;
using GlobalVisitor = fat.conf.GlobalVisitor;
using rawGradeIndexMapping = fat.rawdata.GradeIndexMapping;
using GradeIndexMappingVisitor = fat.conf.GradeIndexMappingVisitor;
using rawGroupDetail = fat.rawdata.GroupDetail;
using GroupDetailVisitor = fat.conf.GroupDetailVisitor;
using rawGuessItem = fat.rawdata.GuessItem;
using GuessItemVisitor = fat.conf.GuessItemVisitor;
using rawGuideMerge = fat.rawdata.GuideMerge;
using GuideMergeVisitor = fat.conf.GuideMergeVisitor;
using rawGuideMergeAction = fat.rawdata.GuideMergeAction;
using GuideMergeActionVisitor = fat.conf.GuideMergeActionVisitor;
using rawIAPFree = fat.rawdata.IAPFree;
using IAPFreeVisitor = fat.conf.IAPFreeVisitor;
using rawIAPPack = fat.rawdata.IAPPack;
using IAPPackVisitor = fat.conf.IAPPackVisitor;
using rawIAPProduct = fat.rawdata.IAPProduct;
using IAPProductVisitor = fat.conf.IAPProductVisitor;
using rawInventoryItem = fat.rawdata.InventoryItem;
using InventoryItemVisitor = fat.conf.InventoryItemVisitor;
using rawInventoryProducer = fat.rawdata.InventoryProducer;
using InventoryProducerVisitor = fat.conf.InventoryProducerVisitor;
using rawInventoryTool = fat.rawdata.InventoryTool;
using InventoryToolVisitor = fat.conf.InventoryToolVisitor;
using rawItemBingoBoard = fat.rawdata.ItemBingoBoard;
using ItemBingoBoardVisitor = fat.conf.ItemBingoBoardVisitor;
using rawItemReplace = fat.rawdata.ItemReplace;
using ItemReplaceVisitor = fat.conf.ItemReplaceVisitor;
using rawLabel = fat.rawdata.Label;
using LabelVisitor = fat.conf.LabelVisitor;
using rawLandmarkDetail = fat.rawdata.LandmarkDetail;
using LandmarkDetailVisitor = fat.conf.LandmarkDetailVisitor;
using rawLangDe = fat.rawdata.LangDe;
using LangDeVisitor = fat.conf.LangDeVisitor;
using rawLangEn = fat.rawdata.LangEn;
using LangEnVisitor = fat.conf.LangEnVisitor;
using rawLangEs = fat.rawdata.LangEs;
using LangEsVisitor = fat.conf.LangEsVisitor;
using rawLangFr = fat.rawdata.LangFr;
using LangFrVisitor = fat.conf.LangFrVisitor;
using rawLangJa = fat.rawdata.LangJa;
using LangJaVisitor = fat.conf.LangJaVisitor;
using rawLangKo = fat.rawdata.LangKo;
using LangKoVisitor = fat.conf.LangKoVisitor;
using rawLangPt = fat.rawdata.LangPt;
using LangPtVisitor = fat.conf.LangPtVisitor;
using rawLangTr = fat.rawdata.LangTr;
using LangTrVisitor = fat.conf.LangTrVisitor;
using rawLangZhHansCn = fat.rawdata.LangZhHansCn;
using LangZhHansCnVisitor = fat.conf.LangZhHansCnVisitor;
using rawLangZhHantTw = fat.rawdata.LangZhHantTw;
using LangZhHantTwVisitor = fat.conf.LangZhHantTwVisitor;
using rawLanguage = fat.rawdata.Language;
using LanguageVisitor = fat.conf.LanguageVisitor;
using rawLevelGroups = fat.rawdata.LevelGroups;
using LevelGroupsVisitor = fat.conf.LevelGroupsVisitor;
using rawLevelPack = fat.rawdata.LevelPack;
using LevelPackVisitor = fat.conf.LevelPackVisitor;
using rawLevelPackDetail = fat.rawdata.LevelPackDetail;
using LevelPackDetailVisitor = fat.conf.LevelPackDetailVisitor;
using rawLoginSign = fat.rawdata.LoginSign;
using LoginSignVisitor = fat.conf.LoginSignVisitor;
using rawLoginSignPool = fat.rawdata.LoginSignPool;
using LoginSignPoolVisitor = fat.conf.LoginSignPoolVisitor;
using rawLoginSignTotal = fat.rawdata.LoginSignTotal;
using LoginSignTotalVisitor = fat.conf.LoginSignTotalVisitor;
using rawMail = fat.rawdata.Mail;
using MailVisitor = fat.conf.MailVisitor;
using rawMarketCommondity = fat.rawdata.MarketCommondity;
using MarketCommondityVisitor = fat.conf.MarketCommondityVisitor;
using rawMarketDifficulty = fat.rawdata.MarketDifficulty;
using MarketDifficultyVisitor = fat.conf.MarketDifficultyVisitor;
using rawMarketIAP = fat.rawdata.MarketIAP;
using MarketIAPVisitor = fat.conf.MarketIAPVisitor;
using rawMarketIgnore = fat.rawdata.MarketIgnore;
using MarketIgnoreVisitor = fat.conf.MarketIgnoreVisitor;
using rawMarketIncrease = fat.rawdata.MarketIncrease;
using MarketIncreaseVisitor = fat.conf.MarketIncreaseVisitor;
using rawMarketSlidePack = fat.rawdata.MarketSlidePack;
using MarketSlidePackVisitor = fat.conf.MarketSlidePackVisitor;
using rawMarketSlidePackDetail = fat.rawdata.MarketSlidePackDetail;
using MarketSlidePackDetailVisitor = fat.conf.MarketSlidePackDetailVisitor;
using rawMarketWeight = fat.rawdata.MarketWeight;
using MarketWeightVisitor = fat.conf.MarketWeightVisitor;
using rawMergeBoard = fat.rawdata.MergeBoard;
using MergeBoardVisitor = fat.conf.MergeBoardVisitor;
using rawMergeBoardEnergy = fat.rawdata.MergeBoardEnergy;
using MergeBoardEnergyVisitor = fat.conf.MergeBoardEnergyVisitor;
using rawMergeBoardGrp = fat.rawdata.MergeBoardGrp;
using MergeBoardGrpVisitor = fat.conf.MergeBoardGrpVisitor;
using rawMergeBoardOrder = fat.rawdata.MergeBoardOrder;
using MergeBoardOrderVisitor = fat.conf.MergeBoardOrderVisitor;
using rawMergeCloud = fat.rawdata.MergeCloud;
using MergeCloudVisitor = fat.conf.MergeCloudVisitor;
using rawMergeDifficulty = fat.rawdata.MergeDifficulty;
using MergeDifficultyVisitor = fat.conf.MergeDifficultyVisitor;
using rawMergeFixedItem = fat.rawdata.MergeFixedItem;
using MergeFixedItemVisitor = fat.conf.MergeFixedItemVisitor;
using rawMergeFixedOutput = fat.rawdata.MergeFixedOutput;
using MergeFixedOutputVisitor = fat.conf.MergeFixedOutputVisitor;
using rawMergeGrid = fat.rawdata.MergeGrid;
using MergeGridVisitor = fat.conf.MergeGridVisitor;
using rawMergeGridArea = fat.rawdata.MergeGridArea;
using MergeGridAreaVisitor = fat.conf.MergeGridAreaVisitor;
using rawMergeItemCategory = fat.rawdata.MergeItemCategory;
using MergeItemCategoryVisitor = fat.conf.MergeItemCategoryVisitor;
using rawMergeLevel = fat.rawdata.MergeLevel;
using MergeLevelVisitor = fat.conf.MergeLevelVisitor;
using rawMergeLevelRate = fat.rawdata.MergeLevelRate;
using MergeLevelRateVisitor = fat.conf.MergeLevelRateVisitor;
using rawMergeMixCost = fat.rawdata.MergeMixCost;
using MergeMixCostVisitor = fat.conf.MergeMixCostVisitor;
using rawMergeRule = fat.rawdata.MergeRule;
using MergeRuleVisitor = fat.conf.MergeRuleVisitor;
using rawMergeRuledOutput = fat.rawdata.MergeRuledOutput;
using MergeRuledOutputVisitor = fat.conf.MergeRuledOutputVisitor;
using rawMergeTapCost = fat.rawdata.MergeTapCost;
using MergeTapCostVisitor = fat.conf.MergeTapCostVisitor;
using rawMicMilestone = fat.rawdata.MicMilestone;
using MicMilestoneVisitor = fat.conf.MicMilestoneVisitor;
using rawMicMilestoneDetail = fat.rawdata.MicMilestoneDetail;
using MicMilestoneDetailVisitor = fat.conf.MicMilestoneDetailVisitor;
using rawMicMilestoneGroup = fat.rawdata.MicMilestoneGroup;
using MicMilestoneGroupVisitor = fat.conf.MicMilestoneGroupVisitor;
using rawMiniGameBeadsBase = fat.rawdata.MiniGameBeadsBase;
using MiniGameBeadsBaseVisitor = fat.conf.MiniGameBeadsBaseVisitor;
using rawMiniGameBeadsCell = fat.rawdata.MiniGameBeadsCell;
using MiniGameBeadsCellVisitor = fat.conf.MiniGameBeadsCellVisitor;
using rawMiniGameBeadsLevel = fat.rawdata.MiniGameBeadsLevel;
using MiniGameBeadsLevelVisitor = fat.conf.MiniGameBeadsLevelVisitor;
using rawMiniGameBeadsStage = fat.rawdata.MiniGameBeadsStage;
using MiniGameBeadsStageVisitor = fat.conf.MiniGameBeadsStageVisitor;
using rawMiniGameSheet = fat.rawdata.MiniGameSheet;
using MiniGameSheetVisitor = fat.conf.MiniGameSheetVisitor;
using rawMiniGameSlideMergeItem = fat.rawdata.MiniGameSlideMergeItem;
using MiniGameSlideMergeItemVisitor = fat.conf.MiniGameSlideMergeItemVisitor;
using rawMiniGameSlideMergeLevel = fat.rawdata.MiniGameSlideMergeLevel;
using MiniGameSlideMergeLevelVisitor = fat.conf.MiniGameSlideMergeLevelVisitor;
using rawMiniGameSlideMergeStage = fat.rawdata.MiniGameSlideMergeStage;
using MiniGameSlideMergeStageVisitor = fat.conf.MiniGameSlideMergeStageVisitor;
using rawMonster = fat.rawdata.Monster;
using MonsterVisitor = fat.conf.MonsterVisitor;
using rawMonsterTalk = fat.rawdata.MonsterTalk;
using MonsterTalkVisitor = fat.conf.MonsterTalkVisitor;
using rawMultiRank = fat.rawdata.MultiRank;
using MultiRankVisitor = fat.conf.MultiRankVisitor;
using rawMultiRankDetail = fat.rawdata.MultiRankDetail;
using MultiRankDetailVisitor = fat.conf.MultiRankDetailVisitor;
using rawMultiRankMilestone = fat.rawdata.MultiRankMilestone;
using MultiRankMilestoneVisitor = fat.conf.MultiRankMilestoneVisitor;
using rawMultiRankReward = fat.rawdata.MultiRankReward;
using MultiRankRewardVisitor = fat.conf.MultiRankRewardVisitor;
using rawMultiRankRobotDetail = fat.rawdata.MultiRankRobotDetail;
using MultiRankRobotDetailVisitor = fat.conf.MultiRankRobotDetailVisitor;
using rawMultiRankRobotGroup = fat.rawdata.MultiRankRobotGroup;
using MultiRankRobotGroupVisitor = fat.conf.MultiRankRobotGroupVisitor;
using rawNewSessionPack = fat.rawdata.NewSessionPack;
using NewSessionPackVisitor = fat.conf.NewSessionPackVisitor;
using rawNewUserPack = fat.rawdata.NewUserPack;
using NewUserPackVisitor = fat.conf.NewUserPackVisitor;
using rawNoticeDetail = fat.rawdata.NoticeDetail;
using NoticeDetailVisitor = fat.conf.NoticeDetailVisitor;
using rawNoticeEvent = fat.rawdata.NoticeEvent;
using NoticeEventVisitor = fat.conf.NoticeEventVisitor;
using rawNoticeInfo = fat.rawdata.NoticeInfo;
using NoticeInfoVisitor = fat.conf.NoticeInfoVisitor;
using rawNpcConfig = fat.rawdata.NpcConfig;
using NpcConfigVisitor = fat.conf.NpcConfigVisitor;
using rawObjBasic = fat.rawdata.ObjBasic;
using ObjBasicVisitor = fat.conf.ObjBasicVisitor;
using rawObjCard = fat.rawdata.ObjCard;
using ObjCardVisitor = fat.conf.ObjCardVisitor;
using rawObjCardJoker = fat.rawdata.ObjCardJoker;
using ObjCardJokerVisitor = fat.conf.ObjCardJokerVisitor;
using rawObjCardPack = fat.rawdata.ObjCardPack;
using ObjCardPackVisitor = fat.conf.ObjCardPackVisitor;
using rawObjCoin = fat.rawdata.ObjCoin;
using ObjCoinVisitor = fat.conf.ObjCoinVisitor;
using rawObjMergeItem = fat.rawdata.ObjMergeItem;
using ObjMergeItemVisitor = fat.conf.ObjMergeItemVisitor;
using rawObjMergeTool = fat.rawdata.ObjMergeTool;
using ObjMergeToolVisitor = fat.conf.ObjMergeToolVisitor;
using rawObjRandomChest = fat.rawdata.ObjRandomChest;
using ObjRandomChestVisitor = fat.conf.ObjRandomChestVisitor;
using rawObjSeasonItem = fat.rawdata.ObjSeasonItem;
using ObjSeasonItemVisitor = fat.conf.ObjSeasonItemVisitor;
using rawObjToken = fat.rawdata.ObjToken;
using ObjTokenVisitor = fat.conf.ObjTokenVisitor;
using rawObjTool = fat.rawdata.ObjTool;
using ObjToolVisitor = fat.conf.ObjToolVisitor;
using rawOnePlusOne = fat.rawdata.OnePlusOne;
using OnePlusOneVisitor = fat.conf.OnePlusOneVisitor;
using rawOnePlusTwo = fat.rawdata.OnePlusTwo;
using OnePlusTwoVisitor = fat.conf.OnePlusTwoVisitor;
using rawOpenNoticePop = fat.rawdata.OpenNoticePop;
using OpenNoticePopVisitor = fat.conf.OpenNoticePopVisitor;
using rawOrderApiWhitelist = fat.rawdata.OrderApiWhitelist;
using OrderApiWhitelistVisitor = fat.conf.OrderApiWhitelistVisitor;
using rawOrderBoxDetail = fat.rawdata.OrderBoxDetail;
using OrderBoxDetailVisitor = fat.conf.OrderBoxDetailVisitor;
using rawOrderCategory = fat.rawdata.OrderCategory;
using OrderCategoryVisitor = fat.conf.OrderCategoryVisitor;
using rawOrderCommon = fat.rawdata.OrderCommon;
using OrderCommonVisitor = fat.conf.OrderCommonVisitor;
using rawOrderDetector = fat.rawdata.OrderDetector;
using OrderDetectorVisitor = fat.conf.OrderDetectorVisitor;
using rawOrderDiff = fat.rawdata.OrderDiff;
using OrderDiffVisitor = fat.conf.OrderDiffVisitor;
using rawOrderIgnore = fat.rawdata.OrderIgnore;
using OrderIgnoreVisitor = fat.conf.OrderIgnoreVisitor;
using rawOrderRandomer = fat.rawdata.OrderRandomer;
using OrderRandomerVisitor = fat.conf.OrderRandomerVisitor;
using rawOrderReward = fat.rawdata.OrderReward;
using OrderRewardVisitor = fat.conf.OrderRewardVisitor;
using rawPachinkoMultiple = fat.rawdata.PachinkoMultiple;
using PachinkoMultipleVisitor = fat.conf.PachinkoMultipleVisitor;
using rawPlayerGroup = fat.rawdata.PlayerGroup;
using PlayerGroupVisitor = fat.conf.PlayerGroupVisitor;
using rawPlayerGroupRule = fat.rawdata.PlayerGroupRule;
using PlayerGroupRuleVisitor = fat.conf.PlayerGroupRuleVisitor;
using rawPlotDialog = fat.rawdata.PlotDialog;
using PlotDialogVisitor = fat.conf.PlotDialogVisitor;
using rawPlotDrama = fat.rawdata.PlotDrama;
using PlotDramaVisitor = fat.conf.PlotDramaVisitor;
using rawPlotStory = fat.rawdata.PlotStory;
using PlotStoryVisitor = fat.conf.PlotStoryVisitor;
using rawPopup = fat.rawdata.Popup;
using PopupVisitor = fat.conf.PopupVisitor;
using rawProgressPack = fat.rawdata.ProgressPack;
using ProgressPackVisitor = fat.conf.ProgressPackVisitor;
using rawRandomReward = fat.rawdata.RandomReward;
using RandomRewardVisitor = fat.conf.RandomRewardVisitor;
using rawRandomStar = fat.rawdata.RandomStar;
using RandomStarVisitor = fat.conf.RandomStarVisitor;
using rawReshipment = fat.rawdata.Reshipment;
using ReshipmentVisitor = fat.conf.ReshipmentVisitor;
using rawRetentionPack = fat.rawdata.RetentionPack;
using RetentionPackVisitor = fat.conf.RetentionPackVisitor;
using rawRoundCoin = fat.rawdata.RoundCoin;
using RoundCoinVisitor = fat.conf.RoundCoinVisitor;
using rawRoundExpire = fat.rawdata.RoundExpire;
using RoundExpireVisitor = fat.conf.RoundExpireVisitor;
using rawRoundLifeTime = fat.rawdata.RoundLifeTime;
using RoundLifeTimeVisitor = fat.conf.RoundLifeTimeVisitor;
using rawRoundScore = fat.rawdata.RoundScore;
using RoundScoreVisitor = fat.conf.RoundScoreVisitor;
using rawRoundTool = fat.rawdata.RoundTool;
using RoundToolVisitor = fat.conf.RoundToolVisitor;
using rawSettingsCommunity = fat.rawdata.SettingsCommunity;
using SettingsCommunityVisitor = fat.conf.SettingsCommunityVisitor;
using rawSevenDayTaskDetail = fat.rawdata.SevenDayTaskDetail;
using SevenDayTaskDetailVisitor = fat.conf.SevenDayTaskDetailVisitor;
using rawSevenDayTaskGroup = fat.rawdata.SevenDayTaskGroup;
using SevenDayTaskGroupVisitor = fat.conf.SevenDayTaskGroupVisitor;
using rawSevenDayTaskInfo = fat.rawdata.SevenDayTaskInfo;
using SevenDayTaskInfoVisitor = fat.conf.SevenDayTaskInfoVisitor;
using rawSevenDayTaskRwd = fat.rawdata.SevenDayTaskRwd;
using SevenDayTaskRwdVisitor = fat.conf.SevenDayTaskRwdVisitor;
using rawShake = fat.rawdata.Shake;
using ShakeVisitor = fat.conf.ShakeVisitor;
using rawShinnyGuarPack = fat.rawdata.ShinnyGuarPack;
using ShinnyGuarPackVisitor = fat.conf.ShinnyGuarPackVisitor;
using rawShopCommunity = fat.rawdata.ShopCommunity;
using ShopCommunityVisitor = fat.conf.ShopCommunityVisitor;
using rawSound = fat.rawdata.Sound;
using SoundVisitor = fat.conf.SoundVisitor;
using rawSpinPack = fat.rawdata.SpinPack;
using SpinPackVisitor = fat.conf.SpinPackVisitor;
using rawSpinPackDetail = fat.rawdata.SpinPackDetail;
using SpinPackDetailVisitor = fat.conf.SpinPackDetailVisitor;
using rawSpinPackRewardPool = fat.rawdata.SpinPackRewardPool;
using SpinPackRewardPoolVisitor = fat.conf.SpinPackRewardPoolVisitor;
using rawStarExchange = fat.rawdata.StarExchange;
using StarExchangeVisitor = fat.conf.StarExchangeVisitor;
using rawThreeForOnePack = fat.rawdata.ThreeForOnePack;
using ThreeForOnePackVisitor = fat.conf.ThreeForOnePackVisitor;
using rawToastConfig = fat.rawdata.ToastConfig;
using ToastConfigVisitor = fat.conf.ToastConfigVisitor;
using rawToolExchange = fat.rawdata.ToolExchange;
using ToolExchangeVisitor = fat.conf.ToolExchangeVisitor;
using rawTrainChallenge = fat.rawdata.TrainChallenge;
using TrainChallengeVisitor = fat.conf.TrainChallengeVisitor;
using rawTrainGroupDetail = fat.rawdata.TrainGroupDetail;
using TrainGroupDetailVisitor = fat.conf.TrainGroupDetailVisitor;
using rawTrainLevelGroup = fat.rawdata.TrainLevelGroup;
using TrainLevelGroupVisitor = fat.conf.TrainLevelGroupVisitor;
using rawTrainMilestone = fat.rawdata.TrainMilestone;
using TrainMilestoneVisitor = fat.conf.TrainMilestoneVisitor;
using rawTrainMission = fat.rawdata.TrainMission;
using TrainMissionVisitor = fat.conf.TrainMissionVisitor;
using rawUserGrade = fat.rawdata.UserGrade;
using UserGradeVisitor = fat.conf.UserGradeVisitor;
using rawUserGradeGroup = fat.rawdata.UserGradeGroup;
using UserGradeGroupVisitor = fat.conf.UserGradeGroupVisitor;
using rawUserTag = fat.rawdata.UserTag;
using UserTagVisitor = fat.conf.UserTagVisitor;
using rawUserTagGroup = fat.rawdata.UserTagGroup;
using UserTagGroupVisitor = fat.conf.UserTagGroupVisitor;
using PBC = global::Google.Protobuf.Collections;

namespace fat.conf {
[Obsolete("使用 conf_loader/ConfManager ", false)]
public static partial class Data {
		static Data()
		{
			conf_loader.ConfManager.Initialize();
		}
	#region loader
		public delegate object FuncGetMap(string tag="");
		public static readonly Dictionary<string, FuncGetMap> GetMapFunctions = new Dictionary<string, FuncGetMap>{};
		public static readonly Dictionary<string, Action<Google.Protobuf.CodedInputStream>> Loaders = new Dictionary<string, Action<Google.Protobuf.CodedInputStream>> {};
		// 注册 lazy 更新方法
        public static readonly Dictionary<string,conf_loader.ConfManager.RegisterDataStreamProvider> DataStreamProviderSetter = new Dictionary<string,conf_loader.ConfManager.RegisterDataStreamProvider>{};
        public static Dictionary<string, conf_loader.ConfManager.RegisterDataStreamProvider> LazyLoaderSetter
        {
	        get => DataStreamProviderSetter;
        }

		public static void Clear() {
			var cur = ConfManager.GetCurrent();
		    cur.AdSettingMap = new fat.rawdata.AdSettingConf();
		    cur.AdsFeatureSlice = new fat.rawdata.AdsFeatureConf();
		    cur.AutoFingerInfoSlice = new fat.rawdata.AutoFingerInfoConf();
		    cur.BGMSlice = new fat.rawdata.BGMConf();
		    cur.BpDetailMap = new fat.rawdata.BpDetailConf();
		    cur.BpMilestoneMap = new fat.rawdata.BpMilestoneConf();
		    cur.BpPackInfoMap = new fat.rawdata.BpPackInfoConf();
		    cur.BpTaskMap = new fat.rawdata.BpTaskConf();
		    cur.BubbleSpawnSlice = new fat.rawdata.BubbleSpawnConf();
		    cur.BuildingBaseMap = new fat.rawdata.BuildingBaseConf();
		    cur.BuildingCostMap = new fat.rawdata.BuildingCostConf();
		    cur.BuildingLevelMap = new fat.rawdata.BuildingLevelConf();
		    cur.BuildingSceneMap = new fat.rawdata.BuildingSceneConf();
		    cur.BumperInfoMap = new fat.rawdata.BumperInfoConf();
		    cur.CardGroupMap = new fat.rawdata.CardGroupConf();
		    cur.CardLimitMap = new fat.rawdata.CardLimitConf();
		    cur.CastleMilestoneMap = new fat.rawdata.CastleMilestoneConf();
		    cur.CastleMilestoneDetailMap = new fat.rawdata.CastleMilestoneDetailConf();
		    cur.CastleMilestoneGroupMap = new fat.rawdata.CastleMilestoneGroupConf();
		    cur.ComMergeActiveSourceMap = new fat.rawdata.ComMergeActiveSourceConf();
		    cur.ComMergeAutoSourceMap = new fat.rawdata.ComMergeAutoSourceConf();
		    cur.ComMergeBonusMap = new fat.rawdata.ComMergeBonusConf();
		    cur.ComMergeBoxMap = new fat.rawdata.ComMergeBoxConf();
		    cur.ComMergeChestMap = new fat.rawdata.ComMergeChestConf();
		    cur.ComMergeChoiceBoxMap = new fat.rawdata.ComMergeChoiceBoxConf();
		    cur.ComMergeDyingMap = new fat.rawdata.ComMergeDyingConf();
		    cur.ComMergeEatMap = new fat.rawdata.ComMergeEatConf();
		    cur.ComMergeEatSourceMap = new fat.rawdata.ComMergeEatSourceConf();
		    cur.ComMergeFeatureMap = new fat.rawdata.ComMergeFeatureConf();
		    cur.ComMergeJumpCDMap = new fat.rawdata.ComMergeJumpCDConf();
		    cur.ComMergeMixSourceMap = new fat.rawdata.ComMergeMixSourceConf();
		    cur.ComMergeOrderBoxMap = new fat.rawdata.ComMergeOrderBoxConf();
		    cur.ComMergeSkillMap = new fat.rawdata.ComMergeSkillConf();
		    cur.ComMergeSpecialBoxMap = new fat.rawdata.ComMergeSpecialBoxConf();
		    cur.ComMergeTapSourceMap = new fat.rawdata.ComMergeTapSourceConf();
		    cur.ComMergeTimeSkipMap = new fat.rawdata.ComMergeTimeSkipConf();
		    cur.ComMergeTokenMultiplierMap = new fat.rawdata.ComMergeTokenMultiplierConf();
		    cur.ComMergeToolSourceMap = new fat.rawdata.ComMergeToolSourceConf();
		    cur.ComTapBonusMap = new fat.rawdata.ComTapBonusConf();
		    cur.ComTimeMachineMap = new fat.rawdata.ComTimeMachineConf();
		    cur.ComTrigAutoDetailMap = new fat.rawdata.ComTrigAutoDetailConf();
		    cur.ComTrigAutoSourceMap = new fat.rawdata.ComTrigAutoSourceConf();
		    cur.CommunityLinkMap = new fat.rawdata.CommunityLinkConf();
		    cur.CurrencyPackMap = new fat.rawdata.CurrencyPackConf();
		    cur.DEGroupMap = new fat.rawdata.DEGroupConf();
		    cur.DEMInfoMap = new fat.rawdata.DEMInfoConf();
		    cur.DailyEventGroupMap = new fat.rawdata.DailyEventGroupConf();
		    cur.DailyEventListMap = new fat.rawdata.DailyEventListConf();
		    cur.DailyEventMilestoneMap = new fat.rawdata.DailyEventMilestoneConf();
		    cur.DailyEventTaskMap = new fat.rawdata.DailyEventTaskConf();
		    cur.DailyPopPackMap = new fat.rawdata.DailyPopPackConf();
		    cur.DiscountPackMap = new fat.rawdata.DiscountPackConf();
		    cur.DiscountProgressMap = new fat.rawdata.DiscountProgressConf();
		    cur.DropInfoMap = new fat.rawdata.DropInfoConf();
		    cur.DropLimitItemMap = new fat.rawdata.DropLimitItemConf();
		    cur.DropLimitScoreMap = new fat.rawdata.DropLimitScoreConf();
		    cur.EndlessPackMap = new fat.rawdata.EndlessPackConf();
		    cur.EndlessPackDetailSlice = new fat.rawdata.EndlessPackDetailConf();
		    cur.EndlessPackProgressMap = new fat.rawdata.EndlessPackProgressConf();
		    cur.EndlessPackTokenMap = new fat.rawdata.EndlessPackTokenConf();
		    cur.EndlessThreePackMap = new fat.rawdata.EndlessThreePackConf();
		    cur.EndlessThreePackDetailSlice = new fat.rawdata.EndlessThreePackDetailConf();
		    cur.EndlessThreePackProgressMap = new fat.rawdata.EndlessThreePackProgressConf();
		    cur.EndlessThreePackTokenMap = new fat.rawdata.EndlessThreePackTokenConf();
		    cur.EnergyBoostMap = new fat.rawdata.EnergyBoostConf();
		    cur.EnergyMultiPackMap = new fat.rawdata.EnergyMultiPackConf();
		    cur.EnergyPackMap = new fat.rawdata.EnergyPackConf();
		    cur.EntranceMap = new fat.rawdata.EntranceConf();
		    cur.ErgListDetailMap = new fat.rawdata.ErgListDetailConf();
		    cur.ErgListPackMap = new fat.rawdata.ErgListPackConf();
		    cur.ErgListTaskMap = new fat.rawdata.ErgListTaskConf();
		    cur.EventBingoTaskMap = new fat.rawdata.EventBingoTaskConf();
		    cur.EventBingoTaskDetailMap = new fat.rawdata.EventBingoTaskDetailConf();
		    cur.EventBingoTaskInfoMap = new fat.rawdata.EventBingoTaskInfoConf();
		    cur.EventBpMap = new fat.rawdata.EventBpConf();
		    cur.EventCardAlbumMap = new fat.rawdata.EventCardAlbumConf();
		    cur.EventCardRoundMap = new fat.rawdata.EventCardRoundConf();
		    cur.EventCartOnePlusOneMap = new fat.rawdata.EventCartOnePlusOneConf();
		    cur.EventClawOrderMap = new fat.rawdata.EventClawOrderConf();
		    cur.EventClawOrderDrawMap = new fat.rawdata.EventClawOrderDrawConf();
		    cur.EventClawOrderGroupMap = new fat.rawdata.EventClawOrderGroupConf();
		    cur.EventClawOrderReDiffMap = new fat.rawdata.EventClawOrderReDiffConf();
		    cur.EventClawOrderResourceMap = new fat.rawdata.EventClawOrderResourceConf();
		    cur.EventClawOrderTokenMap = new fat.rawdata.EventClawOrderTokenConf();
		    cur.EventCommunityMap = new fat.rawdata.EventCommunityConf();
		    cur.EventDecorateMap = new fat.rawdata.EventDecorateConf();
		    cur.EventDecorateGroupMap = new fat.rawdata.EventDecorateGroupConf();
		    cur.EventDecorateInfoMap = new fat.rawdata.EventDecorateInfoConf();
		    cur.EventDecorateLevelMap = new fat.rawdata.EventDecorateLevelConf();
		    cur.EventDiggingMap = new fat.rawdata.EventDiggingConf();
		    cur.EventDiggingBoardMap = new fat.rawdata.EventDiggingBoardConf();
		    cur.EventDiggingDetailMap = new fat.rawdata.EventDiggingDetailConf();
		    cur.EventDiggingItemMap = new fat.rawdata.EventDiggingItemConf();
		    cur.EventDiggingLevelMap = new fat.rawdata.EventDiggingLevelConf();
		    cur.EventDiggingRoundMap = new fat.rawdata.EventDiggingRoundConf();
		    cur.EventExtraScoreMap = new fat.rawdata.EventExtraScoreConf();
		    cur.EventFarmBoardMap = new fat.rawdata.EventFarmBoardConf();
		    cur.EventFarmBoardAnimalMap = new fat.rawdata.EventFarmBoardAnimalConf();
		    cur.EventFarmBoardDetailMap = new fat.rawdata.EventFarmBoardDetailConf();
		    cur.EventFarmBoardFarmMap = new fat.rawdata.EventFarmBoardFarmConf();
		    cur.EventFarmBoardGroupMap = new fat.rawdata.EventFarmBoardGroupConf();
		    cur.EventFarmDropMap = new fat.rawdata.EventFarmDropConf();
		    cur.EventFarmEndlessMap = new fat.rawdata.EventFarmEndlessConf();
		    cur.EventFarmEndlessInfoMap = new fat.rawdata.EventFarmEndlessInfoConf();
		    cur.EventFarmRowMap = new fat.rawdata.EventFarmRowConf();
		    cur.EventFightMap = new fat.rawdata.EventFightConf();
		    cur.EventFightDetailMap = new fat.rawdata.EventFightDetailConf();
		    cur.EventFightLevelMap = new fat.rawdata.EventFightLevelConf();
		    cur.EventFightOnePlusOneMap = new fat.rawdata.EventFightOnePlusOneConf();
		    cur.EventFishMap = new fat.rawdata.EventFishConf();
		    cur.EventFishDetailMap = new fat.rawdata.EventFishDetailConf();
		    cur.EventFishMilestoneMap = new fat.rawdata.EventFishMilestoneConf();
		    cur.EventFlashOrderMap = new fat.rawdata.EventFlashOrderConf();
		    cur.EventGuessMap = new fat.rawdata.EventGuessConf();
		    cur.EventGuessDetailMap = new fat.rawdata.EventGuessDetailConf();
		    cur.EventGuessLevelMap = new fat.rawdata.EventGuessLevelConf();
		    cur.EventGuessMilestoneMap = new fat.rawdata.EventGuessMilestoneConf();
		    cur.EventGuessRoundMap = new fat.rawdata.EventGuessRoundConf();
		    cur.EventInviteMap = new fat.rawdata.EventInviteConf();
		    cur.EventItemBingoMap = new fat.rawdata.EventItemBingoConf();
		    cur.EventItemBingoDetailMap = new fat.rawdata.EventItemBingoDetailConf();
		    cur.EventItemBingoRoundMap = new fat.rawdata.EventItemBingoRoundConf();
		    cur.EventLandmarkMap = new fat.rawdata.EventLandmarkConf();
		    cur.EventLimitMergeMap = new fat.rawdata.EventLimitMergeConf();
		    cur.EventLimitMergeGroupMap = new fat.rawdata.EventLimitMergeGroupConf();
		    cur.EventLimitMergeOrderMap = new fat.rawdata.EventLimitMergeOrderConf();
		    cur.EventLoginGiftMap = new fat.rawdata.EventLoginGiftConf();
		    cur.EventMarketIAPGiftMap = new fat.rawdata.EventMarketIAPGiftConf();
		    cur.EventMineMap = new fat.rawdata.EventMineConf();
		    cur.EventMineBoardDetailMap = new fat.rawdata.EventMineBoardDetailConf();
		    cur.EventMineBoardRowMap = new fat.rawdata.EventMineBoardRowConf();
		    cur.EventMineCartMap = new fat.rawdata.EventMineCartConf();
		    cur.EventMineCartDetailMap = new fat.rawdata.EventMineCartDetailConf();
		    cur.EventMineCartDropMap = new fat.rawdata.EventMineCartDropConf();
		    cur.EventMineCartOrderItemMap = new fat.rawdata.EventMineCartOrderItemConf();
		    cur.EventMineCartRewardMap = new fat.rawdata.EventMineCartRewardConf();
		    cur.EventMineCartRoundMap = new fat.rawdata.EventMineCartRoundConf();
		    cur.EventMineCartRowMap = new fat.rawdata.EventMineCartRowConf();
		    cur.EventMineCartRowGrpMap = new fat.rawdata.EventMineCartRowGrpConf();
		    cur.EventMineGroupMap = new fat.rawdata.EventMineGroupConf();
		    cur.EventMineOnePlusOneMap = new fat.rawdata.EventMineOnePlusOneConf();
		    cur.EventMineRewardMap = new fat.rawdata.EventMineRewardConf();
		    cur.EventMiniBoardMap = new fat.rawdata.EventMiniBoardConf();
		    cur.EventMiniBoardDetailMap = new fat.rawdata.EventMiniBoardDetailConf();
		    cur.EventMiniBoardDropMap = new fat.rawdata.EventMiniBoardDropConf();
		    cur.EventMiniBoardMultiMap = new fat.rawdata.EventMiniBoardMultiConf();
		    cur.EventMiniBoardMultiDropMap = new fat.rawdata.EventMiniBoardMultiDropConf();
		    cur.EventMiniBoardMultiGroupMap = new fat.rawdata.EventMiniBoardMultiGroupConf();
		    cur.EventMiniBoardMultiInfoMap = new fat.rawdata.EventMiniBoardMultiInfoConf();
		    cur.EventOnlineMap = new fat.rawdata.EventOnlineConf();
		    cur.EventOnlineDetailMap = new fat.rawdata.EventOnlineDetailConf();
		    cur.EventOrderBonusMap = new fat.rawdata.EventOrderBonusConf();
		    cur.EventOrderBonusDetailMap = new fat.rawdata.EventOrderBonusDetailConf();
		    cur.EventOrderBonusGroupMap = new fat.rawdata.EventOrderBonusGroupConf();
		    cur.EventOrderDashMap = new fat.rawdata.EventOrderDashConf();
		    cur.EventOrderExtraMap = new fat.rawdata.EventOrderExtraConf();
		    cur.EventOrderLikeMap = new fat.rawdata.EventOrderLikeConf();
		    cur.EventOrderLikeDetailMap = new fat.rawdata.EventOrderLikeDetailConf();
		    cur.EventOrderRateMap = new fat.rawdata.EventOrderRateConf();
		    cur.EventOrderRateBoxMap = new fat.rawdata.EventOrderRateBoxConf();
		    cur.EventOrderRateDetailMap = new fat.rawdata.EventOrderRateDetailConf();
		    cur.EventOrderRateRandomMap = new fat.rawdata.EventOrderRateRandomConf();
		    cur.EventOrderStreakMap = new fat.rawdata.EventOrderStreakConf();
		    cur.EventOrderStreakDetailMap = new fat.rawdata.EventOrderStreakDetailConf();
		    cur.EventPachinkoMap = new fat.rawdata.EventPachinkoConf();
		    cur.EventPachinkoDetailMap = new fat.rawdata.EventPachinkoDetailConf();
		    cur.EventPachinkoMilestoneMap = new fat.rawdata.EventPachinkoMilestoneConf();
		    cur.EventPachinkoRoundMap = new fat.rawdata.EventPachinkoRoundConf();
		    cur.EventPuzzleMap = new fat.rawdata.EventPuzzleConf();
		    cur.EventPuzzleDetaileMap = new fat.rawdata.EventPuzzleDetaileConf();
		    cur.EventPuzzleRewardsMap = new fat.rawdata.EventPuzzleRewardsConf();
		    cur.EventPuzzleRoundMap = new fat.rawdata.EventPuzzleRoundConf();
		    cur.EventRaceMap = new fat.rawdata.EventRaceConf();
		    cur.EventRaceGroupMap = new fat.rawdata.EventRaceGroupConf();
		    cur.EventRaceRewardMap = new fat.rawdata.EventRaceRewardConf();
		    cur.EventRaceRobotMap = new fat.rawdata.EventRaceRobotConf();
		    cur.EventRaceRobotIconMap = new fat.rawdata.EventRaceRobotIconConf();
		    cur.EventRaceRoundMap = new fat.rawdata.EventRaceRoundConf();
		    cur.EventRankMap = new fat.rawdata.EventRankConf();
		    cur.EventRankRewardMap = new fat.rawdata.EventRankRewardConf();
		    cur.EventRedeemMap = new fat.rawdata.EventRedeemConf();
		    cur.EventRedeemDetailMap = new fat.rawdata.EventRedeemDetailConf();
		    cur.EventRedeemGrpMap = new fat.rawdata.EventRedeemGrpConf();
		    cur.EventRedeemMilestoneMap = new fat.rawdata.EventRedeemMilestoneConf();
		    cur.EventRedeemRewardMap = new fat.rawdata.EventRedeemRewardConf();
		    cur.EventScoreMap = new fat.rawdata.EventScoreConf();
		    cur.EventScoreDetailMap = new fat.rawdata.EventScoreDetailConf();
		    cur.EventScoreDuelMap = new fat.rawdata.EventScoreDuelConf();
		    cur.EventScoreDuelDetailMap = new fat.rawdata.EventScoreDuelDetailConf();
		    cur.EventScoreDuelSTGMap = new fat.rawdata.EventScoreDuelSTGConf();
		    cur.EventSeaMilestoneRewardMap = new fat.rawdata.EventSeaMilestoneRewardConf();
		    cur.EventSeaRaceMap = new fat.rawdata.EventSeaRaceConf();
		    cur.EventSeaRaceDetailMap = new fat.rawdata.EventSeaRaceDetailConf();
		    cur.EventSeaRaceRewardMap = new fat.rawdata.EventSeaRaceRewardConf();
		    cur.EventSeaRaceRobotMap = new fat.rawdata.EventSeaRaceRobotConf();
		    cur.EventSeaRaceRoundMap = new fat.rawdata.EventSeaRaceRoundConf();
		    cur.EventSevenDayTaskMap = new fat.rawdata.EventSevenDayTaskConf();
		    cur.EventStampMap = new fat.rawdata.EventStampConf();
		    cur.EventStampRoundMap = new fat.rawdata.EventStampRoundConf();
		    cur.EventStepMap = new fat.rawdata.EventStepConf();
		    cur.EventStepDetailMap = new fat.rawdata.EventStepDetailConf();
		    cur.EventStepTaskMap = new fat.rawdata.EventStepTaskConf();
		    cur.EventSurveyMap = new fat.rawdata.EventSurveyConf();
		    cur.EventThemeMap = new fat.rawdata.EventThemeConf();
		    cur.EventThreeSignMap = new fat.rawdata.EventThreeSignConf();
		    cur.EventThreeSignPoolMap = new fat.rawdata.EventThreeSignPoolConf();
		    cur.EventTimeMap = new fat.rawdata.EventTimeConf();
		    cur.EventTrainMissionMap = new fat.rawdata.EventTrainMissionConf();
		    cur.EventTrainMissionDetailMap = new fat.rawdata.EventTrainMissionDetailConf();
		    cur.EventTrainMissionRoundMap = new fat.rawdata.EventTrainMissionRoundConf();
		    cur.EventTreasureMap = new fat.rawdata.EventTreasureConf();
		    cur.EventTreasureGroupMap = new fat.rawdata.EventTreasureGroupConf();
		    cur.EventTreasureGroupDetailMap = new fat.rawdata.EventTreasureGroupDetailConf();
		    cur.EventTreasureLevelMap = new fat.rawdata.EventTreasureLevelConf();
		    cur.EventTreasureRewardMap = new fat.rawdata.EventTreasureRewardConf();
		    cur.EventTriggerMap = new fat.rawdata.EventTriggerConf();
		    cur.EventTypeInfoSlice = new fat.rawdata.EventTypeInfoConf();
		    cur.EventVineLeapMap = new fat.rawdata.EventVineLeapConf();
		    cur.EventVineLeapDiffMap = new fat.rawdata.EventVineLeapDiffConf();
		    cur.EventVineLeapGroupMap = new fat.rawdata.EventVineLeapGroupConf();
		    cur.EventVineLeapLevelMap = new fat.rawdata.EventVineLeapLevelConf();
		    cur.EventVineLeapOutMap = new fat.rawdata.EventVineLeapOutConf();
		    cur.EventVineLeapRewardMap = new fat.rawdata.EventVineLeapRewardConf();
		    cur.EventWeeklyRaffleMap = new fat.rawdata.EventWeeklyRaffleConf();
		    cur.EventWeeklyRaffleDetailMap = new fat.rawdata.EventWeeklyRaffleDetailConf();
		    cur.EventWeeklyRaffleGrpMap = new fat.rawdata.EventWeeklyRaffleGrpConf();
		    cur.EventWeeklyRaffleRewardMap = new fat.rawdata.EventWeeklyRaffleRewardConf();
		    cur.EventWeeklyTaskMap = new fat.rawdata.EventWeeklyTaskConf();
		    cur.EventWeeklyTaskDetailMap = new fat.rawdata.EventWeeklyTaskDetailConf();
		    cur.EventWeeklyTaskGrpMap = new fat.rawdata.EventWeeklyTaskGrpConf();
		    cur.EventWeeklyTaskInfoMap = new fat.rawdata.EventWeeklyTaskInfoConf();
		    cur.EventWishBarRewardMap = new fat.rawdata.EventWishBarRewardConf();
		    cur.EventWishBoardMap = new fat.rawdata.EventWishBoardConf();
		    cur.EventWishBoardDetailMap = new fat.rawdata.EventWishBoardDetailConf();
		    cur.EventWishBoardGroupMap = new fat.rawdata.EventWishBoardGroupConf();
		    cur.EventWishDropMap = new fat.rawdata.EventWishDropConf();
		    cur.EventWishEndlessMap = new fat.rawdata.EventWishEndlessConf();
		    cur.EventWishEndlessInfoMap = new fat.rawdata.EventWishEndlessInfoConf();
		    cur.EventWishKeyMap = new fat.rawdata.EventWishKeyConf();
		    cur.EventWishMilestoneMap = new fat.rawdata.EventWishMilestoneConf();
		    cur.EventWishOrderItemMap = new fat.rawdata.EventWishOrderItemConf();
		    cur.EventWishRowMap = new fat.rawdata.EventWishRowConf();
		    cur.EventWishUponMap = new fat.rawdata.EventWishUponConf();
		    cur.EventWishUponDetailMap = new fat.rawdata.EventWishUponDetailConf();
		    cur.EventWishingMap = new fat.rawdata.EventWishingConf();
		    cur.EventWishingRecycleMap = new fat.rawdata.EventWishingRecycleConf();
		    cur.EventZeroQuestMap = new fat.rawdata.EventZeroQuestConf();
		    cur.EventZeroQuestGroupMap = new fat.rawdata.EventZeroQuestGroupConf();
		    cur.EventZeroQuestRandomMap = new fat.rawdata.EventZeroQuestRandomConf();
		    cur.ExchangeCardWhitelistMap = new fat.rawdata.ExchangeCardWhitelistConf();
		    cur.FaqConfigMap = new fat.rawdata.FaqConfigConf();
		    cur.FeatureUnlockSlice = new fat.rawdata.FeatureUnlockConf();
		    cur.FishInfoMap = new fat.rawdata.FishInfoConf();
		    cur.FishRarityMap = new fat.rawdata.FishRarityConf();
		    cur.FrozenItemMap = new fat.rawdata.FrozenItemConf();
		    cur.FrozenItemDetailMap = new fat.rawdata.FrozenItemDetailConf();
		    cur.GalleryCategoryMap = new fat.rawdata.GalleryCategoryConf();
		    cur.GallerySpecialMap = new fat.rawdata.GallerySpecialConf();
		    cur.GameDiffSlice = new fat.rawdata.GameDiffConf();
		    cur.GemEndlessThreeMap = new fat.rawdata.GemEndlessThreeConf();
		    cur.GemEndlessThreeDetailSlice = new fat.rawdata.GemEndlessThreeDetailConf();
		    cur.GemThreeForOneMap = new fat.rawdata.GemThreeForOneConf();
		    cur.GlobalSlice = new fat.rawdata.GlobalConf();
		    cur.GradeIndexMappingMap = new fat.rawdata.GradeIndexMappingConf();
		    cur.GroupDetailMap = new fat.rawdata.GroupDetailConf();
		    cur.GuessItemMap = new fat.rawdata.GuessItemConf();
		    cur.GuideMergeMap = new fat.rawdata.GuideMergeConf();
		    cur.GuideMergeActionMap = new fat.rawdata.GuideMergeActionConf();
		    cur.IAPFreeMap = new fat.rawdata.IAPFreeConf();
		    cur.IAPPackMap = new fat.rawdata.IAPPackConf();
		    cur.IAPProductMap = new fat.rawdata.IAPProductConf();
		    cur.InventoryItemMap = new fat.rawdata.InventoryItemConf();
		    cur.InventoryProducerMap = new fat.rawdata.InventoryProducerConf();
		    cur.InventoryToolMap = new fat.rawdata.InventoryToolConf();
		    cur.ItemBingoBoardMap = new fat.rawdata.ItemBingoBoardConf();
		    cur.ItemReplaceMap = new fat.rawdata.ItemReplaceConf();
		    cur.LabelMap = new fat.rawdata.LabelConf();
		    cur.LandmarkDetailMap = new fat.rawdata.LandmarkDetailConf();
		    cur.LangDeSlice = new fat.rawdata.LangDeConf();
		    cur.LangEnSlice = new fat.rawdata.LangEnConf();
		    cur.LangEsSlice = new fat.rawdata.LangEsConf();
		    cur.LangFrSlice = new fat.rawdata.LangFrConf();
		    cur.LangJaSlice = new fat.rawdata.LangJaConf();
		    cur.LangKoSlice = new fat.rawdata.LangKoConf();
		    cur.LangPtSlice = new fat.rawdata.LangPtConf();
		    cur.LangTrSlice = new fat.rawdata.LangTrConf();
		    cur.LangZhHansCnSlice = new fat.rawdata.LangZhHansCnConf();
		    cur.LangZhHantTwSlice = new fat.rawdata.LangZhHantTwConf();
		    cur.LanguageSlice = new fat.rawdata.LanguageConf();
		    cur.LevelGroupsMap = new fat.rawdata.LevelGroupsConf();
		    cur.LevelPackMap = new fat.rawdata.LevelPackConf();
		    cur.LevelPackDetailMap = new fat.rawdata.LevelPackDetailConf();
		    cur.LoginSignSlice = new fat.rawdata.LoginSignConf();
		    cur.LoginSignPoolMap = new fat.rawdata.LoginSignPoolConf();
		    cur.LoginSignTotalMap = new fat.rawdata.LoginSignTotalConf();
		    cur.MailMap = new fat.rawdata.MailConf();
		    cur.MarketCommondityMap = new fat.rawdata.MarketCommondityConf();
		    cur.MarketDifficultyMap = new fat.rawdata.MarketDifficultyConf();
		    cur.MarketIAPMap = new fat.rawdata.MarketIAPConf();
		    cur.MarketIgnoreSlice = new fat.rawdata.MarketIgnoreConf();
		    cur.MarketIncreaseMap = new fat.rawdata.MarketIncreaseConf();
		    cur.MarketSlidePackMap = new fat.rawdata.MarketSlidePackConf();
		    cur.MarketSlidePackDetailMap = new fat.rawdata.MarketSlidePackDetailConf();
		    cur.MarketWeightMap = new fat.rawdata.MarketWeightConf();
		    cur.MergeBoardMap = new fat.rawdata.MergeBoardConf();
		    cur.MergeBoardEnergyMap = new fat.rawdata.MergeBoardEnergyConf();
		    cur.MergeBoardGrpMap = new fat.rawdata.MergeBoardGrpConf();
		    cur.MergeBoardOrderMap = new fat.rawdata.MergeBoardOrderConf();
		    cur.MergeCloudSlice = new fat.rawdata.MergeCloudConf();
		    cur.MergeDifficultyMap = new fat.rawdata.MergeDifficultyConf();
		    cur.MergeFixedItemSlice = new fat.rawdata.MergeFixedItemConf();
		    cur.MergeFixedOutputSlice = new fat.rawdata.MergeFixedOutputConf();
		    cur.MergeGridMap = new fat.rawdata.MergeGridConf();
		    cur.MergeGridAreaSlice = new fat.rawdata.MergeGridAreaConf();
		    cur.MergeItemCategoryMap = new fat.rawdata.MergeItemCategoryConf();
		    cur.MergeLevelSlice = new fat.rawdata.MergeLevelConf();
		    cur.MergeLevelRateMap = new fat.rawdata.MergeLevelRateConf();
		    cur.MergeMixCostMap = new fat.rawdata.MergeMixCostConf();
		    cur.MergeRuleMap = new fat.rawdata.MergeRuleConf();
		    cur.MergeRuledOutputMap = new fat.rawdata.MergeRuledOutputConf();
		    cur.MergeTapCostMap = new fat.rawdata.MergeTapCostConf();
		    cur.MicMilestoneMap = new fat.rawdata.MicMilestoneConf();
		    cur.MicMilestoneDetailMap = new fat.rawdata.MicMilestoneDetailConf();
		    cur.MicMilestoneGroupMap = new fat.rawdata.MicMilestoneGroupConf();
		    cur.MiniGameBeadsBaseMap = new fat.rawdata.MiniGameBeadsBaseConf();
		    cur.MiniGameBeadsCellMap = new fat.rawdata.MiniGameBeadsCellConf();
		    cur.MiniGameBeadsLevelMap = new fat.rawdata.MiniGameBeadsLevelConf();
		    cur.MiniGameBeadsStageMap = new fat.rawdata.MiniGameBeadsStageConf();
		    cur.MiniGameSheetMap = new fat.rawdata.MiniGameSheetConf();
		    cur.MiniGameSlideMergeItemMap = new fat.rawdata.MiniGameSlideMergeItemConf();
		    cur.MiniGameSlideMergeLevelMap = new fat.rawdata.MiniGameSlideMergeLevelConf();
		    cur.MiniGameSlideMergeStageMap = new fat.rawdata.MiniGameSlideMergeStageConf();
		    cur.MonsterMap = new fat.rawdata.MonsterConf();
		    cur.MonsterTalkMap = new fat.rawdata.MonsterTalkConf();
		    cur.MultiRankMap = new fat.rawdata.MultiRankConf();
		    cur.MultiRankDetailMap = new fat.rawdata.MultiRankDetailConf();
		    cur.MultiRankMilestoneMap = new fat.rawdata.MultiRankMilestoneConf();
		    cur.MultiRankRewardMap = new fat.rawdata.MultiRankRewardConf();
		    cur.MultiRankRobotDetailMap = new fat.rawdata.MultiRankRobotDetailConf();
		    cur.MultiRankRobotGroupMap = new fat.rawdata.MultiRankRobotGroupConf();
		    cur.NewSessionPackMap = new fat.rawdata.NewSessionPackConf();
		    cur.NewUserPackMap = new fat.rawdata.NewUserPackConf();
		    cur.NoticeDetailMap = new fat.rawdata.NoticeDetailConf();
		    cur.NoticeEventMap = new fat.rawdata.NoticeEventConf();
		    cur.NoticeInfoSlice = new fat.rawdata.NoticeInfoConf();
		    cur.NpcConfigMap = new fat.rawdata.NpcConfigConf();
		    cur.ObjBasicMap = new fat.rawdata.ObjBasicConf();
		    cur.ObjCardMap = new fat.rawdata.ObjCardConf();
		    cur.ObjCardJokerMap = new fat.rawdata.ObjCardJokerConf();
		    cur.ObjCardPackMap = new fat.rawdata.ObjCardPackConf();
		    cur.ObjCoinMap = new fat.rawdata.ObjCoinConf();
		    cur.ObjMergeItemMap = new fat.rawdata.ObjMergeItemConf();
		    cur.ObjMergeToolMap = new fat.rawdata.ObjMergeToolConf();
		    cur.ObjRandomChestMap = new fat.rawdata.ObjRandomChestConf();
		    cur.ObjSeasonItemMap = new fat.rawdata.ObjSeasonItemConf();
		    cur.ObjTokenMap = new fat.rawdata.ObjTokenConf();
		    cur.ObjToolMap = new fat.rawdata.ObjToolConf();
		    cur.OnePlusOneMap = new fat.rawdata.OnePlusOneConf();
		    cur.OnePlusTwoMap = new fat.rawdata.OnePlusTwoConf();
		    cur.OpenNoticePopSlice = new fat.rawdata.OpenNoticePopConf();
		    cur.OrderApiWhitelistMap = new fat.rawdata.OrderApiWhitelistConf();
		    cur.OrderBoxDetailMap = new fat.rawdata.OrderBoxDetailConf();
		    cur.OrderCategoryMap = new fat.rawdata.OrderCategoryConf();
		    cur.OrderCommonMap = new fat.rawdata.OrderCommonConf();
		    cur.OrderDetectorMap = new fat.rawdata.OrderDetectorConf();
		    cur.OrderDiffMap = new fat.rawdata.OrderDiffConf();
		    cur.OrderIgnoreMap = new fat.rawdata.OrderIgnoreConf();
		    cur.OrderRandomerMap = new fat.rawdata.OrderRandomerConf();
		    cur.OrderRewardMap = new fat.rawdata.OrderRewardConf();
		    cur.PachinkoMultipleMap = new fat.rawdata.PachinkoMultipleConf();
		    cur.PlayerGroupMap = new fat.rawdata.PlayerGroupConf();
		    cur.PlayerGroupRuleSlice = new fat.rawdata.PlayerGroupRuleConf();
		    cur.PlotDialogMap = new fat.rawdata.PlotDialogConf();
		    cur.PlotDramaMap = new fat.rawdata.PlotDramaConf();
		    cur.PlotStoryMap = new fat.rawdata.PlotStoryConf();
		    cur.PopupMap = new fat.rawdata.PopupConf();
		    cur.ProgressPackMap = new fat.rawdata.ProgressPackConf();
		    cur.RandomRewardMap = new fat.rawdata.RandomRewardConf();
		    cur.RandomStarMap = new fat.rawdata.RandomStarConf();
		    cur.ReshipmentMap = new fat.rawdata.ReshipmentConf();
		    cur.RetentionPackMap = new fat.rawdata.RetentionPackConf();
		    cur.RoundCoinSlice = new fat.rawdata.RoundCoinConf();
		    cur.RoundExpireSlice = new fat.rawdata.RoundExpireConf();
		    cur.RoundLifeTimeSlice = new fat.rawdata.RoundLifeTimeConf();
		    cur.RoundScoreSlice = new fat.rawdata.RoundScoreConf();
		    cur.RoundToolSlice = new fat.rawdata.RoundToolConf();
		    cur.SettingsCommunityMap = new fat.rawdata.SettingsCommunityConf();
		    cur.SevenDayTaskDetailMap = new fat.rawdata.SevenDayTaskDetailConf();
		    cur.SevenDayTaskGroupMap = new fat.rawdata.SevenDayTaskGroupConf();
		    cur.SevenDayTaskInfoMap = new fat.rawdata.SevenDayTaskInfoConf();
		    cur.SevenDayTaskRwdMap = new fat.rawdata.SevenDayTaskRwdConf();
		    cur.ShakeMap = new fat.rawdata.ShakeConf();
		    cur.ShinnyGuarPackMap = new fat.rawdata.ShinnyGuarPackConf();
		    cur.ShopCommunityMap = new fat.rawdata.ShopCommunityConf();
		    cur.SoundMap = new fat.rawdata.SoundConf();
		    cur.SpinPackMap = new fat.rawdata.SpinPackConf();
		    cur.SpinPackDetailMap = new fat.rawdata.SpinPackDetailConf();
		    cur.SpinPackRewardPoolMap = new fat.rawdata.SpinPackRewardPoolConf();
		    cur.StarExchangeMap = new fat.rawdata.StarExchangeConf();
		    cur.ThreeForOnePackMap = new fat.rawdata.ThreeForOnePackConf();
		    cur.ToastConfigSlice = new fat.rawdata.ToastConfigConf();
		    cur.ToolExchangeMap = new fat.rawdata.ToolExchangeConf();
		    cur.TrainChallengeMap = new fat.rawdata.TrainChallengeConf();
		    cur.TrainGroupDetailMap = new fat.rawdata.TrainGroupDetailConf();
		    cur.TrainLevelGroupMap = new fat.rawdata.TrainLevelGroupConf();
		    cur.TrainMilestoneMap = new fat.rawdata.TrainMilestoneConf();
		    cur.TrainMissionMap = new fat.rawdata.TrainMissionConf();
		    cur.UserGradeMap = new fat.rawdata.UserGradeConf();
		    cur.UserGradeGroupMap = new fat.rawdata.UserGradeGroupConf();
		    cur.UserTagMap = new fat.rawdata.UserTagConf();
		    cur.UserTagGroupMap = new fat.rawdata.UserTagGroupConf();
		}
	#endregion loader
	#region AdSetting
		public static int GetCountAdSettingMap(string tag="") => AdSettingVisitor.GetCount(tag);
		public static string GetFileNameAdSettingMap() => AdSettingVisitor.GetFileName();
		public static List<int> SortedKeysAdSettingMap(string tag="") => AdSettingVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawAdSetting> GetAdSettingMap(string tag="") => AdSettingVisitor.All(tag);
		public static void RangeAdSettingMap(Action<int, rawAdSetting> filter,string tag="") => AdSettingVisitor.Range(filter,tag);
		public static List<int> KeysAdSettingMap(string tag="") => AdSettingVisitor.Keys(tag);
		public static rawAdSetting? GetAdSetting(int key,string tag="") => AdSettingVisitor.Get(key,tag);
		public static List<rawAdSetting> GetAdSettingByFilter(Func<rawAdSetting, bool> filterFunc,string tag="") => AdSettingVisitor.GetByFilter(filterFunc,tag);
		public static rawAdSetting? GetOneAdSettingByFilter(Func<rawAdSetting, bool> filterFunc,string tag="") => AdSettingVisitor.GetOneByFilter(filterFunc,tag);
	#endregion AdSetting
	#region AdsFeature
		public static int GetCountAdsFeatureSlice(string tag="") => AdsFeatureVisitor.GetCount(tag);
		public static string GetFileNameAdsFeatureSlice() => AdsFeatureVisitor.GetFileName();
		public static PBC::RepeatedField<rawAdsFeature> GetAdsFeatureSlice(string tag="") => AdsFeatureVisitor.All(tag);
		public static void RangeAdsFeatureSlice(Action<int, rawAdsFeature> filter,string tag="") => AdsFeatureVisitor.Range(filter,tag);
		public static rawAdsFeature? GetAdsFeatureByIndex(int index,string tag="") => AdsFeatureVisitor.GetByIndex(index,tag);
		public static List<rawAdsFeature> GetAdsFeatureByFilter(Func<rawAdsFeature, bool> filterFunc,string tag="") => AdsFeatureVisitor.GetByFilter(filterFunc,tag);
		public static rawAdsFeature? GetOneAdsFeatureByFilter(Func<rawAdsFeature, bool> filterFunc,string tag="") => AdsFeatureVisitor.GetOneByFilter(filterFunc,tag);
	#endregion AdsFeature
	#region AutoFingerInfo
		public static int GetCountAutoFingerInfoSlice(string tag="") => AutoFingerInfoVisitor.GetCount(tag);
		public static string GetFileNameAutoFingerInfoSlice() => AutoFingerInfoVisitor.GetFileName();
		public static PBC::RepeatedField<rawAutoFingerInfo> GetAutoFingerInfoSlice(string tag="") => AutoFingerInfoVisitor.All(tag);
		public static void RangeAutoFingerInfoSlice(Action<int, rawAutoFingerInfo> filter,string tag="") => AutoFingerInfoVisitor.Range(filter,tag);
		public static rawAutoFingerInfo? GetAutoFingerInfoByIndex(int index,string tag="") => AutoFingerInfoVisitor.GetByIndex(index,tag);
		public static List<rawAutoFingerInfo> GetAutoFingerInfoByFilter(Func<rawAutoFingerInfo, bool> filterFunc,string tag="") => AutoFingerInfoVisitor.GetByFilter(filterFunc,tag);
		public static rawAutoFingerInfo? GetOneAutoFingerInfoByFilter(Func<rawAutoFingerInfo, bool> filterFunc,string tag="") => AutoFingerInfoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion AutoFingerInfo
	#region BGM
		public static int GetCountBGMSlice(string tag="") => BGMVisitor.GetCount(tag);
		public static string GetFileNameBGMSlice() => BGMVisitor.GetFileName();
		public static PBC::RepeatedField<rawBGM> GetBGMSlice(string tag="") => BGMVisitor.All(tag);
		public static void RangeBGMSlice(Action<int, rawBGM> filter,string tag="") => BGMVisitor.Range(filter,tag);
		public static rawBGM? GetBGMByIndex(int index,string tag="") => BGMVisitor.GetByIndex(index,tag);
		public static List<rawBGM> GetBGMByFilter(Func<rawBGM, bool> filterFunc,string tag="") => BGMVisitor.GetByFilter(filterFunc,tag);
		public static rawBGM? GetOneBGMByFilter(Func<rawBGM, bool> filterFunc,string tag="") => BGMVisitor.GetOneByFilter(filterFunc,tag);
	#endregion BGM
	#region BpDetail
		public static int GetCountBpDetailMap(string tag="") => BpDetailVisitor.GetCount(tag);
		public static string GetFileNameBpDetailMap() => BpDetailVisitor.GetFileName();
		public static List<int> SortedKeysBpDetailMap(string tag="") => BpDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawBpDetail> GetBpDetailMap(string tag="") => BpDetailVisitor.All(tag);
		public static void RangeBpDetailMap(Action<int, rawBpDetail> filter,string tag="") => BpDetailVisitor.Range(filter,tag);
		public static List<int> KeysBpDetailMap(string tag="") => BpDetailVisitor.Keys(tag);
		public static rawBpDetail? GetBpDetail(int key,string tag="") => BpDetailVisitor.Get(key,tag);
		public static List<rawBpDetail> GetBpDetailByFilter(Func<rawBpDetail, bool> filterFunc,string tag="") => BpDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawBpDetail? GetOneBpDetailByFilter(Func<rawBpDetail, bool> filterFunc,string tag="") => BpDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion BpDetail
	#region BpMilestone
		public static int GetCountBpMilestoneMap(string tag="") => BpMilestoneVisitor.GetCount(tag);
		public static string GetFileNameBpMilestoneMap() => BpMilestoneVisitor.GetFileName();
		public static List<int> SortedKeysBpMilestoneMap(string tag="") => BpMilestoneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawBpMilestone> GetBpMilestoneMap(string tag="") => BpMilestoneVisitor.All(tag);
		public static void RangeBpMilestoneMap(Action<int, rawBpMilestone> filter,string tag="") => BpMilestoneVisitor.Range(filter,tag);
		public static List<int> KeysBpMilestoneMap(string tag="") => BpMilestoneVisitor.Keys(tag);
		public static rawBpMilestone? GetBpMilestone(int key,string tag="") => BpMilestoneVisitor.Get(key,tag);
		public static List<rawBpMilestone> GetBpMilestoneByFilter(Func<rawBpMilestone, bool> filterFunc,string tag="") => BpMilestoneVisitor.GetByFilter(filterFunc,tag);
		public static rawBpMilestone? GetOneBpMilestoneByFilter(Func<rawBpMilestone, bool> filterFunc,string tag="") => BpMilestoneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion BpMilestone
	#region BpPackInfo
		public static int GetCountBpPackInfoMap(string tag="") => BpPackInfoVisitor.GetCount(tag);
		public static string GetFileNameBpPackInfoMap() => BpPackInfoVisitor.GetFileName();
		public static List<int> SortedKeysBpPackInfoMap(string tag="") => BpPackInfoVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawBpPackInfo> GetBpPackInfoMap(string tag="") => BpPackInfoVisitor.All(tag);
		public static void RangeBpPackInfoMap(Action<int, rawBpPackInfo> filter,string tag="") => BpPackInfoVisitor.Range(filter,tag);
		public static List<int> KeysBpPackInfoMap(string tag="") => BpPackInfoVisitor.Keys(tag);
		public static rawBpPackInfo? GetBpPackInfo(int key,string tag="") => BpPackInfoVisitor.Get(key,tag);
		public static List<rawBpPackInfo> GetBpPackInfoByFilter(Func<rawBpPackInfo, bool> filterFunc,string tag="") => BpPackInfoVisitor.GetByFilter(filterFunc,tag);
		public static rawBpPackInfo? GetOneBpPackInfoByFilter(Func<rawBpPackInfo, bool> filterFunc,string tag="") => BpPackInfoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion BpPackInfo
	#region BpTask
		public static int GetCountBpTaskMap(string tag="") => BpTaskVisitor.GetCount(tag);
		public static string GetFileNameBpTaskMap() => BpTaskVisitor.GetFileName();
		public static List<int> SortedKeysBpTaskMap(string tag="") => BpTaskVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawBpTask> GetBpTaskMap(string tag="") => BpTaskVisitor.All(tag);
		public static void RangeBpTaskMap(Action<int, rawBpTask> filter,string tag="") => BpTaskVisitor.Range(filter,tag);
		public static List<int> KeysBpTaskMap(string tag="") => BpTaskVisitor.Keys(tag);
		public static rawBpTask? GetBpTask(int key,string tag="") => BpTaskVisitor.Get(key,tag);
		public static List<rawBpTask> GetBpTaskByFilter(Func<rawBpTask, bool> filterFunc,string tag="") => BpTaskVisitor.GetByFilter(filterFunc,tag);
		public static rawBpTask? GetOneBpTaskByFilter(Func<rawBpTask, bool> filterFunc,string tag="") => BpTaskVisitor.GetOneByFilter(filterFunc,tag);
	#endregion BpTask
	#region BubbleSpawn
		public static int GetCountBubbleSpawnSlice(string tag="") => BubbleSpawnVisitor.GetCount(tag);
		public static string GetFileNameBubbleSpawnSlice() => BubbleSpawnVisitor.GetFileName();
		public static PBC::RepeatedField<rawBubbleSpawn> GetBubbleSpawnSlice(string tag="") => BubbleSpawnVisitor.All(tag);
		public static void RangeBubbleSpawnSlice(Action<int, rawBubbleSpawn> filter,string tag="") => BubbleSpawnVisitor.Range(filter,tag);
		public static rawBubbleSpawn? GetBubbleSpawnByIndex(int index,string tag="") => BubbleSpawnVisitor.GetByIndex(index,tag);
		public static List<rawBubbleSpawn> GetBubbleSpawnByFilter(Func<rawBubbleSpawn, bool> filterFunc,string tag="") => BubbleSpawnVisitor.GetByFilter(filterFunc,tag);
		public static rawBubbleSpawn? GetOneBubbleSpawnByFilter(Func<rawBubbleSpawn, bool> filterFunc,string tag="") => BubbleSpawnVisitor.GetOneByFilter(filterFunc,tag);
	#endregion BubbleSpawn
	#region BuildingBase
		public static int GetCountBuildingBaseMap(string tag="") => BuildingBaseVisitor.GetCount(tag);
		public static string GetFileNameBuildingBaseMap() => BuildingBaseVisitor.GetFileName();
		public static List<int> SortedKeysBuildingBaseMap(string tag="") => BuildingBaseVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawBuildingBase> GetBuildingBaseMap(string tag="") => BuildingBaseVisitor.All(tag);
		public static void RangeBuildingBaseMap(Action<int, rawBuildingBase> filter,string tag="") => BuildingBaseVisitor.Range(filter,tag);
		public static List<int> KeysBuildingBaseMap(string tag="") => BuildingBaseVisitor.Keys(tag);
		public static rawBuildingBase? GetBuildingBase(int key,string tag="") => BuildingBaseVisitor.Get(key,tag);
		public static List<rawBuildingBase> GetBuildingBaseByFilter(Func<rawBuildingBase, bool> filterFunc,string tag="") => BuildingBaseVisitor.GetByFilter(filterFunc,tag);
		public static rawBuildingBase? GetOneBuildingBaseByFilter(Func<rawBuildingBase, bool> filterFunc,string tag="") => BuildingBaseVisitor.GetOneByFilter(filterFunc,tag);
	#endregion BuildingBase
	#region BuildingCost
		public static int GetCountBuildingCostMap(string tag="") => BuildingCostVisitor.GetCount(tag);
		public static string GetFileNameBuildingCostMap() => BuildingCostVisitor.GetFileName();
		public static List<int> SortedKeysBuildingCostMap(string tag="") => BuildingCostVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawBuildingCost> GetBuildingCostMap(string tag="") => BuildingCostVisitor.All(tag);
		public static void RangeBuildingCostMap(Action<int, rawBuildingCost> filter,string tag="") => BuildingCostVisitor.Range(filter,tag);
		public static List<int> KeysBuildingCostMap(string tag="") => BuildingCostVisitor.Keys(tag);
		public static rawBuildingCost? GetBuildingCost(int key,string tag="") => BuildingCostVisitor.Get(key,tag);
		public static List<rawBuildingCost> GetBuildingCostByFilter(Func<rawBuildingCost, bool> filterFunc,string tag="") => BuildingCostVisitor.GetByFilter(filterFunc,tag);
		public static rawBuildingCost? GetOneBuildingCostByFilter(Func<rawBuildingCost, bool> filterFunc,string tag="") => BuildingCostVisitor.GetOneByFilter(filterFunc,tag);
	#endregion BuildingCost
	#region BuildingLevel
		public static int GetCountBuildingLevelMap(string tag="") => BuildingLevelVisitor.GetCount(tag);
		public static string GetFileNameBuildingLevelMap() => BuildingLevelVisitor.GetFileName();
		public static List<int> SortedKeysBuildingLevelMap(string tag="") => BuildingLevelVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawBuildingLevel> GetBuildingLevelMap(string tag="") => BuildingLevelVisitor.All(tag);
		public static void RangeBuildingLevelMap(Action<int, rawBuildingLevel> filter,string tag="") => BuildingLevelVisitor.Range(filter,tag);
		public static List<int> KeysBuildingLevelMap(string tag="") => BuildingLevelVisitor.Keys(tag);
		public static rawBuildingLevel? GetBuildingLevel(int key,string tag="") => BuildingLevelVisitor.Get(key,tag);
		public static List<rawBuildingLevel> GetBuildingLevelByFilter(Func<rawBuildingLevel, bool> filterFunc,string tag="") => BuildingLevelVisitor.GetByFilter(filterFunc,tag);
		public static rawBuildingLevel? GetOneBuildingLevelByFilter(Func<rawBuildingLevel, bool> filterFunc,string tag="") => BuildingLevelVisitor.GetOneByFilter(filterFunc,tag);
	#endregion BuildingLevel
	#region BuildingScene
		public static int GetCountBuildingSceneMap(string tag="") => BuildingSceneVisitor.GetCount(tag);
		public static string GetFileNameBuildingSceneMap() => BuildingSceneVisitor.GetFileName();
		public static List<int> SortedKeysBuildingSceneMap(string tag="") => BuildingSceneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawBuildingScene> GetBuildingSceneMap(string tag="") => BuildingSceneVisitor.All(tag);
		public static void RangeBuildingSceneMap(Action<int, rawBuildingScene> filter,string tag="") => BuildingSceneVisitor.Range(filter,tag);
		public static List<int> KeysBuildingSceneMap(string tag="") => BuildingSceneVisitor.Keys(tag);
		public static rawBuildingScene? GetBuildingScene(int key,string tag="") => BuildingSceneVisitor.Get(key,tag);
		public static List<rawBuildingScene> GetBuildingSceneByFilter(Func<rawBuildingScene, bool> filterFunc,string tag="") => BuildingSceneVisitor.GetByFilter(filterFunc,tag);
		public static rawBuildingScene? GetOneBuildingSceneByFilter(Func<rawBuildingScene, bool> filterFunc,string tag="") => BuildingSceneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion BuildingScene
	#region BumperInfo
		public static int GetCountBumperInfoMap(string tag="") => BumperInfoVisitor.GetCount(tag);
		public static string GetFileNameBumperInfoMap() => BumperInfoVisitor.GetFileName();
		public static List<int> SortedKeysBumperInfoMap(string tag="") => BumperInfoVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawBumperInfo> GetBumperInfoMap(string tag="") => BumperInfoVisitor.All(tag);
		public static void RangeBumperInfoMap(Action<int, rawBumperInfo> filter,string tag="") => BumperInfoVisitor.Range(filter,tag);
		public static List<int> KeysBumperInfoMap(string tag="") => BumperInfoVisitor.Keys(tag);
		public static rawBumperInfo? GetBumperInfo(int key,string tag="") => BumperInfoVisitor.Get(key,tag);
		public static List<rawBumperInfo> GetBumperInfoByFilter(Func<rawBumperInfo, bool> filterFunc,string tag="") => BumperInfoVisitor.GetByFilter(filterFunc,tag);
		public static rawBumperInfo? GetOneBumperInfoByFilter(Func<rawBumperInfo, bool> filterFunc,string tag="") => BumperInfoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion BumperInfo
	#region CardGroup
		public static int GetCountCardGroupMap(string tag="") => CardGroupVisitor.GetCount(tag);
		public static string GetFileNameCardGroupMap() => CardGroupVisitor.GetFileName();
		public static List<int> SortedKeysCardGroupMap(string tag="") => CardGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawCardGroup> GetCardGroupMap(string tag="") => CardGroupVisitor.All(tag);
		public static void RangeCardGroupMap(Action<int, rawCardGroup> filter,string tag="") => CardGroupVisitor.Range(filter,tag);
		public static List<int> KeysCardGroupMap(string tag="") => CardGroupVisitor.Keys(tag);
		public static rawCardGroup? GetCardGroup(int key,string tag="") => CardGroupVisitor.Get(key,tag);
		public static List<rawCardGroup> GetCardGroupByFilter(Func<rawCardGroup, bool> filterFunc,string tag="") => CardGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawCardGroup? GetOneCardGroupByFilter(Func<rawCardGroup, bool> filterFunc,string tag="") => CardGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion CardGroup
	#region CardLimit
		public static int GetCountCardLimitMap(string tag="") => CardLimitVisitor.GetCount(tag);
		public static string GetFileNameCardLimitMap() => CardLimitVisitor.GetFileName();
		public static List<int> SortedKeysCardLimitMap(string tag="") => CardLimitVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawCardLimit> GetCardLimitMap(string tag="") => CardLimitVisitor.All(tag);
		public static void RangeCardLimitMap(Action<int, rawCardLimit> filter,string tag="") => CardLimitVisitor.Range(filter,tag);
		public static List<int> KeysCardLimitMap(string tag="") => CardLimitVisitor.Keys(tag);
		public static rawCardLimit? GetCardLimit(int key,string tag="") => CardLimitVisitor.Get(key,tag);
		public static List<rawCardLimit> GetCardLimitByFilter(Func<rawCardLimit, bool> filterFunc,string tag="") => CardLimitVisitor.GetByFilter(filterFunc,tag);
		public static rawCardLimit? GetOneCardLimitByFilter(Func<rawCardLimit, bool> filterFunc,string tag="") => CardLimitVisitor.GetOneByFilter(filterFunc,tag);
	#endregion CardLimit
	#region CastleMilestone
		public static int GetCountCastleMilestoneMap(string tag="") => CastleMilestoneVisitor.GetCount(tag);
		public static string GetFileNameCastleMilestoneMap() => CastleMilestoneVisitor.GetFileName();
		public static List<int> SortedKeysCastleMilestoneMap(string tag="") => CastleMilestoneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawCastleMilestone> GetCastleMilestoneMap(string tag="") => CastleMilestoneVisitor.All(tag);
		public static void RangeCastleMilestoneMap(Action<int, rawCastleMilestone> filter,string tag="") => CastleMilestoneVisitor.Range(filter,tag);
		public static List<int> KeysCastleMilestoneMap(string tag="") => CastleMilestoneVisitor.Keys(tag);
		public static rawCastleMilestone? GetCastleMilestone(int key,string tag="") => CastleMilestoneVisitor.Get(key,tag);
		public static List<rawCastleMilestone> GetCastleMilestoneByFilter(Func<rawCastleMilestone, bool> filterFunc,string tag="") => CastleMilestoneVisitor.GetByFilter(filterFunc,tag);
		public static rawCastleMilestone? GetOneCastleMilestoneByFilter(Func<rawCastleMilestone, bool> filterFunc,string tag="") => CastleMilestoneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion CastleMilestone
	#region CastleMilestoneDetail
		public static int GetCountCastleMilestoneDetailMap(string tag="") => CastleMilestoneDetailVisitor.GetCount(tag);
		public static string GetFileNameCastleMilestoneDetailMap() => CastleMilestoneDetailVisitor.GetFileName();
		public static List<int> SortedKeysCastleMilestoneDetailMap(string tag="") => CastleMilestoneDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawCastleMilestoneDetail> GetCastleMilestoneDetailMap(string tag="") => CastleMilestoneDetailVisitor.All(tag);
		public static void RangeCastleMilestoneDetailMap(Action<int, rawCastleMilestoneDetail> filter,string tag="") => CastleMilestoneDetailVisitor.Range(filter,tag);
		public static List<int> KeysCastleMilestoneDetailMap(string tag="") => CastleMilestoneDetailVisitor.Keys(tag);
		public static rawCastleMilestoneDetail? GetCastleMilestoneDetail(int key,string tag="") => CastleMilestoneDetailVisitor.Get(key,tag);
		public static List<rawCastleMilestoneDetail> GetCastleMilestoneDetailByFilter(Func<rawCastleMilestoneDetail, bool> filterFunc,string tag="") => CastleMilestoneDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawCastleMilestoneDetail? GetOneCastleMilestoneDetailByFilter(Func<rawCastleMilestoneDetail, bool> filterFunc,string tag="") => CastleMilestoneDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion CastleMilestoneDetail
	#region CastleMilestoneGroup
		public static int GetCountCastleMilestoneGroupMap(string tag="") => CastleMilestoneGroupVisitor.GetCount(tag);
		public static string GetFileNameCastleMilestoneGroupMap() => CastleMilestoneGroupVisitor.GetFileName();
		public static List<int> SortedKeysCastleMilestoneGroupMap(string tag="") => CastleMilestoneGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawCastleMilestoneGroup> GetCastleMilestoneGroupMap(string tag="") => CastleMilestoneGroupVisitor.All(tag);
		public static void RangeCastleMilestoneGroupMap(Action<int, rawCastleMilestoneGroup> filter,string tag="") => CastleMilestoneGroupVisitor.Range(filter,tag);
		public static List<int> KeysCastleMilestoneGroupMap(string tag="") => CastleMilestoneGroupVisitor.Keys(tag);
		public static rawCastleMilestoneGroup? GetCastleMilestoneGroup(int key,string tag="") => CastleMilestoneGroupVisitor.Get(key,tag);
		public static List<rawCastleMilestoneGroup> GetCastleMilestoneGroupByFilter(Func<rawCastleMilestoneGroup, bool> filterFunc,string tag="") => CastleMilestoneGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawCastleMilestoneGroup? GetOneCastleMilestoneGroupByFilter(Func<rawCastleMilestoneGroup, bool> filterFunc,string tag="") => CastleMilestoneGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion CastleMilestoneGroup
	#region ComMergeActiveSource
		public static int GetCountComMergeActiveSourceMap(string tag="") => ComMergeActiveSourceVisitor.GetCount(tag);
		public static string GetFileNameComMergeActiveSourceMap() => ComMergeActiveSourceVisitor.GetFileName();
		public static List<int> SortedKeysComMergeActiveSourceMap(string tag="") => ComMergeActiveSourceVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeActiveSource> GetComMergeActiveSourceMap(string tag="") => ComMergeActiveSourceVisitor.All(tag);
		public static void RangeComMergeActiveSourceMap(Action<int, rawComMergeActiveSource> filter,string tag="") => ComMergeActiveSourceVisitor.Range(filter,tag);
		public static List<int> KeysComMergeActiveSourceMap(string tag="") => ComMergeActiveSourceVisitor.Keys(tag);
		public static rawComMergeActiveSource? GetComMergeActiveSource(int key,string tag="") => ComMergeActiveSourceVisitor.Get(key,tag);
		public static List<rawComMergeActiveSource> GetComMergeActiveSourceByFilter(Func<rawComMergeActiveSource, bool> filterFunc,string tag="") => ComMergeActiveSourceVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeActiveSource? GetOneComMergeActiveSourceByFilter(Func<rawComMergeActiveSource, bool> filterFunc,string tag="") => ComMergeActiveSourceVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeActiveSource
	#region ComMergeAutoSource
		public static int GetCountComMergeAutoSourceMap(string tag="") => ComMergeAutoSourceVisitor.GetCount(tag);
		public static string GetFileNameComMergeAutoSourceMap() => ComMergeAutoSourceVisitor.GetFileName();
		public static List<int> SortedKeysComMergeAutoSourceMap(string tag="") => ComMergeAutoSourceVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeAutoSource> GetComMergeAutoSourceMap(string tag="") => ComMergeAutoSourceVisitor.All(tag);
		public static void RangeComMergeAutoSourceMap(Action<int, rawComMergeAutoSource> filter,string tag="") => ComMergeAutoSourceVisitor.Range(filter,tag);
		public static List<int> KeysComMergeAutoSourceMap(string tag="") => ComMergeAutoSourceVisitor.Keys(tag);
		public static rawComMergeAutoSource? GetComMergeAutoSource(int key,string tag="") => ComMergeAutoSourceVisitor.Get(key,tag);
		public static List<rawComMergeAutoSource> GetComMergeAutoSourceByFilter(Func<rawComMergeAutoSource, bool> filterFunc,string tag="") => ComMergeAutoSourceVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeAutoSource? GetOneComMergeAutoSourceByFilter(Func<rawComMergeAutoSource, bool> filterFunc,string tag="") => ComMergeAutoSourceVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeAutoSource
	#region ComMergeBonus
		public static int GetCountComMergeBonusMap(string tag="") => ComMergeBonusVisitor.GetCount(tag);
		public static string GetFileNameComMergeBonusMap() => ComMergeBonusVisitor.GetFileName();
		public static List<int> SortedKeysComMergeBonusMap(string tag="") => ComMergeBonusVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeBonus> GetComMergeBonusMap(string tag="") => ComMergeBonusVisitor.All(tag);
		public static void RangeComMergeBonusMap(Action<int, rawComMergeBonus> filter,string tag="") => ComMergeBonusVisitor.Range(filter,tag);
		public static List<int> KeysComMergeBonusMap(string tag="") => ComMergeBonusVisitor.Keys(tag);
		public static rawComMergeBonus? GetComMergeBonus(int key,string tag="") => ComMergeBonusVisitor.Get(key,tag);
		public static List<rawComMergeBonus> GetComMergeBonusByFilter(Func<rawComMergeBonus, bool> filterFunc,string tag="") => ComMergeBonusVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeBonus? GetOneComMergeBonusByFilter(Func<rawComMergeBonus, bool> filterFunc,string tag="") => ComMergeBonusVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeBonus
	#region ComMergeBox
		public static int GetCountComMergeBoxMap(string tag="") => ComMergeBoxVisitor.GetCount(tag);
		public static string GetFileNameComMergeBoxMap() => ComMergeBoxVisitor.GetFileName();
		public static List<int> SortedKeysComMergeBoxMap(string tag="") => ComMergeBoxVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeBox> GetComMergeBoxMap(string tag="") => ComMergeBoxVisitor.All(tag);
		public static void RangeComMergeBoxMap(Action<int, rawComMergeBox> filter,string tag="") => ComMergeBoxVisitor.Range(filter,tag);
		public static List<int> KeysComMergeBoxMap(string tag="") => ComMergeBoxVisitor.Keys(tag);
		public static rawComMergeBox? GetComMergeBox(int key,string tag="") => ComMergeBoxVisitor.Get(key,tag);
		public static List<rawComMergeBox> GetComMergeBoxByFilter(Func<rawComMergeBox, bool> filterFunc,string tag="") => ComMergeBoxVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeBox? GetOneComMergeBoxByFilter(Func<rawComMergeBox, bool> filterFunc,string tag="") => ComMergeBoxVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeBox
	#region ComMergeChest
		public static int GetCountComMergeChestMap(string tag="") => ComMergeChestVisitor.GetCount(tag);
		public static string GetFileNameComMergeChestMap() => ComMergeChestVisitor.GetFileName();
		public static List<string> SortedKeysComMergeChestMap(string tag="") => ComMergeChestVisitor.SortedKeys(tag);
		public static PBC::MapField<string, rawComMergeChest> GetComMergeChestMap(string tag="") => ComMergeChestVisitor.All(tag);
		public static void RangeComMergeChestMap(Action<string, rawComMergeChest> filter,string tag="") => ComMergeChestVisitor.Range(filter,tag);
		public static List<string> KeysComMergeChestMap(string tag="") => ComMergeChestVisitor.Keys(tag);
		public static rawComMergeChest? GetComMergeChest(string key,string tag="") => ComMergeChestVisitor.Get(key,tag);
		public static List<rawComMergeChest> GetComMergeChestByFilter(Func<rawComMergeChest, bool> filterFunc,string tag="") => ComMergeChestVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeChest? GetOneComMergeChestByFilter(Func<rawComMergeChest, bool> filterFunc,string tag="") => ComMergeChestVisitor.GetOneByFilter(filterFunc,tag);
        public static rawComMergeChest GetComMergeChestByCombinedKeys(ComMergeChestVisitor.CK ck) => ComMergeChestVisitor.GetByCombinedKeys(ck);
	#endregion ComMergeChest
	#region ComMergeChoiceBox
		public static int GetCountComMergeChoiceBoxMap(string tag="") => ComMergeChoiceBoxVisitor.GetCount(tag);
		public static string GetFileNameComMergeChoiceBoxMap() => ComMergeChoiceBoxVisitor.GetFileName();
		public static List<int> SortedKeysComMergeChoiceBoxMap(string tag="") => ComMergeChoiceBoxVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeChoiceBox> GetComMergeChoiceBoxMap(string tag="") => ComMergeChoiceBoxVisitor.All(tag);
		public static void RangeComMergeChoiceBoxMap(Action<int, rawComMergeChoiceBox> filter,string tag="") => ComMergeChoiceBoxVisitor.Range(filter,tag);
		public static List<int> KeysComMergeChoiceBoxMap(string tag="") => ComMergeChoiceBoxVisitor.Keys(tag);
		public static rawComMergeChoiceBox? GetComMergeChoiceBox(int key,string tag="") => ComMergeChoiceBoxVisitor.Get(key,tag);
		public static List<rawComMergeChoiceBox> GetComMergeChoiceBoxByFilter(Func<rawComMergeChoiceBox, bool> filterFunc,string tag="") => ComMergeChoiceBoxVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeChoiceBox? GetOneComMergeChoiceBoxByFilter(Func<rawComMergeChoiceBox, bool> filterFunc,string tag="") => ComMergeChoiceBoxVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeChoiceBox
	#region ComMergeDying
		public static int GetCountComMergeDyingMap(string tag="") => ComMergeDyingVisitor.GetCount(tag);
		public static string GetFileNameComMergeDyingMap() => ComMergeDyingVisitor.GetFileName();
		public static List<int> SortedKeysComMergeDyingMap(string tag="") => ComMergeDyingVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeDying> GetComMergeDyingMap(string tag="") => ComMergeDyingVisitor.All(tag);
		public static void RangeComMergeDyingMap(Action<int, rawComMergeDying> filter,string tag="") => ComMergeDyingVisitor.Range(filter,tag);
		public static List<int> KeysComMergeDyingMap(string tag="") => ComMergeDyingVisitor.Keys(tag);
		public static rawComMergeDying? GetComMergeDying(int key,string tag="") => ComMergeDyingVisitor.Get(key,tag);
		public static List<rawComMergeDying> GetComMergeDyingByFilter(Func<rawComMergeDying, bool> filterFunc,string tag="") => ComMergeDyingVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeDying? GetOneComMergeDyingByFilter(Func<rawComMergeDying, bool> filterFunc,string tag="") => ComMergeDyingVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeDying
	#region ComMergeEat
		public static int GetCountComMergeEatMap(string tag="") => ComMergeEatVisitor.GetCount(tag);
		public static string GetFileNameComMergeEatMap() => ComMergeEatVisitor.GetFileName();
		public static List<int> SortedKeysComMergeEatMap(string tag="") => ComMergeEatVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeEat> GetComMergeEatMap(string tag="") => ComMergeEatVisitor.All(tag);
		public static void RangeComMergeEatMap(Action<int, rawComMergeEat> filter,string tag="") => ComMergeEatVisitor.Range(filter,tag);
		public static List<int> KeysComMergeEatMap(string tag="") => ComMergeEatVisitor.Keys(tag);
		public static rawComMergeEat? GetComMergeEat(int key,string tag="") => ComMergeEatVisitor.Get(key,tag);
		public static List<rawComMergeEat> GetComMergeEatByFilter(Func<rawComMergeEat, bool> filterFunc,string tag="") => ComMergeEatVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeEat? GetOneComMergeEatByFilter(Func<rawComMergeEat, bool> filterFunc,string tag="") => ComMergeEatVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeEat
	#region ComMergeEatSource
		public static int GetCountComMergeEatSourceMap(string tag="") => ComMergeEatSourceVisitor.GetCount(tag);
		public static string GetFileNameComMergeEatSourceMap() => ComMergeEatSourceVisitor.GetFileName();
		public static List<int> SortedKeysComMergeEatSourceMap(string tag="") => ComMergeEatSourceVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeEatSource> GetComMergeEatSourceMap(string tag="") => ComMergeEatSourceVisitor.All(tag);
		public static void RangeComMergeEatSourceMap(Action<int, rawComMergeEatSource> filter,string tag="") => ComMergeEatSourceVisitor.Range(filter,tag);
		public static List<int> KeysComMergeEatSourceMap(string tag="") => ComMergeEatSourceVisitor.Keys(tag);
		public static rawComMergeEatSource? GetComMergeEatSource(int key,string tag="") => ComMergeEatSourceVisitor.Get(key,tag);
		public static List<rawComMergeEatSource> GetComMergeEatSourceByFilter(Func<rawComMergeEatSource, bool> filterFunc,string tag="") => ComMergeEatSourceVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeEatSource? GetOneComMergeEatSourceByFilter(Func<rawComMergeEatSource, bool> filterFunc,string tag="") => ComMergeEatSourceVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeEatSource
	#region ComMergeFeature
		public static int GetCountComMergeFeatureMap(string tag="") => ComMergeFeatureVisitor.GetCount(tag);
		public static string GetFileNameComMergeFeatureMap() => ComMergeFeatureVisitor.GetFileName();
		public static List<int> SortedKeysComMergeFeatureMap(string tag="") => ComMergeFeatureVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeFeature> GetComMergeFeatureMap(string tag="") => ComMergeFeatureVisitor.All(tag);
		public static void RangeComMergeFeatureMap(Action<int, rawComMergeFeature> filter,string tag="") => ComMergeFeatureVisitor.Range(filter,tag);
		public static List<int> KeysComMergeFeatureMap(string tag="") => ComMergeFeatureVisitor.Keys(tag);
		public static rawComMergeFeature? GetComMergeFeature(int key,string tag="") => ComMergeFeatureVisitor.Get(key,tag);
		public static List<rawComMergeFeature> GetComMergeFeatureByFilter(Func<rawComMergeFeature, bool> filterFunc,string tag="") => ComMergeFeatureVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeFeature? GetOneComMergeFeatureByFilter(Func<rawComMergeFeature, bool> filterFunc,string tag="") => ComMergeFeatureVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeFeature
	#region ComMergeJumpCD
		public static int GetCountComMergeJumpCDMap(string tag="") => ComMergeJumpCDVisitor.GetCount(tag);
		public static string GetFileNameComMergeJumpCDMap() => ComMergeJumpCDVisitor.GetFileName();
		public static List<int> SortedKeysComMergeJumpCDMap(string tag="") => ComMergeJumpCDVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeJumpCD> GetComMergeJumpCDMap(string tag="") => ComMergeJumpCDVisitor.All(tag);
		public static void RangeComMergeJumpCDMap(Action<int, rawComMergeJumpCD> filter,string tag="") => ComMergeJumpCDVisitor.Range(filter,tag);
		public static List<int> KeysComMergeJumpCDMap(string tag="") => ComMergeJumpCDVisitor.Keys(tag);
		public static rawComMergeJumpCD? GetComMergeJumpCD(int key,string tag="") => ComMergeJumpCDVisitor.Get(key,tag);
		public static List<rawComMergeJumpCD> GetComMergeJumpCDByFilter(Func<rawComMergeJumpCD, bool> filterFunc,string tag="") => ComMergeJumpCDVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeJumpCD? GetOneComMergeJumpCDByFilter(Func<rawComMergeJumpCD, bool> filterFunc,string tag="") => ComMergeJumpCDVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeJumpCD
	#region ComMergeMixSource
		public static int GetCountComMergeMixSourceMap(string tag="") => ComMergeMixSourceVisitor.GetCount(tag);
		public static string GetFileNameComMergeMixSourceMap() => ComMergeMixSourceVisitor.GetFileName();
		public static List<int> SortedKeysComMergeMixSourceMap(string tag="") => ComMergeMixSourceVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeMixSource> GetComMergeMixSourceMap(string tag="") => ComMergeMixSourceVisitor.All(tag);
		public static void RangeComMergeMixSourceMap(Action<int, rawComMergeMixSource> filter,string tag="") => ComMergeMixSourceVisitor.Range(filter,tag);
		public static List<int> KeysComMergeMixSourceMap(string tag="") => ComMergeMixSourceVisitor.Keys(tag);
		public static rawComMergeMixSource? GetComMergeMixSource(int key,string tag="") => ComMergeMixSourceVisitor.Get(key,tag);
		public static List<rawComMergeMixSource> GetComMergeMixSourceByFilter(Func<rawComMergeMixSource, bool> filterFunc,string tag="") => ComMergeMixSourceVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeMixSource? GetOneComMergeMixSourceByFilter(Func<rawComMergeMixSource, bool> filterFunc,string tag="") => ComMergeMixSourceVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeMixSource
	#region ComMergeOrderBox
		public static int GetCountComMergeOrderBoxMap(string tag="") => ComMergeOrderBoxVisitor.GetCount(tag);
		public static string GetFileNameComMergeOrderBoxMap() => ComMergeOrderBoxVisitor.GetFileName();
		public static List<int> SortedKeysComMergeOrderBoxMap(string tag="") => ComMergeOrderBoxVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeOrderBox> GetComMergeOrderBoxMap(string tag="") => ComMergeOrderBoxVisitor.All(tag);
		public static void RangeComMergeOrderBoxMap(Action<int, rawComMergeOrderBox> filter,string tag="") => ComMergeOrderBoxVisitor.Range(filter,tag);
		public static List<int> KeysComMergeOrderBoxMap(string tag="") => ComMergeOrderBoxVisitor.Keys(tag);
		public static rawComMergeOrderBox? GetComMergeOrderBox(int key,string tag="") => ComMergeOrderBoxVisitor.Get(key,tag);
		public static List<rawComMergeOrderBox> GetComMergeOrderBoxByFilter(Func<rawComMergeOrderBox, bool> filterFunc,string tag="") => ComMergeOrderBoxVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeOrderBox? GetOneComMergeOrderBoxByFilter(Func<rawComMergeOrderBox, bool> filterFunc,string tag="") => ComMergeOrderBoxVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeOrderBox
	#region ComMergeSkill
		public static int GetCountComMergeSkillMap(string tag="") => ComMergeSkillVisitor.GetCount(tag);
		public static string GetFileNameComMergeSkillMap() => ComMergeSkillVisitor.GetFileName();
		public static List<int> SortedKeysComMergeSkillMap(string tag="") => ComMergeSkillVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeSkill> GetComMergeSkillMap(string tag="") => ComMergeSkillVisitor.All(tag);
		public static void RangeComMergeSkillMap(Action<int, rawComMergeSkill> filter,string tag="") => ComMergeSkillVisitor.Range(filter,tag);
		public static List<int> KeysComMergeSkillMap(string tag="") => ComMergeSkillVisitor.Keys(tag);
		public static rawComMergeSkill? GetComMergeSkill(int key,string tag="") => ComMergeSkillVisitor.Get(key,tag);
		public static List<rawComMergeSkill> GetComMergeSkillByFilter(Func<rawComMergeSkill, bool> filterFunc,string tag="") => ComMergeSkillVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeSkill? GetOneComMergeSkillByFilter(Func<rawComMergeSkill, bool> filterFunc,string tag="") => ComMergeSkillVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeSkill
	#region ComMergeSpecialBox
		public static int GetCountComMergeSpecialBoxMap(string tag="") => ComMergeSpecialBoxVisitor.GetCount(tag);
		public static string GetFileNameComMergeSpecialBoxMap() => ComMergeSpecialBoxVisitor.GetFileName();
		public static List<int> SortedKeysComMergeSpecialBoxMap(string tag="") => ComMergeSpecialBoxVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeSpecialBox> GetComMergeSpecialBoxMap(string tag="") => ComMergeSpecialBoxVisitor.All(tag);
		public static void RangeComMergeSpecialBoxMap(Action<int, rawComMergeSpecialBox> filter,string tag="") => ComMergeSpecialBoxVisitor.Range(filter,tag);
		public static List<int> KeysComMergeSpecialBoxMap(string tag="") => ComMergeSpecialBoxVisitor.Keys(tag);
		public static rawComMergeSpecialBox? GetComMergeSpecialBox(int key,string tag="") => ComMergeSpecialBoxVisitor.Get(key,tag);
		public static List<rawComMergeSpecialBox> GetComMergeSpecialBoxByFilter(Func<rawComMergeSpecialBox, bool> filterFunc,string tag="") => ComMergeSpecialBoxVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeSpecialBox? GetOneComMergeSpecialBoxByFilter(Func<rawComMergeSpecialBox, bool> filterFunc,string tag="") => ComMergeSpecialBoxVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeSpecialBox
	#region ComMergeTapSource
		public static int GetCountComMergeTapSourceMap(string tag="") => ComMergeTapSourceVisitor.GetCount(tag);
		public static string GetFileNameComMergeTapSourceMap() => ComMergeTapSourceVisitor.GetFileName();
		public static List<string> SortedKeysComMergeTapSourceMap(string tag="") => ComMergeTapSourceVisitor.SortedKeys(tag);
		public static PBC::MapField<string, rawComMergeTapSource> GetComMergeTapSourceMap(string tag="") => ComMergeTapSourceVisitor.All(tag);
		public static void RangeComMergeTapSourceMap(Action<string, rawComMergeTapSource> filter,string tag="") => ComMergeTapSourceVisitor.Range(filter,tag);
		public static List<string> KeysComMergeTapSourceMap(string tag="") => ComMergeTapSourceVisitor.Keys(tag);
		public static rawComMergeTapSource? GetComMergeTapSource(string key,string tag="") => ComMergeTapSourceVisitor.Get(key,tag);
		public static List<rawComMergeTapSource> GetComMergeTapSourceByFilter(Func<rawComMergeTapSource, bool> filterFunc,string tag="") => ComMergeTapSourceVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeTapSource? GetOneComMergeTapSourceByFilter(Func<rawComMergeTapSource, bool> filterFunc,string tag="") => ComMergeTapSourceVisitor.GetOneByFilter(filterFunc,tag);
        public static rawComMergeTapSource GetComMergeTapSourceByCombinedKeys(ComMergeTapSourceVisitor.CK ck) => ComMergeTapSourceVisitor.GetByCombinedKeys(ck);
	#endregion ComMergeTapSource
	#region ComMergeTimeSkip
		public static int GetCountComMergeTimeSkipMap(string tag="") => ComMergeTimeSkipVisitor.GetCount(tag);
		public static string GetFileNameComMergeTimeSkipMap() => ComMergeTimeSkipVisitor.GetFileName();
		public static List<int> SortedKeysComMergeTimeSkipMap(string tag="") => ComMergeTimeSkipVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeTimeSkip> GetComMergeTimeSkipMap(string tag="") => ComMergeTimeSkipVisitor.All(tag);
		public static void RangeComMergeTimeSkipMap(Action<int, rawComMergeTimeSkip> filter,string tag="") => ComMergeTimeSkipVisitor.Range(filter,tag);
		public static List<int> KeysComMergeTimeSkipMap(string tag="") => ComMergeTimeSkipVisitor.Keys(tag);
		public static rawComMergeTimeSkip? GetComMergeTimeSkip(int key,string tag="") => ComMergeTimeSkipVisitor.Get(key,tag);
		public static List<rawComMergeTimeSkip> GetComMergeTimeSkipByFilter(Func<rawComMergeTimeSkip, bool> filterFunc,string tag="") => ComMergeTimeSkipVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeTimeSkip? GetOneComMergeTimeSkipByFilter(Func<rawComMergeTimeSkip, bool> filterFunc,string tag="") => ComMergeTimeSkipVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeTimeSkip
	#region ComMergeTokenMultiplier
		public static int GetCountComMergeTokenMultiplierMap(string tag="") => ComMergeTokenMultiplierVisitor.GetCount(tag);
		public static string GetFileNameComMergeTokenMultiplierMap() => ComMergeTokenMultiplierVisitor.GetFileName();
		public static List<int> SortedKeysComMergeTokenMultiplierMap(string tag="") => ComMergeTokenMultiplierVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeTokenMultiplier> GetComMergeTokenMultiplierMap(string tag="") => ComMergeTokenMultiplierVisitor.All(tag);
		public static void RangeComMergeTokenMultiplierMap(Action<int, rawComMergeTokenMultiplier> filter,string tag="") => ComMergeTokenMultiplierVisitor.Range(filter,tag);
		public static List<int> KeysComMergeTokenMultiplierMap(string tag="") => ComMergeTokenMultiplierVisitor.Keys(tag);
		public static rawComMergeTokenMultiplier? GetComMergeTokenMultiplier(int key,string tag="") => ComMergeTokenMultiplierVisitor.Get(key,tag);
		public static List<rawComMergeTokenMultiplier> GetComMergeTokenMultiplierByFilter(Func<rawComMergeTokenMultiplier, bool> filterFunc,string tag="") => ComMergeTokenMultiplierVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeTokenMultiplier? GetOneComMergeTokenMultiplierByFilter(Func<rawComMergeTokenMultiplier, bool> filterFunc,string tag="") => ComMergeTokenMultiplierVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeTokenMultiplier
	#region ComMergeToolSource
		public static int GetCountComMergeToolSourceMap(string tag="") => ComMergeToolSourceVisitor.GetCount(tag);
		public static string GetFileNameComMergeToolSourceMap() => ComMergeToolSourceVisitor.GetFileName();
		public static List<int> SortedKeysComMergeToolSourceMap(string tag="") => ComMergeToolSourceVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComMergeToolSource> GetComMergeToolSourceMap(string tag="") => ComMergeToolSourceVisitor.All(tag);
		public static void RangeComMergeToolSourceMap(Action<int, rawComMergeToolSource> filter,string tag="") => ComMergeToolSourceVisitor.Range(filter,tag);
		public static List<int> KeysComMergeToolSourceMap(string tag="") => ComMergeToolSourceVisitor.Keys(tag);
		public static rawComMergeToolSource? GetComMergeToolSource(int key,string tag="") => ComMergeToolSourceVisitor.Get(key,tag);
		public static List<rawComMergeToolSource> GetComMergeToolSourceByFilter(Func<rawComMergeToolSource, bool> filterFunc,string tag="") => ComMergeToolSourceVisitor.GetByFilter(filterFunc,tag);
		public static rawComMergeToolSource? GetOneComMergeToolSourceByFilter(Func<rawComMergeToolSource, bool> filterFunc,string tag="") => ComMergeToolSourceVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComMergeToolSource
	#region ComTapBonus
		public static int GetCountComTapBonusMap(string tag="") => ComTapBonusVisitor.GetCount(tag);
		public static string GetFileNameComTapBonusMap() => ComTapBonusVisitor.GetFileName();
		public static List<int> SortedKeysComTapBonusMap(string tag="") => ComTapBonusVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComTapBonus> GetComTapBonusMap(string tag="") => ComTapBonusVisitor.All(tag);
		public static void RangeComTapBonusMap(Action<int, rawComTapBonus> filter,string tag="") => ComTapBonusVisitor.Range(filter,tag);
		public static List<int> KeysComTapBonusMap(string tag="") => ComTapBonusVisitor.Keys(tag);
		public static rawComTapBonus? GetComTapBonus(int key,string tag="") => ComTapBonusVisitor.Get(key,tag);
		public static List<rawComTapBonus> GetComTapBonusByFilter(Func<rawComTapBonus, bool> filterFunc,string tag="") => ComTapBonusVisitor.GetByFilter(filterFunc,tag);
		public static rawComTapBonus? GetOneComTapBonusByFilter(Func<rawComTapBonus, bool> filterFunc,string tag="") => ComTapBonusVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComTapBonus
	#region ComTimeMachine
		public static int GetCountComTimeMachineMap(string tag="") => ComTimeMachineVisitor.GetCount(tag);
		public static string GetFileNameComTimeMachineMap() => ComTimeMachineVisitor.GetFileName();
		public static List<int> SortedKeysComTimeMachineMap(string tag="") => ComTimeMachineVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComTimeMachine> GetComTimeMachineMap(string tag="") => ComTimeMachineVisitor.All(tag);
		public static void RangeComTimeMachineMap(Action<int, rawComTimeMachine> filter,string tag="") => ComTimeMachineVisitor.Range(filter,tag);
		public static List<int> KeysComTimeMachineMap(string tag="") => ComTimeMachineVisitor.Keys(tag);
		public static rawComTimeMachine? GetComTimeMachine(int key,string tag="") => ComTimeMachineVisitor.Get(key,tag);
		public static List<rawComTimeMachine> GetComTimeMachineByFilter(Func<rawComTimeMachine, bool> filterFunc,string tag="") => ComTimeMachineVisitor.GetByFilter(filterFunc,tag);
		public static rawComTimeMachine? GetOneComTimeMachineByFilter(Func<rawComTimeMachine, bool> filterFunc,string tag="") => ComTimeMachineVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComTimeMachine
	#region ComTrigAutoDetail
		public static int GetCountComTrigAutoDetailMap(string tag="") => ComTrigAutoDetailVisitor.GetCount(tag);
		public static string GetFileNameComTrigAutoDetailMap() => ComTrigAutoDetailVisitor.GetFileName();
		public static List<int> SortedKeysComTrigAutoDetailMap(string tag="") => ComTrigAutoDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComTrigAutoDetail> GetComTrigAutoDetailMap(string tag="") => ComTrigAutoDetailVisitor.All(tag);
		public static void RangeComTrigAutoDetailMap(Action<int, rawComTrigAutoDetail> filter,string tag="") => ComTrigAutoDetailVisitor.Range(filter,tag);
		public static List<int> KeysComTrigAutoDetailMap(string tag="") => ComTrigAutoDetailVisitor.Keys(tag);
		public static rawComTrigAutoDetail? GetComTrigAutoDetail(int key,string tag="") => ComTrigAutoDetailVisitor.Get(key,tag);
		public static List<rawComTrigAutoDetail> GetComTrigAutoDetailByFilter(Func<rawComTrigAutoDetail, bool> filterFunc,string tag="") => ComTrigAutoDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawComTrigAutoDetail? GetOneComTrigAutoDetailByFilter(Func<rawComTrigAutoDetail, bool> filterFunc,string tag="") => ComTrigAutoDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComTrigAutoDetail
	#region ComTrigAutoSource
		public static int GetCountComTrigAutoSourceMap(string tag="") => ComTrigAutoSourceVisitor.GetCount(tag);
		public static string GetFileNameComTrigAutoSourceMap() => ComTrigAutoSourceVisitor.GetFileName();
		public static List<int> SortedKeysComTrigAutoSourceMap(string tag="") => ComTrigAutoSourceVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawComTrigAutoSource> GetComTrigAutoSourceMap(string tag="") => ComTrigAutoSourceVisitor.All(tag);
		public static void RangeComTrigAutoSourceMap(Action<int, rawComTrigAutoSource> filter,string tag="") => ComTrigAutoSourceVisitor.Range(filter,tag);
		public static List<int> KeysComTrigAutoSourceMap(string tag="") => ComTrigAutoSourceVisitor.Keys(tag);
		public static rawComTrigAutoSource? GetComTrigAutoSource(int key,string tag="") => ComTrigAutoSourceVisitor.Get(key,tag);
		public static List<rawComTrigAutoSource> GetComTrigAutoSourceByFilter(Func<rawComTrigAutoSource, bool> filterFunc,string tag="") => ComTrigAutoSourceVisitor.GetByFilter(filterFunc,tag);
		public static rawComTrigAutoSource? GetOneComTrigAutoSourceByFilter(Func<rawComTrigAutoSource, bool> filterFunc,string tag="") => ComTrigAutoSourceVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ComTrigAutoSource
	#region CommunityLink
		public static int GetCountCommunityLinkMap(string tag="") => CommunityLinkVisitor.GetCount(tag);
		public static string GetFileNameCommunityLinkMap() => CommunityLinkVisitor.GetFileName();
		public static List<int> SortedKeysCommunityLinkMap(string tag="") => CommunityLinkVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawCommunityLink> GetCommunityLinkMap(string tag="") => CommunityLinkVisitor.All(tag);
		public static void RangeCommunityLinkMap(Action<int, rawCommunityLink> filter,string tag="") => CommunityLinkVisitor.Range(filter,tag);
		public static List<int> KeysCommunityLinkMap(string tag="") => CommunityLinkVisitor.Keys(tag);
		public static rawCommunityLink? GetCommunityLink(int key,string tag="") => CommunityLinkVisitor.Get(key,tag);
		public static List<rawCommunityLink> GetCommunityLinkByFilter(Func<rawCommunityLink, bool> filterFunc,string tag="") => CommunityLinkVisitor.GetByFilter(filterFunc,tag);
		public static rawCommunityLink? GetOneCommunityLinkByFilter(Func<rawCommunityLink, bool> filterFunc,string tag="") => CommunityLinkVisitor.GetOneByFilter(filterFunc,tag);
	#endregion CommunityLink
	#region CurrencyPack
		public static int GetCountCurrencyPackMap(string tag="") => CurrencyPackVisitor.GetCount(tag);
		public static string GetFileNameCurrencyPackMap() => CurrencyPackVisitor.GetFileName();
		public static List<int> SortedKeysCurrencyPackMap(string tag="") => CurrencyPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawCurrencyPack> GetCurrencyPackMap(string tag="") => CurrencyPackVisitor.All(tag);
		public static void RangeCurrencyPackMap(Action<int, rawCurrencyPack> filter,string tag="") => CurrencyPackVisitor.Range(filter,tag);
		public static List<int> KeysCurrencyPackMap(string tag="") => CurrencyPackVisitor.Keys(tag);
		public static rawCurrencyPack? GetCurrencyPack(int key,string tag="") => CurrencyPackVisitor.Get(key,tag);
		public static List<rawCurrencyPack> GetCurrencyPackByFilter(Func<rawCurrencyPack, bool> filterFunc,string tag="") => CurrencyPackVisitor.GetByFilter(filterFunc,tag);
		public static rawCurrencyPack? GetOneCurrencyPackByFilter(Func<rawCurrencyPack, bool> filterFunc,string tag="") => CurrencyPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion CurrencyPack
	#region DEGroup
		public static int GetCountDEGroupMap(string tag="") => DEGroupVisitor.GetCount(tag);
		public static string GetFileNameDEGroupMap() => DEGroupVisitor.GetFileName();
		public static List<int> SortedKeysDEGroupMap(string tag="") => DEGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawDEGroup> GetDEGroupMap(string tag="") => DEGroupVisitor.All(tag);
		public static void RangeDEGroupMap(Action<int, rawDEGroup> filter,string tag="") => DEGroupVisitor.Range(filter,tag);
		public static List<int> KeysDEGroupMap(string tag="") => DEGroupVisitor.Keys(tag);
		public static rawDEGroup? GetDEGroup(int key,string tag="") => DEGroupVisitor.Get(key,tag);
		public static List<rawDEGroup> GetDEGroupByFilter(Func<rawDEGroup, bool> filterFunc,string tag="") => DEGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawDEGroup? GetOneDEGroupByFilter(Func<rawDEGroup, bool> filterFunc,string tag="") => DEGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion DEGroup
	#region DEMInfo
		public static int GetCountDEMInfoMap(string tag="") => DEMInfoVisitor.GetCount(tag);
		public static string GetFileNameDEMInfoMap() => DEMInfoVisitor.GetFileName();
		public static List<int> SortedKeysDEMInfoMap(string tag="") => DEMInfoVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawDEMInfo> GetDEMInfoMap(string tag="") => DEMInfoVisitor.All(tag);
		public static void RangeDEMInfoMap(Action<int, rawDEMInfo> filter,string tag="") => DEMInfoVisitor.Range(filter,tag);
		public static List<int> KeysDEMInfoMap(string tag="") => DEMInfoVisitor.Keys(tag);
		public static rawDEMInfo? GetDEMInfo(int key,string tag="") => DEMInfoVisitor.Get(key,tag);
		public static List<rawDEMInfo> GetDEMInfoByFilter(Func<rawDEMInfo, bool> filterFunc,string tag="") => DEMInfoVisitor.GetByFilter(filterFunc,tag);
		public static rawDEMInfo? GetOneDEMInfoByFilter(Func<rawDEMInfo, bool> filterFunc,string tag="") => DEMInfoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion DEMInfo
	#region DailyEventGroup
		public static int GetCountDailyEventGroupMap(string tag="") => DailyEventGroupVisitor.GetCount(tag);
		public static string GetFileNameDailyEventGroupMap() => DailyEventGroupVisitor.GetFileName();
		public static List<int> SortedKeysDailyEventGroupMap(string tag="") => DailyEventGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawDailyEventGroup> GetDailyEventGroupMap(string tag="") => DailyEventGroupVisitor.All(tag);
		public static void RangeDailyEventGroupMap(Action<int, rawDailyEventGroup> filter,string tag="") => DailyEventGroupVisitor.Range(filter,tag);
		public static List<int> KeysDailyEventGroupMap(string tag="") => DailyEventGroupVisitor.Keys(tag);
		public static rawDailyEventGroup? GetDailyEventGroup(int key,string tag="") => DailyEventGroupVisitor.Get(key,tag);
		public static List<rawDailyEventGroup> GetDailyEventGroupByFilter(Func<rawDailyEventGroup, bool> filterFunc,string tag="") => DailyEventGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawDailyEventGroup? GetOneDailyEventGroupByFilter(Func<rawDailyEventGroup, bool> filterFunc,string tag="") => DailyEventGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion DailyEventGroup
	#region DailyEventList
		public static int GetCountDailyEventListMap(string tag="") => DailyEventListVisitor.GetCount(tag);
		public static string GetFileNameDailyEventListMap() => DailyEventListVisitor.GetFileName();
		public static List<int> SortedKeysDailyEventListMap(string tag="") => DailyEventListVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawDailyEventList> GetDailyEventListMap(string tag="") => DailyEventListVisitor.All(tag);
		public static void RangeDailyEventListMap(Action<int, rawDailyEventList> filter,string tag="") => DailyEventListVisitor.Range(filter,tag);
		public static List<int> KeysDailyEventListMap(string tag="") => DailyEventListVisitor.Keys(tag);
		public static rawDailyEventList? GetDailyEventList(int key,string tag="") => DailyEventListVisitor.Get(key,tag);
		public static List<rawDailyEventList> GetDailyEventListByFilter(Func<rawDailyEventList, bool> filterFunc,string tag="") => DailyEventListVisitor.GetByFilter(filterFunc,tag);
		public static rawDailyEventList? GetOneDailyEventListByFilter(Func<rawDailyEventList, bool> filterFunc,string tag="") => DailyEventListVisitor.GetOneByFilter(filterFunc,tag);
	#endregion DailyEventList
	#region DailyEventMilestone
		public static int GetCountDailyEventMilestoneMap(string tag="") => DailyEventMilestoneVisitor.GetCount(tag);
		public static string GetFileNameDailyEventMilestoneMap() => DailyEventMilestoneVisitor.GetFileName();
		public static List<int> SortedKeysDailyEventMilestoneMap(string tag="") => DailyEventMilestoneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawDailyEventMilestone> GetDailyEventMilestoneMap(string tag="") => DailyEventMilestoneVisitor.All(tag);
		public static void RangeDailyEventMilestoneMap(Action<int, rawDailyEventMilestone> filter,string tag="") => DailyEventMilestoneVisitor.Range(filter,tag);
		public static List<int> KeysDailyEventMilestoneMap(string tag="") => DailyEventMilestoneVisitor.Keys(tag);
		public static rawDailyEventMilestone? GetDailyEventMilestone(int key,string tag="") => DailyEventMilestoneVisitor.Get(key,tag);
		public static List<rawDailyEventMilestone> GetDailyEventMilestoneByFilter(Func<rawDailyEventMilestone, bool> filterFunc,string tag="") => DailyEventMilestoneVisitor.GetByFilter(filterFunc,tag);
		public static rawDailyEventMilestone? GetOneDailyEventMilestoneByFilter(Func<rawDailyEventMilestone, bool> filterFunc,string tag="") => DailyEventMilestoneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion DailyEventMilestone
	#region DailyEventTask
		public static int GetCountDailyEventTaskMap(string tag="") => DailyEventTaskVisitor.GetCount(tag);
		public static string GetFileNameDailyEventTaskMap() => DailyEventTaskVisitor.GetFileName();
		public static List<int> SortedKeysDailyEventTaskMap(string tag="") => DailyEventTaskVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawDailyEventTask> GetDailyEventTaskMap(string tag="") => DailyEventTaskVisitor.All(tag);
		public static void RangeDailyEventTaskMap(Action<int, rawDailyEventTask> filter,string tag="") => DailyEventTaskVisitor.Range(filter,tag);
		public static List<int> KeysDailyEventTaskMap(string tag="") => DailyEventTaskVisitor.Keys(tag);
		public static rawDailyEventTask? GetDailyEventTask(int key,string tag="") => DailyEventTaskVisitor.Get(key,tag);
		public static List<rawDailyEventTask> GetDailyEventTaskByFilter(Func<rawDailyEventTask, bool> filterFunc,string tag="") => DailyEventTaskVisitor.GetByFilter(filterFunc,tag);
		public static rawDailyEventTask? GetOneDailyEventTaskByFilter(Func<rawDailyEventTask, bool> filterFunc,string tag="") => DailyEventTaskVisitor.GetOneByFilter(filterFunc,tag);
	#endregion DailyEventTask
	#region DailyPopPack
		public static int GetCountDailyPopPackMap(string tag="") => DailyPopPackVisitor.GetCount(tag);
		public static string GetFileNameDailyPopPackMap() => DailyPopPackVisitor.GetFileName();
		public static List<int> SortedKeysDailyPopPackMap(string tag="") => DailyPopPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawDailyPopPack> GetDailyPopPackMap(string tag="") => DailyPopPackVisitor.All(tag);
		public static void RangeDailyPopPackMap(Action<int, rawDailyPopPack> filter,string tag="") => DailyPopPackVisitor.Range(filter,tag);
		public static List<int> KeysDailyPopPackMap(string tag="") => DailyPopPackVisitor.Keys(tag);
		public static rawDailyPopPack? GetDailyPopPack(int key,string tag="") => DailyPopPackVisitor.Get(key,tag);
		public static List<rawDailyPopPack> GetDailyPopPackByFilter(Func<rawDailyPopPack, bool> filterFunc,string tag="") => DailyPopPackVisitor.GetByFilter(filterFunc,tag);
		public static rawDailyPopPack? GetOneDailyPopPackByFilter(Func<rawDailyPopPack, bool> filterFunc,string tag="") => DailyPopPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion DailyPopPack
	#region DiscountPack
		public static int GetCountDiscountPackMap(string tag="") => DiscountPackVisitor.GetCount(tag);
		public static string GetFileNameDiscountPackMap() => DiscountPackVisitor.GetFileName();
		public static List<int> SortedKeysDiscountPackMap(string tag="") => DiscountPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawDiscountPack> GetDiscountPackMap(string tag="") => DiscountPackVisitor.All(tag);
		public static void RangeDiscountPackMap(Action<int, rawDiscountPack> filter,string tag="") => DiscountPackVisitor.Range(filter,tag);
		public static List<int> KeysDiscountPackMap(string tag="") => DiscountPackVisitor.Keys(tag);
		public static rawDiscountPack? GetDiscountPack(int key,string tag="") => DiscountPackVisitor.Get(key,tag);
		public static List<rawDiscountPack> GetDiscountPackByFilter(Func<rawDiscountPack, bool> filterFunc,string tag="") => DiscountPackVisitor.GetByFilter(filterFunc,tag);
		public static rawDiscountPack? GetOneDiscountPackByFilter(Func<rawDiscountPack, bool> filterFunc,string tag="") => DiscountPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion DiscountPack
	#region DiscountProgress
		public static int GetCountDiscountProgressMap(string tag="") => DiscountProgressVisitor.GetCount(tag);
		public static string GetFileNameDiscountProgressMap() => DiscountProgressVisitor.GetFileName();
		public static List<int> SortedKeysDiscountProgressMap(string tag="") => DiscountProgressVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawDiscountProgress> GetDiscountProgressMap(string tag="") => DiscountProgressVisitor.All(tag);
		public static void RangeDiscountProgressMap(Action<int, rawDiscountProgress> filter,string tag="") => DiscountProgressVisitor.Range(filter,tag);
		public static List<int> KeysDiscountProgressMap(string tag="") => DiscountProgressVisitor.Keys(tag);
		public static rawDiscountProgress? GetDiscountProgress(int key,string tag="") => DiscountProgressVisitor.Get(key,tag);
		public static List<rawDiscountProgress> GetDiscountProgressByFilter(Func<rawDiscountProgress, bool> filterFunc,string tag="") => DiscountProgressVisitor.GetByFilter(filterFunc,tag);
		public static rawDiscountProgress? GetOneDiscountProgressByFilter(Func<rawDiscountProgress, bool> filterFunc,string tag="") => DiscountProgressVisitor.GetOneByFilter(filterFunc,tag);
	#endregion DiscountProgress
	#region DropInfo
		public static int GetCountDropInfoMap(string tag="") => DropInfoVisitor.GetCount(tag);
		public static string GetFileNameDropInfoMap() => DropInfoVisitor.GetFileName();
		public static List<int> SortedKeysDropInfoMap(string tag="") => DropInfoVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawDropInfo> GetDropInfoMap(string tag="") => DropInfoVisitor.All(tag);
		public static void RangeDropInfoMap(Action<int, rawDropInfo> filter,string tag="") => DropInfoVisitor.Range(filter,tag);
		public static List<int> KeysDropInfoMap(string tag="") => DropInfoVisitor.Keys(tag);
		public static rawDropInfo? GetDropInfo(int key,string tag="") => DropInfoVisitor.Get(key,tag);
		public static List<rawDropInfo> GetDropInfoByFilter(Func<rawDropInfo, bool> filterFunc,string tag="") => DropInfoVisitor.GetByFilter(filterFunc,tag);
		public static rawDropInfo? GetOneDropInfoByFilter(Func<rawDropInfo, bool> filterFunc,string tag="") => DropInfoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion DropInfo
	#region DropLimitItem
		public static int GetCountDropLimitItemMap(string tag="") => DropLimitItemVisitor.GetCount(tag);
		public static string GetFileNameDropLimitItemMap() => DropLimitItemVisitor.GetFileName();
		public static List<int> SortedKeysDropLimitItemMap(string tag="") => DropLimitItemVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawDropLimitItem> GetDropLimitItemMap(string tag="") => DropLimitItemVisitor.All(tag);
		public static void RangeDropLimitItemMap(Action<int, rawDropLimitItem> filter,string tag="") => DropLimitItemVisitor.Range(filter,tag);
		public static List<int> KeysDropLimitItemMap(string tag="") => DropLimitItemVisitor.Keys(tag);
		public static rawDropLimitItem? GetDropLimitItem(int key,string tag="") => DropLimitItemVisitor.Get(key,tag);
		public static List<rawDropLimitItem> GetDropLimitItemByFilter(Func<rawDropLimitItem, bool> filterFunc,string tag="") => DropLimitItemVisitor.GetByFilter(filterFunc,tag);
		public static rawDropLimitItem? GetOneDropLimitItemByFilter(Func<rawDropLimitItem, bool> filterFunc,string tag="") => DropLimitItemVisitor.GetOneByFilter(filterFunc,tag);
	#endregion DropLimitItem
	#region DropLimitScore
		public static int GetCountDropLimitScoreMap(string tag="") => DropLimitScoreVisitor.GetCount(tag);
		public static string GetFileNameDropLimitScoreMap() => DropLimitScoreVisitor.GetFileName();
		public static List<int> SortedKeysDropLimitScoreMap(string tag="") => DropLimitScoreVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawDropLimitScore> GetDropLimitScoreMap(string tag="") => DropLimitScoreVisitor.All(tag);
		public static void RangeDropLimitScoreMap(Action<int, rawDropLimitScore> filter,string tag="") => DropLimitScoreVisitor.Range(filter,tag);
		public static List<int> KeysDropLimitScoreMap(string tag="") => DropLimitScoreVisitor.Keys(tag);
		public static rawDropLimitScore? GetDropLimitScore(int key,string tag="") => DropLimitScoreVisitor.Get(key,tag);
		public static List<rawDropLimitScore> GetDropLimitScoreByFilter(Func<rawDropLimitScore, bool> filterFunc,string tag="") => DropLimitScoreVisitor.GetByFilter(filterFunc,tag);
		public static rawDropLimitScore? GetOneDropLimitScoreByFilter(Func<rawDropLimitScore, bool> filterFunc,string tag="") => DropLimitScoreVisitor.GetOneByFilter(filterFunc,tag);
	#endregion DropLimitScore
	#region EndlessPack
		public static int GetCountEndlessPackMap(string tag="") => EndlessPackVisitor.GetCount(tag);
		public static string GetFileNameEndlessPackMap() => EndlessPackVisitor.GetFileName();
		public static List<int> SortedKeysEndlessPackMap(string tag="") => EndlessPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEndlessPack> GetEndlessPackMap(string tag="") => EndlessPackVisitor.All(tag);
		public static void RangeEndlessPackMap(Action<int, rawEndlessPack> filter,string tag="") => EndlessPackVisitor.Range(filter,tag);
		public static List<int> KeysEndlessPackMap(string tag="") => EndlessPackVisitor.Keys(tag);
		public static rawEndlessPack? GetEndlessPack(int key,string tag="") => EndlessPackVisitor.Get(key,tag);
		public static List<rawEndlessPack> GetEndlessPackByFilter(Func<rawEndlessPack, bool> filterFunc,string tag="") => EndlessPackVisitor.GetByFilter(filterFunc,tag);
		public static rawEndlessPack? GetOneEndlessPackByFilter(Func<rawEndlessPack, bool> filterFunc,string tag="") => EndlessPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EndlessPack
	#region EndlessPackDetail
		public static int GetCountEndlessPackDetailSlice(string tag="") => EndlessPackDetailVisitor.GetCount(tag);
		public static string GetFileNameEndlessPackDetailSlice() => EndlessPackDetailVisitor.GetFileName();
		public static PBC::RepeatedField<rawEndlessPackDetail> GetEndlessPackDetailSlice(string tag="") => EndlessPackDetailVisitor.All(tag);
		public static void RangeEndlessPackDetailSlice(Action<int, rawEndlessPackDetail> filter,string tag="") => EndlessPackDetailVisitor.Range(filter,tag);
		public static rawEndlessPackDetail? GetEndlessPackDetailByIndex(int index,string tag="") => EndlessPackDetailVisitor.GetByIndex(index,tag);
		public static List<rawEndlessPackDetail> GetEndlessPackDetailByFilter(Func<rawEndlessPackDetail, bool> filterFunc,string tag="") => EndlessPackDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEndlessPackDetail? GetOneEndlessPackDetailByFilter(Func<rawEndlessPackDetail, bool> filterFunc,string tag="") => EndlessPackDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EndlessPackDetail
	#region EndlessPackProgress
		public static int GetCountEndlessPackProgressMap(string tag="") => EndlessPackProgressVisitor.GetCount(tag);
		public static string GetFileNameEndlessPackProgressMap() => EndlessPackProgressVisitor.GetFileName();
		public static List<int> SortedKeysEndlessPackProgressMap(string tag="") => EndlessPackProgressVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEndlessPackProgress> GetEndlessPackProgressMap(string tag="") => EndlessPackProgressVisitor.All(tag);
		public static void RangeEndlessPackProgressMap(Action<int, rawEndlessPackProgress> filter,string tag="") => EndlessPackProgressVisitor.Range(filter,tag);
		public static List<int> KeysEndlessPackProgressMap(string tag="") => EndlessPackProgressVisitor.Keys(tag);
		public static rawEndlessPackProgress? GetEndlessPackProgress(int key,string tag="") => EndlessPackProgressVisitor.Get(key,tag);
		public static List<rawEndlessPackProgress> GetEndlessPackProgressByFilter(Func<rawEndlessPackProgress, bool> filterFunc,string tag="") => EndlessPackProgressVisitor.GetByFilter(filterFunc,tag);
		public static rawEndlessPackProgress? GetOneEndlessPackProgressByFilter(Func<rawEndlessPackProgress, bool> filterFunc,string tag="") => EndlessPackProgressVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EndlessPackProgress
	#region EndlessPackToken
		public static int GetCountEndlessPackTokenMap(string tag="") => EndlessPackTokenVisitor.GetCount(tag);
		public static string GetFileNameEndlessPackTokenMap() => EndlessPackTokenVisitor.GetFileName();
		public static List<int> SortedKeysEndlessPackTokenMap(string tag="") => EndlessPackTokenVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEndlessPackToken> GetEndlessPackTokenMap(string tag="") => EndlessPackTokenVisitor.All(tag);
		public static void RangeEndlessPackTokenMap(Action<int, rawEndlessPackToken> filter,string tag="") => EndlessPackTokenVisitor.Range(filter,tag);
		public static List<int> KeysEndlessPackTokenMap(string tag="") => EndlessPackTokenVisitor.Keys(tag);
		public static rawEndlessPackToken? GetEndlessPackToken(int key,string tag="") => EndlessPackTokenVisitor.Get(key,tag);
		public static List<rawEndlessPackToken> GetEndlessPackTokenByFilter(Func<rawEndlessPackToken, bool> filterFunc,string tag="") => EndlessPackTokenVisitor.GetByFilter(filterFunc,tag);
		public static rawEndlessPackToken? GetOneEndlessPackTokenByFilter(Func<rawEndlessPackToken, bool> filterFunc,string tag="") => EndlessPackTokenVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EndlessPackToken
	#region EndlessThreePack
		public static int GetCountEndlessThreePackMap(string tag="") => EndlessThreePackVisitor.GetCount(tag);
		public static string GetFileNameEndlessThreePackMap() => EndlessThreePackVisitor.GetFileName();
		public static List<int> SortedKeysEndlessThreePackMap(string tag="") => EndlessThreePackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEndlessThreePack> GetEndlessThreePackMap(string tag="") => EndlessThreePackVisitor.All(tag);
		public static void RangeEndlessThreePackMap(Action<int, rawEndlessThreePack> filter,string tag="") => EndlessThreePackVisitor.Range(filter,tag);
		public static List<int> KeysEndlessThreePackMap(string tag="") => EndlessThreePackVisitor.Keys(tag);
		public static rawEndlessThreePack? GetEndlessThreePack(int key,string tag="") => EndlessThreePackVisitor.Get(key,tag);
		public static List<rawEndlessThreePack> GetEndlessThreePackByFilter(Func<rawEndlessThreePack, bool> filterFunc,string tag="") => EndlessThreePackVisitor.GetByFilter(filterFunc,tag);
		public static rawEndlessThreePack? GetOneEndlessThreePackByFilter(Func<rawEndlessThreePack, bool> filterFunc,string tag="") => EndlessThreePackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EndlessThreePack
	#region EndlessThreePackDetail
		public static int GetCountEndlessThreePackDetailSlice(string tag="") => EndlessThreePackDetailVisitor.GetCount(tag);
		public static string GetFileNameEndlessThreePackDetailSlice() => EndlessThreePackDetailVisitor.GetFileName();
		public static PBC::RepeatedField<rawEndlessThreePackDetail> GetEndlessThreePackDetailSlice(string tag="") => EndlessThreePackDetailVisitor.All(tag);
		public static void RangeEndlessThreePackDetailSlice(Action<int, rawEndlessThreePackDetail> filter,string tag="") => EndlessThreePackDetailVisitor.Range(filter,tag);
		public static rawEndlessThreePackDetail? GetEndlessThreePackDetailByIndex(int index,string tag="") => EndlessThreePackDetailVisitor.GetByIndex(index,tag);
		public static List<rawEndlessThreePackDetail> GetEndlessThreePackDetailByFilter(Func<rawEndlessThreePackDetail, bool> filterFunc,string tag="") => EndlessThreePackDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEndlessThreePackDetail? GetOneEndlessThreePackDetailByFilter(Func<rawEndlessThreePackDetail, bool> filterFunc,string tag="") => EndlessThreePackDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EndlessThreePackDetail
	#region EndlessThreePackProgress
		public static int GetCountEndlessThreePackProgressMap(string tag="") => EndlessThreePackProgressVisitor.GetCount(tag);
		public static string GetFileNameEndlessThreePackProgressMap() => EndlessThreePackProgressVisitor.GetFileName();
		public static List<int> SortedKeysEndlessThreePackProgressMap(string tag="") => EndlessThreePackProgressVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEndlessThreePackProgress> GetEndlessThreePackProgressMap(string tag="") => EndlessThreePackProgressVisitor.All(tag);
		public static void RangeEndlessThreePackProgressMap(Action<int, rawEndlessThreePackProgress> filter,string tag="") => EndlessThreePackProgressVisitor.Range(filter,tag);
		public static List<int> KeysEndlessThreePackProgressMap(string tag="") => EndlessThreePackProgressVisitor.Keys(tag);
		public static rawEndlessThreePackProgress? GetEndlessThreePackProgress(int key,string tag="") => EndlessThreePackProgressVisitor.Get(key,tag);
		public static List<rawEndlessThreePackProgress> GetEndlessThreePackProgressByFilter(Func<rawEndlessThreePackProgress, bool> filterFunc,string tag="") => EndlessThreePackProgressVisitor.GetByFilter(filterFunc,tag);
		public static rawEndlessThreePackProgress? GetOneEndlessThreePackProgressByFilter(Func<rawEndlessThreePackProgress, bool> filterFunc,string tag="") => EndlessThreePackProgressVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EndlessThreePackProgress
	#region EndlessThreePackToken
		public static int GetCountEndlessThreePackTokenMap(string tag="") => EndlessThreePackTokenVisitor.GetCount(tag);
		public static string GetFileNameEndlessThreePackTokenMap() => EndlessThreePackTokenVisitor.GetFileName();
		public static List<int> SortedKeysEndlessThreePackTokenMap(string tag="") => EndlessThreePackTokenVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEndlessThreePackToken> GetEndlessThreePackTokenMap(string tag="") => EndlessThreePackTokenVisitor.All(tag);
		public static void RangeEndlessThreePackTokenMap(Action<int, rawEndlessThreePackToken> filter,string tag="") => EndlessThreePackTokenVisitor.Range(filter,tag);
		public static List<int> KeysEndlessThreePackTokenMap(string tag="") => EndlessThreePackTokenVisitor.Keys(tag);
		public static rawEndlessThreePackToken? GetEndlessThreePackToken(int key,string tag="") => EndlessThreePackTokenVisitor.Get(key,tag);
		public static List<rawEndlessThreePackToken> GetEndlessThreePackTokenByFilter(Func<rawEndlessThreePackToken, bool> filterFunc,string tag="") => EndlessThreePackTokenVisitor.GetByFilter(filterFunc,tag);
		public static rawEndlessThreePackToken? GetOneEndlessThreePackTokenByFilter(Func<rawEndlessThreePackToken, bool> filterFunc,string tag="") => EndlessThreePackTokenVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EndlessThreePackToken
	#region EnergyBoost
		public static int GetCountEnergyBoostMap(string tag="") => EnergyBoostVisitor.GetCount(tag);
		public static string GetFileNameEnergyBoostMap() => EnergyBoostVisitor.GetFileName();
		public static List<int> SortedKeysEnergyBoostMap(string tag="") => EnergyBoostVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEnergyBoost> GetEnergyBoostMap(string tag="") => EnergyBoostVisitor.All(tag);
		public static void RangeEnergyBoostMap(Action<int, rawEnergyBoost> filter,string tag="") => EnergyBoostVisitor.Range(filter,tag);
		public static List<int> KeysEnergyBoostMap(string tag="") => EnergyBoostVisitor.Keys(tag);
		public static rawEnergyBoost? GetEnergyBoost(int key,string tag="") => EnergyBoostVisitor.Get(key,tag);
		public static List<rawEnergyBoost> GetEnergyBoostByFilter(Func<rawEnergyBoost, bool> filterFunc,string tag="") => EnergyBoostVisitor.GetByFilter(filterFunc,tag);
		public static rawEnergyBoost? GetOneEnergyBoostByFilter(Func<rawEnergyBoost, bool> filterFunc,string tag="") => EnergyBoostVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EnergyBoost
	#region EnergyMultiPack
		public static int GetCountEnergyMultiPackMap(string tag="") => EnergyMultiPackVisitor.GetCount(tag);
		public static string GetFileNameEnergyMultiPackMap() => EnergyMultiPackVisitor.GetFileName();
		public static List<int> SortedKeysEnergyMultiPackMap(string tag="") => EnergyMultiPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEnergyMultiPack> GetEnergyMultiPackMap(string tag="") => EnergyMultiPackVisitor.All(tag);
		public static void RangeEnergyMultiPackMap(Action<int, rawEnergyMultiPack> filter,string tag="") => EnergyMultiPackVisitor.Range(filter,tag);
		public static List<int> KeysEnergyMultiPackMap(string tag="") => EnergyMultiPackVisitor.Keys(tag);
		public static rawEnergyMultiPack? GetEnergyMultiPack(int key,string tag="") => EnergyMultiPackVisitor.Get(key,tag);
		public static List<rawEnergyMultiPack> GetEnergyMultiPackByFilter(Func<rawEnergyMultiPack, bool> filterFunc,string tag="") => EnergyMultiPackVisitor.GetByFilter(filterFunc,tag);
		public static rawEnergyMultiPack? GetOneEnergyMultiPackByFilter(Func<rawEnergyMultiPack, bool> filterFunc,string tag="") => EnergyMultiPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EnergyMultiPack
	#region EnergyPack
		public static int GetCountEnergyPackMap(string tag="") => EnergyPackVisitor.GetCount(tag);
		public static string GetFileNameEnergyPackMap() => EnergyPackVisitor.GetFileName();
		public static List<int> SortedKeysEnergyPackMap(string tag="") => EnergyPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEnergyPack> GetEnergyPackMap(string tag="") => EnergyPackVisitor.All(tag);
		public static void RangeEnergyPackMap(Action<int, rawEnergyPack> filter,string tag="") => EnergyPackVisitor.Range(filter,tag);
		public static List<int> KeysEnergyPackMap(string tag="") => EnergyPackVisitor.Keys(tag);
		public static rawEnergyPack? GetEnergyPack(int key,string tag="") => EnergyPackVisitor.Get(key,tag);
		public static List<rawEnergyPack> GetEnergyPackByFilter(Func<rawEnergyPack, bool> filterFunc,string tag="") => EnergyPackVisitor.GetByFilter(filterFunc,tag);
		public static rawEnergyPack? GetOneEnergyPackByFilter(Func<rawEnergyPack, bool> filterFunc,string tag="") => EnergyPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EnergyPack
	#region Entrance
		public static int GetCountEntranceMap(string tag="") => EntranceVisitor.GetCount(tag);
		public static string GetFileNameEntranceMap() => EntranceVisitor.GetFileName();
		public static List<int> SortedKeysEntranceMap(string tag="") => EntranceVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEntrance> GetEntranceMap(string tag="") => EntranceVisitor.All(tag);
		public static void RangeEntranceMap(Action<int, rawEntrance> filter,string tag="") => EntranceVisitor.Range(filter,tag);
		public static List<int> KeysEntranceMap(string tag="") => EntranceVisitor.Keys(tag);
		public static rawEntrance? GetEntrance(int key,string tag="") => EntranceVisitor.Get(key,tag);
		public static List<rawEntrance> GetEntranceByFilter(Func<rawEntrance, bool> filterFunc,string tag="") => EntranceVisitor.GetByFilter(filterFunc,tag);
		public static rawEntrance? GetOneEntranceByFilter(Func<rawEntrance, bool> filterFunc,string tag="") => EntranceVisitor.GetOneByFilter(filterFunc,tag);
	#endregion Entrance
	#region ErgListDetail
		public static int GetCountErgListDetailMap(string tag="") => ErgListDetailVisitor.GetCount(tag);
		public static string GetFileNameErgListDetailMap() => ErgListDetailVisitor.GetFileName();
		public static List<int> SortedKeysErgListDetailMap(string tag="") => ErgListDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawErgListDetail> GetErgListDetailMap(string tag="") => ErgListDetailVisitor.All(tag);
		public static void RangeErgListDetailMap(Action<int, rawErgListDetail> filter,string tag="") => ErgListDetailVisitor.Range(filter,tag);
		public static List<int> KeysErgListDetailMap(string tag="") => ErgListDetailVisitor.Keys(tag);
		public static rawErgListDetail? GetErgListDetail(int key,string tag="") => ErgListDetailVisitor.Get(key,tag);
		public static List<rawErgListDetail> GetErgListDetailByFilter(Func<rawErgListDetail, bool> filterFunc,string tag="") => ErgListDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawErgListDetail? GetOneErgListDetailByFilter(Func<rawErgListDetail, bool> filterFunc,string tag="") => ErgListDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ErgListDetail
	#region ErgListPack
		public static int GetCountErgListPackMap(string tag="") => ErgListPackVisitor.GetCount(tag);
		public static string GetFileNameErgListPackMap() => ErgListPackVisitor.GetFileName();
		public static List<int> SortedKeysErgListPackMap(string tag="") => ErgListPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawErgListPack> GetErgListPackMap(string tag="") => ErgListPackVisitor.All(tag);
		public static void RangeErgListPackMap(Action<int, rawErgListPack> filter,string tag="") => ErgListPackVisitor.Range(filter,tag);
		public static List<int> KeysErgListPackMap(string tag="") => ErgListPackVisitor.Keys(tag);
		public static rawErgListPack? GetErgListPack(int key,string tag="") => ErgListPackVisitor.Get(key,tag);
		public static List<rawErgListPack> GetErgListPackByFilter(Func<rawErgListPack, bool> filterFunc,string tag="") => ErgListPackVisitor.GetByFilter(filterFunc,tag);
		public static rawErgListPack? GetOneErgListPackByFilter(Func<rawErgListPack, bool> filterFunc,string tag="") => ErgListPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ErgListPack
	#region ErgListTask
		public static int GetCountErgListTaskMap(string tag="") => ErgListTaskVisitor.GetCount(tag);
		public static string GetFileNameErgListTaskMap() => ErgListTaskVisitor.GetFileName();
		public static List<int> SortedKeysErgListTaskMap(string tag="") => ErgListTaskVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawErgListTask> GetErgListTaskMap(string tag="") => ErgListTaskVisitor.All(tag);
		public static void RangeErgListTaskMap(Action<int, rawErgListTask> filter,string tag="") => ErgListTaskVisitor.Range(filter,tag);
		public static List<int> KeysErgListTaskMap(string tag="") => ErgListTaskVisitor.Keys(tag);
		public static rawErgListTask? GetErgListTask(int key,string tag="") => ErgListTaskVisitor.Get(key,tag);
		public static List<rawErgListTask> GetErgListTaskByFilter(Func<rawErgListTask, bool> filterFunc,string tag="") => ErgListTaskVisitor.GetByFilter(filterFunc,tag);
		public static rawErgListTask? GetOneErgListTaskByFilter(Func<rawErgListTask, bool> filterFunc,string tag="") => ErgListTaskVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ErgListTask
	#region EventBingoTask
		public static int GetCountEventBingoTaskMap(string tag="") => EventBingoTaskVisitor.GetCount(tag);
		public static string GetFileNameEventBingoTaskMap() => EventBingoTaskVisitor.GetFileName();
		public static List<int> SortedKeysEventBingoTaskMap(string tag="") => EventBingoTaskVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventBingoTask> GetEventBingoTaskMap(string tag="") => EventBingoTaskVisitor.All(tag);
		public static void RangeEventBingoTaskMap(Action<int, rawEventBingoTask> filter,string tag="") => EventBingoTaskVisitor.Range(filter,tag);
		public static List<int> KeysEventBingoTaskMap(string tag="") => EventBingoTaskVisitor.Keys(tag);
		public static rawEventBingoTask? GetEventBingoTask(int key,string tag="") => EventBingoTaskVisitor.Get(key,tag);
		public static List<rawEventBingoTask> GetEventBingoTaskByFilter(Func<rawEventBingoTask, bool> filterFunc,string tag="") => EventBingoTaskVisitor.GetByFilter(filterFunc,tag);
		public static rawEventBingoTask? GetOneEventBingoTaskByFilter(Func<rawEventBingoTask, bool> filterFunc,string tag="") => EventBingoTaskVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventBingoTask
	#region EventBingoTaskDetail
		public static int GetCountEventBingoTaskDetailMap(string tag="") => EventBingoTaskDetailVisitor.GetCount(tag);
		public static string GetFileNameEventBingoTaskDetailMap() => EventBingoTaskDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventBingoTaskDetailMap(string tag="") => EventBingoTaskDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventBingoTaskDetail> GetEventBingoTaskDetailMap(string tag="") => EventBingoTaskDetailVisitor.All(tag);
		public static void RangeEventBingoTaskDetailMap(Action<int, rawEventBingoTaskDetail> filter,string tag="") => EventBingoTaskDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventBingoTaskDetailMap(string tag="") => EventBingoTaskDetailVisitor.Keys(tag);
		public static rawEventBingoTaskDetail? GetEventBingoTaskDetail(int key,string tag="") => EventBingoTaskDetailVisitor.Get(key,tag);
		public static List<rawEventBingoTaskDetail> GetEventBingoTaskDetailByFilter(Func<rawEventBingoTaskDetail, bool> filterFunc,string tag="") => EventBingoTaskDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventBingoTaskDetail? GetOneEventBingoTaskDetailByFilter(Func<rawEventBingoTaskDetail, bool> filterFunc,string tag="") => EventBingoTaskDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventBingoTaskDetail
	#region EventBingoTaskInfo
		public static int GetCountEventBingoTaskInfoMap(string tag="") => EventBingoTaskInfoVisitor.GetCount(tag);
		public static string GetFileNameEventBingoTaskInfoMap() => EventBingoTaskInfoVisitor.GetFileName();
		public static List<int> SortedKeysEventBingoTaskInfoMap(string tag="") => EventBingoTaskInfoVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventBingoTaskInfo> GetEventBingoTaskInfoMap(string tag="") => EventBingoTaskInfoVisitor.All(tag);
		public static void RangeEventBingoTaskInfoMap(Action<int, rawEventBingoTaskInfo> filter,string tag="") => EventBingoTaskInfoVisitor.Range(filter,tag);
		public static List<int> KeysEventBingoTaskInfoMap(string tag="") => EventBingoTaskInfoVisitor.Keys(tag);
		public static rawEventBingoTaskInfo? GetEventBingoTaskInfo(int key,string tag="") => EventBingoTaskInfoVisitor.Get(key,tag);
		public static List<rawEventBingoTaskInfo> GetEventBingoTaskInfoByFilter(Func<rawEventBingoTaskInfo, bool> filterFunc,string tag="") => EventBingoTaskInfoVisitor.GetByFilter(filterFunc,tag);
		public static rawEventBingoTaskInfo? GetOneEventBingoTaskInfoByFilter(Func<rawEventBingoTaskInfo, bool> filterFunc,string tag="") => EventBingoTaskInfoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventBingoTaskInfo
	#region EventBp
		public static int GetCountEventBpMap(string tag="") => EventBpVisitor.GetCount(tag);
		public static string GetFileNameEventBpMap() => EventBpVisitor.GetFileName();
		public static List<int> SortedKeysEventBpMap(string tag="") => EventBpVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventBp> GetEventBpMap(string tag="") => EventBpVisitor.All(tag);
		public static void RangeEventBpMap(Action<int, rawEventBp> filter,string tag="") => EventBpVisitor.Range(filter,tag);
		public static List<int> KeysEventBpMap(string tag="") => EventBpVisitor.Keys(tag);
		public static rawEventBp? GetEventBp(int key,string tag="") => EventBpVisitor.Get(key,tag);
		public static List<rawEventBp> GetEventBpByFilter(Func<rawEventBp, bool> filterFunc,string tag="") => EventBpVisitor.GetByFilter(filterFunc,tag);
		public static rawEventBp? GetOneEventBpByFilter(Func<rawEventBp, bool> filterFunc,string tag="") => EventBpVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventBp
	#region EventCardAlbum
		public static int GetCountEventCardAlbumMap(string tag="") => EventCardAlbumVisitor.GetCount(tag);
		public static string GetFileNameEventCardAlbumMap() => EventCardAlbumVisitor.GetFileName();
		public static List<int> SortedKeysEventCardAlbumMap(string tag="") => EventCardAlbumVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventCardAlbum> GetEventCardAlbumMap(string tag="") => EventCardAlbumVisitor.All(tag);
		public static void RangeEventCardAlbumMap(Action<int, rawEventCardAlbum> filter,string tag="") => EventCardAlbumVisitor.Range(filter,tag);
		public static List<int> KeysEventCardAlbumMap(string tag="") => EventCardAlbumVisitor.Keys(tag);
		public static rawEventCardAlbum? GetEventCardAlbum(int key,string tag="") => EventCardAlbumVisitor.Get(key,tag);
		public static List<rawEventCardAlbum> GetEventCardAlbumByFilter(Func<rawEventCardAlbum, bool> filterFunc,string tag="") => EventCardAlbumVisitor.GetByFilter(filterFunc,tag);
		public static rawEventCardAlbum? GetOneEventCardAlbumByFilter(Func<rawEventCardAlbum, bool> filterFunc,string tag="") => EventCardAlbumVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventCardAlbum
	#region EventCardRound
		public static int GetCountEventCardRoundMap(string tag="") => EventCardRoundVisitor.GetCount(tag);
		public static string GetFileNameEventCardRoundMap() => EventCardRoundVisitor.GetFileName();
		public static List<int> SortedKeysEventCardRoundMap(string tag="") => EventCardRoundVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventCardRound> GetEventCardRoundMap(string tag="") => EventCardRoundVisitor.All(tag);
		public static void RangeEventCardRoundMap(Action<int, rawEventCardRound> filter,string tag="") => EventCardRoundVisitor.Range(filter,tag);
		public static List<int> KeysEventCardRoundMap(string tag="") => EventCardRoundVisitor.Keys(tag);
		public static rawEventCardRound? GetEventCardRound(int key,string tag="") => EventCardRoundVisitor.Get(key,tag);
		public static List<rawEventCardRound> GetEventCardRoundByFilter(Func<rawEventCardRound, bool> filterFunc,string tag="") => EventCardRoundVisitor.GetByFilter(filterFunc,tag);
		public static rawEventCardRound? GetOneEventCardRoundByFilter(Func<rawEventCardRound, bool> filterFunc,string tag="") => EventCardRoundVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventCardRound
	#region EventCartOnePlusOne
		public static int GetCountEventCartOnePlusOneMap(string tag="") => EventCartOnePlusOneVisitor.GetCount(tag);
		public static string GetFileNameEventCartOnePlusOneMap() => EventCartOnePlusOneVisitor.GetFileName();
		public static List<int> SortedKeysEventCartOnePlusOneMap(string tag="") => EventCartOnePlusOneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventCartOnePlusOne> GetEventCartOnePlusOneMap(string tag="") => EventCartOnePlusOneVisitor.All(tag);
		public static void RangeEventCartOnePlusOneMap(Action<int, rawEventCartOnePlusOne> filter,string tag="") => EventCartOnePlusOneVisitor.Range(filter,tag);
		public static List<int> KeysEventCartOnePlusOneMap(string tag="") => EventCartOnePlusOneVisitor.Keys(tag);
		public static rawEventCartOnePlusOne? GetEventCartOnePlusOne(int key,string tag="") => EventCartOnePlusOneVisitor.Get(key,tag);
		public static List<rawEventCartOnePlusOne> GetEventCartOnePlusOneByFilter(Func<rawEventCartOnePlusOne, bool> filterFunc,string tag="") => EventCartOnePlusOneVisitor.GetByFilter(filterFunc,tag);
		public static rawEventCartOnePlusOne? GetOneEventCartOnePlusOneByFilter(Func<rawEventCartOnePlusOne, bool> filterFunc,string tag="") => EventCartOnePlusOneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventCartOnePlusOne
	#region EventClawOrder
		public static int GetCountEventClawOrderMap(string tag="") => EventClawOrderVisitor.GetCount(tag);
		public static string GetFileNameEventClawOrderMap() => EventClawOrderVisitor.GetFileName();
		public static List<int> SortedKeysEventClawOrderMap(string tag="") => EventClawOrderVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventClawOrder> GetEventClawOrderMap(string tag="") => EventClawOrderVisitor.All(tag);
		public static void RangeEventClawOrderMap(Action<int, rawEventClawOrder> filter,string tag="") => EventClawOrderVisitor.Range(filter,tag);
		public static List<int> KeysEventClawOrderMap(string tag="") => EventClawOrderVisitor.Keys(tag);
		public static rawEventClawOrder? GetEventClawOrder(int key,string tag="") => EventClawOrderVisitor.Get(key,tag);
		public static List<rawEventClawOrder> GetEventClawOrderByFilter(Func<rawEventClawOrder, bool> filterFunc,string tag="") => EventClawOrderVisitor.GetByFilter(filterFunc,tag);
		public static rawEventClawOrder? GetOneEventClawOrderByFilter(Func<rawEventClawOrder, bool> filterFunc,string tag="") => EventClawOrderVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventClawOrder
	#region EventClawOrderDraw
		public static int GetCountEventClawOrderDrawMap(string tag="") => EventClawOrderDrawVisitor.GetCount(tag);
		public static string GetFileNameEventClawOrderDrawMap() => EventClawOrderDrawVisitor.GetFileName();
		public static List<int> SortedKeysEventClawOrderDrawMap(string tag="") => EventClawOrderDrawVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventClawOrderDraw> GetEventClawOrderDrawMap(string tag="") => EventClawOrderDrawVisitor.All(tag);
		public static void RangeEventClawOrderDrawMap(Action<int, rawEventClawOrderDraw> filter,string tag="") => EventClawOrderDrawVisitor.Range(filter,tag);
		public static List<int> KeysEventClawOrderDrawMap(string tag="") => EventClawOrderDrawVisitor.Keys(tag);
		public static rawEventClawOrderDraw? GetEventClawOrderDraw(int key,string tag="") => EventClawOrderDrawVisitor.Get(key,tag);
		public static List<rawEventClawOrderDraw> GetEventClawOrderDrawByFilter(Func<rawEventClawOrderDraw, bool> filterFunc,string tag="") => EventClawOrderDrawVisitor.GetByFilter(filterFunc,tag);
		public static rawEventClawOrderDraw? GetOneEventClawOrderDrawByFilter(Func<rawEventClawOrderDraw, bool> filterFunc,string tag="") => EventClawOrderDrawVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventClawOrderDraw
	#region EventClawOrderGroup
		public static int GetCountEventClawOrderGroupMap(string tag="") => EventClawOrderGroupVisitor.GetCount(tag);
		public static string GetFileNameEventClawOrderGroupMap() => EventClawOrderGroupVisitor.GetFileName();
		public static List<int> SortedKeysEventClawOrderGroupMap(string tag="") => EventClawOrderGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventClawOrderGroup> GetEventClawOrderGroupMap(string tag="") => EventClawOrderGroupVisitor.All(tag);
		public static void RangeEventClawOrderGroupMap(Action<int, rawEventClawOrderGroup> filter,string tag="") => EventClawOrderGroupVisitor.Range(filter,tag);
		public static List<int> KeysEventClawOrderGroupMap(string tag="") => EventClawOrderGroupVisitor.Keys(tag);
		public static rawEventClawOrderGroup? GetEventClawOrderGroup(int key,string tag="") => EventClawOrderGroupVisitor.Get(key,tag);
		public static List<rawEventClawOrderGroup> GetEventClawOrderGroupByFilter(Func<rawEventClawOrderGroup, bool> filterFunc,string tag="") => EventClawOrderGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawEventClawOrderGroup? GetOneEventClawOrderGroupByFilter(Func<rawEventClawOrderGroup, bool> filterFunc,string tag="") => EventClawOrderGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventClawOrderGroup
	#region EventClawOrderReDiff
		public static int GetCountEventClawOrderReDiffMap(string tag="") => EventClawOrderReDiffVisitor.GetCount(tag);
		public static string GetFileNameEventClawOrderReDiffMap() => EventClawOrderReDiffVisitor.GetFileName();
		public static List<int> SortedKeysEventClawOrderReDiffMap(string tag="") => EventClawOrderReDiffVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventClawOrderReDiff> GetEventClawOrderReDiffMap(string tag="") => EventClawOrderReDiffVisitor.All(tag);
		public static void RangeEventClawOrderReDiffMap(Action<int, rawEventClawOrderReDiff> filter,string tag="") => EventClawOrderReDiffVisitor.Range(filter,tag);
		public static List<int> KeysEventClawOrderReDiffMap(string tag="") => EventClawOrderReDiffVisitor.Keys(tag);
		public static rawEventClawOrderReDiff? GetEventClawOrderReDiff(int key,string tag="") => EventClawOrderReDiffVisitor.Get(key,tag);
		public static List<rawEventClawOrderReDiff> GetEventClawOrderReDiffByFilter(Func<rawEventClawOrderReDiff, bool> filterFunc,string tag="") => EventClawOrderReDiffVisitor.GetByFilter(filterFunc,tag);
		public static rawEventClawOrderReDiff? GetOneEventClawOrderReDiffByFilter(Func<rawEventClawOrderReDiff, bool> filterFunc,string tag="") => EventClawOrderReDiffVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventClawOrderReDiff
	#region EventClawOrderResource
		public static int GetCountEventClawOrderResourceMap(string tag="") => EventClawOrderResourceVisitor.GetCount(tag);
		public static string GetFileNameEventClawOrderResourceMap() => EventClawOrderResourceVisitor.GetFileName();
		public static List<int> SortedKeysEventClawOrderResourceMap(string tag="") => EventClawOrderResourceVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventClawOrderResource> GetEventClawOrderResourceMap(string tag="") => EventClawOrderResourceVisitor.All(tag);
		public static void RangeEventClawOrderResourceMap(Action<int, rawEventClawOrderResource> filter,string tag="") => EventClawOrderResourceVisitor.Range(filter,tag);
		public static List<int> KeysEventClawOrderResourceMap(string tag="") => EventClawOrderResourceVisitor.Keys(tag);
		public static rawEventClawOrderResource? GetEventClawOrderResource(int key,string tag="") => EventClawOrderResourceVisitor.Get(key,tag);
		public static List<rawEventClawOrderResource> GetEventClawOrderResourceByFilter(Func<rawEventClawOrderResource, bool> filterFunc,string tag="") => EventClawOrderResourceVisitor.GetByFilter(filterFunc,tag);
		public static rawEventClawOrderResource? GetOneEventClawOrderResourceByFilter(Func<rawEventClawOrderResource, bool> filterFunc,string tag="") => EventClawOrderResourceVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventClawOrderResource
	#region EventClawOrderToken
		public static int GetCountEventClawOrderTokenMap(string tag="") => EventClawOrderTokenVisitor.GetCount(tag);
		public static string GetFileNameEventClawOrderTokenMap() => EventClawOrderTokenVisitor.GetFileName();
		public static List<int> SortedKeysEventClawOrderTokenMap(string tag="") => EventClawOrderTokenVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventClawOrderToken> GetEventClawOrderTokenMap(string tag="") => EventClawOrderTokenVisitor.All(tag);
		public static void RangeEventClawOrderTokenMap(Action<int, rawEventClawOrderToken> filter,string tag="") => EventClawOrderTokenVisitor.Range(filter,tag);
		public static List<int> KeysEventClawOrderTokenMap(string tag="") => EventClawOrderTokenVisitor.Keys(tag);
		public static rawEventClawOrderToken? GetEventClawOrderToken(int key,string tag="") => EventClawOrderTokenVisitor.Get(key,tag);
		public static List<rawEventClawOrderToken> GetEventClawOrderTokenByFilter(Func<rawEventClawOrderToken, bool> filterFunc,string tag="") => EventClawOrderTokenVisitor.GetByFilter(filterFunc,tag);
		public static rawEventClawOrderToken? GetOneEventClawOrderTokenByFilter(Func<rawEventClawOrderToken, bool> filterFunc,string tag="") => EventClawOrderTokenVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventClawOrderToken
	#region EventCommunity
		public static int GetCountEventCommunityMap(string tag="") => EventCommunityVisitor.GetCount(tag);
		public static string GetFileNameEventCommunityMap() => EventCommunityVisitor.GetFileName();
		public static List<int> SortedKeysEventCommunityMap(string tag="") => EventCommunityVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventCommunity> GetEventCommunityMap(string tag="") => EventCommunityVisitor.All(tag);
		public static void RangeEventCommunityMap(Action<int, rawEventCommunity> filter,string tag="") => EventCommunityVisitor.Range(filter,tag);
		public static List<int> KeysEventCommunityMap(string tag="") => EventCommunityVisitor.Keys(tag);
		public static rawEventCommunity? GetEventCommunity(int key,string tag="") => EventCommunityVisitor.Get(key,tag);
		public static List<rawEventCommunity> GetEventCommunityByFilter(Func<rawEventCommunity, bool> filterFunc,string tag="") => EventCommunityVisitor.GetByFilter(filterFunc,tag);
		public static rawEventCommunity? GetOneEventCommunityByFilter(Func<rawEventCommunity, bool> filterFunc,string tag="") => EventCommunityVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventCommunity
	#region EventDecorate
		public static int GetCountEventDecorateMap(string tag="") => EventDecorateVisitor.GetCount(tag);
		public static string GetFileNameEventDecorateMap() => EventDecorateVisitor.GetFileName();
		public static List<int> SortedKeysEventDecorateMap(string tag="") => EventDecorateVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventDecorate> GetEventDecorateMap(string tag="") => EventDecorateVisitor.All(tag);
		public static void RangeEventDecorateMap(Action<int, rawEventDecorate> filter,string tag="") => EventDecorateVisitor.Range(filter,tag);
		public static List<int> KeysEventDecorateMap(string tag="") => EventDecorateVisitor.Keys(tag);
		public static rawEventDecorate? GetEventDecorate(int key,string tag="") => EventDecorateVisitor.Get(key,tag);
		public static List<rawEventDecorate> GetEventDecorateByFilter(Func<rawEventDecorate, bool> filterFunc,string tag="") => EventDecorateVisitor.GetByFilter(filterFunc,tag);
		public static rawEventDecorate? GetOneEventDecorateByFilter(Func<rawEventDecorate, bool> filterFunc,string tag="") => EventDecorateVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventDecorate
	#region EventDecorateGroup
		public static int GetCountEventDecorateGroupMap(string tag="") => EventDecorateGroupVisitor.GetCount(tag);
		public static string GetFileNameEventDecorateGroupMap() => EventDecorateGroupVisitor.GetFileName();
		public static List<int> SortedKeysEventDecorateGroupMap(string tag="") => EventDecorateGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventDecorateGroup> GetEventDecorateGroupMap(string tag="") => EventDecorateGroupVisitor.All(tag);
		public static void RangeEventDecorateGroupMap(Action<int, rawEventDecorateGroup> filter,string tag="") => EventDecorateGroupVisitor.Range(filter,tag);
		public static List<int> KeysEventDecorateGroupMap(string tag="") => EventDecorateGroupVisitor.Keys(tag);
		public static rawEventDecorateGroup? GetEventDecorateGroup(int key,string tag="") => EventDecorateGroupVisitor.Get(key,tag);
		public static List<rawEventDecorateGroup> GetEventDecorateGroupByFilter(Func<rawEventDecorateGroup, bool> filterFunc,string tag="") => EventDecorateGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawEventDecorateGroup? GetOneEventDecorateGroupByFilter(Func<rawEventDecorateGroup, bool> filterFunc,string tag="") => EventDecorateGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventDecorateGroup
	#region EventDecorateInfo
		public static int GetCountEventDecorateInfoMap(string tag="") => EventDecorateInfoVisitor.GetCount(tag);
		public static string GetFileNameEventDecorateInfoMap() => EventDecorateInfoVisitor.GetFileName();
		public static List<int> SortedKeysEventDecorateInfoMap(string tag="") => EventDecorateInfoVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventDecorateInfo> GetEventDecorateInfoMap(string tag="") => EventDecorateInfoVisitor.All(tag);
		public static void RangeEventDecorateInfoMap(Action<int, rawEventDecorateInfo> filter,string tag="") => EventDecorateInfoVisitor.Range(filter,tag);
		public static List<int> KeysEventDecorateInfoMap(string tag="") => EventDecorateInfoVisitor.Keys(tag);
		public static rawEventDecorateInfo? GetEventDecorateInfo(int key,string tag="") => EventDecorateInfoVisitor.Get(key,tag);
		public static List<rawEventDecorateInfo> GetEventDecorateInfoByFilter(Func<rawEventDecorateInfo, bool> filterFunc,string tag="") => EventDecorateInfoVisitor.GetByFilter(filterFunc,tag);
		public static rawEventDecorateInfo? GetOneEventDecorateInfoByFilter(Func<rawEventDecorateInfo, bool> filterFunc,string tag="") => EventDecorateInfoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventDecorateInfo
	#region EventDecorateLevel
		public static int GetCountEventDecorateLevelMap(string tag="") => EventDecorateLevelVisitor.GetCount(tag);
		public static string GetFileNameEventDecorateLevelMap() => EventDecorateLevelVisitor.GetFileName();
		public static List<int> SortedKeysEventDecorateLevelMap(string tag="") => EventDecorateLevelVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventDecorateLevel> GetEventDecorateLevelMap(string tag="") => EventDecorateLevelVisitor.All(tag);
		public static void RangeEventDecorateLevelMap(Action<int, rawEventDecorateLevel> filter,string tag="") => EventDecorateLevelVisitor.Range(filter,tag);
		public static List<int> KeysEventDecorateLevelMap(string tag="") => EventDecorateLevelVisitor.Keys(tag);
		public static rawEventDecorateLevel? GetEventDecorateLevel(int key,string tag="") => EventDecorateLevelVisitor.Get(key,tag);
		public static List<rawEventDecorateLevel> GetEventDecorateLevelByFilter(Func<rawEventDecorateLevel, bool> filterFunc,string tag="") => EventDecorateLevelVisitor.GetByFilter(filterFunc,tag);
		public static rawEventDecorateLevel? GetOneEventDecorateLevelByFilter(Func<rawEventDecorateLevel, bool> filterFunc,string tag="") => EventDecorateLevelVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventDecorateLevel
	#region EventDigging
		public static int GetCountEventDiggingMap(string tag="") => EventDiggingVisitor.GetCount(tag);
		public static string GetFileNameEventDiggingMap() => EventDiggingVisitor.GetFileName();
		public static List<int> SortedKeysEventDiggingMap(string tag="") => EventDiggingVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventDigging> GetEventDiggingMap(string tag="") => EventDiggingVisitor.All(tag);
		public static void RangeEventDiggingMap(Action<int, rawEventDigging> filter,string tag="") => EventDiggingVisitor.Range(filter,tag);
		public static List<int> KeysEventDiggingMap(string tag="") => EventDiggingVisitor.Keys(tag);
		public static rawEventDigging? GetEventDigging(int key,string tag="") => EventDiggingVisitor.Get(key,tag);
		public static List<rawEventDigging> GetEventDiggingByFilter(Func<rawEventDigging, bool> filterFunc,string tag="") => EventDiggingVisitor.GetByFilter(filterFunc,tag);
		public static rawEventDigging? GetOneEventDiggingByFilter(Func<rawEventDigging, bool> filterFunc,string tag="") => EventDiggingVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventDigging
	#region EventDiggingBoard
		public static int GetCountEventDiggingBoardMap(string tag="") => EventDiggingBoardVisitor.GetCount(tag);
		public static string GetFileNameEventDiggingBoardMap() => EventDiggingBoardVisitor.GetFileName();
		public static List<int> SortedKeysEventDiggingBoardMap(string tag="") => EventDiggingBoardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventDiggingBoard> GetEventDiggingBoardMap(string tag="") => EventDiggingBoardVisitor.All(tag);
		public static void RangeEventDiggingBoardMap(Action<int, rawEventDiggingBoard> filter,string tag="") => EventDiggingBoardVisitor.Range(filter,tag);
		public static List<int> KeysEventDiggingBoardMap(string tag="") => EventDiggingBoardVisitor.Keys(tag);
		public static rawEventDiggingBoard? GetEventDiggingBoard(int key,string tag="") => EventDiggingBoardVisitor.Get(key,tag);
		public static List<rawEventDiggingBoard> GetEventDiggingBoardByFilter(Func<rawEventDiggingBoard, bool> filterFunc,string tag="") => EventDiggingBoardVisitor.GetByFilter(filterFunc,tag);
		public static rawEventDiggingBoard? GetOneEventDiggingBoardByFilter(Func<rawEventDiggingBoard, bool> filterFunc,string tag="") => EventDiggingBoardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventDiggingBoard
	#region EventDiggingDetail
		public static int GetCountEventDiggingDetailMap(string tag="") => EventDiggingDetailVisitor.GetCount(tag);
		public static string GetFileNameEventDiggingDetailMap() => EventDiggingDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventDiggingDetailMap(string tag="") => EventDiggingDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventDiggingDetail> GetEventDiggingDetailMap(string tag="") => EventDiggingDetailVisitor.All(tag);
		public static void RangeEventDiggingDetailMap(Action<int, rawEventDiggingDetail> filter,string tag="") => EventDiggingDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventDiggingDetailMap(string tag="") => EventDiggingDetailVisitor.Keys(tag);
		public static rawEventDiggingDetail? GetEventDiggingDetail(int key,string tag="") => EventDiggingDetailVisitor.Get(key,tag);
		public static List<rawEventDiggingDetail> GetEventDiggingDetailByFilter(Func<rawEventDiggingDetail, bool> filterFunc,string tag="") => EventDiggingDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventDiggingDetail? GetOneEventDiggingDetailByFilter(Func<rawEventDiggingDetail, bool> filterFunc,string tag="") => EventDiggingDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventDiggingDetail
	#region EventDiggingItem
		public static int GetCountEventDiggingItemMap(string tag="") => EventDiggingItemVisitor.GetCount(tag);
		public static string GetFileNameEventDiggingItemMap() => EventDiggingItemVisitor.GetFileName();
		public static List<int> SortedKeysEventDiggingItemMap(string tag="") => EventDiggingItemVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventDiggingItem> GetEventDiggingItemMap(string tag="") => EventDiggingItemVisitor.All(tag);
		public static void RangeEventDiggingItemMap(Action<int, rawEventDiggingItem> filter,string tag="") => EventDiggingItemVisitor.Range(filter,tag);
		public static List<int> KeysEventDiggingItemMap(string tag="") => EventDiggingItemVisitor.Keys(tag);
		public static rawEventDiggingItem? GetEventDiggingItem(int key,string tag="") => EventDiggingItemVisitor.Get(key,tag);
		public static List<rawEventDiggingItem> GetEventDiggingItemByFilter(Func<rawEventDiggingItem, bool> filterFunc,string tag="") => EventDiggingItemVisitor.GetByFilter(filterFunc,tag);
		public static rawEventDiggingItem? GetOneEventDiggingItemByFilter(Func<rawEventDiggingItem, bool> filterFunc,string tag="") => EventDiggingItemVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventDiggingItem
	#region EventDiggingLevel
		public static int GetCountEventDiggingLevelMap(string tag="") => EventDiggingLevelVisitor.GetCount(tag);
		public static string GetFileNameEventDiggingLevelMap() => EventDiggingLevelVisitor.GetFileName();
		public static List<int> SortedKeysEventDiggingLevelMap(string tag="") => EventDiggingLevelVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventDiggingLevel> GetEventDiggingLevelMap(string tag="") => EventDiggingLevelVisitor.All(tag);
		public static void RangeEventDiggingLevelMap(Action<int, rawEventDiggingLevel> filter,string tag="") => EventDiggingLevelVisitor.Range(filter,tag);
		public static List<int> KeysEventDiggingLevelMap(string tag="") => EventDiggingLevelVisitor.Keys(tag);
		public static rawEventDiggingLevel? GetEventDiggingLevel(int key,string tag="") => EventDiggingLevelVisitor.Get(key,tag);
		public static List<rawEventDiggingLevel> GetEventDiggingLevelByFilter(Func<rawEventDiggingLevel, bool> filterFunc,string tag="") => EventDiggingLevelVisitor.GetByFilter(filterFunc,tag);
		public static rawEventDiggingLevel? GetOneEventDiggingLevelByFilter(Func<rawEventDiggingLevel, bool> filterFunc,string tag="") => EventDiggingLevelVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventDiggingLevel
	#region EventDiggingRound
		public static int GetCountEventDiggingRoundMap(string tag="") => EventDiggingRoundVisitor.GetCount(tag);
		public static string GetFileNameEventDiggingRoundMap() => EventDiggingRoundVisitor.GetFileName();
		public static List<int> SortedKeysEventDiggingRoundMap(string tag="") => EventDiggingRoundVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventDiggingRound> GetEventDiggingRoundMap(string tag="") => EventDiggingRoundVisitor.All(tag);
		public static void RangeEventDiggingRoundMap(Action<int, rawEventDiggingRound> filter,string tag="") => EventDiggingRoundVisitor.Range(filter,tag);
		public static List<int> KeysEventDiggingRoundMap(string tag="") => EventDiggingRoundVisitor.Keys(tag);
		public static rawEventDiggingRound? GetEventDiggingRound(int key,string tag="") => EventDiggingRoundVisitor.Get(key,tag);
		public static List<rawEventDiggingRound> GetEventDiggingRoundByFilter(Func<rawEventDiggingRound, bool> filterFunc,string tag="") => EventDiggingRoundVisitor.GetByFilter(filterFunc,tag);
		public static rawEventDiggingRound? GetOneEventDiggingRoundByFilter(Func<rawEventDiggingRound, bool> filterFunc,string tag="") => EventDiggingRoundVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventDiggingRound
	#region EventExtraScore
		public static int GetCountEventExtraScoreMap(string tag="") => EventExtraScoreVisitor.GetCount(tag);
		public static string GetFileNameEventExtraScoreMap() => EventExtraScoreVisitor.GetFileName();
		public static List<int> SortedKeysEventExtraScoreMap(string tag="") => EventExtraScoreVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventExtraScore> GetEventExtraScoreMap(string tag="") => EventExtraScoreVisitor.All(tag);
		public static void RangeEventExtraScoreMap(Action<int, rawEventExtraScore> filter,string tag="") => EventExtraScoreVisitor.Range(filter,tag);
		public static List<int> KeysEventExtraScoreMap(string tag="") => EventExtraScoreVisitor.Keys(tag);
		public static rawEventExtraScore? GetEventExtraScore(int key,string tag="") => EventExtraScoreVisitor.Get(key,tag);
		public static List<rawEventExtraScore> GetEventExtraScoreByFilter(Func<rawEventExtraScore, bool> filterFunc,string tag="") => EventExtraScoreVisitor.GetByFilter(filterFunc,tag);
		public static rawEventExtraScore? GetOneEventExtraScoreByFilter(Func<rawEventExtraScore, bool> filterFunc,string tag="") => EventExtraScoreVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventExtraScore
	#region EventFarmBoard
		public static int GetCountEventFarmBoardMap(string tag="") => EventFarmBoardVisitor.GetCount(tag);
		public static string GetFileNameEventFarmBoardMap() => EventFarmBoardVisitor.GetFileName();
		public static List<int> SortedKeysEventFarmBoardMap(string tag="") => EventFarmBoardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFarmBoard> GetEventFarmBoardMap(string tag="") => EventFarmBoardVisitor.All(tag);
		public static void RangeEventFarmBoardMap(Action<int, rawEventFarmBoard> filter,string tag="") => EventFarmBoardVisitor.Range(filter,tag);
		public static List<int> KeysEventFarmBoardMap(string tag="") => EventFarmBoardVisitor.Keys(tag);
		public static rawEventFarmBoard? GetEventFarmBoard(int key,string tag="") => EventFarmBoardVisitor.Get(key,tag);
		public static List<rawEventFarmBoard> GetEventFarmBoardByFilter(Func<rawEventFarmBoard, bool> filterFunc,string tag="") => EventFarmBoardVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFarmBoard? GetOneEventFarmBoardByFilter(Func<rawEventFarmBoard, bool> filterFunc,string tag="") => EventFarmBoardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFarmBoard
	#region EventFarmBoardAnimal
		public static int GetCountEventFarmBoardAnimalMap(string tag="") => EventFarmBoardAnimalVisitor.GetCount(tag);
		public static string GetFileNameEventFarmBoardAnimalMap() => EventFarmBoardAnimalVisitor.GetFileName();
		public static List<int> SortedKeysEventFarmBoardAnimalMap(string tag="") => EventFarmBoardAnimalVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFarmBoardAnimal> GetEventFarmBoardAnimalMap(string tag="") => EventFarmBoardAnimalVisitor.All(tag);
		public static void RangeEventFarmBoardAnimalMap(Action<int, rawEventFarmBoardAnimal> filter,string tag="") => EventFarmBoardAnimalVisitor.Range(filter,tag);
		public static List<int> KeysEventFarmBoardAnimalMap(string tag="") => EventFarmBoardAnimalVisitor.Keys(tag);
		public static rawEventFarmBoardAnimal? GetEventFarmBoardAnimal(int key,string tag="") => EventFarmBoardAnimalVisitor.Get(key,tag);
		public static List<rawEventFarmBoardAnimal> GetEventFarmBoardAnimalByFilter(Func<rawEventFarmBoardAnimal, bool> filterFunc,string tag="") => EventFarmBoardAnimalVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFarmBoardAnimal? GetOneEventFarmBoardAnimalByFilter(Func<rawEventFarmBoardAnimal, bool> filterFunc,string tag="") => EventFarmBoardAnimalVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFarmBoardAnimal
	#region EventFarmBoardDetail
		public static int GetCountEventFarmBoardDetailMap(string tag="") => EventFarmBoardDetailVisitor.GetCount(tag);
		public static string GetFileNameEventFarmBoardDetailMap() => EventFarmBoardDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventFarmBoardDetailMap(string tag="") => EventFarmBoardDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFarmBoardDetail> GetEventFarmBoardDetailMap(string tag="") => EventFarmBoardDetailVisitor.All(tag);
		public static void RangeEventFarmBoardDetailMap(Action<int, rawEventFarmBoardDetail> filter,string tag="") => EventFarmBoardDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventFarmBoardDetailMap(string tag="") => EventFarmBoardDetailVisitor.Keys(tag);
		public static rawEventFarmBoardDetail? GetEventFarmBoardDetail(int key,string tag="") => EventFarmBoardDetailVisitor.Get(key,tag);
		public static List<rawEventFarmBoardDetail> GetEventFarmBoardDetailByFilter(Func<rawEventFarmBoardDetail, bool> filterFunc,string tag="") => EventFarmBoardDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFarmBoardDetail? GetOneEventFarmBoardDetailByFilter(Func<rawEventFarmBoardDetail, bool> filterFunc,string tag="") => EventFarmBoardDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFarmBoardDetail
	#region EventFarmBoardFarm
		public static int GetCountEventFarmBoardFarmMap(string tag="") => EventFarmBoardFarmVisitor.GetCount(tag);
		public static string GetFileNameEventFarmBoardFarmMap() => EventFarmBoardFarmVisitor.GetFileName();
		public static List<int> SortedKeysEventFarmBoardFarmMap(string tag="") => EventFarmBoardFarmVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFarmBoardFarm> GetEventFarmBoardFarmMap(string tag="") => EventFarmBoardFarmVisitor.All(tag);
		public static void RangeEventFarmBoardFarmMap(Action<int, rawEventFarmBoardFarm> filter,string tag="") => EventFarmBoardFarmVisitor.Range(filter,tag);
		public static List<int> KeysEventFarmBoardFarmMap(string tag="") => EventFarmBoardFarmVisitor.Keys(tag);
		public static rawEventFarmBoardFarm? GetEventFarmBoardFarm(int key,string tag="") => EventFarmBoardFarmVisitor.Get(key,tag);
		public static List<rawEventFarmBoardFarm> GetEventFarmBoardFarmByFilter(Func<rawEventFarmBoardFarm, bool> filterFunc,string tag="") => EventFarmBoardFarmVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFarmBoardFarm? GetOneEventFarmBoardFarmByFilter(Func<rawEventFarmBoardFarm, bool> filterFunc,string tag="") => EventFarmBoardFarmVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFarmBoardFarm
	#region EventFarmBoardGroup
		public static int GetCountEventFarmBoardGroupMap(string tag="") => EventFarmBoardGroupVisitor.GetCount(tag);
		public static string GetFileNameEventFarmBoardGroupMap() => EventFarmBoardGroupVisitor.GetFileName();
		public static List<int> SortedKeysEventFarmBoardGroupMap(string tag="") => EventFarmBoardGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFarmBoardGroup> GetEventFarmBoardGroupMap(string tag="") => EventFarmBoardGroupVisitor.All(tag);
		public static void RangeEventFarmBoardGroupMap(Action<int, rawEventFarmBoardGroup> filter,string tag="") => EventFarmBoardGroupVisitor.Range(filter,tag);
		public static List<int> KeysEventFarmBoardGroupMap(string tag="") => EventFarmBoardGroupVisitor.Keys(tag);
		public static rawEventFarmBoardGroup? GetEventFarmBoardGroup(int key,string tag="") => EventFarmBoardGroupVisitor.Get(key,tag);
		public static List<rawEventFarmBoardGroup> GetEventFarmBoardGroupByFilter(Func<rawEventFarmBoardGroup, bool> filterFunc,string tag="") => EventFarmBoardGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFarmBoardGroup? GetOneEventFarmBoardGroupByFilter(Func<rawEventFarmBoardGroup, bool> filterFunc,string tag="") => EventFarmBoardGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFarmBoardGroup
	#region EventFarmDrop
		public static int GetCountEventFarmDropMap(string tag="") => EventFarmDropVisitor.GetCount(tag);
		public static string GetFileNameEventFarmDropMap() => EventFarmDropVisitor.GetFileName();
		public static List<int> SortedKeysEventFarmDropMap(string tag="") => EventFarmDropVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFarmDrop> GetEventFarmDropMap(string tag="") => EventFarmDropVisitor.All(tag);
		public static void RangeEventFarmDropMap(Action<int, rawEventFarmDrop> filter,string tag="") => EventFarmDropVisitor.Range(filter,tag);
		public static List<int> KeysEventFarmDropMap(string tag="") => EventFarmDropVisitor.Keys(tag);
		public static rawEventFarmDrop? GetEventFarmDrop(int key,string tag="") => EventFarmDropVisitor.Get(key,tag);
		public static List<rawEventFarmDrop> GetEventFarmDropByFilter(Func<rawEventFarmDrop, bool> filterFunc,string tag="") => EventFarmDropVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFarmDrop? GetOneEventFarmDropByFilter(Func<rawEventFarmDrop, bool> filterFunc,string tag="") => EventFarmDropVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFarmDrop
	#region EventFarmEndless
		public static int GetCountEventFarmEndlessMap(string tag="") => EventFarmEndlessVisitor.GetCount(tag);
		public static string GetFileNameEventFarmEndlessMap() => EventFarmEndlessVisitor.GetFileName();
		public static List<int> SortedKeysEventFarmEndlessMap(string tag="") => EventFarmEndlessVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFarmEndless> GetEventFarmEndlessMap(string tag="") => EventFarmEndlessVisitor.All(tag);
		public static void RangeEventFarmEndlessMap(Action<int, rawEventFarmEndless> filter,string tag="") => EventFarmEndlessVisitor.Range(filter,tag);
		public static List<int> KeysEventFarmEndlessMap(string tag="") => EventFarmEndlessVisitor.Keys(tag);
		public static rawEventFarmEndless? GetEventFarmEndless(int key,string tag="") => EventFarmEndlessVisitor.Get(key,tag);
		public static List<rawEventFarmEndless> GetEventFarmEndlessByFilter(Func<rawEventFarmEndless, bool> filterFunc,string tag="") => EventFarmEndlessVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFarmEndless? GetOneEventFarmEndlessByFilter(Func<rawEventFarmEndless, bool> filterFunc,string tag="") => EventFarmEndlessVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFarmEndless
	#region EventFarmEndlessInfo
		public static int GetCountEventFarmEndlessInfoMap(string tag="") => EventFarmEndlessInfoVisitor.GetCount(tag);
		public static string GetFileNameEventFarmEndlessInfoMap() => EventFarmEndlessInfoVisitor.GetFileName();
		public static List<int> SortedKeysEventFarmEndlessInfoMap(string tag="") => EventFarmEndlessInfoVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFarmEndlessInfo> GetEventFarmEndlessInfoMap(string tag="") => EventFarmEndlessInfoVisitor.All(tag);
		public static void RangeEventFarmEndlessInfoMap(Action<int, rawEventFarmEndlessInfo> filter,string tag="") => EventFarmEndlessInfoVisitor.Range(filter,tag);
		public static List<int> KeysEventFarmEndlessInfoMap(string tag="") => EventFarmEndlessInfoVisitor.Keys(tag);
		public static rawEventFarmEndlessInfo? GetEventFarmEndlessInfo(int key,string tag="") => EventFarmEndlessInfoVisitor.Get(key,tag);
		public static List<rawEventFarmEndlessInfo> GetEventFarmEndlessInfoByFilter(Func<rawEventFarmEndlessInfo, bool> filterFunc,string tag="") => EventFarmEndlessInfoVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFarmEndlessInfo? GetOneEventFarmEndlessInfoByFilter(Func<rawEventFarmEndlessInfo, bool> filterFunc,string tag="") => EventFarmEndlessInfoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFarmEndlessInfo
	#region EventFarmRow
		public static int GetCountEventFarmRowMap(string tag="") => EventFarmRowVisitor.GetCount(tag);
		public static string GetFileNameEventFarmRowMap() => EventFarmRowVisitor.GetFileName();
		public static List<int> SortedKeysEventFarmRowMap(string tag="") => EventFarmRowVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFarmRow> GetEventFarmRowMap(string tag="") => EventFarmRowVisitor.All(tag);
		public static void RangeEventFarmRowMap(Action<int, rawEventFarmRow> filter,string tag="") => EventFarmRowVisitor.Range(filter,tag);
		public static List<int> KeysEventFarmRowMap(string tag="") => EventFarmRowVisitor.Keys(tag);
		public static rawEventFarmRow? GetEventFarmRow(int key,string tag="") => EventFarmRowVisitor.Get(key,tag);
		public static List<rawEventFarmRow> GetEventFarmRowByFilter(Func<rawEventFarmRow, bool> filterFunc,string tag="") => EventFarmRowVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFarmRow? GetOneEventFarmRowByFilter(Func<rawEventFarmRow, bool> filterFunc,string tag="") => EventFarmRowVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFarmRow
	#region EventFight
		public static int GetCountEventFightMap(string tag="") => EventFightVisitor.GetCount(tag);
		public static string GetFileNameEventFightMap() => EventFightVisitor.GetFileName();
		public static List<int> SortedKeysEventFightMap(string tag="") => EventFightVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFight> GetEventFightMap(string tag="") => EventFightVisitor.All(tag);
		public static void RangeEventFightMap(Action<int, rawEventFight> filter,string tag="") => EventFightVisitor.Range(filter,tag);
		public static List<int> KeysEventFightMap(string tag="") => EventFightVisitor.Keys(tag);
		public static rawEventFight? GetEventFight(int key,string tag="") => EventFightVisitor.Get(key,tag);
		public static List<rawEventFight> GetEventFightByFilter(Func<rawEventFight, bool> filterFunc,string tag="") => EventFightVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFight? GetOneEventFightByFilter(Func<rawEventFight, bool> filterFunc,string tag="") => EventFightVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFight
	#region EventFightDetail
		public static int GetCountEventFightDetailMap(string tag="") => EventFightDetailVisitor.GetCount(tag);
		public static string GetFileNameEventFightDetailMap() => EventFightDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventFightDetailMap(string tag="") => EventFightDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFightDetail> GetEventFightDetailMap(string tag="") => EventFightDetailVisitor.All(tag);
		public static void RangeEventFightDetailMap(Action<int, rawEventFightDetail> filter,string tag="") => EventFightDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventFightDetailMap(string tag="") => EventFightDetailVisitor.Keys(tag);
		public static rawEventFightDetail? GetEventFightDetail(int key,string tag="") => EventFightDetailVisitor.Get(key,tag);
		public static List<rawEventFightDetail> GetEventFightDetailByFilter(Func<rawEventFightDetail, bool> filterFunc,string tag="") => EventFightDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFightDetail? GetOneEventFightDetailByFilter(Func<rawEventFightDetail, bool> filterFunc,string tag="") => EventFightDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFightDetail
	#region EventFightLevel
		public static int GetCountEventFightLevelMap(string tag="") => EventFightLevelVisitor.GetCount(tag);
		public static string GetFileNameEventFightLevelMap() => EventFightLevelVisitor.GetFileName();
		public static List<int> SortedKeysEventFightLevelMap(string tag="") => EventFightLevelVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFightLevel> GetEventFightLevelMap(string tag="") => EventFightLevelVisitor.All(tag);
		public static void RangeEventFightLevelMap(Action<int, rawEventFightLevel> filter,string tag="") => EventFightLevelVisitor.Range(filter,tag);
		public static List<int> KeysEventFightLevelMap(string tag="") => EventFightLevelVisitor.Keys(tag);
		public static rawEventFightLevel? GetEventFightLevel(int key,string tag="") => EventFightLevelVisitor.Get(key,tag);
		public static List<rawEventFightLevel> GetEventFightLevelByFilter(Func<rawEventFightLevel, bool> filterFunc,string tag="") => EventFightLevelVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFightLevel? GetOneEventFightLevelByFilter(Func<rawEventFightLevel, bool> filterFunc,string tag="") => EventFightLevelVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFightLevel
	#region EventFightOnePlusOne
		public static int GetCountEventFightOnePlusOneMap(string tag="") => EventFightOnePlusOneVisitor.GetCount(tag);
		public static string GetFileNameEventFightOnePlusOneMap() => EventFightOnePlusOneVisitor.GetFileName();
		public static List<int> SortedKeysEventFightOnePlusOneMap(string tag="") => EventFightOnePlusOneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFightOnePlusOne> GetEventFightOnePlusOneMap(string tag="") => EventFightOnePlusOneVisitor.All(tag);
		public static void RangeEventFightOnePlusOneMap(Action<int, rawEventFightOnePlusOne> filter,string tag="") => EventFightOnePlusOneVisitor.Range(filter,tag);
		public static List<int> KeysEventFightOnePlusOneMap(string tag="") => EventFightOnePlusOneVisitor.Keys(tag);
		public static rawEventFightOnePlusOne? GetEventFightOnePlusOne(int key,string tag="") => EventFightOnePlusOneVisitor.Get(key,tag);
		public static List<rawEventFightOnePlusOne> GetEventFightOnePlusOneByFilter(Func<rawEventFightOnePlusOne, bool> filterFunc,string tag="") => EventFightOnePlusOneVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFightOnePlusOne? GetOneEventFightOnePlusOneByFilter(Func<rawEventFightOnePlusOne, bool> filterFunc,string tag="") => EventFightOnePlusOneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFightOnePlusOne
	#region EventFish
		public static int GetCountEventFishMap(string tag="") => EventFishVisitor.GetCount(tag);
		public static string GetFileNameEventFishMap() => EventFishVisitor.GetFileName();
		public static List<int> SortedKeysEventFishMap(string tag="") => EventFishVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFish> GetEventFishMap(string tag="") => EventFishVisitor.All(tag);
		public static void RangeEventFishMap(Action<int, rawEventFish> filter,string tag="") => EventFishVisitor.Range(filter,tag);
		public static List<int> KeysEventFishMap(string tag="") => EventFishVisitor.Keys(tag);
		public static rawEventFish? GetEventFish(int key,string tag="") => EventFishVisitor.Get(key,tag);
		public static List<rawEventFish> GetEventFishByFilter(Func<rawEventFish, bool> filterFunc,string tag="") => EventFishVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFish? GetOneEventFishByFilter(Func<rawEventFish, bool> filterFunc,string tag="") => EventFishVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFish
	#region EventFishDetail
		public static int GetCountEventFishDetailMap(string tag="") => EventFishDetailVisitor.GetCount(tag);
		public static string GetFileNameEventFishDetailMap() => EventFishDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventFishDetailMap(string tag="") => EventFishDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFishDetail> GetEventFishDetailMap(string tag="") => EventFishDetailVisitor.All(tag);
		public static void RangeEventFishDetailMap(Action<int, rawEventFishDetail> filter,string tag="") => EventFishDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventFishDetailMap(string tag="") => EventFishDetailVisitor.Keys(tag);
		public static rawEventFishDetail? GetEventFishDetail(int key,string tag="") => EventFishDetailVisitor.Get(key,tag);
		public static List<rawEventFishDetail> GetEventFishDetailByFilter(Func<rawEventFishDetail, bool> filterFunc,string tag="") => EventFishDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFishDetail? GetOneEventFishDetailByFilter(Func<rawEventFishDetail, bool> filterFunc,string tag="") => EventFishDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFishDetail
	#region EventFishMilestone
		public static int GetCountEventFishMilestoneMap(string tag="") => EventFishMilestoneVisitor.GetCount(tag);
		public static string GetFileNameEventFishMilestoneMap() => EventFishMilestoneVisitor.GetFileName();
		public static List<int> SortedKeysEventFishMilestoneMap(string tag="") => EventFishMilestoneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFishMilestone> GetEventFishMilestoneMap(string tag="") => EventFishMilestoneVisitor.All(tag);
		public static void RangeEventFishMilestoneMap(Action<int, rawEventFishMilestone> filter,string tag="") => EventFishMilestoneVisitor.Range(filter,tag);
		public static List<int> KeysEventFishMilestoneMap(string tag="") => EventFishMilestoneVisitor.Keys(tag);
		public static rawEventFishMilestone? GetEventFishMilestone(int key,string tag="") => EventFishMilestoneVisitor.Get(key,tag);
		public static List<rawEventFishMilestone> GetEventFishMilestoneByFilter(Func<rawEventFishMilestone, bool> filterFunc,string tag="") => EventFishMilestoneVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFishMilestone? GetOneEventFishMilestoneByFilter(Func<rawEventFishMilestone, bool> filterFunc,string tag="") => EventFishMilestoneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFishMilestone
	#region EventFlashOrder
		public static int GetCountEventFlashOrderMap(string tag="") => EventFlashOrderVisitor.GetCount(tag);
		public static string GetFileNameEventFlashOrderMap() => EventFlashOrderVisitor.GetFileName();
		public static List<int> SortedKeysEventFlashOrderMap(string tag="") => EventFlashOrderVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventFlashOrder> GetEventFlashOrderMap(string tag="") => EventFlashOrderVisitor.All(tag);
		public static void RangeEventFlashOrderMap(Action<int, rawEventFlashOrder> filter,string tag="") => EventFlashOrderVisitor.Range(filter,tag);
		public static List<int> KeysEventFlashOrderMap(string tag="") => EventFlashOrderVisitor.Keys(tag);
		public static rawEventFlashOrder? GetEventFlashOrder(int key,string tag="") => EventFlashOrderVisitor.Get(key,tag);
		public static List<rawEventFlashOrder> GetEventFlashOrderByFilter(Func<rawEventFlashOrder, bool> filterFunc,string tag="") => EventFlashOrderVisitor.GetByFilter(filterFunc,tag);
		public static rawEventFlashOrder? GetOneEventFlashOrderByFilter(Func<rawEventFlashOrder, bool> filterFunc,string tag="") => EventFlashOrderVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventFlashOrder
	#region EventGuess
		public static int GetCountEventGuessMap(string tag="") => EventGuessVisitor.GetCount(tag);
		public static string GetFileNameEventGuessMap() => EventGuessVisitor.GetFileName();
		public static List<int> SortedKeysEventGuessMap(string tag="") => EventGuessVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventGuess> GetEventGuessMap(string tag="") => EventGuessVisitor.All(tag);
		public static void RangeEventGuessMap(Action<int, rawEventGuess> filter,string tag="") => EventGuessVisitor.Range(filter,tag);
		public static List<int> KeysEventGuessMap(string tag="") => EventGuessVisitor.Keys(tag);
		public static rawEventGuess? GetEventGuess(int key,string tag="") => EventGuessVisitor.Get(key,tag);
		public static List<rawEventGuess> GetEventGuessByFilter(Func<rawEventGuess, bool> filterFunc,string tag="") => EventGuessVisitor.GetByFilter(filterFunc,tag);
		public static rawEventGuess? GetOneEventGuessByFilter(Func<rawEventGuess, bool> filterFunc,string tag="") => EventGuessVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventGuess
	#region EventGuessDetail
		public static int GetCountEventGuessDetailMap(string tag="") => EventGuessDetailVisitor.GetCount(tag);
		public static string GetFileNameEventGuessDetailMap() => EventGuessDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventGuessDetailMap(string tag="") => EventGuessDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventGuessDetail> GetEventGuessDetailMap(string tag="") => EventGuessDetailVisitor.All(tag);
		public static void RangeEventGuessDetailMap(Action<int, rawEventGuessDetail> filter,string tag="") => EventGuessDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventGuessDetailMap(string tag="") => EventGuessDetailVisitor.Keys(tag);
		public static rawEventGuessDetail? GetEventGuessDetail(int key,string tag="") => EventGuessDetailVisitor.Get(key,tag);
		public static List<rawEventGuessDetail> GetEventGuessDetailByFilter(Func<rawEventGuessDetail, bool> filterFunc,string tag="") => EventGuessDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventGuessDetail? GetOneEventGuessDetailByFilter(Func<rawEventGuessDetail, bool> filterFunc,string tag="") => EventGuessDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventGuessDetail
	#region EventGuessLevel
		public static int GetCountEventGuessLevelMap(string tag="") => EventGuessLevelVisitor.GetCount(tag);
		public static string GetFileNameEventGuessLevelMap() => EventGuessLevelVisitor.GetFileName();
		public static List<int> SortedKeysEventGuessLevelMap(string tag="") => EventGuessLevelVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventGuessLevel> GetEventGuessLevelMap(string tag="") => EventGuessLevelVisitor.All(tag);
		public static void RangeEventGuessLevelMap(Action<int, rawEventGuessLevel> filter,string tag="") => EventGuessLevelVisitor.Range(filter,tag);
		public static List<int> KeysEventGuessLevelMap(string tag="") => EventGuessLevelVisitor.Keys(tag);
		public static rawEventGuessLevel? GetEventGuessLevel(int key,string tag="") => EventGuessLevelVisitor.Get(key,tag);
		public static List<rawEventGuessLevel> GetEventGuessLevelByFilter(Func<rawEventGuessLevel, bool> filterFunc,string tag="") => EventGuessLevelVisitor.GetByFilter(filterFunc,tag);
		public static rawEventGuessLevel? GetOneEventGuessLevelByFilter(Func<rawEventGuessLevel, bool> filterFunc,string tag="") => EventGuessLevelVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventGuessLevel
	#region EventGuessMilestone
		public static int GetCountEventGuessMilestoneMap(string tag="") => EventGuessMilestoneVisitor.GetCount(tag);
		public static string GetFileNameEventGuessMilestoneMap() => EventGuessMilestoneVisitor.GetFileName();
		public static List<int> SortedKeysEventGuessMilestoneMap(string tag="") => EventGuessMilestoneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventGuessMilestone> GetEventGuessMilestoneMap(string tag="") => EventGuessMilestoneVisitor.All(tag);
		public static void RangeEventGuessMilestoneMap(Action<int, rawEventGuessMilestone> filter,string tag="") => EventGuessMilestoneVisitor.Range(filter,tag);
		public static List<int> KeysEventGuessMilestoneMap(string tag="") => EventGuessMilestoneVisitor.Keys(tag);
		public static rawEventGuessMilestone? GetEventGuessMilestone(int key,string tag="") => EventGuessMilestoneVisitor.Get(key,tag);
		public static List<rawEventGuessMilestone> GetEventGuessMilestoneByFilter(Func<rawEventGuessMilestone, bool> filterFunc,string tag="") => EventGuessMilestoneVisitor.GetByFilter(filterFunc,tag);
		public static rawEventGuessMilestone? GetOneEventGuessMilestoneByFilter(Func<rawEventGuessMilestone, bool> filterFunc,string tag="") => EventGuessMilestoneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventGuessMilestone
	#region EventGuessRound
		public static int GetCountEventGuessRoundMap(string tag="") => EventGuessRoundVisitor.GetCount(tag);
		public static string GetFileNameEventGuessRoundMap() => EventGuessRoundVisitor.GetFileName();
		public static List<int> SortedKeysEventGuessRoundMap(string tag="") => EventGuessRoundVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventGuessRound> GetEventGuessRoundMap(string tag="") => EventGuessRoundVisitor.All(tag);
		public static void RangeEventGuessRoundMap(Action<int, rawEventGuessRound> filter,string tag="") => EventGuessRoundVisitor.Range(filter,tag);
		public static List<int> KeysEventGuessRoundMap(string tag="") => EventGuessRoundVisitor.Keys(tag);
		public static rawEventGuessRound? GetEventGuessRound(int key,string tag="") => EventGuessRoundVisitor.Get(key,tag);
		public static List<rawEventGuessRound> GetEventGuessRoundByFilter(Func<rawEventGuessRound, bool> filterFunc,string tag="") => EventGuessRoundVisitor.GetByFilter(filterFunc,tag);
		public static rawEventGuessRound? GetOneEventGuessRoundByFilter(Func<rawEventGuessRound, bool> filterFunc,string tag="") => EventGuessRoundVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventGuessRound
	#region EventInvite
		public static int GetCountEventInviteMap(string tag="") => EventInviteVisitor.GetCount(tag);
		public static string GetFileNameEventInviteMap() => EventInviteVisitor.GetFileName();
		public static List<int> SortedKeysEventInviteMap(string tag="") => EventInviteVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventInvite> GetEventInviteMap(string tag="") => EventInviteVisitor.All(tag);
		public static void RangeEventInviteMap(Action<int, rawEventInvite> filter,string tag="") => EventInviteVisitor.Range(filter,tag);
		public static List<int> KeysEventInviteMap(string tag="") => EventInviteVisitor.Keys(tag);
		public static rawEventInvite? GetEventInvite(int key,string tag="") => EventInviteVisitor.Get(key,tag);
		public static List<rawEventInvite> GetEventInviteByFilter(Func<rawEventInvite, bool> filterFunc,string tag="") => EventInviteVisitor.GetByFilter(filterFunc,tag);
		public static rawEventInvite? GetOneEventInviteByFilter(Func<rawEventInvite, bool> filterFunc,string tag="") => EventInviteVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventInvite
	#region EventItemBingo
		public static int GetCountEventItemBingoMap(string tag="") => EventItemBingoVisitor.GetCount(tag);
		public static string GetFileNameEventItemBingoMap() => EventItemBingoVisitor.GetFileName();
		public static List<int> SortedKeysEventItemBingoMap(string tag="") => EventItemBingoVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventItemBingo> GetEventItemBingoMap(string tag="") => EventItemBingoVisitor.All(tag);
		public static void RangeEventItemBingoMap(Action<int, rawEventItemBingo> filter,string tag="") => EventItemBingoVisitor.Range(filter,tag);
		public static List<int> KeysEventItemBingoMap(string tag="") => EventItemBingoVisitor.Keys(tag);
		public static rawEventItemBingo? GetEventItemBingo(int key,string tag="") => EventItemBingoVisitor.Get(key,tag);
		public static List<rawEventItemBingo> GetEventItemBingoByFilter(Func<rawEventItemBingo, bool> filterFunc,string tag="") => EventItemBingoVisitor.GetByFilter(filterFunc,tag);
		public static rawEventItemBingo? GetOneEventItemBingoByFilter(Func<rawEventItemBingo, bool> filterFunc,string tag="") => EventItemBingoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventItemBingo
	#region EventItemBingoDetail
		public static int GetCountEventItemBingoDetailMap(string tag="") => EventItemBingoDetailVisitor.GetCount(tag);
		public static string GetFileNameEventItemBingoDetailMap() => EventItemBingoDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventItemBingoDetailMap(string tag="") => EventItemBingoDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventItemBingoDetail> GetEventItemBingoDetailMap(string tag="") => EventItemBingoDetailVisitor.All(tag);
		public static void RangeEventItemBingoDetailMap(Action<int, rawEventItemBingoDetail> filter,string tag="") => EventItemBingoDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventItemBingoDetailMap(string tag="") => EventItemBingoDetailVisitor.Keys(tag);
		public static rawEventItemBingoDetail? GetEventItemBingoDetail(int key,string tag="") => EventItemBingoDetailVisitor.Get(key,tag);
		public static List<rawEventItemBingoDetail> GetEventItemBingoDetailByFilter(Func<rawEventItemBingoDetail, bool> filterFunc,string tag="") => EventItemBingoDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventItemBingoDetail? GetOneEventItemBingoDetailByFilter(Func<rawEventItemBingoDetail, bool> filterFunc,string tag="") => EventItemBingoDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventItemBingoDetail
	#region EventItemBingoRound
		public static int GetCountEventItemBingoRoundMap(string tag="") => EventItemBingoRoundVisitor.GetCount(tag);
		public static string GetFileNameEventItemBingoRoundMap() => EventItemBingoRoundVisitor.GetFileName();
		public static List<int> SortedKeysEventItemBingoRoundMap(string tag="") => EventItemBingoRoundVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventItemBingoRound> GetEventItemBingoRoundMap(string tag="") => EventItemBingoRoundVisitor.All(tag);
		public static void RangeEventItemBingoRoundMap(Action<int, rawEventItemBingoRound> filter,string tag="") => EventItemBingoRoundVisitor.Range(filter,tag);
		public static List<int> KeysEventItemBingoRoundMap(string tag="") => EventItemBingoRoundVisitor.Keys(tag);
		public static rawEventItemBingoRound? GetEventItemBingoRound(int key,string tag="") => EventItemBingoRoundVisitor.Get(key,tag);
		public static List<rawEventItemBingoRound> GetEventItemBingoRoundByFilter(Func<rawEventItemBingoRound, bool> filterFunc,string tag="") => EventItemBingoRoundVisitor.GetByFilter(filterFunc,tag);
		public static rawEventItemBingoRound? GetOneEventItemBingoRoundByFilter(Func<rawEventItemBingoRound, bool> filterFunc,string tag="") => EventItemBingoRoundVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventItemBingoRound
	#region EventLandmark
		public static int GetCountEventLandmarkMap(string tag="") => EventLandmarkVisitor.GetCount(tag);
		public static string GetFileNameEventLandmarkMap() => EventLandmarkVisitor.GetFileName();
		public static List<int> SortedKeysEventLandmarkMap(string tag="") => EventLandmarkVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventLandmark> GetEventLandmarkMap(string tag="") => EventLandmarkVisitor.All(tag);
		public static void RangeEventLandmarkMap(Action<int, rawEventLandmark> filter,string tag="") => EventLandmarkVisitor.Range(filter,tag);
		public static List<int> KeysEventLandmarkMap(string tag="") => EventLandmarkVisitor.Keys(tag);
		public static rawEventLandmark? GetEventLandmark(int key,string tag="") => EventLandmarkVisitor.Get(key,tag);
		public static List<rawEventLandmark> GetEventLandmarkByFilter(Func<rawEventLandmark, bool> filterFunc,string tag="") => EventLandmarkVisitor.GetByFilter(filterFunc,tag);
		public static rawEventLandmark? GetOneEventLandmarkByFilter(Func<rawEventLandmark, bool> filterFunc,string tag="") => EventLandmarkVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventLandmark
	#region EventLimitMerge
		public static int GetCountEventLimitMergeMap(string tag="") => EventLimitMergeVisitor.GetCount(tag);
		public static string GetFileNameEventLimitMergeMap() => EventLimitMergeVisitor.GetFileName();
		public static List<int> SortedKeysEventLimitMergeMap(string tag="") => EventLimitMergeVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventLimitMerge> GetEventLimitMergeMap(string tag="") => EventLimitMergeVisitor.All(tag);
		public static void RangeEventLimitMergeMap(Action<int, rawEventLimitMerge> filter,string tag="") => EventLimitMergeVisitor.Range(filter,tag);
		public static List<int> KeysEventLimitMergeMap(string tag="") => EventLimitMergeVisitor.Keys(tag);
		public static rawEventLimitMerge? GetEventLimitMerge(int key,string tag="") => EventLimitMergeVisitor.Get(key,tag);
		public static List<rawEventLimitMerge> GetEventLimitMergeByFilter(Func<rawEventLimitMerge, bool> filterFunc,string tag="") => EventLimitMergeVisitor.GetByFilter(filterFunc,tag);
		public static rawEventLimitMerge? GetOneEventLimitMergeByFilter(Func<rawEventLimitMerge, bool> filterFunc,string tag="") => EventLimitMergeVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventLimitMerge
	#region EventLimitMergeGroup
		public static int GetCountEventLimitMergeGroupMap(string tag="") => EventLimitMergeGroupVisitor.GetCount(tag);
		public static string GetFileNameEventLimitMergeGroupMap() => EventLimitMergeGroupVisitor.GetFileName();
		public static List<int> SortedKeysEventLimitMergeGroupMap(string tag="") => EventLimitMergeGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventLimitMergeGroup> GetEventLimitMergeGroupMap(string tag="") => EventLimitMergeGroupVisitor.All(tag);
		public static void RangeEventLimitMergeGroupMap(Action<int, rawEventLimitMergeGroup> filter,string tag="") => EventLimitMergeGroupVisitor.Range(filter,tag);
		public static List<int> KeysEventLimitMergeGroupMap(string tag="") => EventLimitMergeGroupVisitor.Keys(tag);
		public static rawEventLimitMergeGroup? GetEventLimitMergeGroup(int key,string tag="") => EventLimitMergeGroupVisitor.Get(key,tag);
		public static List<rawEventLimitMergeGroup> GetEventLimitMergeGroupByFilter(Func<rawEventLimitMergeGroup, bool> filterFunc,string tag="") => EventLimitMergeGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawEventLimitMergeGroup? GetOneEventLimitMergeGroupByFilter(Func<rawEventLimitMergeGroup, bool> filterFunc,string tag="") => EventLimitMergeGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventLimitMergeGroup
	#region EventLimitMergeOrder
		public static int GetCountEventLimitMergeOrderMap(string tag="") => EventLimitMergeOrderVisitor.GetCount(tag);
		public static string GetFileNameEventLimitMergeOrderMap() => EventLimitMergeOrderVisitor.GetFileName();
		public static List<int> SortedKeysEventLimitMergeOrderMap(string tag="") => EventLimitMergeOrderVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventLimitMergeOrder> GetEventLimitMergeOrderMap(string tag="") => EventLimitMergeOrderVisitor.All(tag);
		public static void RangeEventLimitMergeOrderMap(Action<int, rawEventLimitMergeOrder> filter,string tag="") => EventLimitMergeOrderVisitor.Range(filter,tag);
		public static List<int> KeysEventLimitMergeOrderMap(string tag="") => EventLimitMergeOrderVisitor.Keys(tag);
		public static rawEventLimitMergeOrder? GetEventLimitMergeOrder(int key,string tag="") => EventLimitMergeOrderVisitor.Get(key,tag);
		public static List<rawEventLimitMergeOrder> GetEventLimitMergeOrderByFilter(Func<rawEventLimitMergeOrder, bool> filterFunc,string tag="") => EventLimitMergeOrderVisitor.GetByFilter(filterFunc,tag);
		public static rawEventLimitMergeOrder? GetOneEventLimitMergeOrderByFilter(Func<rawEventLimitMergeOrder, bool> filterFunc,string tag="") => EventLimitMergeOrderVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventLimitMergeOrder
	#region EventLoginGift
		public static int GetCountEventLoginGiftMap(string tag="") => EventLoginGiftVisitor.GetCount(tag);
		public static string GetFileNameEventLoginGiftMap() => EventLoginGiftVisitor.GetFileName();
		public static List<int> SortedKeysEventLoginGiftMap(string tag="") => EventLoginGiftVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventLoginGift> GetEventLoginGiftMap(string tag="") => EventLoginGiftVisitor.All(tag);
		public static void RangeEventLoginGiftMap(Action<int, rawEventLoginGift> filter,string tag="") => EventLoginGiftVisitor.Range(filter,tag);
		public static List<int> KeysEventLoginGiftMap(string tag="") => EventLoginGiftVisitor.Keys(tag);
		public static rawEventLoginGift? GetEventLoginGift(int key,string tag="") => EventLoginGiftVisitor.Get(key,tag);
		public static List<rawEventLoginGift> GetEventLoginGiftByFilter(Func<rawEventLoginGift, bool> filterFunc,string tag="") => EventLoginGiftVisitor.GetByFilter(filterFunc,tag);
		public static rawEventLoginGift? GetOneEventLoginGiftByFilter(Func<rawEventLoginGift, bool> filterFunc,string tag="") => EventLoginGiftVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventLoginGift
	#region EventMarketIAPGift
		public static int GetCountEventMarketIAPGiftMap(string tag="") => EventMarketIAPGiftVisitor.GetCount(tag);
		public static string GetFileNameEventMarketIAPGiftMap() => EventMarketIAPGiftVisitor.GetFileName();
		public static List<int> SortedKeysEventMarketIAPGiftMap(string tag="") => EventMarketIAPGiftVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMarketIAPGift> GetEventMarketIAPGiftMap(string tag="") => EventMarketIAPGiftVisitor.All(tag);
		public static void RangeEventMarketIAPGiftMap(Action<int, rawEventMarketIAPGift> filter,string tag="") => EventMarketIAPGiftVisitor.Range(filter,tag);
		public static List<int> KeysEventMarketIAPGiftMap(string tag="") => EventMarketIAPGiftVisitor.Keys(tag);
		public static rawEventMarketIAPGift? GetEventMarketIAPGift(int key,string tag="") => EventMarketIAPGiftVisitor.Get(key,tag);
		public static List<rawEventMarketIAPGift> GetEventMarketIAPGiftByFilter(Func<rawEventMarketIAPGift, bool> filterFunc,string tag="") => EventMarketIAPGiftVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMarketIAPGift? GetOneEventMarketIAPGiftByFilter(Func<rawEventMarketIAPGift, bool> filterFunc,string tag="") => EventMarketIAPGiftVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMarketIAPGift
	#region EventMine
		public static int GetCountEventMineMap(string tag="") => EventMineVisitor.GetCount(tag);
		public static string GetFileNameEventMineMap() => EventMineVisitor.GetFileName();
		public static List<int> SortedKeysEventMineMap(string tag="") => EventMineVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMine> GetEventMineMap(string tag="") => EventMineVisitor.All(tag);
		public static void RangeEventMineMap(Action<int, rawEventMine> filter,string tag="") => EventMineVisitor.Range(filter,tag);
		public static List<int> KeysEventMineMap(string tag="") => EventMineVisitor.Keys(tag);
		public static rawEventMine? GetEventMine(int key,string tag="") => EventMineVisitor.Get(key,tag);
		public static List<rawEventMine> GetEventMineByFilter(Func<rawEventMine, bool> filterFunc,string tag="") => EventMineVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMine? GetOneEventMineByFilter(Func<rawEventMine, bool> filterFunc,string tag="") => EventMineVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMine
	#region EventMineBoardDetail
		public static int GetCountEventMineBoardDetailMap(string tag="") => EventMineBoardDetailVisitor.GetCount(tag);
		public static string GetFileNameEventMineBoardDetailMap() => EventMineBoardDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventMineBoardDetailMap(string tag="") => EventMineBoardDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMineBoardDetail> GetEventMineBoardDetailMap(string tag="") => EventMineBoardDetailVisitor.All(tag);
		public static void RangeEventMineBoardDetailMap(Action<int, rawEventMineBoardDetail> filter,string tag="") => EventMineBoardDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventMineBoardDetailMap(string tag="") => EventMineBoardDetailVisitor.Keys(tag);
		public static rawEventMineBoardDetail? GetEventMineBoardDetail(int key,string tag="") => EventMineBoardDetailVisitor.Get(key,tag);
		public static List<rawEventMineBoardDetail> GetEventMineBoardDetailByFilter(Func<rawEventMineBoardDetail, bool> filterFunc,string tag="") => EventMineBoardDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMineBoardDetail? GetOneEventMineBoardDetailByFilter(Func<rawEventMineBoardDetail, bool> filterFunc,string tag="") => EventMineBoardDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMineBoardDetail
	#region EventMineBoardRow
		public static int GetCountEventMineBoardRowMap(string tag="") => EventMineBoardRowVisitor.GetCount(tag);
		public static string GetFileNameEventMineBoardRowMap() => EventMineBoardRowVisitor.GetFileName();
		public static List<int> SortedKeysEventMineBoardRowMap(string tag="") => EventMineBoardRowVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMineBoardRow> GetEventMineBoardRowMap(string tag="") => EventMineBoardRowVisitor.All(tag);
		public static void RangeEventMineBoardRowMap(Action<int, rawEventMineBoardRow> filter,string tag="") => EventMineBoardRowVisitor.Range(filter,tag);
		public static List<int> KeysEventMineBoardRowMap(string tag="") => EventMineBoardRowVisitor.Keys(tag);
		public static rawEventMineBoardRow? GetEventMineBoardRow(int key,string tag="") => EventMineBoardRowVisitor.Get(key,tag);
		public static List<rawEventMineBoardRow> GetEventMineBoardRowByFilter(Func<rawEventMineBoardRow, bool> filterFunc,string tag="") => EventMineBoardRowVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMineBoardRow? GetOneEventMineBoardRowByFilter(Func<rawEventMineBoardRow, bool> filterFunc,string tag="") => EventMineBoardRowVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMineBoardRow
	#region EventMineCart
		public static int GetCountEventMineCartMap(string tag="") => EventMineCartVisitor.GetCount(tag);
		public static string GetFileNameEventMineCartMap() => EventMineCartVisitor.GetFileName();
		public static List<int> SortedKeysEventMineCartMap(string tag="") => EventMineCartVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMineCart> GetEventMineCartMap(string tag="") => EventMineCartVisitor.All(tag);
		public static void RangeEventMineCartMap(Action<int, rawEventMineCart> filter,string tag="") => EventMineCartVisitor.Range(filter,tag);
		public static List<int> KeysEventMineCartMap(string tag="") => EventMineCartVisitor.Keys(tag);
		public static rawEventMineCart? GetEventMineCart(int key,string tag="") => EventMineCartVisitor.Get(key,tag);
		public static List<rawEventMineCart> GetEventMineCartByFilter(Func<rawEventMineCart, bool> filterFunc,string tag="") => EventMineCartVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMineCart? GetOneEventMineCartByFilter(Func<rawEventMineCart, bool> filterFunc,string tag="") => EventMineCartVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMineCart
	#region EventMineCartDetail
		public static int GetCountEventMineCartDetailMap(string tag="") => EventMineCartDetailVisitor.GetCount(tag);
		public static string GetFileNameEventMineCartDetailMap() => EventMineCartDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventMineCartDetailMap(string tag="") => EventMineCartDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMineCartDetail> GetEventMineCartDetailMap(string tag="") => EventMineCartDetailVisitor.All(tag);
		public static void RangeEventMineCartDetailMap(Action<int, rawEventMineCartDetail> filter,string tag="") => EventMineCartDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventMineCartDetailMap(string tag="") => EventMineCartDetailVisitor.Keys(tag);
		public static rawEventMineCartDetail? GetEventMineCartDetail(int key,string tag="") => EventMineCartDetailVisitor.Get(key,tag);
		public static List<rawEventMineCartDetail> GetEventMineCartDetailByFilter(Func<rawEventMineCartDetail, bool> filterFunc,string tag="") => EventMineCartDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMineCartDetail? GetOneEventMineCartDetailByFilter(Func<rawEventMineCartDetail, bool> filterFunc,string tag="") => EventMineCartDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMineCartDetail
	#region EventMineCartDrop
		public static int GetCountEventMineCartDropMap(string tag="") => EventMineCartDropVisitor.GetCount(tag);
		public static string GetFileNameEventMineCartDropMap() => EventMineCartDropVisitor.GetFileName();
		public static List<int> SortedKeysEventMineCartDropMap(string tag="") => EventMineCartDropVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMineCartDrop> GetEventMineCartDropMap(string tag="") => EventMineCartDropVisitor.All(tag);
		public static void RangeEventMineCartDropMap(Action<int, rawEventMineCartDrop> filter,string tag="") => EventMineCartDropVisitor.Range(filter,tag);
		public static List<int> KeysEventMineCartDropMap(string tag="") => EventMineCartDropVisitor.Keys(tag);
		public static rawEventMineCartDrop? GetEventMineCartDrop(int key,string tag="") => EventMineCartDropVisitor.Get(key,tag);
		public static List<rawEventMineCartDrop> GetEventMineCartDropByFilter(Func<rawEventMineCartDrop, bool> filterFunc,string tag="") => EventMineCartDropVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMineCartDrop? GetOneEventMineCartDropByFilter(Func<rawEventMineCartDrop, bool> filterFunc,string tag="") => EventMineCartDropVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMineCartDrop
	#region EventMineCartOrderItem
		public static int GetCountEventMineCartOrderItemMap(string tag="") => EventMineCartOrderItemVisitor.GetCount(tag);
		public static string GetFileNameEventMineCartOrderItemMap() => EventMineCartOrderItemVisitor.GetFileName();
		public static List<int> SortedKeysEventMineCartOrderItemMap(string tag="") => EventMineCartOrderItemVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMineCartOrderItem> GetEventMineCartOrderItemMap(string tag="") => EventMineCartOrderItemVisitor.All(tag);
		public static void RangeEventMineCartOrderItemMap(Action<int, rawEventMineCartOrderItem> filter,string tag="") => EventMineCartOrderItemVisitor.Range(filter,tag);
		public static List<int> KeysEventMineCartOrderItemMap(string tag="") => EventMineCartOrderItemVisitor.Keys(tag);
		public static rawEventMineCartOrderItem? GetEventMineCartOrderItem(int key,string tag="") => EventMineCartOrderItemVisitor.Get(key,tag);
		public static List<rawEventMineCartOrderItem> GetEventMineCartOrderItemByFilter(Func<rawEventMineCartOrderItem, bool> filterFunc,string tag="") => EventMineCartOrderItemVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMineCartOrderItem? GetOneEventMineCartOrderItemByFilter(Func<rawEventMineCartOrderItem, bool> filterFunc,string tag="") => EventMineCartOrderItemVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMineCartOrderItem
	#region EventMineCartReward
		public static int GetCountEventMineCartRewardMap(string tag="") => EventMineCartRewardVisitor.GetCount(tag);
		public static string GetFileNameEventMineCartRewardMap() => EventMineCartRewardVisitor.GetFileName();
		public static List<int> SortedKeysEventMineCartRewardMap(string tag="") => EventMineCartRewardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMineCartReward> GetEventMineCartRewardMap(string tag="") => EventMineCartRewardVisitor.All(tag);
		public static void RangeEventMineCartRewardMap(Action<int, rawEventMineCartReward> filter,string tag="") => EventMineCartRewardVisitor.Range(filter,tag);
		public static List<int> KeysEventMineCartRewardMap(string tag="") => EventMineCartRewardVisitor.Keys(tag);
		public static rawEventMineCartReward? GetEventMineCartReward(int key,string tag="") => EventMineCartRewardVisitor.Get(key,tag);
		public static List<rawEventMineCartReward> GetEventMineCartRewardByFilter(Func<rawEventMineCartReward, bool> filterFunc,string tag="") => EventMineCartRewardVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMineCartReward? GetOneEventMineCartRewardByFilter(Func<rawEventMineCartReward, bool> filterFunc,string tag="") => EventMineCartRewardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMineCartReward
	#region EventMineCartRound
		public static int GetCountEventMineCartRoundMap(string tag="") => EventMineCartRoundVisitor.GetCount(tag);
		public static string GetFileNameEventMineCartRoundMap() => EventMineCartRoundVisitor.GetFileName();
		public static List<int> SortedKeysEventMineCartRoundMap(string tag="") => EventMineCartRoundVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMineCartRound> GetEventMineCartRoundMap(string tag="") => EventMineCartRoundVisitor.All(tag);
		public static void RangeEventMineCartRoundMap(Action<int, rawEventMineCartRound> filter,string tag="") => EventMineCartRoundVisitor.Range(filter,tag);
		public static List<int> KeysEventMineCartRoundMap(string tag="") => EventMineCartRoundVisitor.Keys(tag);
		public static rawEventMineCartRound? GetEventMineCartRound(int key,string tag="") => EventMineCartRoundVisitor.Get(key,tag);
		public static List<rawEventMineCartRound> GetEventMineCartRoundByFilter(Func<rawEventMineCartRound, bool> filterFunc,string tag="") => EventMineCartRoundVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMineCartRound? GetOneEventMineCartRoundByFilter(Func<rawEventMineCartRound, bool> filterFunc,string tag="") => EventMineCartRoundVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMineCartRound
	#region EventMineCartRow
		public static int GetCountEventMineCartRowMap(string tag="") => EventMineCartRowVisitor.GetCount(tag);
		public static string GetFileNameEventMineCartRowMap() => EventMineCartRowVisitor.GetFileName();
		public static List<int> SortedKeysEventMineCartRowMap(string tag="") => EventMineCartRowVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMineCartRow> GetEventMineCartRowMap(string tag="") => EventMineCartRowVisitor.All(tag);
		public static void RangeEventMineCartRowMap(Action<int, rawEventMineCartRow> filter,string tag="") => EventMineCartRowVisitor.Range(filter,tag);
		public static List<int> KeysEventMineCartRowMap(string tag="") => EventMineCartRowVisitor.Keys(tag);
		public static rawEventMineCartRow? GetEventMineCartRow(int key,string tag="") => EventMineCartRowVisitor.Get(key,tag);
		public static List<rawEventMineCartRow> GetEventMineCartRowByFilter(Func<rawEventMineCartRow, bool> filterFunc,string tag="") => EventMineCartRowVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMineCartRow? GetOneEventMineCartRowByFilter(Func<rawEventMineCartRow, bool> filterFunc,string tag="") => EventMineCartRowVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMineCartRow
	#region EventMineCartRowGrp
		public static int GetCountEventMineCartRowGrpMap(string tag="") => EventMineCartRowGrpVisitor.GetCount(tag);
		public static string GetFileNameEventMineCartRowGrpMap() => EventMineCartRowGrpVisitor.GetFileName();
		public static List<int> SortedKeysEventMineCartRowGrpMap(string tag="") => EventMineCartRowGrpVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMineCartRowGrp> GetEventMineCartRowGrpMap(string tag="") => EventMineCartRowGrpVisitor.All(tag);
		public static void RangeEventMineCartRowGrpMap(Action<int, rawEventMineCartRowGrp> filter,string tag="") => EventMineCartRowGrpVisitor.Range(filter,tag);
		public static List<int> KeysEventMineCartRowGrpMap(string tag="") => EventMineCartRowGrpVisitor.Keys(tag);
		public static rawEventMineCartRowGrp? GetEventMineCartRowGrp(int key,string tag="") => EventMineCartRowGrpVisitor.Get(key,tag);
		public static List<rawEventMineCartRowGrp> GetEventMineCartRowGrpByFilter(Func<rawEventMineCartRowGrp, bool> filterFunc,string tag="") => EventMineCartRowGrpVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMineCartRowGrp? GetOneEventMineCartRowGrpByFilter(Func<rawEventMineCartRowGrp, bool> filterFunc,string tag="") => EventMineCartRowGrpVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMineCartRowGrp
	#region EventMineGroup
		public static int GetCountEventMineGroupMap(string tag="") => EventMineGroupVisitor.GetCount(tag);
		public static string GetFileNameEventMineGroupMap() => EventMineGroupVisitor.GetFileName();
		public static List<int> SortedKeysEventMineGroupMap(string tag="") => EventMineGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMineGroup> GetEventMineGroupMap(string tag="") => EventMineGroupVisitor.All(tag);
		public static void RangeEventMineGroupMap(Action<int, rawEventMineGroup> filter,string tag="") => EventMineGroupVisitor.Range(filter,tag);
		public static List<int> KeysEventMineGroupMap(string tag="") => EventMineGroupVisitor.Keys(tag);
		public static rawEventMineGroup? GetEventMineGroup(int key,string tag="") => EventMineGroupVisitor.Get(key,tag);
		public static List<rawEventMineGroup> GetEventMineGroupByFilter(Func<rawEventMineGroup, bool> filterFunc,string tag="") => EventMineGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMineGroup? GetOneEventMineGroupByFilter(Func<rawEventMineGroup, bool> filterFunc,string tag="") => EventMineGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMineGroup
	#region EventMineOnePlusOne
		public static int GetCountEventMineOnePlusOneMap(string tag="") => EventMineOnePlusOneVisitor.GetCount(tag);
		public static string GetFileNameEventMineOnePlusOneMap() => EventMineOnePlusOneVisitor.GetFileName();
		public static List<int> SortedKeysEventMineOnePlusOneMap(string tag="") => EventMineOnePlusOneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMineOnePlusOne> GetEventMineOnePlusOneMap(string tag="") => EventMineOnePlusOneVisitor.All(tag);
		public static void RangeEventMineOnePlusOneMap(Action<int, rawEventMineOnePlusOne> filter,string tag="") => EventMineOnePlusOneVisitor.Range(filter,tag);
		public static List<int> KeysEventMineOnePlusOneMap(string tag="") => EventMineOnePlusOneVisitor.Keys(tag);
		public static rawEventMineOnePlusOne? GetEventMineOnePlusOne(int key,string tag="") => EventMineOnePlusOneVisitor.Get(key,tag);
		public static List<rawEventMineOnePlusOne> GetEventMineOnePlusOneByFilter(Func<rawEventMineOnePlusOne, bool> filterFunc,string tag="") => EventMineOnePlusOneVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMineOnePlusOne? GetOneEventMineOnePlusOneByFilter(Func<rawEventMineOnePlusOne, bool> filterFunc,string tag="") => EventMineOnePlusOneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMineOnePlusOne
	#region EventMineReward
		public static int GetCountEventMineRewardMap(string tag="") => EventMineRewardVisitor.GetCount(tag);
		public static string GetFileNameEventMineRewardMap() => EventMineRewardVisitor.GetFileName();
		public static List<int> SortedKeysEventMineRewardMap(string tag="") => EventMineRewardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMineReward> GetEventMineRewardMap(string tag="") => EventMineRewardVisitor.All(tag);
		public static void RangeEventMineRewardMap(Action<int, rawEventMineReward> filter,string tag="") => EventMineRewardVisitor.Range(filter,tag);
		public static List<int> KeysEventMineRewardMap(string tag="") => EventMineRewardVisitor.Keys(tag);
		public static rawEventMineReward? GetEventMineReward(int key,string tag="") => EventMineRewardVisitor.Get(key,tag);
		public static List<rawEventMineReward> GetEventMineRewardByFilter(Func<rawEventMineReward, bool> filterFunc,string tag="") => EventMineRewardVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMineReward? GetOneEventMineRewardByFilter(Func<rawEventMineReward, bool> filterFunc,string tag="") => EventMineRewardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMineReward
	#region EventMiniBoard
		public static int GetCountEventMiniBoardMap(string tag="") => EventMiniBoardVisitor.GetCount(tag);
		public static string GetFileNameEventMiniBoardMap() => EventMiniBoardVisitor.GetFileName();
		public static List<int> SortedKeysEventMiniBoardMap(string tag="") => EventMiniBoardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMiniBoard> GetEventMiniBoardMap(string tag="") => EventMiniBoardVisitor.All(tag);
		public static void RangeEventMiniBoardMap(Action<int, rawEventMiniBoard> filter,string tag="") => EventMiniBoardVisitor.Range(filter,tag);
		public static List<int> KeysEventMiniBoardMap(string tag="") => EventMiniBoardVisitor.Keys(tag);
		public static rawEventMiniBoard? GetEventMiniBoard(int key,string tag="") => EventMiniBoardVisitor.Get(key,tag);
		public static List<rawEventMiniBoard> GetEventMiniBoardByFilter(Func<rawEventMiniBoard, bool> filterFunc,string tag="") => EventMiniBoardVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMiniBoard? GetOneEventMiniBoardByFilter(Func<rawEventMiniBoard, bool> filterFunc,string tag="") => EventMiniBoardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMiniBoard
	#region EventMiniBoardDetail
		public static int GetCountEventMiniBoardDetailMap(string tag="") => EventMiniBoardDetailVisitor.GetCount(tag);
		public static string GetFileNameEventMiniBoardDetailMap() => EventMiniBoardDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventMiniBoardDetailMap(string tag="") => EventMiniBoardDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMiniBoardDetail> GetEventMiniBoardDetailMap(string tag="") => EventMiniBoardDetailVisitor.All(tag);
		public static void RangeEventMiniBoardDetailMap(Action<int, rawEventMiniBoardDetail> filter,string tag="") => EventMiniBoardDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventMiniBoardDetailMap(string tag="") => EventMiniBoardDetailVisitor.Keys(tag);
		public static rawEventMiniBoardDetail? GetEventMiniBoardDetail(int key,string tag="") => EventMiniBoardDetailVisitor.Get(key,tag);
		public static List<rawEventMiniBoardDetail> GetEventMiniBoardDetailByFilter(Func<rawEventMiniBoardDetail, bool> filterFunc,string tag="") => EventMiniBoardDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMiniBoardDetail? GetOneEventMiniBoardDetailByFilter(Func<rawEventMiniBoardDetail, bool> filterFunc,string tag="") => EventMiniBoardDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMiniBoardDetail
	#region EventMiniBoardDrop
		public static int GetCountEventMiniBoardDropMap(string tag="") => EventMiniBoardDropVisitor.GetCount(tag);
		public static string GetFileNameEventMiniBoardDropMap() => EventMiniBoardDropVisitor.GetFileName();
		public static List<int> SortedKeysEventMiniBoardDropMap(string tag="") => EventMiniBoardDropVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMiniBoardDrop> GetEventMiniBoardDropMap(string tag="") => EventMiniBoardDropVisitor.All(tag);
		public static void RangeEventMiniBoardDropMap(Action<int, rawEventMiniBoardDrop> filter,string tag="") => EventMiniBoardDropVisitor.Range(filter,tag);
		public static List<int> KeysEventMiniBoardDropMap(string tag="") => EventMiniBoardDropVisitor.Keys(tag);
		public static rawEventMiniBoardDrop? GetEventMiniBoardDrop(int key,string tag="") => EventMiniBoardDropVisitor.Get(key,tag);
		public static List<rawEventMiniBoardDrop> GetEventMiniBoardDropByFilter(Func<rawEventMiniBoardDrop, bool> filterFunc,string tag="") => EventMiniBoardDropVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMiniBoardDrop? GetOneEventMiniBoardDropByFilter(Func<rawEventMiniBoardDrop, bool> filterFunc,string tag="") => EventMiniBoardDropVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMiniBoardDrop
	#region EventMiniBoardMulti
		public static int GetCountEventMiniBoardMultiMap(string tag="") => EventMiniBoardMultiVisitor.GetCount(tag);
		public static string GetFileNameEventMiniBoardMultiMap() => EventMiniBoardMultiVisitor.GetFileName();
		public static List<int> SortedKeysEventMiniBoardMultiMap(string tag="") => EventMiniBoardMultiVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMiniBoardMulti> GetEventMiniBoardMultiMap(string tag="") => EventMiniBoardMultiVisitor.All(tag);
		public static void RangeEventMiniBoardMultiMap(Action<int, rawEventMiniBoardMulti> filter,string tag="") => EventMiniBoardMultiVisitor.Range(filter,tag);
		public static List<int> KeysEventMiniBoardMultiMap(string tag="") => EventMiniBoardMultiVisitor.Keys(tag);
		public static rawEventMiniBoardMulti? GetEventMiniBoardMulti(int key,string tag="") => EventMiniBoardMultiVisitor.Get(key,tag);
		public static List<rawEventMiniBoardMulti> GetEventMiniBoardMultiByFilter(Func<rawEventMiniBoardMulti, bool> filterFunc,string tag="") => EventMiniBoardMultiVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMiniBoardMulti? GetOneEventMiniBoardMultiByFilter(Func<rawEventMiniBoardMulti, bool> filterFunc,string tag="") => EventMiniBoardMultiVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMiniBoardMulti
	#region EventMiniBoardMultiDrop
		public static int GetCountEventMiniBoardMultiDropMap(string tag="") => EventMiniBoardMultiDropVisitor.GetCount(tag);
		public static string GetFileNameEventMiniBoardMultiDropMap() => EventMiniBoardMultiDropVisitor.GetFileName();
		public static List<int> SortedKeysEventMiniBoardMultiDropMap(string tag="") => EventMiniBoardMultiDropVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMiniBoardMultiDrop> GetEventMiniBoardMultiDropMap(string tag="") => EventMiniBoardMultiDropVisitor.All(tag);
		public static void RangeEventMiniBoardMultiDropMap(Action<int, rawEventMiniBoardMultiDrop> filter,string tag="") => EventMiniBoardMultiDropVisitor.Range(filter,tag);
		public static List<int> KeysEventMiniBoardMultiDropMap(string tag="") => EventMiniBoardMultiDropVisitor.Keys(tag);
		public static rawEventMiniBoardMultiDrop? GetEventMiniBoardMultiDrop(int key,string tag="") => EventMiniBoardMultiDropVisitor.Get(key,tag);
		public static List<rawEventMiniBoardMultiDrop> GetEventMiniBoardMultiDropByFilter(Func<rawEventMiniBoardMultiDrop, bool> filterFunc,string tag="") => EventMiniBoardMultiDropVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMiniBoardMultiDrop? GetOneEventMiniBoardMultiDropByFilter(Func<rawEventMiniBoardMultiDrop, bool> filterFunc,string tag="") => EventMiniBoardMultiDropVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMiniBoardMultiDrop
	#region EventMiniBoardMultiGroup
		public static int GetCountEventMiniBoardMultiGroupMap(string tag="") => EventMiniBoardMultiGroupVisitor.GetCount(tag);
		public static string GetFileNameEventMiniBoardMultiGroupMap() => EventMiniBoardMultiGroupVisitor.GetFileName();
		public static List<int> SortedKeysEventMiniBoardMultiGroupMap(string tag="") => EventMiniBoardMultiGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMiniBoardMultiGroup> GetEventMiniBoardMultiGroupMap(string tag="") => EventMiniBoardMultiGroupVisitor.All(tag);
		public static void RangeEventMiniBoardMultiGroupMap(Action<int, rawEventMiniBoardMultiGroup> filter,string tag="") => EventMiniBoardMultiGroupVisitor.Range(filter,tag);
		public static List<int> KeysEventMiniBoardMultiGroupMap(string tag="") => EventMiniBoardMultiGroupVisitor.Keys(tag);
		public static rawEventMiniBoardMultiGroup? GetEventMiniBoardMultiGroup(int key,string tag="") => EventMiniBoardMultiGroupVisitor.Get(key,tag);
		public static List<rawEventMiniBoardMultiGroup> GetEventMiniBoardMultiGroupByFilter(Func<rawEventMiniBoardMultiGroup, bool> filterFunc,string tag="") => EventMiniBoardMultiGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMiniBoardMultiGroup? GetOneEventMiniBoardMultiGroupByFilter(Func<rawEventMiniBoardMultiGroup, bool> filterFunc,string tag="") => EventMiniBoardMultiGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMiniBoardMultiGroup
	#region EventMiniBoardMultiInfo
		public static int GetCountEventMiniBoardMultiInfoMap(string tag="") => EventMiniBoardMultiInfoVisitor.GetCount(tag);
		public static string GetFileNameEventMiniBoardMultiInfoMap() => EventMiniBoardMultiInfoVisitor.GetFileName();
		public static List<int> SortedKeysEventMiniBoardMultiInfoMap(string tag="") => EventMiniBoardMultiInfoVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventMiniBoardMultiInfo> GetEventMiniBoardMultiInfoMap(string tag="") => EventMiniBoardMultiInfoVisitor.All(tag);
		public static void RangeEventMiniBoardMultiInfoMap(Action<int, rawEventMiniBoardMultiInfo> filter,string tag="") => EventMiniBoardMultiInfoVisitor.Range(filter,tag);
		public static List<int> KeysEventMiniBoardMultiInfoMap(string tag="") => EventMiniBoardMultiInfoVisitor.Keys(tag);
		public static rawEventMiniBoardMultiInfo? GetEventMiniBoardMultiInfo(int key,string tag="") => EventMiniBoardMultiInfoVisitor.Get(key,tag);
		public static List<rawEventMiniBoardMultiInfo> GetEventMiniBoardMultiInfoByFilter(Func<rawEventMiniBoardMultiInfo, bool> filterFunc,string tag="") => EventMiniBoardMultiInfoVisitor.GetByFilter(filterFunc,tag);
		public static rawEventMiniBoardMultiInfo? GetOneEventMiniBoardMultiInfoByFilter(Func<rawEventMiniBoardMultiInfo, bool> filterFunc,string tag="") => EventMiniBoardMultiInfoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventMiniBoardMultiInfo
	#region EventOnline
		public static int GetCountEventOnlineMap(string tag="") => EventOnlineVisitor.GetCount(tag);
		public static string GetFileNameEventOnlineMap() => EventOnlineVisitor.GetFileName();
		public static List<int> SortedKeysEventOnlineMap(string tag="") => EventOnlineVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventOnline> GetEventOnlineMap(string tag="") => EventOnlineVisitor.All(tag);
		public static void RangeEventOnlineMap(Action<int, rawEventOnline> filter,string tag="") => EventOnlineVisitor.Range(filter,tag);
		public static List<int> KeysEventOnlineMap(string tag="") => EventOnlineVisitor.Keys(tag);
		public static rawEventOnline? GetEventOnline(int key,string tag="") => EventOnlineVisitor.Get(key,tag);
		public static List<rawEventOnline> GetEventOnlineByFilter(Func<rawEventOnline, bool> filterFunc,string tag="") => EventOnlineVisitor.GetByFilter(filterFunc,tag);
		public static rawEventOnline? GetOneEventOnlineByFilter(Func<rawEventOnline, bool> filterFunc,string tag="") => EventOnlineVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventOnline
	#region EventOnlineDetail
		public static int GetCountEventOnlineDetailMap(string tag="") => EventOnlineDetailVisitor.GetCount(tag);
		public static string GetFileNameEventOnlineDetailMap() => EventOnlineDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventOnlineDetailMap(string tag="") => EventOnlineDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventOnlineDetail> GetEventOnlineDetailMap(string tag="") => EventOnlineDetailVisitor.All(tag);
		public static void RangeEventOnlineDetailMap(Action<int, rawEventOnlineDetail> filter,string tag="") => EventOnlineDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventOnlineDetailMap(string tag="") => EventOnlineDetailVisitor.Keys(tag);
		public static rawEventOnlineDetail? GetEventOnlineDetail(int key,string tag="") => EventOnlineDetailVisitor.Get(key,tag);
		public static List<rawEventOnlineDetail> GetEventOnlineDetailByFilter(Func<rawEventOnlineDetail, bool> filterFunc,string tag="") => EventOnlineDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventOnlineDetail? GetOneEventOnlineDetailByFilter(Func<rawEventOnlineDetail, bool> filterFunc,string tag="") => EventOnlineDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventOnlineDetail
	#region EventOrderBonus
		public static int GetCountEventOrderBonusMap(string tag="") => EventOrderBonusVisitor.GetCount(tag);
		public static string GetFileNameEventOrderBonusMap() => EventOrderBonusVisitor.GetFileName();
		public static List<int> SortedKeysEventOrderBonusMap(string tag="") => EventOrderBonusVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventOrderBonus> GetEventOrderBonusMap(string tag="") => EventOrderBonusVisitor.All(tag);
		public static void RangeEventOrderBonusMap(Action<int, rawEventOrderBonus> filter,string tag="") => EventOrderBonusVisitor.Range(filter,tag);
		public static List<int> KeysEventOrderBonusMap(string tag="") => EventOrderBonusVisitor.Keys(tag);
		public static rawEventOrderBonus? GetEventOrderBonus(int key,string tag="") => EventOrderBonusVisitor.Get(key,tag);
		public static List<rawEventOrderBonus> GetEventOrderBonusByFilter(Func<rawEventOrderBonus, bool> filterFunc,string tag="") => EventOrderBonusVisitor.GetByFilter(filterFunc,tag);
		public static rawEventOrderBonus? GetOneEventOrderBonusByFilter(Func<rawEventOrderBonus, bool> filterFunc,string tag="") => EventOrderBonusVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventOrderBonus
	#region EventOrderBonusDetail
		public static int GetCountEventOrderBonusDetailMap(string tag="") => EventOrderBonusDetailVisitor.GetCount(tag);
		public static string GetFileNameEventOrderBonusDetailMap() => EventOrderBonusDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventOrderBonusDetailMap(string tag="") => EventOrderBonusDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventOrderBonusDetail> GetEventOrderBonusDetailMap(string tag="") => EventOrderBonusDetailVisitor.All(tag);
		public static void RangeEventOrderBonusDetailMap(Action<int, rawEventOrderBonusDetail> filter,string tag="") => EventOrderBonusDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventOrderBonusDetailMap(string tag="") => EventOrderBonusDetailVisitor.Keys(tag);
		public static rawEventOrderBonusDetail? GetEventOrderBonusDetail(int key,string tag="") => EventOrderBonusDetailVisitor.Get(key,tag);
		public static List<rawEventOrderBonusDetail> GetEventOrderBonusDetailByFilter(Func<rawEventOrderBonusDetail, bool> filterFunc,string tag="") => EventOrderBonusDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventOrderBonusDetail? GetOneEventOrderBonusDetailByFilter(Func<rawEventOrderBonusDetail, bool> filterFunc,string tag="") => EventOrderBonusDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventOrderBonusDetail
	#region EventOrderBonusGroup
		public static int GetCountEventOrderBonusGroupMap(string tag="") => EventOrderBonusGroupVisitor.GetCount(tag);
		public static string GetFileNameEventOrderBonusGroupMap() => EventOrderBonusGroupVisitor.GetFileName();
		public static List<int> SortedKeysEventOrderBonusGroupMap(string tag="") => EventOrderBonusGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventOrderBonusGroup> GetEventOrderBonusGroupMap(string tag="") => EventOrderBonusGroupVisitor.All(tag);
		public static void RangeEventOrderBonusGroupMap(Action<int, rawEventOrderBonusGroup> filter,string tag="") => EventOrderBonusGroupVisitor.Range(filter,tag);
		public static List<int> KeysEventOrderBonusGroupMap(string tag="") => EventOrderBonusGroupVisitor.Keys(tag);
		public static rawEventOrderBonusGroup? GetEventOrderBonusGroup(int key,string tag="") => EventOrderBonusGroupVisitor.Get(key,tag);
		public static List<rawEventOrderBonusGroup> GetEventOrderBonusGroupByFilter(Func<rawEventOrderBonusGroup, bool> filterFunc,string tag="") => EventOrderBonusGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawEventOrderBonusGroup? GetOneEventOrderBonusGroupByFilter(Func<rawEventOrderBonusGroup, bool> filterFunc,string tag="") => EventOrderBonusGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventOrderBonusGroup
	#region EventOrderDash
		public static int GetCountEventOrderDashMap(string tag="") => EventOrderDashVisitor.GetCount(tag);
		public static string GetFileNameEventOrderDashMap() => EventOrderDashVisitor.GetFileName();
		public static List<int> SortedKeysEventOrderDashMap(string tag="") => EventOrderDashVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventOrderDash> GetEventOrderDashMap(string tag="") => EventOrderDashVisitor.All(tag);
		public static void RangeEventOrderDashMap(Action<int, rawEventOrderDash> filter,string tag="") => EventOrderDashVisitor.Range(filter,tag);
		public static List<int> KeysEventOrderDashMap(string tag="") => EventOrderDashVisitor.Keys(tag);
		public static rawEventOrderDash? GetEventOrderDash(int key,string tag="") => EventOrderDashVisitor.Get(key,tag);
		public static List<rawEventOrderDash> GetEventOrderDashByFilter(Func<rawEventOrderDash, bool> filterFunc,string tag="") => EventOrderDashVisitor.GetByFilter(filterFunc,tag);
		public static rawEventOrderDash? GetOneEventOrderDashByFilter(Func<rawEventOrderDash, bool> filterFunc,string tag="") => EventOrderDashVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventOrderDash
	#region EventOrderExtra
		public static int GetCountEventOrderExtraMap(string tag="") => EventOrderExtraVisitor.GetCount(tag);
		public static string GetFileNameEventOrderExtraMap() => EventOrderExtraVisitor.GetFileName();
		public static List<int> SortedKeysEventOrderExtraMap(string tag="") => EventOrderExtraVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventOrderExtra> GetEventOrderExtraMap(string tag="") => EventOrderExtraVisitor.All(tag);
		public static void RangeEventOrderExtraMap(Action<int, rawEventOrderExtra> filter,string tag="") => EventOrderExtraVisitor.Range(filter,tag);
		public static List<int> KeysEventOrderExtraMap(string tag="") => EventOrderExtraVisitor.Keys(tag);
		public static rawEventOrderExtra? GetEventOrderExtra(int key,string tag="") => EventOrderExtraVisitor.Get(key,tag);
		public static List<rawEventOrderExtra> GetEventOrderExtraByFilter(Func<rawEventOrderExtra, bool> filterFunc,string tag="") => EventOrderExtraVisitor.GetByFilter(filterFunc,tag);
		public static rawEventOrderExtra? GetOneEventOrderExtraByFilter(Func<rawEventOrderExtra, bool> filterFunc,string tag="") => EventOrderExtraVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventOrderExtra
	#region EventOrderLike
		public static int GetCountEventOrderLikeMap(string tag="") => EventOrderLikeVisitor.GetCount(tag);
		public static string GetFileNameEventOrderLikeMap() => EventOrderLikeVisitor.GetFileName();
		public static List<int> SortedKeysEventOrderLikeMap(string tag="") => EventOrderLikeVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventOrderLike> GetEventOrderLikeMap(string tag="") => EventOrderLikeVisitor.All(tag);
		public static void RangeEventOrderLikeMap(Action<int, rawEventOrderLike> filter,string tag="") => EventOrderLikeVisitor.Range(filter,tag);
		public static List<int> KeysEventOrderLikeMap(string tag="") => EventOrderLikeVisitor.Keys(tag);
		public static rawEventOrderLike? GetEventOrderLike(int key,string tag="") => EventOrderLikeVisitor.Get(key,tag);
		public static List<rawEventOrderLike> GetEventOrderLikeByFilter(Func<rawEventOrderLike, bool> filterFunc,string tag="") => EventOrderLikeVisitor.GetByFilter(filterFunc,tag);
		public static rawEventOrderLike? GetOneEventOrderLikeByFilter(Func<rawEventOrderLike, bool> filterFunc,string tag="") => EventOrderLikeVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventOrderLike
	#region EventOrderLikeDetail
		public static int GetCountEventOrderLikeDetailMap(string tag="") => EventOrderLikeDetailVisitor.GetCount(tag);
		public static string GetFileNameEventOrderLikeDetailMap() => EventOrderLikeDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventOrderLikeDetailMap(string tag="") => EventOrderLikeDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventOrderLikeDetail> GetEventOrderLikeDetailMap(string tag="") => EventOrderLikeDetailVisitor.All(tag);
		public static void RangeEventOrderLikeDetailMap(Action<int, rawEventOrderLikeDetail> filter,string tag="") => EventOrderLikeDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventOrderLikeDetailMap(string tag="") => EventOrderLikeDetailVisitor.Keys(tag);
		public static rawEventOrderLikeDetail? GetEventOrderLikeDetail(int key,string tag="") => EventOrderLikeDetailVisitor.Get(key,tag);
		public static List<rawEventOrderLikeDetail> GetEventOrderLikeDetailByFilter(Func<rawEventOrderLikeDetail, bool> filterFunc,string tag="") => EventOrderLikeDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventOrderLikeDetail? GetOneEventOrderLikeDetailByFilter(Func<rawEventOrderLikeDetail, bool> filterFunc,string tag="") => EventOrderLikeDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventOrderLikeDetail
	#region EventOrderRate
		public static int GetCountEventOrderRateMap(string tag="") => EventOrderRateVisitor.GetCount(tag);
		public static string GetFileNameEventOrderRateMap() => EventOrderRateVisitor.GetFileName();
		public static List<int> SortedKeysEventOrderRateMap(string tag="") => EventOrderRateVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventOrderRate> GetEventOrderRateMap(string tag="") => EventOrderRateVisitor.All(tag);
		public static void RangeEventOrderRateMap(Action<int, rawEventOrderRate> filter,string tag="") => EventOrderRateVisitor.Range(filter,tag);
		public static List<int> KeysEventOrderRateMap(string tag="") => EventOrderRateVisitor.Keys(tag);
		public static rawEventOrderRate? GetEventOrderRate(int key,string tag="") => EventOrderRateVisitor.Get(key,tag);
		public static List<rawEventOrderRate> GetEventOrderRateByFilter(Func<rawEventOrderRate, bool> filterFunc,string tag="") => EventOrderRateVisitor.GetByFilter(filterFunc,tag);
		public static rawEventOrderRate? GetOneEventOrderRateByFilter(Func<rawEventOrderRate, bool> filterFunc,string tag="") => EventOrderRateVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventOrderRate
	#region EventOrderRateBox
		public static int GetCountEventOrderRateBoxMap(string tag="") => EventOrderRateBoxVisitor.GetCount(tag);
		public static string GetFileNameEventOrderRateBoxMap() => EventOrderRateBoxVisitor.GetFileName();
		public static List<int> SortedKeysEventOrderRateBoxMap(string tag="") => EventOrderRateBoxVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventOrderRateBox> GetEventOrderRateBoxMap(string tag="") => EventOrderRateBoxVisitor.All(tag);
		public static void RangeEventOrderRateBoxMap(Action<int, rawEventOrderRateBox> filter,string tag="") => EventOrderRateBoxVisitor.Range(filter,tag);
		public static List<int> KeysEventOrderRateBoxMap(string tag="") => EventOrderRateBoxVisitor.Keys(tag);
		public static rawEventOrderRateBox? GetEventOrderRateBox(int key,string tag="") => EventOrderRateBoxVisitor.Get(key,tag);
		public static List<rawEventOrderRateBox> GetEventOrderRateBoxByFilter(Func<rawEventOrderRateBox, bool> filterFunc,string tag="") => EventOrderRateBoxVisitor.GetByFilter(filterFunc,tag);
		public static rawEventOrderRateBox? GetOneEventOrderRateBoxByFilter(Func<rawEventOrderRateBox, bool> filterFunc,string tag="") => EventOrderRateBoxVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventOrderRateBox
	#region EventOrderRateDetail
		public static int GetCountEventOrderRateDetailMap(string tag="") => EventOrderRateDetailVisitor.GetCount(tag);
		public static string GetFileNameEventOrderRateDetailMap() => EventOrderRateDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventOrderRateDetailMap(string tag="") => EventOrderRateDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventOrderRateDetail> GetEventOrderRateDetailMap(string tag="") => EventOrderRateDetailVisitor.All(tag);
		public static void RangeEventOrderRateDetailMap(Action<int, rawEventOrderRateDetail> filter,string tag="") => EventOrderRateDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventOrderRateDetailMap(string tag="") => EventOrderRateDetailVisitor.Keys(tag);
		public static rawEventOrderRateDetail? GetEventOrderRateDetail(int key,string tag="") => EventOrderRateDetailVisitor.Get(key,tag);
		public static List<rawEventOrderRateDetail> GetEventOrderRateDetailByFilter(Func<rawEventOrderRateDetail, bool> filterFunc,string tag="") => EventOrderRateDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventOrderRateDetail? GetOneEventOrderRateDetailByFilter(Func<rawEventOrderRateDetail, bool> filterFunc,string tag="") => EventOrderRateDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventOrderRateDetail
	#region EventOrderRateRandom
		public static int GetCountEventOrderRateRandomMap(string tag="") => EventOrderRateRandomVisitor.GetCount(tag);
		public static string GetFileNameEventOrderRateRandomMap() => EventOrderRateRandomVisitor.GetFileName();
		public static List<int> SortedKeysEventOrderRateRandomMap(string tag="") => EventOrderRateRandomVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventOrderRateRandom> GetEventOrderRateRandomMap(string tag="") => EventOrderRateRandomVisitor.All(tag);
		public static void RangeEventOrderRateRandomMap(Action<int, rawEventOrderRateRandom> filter,string tag="") => EventOrderRateRandomVisitor.Range(filter,tag);
		public static List<int> KeysEventOrderRateRandomMap(string tag="") => EventOrderRateRandomVisitor.Keys(tag);
		public static rawEventOrderRateRandom? GetEventOrderRateRandom(int key,string tag="") => EventOrderRateRandomVisitor.Get(key,tag);
		public static List<rawEventOrderRateRandom> GetEventOrderRateRandomByFilter(Func<rawEventOrderRateRandom, bool> filterFunc,string tag="") => EventOrderRateRandomVisitor.GetByFilter(filterFunc,tag);
		public static rawEventOrderRateRandom? GetOneEventOrderRateRandomByFilter(Func<rawEventOrderRateRandom, bool> filterFunc,string tag="") => EventOrderRateRandomVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventOrderRateRandom
	#region EventOrderStreak
		public static int GetCountEventOrderStreakMap(string tag="") => EventOrderStreakVisitor.GetCount(tag);
		public static string GetFileNameEventOrderStreakMap() => EventOrderStreakVisitor.GetFileName();
		public static List<int> SortedKeysEventOrderStreakMap(string tag="") => EventOrderStreakVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventOrderStreak> GetEventOrderStreakMap(string tag="") => EventOrderStreakVisitor.All(tag);
		public static void RangeEventOrderStreakMap(Action<int, rawEventOrderStreak> filter,string tag="") => EventOrderStreakVisitor.Range(filter,tag);
		public static List<int> KeysEventOrderStreakMap(string tag="") => EventOrderStreakVisitor.Keys(tag);
		public static rawEventOrderStreak? GetEventOrderStreak(int key,string tag="") => EventOrderStreakVisitor.Get(key,tag);
		public static List<rawEventOrderStreak> GetEventOrderStreakByFilter(Func<rawEventOrderStreak, bool> filterFunc,string tag="") => EventOrderStreakVisitor.GetByFilter(filterFunc,tag);
		public static rawEventOrderStreak? GetOneEventOrderStreakByFilter(Func<rawEventOrderStreak, bool> filterFunc,string tag="") => EventOrderStreakVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventOrderStreak
	#region EventOrderStreakDetail
		public static int GetCountEventOrderStreakDetailMap(string tag="") => EventOrderStreakDetailVisitor.GetCount(tag);
		public static string GetFileNameEventOrderStreakDetailMap() => EventOrderStreakDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventOrderStreakDetailMap(string tag="") => EventOrderStreakDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventOrderStreakDetail> GetEventOrderStreakDetailMap(string tag="") => EventOrderStreakDetailVisitor.All(tag);
		public static void RangeEventOrderStreakDetailMap(Action<int, rawEventOrderStreakDetail> filter,string tag="") => EventOrderStreakDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventOrderStreakDetailMap(string tag="") => EventOrderStreakDetailVisitor.Keys(tag);
		public static rawEventOrderStreakDetail? GetEventOrderStreakDetail(int key,string tag="") => EventOrderStreakDetailVisitor.Get(key,tag);
		public static List<rawEventOrderStreakDetail> GetEventOrderStreakDetailByFilter(Func<rawEventOrderStreakDetail, bool> filterFunc,string tag="") => EventOrderStreakDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventOrderStreakDetail? GetOneEventOrderStreakDetailByFilter(Func<rawEventOrderStreakDetail, bool> filterFunc,string tag="") => EventOrderStreakDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventOrderStreakDetail
	#region EventPachinko
		public static int GetCountEventPachinkoMap(string tag="") => EventPachinkoVisitor.GetCount(tag);
		public static string GetFileNameEventPachinkoMap() => EventPachinkoVisitor.GetFileName();
		public static List<int> SortedKeysEventPachinkoMap(string tag="") => EventPachinkoVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventPachinko> GetEventPachinkoMap(string tag="") => EventPachinkoVisitor.All(tag);
		public static void RangeEventPachinkoMap(Action<int, rawEventPachinko> filter,string tag="") => EventPachinkoVisitor.Range(filter,tag);
		public static List<int> KeysEventPachinkoMap(string tag="") => EventPachinkoVisitor.Keys(tag);
		public static rawEventPachinko? GetEventPachinko(int key,string tag="") => EventPachinkoVisitor.Get(key,tag);
		public static List<rawEventPachinko> GetEventPachinkoByFilter(Func<rawEventPachinko, bool> filterFunc,string tag="") => EventPachinkoVisitor.GetByFilter(filterFunc,tag);
		public static rawEventPachinko? GetOneEventPachinkoByFilter(Func<rawEventPachinko, bool> filterFunc,string tag="") => EventPachinkoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventPachinko
	#region EventPachinkoDetail
		public static int GetCountEventPachinkoDetailMap(string tag="") => EventPachinkoDetailVisitor.GetCount(tag);
		public static string GetFileNameEventPachinkoDetailMap() => EventPachinkoDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventPachinkoDetailMap(string tag="") => EventPachinkoDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventPachinkoDetail> GetEventPachinkoDetailMap(string tag="") => EventPachinkoDetailVisitor.All(tag);
		public static void RangeEventPachinkoDetailMap(Action<int, rawEventPachinkoDetail> filter,string tag="") => EventPachinkoDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventPachinkoDetailMap(string tag="") => EventPachinkoDetailVisitor.Keys(tag);
		public static rawEventPachinkoDetail? GetEventPachinkoDetail(int key,string tag="") => EventPachinkoDetailVisitor.Get(key,tag);
		public static List<rawEventPachinkoDetail> GetEventPachinkoDetailByFilter(Func<rawEventPachinkoDetail, bool> filterFunc,string tag="") => EventPachinkoDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventPachinkoDetail? GetOneEventPachinkoDetailByFilter(Func<rawEventPachinkoDetail, bool> filterFunc,string tag="") => EventPachinkoDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventPachinkoDetail
	#region EventPachinkoMilestone
		public static int GetCountEventPachinkoMilestoneMap(string tag="") => EventPachinkoMilestoneVisitor.GetCount(tag);
		public static string GetFileNameEventPachinkoMilestoneMap() => EventPachinkoMilestoneVisitor.GetFileName();
		public static List<int> SortedKeysEventPachinkoMilestoneMap(string tag="") => EventPachinkoMilestoneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventPachinkoMilestone> GetEventPachinkoMilestoneMap(string tag="") => EventPachinkoMilestoneVisitor.All(tag);
		public static void RangeEventPachinkoMilestoneMap(Action<int, rawEventPachinkoMilestone> filter,string tag="") => EventPachinkoMilestoneVisitor.Range(filter,tag);
		public static List<int> KeysEventPachinkoMilestoneMap(string tag="") => EventPachinkoMilestoneVisitor.Keys(tag);
		public static rawEventPachinkoMilestone? GetEventPachinkoMilestone(int key,string tag="") => EventPachinkoMilestoneVisitor.Get(key,tag);
		public static List<rawEventPachinkoMilestone> GetEventPachinkoMilestoneByFilter(Func<rawEventPachinkoMilestone, bool> filterFunc,string tag="") => EventPachinkoMilestoneVisitor.GetByFilter(filterFunc,tag);
		public static rawEventPachinkoMilestone? GetOneEventPachinkoMilestoneByFilter(Func<rawEventPachinkoMilestone, bool> filterFunc,string tag="") => EventPachinkoMilestoneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventPachinkoMilestone
	#region EventPachinkoRound
		public static int GetCountEventPachinkoRoundMap(string tag="") => EventPachinkoRoundVisitor.GetCount(tag);
		public static string GetFileNameEventPachinkoRoundMap() => EventPachinkoRoundVisitor.GetFileName();
		public static List<int> SortedKeysEventPachinkoRoundMap(string tag="") => EventPachinkoRoundVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventPachinkoRound> GetEventPachinkoRoundMap(string tag="") => EventPachinkoRoundVisitor.All(tag);
		public static void RangeEventPachinkoRoundMap(Action<int, rawEventPachinkoRound> filter,string tag="") => EventPachinkoRoundVisitor.Range(filter,tag);
		public static List<int> KeysEventPachinkoRoundMap(string tag="") => EventPachinkoRoundVisitor.Keys(tag);
		public static rawEventPachinkoRound? GetEventPachinkoRound(int key,string tag="") => EventPachinkoRoundVisitor.Get(key,tag);
		public static List<rawEventPachinkoRound> GetEventPachinkoRoundByFilter(Func<rawEventPachinkoRound, bool> filterFunc,string tag="") => EventPachinkoRoundVisitor.GetByFilter(filterFunc,tag);
		public static rawEventPachinkoRound? GetOneEventPachinkoRoundByFilter(Func<rawEventPachinkoRound, bool> filterFunc,string tag="") => EventPachinkoRoundVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventPachinkoRound
	#region EventPuzzle
		public static int GetCountEventPuzzleMap(string tag="") => EventPuzzleVisitor.GetCount(tag);
		public static string GetFileNameEventPuzzleMap() => EventPuzzleVisitor.GetFileName();
		public static List<int> SortedKeysEventPuzzleMap(string tag="") => EventPuzzleVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventPuzzle> GetEventPuzzleMap(string tag="") => EventPuzzleVisitor.All(tag);
		public static void RangeEventPuzzleMap(Action<int, rawEventPuzzle> filter,string tag="") => EventPuzzleVisitor.Range(filter,tag);
		public static List<int> KeysEventPuzzleMap(string tag="") => EventPuzzleVisitor.Keys(tag);
		public static rawEventPuzzle? GetEventPuzzle(int key,string tag="") => EventPuzzleVisitor.Get(key,tag);
		public static List<rawEventPuzzle> GetEventPuzzleByFilter(Func<rawEventPuzzle, bool> filterFunc,string tag="") => EventPuzzleVisitor.GetByFilter(filterFunc,tag);
		public static rawEventPuzzle? GetOneEventPuzzleByFilter(Func<rawEventPuzzle, bool> filterFunc,string tag="") => EventPuzzleVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventPuzzle
	#region EventPuzzleDetaile
		public static int GetCountEventPuzzleDetaileMap(string tag="") => EventPuzzleDetaileVisitor.GetCount(tag);
		public static string GetFileNameEventPuzzleDetaileMap() => EventPuzzleDetaileVisitor.GetFileName();
		public static List<int> SortedKeysEventPuzzleDetaileMap(string tag="") => EventPuzzleDetaileVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventPuzzleDetaile> GetEventPuzzleDetaileMap(string tag="") => EventPuzzleDetaileVisitor.All(tag);
		public static void RangeEventPuzzleDetaileMap(Action<int, rawEventPuzzleDetaile> filter,string tag="") => EventPuzzleDetaileVisitor.Range(filter,tag);
		public static List<int> KeysEventPuzzleDetaileMap(string tag="") => EventPuzzleDetaileVisitor.Keys(tag);
		public static rawEventPuzzleDetaile? GetEventPuzzleDetaile(int key,string tag="") => EventPuzzleDetaileVisitor.Get(key,tag);
		public static List<rawEventPuzzleDetaile> GetEventPuzzleDetaileByFilter(Func<rawEventPuzzleDetaile, bool> filterFunc,string tag="") => EventPuzzleDetaileVisitor.GetByFilter(filterFunc,tag);
		public static rawEventPuzzleDetaile? GetOneEventPuzzleDetaileByFilter(Func<rawEventPuzzleDetaile, bool> filterFunc,string tag="") => EventPuzzleDetaileVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventPuzzleDetaile
	#region EventPuzzleRewards
		public static int GetCountEventPuzzleRewardsMap(string tag="") => EventPuzzleRewardsVisitor.GetCount(tag);
		public static string GetFileNameEventPuzzleRewardsMap() => EventPuzzleRewardsVisitor.GetFileName();
		public static List<int> SortedKeysEventPuzzleRewardsMap(string tag="") => EventPuzzleRewardsVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventPuzzleRewards> GetEventPuzzleRewardsMap(string tag="") => EventPuzzleRewardsVisitor.All(tag);
		public static void RangeEventPuzzleRewardsMap(Action<int, rawEventPuzzleRewards> filter,string tag="") => EventPuzzleRewardsVisitor.Range(filter,tag);
		public static List<int> KeysEventPuzzleRewardsMap(string tag="") => EventPuzzleRewardsVisitor.Keys(tag);
		public static rawEventPuzzleRewards? GetEventPuzzleRewards(int key,string tag="") => EventPuzzleRewardsVisitor.Get(key,tag);
		public static List<rawEventPuzzleRewards> GetEventPuzzleRewardsByFilter(Func<rawEventPuzzleRewards, bool> filterFunc,string tag="") => EventPuzzleRewardsVisitor.GetByFilter(filterFunc,tag);
		public static rawEventPuzzleRewards? GetOneEventPuzzleRewardsByFilter(Func<rawEventPuzzleRewards, bool> filterFunc,string tag="") => EventPuzzleRewardsVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventPuzzleRewards
	#region EventPuzzleRound
		public static int GetCountEventPuzzleRoundMap(string tag="") => EventPuzzleRoundVisitor.GetCount(tag);
		public static string GetFileNameEventPuzzleRoundMap() => EventPuzzleRoundVisitor.GetFileName();
		public static List<int> SortedKeysEventPuzzleRoundMap(string tag="") => EventPuzzleRoundVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventPuzzleRound> GetEventPuzzleRoundMap(string tag="") => EventPuzzleRoundVisitor.All(tag);
		public static void RangeEventPuzzleRoundMap(Action<int, rawEventPuzzleRound> filter,string tag="") => EventPuzzleRoundVisitor.Range(filter,tag);
		public static List<int> KeysEventPuzzleRoundMap(string tag="") => EventPuzzleRoundVisitor.Keys(tag);
		public static rawEventPuzzleRound? GetEventPuzzleRound(int key,string tag="") => EventPuzzleRoundVisitor.Get(key,tag);
		public static List<rawEventPuzzleRound> GetEventPuzzleRoundByFilter(Func<rawEventPuzzleRound, bool> filterFunc,string tag="") => EventPuzzleRoundVisitor.GetByFilter(filterFunc,tag);
		public static rawEventPuzzleRound? GetOneEventPuzzleRoundByFilter(Func<rawEventPuzzleRound, bool> filterFunc,string tag="") => EventPuzzleRoundVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventPuzzleRound
	#region EventRace
		public static int GetCountEventRaceMap(string tag="") => EventRaceVisitor.GetCount(tag);
		public static string GetFileNameEventRaceMap() => EventRaceVisitor.GetFileName();
		public static List<int> SortedKeysEventRaceMap(string tag="") => EventRaceVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventRace> GetEventRaceMap(string tag="") => EventRaceVisitor.All(tag);
		public static void RangeEventRaceMap(Action<int, rawEventRace> filter,string tag="") => EventRaceVisitor.Range(filter,tag);
		public static List<int> KeysEventRaceMap(string tag="") => EventRaceVisitor.Keys(tag);
		public static rawEventRace? GetEventRace(int key,string tag="") => EventRaceVisitor.Get(key,tag);
		public static List<rawEventRace> GetEventRaceByFilter(Func<rawEventRace, bool> filterFunc,string tag="") => EventRaceVisitor.GetByFilter(filterFunc,tag);
		public static rawEventRace? GetOneEventRaceByFilter(Func<rawEventRace, bool> filterFunc,string tag="") => EventRaceVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventRace
	#region EventRaceGroup
		public static int GetCountEventRaceGroupMap(string tag="") => EventRaceGroupVisitor.GetCount(tag);
		public static string GetFileNameEventRaceGroupMap() => EventRaceGroupVisitor.GetFileName();
		public static List<int> SortedKeysEventRaceGroupMap(string tag="") => EventRaceGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventRaceGroup> GetEventRaceGroupMap(string tag="") => EventRaceGroupVisitor.All(tag);
		public static void RangeEventRaceGroupMap(Action<int, rawEventRaceGroup> filter,string tag="") => EventRaceGroupVisitor.Range(filter,tag);
		public static List<int> KeysEventRaceGroupMap(string tag="") => EventRaceGroupVisitor.Keys(tag);
		public static rawEventRaceGroup? GetEventRaceGroup(int key,string tag="") => EventRaceGroupVisitor.Get(key,tag);
		public static List<rawEventRaceGroup> GetEventRaceGroupByFilter(Func<rawEventRaceGroup, bool> filterFunc,string tag="") => EventRaceGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawEventRaceGroup? GetOneEventRaceGroupByFilter(Func<rawEventRaceGroup, bool> filterFunc,string tag="") => EventRaceGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventRaceGroup
	#region EventRaceReward
		public static int GetCountEventRaceRewardMap(string tag="") => EventRaceRewardVisitor.GetCount(tag);
		public static string GetFileNameEventRaceRewardMap() => EventRaceRewardVisitor.GetFileName();
		public static List<int> SortedKeysEventRaceRewardMap(string tag="") => EventRaceRewardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventRaceReward> GetEventRaceRewardMap(string tag="") => EventRaceRewardVisitor.All(tag);
		public static void RangeEventRaceRewardMap(Action<int, rawEventRaceReward> filter,string tag="") => EventRaceRewardVisitor.Range(filter,tag);
		public static List<int> KeysEventRaceRewardMap(string tag="") => EventRaceRewardVisitor.Keys(tag);
		public static rawEventRaceReward? GetEventRaceReward(int key,string tag="") => EventRaceRewardVisitor.Get(key,tag);
		public static List<rawEventRaceReward> GetEventRaceRewardByFilter(Func<rawEventRaceReward, bool> filterFunc,string tag="") => EventRaceRewardVisitor.GetByFilter(filterFunc,tag);
		public static rawEventRaceReward? GetOneEventRaceRewardByFilter(Func<rawEventRaceReward, bool> filterFunc,string tag="") => EventRaceRewardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventRaceReward
	#region EventRaceRobot
		public static int GetCountEventRaceRobotMap(string tag="") => EventRaceRobotVisitor.GetCount(tag);
		public static string GetFileNameEventRaceRobotMap() => EventRaceRobotVisitor.GetFileName();
		public static List<int> SortedKeysEventRaceRobotMap(string tag="") => EventRaceRobotVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventRaceRobot> GetEventRaceRobotMap(string tag="") => EventRaceRobotVisitor.All(tag);
		public static void RangeEventRaceRobotMap(Action<int, rawEventRaceRobot> filter,string tag="") => EventRaceRobotVisitor.Range(filter,tag);
		public static List<int> KeysEventRaceRobotMap(string tag="") => EventRaceRobotVisitor.Keys(tag);
		public static rawEventRaceRobot? GetEventRaceRobot(int key,string tag="") => EventRaceRobotVisitor.Get(key,tag);
		public static List<rawEventRaceRobot> GetEventRaceRobotByFilter(Func<rawEventRaceRobot, bool> filterFunc,string tag="") => EventRaceRobotVisitor.GetByFilter(filterFunc,tag);
		public static rawEventRaceRobot? GetOneEventRaceRobotByFilter(Func<rawEventRaceRobot, bool> filterFunc,string tag="") => EventRaceRobotVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventRaceRobot
	#region EventRaceRobotIcon
		public static int GetCountEventRaceRobotIconMap(string tag="") => EventRaceRobotIconVisitor.GetCount(tag);
		public static string GetFileNameEventRaceRobotIconMap() => EventRaceRobotIconVisitor.GetFileName();
		public static List<int> SortedKeysEventRaceRobotIconMap(string tag="") => EventRaceRobotIconVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventRaceRobotIcon> GetEventRaceRobotIconMap(string tag="") => EventRaceRobotIconVisitor.All(tag);
		public static void RangeEventRaceRobotIconMap(Action<int, rawEventRaceRobotIcon> filter,string tag="") => EventRaceRobotIconVisitor.Range(filter,tag);
		public static List<int> KeysEventRaceRobotIconMap(string tag="") => EventRaceRobotIconVisitor.Keys(tag);
		public static rawEventRaceRobotIcon? GetEventRaceRobotIcon(int key,string tag="") => EventRaceRobotIconVisitor.Get(key,tag);
		public static List<rawEventRaceRobotIcon> GetEventRaceRobotIconByFilter(Func<rawEventRaceRobotIcon, bool> filterFunc,string tag="") => EventRaceRobotIconVisitor.GetByFilter(filterFunc,tag);
		public static rawEventRaceRobotIcon? GetOneEventRaceRobotIconByFilter(Func<rawEventRaceRobotIcon, bool> filterFunc,string tag="") => EventRaceRobotIconVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventRaceRobotIcon
	#region EventRaceRound
		public static int GetCountEventRaceRoundMap(string tag="") => EventRaceRoundVisitor.GetCount(tag);
		public static string GetFileNameEventRaceRoundMap() => EventRaceRoundVisitor.GetFileName();
		public static List<int> SortedKeysEventRaceRoundMap(string tag="") => EventRaceRoundVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventRaceRound> GetEventRaceRoundMap(string tag="") => EventRaceRoundVisitor.All(tag);
		public static void RangeEventRaceRoundMap(Action<int, rawEventRaceRound> filter,string tag="") => EventRaceRoundVisitor.Range(filter,tag);
		public static List<int> KeysEventRaceRoundMap(string tag="") => EventRaceRoundVisitor.Keys(tag);
		public static rawEventRaceRound? GetEventRaceRound(int key,string tag="") => EventRaceRoundVisitor.Get(key,tag);
		public static List<rawEventRaceRound> GetEventRaceRoundByFilter(Func<rawEventRaceRound, bool> filterFunc,string tag="") => EventRaceRoundVisitor.GetByFilter(filterFunc,tag);
		public static rawEventRaceRound? GetOneEventRaceRoundByFilter(Func<rawEventRaceRound, bool> filterFunc,string tag="") => EventRaceRoundVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventRaceRound
	#region EventRank
		public static int GetCountEventRankMap(string tag="") => EventRankVisitor.GetCount(tag);
		public static string GetFileNameEventRankMap() => EventRankVisitor.GetFileName();
		public static List<int> SortedKeysEventRankMap(string tag="") => EventRankVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventRank> GetEventRankMap(string tag="") => EventRankVisitor.All(tag);
		public static void RangeEventRankMap(Action<int, rawEventRank> filter,string tag="") => EventRankVisitor.Range(filter,tag);
		public static List<int> KeysEventRankMap(string tag="") => EventRankVisitor.Keys(tag);
		public static rawEventRank? GetEventRank(int key,string tag="") => EventRankVisitor.Get(key,tag);
		public static List<rawEventRank> GetEventRankByFilter(Func<rawEventRank, bool> filterFunc,string tag="") => EventRankVisitor.GetByFilter(filterFunc,tag);
		public static rawEventRank? GetOneEventRankByFilter(Func<rawEventRank, bool> filterFunc,string tag="") => EventRankVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventRank
	#region EventRankReward
		public static int GetCountEventRankRewardMap(string tag="") => EventRankRewardVisitor.GetCount(tag);
		public static string GetFileNameEventRankRewardMap() => EventRankRewardVisitor.GetFileName();
		public static List<int> SortedKeysEventRankRewardMap(string tag="") => EventRankRewardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventRankReward> GetEventRankRewardMap(string tag="") => EventRankRewardVisitor.All(tag);
		public static void RangeEventRankRewardMap(Action<int, rawEventRankReward> filter,string tag="") => EventRankRewardVisitor.Range(filter,tag);
		public static List<int> KeysEventRankRewardMap(string tag="") => EventRankRewardVisitor.Keys(tag);
		public static rawEventRankReward? GetEventRankReward(int key,string tag="") => EventRankRewardVisitor.Get(key,tag);
		public static List<rawEventRankReward> GetEventRankRewardByFilter(Func<rawEventRankReward, bool> filterFunc,string tag="") => EventRankRewardVisitor.GetByFilter(filterFunc,tag);
		public static rawEventRankReward? GetOneEventRankRewardByFilter(Func<rawEventRankReward, bool> filterFunc,string tag="") => EventRankRewardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventRankReward
	#region EventRedeem
		public static int GetCountEventRedeemMap(string tag="") => EventRedeemVisitor.GetCount(tag);
		public static string GetFileNameEventRedeemMap() => EventRedeemVisitor.GetFileName();
		public static List<int> SortedKeysEventRedeemMap(string tag="") => EventRedeemVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventRedeem> GetEventRedeemMap(string tag="") => EventRedeemVisitor.All(tag);
		public static void RangeEventRedeemMap(Action<int, rawEventRedeem> filter,string tag="") => EventRedeemVisitor.Range(filter,tag);
		public static List<int> KeysEventRedeemMap(string tag="") => EventRedeemVisitor.Keys(tag);
		public static rawEventRedeem? GetEventRedeem(int key,string tag="") => EventRedeemVisitor.Get(key,tag);
		public static List<rawEventRedeem> GetEventRedeemByFilter(Func<rawEventRedeem, bool> filterFunc,string tag="") => EventRedeemVisitor.GetByFilter(filterFunc,tag);
		public static rawEventRedeem? GetOneEventRedeemByFilter(Func<rawEventRedeem, bool> filterFunc,string tag="") => EventRedeemVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventRedeem
	#region EventRedeemDetail
		public static int GetCountEventRedeemDetailMap(string tag="") => EventRedeemDetailVisitor.GetCount(tag);
		public static string GetFileNameEventRedeemDetailMap() => EventRedeemDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventRedeemDetailMap(string tag="") => EventRedeemDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventRedeemDetail> GetEventRedeemDetailMap(string tag="") => EventRedeemDetailVisitor.All(tag);
		public static void RangeEventRedeemDetailMap(Action<int, rawEventRedeemDetail> filter,string tag="") => EventRedeemDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventRedeemDetailMap(string tag="") => EventRedeemDetailVisitor.Keys(tag);
		public static rawEventRedeemDetail? GetEventRedeemDetail(int key,string tag="") => EventRedeemDetailVisitor.Get(key,tag);
		public static List<rawEventRedeemDetail> GetEventRedeemDetailByFilter(Func<rawEventRedeemDetail, bool> filterFunc,string tag="") => EventRedeemDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventRedeemDetail? GetOneEventRedeemDetailByFilter(Func<rawEventRedeemDetail, bool> filterFunc,string tag="") => EventRedeemDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventRedeemDetail
	#region EventRedeemGrp
		public static int GetCountEventRedeemGrpMap(string tag="") => EventRedeemGrpVisitor.GetCount(tag);
		public static string GetFileNameEventRedeemGrpMap() => EventRedeemGrpVisitor.GetFileName();
		public static List<int> SortedKeysEventRedeemGrpMap(string tag="") => EventRedeemGrpVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventRedeemGrp> GetEventRedeemGrpMap(string tag="") => EventRedeemGrpVisitor.All(tag);
		public static void RangeEventRedeemGrpMap(Action<int, rawEventRedeemGrp> filter,string tag="") => EventRedeemGrpVisitor.Range(filter,tag);
		public static List<int> KeysEventRedeemGrpMap(string tag="") => EventRedeemGrpVisitor.Keys(tag);
		public static rawEventRedeemGrp? GetEventRedeemGrp(int key,string tag="") => EventRedeemGrpVisitor.Get(key,tag);
		public static List<rawEventRedeemGrp> GetEventRedeemGrpByFilter(Func<rawEventRedeemGrp, bool> filterFunc,string tag="") => EventRedeemGrpVisitor.GetByFilter(filterFunc,tag);
		public static rawEventRedeemGrp? GetOneEventRedeemGrpByFilter(Func<rawEventRedeemGrp, bool> filterFunc,string tag="") => EventRedeemGrpVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventRedeemGrp
	#region EventRedeemMilestone
		public static int GetCountEventRedeemMilestoneMap(string tag="") => EventRedeemMilestoneVisitor.GetCount(tag);
		public static string GetFileNameEventRedeemMilestoneMap() => EventRedeemMilestoneVisitor.GetFileName();
		public static List<int> SortedKeysEventRedeemMilestoneMap(string tag="") => EventRedeemMilestoneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventRedeemMilestone> GetEventRedeemMilestoneMap(string tag="") => EventRedeemMilestoneVisitor.All(tag);
		public static void RangeEventRedeemMilestoneMap(Action<int, rawEventRedeemMilestone> filter,string tag="") => EventRedeemMilestoneVisitor.Range(filter,tag);
		public static List<int> KeysEventRedeemMilestoneMap(string tag="") => EventRedeemMilestoneVisitor.Keys(tag);
		public static rawEventRedeemMilestone? GetEventRedeemMilestone(int key,string tag="") => EventRedeemMilestoneVisitor.Get(key,tag);
		public static List<rawEventRedeemMilestone> GetEventRedeemMilestoneByFilter(Func<rawEventRedeemMilestone, bool> filterFunc,string tag="") => EventRedeemMilestoneVisitor.GetByFilter(filterFunc,tag);
		public static rawEventRedeemMilestone? GetOneEventRedeemMilestoneByFilter(Func<rawEventRedeemMilestone, bool> filterFunc,string tag="") => EventRedeemMilestoneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventRedeemMilestone
	#region EventRedeemReward
		public static int GetCountEventRedeemRewardMap(string tag="") => EventRedeemRewardVisitor.GetCount(tag);
		public static string GetFileNameEventRedeemRewardMap() => EventRedeemRewardVisitor.GetFileName();
		public static List<int> SortedKeysEventRedeemRewardMap(string tag="") => EventRedeemRewardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventRedeemReward> GetEventRedeemRewardMap(string tag="") => EventRedeemRewardVisitor.All(tag);
		public static void RangeEventRedeemRewardMap(Action<int, rawEventRedeemReward> filter,string tag="") => EventRedeemRewardVisitor.Range(filter,tag);
		public static List<int> KeysEventRedeemRewardMap(string tag="") => EventRedeemRewardVisitor.Keys(tag);
		public static rawEventRedeemReward? GetEventRedeemReward(int key,string tag="") => EventRedeemRewardVisitor.Get(key,tag);
		public static List<rawEventRedeemReward> GetEventRedeemRewardByFilter(Func<rawEventRedeemReward, bool> filterFunc,string tag="") => EventRedeemRewardVisitor.GetByFilter(filterFunc,tag);
		public static rawEventRedeemReward? GetOneEventRedeemRewardByFilter(Func<rawEventRedeemReward, bool> filterFunc,string tag="") => EventRedeemRewardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventRedeemReward
	#region EventScore
		public static int GetCountEventScoreMap(string tag="") => EventScoreVisitor.GetCount(tag);
		public static string GetFileNameEventScoreMap() => EventScoreVisitor.GetFileName();
		public static List<int> SortedKeysEventScoreMap(string tag="") => EventScoreVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventScore> GetEventScoreMap(string tag="") => EventScoreVisitor.All(tag);
		public static void RangeEventScoreMap(Action<int, rawEventScore> filter,string tag="") => EventScoreVisitor.Range(filter,tag);
		public static List<int> KeysEventScoreMap(string tag="") => EventScoreVisitor.Keys(tag);
		public static rawEventScore? GetEventScore(int key,string tag="") => EventScoreVisitor.Get(key,tag);
		public static List<rawEventScore> GetEventScoreByFilter(Func<rawEventScore, bool> filterFunc,string tag="") => EventScoreVisitor.GetByFilter(filterFunc,tag);
		public static rawEventScore? GetOneEventScoreByFilter(Func<rawEventScore, bool> filterFunc,string tag="") => EventScoreVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventScore
	#region EventScoreDetail
		public static int GetCountEventScoreDetailMap(string tag="") => EventScoreDetailVisitor.GetCount(tag);
		public static string GetFileNameEventScoreDetailMap() => EventScoreDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventScoreDetailMap(string tag="") => EventScoreDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventScoreDetail> GetEventScoreDetailMap(string tag="") => EventScoreDetailVisitor.All(tag);
		public static void RangeEventScoreDetailMap(Action<int, rawEventScoreDetail> filter,string tag="") => EventScoreDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventScoreDetailMap(string tag="") => EventScoreDetailVisitor.Keys(tag);
		public static rawEventScoreDetail? GetEventScoreDetail(int key,string tag="") => EventScoreDetailVisitor.Get(key,tag);
		public static List<rawEventScoreDetail> GetEventScoreDetailByFilter(Func<rawEventScoreDetail, bool> filterFunc,string tag="") => EventScoreDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventScoreDetail? GetOneEventScoreDetailByFilter(Func<rawEventScoreDetail, bool> filterFunc,string tag="") => EventScoreDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventScoreDetail
	#region EventScoreDuel
		public static int GetCountEventScoreDuelMap(string tag="") => EventScoreDuelVisitor.GetCount(tag);
		public static string GetFileNameEventScoreDuelMap() => EventScoreDuelVisitor.GetFileName();
		public static List<int> SortedKeysEventScoreDuelMap(string tag="") => EventScoreDuelVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventScoreDuel> GetEventScoreDuelMap(string tag="") => EventScoreDuelVisitor.All(tag);
		public static void RangeEventScoreDuelMap(Action<int, rawEventScoreDuel> filter,string tag="") => EventScoreDuelVisitor.Range(filter,tag);
		public static List<int> KeysEventScoreDuelMap(string tag="") => EventScoreDuelVisitor.Keys(tag);
		public static rawEventScoreDuel? GetEventScoreDuel(int key,string tag="") => EventScoreDuelVisitor.Get(key,tag);
		public static List<rawEventScoreDuel> GetEventScoreDuelByFilter(Func<rawEventScoreDuel, bool> filterFunc,string tag="") => EventScoreDuelVisitor.GetByFilter(filterFunc,tag);
		public static rawEventScoreDuel? GetOneEventScoreDuelByFilter(Func<rawEventScoreDuel, bool> filterFunc,string tag="") => EventScoreDuelVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventScoreDuel
	#region EventScoreDuelDetail
		public static int GetCountEventScoreDuelDetailMap(string tag="") => EventScoreDuelDetailVisitor.GetCount(tag);
		public static string GetFileNameEventScoreDuelDetailMap() => EventScoreDuelDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventScoreDuelDetailMap(string tag="") => EventScoreDuelDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventScoreDuelDetail> GetEventScoreDuelDetailMap(string tag="") => EventScoreDuelDetailVisitor.All(tag);
		public static void RangeEventScoreDuelDetailMap(Action<int, rawEventScoreDuelDetail> filter,string tag="") => EventScoreDuelDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventScoreDuelDetailMap(string tag="") => EventScoreDuelDetailVisitor.Keys(tag);
		public static rawEventScoreDuelDetail? GetEventScoreDuelDetail(int key,string tag="") => EventScoreDuelDetailVisitor.Get(key,tag);
		public static List<rawEventScoreDuelDetail> GetEventScoreDuelDetailByFilter(Func<rawEventScoreDuelDetail, bool> filterFunc,string tag="") => EventScoreDuelDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventScoreDuelDetail? GetOneEventScoreDuelDetailByFilter(Func<rawEventScoreDuelDetail, bool> filterFunc,string tag="") => EventScoreDuelDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventScoreDuelDetail
	#region EventScoreDuelSTG
		public static int GetCountEventScoreDuelSTGMap(string tag="") => EventScoreDuelSTGVisitor.GetCount(tag);
		public static string GetFileNameEventScoreDuelSTGMap() => EventScoreDuelSTGVisitor.GetFileName();
		public static List<int> SortedKeysEventScoreDuelSTGMap(string tag="") => EventScoreDuelSTGVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventScoreDuelSTG> GetEventScoreDuelSTGMap(string tag="") => EventScoreDuelSTGVisitor.All(tag);
		public static void RangeEventScoreDuelSTGMap(Action<int, rawEventScoreDuelSTG> filter,string tag="") => EventScoreDuelSTGVisitor.Range(filter,tag);
		public static List<int> KeysEventScoreDuelSTGMap(string tag="") => EventScoreDuelSTGVisitor.Keys(tag);
		public static rawEventScoreDuelSTG? GetEventScoreDuelSTG(int key,string tag="") => EventScoreDuelSTGVisitor.Get(key,tag);
		public static List<rawEventScoreDuelSTG> GetEventScoreDuelSTGByFilter(Func<rawEventScoreDuelSTG, bool> filterFunc,string tag="") => EventScoreDuelSTGVisitor.GetByFilter(filterFunc,tag);
		public static rawEventScoreDuelSTG? GetOneEventScoreDuelSTGByFilter(Func<rawEventScoreDuelSTG, bool> filterFunc,string tag="") => EventScoreDuelSTGVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventScoreDuelSTG
	#region EventSeaMilestoneReward
		public static int GetCountEventSeaMilestoneRewardMap(string tag="") => EventSeaMilestoneRewardVisitor.GetCount(tag);
		public static string GetFileNameEventSeaMilestoneRewardMap() => EventSeaMilestoneRewardVisitor.GetFileName();
		public static List<int> SortedKeysEventSeaMilestoneRewardMap(string tag="") => EventSeaMilestoneRewardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventSeaMilestoneReward> GetEventSeaMilestoneRewardMap(string tag="") => EventSeaMilestoneRewardVisitor.All(tag);
		public static void RangeEventSeaMilestoneRewardMap(Action<int, rawEventSeaMilestoneReward> filter,string tag="") => EventSeaMilestoneRewardVisitor.Range(filter,tag);
		public static List<int> KeysEventSeaMilestoneRewardMap(string tag="") => EventSeaMilestoneRewardVisitor.Keys(tag);
		public static rawEventSeaMilestoneReward? GetEventSeaMilestoneReward(int key,string tag="") => EventSeaMilestoneRewardVisitor.Get(key,tag);
		public static List<rawEventSeaMilestoneReward> GetEventSeaMilestoneRewardByFilter(Func<rawEventSeaMilestoneReward, bool> filterFunc,string tag="") => EventSeaMilestoneRewardVisitor.GetByFilter(filterFunc,tag);
		public static rawEventSeaMilestoneReward? GetOneEventSeaMilestoneRewardByFilter(Func<rawEventSeaMilestoneReward, bool> filterFunc,string tag="") => EventSeaMilestoneRewardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventSeaMilestoneReward
	#region EventSeaRace
		public static int GetCountEventSeaRaceMap(string tag="") => EventSeaRaceVisitor.GetCount(tag);
		public static string GetFileNameEventSeaRaceMap() => EventSeaRaceVisitor.GetFileName();
		public static List<int> SortedKeysEventSeaRaceMap(string tag="") => EventSeaRaceVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventSeaRace> GetEventSeaRaceMap(string tag="") => EventSeaRaceVisitor.All(tag);
		public static void RangeEventSeaRaceMap(Action<int, rawEventSeaRace> filter,string tag="") => EventSeaRaceVisitor.Range(filter,tag);
		public static List<int> KeysEventSeaRaceMap(string tag="") => EventSeaRaceVisitor.Keys(tag);
		public static rawEventSeaRace? GetEventSeaRace(int key,string tag="") => EventSeaRaceVisitor.Get(key,tag);
		public static List<rawEventSeaRace> GetEventSeaRaceByFilter(Func<rawEventSeaRace, bool> filterFunc,string tag="") => EventSeaRaceVisitor.GetByFilter(filterFunc,tag);
		public static rawEventSeaRace? GetOneEventSeaRaceByFilter(Func<rawEventSeaRace, bool> filterFunc,string tag="") => EventSeaRaceVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventSeaRace
	#region EventSeaRaceDetail
		public static int GetCountEventSeaRaceDetailMap(string tag="") => EventSeaRaceDetailVisitor.GetCount(tag);
		public static string GetFileNameEventSeaRaceDetailMap() => EventSeaRaceDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventSeaRaceDetailMap(string tag="") => EventSeaRaceDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventSeaRaceDetail> GetEventSeaRaceDetailMap(string tag="") => EventSeaRaceDetailVisitor.All(tag);
		public static void RangeEventSeaRaceDetailMap(Action<int, rawEventSeaRaceDetail> filter,string tag="") => EventSeaRaceDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventSeaRaceDetailMap(string tag="") => EventSeaRaceDetailVisitor.Keys(tag);
		public static rawEventSeaRaceDetail? GetEventSeaRaceDetail(int key,string tag="") => EventSeaRaceDetailVisitor.Get(key,tag);
		public static List<rawEventSeaRaceDetail> GetEventSeaRaceDetailByFilter(Func<rawEventSeaRaceDetail, bool> filterFunc,string tag="") => EventSeaRaceDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventSeaRaceDetail? GetOneEventSeaRaceDetailByFilter(Func<rawEventSeaRaceDetail, bool> filterFunc,string tag="") => EventSeaRaceDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventSeaRaceDetail
	#region EventSeaRaceReward
		public static int GetCountEventSeaRaceRewardMap(string tag="") => EventSeaRaceRewardVisitor.GetCount(tag);
		public static string GetFileNameEventSeaRaceRewardMap() => EventSeaRaceRewardVisitor.GetFileName();
		public static List<int> SortedKeysEventSeaRaceRewardMap(string tag="") => EventSeaRaceRewardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventSeaRaceReward> GetEventSeaRaceRewardMap(string tag="") => EventSeaRaceRewardVisitor.All(tag);
		public static void RangeEventSeaRaceRewardMap(Action<int, rawEventSeaRaceReward> filter,string tag="") => EventSeaRaceRewardVisitor.Range(filter,tag);
		public static List<int> KeysEventSeaRaceRewardMap(string tag="") => EventSeaRaceRewardVisitor.Keys(tag);
		public static rawEventSeaRaceReward? GetEventSeaRaceReward(int key,string tag="") => EventSeaRaceRewardVisitor.Get(key,tag);
		public static List<rawEventSeaRaceReward> GetEventSeaRaceRewardByFilter(Func<rawEventSeaRaceReward, bool> filterFunc,string tag="") => EventSeaRaceRewardVisitor.GetByFilter(filterFunc,tag);
		public static rawEventSeaRaceReward? GetOneEventSeaRaceRewardByFilter(Func<rawEventSeaRaceReward, bool> filterFunc,string tag="") => EventSeaRaceRewardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventSeaRaceReward
	#region EventSeaRaceRobot
		public static int GetCountEventSeaRaceRobotMap(string tag="") => EventSeaRaceRobotVisitor.GetCount(tag);
		public static string GetFileNameEventSeaRaceRobotMap() => EventSeaRaceRobotVisitor.GetFileName();
		public static List<int> SortedKeysEventSeaRaceRobotMap(string tag="") => EventSeaRaceRobotVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventSeaRaceRobot> GetEventSeaRaceRobotMap(string tag="") => EventSeaRaceRobotVisitor.All(tag);
		public static void RangeEventSeaRaceRobotMap(Action<int, rawEventSeaRaceRobot> filter,string tag="") => EventSeaRaceRobotVisitor.Range(filter,tag);
		public static List<int> KeysEventSeaRaceRobotMap(string tag="") => EventSeaRaceRobotVisitor.Keys(tag);
		public static rawEventSeaRaceRobot? GetEventSeaRaceRobot(int key,string tag="") => EventSeaRaceRobotVisitor.Get(key,tag);
		public static List<rawEventSeaRaceRobot> GetEventSeaRaceRobotByFilter(Func<rawEventSeaRaceRobot, bool> filterFunc,string tag="") => EventSeaRaceRobotVisitor.GetByFilter(filterFunc,tag);
		public static rawEventSeaRaceRobot? GetOneEventSeaRaceRobotByFilter(Func<rawEventSeaRaceRobot, bool> filterFunc,string tag="") => EventSeaRaceRobotVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventSeaRaceRobot
	#region EventSeaRaceRound
		public static int GetCountEventSeaRaceRoundMap(string tag="") => EventSeaRaceRoundVisitor.GetCount(tag);
		public static string GetFileNameEventSeaRaceRoundMap() => EventSeaRaceRoundVisitor.GetFileName();
		public static List<int> SortedKeysEventSeaRaceRoundMap(string tag="") => EventSeaRaceRoundVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventSeaRaceRound> GetEventSeaRaceRoundMap(string tag="") => EventSeaRaceRoundVisitor.All(tag);
		public static void RangeEventSeaRaceRoundMap(Action<int, rawEventSeaRaceRound> filter,string tag="") => EventSeaRaceRoundVisitor.Range(filter,tag);
		public static List<int> KeysEventSeaRaceRoundMap(string tag="") => EventSeaRaceRoundVisitor.Keys(tag);
		public static rawEventSeaRaceRound? GetEventSeaRaceRound(int key,string tag="") => EventSeaRaceRoundVisitor.Get(key,tag);
		public static List<rawEventSeaRaceRound> GetEventSeaRaceRoundByFilter(Func<rawEventSeaRaceRound, bool> filterFunc,string tag="") => EventSeaRaceRoundVisitor.GetByFilter(filterFunc,tag);
		public static rawEventSeaRaceRound? GetOneEventSeaRaceRoundByFilter(Func<rawEventSeaRaceRound, bool> filterFunc,string tag="") => EventSeaRaceRoundVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventSeaRaceRound
	#region EventSevenDayTask
		public static int GetCountEventSevenDayTaskMap(string tag="") => EventSevenDayTaskVisitor.GetCount(tag);
		public static string GetFileNameEventSevenDayTaskMap() => EventSevenDayTaskVisitor.GetFileName();
		public static List<int> SortedKeysEventSevenDayTaskMap(string tag="") => EventSevenDayTaskVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventSevenDayTask> GetEventSevenDayTaskMap(string tag="") => EventSevenDayTaskVisitor.All(tag);
		public static void RangeEventSevenDayTaskMap(Action<int, rawEventSevenDayTask> filter,string tag="") => EventSevenDayTaskVisitor.Range(filter,tag);
		public static List<int> KeysEventSevenDayTaskMap(string tag="") => EventSevenDayTaskVisitor.Keys(tag);
		public static rawEventSevenDayTask? GetEventSevenDayTask(int key,string tag="") => EventSevenDayTaskVisitor.Get(key,tag);
		public static List<rawEventSevenDayTask> GetEventSevenDayTaskByFilter(Func<rawEventSevenDayTask, bool> filterFunc,string tag="") => EventSevenDayTaskVisitor.GetByFilter(filterFunc,tag);
		public static rawEventSevenDayTask? GetOneEventSevenDayTaskByFilter(Func<rawEventSevenDayTask, bool> filterFunc,string tag="") => EventSevenDayTaskVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventSevenDayTask
	#region EventStamp
		public static int GetCountEventStampMap(string tag="") => EventStampVisitor.GetCount(tag);
		public static string GetFileNameEventStampMap() => EventStampVisitor.GetFileName();
		public static List<int> SortedKeysEventStampMap(string tag="") => EventStampVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventStamp> GetEventStampMap(string tag="") => EventStampVisitor.All(tag);
		public static void RangeEventStampMap(Action<int, rawEventStamp> filter,string tag="") => EventStampVisitor.Range(filter,tag);
		public static List<int> KeysEventStampMap(string tag="") => EventStampVisitor.Keys(tag);
		public static rawEventStamp? GetEventStamp(int key,string tag="") => EventStampVisitor.Get(key,tag);
		public static List<rawEventStamp> GetEventStampByFilter(Func<rawEventStamp, bool> filterFunc,string tag="") => EventStampVisitor.GetByFilter(filterFunc,tag);
		public static rawEventStamp? GetOneEventStampByFilter(Func<rawEventStamp, bool> filterFunc,string tag="") => EventStampVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventStamp
	#region EventStampRound
		public static int GetCountEventStampRoundMap(string tag="") => EventStampRoundVisitor.GetCount(tag);
		public static string GetFileNameEventStampRoundMap() => EventStampRoundVisitor.GetFileName();
		public static List<int> SortedKeysEventStampRoundMap(string tag="") => EventStampRoundVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventStampRound> GetEventStampRoundMap(string tag="") => EventStampRoundVisitor.All(tag);
		public static void RangeEventStampRoundMap(Action<int, rawEventStampRound> filter,string tag="") => EventStampRoundVisitor.Range(filter,tag);
		public static List<int> KeysEventStampRoundMap(string tag="") => EventStampRoundVisitor.Keys(tag);
		public static rawEventStampRound? GetEventStampRound(int key,string tag="") => EventStampRoundVisitor.Get(key,tag);
		public static List<rawEventStampRound> GetEventStampRoundByFilter(Func<rawEventStampRound, bool> filterFunc,string tag="") => EventStampRoundVisitor.GetByFilter(filterFunc,tag);
		public static rawEventStampRound? GetOneEventStampRoundByFilter(Func<rawEventStampRound, bool> filterFunc,string tag="") => EventStampRoundVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventStampRound
	#region EventStep
		public static int GetCountEventStepMap(string tag="") => EventStepVisitor.GetCount(tag);
		public static string GetFileNameEventStepMap() => EventStepVisitor.GetFileName();
		public static List<int> SortedKeysEventStepMap(string tag="") => EventStepVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventStep> GetEventStepMap(string tag="") => EventStepVisitor.All(tag);
		public static void RangeEventStepMap(Action<int, rawEventStep> filter,string tag="") => EventStepVisitor.Range(filter,tag);
		public static List<int> KeysEventStepMap(string tag="") => EventStepVisitor.Keys(tag);
		public static rawEventStep? GetEventStep(int key,string tag="") => EventStepVisitor.Get(key,tag);
		public static List<rawEventStep> GetEventStepByFilter(Func<rawEventStep, bool> filterFunc,string tag="") => EventStepVisitor.GetByFilter(filterFunc,tag);
		public static rawEventStep? GetOneEventStepByFilter(Func<rawEventStep, bool> filterFunc,string tag="") => EventStepVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventStep
	#region EventStepDetail
		public static int GetCountEventStepDetailMap(string tag="") => EventStepDetailVisitor.GetCount(tag);
		public static string GetFileNameEventStepDetailMap() => EventStepDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventStepDetailMap(string tag="") => EventStepDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventStepDetail> GetEventStepDetailMap(string tag="") => EventStepDetailVisitor.All(tag);
		public static void RangeEventStepDetailMap(Action<int, rawEventStepDetail> filter,string tag="") => EventStepDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventStepDetailMap(string tag="") => EventStepDetailVisitor.Keys(tag);
		public static rawEventStepDetail? GetEventStepDetail(int key,string tag="") => EventStepDetailVisitor.Get(key,tag);
		public static List<rawEventStepDetail> GetEventStepDetailByFilter(Func<rawEventStepDetail, bool> filterFunc,string tag="") => EventStepDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventStepDetail? GetOneEventStepDetailByFilter(Func<rawEventStepDetail, bool> filterFunc,string tag="") => EventStepDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventStepDetail
	#region EventStepTask
		public static int GetCountEventStepTaskMap(string tag="") => EventStepTaskVisitor.GetCount(tag);
		public static string GetFileNameEventStepTaskMap() => EventStepTaskVisitor.GetFileName();
		public static List<int> SortedKeysEventStepTaskMap(string tag="") => EventStepTaskVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventStepTask> GetEventStepTaskMap(string tag="") => EventStepTaskVisitor.All(tag);
		public static void RangeEventStepTaskMap(Action<int, rawEventStepTask> filter,string tag="") => EventStepTaskVisitor.Range(filter,tag);
		public static List<int> KeysEventStepTaskMap(string tag="") => EventStepTaskVisitor.Keys(tag);
		public static rawEventStepTask? GetEventStepTask(int key,string tag="") => EventStepTaskVisitor.Get(key,tag);
		public static List<rawEventStepTask> GetEventStepTaskByFilter(Func<rawEventStepTask, bool> filterFunc,string tag="") => EventStepTaskVisitor.GetByFilter(filterFunc,tag);
		public static rawEventStepTask? GetOneEventStepTaskByFilter(Func<rawEventStepTask, bool> filterFunc,string tag="") => EventStepTaskVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventStepTask
	#region EventSurvey
		public static int GetCountEventSurveyMap(string tag="") => EventSurveyVisitor.GetCount(tag);
		public static string GetFileNameEventSurveyMap() => EventSurveyVisitor.GetFileName();
		public static List<int> SortedKeysEventSurveyMap(string tag="") => EventSurveyVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventSurvey> GetEventSurveyMap(string tag="") => EventSurveyVisitor.All(tag);
		public static void RangeEventSurveyMap(Action<int, rawEventSurvey> filter,string tag="") => EventSurveyVisitor.Range(filter,tag);
		public static List<int> KeysEventSurveyMap(string tag="") => EventSurveyVisitor.Keys(tag);
		public static rawEventSurvey? GetEventSurvey(int key,string tag="") => EventSurveyVisitor.Get(key,tag);
		public static List<rawEventSurvey> GetEventSurveyByFilter(Func<rawEventSurvey, bool> filterFunc,string tag="") => EventSurveyVisitor.GetByFilter(filterFunc,tag);
		public static rawEventSurvey? GetOneEventSurveyByFilter(Func<rawEventSurvey, bool> filterFunc,string tag="") => EventSurveyVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventSurvey
	#region EventTheme
		public static int GetCountEventThemeMap(string tag="") => EventThemeVisitor.GetCount(tag);
		public static string GetFileNameEventThemeMap() => EventThemeVisitor.GetFileName();
		public static List<int> SortedKeysEventThemeMap(string tag="") => EventThemeVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventTheme> GetEventThemeMap(string tag="") => EventThemeVisitor.All(tag);
		public static void RangeEventThemeMap(Action<int, rawEventTheme> filter,string tag="") => EventThemeVisitor.Range(filter,tag);
		public static List<int> KeysEventThemeMap(string tag="") => EventThemeVisitor.Keys(tag);
		public static rawEventTheme? GetEventTheme(int key,string tag="") => EventThemeVisitor.Get(key,tag);
		public static List<rawEventTheme> GetEventThemeByFilter(Func<rawEventTheme, bool> filterFunc,string tag="") => EventThemeVisitor.GetByFilter(filterFunc,tag);
		public static rawEventTheme? GetOneEventThemeByFilter(Func<rawEventTheme, bool> filterFunc,string tag="") => EventThemeVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventTheme
	#region EventThreeSign
		public static int GetCountEventThreeSignMap(string tag="") => EventThreeSignVisitor.GetCount(tag);
		public static string GetFileNameEventThreeSignMap() => EventThreeSignVisitor.GetFileName();
		public static List<int> SortedKeysEventThreeSignMap(string tag="") => EventThreeSignVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventThreeSign> GetEventThreeSignMap(string tag="") => EventThreeSignVisitor.All(tag);
		public static void RangeEventThreeSignMap(Action<int, rawEventThreeSign> filter,string tag="") => EventThreeSignVisitor.Range(filter,tag);
		public static List<int> KeysEventThreeSignMap(string tag="") => EventThreeSignVisitor.Keys(tag);
		public static rawEventThreeSign? GetEventThreeSign(int key,string tag="") => EventThreeSignVisitor.Get(key,tag);
		public static List<rawEventThreeSign> GetEventThreeSignByFilter(Func<rawEventThreeSign, bool> filterFunc,string tag="") => EventThreeSignVisitor.GetByFilter(filterFunc,tag);
		public static rawEventThreeSign? GetOneEventThreeSignByFilter(Func<rawEventThreeSign, bool> filterFunc,string tag="") => EventThreeSignVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventThreeSign
	#region EventThreeSignPool
		public static int GetCountEventThreeSignPoolMap(string tag="") => EventThreeSignPoolVisitor.GetCount(tag);
		public static string GetFileNameEventThreeSignPoolMap() => EventThreeSignPoolVisitor.GetFileName();
		public static List<int> SortedKeysEventThreeSignPoolMap(string tag="") => EventThreeSignPoolVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventThreeSignPool> GetEventThreeSignPoolMap(string tag="") => EventThreeSignPoolVisitor.All(tag);
		public static void RangeEventThreeSignPoolMap(Action<int, rawEventThreeSignPool> filter,string tag="") => EventThreeSignPoolVisitor.Range(filter,tag);
		public static List<int> KeysEventThreeSignPoolMap(string tag="") => EventThreeSignPoolVisitor.Keys(tag);
		public static rawEventThreeSignPool? GetEventThreeSignPool(int key,string tag="") => EventThreeSignPoolVisitor.Get(key,tag);
		public static List<rawEventThreeSignPool> GetEventThreeSignPoolByFilter(Func<rawEventThreeSignPool, bool> filterFunc,string tag="") => EventThreeSignPoolVisitor.GetByFilter(filterFunc,tag);
		public static rawEventThreeSignPool? GetOneEventThreeSignPoolByFilter(Func<rawEventThreeSignPool, bool> filterFunc,string tag="") => EventThreeSignPoolVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventThreeSignPool
	#region EventTime
		public static int GetCountEventTimeMap(string tag="") => EventTimeVisitor.GetCount(tag);
		public static string GetFileNameEventTimeMap() => EventTimeVisitor.GetFileName();
		public static List<int> SortedKeysEventTimeMap(string tag="") => EventTimeVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventTime> GetEventTimeMap(string tag="") => EventTimeVisitor.All(tag);
		public static void RangeEventTimeMap(Action<int, rawEventTime> filter,string tag="") => EventTimeVisitor.Range(filter,tag);
		public static List<int> KeysEventTimeMap(string tag="") => EventTimeVisitor.Keys(tag);
		public static rawEventTime? GetEventTime(int key,string tag="") => EventTimeVisitor.Get(key,tag);
		public static List<rawEventTime> GetEventTimeByFilter(Func<rawEventTime, bool> filterFunc,string tag="") => EventTimeVisitor.GetByFilter(filterFunc,tag);
		public static rawEventTime? GetOneEventTimeByFilter(Func<rawEventTime, bool> filterFunc,string tag="") => EventTimeVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventTime
	#region EventTrainMission
		public static int GetCountEventTrainMissionMap(string tag="") => EventTrainMissionVisitor.GetCount(tag);
		public static string GetFileNameEventTrainMissionMap() => EventTrainMissionVisitor.GetFileName();
		public static List<int> SortedKeysEventTrainMissionMap(string tag="") => EventTrainMissionVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventTrainMission> GetEventTrainMissionMap(string tag="") => EventTrainMissionVisitor.All(tag);
		public static void RangeEventTrainMissionMap(Action<int, rawEventTrainMission> filter,string tag="") => EventTrainMissionVisitor.Range(filter,tag);
		public static List<int> KeysEventTrainMissionMap(string tag="") => EventTrainMissionVisitor.Keys(tag);
		public static rawEventTrainMission? GetEventTrainMission(int key,string tag="") => EventTrainMissionVisitor.Get(key,tag);
		public static List<rawEventTrainMission> GetEventTrainMissionByFilter(Func<rawEventTrainMission, bool> filterFunc,string tag="") => EventTrainMissionVisitor.GetByFilter(filterFunc,tag);
		public static rawEventTrainMission? GetOneEventTrainMissionByFilter(Func<rawEventTrainMission, bool> filterFunc,string tag="") => EventTrainMissionVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventTrainMission
	#region EventTrainMissionDetail
		public static int GetCountEventTrainMissionDetailMap(string tag="") => EventTrainMissionDetailVisitor.GetCount(tag);
		public static string GetFileNameEventTrainMissionDetailMap() => EventTrainMissionDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventTrainMissionDetailMap(string tag="") => EventTrainMissionDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventTrainMissionDetail> GetEventTrainMissionDetailMap(string tag="") => EventTrainMissionDetailVisitor.All(tag);
		public static void RangeEventTrainMissionDetailMap(Action<int, rawEventTrainMissionDetail> filter,string tag="") => EventTrainMissionDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventTrainMissionDetailMap(string tag="") => EventTrainMissionDetailVisitor.Keys(tag);
		public static rawEventTrainMissionDetail? GetEventTrainMissionDetail(int key,string tag="") => EventTrainMissionDetailVisitor.Get(key,tag);
		public static List<rawEventTrainMissionDetail> GetEventTrainMissionDetailByFilter(Func<rawEventTrainMissionDetail, bool> filterFunc,string tag="") => EventTrainMissionDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventTrainMissionDetail? GetOneEventTrainMissionDetailByFilter(Func<rawEventTrainMissionDetail, bool> filterFunc,string tag="") => EventTrainMissionDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventTrainMissionDetail
	#region EventTrainMissionRound
		public static int GetCountEventTrainMissionRoundMap(string tag="") => EventTrainMissionRoundVisitor.GetCount(tag);
		public static string GetFileNameEventTrainMissionRoundMap() => EventTrainMissionRoundVisitor.GetFileName();
		public static List<int> SortedKeysEventTrainMissionRoundMap(string tag="") => EventTrainMissionRoundVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventTrainMissionRound> GetEventTrainMissionRoundMap(string tag="") => EventTrainMissionRoundVisitor.All(tag);
		public static void RangeEventTrainMissionRoundMap(Action<int, rawEventTrainMissionRound> filter,string tag="") => EventTrainMissionRoundVisitor.Range(filter,tag);
		public static List<int> KeysEventTrainMissionRoundMap(string tag="") => EventTrainMissionRoundVisitor.Keys(tag);
		public static rawEventTrainMissionRound? GetEventTrainMissionRound(int key,string tag="") => EventTrainMissionRoundVisitor.Get(key,tag);
		public static List<rawEventTrainMissionRound> GetEventTrainMissionRoundByFilter(Func<rawEventTrainMissionRound, bool> filterFunc,string tag="") => EventTrainMissionRoundVisitor.GetByFilter(filterFunc,tag);
		public static rawEventTrainMissionRound? GetOneEventTrainMissionRoundByFilter(Func<rawEventTrainMissionRound, bool> filterFunc,string tag="") => EventTrainMissionRoundVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventTrainMissionRound
	#region EventTreasure
		public static int GetCountEventTreasureMap(string tag="") => EventTreasureVisitor.GetCount(tag);
		public static string GetFileNameEventTreasureMap() => EventTreasureVisitor.GetFileName();
		public static List<int> SortedKeysEventTreasureMap(string tag="") => EventTreasureVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventTreasure> GetEventTreasureMap(string tag="") => EventTreasureVisitor.All(tag);
		public static void RangeEventTreasureMap(Action<int, rawEventTreasure> filter,string tag="") => EventTreasureVisitor.Range(filter,tag);
		public static List<int> KeysEventTreasureMap(string tag="") => EventTreasureVisitor.Keys(tag);
		public static rawEventTreasure? GetEventTreasure(int key,string tag="") => EventTreasureVisitor.Get(key,tag);
		public static List<rawEventTreasure> GetEventTreasureByFilter(Func<rawEventTreasure, bool> filterFunc,string tag="") => EventTreasureVisitor.GetByFilter(filterFunc,tag);
		public static rawEventTreasure? GetOneEventTreasureByFilter(Func<rawEventTreasure, bool> filterFunc,string tag="") => EventTreasureVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventTreasure
	#region EventTreasureGroup
		public static int GetCountEventTreasureGroupMap(string tag="") => EventTreasureGroupVisitor.GetCount(tag);
		public static string GetFileNameEventTreasureGroupMap() => EventTreasureGroupVisitor.GetFileName();
		public static List<int> SortedKeysEventTreasureGroupMap(string tag="") => EventTreasureGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventTreasureGroup> GetEventTreasureGroupMap(string tag="") => EventTreasureGroupVisitor.All(tag);
		public static void RangeEventTreasureGroupMap(Action<int, rawEventTreasureGroup> filter,string tag="") => EventTreasureGroupVisitor.Range(filter,tag);
		public static List<int> KeysEventTreasureGroupMap(string tag="") => EventTreasureGroupVisitor.Keys(tag);
		public static rawEventTreasureGroup? GetEventTreasureGroup(int key,string tag="") => EventTreasureGroupVisitor.Get(key,tag);
		public static List<rawEventTreasureGroup> GetEventTreasureGroupByFilter(Func<rawEventTreasureGroup, bool> filterFunc,string tag="") => EventTreasureGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawEventTreasureGroup? GetOneEventTreasureGroupByFilter(Func<rawEventTreasureGroup, bool> filterFunc,string tag="") => EventTreasureGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventTreasureGroup
	#region EventTreasureGroupDetail
		public static int GetCountEventTreasureGroupDetailMap(string tag="") => EventTreasureGroupDetailVisitor.GetCount(tag);
		public static string GetFileNameEventTreasureGroupDetailMap() => EventTreasureGroupDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventTreasureGroupDetailMap(string tag="") => EventTreasureGroupDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventTreasureGroupDetail> GetEventTreasureGroupDetailMap(string tag="") => EventTreasureGroupDetailVisitor.All(tag);
		public static void RangeEventTreasureGroupDetailMap(Action<int, rawEventTreasureGroupDetail> filter,string tag="") => EventTreasureGroupDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventTreasureGroupDetailMap(string tag="") => EventTreasureGroupDetailVisitor.Keys(tag);
		public static rawEventTreasureGroupDetail? GetEventTreasureGroupDetail(int key,string tag="") => EventTreasureGroupDetailVisitor.Get(key,tag);
		public static List<rawEventTreasureGroupDetail> GetEventTreasureGroupDetailByFilter(Func<rawEventTreasureGroupDetail, bool> filterFunc,string tag="") => EventTreasureGroupDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventTreasureGroupDetail? GetOneEventTreasureGroupDetailByFilter(Func<rawEventTreasureGroupDetail, bool> filterFunc,string tag="") => EventTreasureGroupDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventTreasureGroupDetail
	#region EventTreasureLevel
		public static int GetCountEventTreasureLevelMap(string tag="") => EventTreasureLevelVisitor.GetCount(tag);
		public static string GetFileNameEventTreasureLevelMap() => EventTreasureLevelVisitor.GetFileName();
		public static List<int> SortedKeysEventTreasureLevelMap(string tag="") => EventTreasureLevelVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventTreasureLevel> GetEventTreasureLevelMap(string tag="") => EventTreasureLevelVisitor.All(tag);
		public static void RangeEventTreasureLevelMap(Action<int, rawEventTreasureLevel> filter,string tag="") => EventTreasureLevelVisitor.Range(filter,tag);
		public static List<int> KeysEventTreasureLevelMap(string tag="") => EventTreasureLevelVisitor.Keys(tag);
		public static rawEventTreasureLevel? GetEventTreasureLevel(int key,string tag="") => EventTreasureLevelVisitor.Get(key,tag);
		public static List<rawEventTreasureLevel> GetEventTreasureLevelByFilter(Func<rawEventTreasureLevel, bool> filterFunc,string tag="") => EventTreasureLevelVisitor.GetByFilter(filterFunc,tag);
		public static rawEventTreasureLevel? GetOneEventTreasureLevelByFilter(Func<rawEventTreasureLevel, bool> filterFunc,string tag="") => EventTreasureLevelVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventTreasureLevel
	#region EventTreasureReward
		public static int GetCountEventTreasureRewardMap(string tag="") => EventTreasureRewardVisitor.GetCount(tag);
		public static string GetFileNameEventTreasureRewardMap() => EventTreasureRewardVisitor.GetFileName();
		public static List<int> SortedKeysEventTreasureRewardMap(string tag="") => EventTreasureRewardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventTreasureReward> GetEventTreasureRewardMap(string tag="") => EventTreasureRewardVisitor.All(tag);
		public static void RangeEventTreasureRewardMap(Action<int, rawEventTreasureReward> filter,string tag="") => EventTreasureRewardVisitor.Range(filter,tag);
		public static List<int> KeysEventTreasureRewardMap(string tag="") => EventTreasureRewardVisitor.Keys(tag);
		public static rawEventTreasureReward? GetEventTreasureReward(int key,string tag="") => EventTreasureRewardVisitor.Get(key,tag);
		public static List<rawEventTreasureReward> GetEventTreasureRewardByFilter(Func<rawEventTreasureReward, bool> filterFunc,string tag="") => EventTreasureRewardVisitor.GetByFilter(filterFunc,tag);
		public static rawEventTreasureReward? GetOneEventTreasureRewardByFilter(Func<rawEventTreasureReward, bool> filterFunc,string tag="") => EventTreasureRewardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventTreasureReward
	#region EventTrigger
		public static int GetCountEventTriggerMap(string tag="") => EventTriggerVisitor.GetCount(tag);
		public static string GetFileNameEventTriggerMap() => EventTriggerVisitor.GetFileName();
		public static List<int> SortedKeysEventTriggerMap(string tag="") => EventTriggerVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventTrigger> GetEventTriggerMap(string tag="") => EventTriggerVisitor.All(tag);
		public static void RangeEventTriggerMap(Action<int, rawEventTrigger> filter,string tag="") => EventTriggerVisitor.Range(filter,tag);
		public static List<int> KeysEventTriggerMap(string tag="") => EventTriggerVisitor.Keys(tag);
		public static rawEventTrigger? GetEventTrigger(int key,string tag="") => EventTriggerVisitor.Get(key,tag);
		public static List<rawEventTrigger> GetEventTriggerByFilter(Func<rawEventTrigger, bool> filterFunc,string tag="") => EventTriggerVisitor.GetByFilter(filterFunc,tag);
		public static rawEventTrigger? GetOneEventTriggerByFilter(Func<rawEventTrigger, bool> filterFunc,string tag="") => EventTriggerVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventTrigger
	#region EventTypeInfo
		public static int GetCountEventTypeInfoSlice(string tag="") => EventTypeInfoVisitor.GetCount(tag);
		public static string GetFileNameEventTypeInfoSlice() => EventTypeInfoVisitor.GetFileName();
		public static PBC::RepeatedField<rawEventTypeInfo> GetEventTypeInfoSlice(string tag="") => EventTypeInfoVisitor.All(tag);
		public static void RangeEventTypeInfoSlice(Action<int, rawEventTypeInfo> filter,string tag="") => EventTypeInfoVisitor.Range(filter,tag);
		public static rawEventTypeInfo? GetEventTypeInfoByIndex(int index,string tag="") => EventTypeInfoVisitor.GetByIndex(index,tag);
		public static List<rawEventTypeInfo> GetEventTypeInfoByFilter(Func<rawEventTypeInfo, bool> filterFunc,string tag="") => EventTypeInfoVisitor.GetByFilter(filterFunc,tag);
		public static rawEventTypeInfo? GetOneEventTypeInfoByFilter(Func<rawEventTypeInfo, bool> filterFunc,string tag="") => EventTypeInfoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventTypeInfo
	#region EventVineLeap
		public static int GetCountEventVineLeapMap(string tag="") => EventVineLeapVisitor.GetCount(tag);
		public static string GetFileNameEventVineLeapMap() => EventVineLeapVisitor.GetFileName();
		public static List<int> SortedKeysEventVineLeapMap(string tag="") => EventVineLeapVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventVineLeap> GetEventVineLeapMap(string tag="") => EventVineLeapVisitor.All(tag);
		public static void RangeEventVineLeapMap(Action<int, rawEventVineLeap> filter,string tag="") => EventVineLeapVisitor.Range(filter,tag);
		public static List<int> KeysEventVineLeapMap(string tag="") => EventVineLeapVisitor.Keys(tag);
		public static rawEventVineLeap? GetEventVineLeap(int key,string tag="") => EventVineLeapVisitor.Get(key,tag);
		public static List<rawEventVineLeap> GetEventVineLeapByFilter(Func<rawEventVineLeap, bool> filterFunc,string tag="") => EventVineLeapVisitor.GetByFilter(filterFunc,tag);
		public static rawEventVineLeap? GetOneEventVineLeapByFilter(Func<rawEventVineLeap, bool> filterFunc,string tag="") => EventVineLeapVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventVineLeap
	#region EventVineLeapDiff
		public static int GetCountEventVineLeapDiffMap(string tag="") => EventVineLeapDiffVisitor.GetCount(tag);
		public static string GetFileNameEventVineLeapDiffMap() => EventVineLeapDiffVisitor.GetFileName();
		public static List<int> SortedKeysEventVineLeapDiffMap(string tag="") => EventVineLeapDiffVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventVineLeapDiff> GetEventVineLeapDiffMap(string tag="") => EventVineLeapDiffVisitor.All(tag);
		public static void RangeEventVineLeapDiffMap(Action<int, rawEventVineLeapDiff> filter,string tag="") => EventVineLeapDiffVisitor.Range(filter,tag);
		public static List<int> KeysEventVineLeapDiffMap(string tag="") => EventVineLeapDiffVisitor.Keys(tag);
		public static rawEventVineLeapDiff? GetEventVineLeapDiff(int key,string tag="") => EventVineLeapDiffVisitor.Get(key,tag);
		public static List<rawEventVineLeapDiff> GetEventVineLeapDiffByFilter(Func<rawEventVineLeapDiff, bool> filterFunc,string tag="") => EventVineLeapDiffVisitor.GetByFilter(filterFunc,tag);
		public static rawEventVineLeapDiff? GetOneEventVineLeapDiffByFilter(Func<rawEventVineLeapDiff, bool> filterFunc,string tag="") => EventVineLeapDiffVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventVineLeapDiff
	#region EventVineLeapGroup
		public static int GetCountEventVineLeapGroupMap(string tag="") => EventVineLeapGroupVisitor.GetCount(tag);
		public static string GetFileNameEventVineLeapGroupMap() => EventVineLeapGroupVisitor.GetFileName();
		public static List<int> SortedKeysEventVineLeapGroupMap(string tag="") => EventVineLeapGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventVineLeapGroup> GetEventVineLeapGroupMap(string tag="") => EventVineLeapGroupVisitor.All(tag);
		public static void RangeEventVineLeapGroupMap(Action<int, rawEventVineLeapGroup> filter,string tag="") => EventVineLeapGroupVisitor.Range(filter,tag);
		public static List<int> KeysEventVineLeapGroupMap(string tag="") => EventVineLeapGroupVisitor.Keys(tag);
		public static rawEventVineLeapGroup? GetEventVineLeapGroup(int key,string tag="") => EventVineLeapGroupVisitor.Get(key,tag);
		public static List<rawEventVineLeapGroup> GetEventVineLeapGroupByFilter(Func<rawEventVineLeapGroup, bool> filterFunc,string tag="") => EventVineLeapGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawEventVineLeapGroup? GetOneEventVineLeapGroupByFilter(Func<rawEventVineLeapGroup, bool> filterFunc,string tag="") => EventVineLeapGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventVineLeapGroup
	#region EventVineLeapLevel
		public static int GetCountEventVineLeapLevelMap(string tag="") => EventVineLeapLevelVisitor.GetCount(tag);
		public static string GetFileNameEventVineLeapLevelMap() => EventVineLeapLevelVisitor.GetFileName();
		public static List<int> SortedKeysEventVineLeapLevelMap(string tag="") => EventVineLeapLevelVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventVineLeapLevel> GetEventVineLeapLevelMap(string tag="") => EventVineLeapLevelVisitor.All(tag);
		public static void RangeEventVineLeapLevelMap(Action<int, rawEventVineLeapLevel> filter,string tag="") => EventVineLeapLevelVisitor.Range(filter,tag);
		public static List<int> KeysEventVineLeapLevelMap(string tag="") => EventVineLeapLevelVisitor.Keys(tag);
		public static rawEventVineLeapLevel? GetEventVineLeapLevel(int key,string tag="") => EventVineLeapLevelVisitor.Get(key,tag);
		public static List<rawEventVineLeapLevel> GetEventVineLeapLevelByFilter(Func<rawEventVineLeapLevel, bool> filterFunc,string tag="") => EventVineLeapLevelVisitor.GetByFilter(filterFunc,tag);
		public static rawEventVineLeapLevel? GetOneEventVineLeapLevelByFilter(Func<rawEventVineLeapLevel, bool> filterFunc,string tag="") => EventVineLeapLevelVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventVineLeapLevel
	#region EventVineLeapOut
		public static int GetCountEventVineLeapOutMap(string tag="") => EventVineLeapOutVisitor.GetCount(tag);
		public static string GetFileNameEventVineLeapOutMap() => EventVineLeapOutVisitor.GetFileName();
		public static List<int> SortedKeysEventVineLeapOutMap(string tag="") => EventVineLeapOutVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventVineLeapOut> GetEventVineLeapOutMap(string tag="") => EventVineLeapOutVisitor.All(tag);
		public static void RangeEventVineLeapOutMap(Action<int, rawEventVineLeapOut> filter,string tag="") => EventVineLeapOutVisitor.Range(filter,tag);
		public static List<int> KeysEventVineLeapOutMap(string tag="") => EventVineLeapOutVisitor.Keys(tag);
		public static rawEventVineLeapOut? GetEventVineLeapOut(int key,string tag="") => EventVineLeapOutVisitor.Get(key,tag);
		public static List<rawEventVineLeapOut> GetEventVineLeapOutByFilter(Func<rawEventVineLeapOut, bool> filterFunc,string tag="") => EventVineLeapOutVisitor.GetByFilter(filterFunc,tag);
		public static rawEventVineLeapOut? GetOneEventVineLeapOutByFilter(Func<rawEventVineLeapOut, bool> filterFunc,string tag="") => EventVineLeapOutVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventVineLeapOut
	#region EventVineLeapReward
		public static int GetCountEventVineLeapRewardMap(string tag="") => EventVineLeapRewardVisitor.GetCount(tag);
		public static string GetFileNameEventVineLeapRewardMap() => EventVineLeapRewardVisitor.GetFileName();
		public static List<int> SortedKeysEventVineLeapRewardMap(string tag="") => EventVineLeapRewardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventVineLeapReward> GetEventVineLeapRewardMap(string tag="") => EventVineLeapRewardVisitor.All(tag);
		public static void RangeEventVineLeapRewardMap(Action<int, rawEventVineLeapReward> filter,string tag="") => EventVineLeapRewardVisitor.Range(filter,tag);
		public static List<int> KeysEventVineLeapRewardMap(string tag="") => EventVineLeapRewardVisitor.Keys(tag);
		public static rawEventVineLeapReward? GetEventVineLeapReward(int key,string tag="") => EventVineLeapRewardVisitor.Get(key,tag);
		public static List<rawEventVineLeapReward> GetEventVineLeapRewardByFilter(Func<rawEventVineLeapReward, bool> filterFunc,string tag="") => EventVineLeapRewardVisitor.GetByFilter(filterFunc,tag);
		public static rawEventVineLeapReward? GetOneEventVineLeapRewardByFilter(Func<rawEventVineLeapReward, bool> filterFunc,string tag="") => EventVineLeapRewardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventVineLeapReward
	#region EventWeeklyRaffle
		public static int GetCountEventWeeklyRaffleMap(string tag="") => EventWeeklyRaffleVisitor.GetCount(tag);
		public static string GetFileNameEventWeeklyRaffleMap() => EventWeeklyRaffleVisitor.GetFileName();
		public static List<int> SortedKeysEventWeeklyRaffleMap(string tag="") => EventWeeklyRaffleVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWeeklyRaffle> GetEventWeeklyRaffleMap(string tag="") => EventWeeklyRaffleVisitor.All(tag);
		public static void RangeEventWeeklyRaffleMap(Action<int, rawEventWeeklyRaffle> filter,string tag="") => EventWeeklyRaffleVisitor.Range(filter,tag);
		public static List<int> KeysEventWeeklyRaffleMap(string tag="") => EventWeeklyRaffleVisitor.Keys(tag);
		public static rawEventWeeklyRaffle? GetEventWeeklyRaffle(int key,string tag="") => EventWeeklyRaffleVisitor.Get(key,tag);
		public static List<rawEventWeeklyRaffle> GetEventWeeklyRaffleByFilter(Func<rawEventWeeklyRaffle, bool> filterFunc,string tag="") => EventWeeklyRaffleVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWeeklyRaffle? GetOneEventWeeklyRaffleByFilter(Func<rawEventWeeklyRaffle, bool> filterFunc,string tag="") => EventWeeklyRaffleVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWeeklyRaffle
	#region EventWeeklyRaffleDetail
		public static int GetCountEventWeeklyRaffleDetailMap(string tag="") => EventWeeklyRaffleDetailVisitor.GetCount(tag);
		public static string GetFileNameEventWeeklyRaffleDetailMap() => EventWeeklyRaffleDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventWeeklyRaffleDetailMap(string tag="") => EventWeeklyRaffleDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWeeklyRaffleDetail> GetEventWeeklyRaffleDetailMap(string tag="") => EventWeeklyRaffleDetailVisitor.All(tag);
		public static void RangeEventWeeklyRaffleDetailMap(Action<int, rawEventWeeklyRaffleDetail> filter,string tag="") => EventWeeklyRaffleDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventWeeklyRaffleDetailMap(string tag="") => EventWeeklyRaffleDetailVisitor.Keys(tag);
		public static rawEventWeeklyRaffleDetail? GetEventWeeklyRaffleDetail(int key,string tag="") => EventWeeklyRaffleDetailVisitor.Get(key,tag);
		public static List<rawEventWeeklyRaffleDetail> GetEventWeeklyRaffleDetailByFilter(Func<rawEventWeeklyRaffleDetail, bool> filterFunc,string tag="") => EventWeeklyRaffleDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWeeklyRaffleDetail? GetOneEventWeeklyRaffleDetailByFilter(Func<rawEventWeeklyRaffleDetail, bool> filterFunc,string tag="") => EventWeeklyRaffleDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWeeklyRaffleDetail
	#region EventWeeklyRaffleGrp
		public static int GetCountEventWeeklyRaffleGrpMap(string tag="") => EventWeeklyRaffleGrpVisitor.GetCount(tag);
		public static string GetFileNameEventWeeklyRaffleGrpMap() => EventWeeklyRaffleGrpVisitor.GetFileName();
		public static List<int> SortedKeysEventWeeklyRaffleGrpMap(string tag="") => EventWeeklyRaffleGrpVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWeeklyRaffleGrp> GetEventWeeklyRaffleGrpMap(string tag="") => EventWeeklyRaffleGrpVisitor.All(tag);
		public static void RangeEventWeeklyRaffleGrpMap(Action<int, rawEventWeeklyRaffleGrp> filter,string tag="") => EventWeeklyRaffleGrpVisitor.Range(filter,tag);
		public static List<int> KeysEventWeeklyRaffleGrpMap(string tag="") => EventWeeklyRaffleGrpVisitor.Keys(tag);
		public static rawEventWeeklyRaffleGrp? GetEventWeeklyRaffleGrp(int key,string tag="") => EventWeeklyRaffleGrpVisitor.Get(key,tag);
		public static List<rawEventWeeklyRaffleGrp> GetEventWeeklyRaffleGrpByFilter(Func<rawEventWeeklyRaffleGrp, bool> filterFunc,string tag="") => EventWeeklyRaffleGrpVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWeeklyRaffleGrp? GetOneEventWeeklyRaffleGrpByFilter(Func<rawEventWeeklyRaffleGrp, bool> filterFunc,string tag="") => EventWeeklyRaffleGrpVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWeeklyRaffleGrp
	#region EventWeeklyRaffleReward
		public static int GetCountEventWeeklyRaffleRewardMap(string tag="") => EventWeeklyRaffleRewardVisitor.GetCount(tag);
		public static string GetFileNameEventWeeklyRaffleRewardMap() => EventWeeklyRaffleRewardVisitor.GetFileName();
		public static List<int> SortedKeysEventWeeklyRaffleRewardMap(string tag="") => EventWeeklyRaffleRewardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWeeklyRaffleReward> GetEventWeeklyRaffleRewardMap(string tag="") => EventWeeklyRaffleRewardVisitor.All(tag);
		public static void RangeEventWeeklyRaffleRewardMap(Action<int, rawEventWeeklyRaffleReward> filter,string tag="") => EventWeeklyRaffleRewardVisitor.Range(filter,tag);
		public static List<int> KeysEventWeeklyRaffleRewardMap(string tag="") => EventWeeklyRaffleRewardVisitor.Keys(tag);
		public static rawEventWeeklyRaffleReward? GetEventWeeklyRaffleReward(int key,string tag="") => EventWeeklyRaffleRewardVisitor.Get(key,tag);
		public static List<rawEventWeeklyRaffleReward> GetEventWeeklyRaffleRewardByFilter(Func<rawEventWeeklyRaffleReward, bool> filterFunc,string tag="") => EventWeeklyRaffleRewardVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWeeklyRaffleReward? GetOneEventWeeklyRaffleRewardByFilter(Func<rawEventWeeklyRaffleReward, bool> filterFunc,string tag="") => EventWeeklyRaffleRewardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWeeklyRaffleReward
	#region EventWeeklyTask
		public static int GetCountEventWeeklyTaskMap(string tag="") => EventWeeklyTaskVisitor.GetCount(tag);
		public static string GetFileNameEventWeeklyTaskMap() => EventWeeklyTaskVisitor.GetFileName();
		public static List<int> SortedKeysEventWeeklyTaskMap(string tag="") => EventWeeklyTaskVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWeeklyTask> GetEventWeeklyTaskMap(string tag="") => EventWeeklyTaskVisitor.All(tag);
		public static void RangeEventWeeklyTaskMap(Action<int, rawEventWeeklyTask> filter,string tag="") => EventWeeklyTaskVisitor.Range(filter,tag);
		public static List<int> KeysEventWeeklyTaskMap(string tag="") => EventWeeklyTaskVisitor.Keys(tag);
		public static rawEventWeeklyTask? GetEventWeeklyTask(int key,string tag="") => EventWeeklyTaskVisitor.Get(key,tag);
		public static List<rawEventWeeklyTask> GetEventWeeklyTaskByFilter(Func<rawEventWeeklyTask, bool> filterFunc,string tag="") => EventWeeklyTaskVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWeeklyTask? GetOneEventWeeklyTaskByFilter(Func<rawEventWeeklyTask, bool> filterFunc,string tag="") => EventWeeklyTaskVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWeeklyTask
	#region EventWeeklyTaskDetail
		public static int GetCountEventWeeklyTaskDetailMap(string tag="") => EventWeeklyTaskDetailVisitor.GetCount(tag);
		public static string GetFileNameEventWeeklyTaskDetailMap() => EventWeeklyTaskDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventWeeklyTaskDetailMap(string tag="") => EventWeeklyTaskDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWeeklyTaskDetail> GetEventWeeklyTaskDetailMap(string tag="") => EventWeeklyTaskDetailVisitor.All(tag);
		public static void RangeEventWeeklyTaskDetailMap(Action<int, rawEventWeeklyTaskDetail> filter,string tag="") => EventWeeklyTaskDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventWeeklyTaskDetailMap(string tag="") => EventWeeklyTaskDetailVisitor.Keys(tag);
		public static rawEventWeeklyTaskDetail? GetEventWeeklyTaskDetail(int key,string tag="") => EventWeeklyTaskDetailVisitor.Get(key,tag);
		public static List<rawEventWeeklyTaskDetail> GetEventWeeklyTaskDetailByFilter(Func<rawEventWeeklyTaskDetail, bool> filterFunc,string tag="") => EventWeeklyTaskDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWeeklyTaskDetail? GetOneEventWeeklyTaskDetailByFilter(Func<rawEventWeeklyTaskDetail, bool> filterFunc,string tag="") => EventWeeklyTaskDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWeeklyTaskDetail
	#region EventWeeklyTaskGrp
		public static int GetCountEventWeeklyTaskGrpMap(string tag="") => EventWeeklyTaskGrpVisitor.GetCount(tag);
		public static string GetFileNameEventWeeklyTaskGrpMap() => EventWeeklyTaskGrpVisitor.GetFileName();
		public static List<int> SortedKeysEventWeeklyTaskGrpMap(string tag="") => EventWeeklyTaskGrpVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWeeklyTaskGrp> GetEventWeeklyTaskGrpMap(string tag="") => EventWeeklyTaskGrpVisitor.All(tag);
		public static void RangeEventWeeklyTaskGrpMap(Action<int, rawEventWeeklyTaskGrp> filter,string tag="") => EventWeeklyTaskGrpVisitor.Range(filter,tag);
		public static List<int> KeysEventWeeklyTaskGrpMap(string tag="") => EventWeeklyTaskGrpVisitor.Keys(tag);
		public static rawEventWeeklyTaskGrp? GetEventWeeklyTaskGrp(int key,string tag="") => EventWeeklyTaskGrpVisitor.Get(key,tag);
		public static List<rawEventWeeklyTaskGrp> GetEventWeeklyTaskGrpByFilter(Func<rawEventWeeklyTaskGrp, bool> filterFunc,string tag="") => EventWeeklyTaskGrpVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWeeklyTaskGrp? GetOneEventWeeklyTaskGrpByFilter(Func<rawEventWeeklyTaskGrp, bool> filterFunc,string tag="") => EventWeeklyTaskGrpVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWeeklyTaskGrp
	#region EventWeeklyTaskInfo
		public static int GetCountEventWeeklyTaskInfoMap(string tag="") => EventWeeklyTaskInfoVisitor.GetCount(tag);
		public static string GetFileNameEventWeeklyTaskInfoMap() => EventWeeklyTaskInfoVisitor.GetFileName();
		public static List<int> SortedKeysEventWeeklyTaskInfoMap(string tag="") => EventWeeklyTaskInfoVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWeeklyTaskInfo> GetEventWeeklyTaskInfoMap(string tag="") => EventWeeklyTaskInfoVisitor.All(tag);
		public static void RangeEventWeeklyTaskInfoMap(Action<int, rawEventWeeklyTaskInfo> filter,string tag="") => EventWeeklyTaskInfoVisitor.Range(filter,tag);
		public static List<int> KeysEventWeeklyTaskInfoMap(string tag="") => EventWeeklyTaskInfoVisitor.Keys(tag);
		public static rawEventWeeklyTaskInfo? GetEventWeeklyTaskInfo(int key,string tag="") => EventWeeklyTaskInfoVisitor.Get(key,tag);
		public static List<rawEventWeeklyTaskInfo> GetEventWeeklyTaskInfoByFilter(Func<rawEventWeeklyTaskInfo, bool> filterFunc,string tag="") => EventWeeklyTaskInfoVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWeeklyTaskInfo? GetOneEventWeeklyTaskInfoByFilter(Func<rawEventWeeklyTaskInfo, bool> filterFunc,string tag="") => EventWeeklyTaskInfoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWeeklyTaskInfo
	#region EventWishBarReward
		public static int GetCountEventWishBarRewardMap(string tag="") => EventWishBarRewardVisitor.GetCount(tag);
		public static string GetFileNameEventWishBarRewardMap() => EventWishBarRewardVisitor.GetFileName();
		public static List<int> SortedKeysEventWishBarRewardMap(string tag="") => EventWishBarRewardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWishBarReward> GetEventWishBarRewardMap(string tag="") => EventWishBarRewardVisitor.All(tag);
		public static void RangeEventWishBarRewardMap(Action<int, rawEventWishBarReward> filter,string tag="") => EventWishBarRewardVisitor.Range(filter,tag);
		public static List<int> KeysEventWishBarRewardMap(string tag="") => EventWishBarRewardVisitor.Keys(tag);
		public static rawEventWishBarReward? GetEventWishBarReward(int key,string tag="") => EventWishBarRewardVisitor.Get(key,tag);
		public static List<rawEventWishBarReward> GetEventWishBarRewardByFilter(Func<rawEventWishBarReward, bool> filterFunc,string tag="") => EventWishBarRewardVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWishBarReward? GetOneEventWishBarRewardByFilter(Func<rawEventWishBarReward, bool> filterFunc,string tag="") => EventWishBarRewardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWishBarReward
	#region EventWishBoard
		public static int GetCountEventWishBoardMap(string tag="") => EventWishBoardVisitor.GetCount(tag);
		public static string GetFileNameEventWishBoardMap() => EventWishBoardVisitor.GetFileName();
		public static List<int> SortedKeysEventWishBoardMap(string tag="") => EventWishBoardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWishBoard> GetEventWishBoardMap(string tag="") => EventWishBoardVisitor.All(tag);
		public static void RangeEventWishBoardMap(Action<int, rawEventWishBoard> filter,string tag="") => EventWishBoardVisitor.Range(filter,tag);
		public static List<int> KeysEventWishBoardMap(string tag="") => EventWishBoardVisitor.Keys(tag);
		public static rawEventWishBoard? GetEventWishBoard(int key,string tag="") => EventWishBoardVisitor.Get(key,tag);
		public static List<rawEventWishBoard> GetEventWishBoardByFilter(Func<rawEventWishBoard, bool> filterFunc,string tag="") => EventWishBoardVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWishBoard? GetOneEventWishBoardByFilter(Func<rawEventWishBoard, bool> filterFunc,string tag="") => EventWishBoardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWishBoard
	#region EventWishBoardDetail
		public static int GetCountEventWishBoardDetailMap(string tag="") => EventWishBoardDetailVisitor.GetCount(tag);
		public static string GetFileNameEventWishBoardDetailMap() => EventWishBoardDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventWishBoardDetailMap(string tag="") => EventWishBoardDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWishBoardDetail> GetEventWishBoardDetailMap(string tag="") => EventWishBoardDetailVisitor.All(tag);
		public static void RangeEventWishBoardDetailMap(Action<int, rawEventWishBoardDetail> filter,string tag="") => EventWishBoardDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventWishBoardDetailMap(string tag="") => EventWishBoardDetailVisitor.Keys(tag);
		public static rawEventWishBoardDetail? GetEventWishBoardDetail(int key,string tag="") => EventWishBoardDetailVisitor.Get(key,tag);
		public static List<rawEventWishBoardDetail> GetEventWishBoardDetailByFilter(Func<rawEventWishBoardDetail, bool> filterFunc,string tag="") => EventWishBoardDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWishBoardDetail? GetOneEventWishBoardDetailByFilter(Func<rawEventWishBoardDetail, bool> filterFunc,string tag="") => EventWishBoardDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWishBoardDetail
	#region EventWishBoardGroup
		public static int GetCountEventWishBoardGroupMap(string tag="") => EventWishBoardGroupVisitor.GetCount(tag);
		public static string GetFileNameEventWishBoardGroupMap() => EventWishBoardGroupVisitor.GetFileName();
		public static List<int> SortedKeysEventWishBoardGroupMap(string tag="") => EventWishBoardGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWishBoardGroup> GetEventWishBoardGroupMap(string tag="") => EventWishBoardGroupVisitor.All(tag);
		public static void RangeEventWishBoardGroupMap(Action<int, rawEventWishBoardGroup> filter,string tag="") => EventWishBoardGroupVisitor.Range(filter,tag);
		public static List<int> KeysEventWishBoardGroupMap(string tag="") => EventWishBoardGroupVisitor.Keys(tag);
		public static rawEventWishBoardGroup? GetEventWishBoardGroup(int key,string tag="") => EventWishBoardGroupVisitor.Get(key,tag);
		public static List<rawEventWishBoardGroup> GetEventWishBoardGroupByFilter(Func<rawEventWishBoardGroup, bool> filterFunc,string tag="") => EventWishBoardGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWishBoardGroup? GetOneEventWishBoardGroupByFilter(Func<rawEventWishBoardGroup, bool> filterFunc,string tag="") => EventWishBoardGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWishBoardGroup
	#region EventWishDrop
		public static int GetCountEventWishDropMap(string tag="") => EventWishDropVisitor.GetCount(tag);
		public static string GetFileNameEventWishDropMap() => EventWishDropVisitor.GetFileName();
		public static List<int> SortedKeysEventWishDropMap(string tag="") => EventWishDropVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWishDrop> GetEventWishDropMap(string tag="") => EventWishDropVisitor.All(tag);
		public static void RangeEventWishDropMap(Action<int, rawEventWishDrop> filter,string tag="") => EventWishDropVisitor.Range(filter,tag);
		public static List<int> KeysEventWishDropMap(string tag="") => EventWishDropVisitor.Keys(tag);
		public static rawEventWishDrop? GetEventWishDrop(int key,string tag="") => EventWishDropVisitor.Get(key,tag);
		public static List<rawEventWishDrop> GetEventWishDropByFilter(Func<rawEventWishDrop, bool> filterFunc,string tag="") => EventWishDropVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWishDrop? GetOneEventWishDropByFilter(Func<rawEventWishDrop, bool> filterFunc,string tag="") => EventWishDropVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWishDrop
	#region EventWishEndless
		public static int GetCountEventWishEndlessMap(string tag="") => EventWishEndlessVisitor.GetCount(tag);
		public static string GetFileNameEventWishEndlessMap() => EventWishEndlessVisitor.GetFileName();
		public static List<int> SortedKeysEventWishEndlessMap(string tag="") => EventWishEndlessVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWishEndless> GetEventWishEndlessMap(string tag="") => EventWishEndlessVisitor.All(tag);
		public static void RangeEventWishEndlessMap(Action<int, rawEventWishEndless> filter,string tag="") => EventWishEndlessVisitor.Range(filter,tag);
		public static List<int> KeysEventWishEndlessMap(string tag="") => EventWishEndlessVisitor.Keys(tag);
		public static rawEventWishEndless? GetEventWishEndless(int key,string tag="") => EventWishEndlessVisitor.Get(key,tag);
		public static List<rawEventWishEndless> GetEventWishEndlessByFilter(Func<rawEventWishEndless, bool> filterFunc,string tag="") => EventWishEndlessVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWishEndless? GetOneEventWishEndlessByFilter(Func<rawEventWishEndless, bool> filterFunc,string tag="") => EventWishEndlessVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWishEndless
	#region EventWishEndlessInfo
		public static int GetCountEventWishEndlessInfoMap(string tag="") => EventWishEndlessInfoVisitor.GetCount(tag);
		public static string GetFileNameEventWishEndlessInfoMap() => EventWishEndlessInfoVisitor.GetFileName();
		public static List<int> SortedKeysEventWishEndlessInfoMap(string tag="") => EventWishEndlessInfoVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWishEndlessInfo> GetEventWishEndlessInfoMap(string tag="") => EventWishEndlessInfoVisitor.All(tag);
		public static void RangeEventWishEndlessInfoMap(Action<int, rawEventWishEndlessInfo> filter,string tag="") => EventWishEndlessInfoVisitor.Range(filter,tag);
		public static List<int> KeysEventWishEndlessInfoMap(string tag="") => EventWishEndlessInfoVisitor.Keys(tag);
		public static rawEventWishEndlessInfo? GetEventWishEndlessInfo(int key,string tag="") => EventWishEndlessInfoVisitor.Get(key,tag);
		public static List<rawEventWishEndlessInfo> GetEventWishEndlessInfoByFilter(Func<rawEventWishEndlessInfo, bool> filterFunc,string tag="") => EventWishEndlessInfoVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWishEndlessInfo? GetOneEventWishEndlessInfoByFilter(Func<rawEventWishEndlessInfo, bool> filterFunc,string tag="") => EventWishEndlessInfoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWishEndlessInfo
	#region EventWishKey
		public static int GetCountEventWishKeyMap(string tag="") => EventWishKeyVisitor.GetCount(tag);
		public static string GetFileNameEventWishKeyMap() => EventWishKeyVisitor.GetFileName();
		public static List<int> SortedKeysEventWishKeyMap(string tag="") => EventWishKeyVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWishKey> GetEventWishKeyMap(string tag="") => EventWishKeyVisitor.All(tag);
		public static void RangeEventWishKeyMap(Action<int, rawEventWishKey> filter,string tag="") => EventWishKeyVisitor.Range(filter,tag);
		public static List<int> KeysEventWishKeyMap(string tag="") => EventWishKeyVisitor.Keys(tag);
		public static rawEventWishKey? GetEventWishKey(int key,string tag="") => EventWishKeyVisitor.Get(key,tag);
		public static List<rawEventWishKey> GetEventWishKeyByFilter(Func<rawEventWishKey, bool> filterFunc,string tag="") => EventWishKeyVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWishKey? GetOneEventWishKeyByFilter(Func<rawEventWishKey, bool> filterFunc,string tag="") => EventWishKeyVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWishKey
	#region EventWishMilestone
		public static int GetCountEventWishMilestoneMap(string tag="") => EventWishMilestoneVisitor.GetCount(tag);
		public static string GetFileNameEventWishMilestoneMap() => EventWishMilestoneVisitor.GetFileName();
		public static List<int> SortedKeysEventWishMilestoneMap(string tag="") => EventWishMilestoneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWishMilestone> GetEventWishMilestoneMap(string tag="") => EventWishMilestoneVisitor.All(tag);
		public static void RangeEventWishMilestoneMap(Action<int, rawEventWishMilestone> filter,string tag="") => EventWishMilestoneVisitor.Range(filter,tag);
		public static List<int> KeysEventWishMilestoneMap(string tag="") => EventWishMilestoneVisitor.Keys(tag);
		public static rawEventWishMilestone? GetEventWishMilestone(int key,string tag="") => EventWishMilestoneVisitor.Get(key,tag);
		public static List<rawEventWishMilestone> GetEventWishMilestoneByFilter(Func<rawEventWishMilestone, bool> filterFunc,string tag="") => EventWishMilestoneVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWishMilestone? GetOneEventWishMilestoneByFilter(Func<rawEventWishMilestone, bool> filterFunc,string tag="") => EventWishMilestoneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWishMilestone
	#region EventWishOrderItem
		public static int GetCountEventWishOrderItemMap(string tag="") => EventWishOrderItemVisitor.GetCount(tag);
		public static string GetFileNameEventWishOrderItemMap() => EventWishOrderItemVisitor.GetFileName();
		public static List<int> SortedKeysEventWishOrderItemMap(string tag="") => EventWishOrderItemVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWishOrderItem> GetEventWishOrderItemMap(string tag="") => EventWishOrderItemVisitor.All(tag);
		public static void RangeEventWishOrderItemMap(Action<int, rawEventWishOrderItem> filter,string tag="") => EventWishOrderItemVisitor.Range(filter,tag);
		public static List<int> KeysEventWishOrderItemMap(string tag="") => EventWishOrderItemVisitor.Keys(tag);
		public static rawEventWishOrderItem? GetEventWishOrderItem(int key,string tag="") => EventWishOrderItemVisitor.Get(key,tag);
		public static List<rawEventWishOrderItem> GetEventWishOrderItemByFilter(Func<rawEventWishOrderItem, bool> filterFunc,string tag="") => EventWishOrderItemVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWishOrderItem? GetOneEventWishOrderItemByFilter(Func<rawEventWishOrderItem, bool> filterFunc,string tag="") => EventWishOrderItemVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWishOrderItem
	#region EventWishRow
		public static int GetCountEventWishRowMap(string tag="") => EventWishRowVisitor.GetCount(tag);
		public static string GetFileNameEventWishRowMap() => EventWishRowVisitor.GetFileName();
		public static List<int> SortedKeysEventWishRowMap(string tag="") => EventWishRowVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWishRow> GetEventWishRowMap(string tag="") => EventWishRowVisitor.All(tag);
		public static void RangeEventWishRowMap(Action<int, rawEventWishRow> filter,string tag="") => EventWishRowVisitor.Range(filter,tag);
		public static List<int> KeysEventWishRowMap(string tag="") => EventWishRowVisitor.Keys(tag);
		public static rawEventWishRow? GetEventWishRow(int key,string tag="") => EventWishRowVisitor.Get(key,tag);
		public static List<rawEventWishRow> GetEventWishRowByFilter(Func<rawEventWishRow, bool> filterFunc,string tag="") => EventWishRowVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWishRow? GetOneEventWishRowByFilter(Func<rawEventWishRow, bool> filterFunc,string tag="") => EventWishRowVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWishRow
	#region EventWishUpon
		public static int GetCountEventWishUponMap(string tag="") => EventWishUponVisitor.GetCount(tag);
		public static string GetFileNameEventWishUponMap() => EventWishUponVisitor.GetFileName();
		public static List<int> SortedKeysEventWishUponMap(string tag="") => EventWishUponVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWishUpon> GetEventWishUponMap(string tag="") => EventWishUponVisitor.All(tag);
		public static void RangeEventWishUponMap(Action<int, rawEventWishUpon> filter,string tag="") => EventWishUponVisitor.Range(filter,tag);
		public static List<int> KeysEventWishUponMap(string tag="") => EventWishUponVisitor.Keys(tag);
		public static rawEventWishUpon? GetEventWishUpon(int key,string tag="") => EventWishUponVisitor.Get(key,tag);
		public static List<rawEventWishUpon> GetEventWishUponByFilter(Func<rawEventWishUpon, bool> filterFunc,string tag="") => EventWishUponVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWishUpon? GetOneEventWishUponByFilter(Func<rawEventWishUpon, bool> filterFunc,string tag="") => EventWishUponVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWishUpon
	#region EventWishUponDetail
		public static int GetCountEventWishUponDetailMap(string tag="") => EventWishUponDetailVisitor.GetCount(tag);
		public static string GetFileNameEventWishUponDetailMap() => EventWishUponDetailVisitor.GetFileName();
		public static List<int> SortedKeysEventWishUponDetailMap(string tag="") => EventWishUponDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWishUponDetail> GetEventWishUponDetailMap(string tag="") => EventWishUponDetailVisitor.All(tag);
		public static void RangeEventWishUponDetailMap(Action<int, rawEventWishUponDetail> filter,string tag="") => EventWishUponDetailVisitor.Range(filter,tag);
		public static List<int> KeysEventWishUponDetailMap(string tag="") => EventWishUponDetailVisitor.Keys(tag);
		public static rawEventWishUponDetail? GetEventWishUponDetail(int key,string tag="") => EventWishUponDetailVisitor.Get(key,tag);
		public static List<rawEventWishUponDetail> GetEventWishUponDetailByFilter(Func<rawEventWishUponDetail, bool> filterFunc,string tag="") => EventWishUponDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWishUponDetail? GetOneEventWishUponDetailByFilter(Func<rawEventWishUponDetail, bool> filterFunc,string tag="") => EventWishUponDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWishUponDetail
	#region EventWishing
		public static int GetCountEventWishingMap(string tag="") => EventWishingVisitor.GetCount(tag);
		public static string GetFileNameEventWishingMap() => EventWishingVisitor.GetFileName();
		public static List<int> SortedKeysEventWishingMap(string tag="") => EventWishingVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWishing> GetEventWishingMap(string tag="") => EventWishingVisitor.All(tag);
		public static void RangeEventWishingMap(Action<int, rawEventWishing> filter,string tag="") => EventWishingVisitor.Range(filter,tag);
		public static List<int> KeysEventWishingMap(string tag="") => EventWishingVisitor.Keys(tag);
		public static rawEventWishing? GetEventWishing(int key,string tag="") => EventWishingVisitor.Get(key,tag);
		public static List<rawEventWishing> GetEventWishingByFilter(Func<rawEventWishing, bool> filterFunc,string tag="") => EventWishingVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWishing? GetOneEventWishingByFilter(Func<rawEventWishing, bool> filterFunc,string tag="") => EventWishingVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWishing
	#region EventWishingRecycle
		public static int GetCountEventWishingRecycleMap(string tag="") => EventWishingRecycleVisitor.GetCount(tag);
		public static string GetFileNameEventWishingRecycleMap() => EventWishingRecycleVisitor.GetFileName();
		public static List<int> SortedKeysEventWishingRecycleMap(string tag="") => EventWishingRecycleVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventWishingRecycle> GetEventWishingRecycleMap(string tag="") => EventWishingRecycleVisitor.All(tag);
		public static void RangeEventWishingRecycleMap(Action<int, rawEventWishingRecycle> filter,string tag="") => EventWishingRecycleVisitor.Range(filter,tag);
		public static List<int> KeysEventWishingRecycleMap(string tag="") => EventWishingRecycleVisitor.Keys(tag);
		public static rawEventWishingRecycle? GetEventWishingRecycle(int key,string tag="") => EventWishingRecycleVisitor.Get(key,tag);
		public static List<rawEventWishingRecycle> GetEventWishingRecycleByFilter(Func<rawEventWishingRecycle, bool> filterFunc,string tag="") => EventWishingRecycleVisitor.GetByFilter(filterFunc,tag);
		public static rawEventWishingRecycle? GetOneEventWishingRecycleByFilter(Func<rawEventWishingRecycle, bool> filterFunc,string tag="") => EventWishingRecycleVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventWishingRecycle
	#region EventZeroQuest
		public static int GetCountEventZeroQuestMap(string tag="") => EventZeroQuestVisitor.GetCount(tag);
		public static string GetFileNameEventZeroQuestMap() => EventZeroQuestVisitor.GetFileName();
		public static List<int> SortedKeysEventZeroQuestMap(string tag="") => EventZeroQuestVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventZeroQuest> GetEventZeroQuestMap(string tag="") => EventZeroQuestVisitor.All(tag);
		public static void RangeEventZeroQuestMap(Action<int, rawEventZeroQuest> filter,string tag="") => EventZeroQuestVisitor.Range(filter,tag);
		public static List<int> KeysEventZeroQuestMap(string tag="") => EventZeroQuestVisitor.Keys(tag);
		public static rawEventZeroQuest? GetEventZeroQuest(int key,string tag="") => EventZeroQuestVisitor.Get(key,tag);
		public static List<rawEventZeroQuest> GetEventZeroQuestByFilter(Func<rawEventZeroQuest, bool> filterFunc,string tag="") => EventZeroQuestVisitor.GetByFilter(filterFunc,tag);
		public static rawEventZeroQuest? GetOneEventZeroQuestByFilter(Func<rawEventZeroQuest, bool> filterFunc,string tag="") => EventZeroQuestVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventZeroQuest
	#region EventZeroQuestGroup
		public static int GetCountEventZeroQuestGroupMap(string tag="") => EventZeroQuestGroupVisitor.GetCount(tag);
		public static string GetFileNameEventZeroQuestGroupMap() => EventZeroQuestGroupVisitor.GetFileName();
		public static List<int> SortedKeysEventZeroQuestGroupMap(string tag="") => EventZeroQuestGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventZeroQuestGroup> GetEventZeroQuestGroupMap(string tag="") => EventZeroQuestGroupVisitor.All(tag);
		public static void RangeEventZeroQuestGroupMap(Action<int, rawEventZeroQuestGroup> filter,string tag="") => EventZeroQuestGroupVisitor.Range(filter,tag);
		public static List<int> KeysEventZeroQuestGroupMap(string tag="") => EventZeroQuestGroupVisitor.Keys(tag);
		public static rawEventZeroQuestGroup? GetEventZeroQuestGroup(int key,string tag="") => EventZeroQuestGroupVisitor.Get(key,tag);
		public static List<rawEventZeroQuestGroup> GetEventZeroQuestGroupByFilter(Func<rawEventZeroQuestGroup, bool> filterFunc,string tag="") => EventZeroQuestGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawEventZeroQuestGroup? GetOneEventZeroQuestGroupByFilter(Func<rawEventZeroQuestGroup, bool> filterFunc,string tag="") => EventZeroQuestGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventZeroQuestGroup
	#region EventZeroQuestRandom
		public static int GetCountEventZeroQuestRandomMap(string tag="") => EventZeroQuestRandomVisitor.GetCount(tag);
		public static string GetFileNameEventZeroQuestRandomMap() => EventZeroQuestRandomVisitor.GetFileName();
		public static List<int> SortedKeysEventZeroQuestRandomMap(string tag="") => EventZeroQuestRandomVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawEventZeroQuestRandom> GetEventZeroQuestRandomMap(string tag="") => EventZeroQuestRandomVisitor.All(tag);
		public static void RangeEventZeroQuestRandomMap(Action<int, rawEventZeroQuestRandom> filter,string tag="") => EventZeroQuestRandomVisitor.Range(filter,tag);
		public static List<int> KeysEventZeroQuestRandomMap(string tag="") => EventZeroQuestRandomVisitor.Keys(tag);
		public static rawEventZeroQuestRandom? GetEventZeroQuestRandom(int key,string tag="") => EventZeroQuestRandomVisitor.Get(key,tag);
		public static List<rawEventZeroQuestRandom> GetEventZeroQuestRandomByFilter(Func<rawEventZeroQuestRandom, bool> filterFunc,string tag="") => EventZeroQuestRandomVisitor.GetByFilter(filterFunc,tag);
		public static rawEventZeroQuestRandom? GetOneEventZeroQuestRandomByFilter(Func<rawEventZeroQuestRandom, bool> filterFunc,string tag="") => EventZeroQuestRandomVisitor.GetOneByFilter(filterFunc,tag);
	#endregion EventZeroQuestRandom
	#region ExchangeCardWhitelist
		public static int GetCountExchangeCardWhitelistMap(string tag="") => ExchangeCardWhitelistVisitor.GetCount(tag);
		public static string GetFileNameExchangeCardWhitelistMap() => ExchangeCardWhitelistVisitor.GetFileName();
		public static List<string> SortedKeysExchangeCardWhitelistMap(string tag="") => ExchangeCardWhitelistVisitor.SortedKeys(tag);
		public static PBC::MapField<string, rawExchangeCardWhitelist> GetExchangeCardWhitelistMap(string tag="") => ExchangeCardWhitelistVisitor.All(tag);
		public static void RangeExchangeCardWhitelistMap(Action<string, rawExchangeCardWhitelist> filter,string tag="") => ExchangeCardWhitelistVisitor.Range(filter,tag);
		public static List<string> KeysExchangeCardWhitelistMap(string tag="") => ExchangeCardWhitelistVisitor.Keys(tag);
		public static rawExchangeCardWhitelist? GetExchangeCardWhitelist(string key,string tag="") => ExchangeCardWhitelistVisitor.Get(key,tag);
		public static List<rawExchangeCardWhitelist> GetExchangeCardWhitelistByFilter(Func<rawExchangeCardWhitelist, bool> filterFunc,string tag="") => ExchangeCardWhitelistVisitor.GetByFilter(filterFunc,tag);
		public static rawExchangeCardWhitelist? GetOneExchangeCardWhitelistByFilter(Func<rawExchangeCardWhitelist, bool> filterFunc,string tag="") => ExchangeCardWhitelistVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ExchangeCardWhitelist
	#region FaqConfig
		public static int GetCountFaqConfigMap(string tag="") => FaqConfigVisitor.GetCount(tag);
		public static string GetFileNameFaqConfigMap() => FaqConfigVisitor.GetFileName();
		public static List<int> SortedKeysFaqConfigMap(string tag="") => FaqConfigVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawFaqConfig> GetFaqConfigMap(string tag="") => FaqConfigVisitor.All(tag);
		public static void RangeFaqConfigMap(Action<int, rawFaqConfig> filter,string tag="") => FaqConfigVisitor.Range(filter,tag);
		public static List<int> KeysFaqConfigMap(string tag="") => FaqConfigVisitor.Keys(tag);
		public static rawFaqConfig? GetFaqConfig(int key,string tag="") => FaqConfigVisitor.Get(key,tag);
		public static List<rawFaqConfig> GetFaqConfigByFilter(Func<rawFaqConfig, bool> filterFunc,string tag="") => FaqConfigVisitor.GetByFilter(filterFunc,tag);
		public static rawFaqConfig? GetOneFaqConfigByFilter(Func<rawFaqConfig, bool> filterFunc,string tag="") => FaqConfigVisitor.GetOneByFilter(filterFunc,tag);
	#endregion FaqConfig
	#region FeatureUnlock
		public static int GetCountFeatureUnlockSlice(string tag="") => FeatureUnlockVisitor.GetCount(tag);
		public static string GetFileNameFeatureUnlockSlice() => FeatureUnlockVisitor.GetFileName();
		public static PBC::RepeatedField<rawFeatureUnlock> GetFeatureUnlockSlice(string tag="") => FeatureUnlockVisitor.All(tag);
		public static void RangeFeatureUnlockSlice(Action<int, rawFeatureUnlock> filter,string tag="") => FeatureUnlockVisitor.Range(filter,tag);
		public static rawFeatureUnlock? GetFeatureUnlockByIndex(int index,string tag="") => FeatureUnlockVisitor.GetByIndex(index,tag);
		public static List<rawFeatureUnlock> GetFeatureUnlockByFilter(Func<rawFeatureUnlock, bool> filterFunc,string tag="") => FeatureUnlockVisitor.GetByFilter(filterFunc,tag);
		public static rawFeatureUnlock? GetOneFeatureUnlockByFilter(Func<rawFeatureUnlock, bool> filterFunc,string tag="") => FeatureUnlockVisitor.GetOneByFilter(filterFunc,tag);
	#endregion FeatureUnlock
	#region FishInfo
		public static int GetCountFishInfoMap(string tag="") => FishInfoVisitor.GetCount(tag);
		public static string GetFileNameFishInfoMap() => FishInfoVisitor.GetFileName();
		public static List<int> SortedKeysFishInfoMap(string tag="") => FishInfoVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawFishInfo> GetFishInfoMap(string tag="") => FishInfoVisitor.All(tag);
		public static void RangeFishInfoMap(Action<int, rawFishInfo> filter,string tag="") => FishInfoVisitor.Range(filter,tag);
		public static List<int> KeysFishInfoMap(string tag="") => FishInfoVisitor.Keys(tag);
		public static rawFishInfo? GetFishInfo(int key,string tag="") => FishInfoVisitor.Get(key,tag);
		public static List<rawFishInfo> GetFishInfoByFilter(Func<rawFishInfo, bool> filterFunc,string tag="") => FishInfoVisitor.GetByFilter(filterFunc,tag);
		public static rawFishInfo? GetOneFishInfoByFilter(Func<rawFishInfo, bool> filterFunc,string tag="") => FishInfoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion FishInfo
	#region FishRarity
		public static int GetCountFishRarityMap(string tag="") => FishRarityVisitor.GetCount(tag);
		public static string GetFileNameFishRarityMap() => FishRarityVisitor.GetFileName();
		public static List<int> SortedKeysFishRarityMap(string tag="") => FishRarityVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawFishRarity> GetFishRarityMap(string tag="") => FishRarityVisitor.All(tag);
		public static void RangeFishRarityMap(Action<int, rawFishRarity> filter,string tag="") => FishRarityVisitor.Range(filter,tag);
		public static List<int> KeysFishRarityMap(string tag="") => FishRarityVisitor.Keys(tag);
		public static rawFishRarity? GetFishRarity(int key,string tag="") => FishRarityVisitor.Get(key,tag);
		public static List<rawFishRarity> GetFishRarityByFilter(Func<rawFishRarity, bool> filterFunc,string tag="") => FishRarityVisitor.GetByFilter(filterFunc,tag);
		public static rawFishRarity? GetOneFishRarityByFilter(Func<rawFishRarity, bool> filterFunc,string tag="") => FishRarityVisitor.GetOneByFilter(filterFunc,tag);
	#endregion FishRarity
	#region FrozenItem
		public static int GetCountFrozenItemMap(string tag="") => FrozenItemVisitor.GetCount(tag);
		public static string GetFileNameFrozenItemMap() => FrozenItemVisitor.GetFileName();
		public static List<int> SortedKeysFrozenItemMap(string tag="") => FrozenItemVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawFrozenItem> GetFrozenItemMap(string tag="") => FrozenItemVisitor.All(tag);
		public static void RangeFrozenItemMap(Action<int, rawFrozenItem> filter,string tag="") => FrozenItemVisitor.Range(filter,tag);
		public static List<int> KeysFrozenItemMap(string tag="") => FrozenItemVisitor.Keys(tag);
		public static rawFrozenItem? GetFrozenItem(int key,string tag="") => FrozenItemVisitor.Get(key,tag);
		public static List<rawFrozenItem> GetFrozenItemByFilter(Func<rawFrozenItem, bool> filterFunc,string tag="") => FrozenItemVisitor.GetByFilter(filterFunc,tag);
		public static rawFrozenItem? GetOneFrozenItemByFilter(Func<rawFrozenItem, bool> filterFunc,string tag="") => FrozenItemVisitor.GetOneByFilter(filterFunc,tag);
	#endregion FrozenItem
	#region FrozenItemDetail
		public static int GetCountFrozenItemDetailMap(string tag="") => FrozenItemDetailVisitor.GetCount(tag);
		public static string GetFileNameFrozenItemDetailMap() => FrozenItemDetailVisitor.GetFileName();
		public static List<int> SortedKeysFrozenItemDetailMap(string tag="") => FrozenItemDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawFrozenItemDetail> GetFrozenItemDetailMap(string tag="") => FrozenItemDetailVisitor.All(tag);
		public static void RangeFrozenItemDetailMap(Action<int, rawFrozenItemDetail> filter,string tag="") => FrozenItemDetailVisitor.Range(filter,tag);
		public static List<int> KeysFrozenItemDetailMap(string tag="") => FrozenItemDetailVisitor.Keys(tag);
		public static rawFrozenItemDetail? GetFrozenItemDetail(int key,string tag="") => FrozenItemDetailVisitor.Get(key,tag);
		public static List<rawFrozenItemDetail> GetFrozenItemDetailByFilter(Func<rawFrozenItemDetail, bool> filterFunc,string tag="") => FrozenItemDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawFrozenItemDetail? GetOneFrozenItemDetailByFilter(Func<rawFrozenItemDetail, bool> filterFunc,string tag="") => FrozenItemDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion FrozenItemDetail
	#region GalleryCategory
		public static int GetCountGalleryCategoryMap(string tag="") => GalleryCategoryVisitor.GetCount(tag);
		public static string GetFileNameGalleryCategoryMap() => GalleryCategoryVisitor.GetFileName();
		public static List<int> SortedKeysGalleryCategoryMap(string tag="") => GalleryCategoryVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawGalleryCategory> GetGalleryCategoryMap(string tag="") => GalleryCategoryVisitor.All(tag);
		public static void RangeGalleryCategoryMap(Action<int, rawGalleryCategory> filter,string tag="") => GalleryCategoryVisitor.Range(filter,tag);
		public static List<int> KeysGalleryCategoryMap(string tag="") => GalleryCategoryVisitor.Keys(tag);
		public static rawGalleryCategory? GetGalleryCategory(int key,string tag="") => GalleryCategoryVisitor.Get(key,tag);
		public static List<rawGalleryCategory> GetGalleryCategoryByFilter(Func<rawGalleryCategory, bool> filterFunc,string tag="") => GalleryCategoryVisitor.GetByFilter(filterFunc,tag);
		public static rawGalleryCategory? GetOneGalleryCategoryByFilter(Func<rawGalleryCategory, bool> filterFunc,string tag="") => GalleryCategoryVisitor.GetOneByFilter(filterFunc,tag);
	#endregion GalleryCategory
	#region GallerySpecial
		public static int GetCountGallerySpecialMap(string tag="") => GallerySpecialVisitor.GetCount(tag);
		public static string GetFileNameGallerySpecialMap() => GallerySpecialVisitor.GetFileName();
		public static List<int> SortedKeysGallerySpecialMap(string tag="") => GallerySpecialVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawGallerySpecial> GetGallerySpecialMap(string tag="") => GallerySpecialVisitor.All(tag);
		public static void RangeGallerySpecialMap(Action<int, rawGallerySpecial> filter,string tag="") => GallerySpecialVisitor.Range(filter,tag);
		public static List<int> KeysGallerySpecialMap(string tag="") => GallerySpecialVisitor.Keys(tag);
		public static rawGallerySpecial? GetGallerySpecial(int key,string tag="") => GallerySpecialVisitor.Get(key,tag);
		public static List<rawGallerySpecial> GetGallerySpecialByFilter(Func<rawGallerySpecial, bool> filterFunc,string tag="") => GallerySpecialVisitor.GetByFilter(filterFunc,tag);
		public static rawGallerySpecial? GetOneGallerySpecialByFilter(Func<rawGallerySpecial, bool> filterFunc,string tag="") => GallerySpecialVisitor.GetOneByFilter(filterFunc,tag);
	#endregion GallerySpecial
	#region GameDiff
		public static int GetCountGameDiffSlice(string tag="") => GameDiffVisitor.GetCount(tag);
		public static string GetFileNameGameDiffSlice() => GameDiffVisitor.GetFileName();
		public static PBC::RepeatedField<rawGameDiff> GetGameDiffSlice(string tag="") => GameDiffVisitor.All(tag);
		public static void RangeGameDiffSlice(Action<int, rawGameDiff> filter,string tag="") => GameDiffVisitor.Range(filter,tag);
		public static rawGameDiff? GetGameDiffByIndex(int index,string tag="") => GameDiffVisitor.GetByIndex(index,tag);
		public static List<rawGameDiff> GetGameDiffByFilter(Func<rawGameDiff, bool> filterFunc,string tag="") => GameDiffVisitor.GetByFilter(filterFunc,tag);
		public static rawGameDiff? GetOneGameDiffByFilter(Func<rawGameDiff, bool> filterFunc,string tag="") => GameDiffVisitor.GetOneByFilter(filterFunc,tag);
	#endregion GameDiff
	#region GemEndlessThree
		public static int GetCountGemEndlessThreeMap(string tag="") => GemEndlessThreeVisitor.GetCount(tag);
		public static string GetFileNameGemEndlessThreeMap() => GemEndlessThreeVisitor.GetFileName();
		public static List<int> SortedKeysGemEndlessThreeMap(string tag="") => GemEndlessThreeVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawGemEndlessThree> GetGemEndlessThreeMap(string tag="") => GemEndlessThreeVisitor.All(tag);
		public static void RangeGemEndlessThreeMap(Action<int, rawGemEndlessThree> filter,string tag="") => GemEndlessThreeVisitor.Range(filter,tag);
		public static List<int> KeysGemEndlessThreeMap(string tag="") => GemEndlessThreeVisitor.Keys(tag);
		public static rawGemEndlessThree? GetGemEndlessThree(int key,string tag="") => GemEndlessThreeVisitor.Get(key,tag);
		public static List<rawGemEndlessThree> GetGemEndlessThreeByFilter(Func<rawGemEndlessThree, bool> filterFunc,string tag="") => GemEndlessThreeVisitor.GetByFilter(filterFunc,tag);
		public static rawGemEndlessThree? GetOneGemEndlessThreeByFilter(Func<rawGemEndlessThree, bool> filterFunc,string tag="") => GemEndlessThreeVisitor.GetOneByFilter(filterFunc,tag);
	#endregion GemEndlessThree
	#region GemEndlessThreeDetail
		public static int GetCountGemEndlessThreeDetailSlice(string tag="") => GemEndlessThreeDetailVisitor.GetCount(tag);
		public static string GetFileNameGemEndlessThreeDetailSlice() => GemEndlessThreeDetailVisitor.GetFileName();
		public static PBC::RepeatedField<rawGemEndlessThreeDetail> GetGemEndlessThreeDetailSlice(string tag="") => GemEndlessThreeDetailVisitor.All(tag);
		public static void RangeGemEndlessThreeDetailSlice(Action<int, rawGemEndlessThreeDetail> filter,string tag="") => GemEndlessThreeDetailVisitor.Range(filter,tag);
		public static rawGemEndlessThreeDetail? GetGemEndlessThreeDetailByIndex(int index,string tag="") => GemEndlessThreeDetailVisitor.GetByIndex(index,tag);
		public static List<rawGemEndlessThreeDetail> GetGemEndlessThreeDetailByFilter(Func<rawGemEndlessThreeDetail, bool> filterFunc,string tag="") => GemEndlessThreeDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawGemEndlessThreeDetail? GetOneGemEndlessThreeDetailByFilter(Func<rawGemEndlessThreeDetail, bool> filterFunc,string tag="") => GemEndlessThreeDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion GemEndlessThreeDetail
	#region GemThreeForOne
		public static int GetCountGemThreeForOneMap(string tag="") => GemThreeForOneVisitor.GetCount(tag);
		public static string GetFileNameGemThreeForOneMap() => GemThreeForOneVisitor.GetFileName();
		public static List<int> SortedKeysGemThreeForOneMap(string tag="") => GemThreeForOneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawGemThreeForOne> GetGemThreeForOneMap(string tag="") => GemThreeForOneVisitor.All(tag);
		public static void RangeGemThreeForOneMap(Action<int, rawGemThreeForOne> filter,string tag="") => GemThreeForOneVisitor.Range(filter,tag);
		public static List<int> KeysGemThreeForOneMap(string tag="") => GemThreeForOneVisitor.Keys(tag);
		public static rawGemThreeForOne? GetGemThreeForOne(int key,string tag="") => GemThreeForOneVisitor.Get(key,tag);
		public static List<rawGemThreeForOne> GetGemThreeForOneByFilter(Func<rawGemThreeForOne, bool> filterFunc,string tag="") => GemThreeForOneVisitor.GetByFilter(filterFunc,tag);
		public static rawGemThreeForOne? GetOneGemThreeForOneByFilter(Func<rawGemThreeForOne, bool> filterFunc,string tag="") => GemThreeForOneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion GemThreeForOne
	#region Global
		public static int GetCountGlobalSlice(string tag="") => GlobalVisitor.GetCount(tag);
		public static string GetFileNameGlobalSlice() => GlobalVisitor.GetFileName();
		public static PBC::RepeatedField<rawGlobal> GetGlobalSlice(string tag="") => GlobalVisitor.All(tag);
		public static void RangeGlobalSlice(Action<int, rawGlobal> filter,string tag="") => GlobalVisitor.Range(filter,tag);
		public static rawGlobal? GetGlobalByIndex(int index,string tag="") => GlobalVisitor.GetByIndex(index,tag);
		public static List<rawGlobal> GetGlobalByFilter(Func<rawGlobal, bool> filterFunc,string tag="") => GlobalVisitor.GetByFilter(filterFunc,tag);
		public static rawGlobal? GetOneGlobalByFilter(Func<rawGlobal, bool> filterFunc,string tag="") => GlobalVisitor.GetOneByFilter(filterFunc,tag);
	#endregion Global
	#region GradeIndexMapping
		public static int GetCountGradeIndexMappingMap(string tag="") => GradeIndexMappingVisitor.GetCount(tag);
		public static string GetFileNameGradeIndexMappingMap() => GradeIndexMappingVisitor.GetFileName();
		public static List<int> SortedKeysGradeIndexMappingMap(string tag="") => GradeIndexMappingVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawGradeIndexMapping> GetGradeIndexMappingMap(string tag="") => GradeIndexMappingVisitor.All(tag);
		public static void RangeGradeIndexMappingMap(Action<int, rawGradeIndexMapping> filter,string tag="") => GradeIndexMappingVisitor.Range(filter,tag);
		public static List<int> KeysGradeIndexMappingMap(string tag="") => GradeIndexMappingVisitor.Keys(tag);
		public static rawGradeIndexMapping? GetGradeIndexMapping(int key,string tag="") => GradeIndexMappingVisitor.Get(key,tag);
		public static List<rawGradeIndexMapping> GetGradeIndexMappingByFilter(Func<rawGradeIndexMapping, bool> filterFunc,string tag="") => GradeIndexMappingVisitor.GetByFilter(filterFunc,tag);
		public static rawGradeIndexMapping? GetOneGradeIndexMappingByFilter(Func<rawGradeIndexMapping, bool> filterFunc,string tag="") => GradeIndexMappingVisitor.GetOneByFilter(filterFunc,tag);
	#endregion GradeIndexMapping
	#region GroupDetail
		public static int GetCountGroupDetailMap(string tag="") => GroupDetailVisitor.GetCount(tag);
		public static string GetFileNameGroupDetailMap() => GroupDetailVisitor.GetFileName();
		public static List<int> SortedKeysGroupDetailMap(string tag="") => GroupDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawGroupDetail> GetGroupDetailMap(string tag="") => GroupDetailVisitor.All(tag);
		public static void RangeGroupDetailMap(Action<int, rawGroupDetail> filter,string tag="") => GroupDetailVisitor.Range(filter,tag);
		public static List<int> KeysGroupDetailMap(string tag="") => GroupDetailVisitor.Keys(tag);
		public static rawGroupDetail? GetGroupDetail(int key,string tag="") => GroupDetailVisitor.Get(key,tag);
		public static List<rawGroupDetail> GetGroupDetailByFilter(Func<rawGroupDetail, bool> filterFunc,string tag="") => GroupDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawGroupDetail? GetOneGroupDetailByFilter(Func<rawGroupDetail, bool> filterFunc,string tag="") => GroupDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion GroupDetail
	#region GuessItem
		public static int GetCountGuessItemMap(string tag="") => GuessItemVisitor.GetCount(tag);
		public static string GetFileNameGuessItemMap() => GuessItemVisitor.GetFileName();
		public static List<int> SortedKeysGuessItemMap(string tag="") => GuessItemVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawGuessItem> GetGuessItemMap(string tag="") => GuessItemVisitor.All(tag);
		public static void RangeGuessItemMap(Action<int, rawGuessItem> filter,string tag="") => GuessItemVisitor.Range(filter,tag);
		public static List<int> KeysGuessItemMap(string tag="") => GuessItemVisitor.Keys(tag);
		public static rawGuessItem? GetGuessItem(int key,string tag="") => GuessItemVisitor.Get(key,tag);
		public static List<rawGuessItem> GetGuessItemByFilter(Func<rawGuessItem, bool> filterFunc,string tag="") => GuessItemVisitor.GetByFilter(filterFunc,tag);
		public static rawGuessItem? GetOneGuessItemByFilter(Func<rawGuessItem, bool> filterFunc,string tag="") => GuessItemVisitor.GetOneByFilter(filterFunc,tag);
	#endregion GuessItem
	#region GuideMerge
		public static int GetCountGuideMergeMap(string tag="") => GuideMergeVisitor.GetCount(tag);
		public static string GetFileNameGuideMergeMap() => GuideMergeVisitor.GetFileName();
		public static List<int> SortedKeysGuideMergeMap(string tag="") => GuideMergeVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawGuideMerge> GetGuideMergeMap(string tag="") => GuideMergeVisitor.All(tag);
		public static void RangeGuideMergeMap(Action<int, rawGuideMerge> filter,string tag="") => GuideMergeVisitor.Range(filter,tag);
		public static List<int> KeysGuideMergeMap(string tag="") => GuideMergeVisitor.Keys(tag);
		public static rawGuideMerge? GetGuideMerge(int key,string tag="") => GuideMergeVisitor.Get(key,tag);
		public static List<rawGuideMerge> GetGuideMergeByFilter(Func<rawGuideMerge, bool> filterFunc,string tag="") => GuideMergeVisitor.GetByFilter(filterFunc,tag);
		public static rawGuideMerge? GetOneGuideMergeByFilter(Func<rawGuideMerge, bool> filterFunc,string tag="") => GuideMergeVisitor.GetOneByFilter(filterFunc,tag);
	#endregion GuideMerge
	#region GuideMergeAction
		public static int GetCountGuideMergeActionMap(string tag="") => GuideMergeActionVisitor.GetCount(tag);
		public static string GetFileNameGuideMergeActionMap() => GuideMergeActionVisitor.GetFileName();
		public static List<int> SortedKeysGuideMergeActionMap(string tag="") => GuideMergeActionVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawGuideMergeAction> GetGuideMergeActionMap(string tag="") => GuideMergeActionVisitor.All(tag);
		public static void RangeGuideMergeActionMap(Action<int, rawGuideMergeAction> filter,string tag="") => GuideMergeActionVisitor.Range(filter,tag);
		public static List<int> KeysGuideMergeActionMap(string tag="") => GuideMergeActionVisitor.Keys(tag);
		public static rawGuideMergeAction? GetGuideMergeAction(int key,string tag="") => GuideMergeActionVisitor.Get(key,tag);
		public static List<rawGuideMergeAction> GetGuideMergeActionByFilter(Func<rawGuideMergeAction, bool> filterFunc,string tag="") => GuideMergeActionVisitor.GetByFilter(filterFunc,tag);
		public static rawGuideMergeAction? GetOneGuideMergeActionByFilter(Func<rawGuideMergeAction, bool> filterFunc,string tag="") => GuideMergeActionVisitor.GetOneByFilter(filterFunc,tag);
	#endregion GuideMergeAction
	#region IAPFree
		public static int GetCountIAPFreeMap(string tag="") => IAPFreeVisitor.GetCount(tag);
		public static string GetFileNameIAPFreeMap() => IAPFreeVisitor.GetFileName();
		public static List<int> SortedKeysIAPFreeMap(string tag="") => IAPFreeVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawIAPFree> GetIAPFreeMap(string tag="") => IAPFreeVisitor.All(tag);
		public static void RangeIAPFreeMap(Action<int, rawIAPFree> filter,string tag="") => IAPFreeVisitor.Range(filter,tag);
		public static List<int> KeysIAPFreeMap(string tag="") => IAPFreeVisitor.Keys(tag);
		public static rawIAPFree? GetIAPFree(int key,string tag="") => IAPFreeVisitor.Get(key,tag);
		public static List<rawIAPFree> GetIAPFreeByFilter(Func<rawIAPFree, bool> filterFunc,string tag="") => IAPFreeVisitor.GetByFilter(filterFunc,tag);
		public static rawIAPFree? GetOneIAPFreeByFilter(Func<rawIAPFree, bool> filterFunc,string tag="") => IAPFreeVisitor.GetOneByFilter(filterFunc,tag);
	#endregion IAPFree
	#region IAPPack
		public static int GetCountIAPPackMap(string tag="") => IAPPackVisitor.GetCount(tag);
		public static string GetFileNameIAPPackMap() => IAPPackVisitor.GetFileName();
		public static List<int> SortedKeysIAPPackMap(string tag="") => IAPPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawIAPPack> GetIAPPackMap(string tag="") => IAPPackVisitor.All(tag);
		public static void RangeIAPPackMap(Action<int, rawIAPPack> filter,string tag="") => IAPPackVisitor.Range(filter,tag);
		public static List<int> KeysIAPPackMap(string tag="") => IAPPackVisitor.Keys(tag);
		public static rawIAPPack? GetIAPPack(int key,string tag="") => IAPPackVisitor.Get(key,tag);
		public static List<rawIAPPack> GetIAPPackByFilter(Func<rawIAPPack, bool> filterFunc,string tag="") => IAPPackVisitor.GetByFilter(filterFunc,tag);
		public static rawIAPPack? GetOneIAPPackByFilter(Func<rawIAPPack, bool> filterFunc,string tag="") => IAPPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion IAPPack
	#region IAPProduct
		public static int GetCountIAPProductMap(string tag="") => IAPProductVisitor.GetCount(tag);
		public static string GetFileNameIAPProductMap() => IAPProductVisitor.GetFileName();
		public static List<int> SortedKeysIAPProductMap(string tag="") => IAPProductVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawIAPProduct> GetIAPProductMap(string tag="") => IAPProductVisitor.All(tag);
		public static void RangeIAPProductMap(Action<int, rawIAPProduct> filter,string tag="") => IAPProductVisitor.Range(filter,tag);
		public static List<int> KeysIAPProductMap(string tag="") => IAPProductVisitor.Keys(tag);
		public static rawIAPProduct? GetIAPProduct(int key,string tag="") => IAPProductVisitor.Get(key,tag);
		public static List<rawIAPProduct> GetIAPProductByFilter(Func<rawIAPProduct, bool> filterFunc,string tag="") => IAPProductVisitor.GetByFilter(filterFunc,tag);
		public static rawIAPProduct? GetOneIAPProductByFilter(Func<rawIAPProduct, bool> filterFunc,string tag="") => IAPProductVisitor.GetOneByFilter(filterFunc,tag);
	#endregion IAPProduct
	#region InventoryItem
		public static int GetCountInventoryItemMap(string tag="") => InventoryItemVisitor.GetCount(tag);
		public static string GetFileNameInventoryItemMap() => InventoryItemVisitor.GetFileName();
		public static List<int> SortedKeysInventoryItemMap(string tag="") => InventoryItemVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawInventoryItem> GetInventoryItemMap(string tag="") => InventoryItemVisitor.All(tag);
		public static void RangeInventoryItemMap(Action<int, rawInventoryItem> filter,string tag="") => InventoryItemVisitor.Range(filter,tag);
		public static List<int> KeysInventoryItemMap(string tag="") => InventoryItemVisitor.Keys(tag);
		public static rawInventoryItem? GetInventoryItem(int key,string tag="") => InventoryItemVisitor.Get(key,tag);
		public static List<rawInventoryItem> GetInventoryItemByFilter(Func<rawInventoryItem, bool> filterFunc,string tag="") => InventoryItemVisitor.GetByFilter(filterFunc,tag);
		public static rawInventoryItem? GetOneInventoryItemByFilter(Func<rawInventoryItem, bool> filterFunc,string tag="") => InventoryItemVisitor.GetOneByFilter(filterFunc,tag);
	#endregion InventoryItem
	#region InventoryProducer
		public static int GetCountInventoryProducerMap(string tag="") => InventoryProducerVisitor.GetCount(tag);
		public static string GetFileNameInventoryProducerMap() => InventoryProducerVisitor.GetFileName();
		public static List<int> SortedKeysInventoryProducerMap(string tag="") => InventoryProducerVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawInventoryProducer> GetInventoryProducerMap(string tag="") => InventoryProducerVisitor.All(tag);
		public static void RangeInventoryProducerMap(Action<int, rawInventoryProducer> filter,string tag="") => InventoryProducerVisitor.Range(filter,tag);
		public static List<int> KeysInventoryProducerMap(string tag="") => InventoryProducerVisitor.Keys(tag);
		public static rawInventoryProducer? GetInventoryProducer(int key,string tag="") => InventoryProducerVisitor.Get(key,tag);
		public static List<rawInventoryProducer> GetInventoryProducerByFilter(Func<rawInventoryProducer, bool> filterFunc,string tag="") => InventoryProducerVisitor.GetByFilter(filterFunc,tag);
		public static rawInventoryProducer? GetOneInventoryProducerByFilter(Func<rawInventoryProducer, bool> filterFunc,string tag="") => InventoryProducerVisitor.GetOneByFilter(filterFunc,tag);
	#endregion InventoryProducer
	#region InventoryTool
		public static int GetCountInventoryToolMap(string tag="") => InventoryToolVisitor.GetCount(tag);
		public static string GetFileNameInventoryToolMap() => InventoryToolVisitor.GetFileName();
		public static List<int> SortedKeysInventoryToolMap(string tag="") => InventoryToolVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawInventoryTool> GetInventoryToolMap(string tag="") => InventoryToolVisitor.All(tag);
		public static void RangeInventoryToolMap(Action<int, rawInventoryTool> filter,string tag="") => InventoryToolVisitor.Range(filter,tag);
		public static List<int> KeysInventoryToolMap(string tag="") => InventoryToolVisitor.Keys(tag);
		public static rawInventoryTool? GetInventoryTool(int key,string tag="") => InventoryToolVisitor.Get(key,tag);
		public static List<rawInventoryTool> GetInventoryToolByFilter(Func<rawInventoryTool, bool> filterFunc,string tag="") => InventoryToolVisitor.GetByFilter(filterFunc,tag);
		public static rawInventoryTool? GetOneInventoryToolByFilter(Func<rawInventoryTool, bool> filterFunc,string tag="") => InventoryToolVisitor.GetOneByFilter(filterFunc,tag);
	#endregion InventoryTool
	#region ItemBingoBoard
		public static int GetCountItemBingoBoardMap(string tag="") => ItemBingoBoardVisitor.GetCount(tag);
		public static string GetFileNameItemBingoBoardMap() => ItemBingoBoardVisitor.GetFileName();
		public static List<int> SortedKeysItemBingoBoardMap(string tag="") => ItemBingoBoardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawItemBingoBoard> GetItemBingoBoardMap(string tag="") => ItemBingoBoardVisitor.All(tag);
		public static void RangeItemBingoBoardMap(Action<int, rawItemBingoBoard> filter,string tag="") => ItemBingoBoardVisitor.Range(filter,tag);
		public static List<int> KeysItemBingoBoardMap(string tag="") => ItemBingoBoardVisitor.Keys(tag);
		public static rawItemBingoBoard? GetItemBingoBoard(int key,string tag="") => ItemBingoBoardVisitor.Get(key,tag);
		public static List<rawItemBingoBoard> GetItemBingoBoardByFilter(Func<rawItemBingoBoard, bool> filterFunc,string tag="") => ItemBingoBoardVisitor.GetByFilter(filterFunc,tag);
		public static rawItemBingoBoard? GetOneItemBingoBoardByFilter(Func<rawItemBingoBoard, bool> filterFunc,string tag="") => ItemBingoBoardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ItemBingoBoard
	#region ItemReplace
		public static int GetCountItemReplaceMap(string tag="") => ItemReplaceVisitor.GetCount(tag);
		public static string GetFileNameItemReplaceMap() => ItemReplaceVisitor.GetFileName();
		public static List<int> SortedKeysItemReplaceMap(string tag="") => ItemReplaceVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawItemReplace> GetItemReplaceMap(string tag="") => ItemReplaceVisitor.All(tag);
		public static void RangeItemReplaceMap(Action<int, rawItemReplace> filter,string tag="") => ItemReplaceVisitor.Range(filter,tag);
		public static List<int> KeysItemReplaceMap(string tag="") => ItemReplaceVisitor.Keys(tag);
		public static rawItemReplace? GetItemReplace(int key,string tag="") => ItemReplaceVisitor.Get(key,tag);
		public static List<rawItemReplace> GetItemReplaceByFilter(Func<rawItemReplace, bool> filterFunc,string tag="") => ItemReplaceVisitor.GetByFilter(filterFunc,tag);
		public static rawItemReplace? GetOneItemReplaceByFilter(Func<rawItemReplace, bool> filterFunc,string tag="") => ItemReplaceVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ItemReplace
	#region Label
		public static int GetCountLabelMap(string tag="") => LabelVisitor.GetCount(tag);
		public static string GetFileNameLabelMap() => LabelVisitor.GetFileName();
		public static List<int> SortedKeysLabelMap(string tag="") => LabelVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawLabel> GetLabelMap(string tag="") => LabelVisitor.All(tag);
		public static void RangeLabelMap(Action<int, rawLabel> filter,string tag="") => LabelVisitor.Range(filter,tag);
		public static List<int> KeysLabelMap(string tag="") => LabelVisitor.Keys(tag);
		public static rawLabel? GetLabel(int key,string tag="") => LabelVisitor.Get(key,tag);
		public static List<rawLabel> GetLabelByFilter(Func<rawLabel, bool> filterFunc,string tag="") => LabelVisitor.GetByFilter(filterFunc,tag);
		public static rawLabel? GetOneLabelByFilter(Func<rawLabel, bool> filterFunc,string tag="") => LabelVisitor.GetOneByFilter(filterFunc,tag);
	#endregion Label
	#region LandmarkDetail
		public static int GetCountLandmarkDetailMap(string tag="") => LandmarkDetailVisitor.GetCount(tag);
		public static string GetFileNameLandmarkDetailMap() => LandmarkDetailVisitor.GetFileName();
		public static List<int> SortedKeysLandmarkDetailMap(string tag="") => LandmarkDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawLandmarkDetail> GetLandmarkDetailMap(string tag="") => LandmarkDetailVisitor.All(tag);
		public static void RangeLandmarkDetailMap(Action<int, rawLandmarkDetail> filter,string tag="") => LandmarkDetailVisitor.Range(filter,tag);
		public static List<int> KeysLandmarkDetailMap(string tag="") => LandmarkDetailVisitor.Keys(tag);
		public static rawLandmarkDetail? GetLandmarkDetail(int key,string tag="") => LandmarkDetailVisitor.Get(key,tag);
		public static List<rawLandmarkDetail> GetLandmarkDetailByFilter(Func<rawLandmarkDetail, bool> filterFunc,string tag="") => LandmarkDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawLandmarkDetail? GetOneLandmarkDetailByFilter(Func<rawLandmarkDetail, bool> filterFunc,string tag="") => LandmarkDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LandmarkDetail
	#region LangDe
		public static int GetCountLangDeSlice(string tag="") => LangDeVisitor.GetCount(tag);
		public static string GetFileNameLangDeSlice() => LangDeVisitor.GetFileName();
		public static PBC::RepeatedField<rawLangDe> GetLangDeSlice(string tag="") => LangDeVisitor.All(tag);
		public static void RangeLangDeSlice(Action<int, rawLangDe> filter,string tag="") => LangDeVisitor.Range(filter,tag);
		public static rawLangDe? GetLangDeByIndex(int index,string tag="") => LangDeVisitor.GetByIndex(index,tag);
		public static List<rawLangDe> GetLangDeByFilter(Func<rawLangDe, bool> filterFunc,string tag="") => LangDeVisitor.GetByFilter(filterFunc,tag);
		public static rawLangDe? GetOneLangDeByFilter(Func<rawLangDe, bool> filterFunc,string tag="") => LangDeVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LangDe
	#region LangEn
		public static int GetCountLangEnSlice(string tag="") => LangEnVisitor.GetCount(tag);
		public static string GetFileNameLangEnSlice() => LangEnVisitor.GetFileName();
		public static PBC::RepeatedField<rawLangEn> GetLangEnSlice(string tag="") => LangEnVisitor.All(tag);
		public static void RangeLangEnSlice(Action<int, rawLangEn> filter,string tag="") => LangEnVisitor.Range(filter,tag);
		public static rawLangEn? GetLangEnByIndex(int index,string tag="") => LangEnVisitor.GetByIndex(index,tag);
		public static List<rawLangEn> GetLangEnByFilter(Func<rawLangEn, bool> filterFunc,string tag="") => LangEnVisitor.GetByFilter(filterFunc,tag);
		public static rawLangEn? GetOneLangEnByFilter(Func<rawLangEn, bool> filterFunc,string tag="") => LangEnVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LangEn
	#region LangEs
		public static int GetCountLangEsSlice(string tag="") => LangEsVisitor.GetCount(tag);
		public static string GetFileNameLangEsSlice() => LangEsVisitor.GetFileName();
		public static PBC::RepeatedField<rawLangEs> GetLangEsSlice(string tag="") => LangEsVisitor.All(tag);
		public static void RangeLangEsSlice(Action<int, rawLangEs> filter,string tag="") => LangEsVisitor.Range(filter,tag);
		public static rawLangEs? GetLangEsByIndex(int index,string tag="") => LangEsVisitor.GetByIndex(index,tag);
		public static List<rawLangEs> GetLangEsByFilter(Func<rawLangEs, bool> filterFunc,string tag="") => LangEsVisitor.GetByFilter(filterFunc,tag);
		public static rawLangEs? GetOneLangEsByFilter(Func<rawLangEs, bool> filterFunc,string tag="") => LangEsVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LangEs
	#region LangFr
		public static int GetCountLangFrSlice(string tag="") => LangFrVisitor.GetCount(tag);
		public static string GetFileNameLangFrSlice() => LangFrVisitor.GetFileName();
		public static PBC::RepeatedField<rawLangFr> GetLangFrSlice(string tag="") => LangFrVisitor.All(tag);
		public static void RangeLangFrSlice(Action<int, rawLangFr> filter,string tag="") => LangFrVisitor.Range(filter,tag);
		public static rawLangFr? GetLangFrByIndex(int index,string tag="") => LangFrVisitor.GetByIndex(index,tag);
		public static List<rawLangFr> GetLangFrByFilter(Func<rawLangFr, bool> filterFunc,string tag="") => LangFrVisitor.GetByFilter(filterFunc,tag);
		public static rawLangFr? GetOneLangFrByFilter(Func<rawLangFr, bool> filterFunc,string tag="") => LangFrVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LangFr
	#region LangJa
		public static int GetCountLangJaSlice(string tag="") => LangJaVisitor.GetCount(tag);
		public static string GetFileNameLangJaSlice() => LangJaVisitor.GetFileName();
		public static PBC::RepeatedField<rawLangJa> GetLangJaSlice(string tag="") => LangJaVisitor.All(tag);
		public static void RangeLangJaSlice(Action<int, rawLangJa> filter,string tag="") => LangJaVisitor.Range(filter,tag);
		public static rawLangJa? GetLangJaByIndex(int index,string tag="") => LangJaVisitor.GetByIndex(index,tag);
		public static List<rawLangJa> GetLangJaByFilter(Func<rawLangJa, bool> filterFunc,string tag="") => LangJaVisitor.GetByFilter(filterFunc,tag);
		public static rawLangJa? GetOneLangJaByFilter(Func<rawLangJa, bool> filterFunc,string tag="") => LangJaVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LangJa
	#region LangKo
		public static int GetCountLangKoSlice(string tag="") => LangKoVisitor.GetCount(tag);
		public static string GetFileNameLangKoSlice() => LangKoVisitor.GetFileName();
		public static PBC::RepeatedField<rawLangKo> GetLangKoSlice(string tag="") => LangKoVisitor.All(tag);
		public static void RangeLangKoSlice(Action<int, rawLangKo> filter,string tag="") => LangKoVisitor.Range(filter,tag);
		public static rawLangKo? GetLangKoByIndex(int index,string tag="") => LangKoVisitor.GetByIndex(index,tag);
		public static List<rawLangKo> GetLangKoByFilter(Func<rawLangKo, bool> filterFunc,string tag="") => LangKoVisitor.GetByFilter(filterFunc,tag);
		public static rawLangKo? GetOneLangKoByFilter(Func<rawLangKo, bool> filterFunc,string tag="") => LangKoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LangKo
	#region LangPt
		public static int GetCountLangPtSlice(string tag="") => LangPtVisitor.GetCount(tag);
		public static string GetFileNameLangPtSlice() => LangPtVisitor.GetFileName();
		public static PBC::RepeatedField<rawLangPt> GetLangPtSlice(string tag="") => LangPtVisitor.All(tag);
		public static void RangeLangPtSlice(Action<int, rawLangPt> filter,string tag="") => LangPtVisitor.Range(filter,tag);
		public static rawLangPt? GetLangPtByIndex(int index,string tag="") => LangPtVisitor.GetByIndex(index,tag);
		public static List<rawLangPt> GetLangPtByFilter(Func<rawLangPt, bool> filterFunc,string tag="") => LangPtVisitor.GetByFilter(filterFunc,tag);
		public static rawLangPt? GetOneLangPtByFilter(Func<rawLangPt, bool> filterFunc,string tag="") => LangPtVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LangPt
	#region LangTr
		public static int GetCountLangTrSlice(string tag="") => LangTrVisitor.GetCount(tag);
		public static string GetFileNameLangTrSlice() => LangTrVisitor.GetFileName();
		public static PBC::RepeatedField<rawLangTr> GetLangTrSlice(string tag="") => LangTrVisitor.All(tag);
		public static void RangeLangTrSlice(Action<int, rawLangTr> filter,string tag="") => LangTrVisitor.Range(filter,tag);
		public static rawLangTr? GetLangTrByIndex(int index,string tag="") => LangTrVisitor.GetByIndex(index,tag);
		public static List<rawLangTr> GetLangTrByFilter(Func<rawLangTr, bool> filterFunc,string tag="") => LangTrVisitor.GetByFilter(filterFunc,tag);
		public static rawLangTr? GetOneLangTrByFilter(Func<rawLangTr, bool> filterFunc,string tag="") => LangTrVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LangTr
	#region LangZhHansCn
		public static int GetCountLangZhHansCnSlice(string tag="") => LangZhHansCnVisitor.GetCount(tag);
		public static string GetFileNameLangZhHansCnSlice() => LangZhHansCnVisitor.GetFileName();
		public static PBC::RepeatedField<rawLangZhHansCn> GetLangZhHansCnSlice(string tag="") => LangZhHansCnVisitor.All(tag);
		public static void RangeLangZhHansCnSlice(Action<int, rawLangZhHansCn> filter,string tag="") => LangZhHansCnVisitor.Range(filter,tag);
		public static rawLangZhHansCn? GetLangZhHansCnByIndex(int index,string tag="") => LangZhHansCnVisitor.GetByIndex(index,tag);
		public static List<rawLangZhHansCn> GetLangZhHansCnByFilter(Func<rawLangZhHansCn, bool> filterFunc,string tag="") => LangZhHansCnVisitor.GetByFilter(filterFunc,tag);
		public static rawLangZhHansCn? GetOneLangZhHansCnByFilter(Func<rawLangZhHansCn, bool> filterFunc,string tag="") => LangZhHansCnVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LangZhHansCn
	#region LangZhHantTw
		public static int GetCountLangZhHantTwSlice(string tag="") => LangZhHantTwVisitor.GetCount(tag);
		public static string GetFileNameLangZhHantTwSlice() => LangZhHantTwVisitor.GetFileName();
		public static PBC::RepeatedField<rawLangZhHantTw> GetLangZhHantTwSlice(string tag="") => LangZhHantTwVisitor.All(tag);
		public static void RangeLangZhHantTwSlice(Action<int, rawLangZhHantTw> filter,string tag="") => LangZhHantTwVisitor.Range(filter,tag);
		public static rawLangZhHantTw? GetLangZhHantTwByIndex(int index,string tag="") => LangZhHantTwVisitor.GetByIndex(index,tag);
		public static List<rawLangZhHantTw> GetLangZhHantTwByFilter(Func<rawLangZhHantTw, bool> filterFunc,string tag="") => LangZhHantTwVisitor.GetByFilter(filterFunc,tag);
		public static rawLangZhHantTw? GetOneLangZhHantTwByFilter(Func<rawLangZhHantTw, bool> filterFunc,string tag="") => LangZhHantTwVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LangZhHantTw
	#region Language
		public static int GetCountLanguageSlice(string tag="") => LanguageVisitor.GetCount(tag);
		public static string GetFileNameLanguageSlice() => LanguageVisitor.GetFileName();
		public static PBC::RepeatedField<rawLanguage> GetLanguageSlice(string tag="") => LanguageVisitor.All(tag);
		public static void RangeLanguageSlice(Action<int, rawLanguage> filter,string tag="") => LanguageVisitor.Range(filter,tag);
		public static rawLanguage? GetLanguageByIndex(int index,string tag="") => LanguageVisitor.GetByIndex(index,tag);
		public static List<rawLanguage> GetLanguageByFilter(Func<rawLanguage, bool> filterFunc,string tag="") => LanguageVisitor.GetByFilter(filterFunc,tag);
		public static rawLanguage? GetOneLanguageByFilter(Func<rawLanguage, bool> filterFunc,string tag="") => LanguageVisitor.GetOneByFilter(filterFunc,tag);
	#endregion Language
	#region LevelGroups
		public static int GetCountLevelGroupsMap(string tag="") => LevelGroupsVisitor.GetCount(tag);
		public static string GetFileNameLevelGroupsMap() => LevelGroupsVisitor.GetFileName();
		public static List<int> SortedKeysLevelGroupsMap(string tag="") => LevelGroupsVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawLevelGroups> GetLevelGroupsMap(string tag="") => LevelGroupsVisitor.All(tag);
		public static void RangeLevelGroupsMap(Action<int, rawLevelGroups> filter,string tag="") => LevelGroupsVisitor.Range(filter,tag);
		public static List<int> KeysLevelGroupsMap(string tag="") => LevelGroupsVisitor.Keys(tag);
		public static rawLevelGroups? GetLevelGroups(int key,string tag="") => LevelGroupsVisitor.Get(key,tag);
		public static List<rawLevelGroups> GetLevelGroupsByFilter(Func<rawLevelGroups, bool> filterFunc,string tag="") => LevelGroupsVisitor.GetByFilter(filterFunc,tag);
		public static rawLevelGroups? GetOneLevelGroupsByFilter(Func<rawLevelGroups, bool> filterFunc,string tag="") => LevelGroupsVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LevelGroups
	#region LevelPack
		public static int GetCountLevelPackMap(string tag="") => LevelPackVisitor.GetCount(tag);
		public static string GetFileNameLevelPackMap() => LevelPackVisitor.GetFileName();
		public static List<int> SortedKeysLevelPackMap(string tag="") => LevelPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawLevelPack> GetLevelPackMap(string tag="") => LevelPackVisitor.All(tag);
		public static void RangeLevelPackMap(Action<int, rawLevelPack> filter,string tag="") => LevelPackVisitor.Range(filter,tag);
		public static List<int> KeysLevelPackMap(string tag="") => LevelPackVisitor.Keys(tag);
		public static rawLevelPack? GetLevelPack(int key,string tag="") => LevelPackVisitor.Get(key,tag);
		public static List<rawLevelPack> GetLevelPackByFilter(Func<rawLevelPack, bool> filterFunc,string tag="") => LevelPackVisitor.GetByFilter(filterFunc,tag);
		public static rawLevelPack? GetOneLevelPackByFilter(Func<rawLevelPack, bool> filterFunc,string tag="") => LevelPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LevelPack
	#region LevelPackDetail
		public static int GetCountLevelPackDetailMap(string tag="") => LevelPackDetailVisitor.GetCount(tag);
		public static string GetFileNameLevelPackDetailMap() => LevelPackDetailVisitor.GetFileName();
		public static List<int> SortedKeysLevelPackDetailMap(string tag="") => LevelPackDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawLevelPackDetail> GetLevelPackDetailMap(string tag="") => LevelPackDetailVisitor.All(tag);
		public static void RangeLevelPackDetailMap(Action<int, rawLevelPackDetail> filter,string tag="") => LevelPackDetailVisitor.Range(filter,tag);
		public static List<int> KeysLevelPackDetailMap(string tag="") => LevelPackDetailVisitor.Keys(tag);
		public static rawLevelPackDetail? GetLevelPackDetail(int key,string tag="") => LevelPackDetailVisitor.Get(key,tag);
		public static List<rawLevelPackDetail> GetLevelPackDetailByFilter(Func<rawLevelPackDetail, bool> filterFunc,string tag="") => LevelPackDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawLevelPackDetail? GetOneLevelPackDetailByFilter(Func<rawLevelPackDetail, bool> filterFunc,string tag="") => LevelPackDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LevelPackDetail
	#region LoginSign
		public static int GetCountLoginSignSlice(string tag="") => LoginSignVisitor.GetCount(tag);
		public static string GetFileNameLoginSignSlice() => LoginSignVisitor.GetFileName();
		public static PBC::RepeatedField<rawLoginSign> GetLoginSignSlice(string tag="") => LoginSignVisitor.All(tag);
		public static void RangeLoginSignSlice(Action<int, rawLoginSign> filter,string tag="") => LoginSignVisitor.Range(filter,tag);
		public static rawLoginSign? GetLoginSignByIndex(int index,string tag="") => LoginSignVisitor.GetByIndex(index,tag);
		public static List<rawLoginSign> GetLoginSignByFilter(Func<rawLoginSign, bool> filterFunc,string tag="") => LoginSignVisitor.GetByFilter(filterFunc,tag);
		public static rawLoginSign? GetOneLoginSignByFilter(Func<rawLoginSign, bool> filterFunc,string tag="") => LoginSignVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LoginSign
	#region LoginSignPool
		public static int GetCountLoginSignPoolMap(string tag="") => LoginSignPoolVisitor.GetCount(tag);
		public static string GetFileNameLoginSignPoolMap() => LoginSignPoolVisitor.GetFileName();
		public static List<int> SortedKeysLoginSignPoolMap(string tag="") => LoginSignPoolVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawLoginSignPool> GetLoginSignPoolMap(string tag="") => LoginSignPoolVisitor.All(tag);
		public static void RangeLoginSignPoolMap(Action<int, rawLoginSignPool> filter,string tag="") => LoginSignPoolVisitor.Range(filter,tag);
		public static List<int> KeysLoginSignPoolMap(string tag="") => LoginSignPoolVisitor.Keys(tag);
		public static rawLoginSignPool? GetLoginSignPool(int key,string tag="") => LoginSignPoolVisitor.Get(key,tag);
		public static List<rawLoginSignPool> GetLoginSignPoolByFilter(Func<rawLoginSignPool, bool> filterFunc,string tag="") => LoginSignPoolVisitor.GetByFilter(filterFunc,tag);
		public static rawLoginSignPool? GetOneLoginSignPoolByFilter(Func<rawLoginSignPool, bool> filterFunc,string tag="") => LoginSignPoolVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LoginSignPool
	#region LoginSignTotal
		public static int GetCountLoginSignTotalMap(string tag="") => LoginSignTotalVisitor.GetCount(tag);
		public static string GetFileNameLoginSignTotalMap() => LoginSignTotalVisitor.GetFileName();
		public static List<int> SortedKeysLoginSignTotalMap(string tag="") => LoginSignTotalVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawLoginSignTotal> GetLoginSignTotalMap(string tag="") => LoginSignTotalVisitor.All(tag);
		public static void RangeLoginSignTotalMap(Action<int, rawLoginSignTotal> filter,string tag="") => LoginSignTotalVisitor.Range(filter,tag);
		public static List<int> KeysLoginSignTotalMap(string tag="") => LoginSignTotalVisitor.Keys(tag);
		public static rawLoginSignTotal? GetLoginSignTotal(int key,string tag="") => LoginSignTotalVisitor.Get(key,tag);
		public static List<rawLoginSignTotal> GetLoginSignTotalByFilter(Func<rawLoginSignTotal, bool> filterFunc,string tag="") => LoginSignTotalVisitor.GetByFilter(filterFunc,tag);
		public static rawLoginSignTotal? GetOneLoginSignTotalByFilter(Func<rawLoginSignTotal, bool> filterFunc,string tag="") => LoginSignTotalVisitor.GetOneByFilter(filterFunc,tag);
	#endregion LoginSignTotal
	#region Mail
		public static int GetCountMailMap(string tag="") => MailVisitor.GetCount(tag);
		public static string GetFileNameMailMap() => MailVisitor.GetFileName();
		public static List<int> SortedKeysMailMap(string tag="") => MailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMail> GetMailMap(string tag="") => MailVisitor.All(tag);
		public static void RangeMailMap(Action<int, rawMail> filter,string tag="") => MailVisitor.Range(filter,tag);
		public static List<int> KeysMailMap(string tag="") => MailVisitor.Keys(tag);
		public static rawMail? GetMail(int key,string tag="") => MailVisitor.Get(key,tag);
		public static List<rawMail> GetMailByFilter(Func<rawMail, bool> filterFunc,string tag="") => MailVisitor.GetByFilter(filterFunc,tag);
		public static rawMail? GetOneMailByFilter(Func<rawMail, bool> filterFunc,string tag="") => MailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion Mail
	#region MarketCommondity
		public static int GetCountMarketCommondityMap(string tag="") => MarketCommondityVisitor.GetCount(tag);
		public static string GetFileNameMarketCommondityMap() => MarketCommondityVisitor.GetFileName();
		public static List<int> SortedKeysMarketCommondityMap(string tag="") => MarketCommondityVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMarketCommondity> GetMarketCommondityMap(string tag="") => MarketCommondityVisitor.All(tag);
		public static void RangeMarketCommondityMap(Action<int, rawMarketCommondity> filter,string tag="") => MarketCommondityVisitor.Range(filter,tag);
		public static List<int> KeysMarketCommondityMap(string tag="") => MarketCommondityVisitor.Keys(tag);
		public static rawMarketCommondity? GetMarketCommondity(int key,string tag="") => MarketCommondityVisitor.Get(key,tag);
		public static List<rawMarketCommondity> GetMarketCommondityByFilter(Func<rawMarketCommondity, bool> filterFunc,string tag="") => MarketCommondityVisitor.GetByFilter(filterFunc,tag);
		public static rawMarketCommondity? GetOneMarketCommondityByFilter(Func<rawMarketCommondity, bool> filterFunc,string tag="") => MarketCommondityVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MarketCommondity
	#region MarketDifficulty
		public static int GetCountMarketDifficultyMap(string tag="") => MarketDifficultyVisitor.GetCount(tag);
		public static string GetFileNameMarketDifficultyMap() => MarketDifficultyVisitor.GetFileName();
		public static List<int> SortedKeysMarketDifficultyMap(string tag="") => MarketDifficultyVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMarketDifficulty> GetMarketDifficultyMap(string tag="") => MarketDifficultyVisitor.All(tag);
		public static void RangeMarketDifficultyMap(Action<int, rawMarketDifficulty> filter,string tag="") => MarketDifficultyVisitor.Range(filter,tag);
		public static List<int> KeysMarketDifficultyMap(string tag="") => MarketDifficultyVisitor.Keys(tag);
		public static rawMarketDifficulty? GetMarketDifficulty(int key,string tag="") => MarketDifficultyVisitor.Get(key,tag);
		public static List<rawMarketDifficulty> GetMarketDifficultyByFilter(Func<rawMarketDifficulty, bool> filterFunc,string tag="") => MarketDifficultyVisitor.GetByFilter(filterFunc,tag);
		public static rawMarketDifficulty? GetOneMarketDifficultyByFilter(Func<rawMarketDifficulty, bool> filterFunc,string tag="") => MarketDifficultyVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MarketDifficulty
	#region MarketIAP
		public static int GetCountMarketIAPMap(string tag="") => MarketIAPVisitor.GetCount(tag);
		public static string GetFileNameMarketIAPMap() => MarketIAPVisitor.GetFileName();
		public static List<int> SortedKeysMarketIAPMap(string tag="") => MarketIAPVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMarketIAP> GetMarketIAPMap(string tag="") => MarketIAPVisitor.All(tag);
		public static void RangeMarketIAPMap(Action<int, rawMarketIAP> filter,string tag="") => MarketIAPVisitor.Range(filter,tag);
		public static List<int> KeysMarketIAPMap(string tag="") => MarketIAPVisitor.Keys(tag);
		public static rawMarketIAP? GetMarketIAP(int key,string tag="") => MarketIAPVisitor.Get(key,tag);
		public static List<rawMarketIAP> GetMarketIAPByFilter(Func<rawMarketIAP, bool> filterFunc,string tag="") => MarketIAPVisitor.GetByFilter(filterFunc,tag);
		public static rawMarketIAP? GetOneMarketIAPByFilter(Func<rawMarketIAP, bool> filterFunc,string tag="") => MarketIAPVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MarketIAP
	#region MarketIgnore
		public static int GetCountMarketIgnoreSlice(string tag="") => MarketIgnoreVisitor.GetCount(tag);
		public static string GetFileNameMarketIgnoreSlice() => MarketIgnoreVisitor.GetFileName();
		public static PBC::RepeatedField<rawMarketIgnore> GetMarketIgnoreSlice(string tag="") => MarketIgnoreVisitor.All(tag);
		public static void RangeMarketIgnoreSlice(Action<int, rawMarketIgnore> filter,string tag="") => MarketIgnoreVisitor.Range(filter,tag);
		public static rawMarketIgnore? GetMarketIgnoreByIndex(int index,string tag="") => MarketIgnoreVisitor.GetByIndex(index,tag);
		public static List<rawMarketIgnore> GetMarketIgnoreByFilter(Func<rawMarketIgnore, bool> filterFunc,string tag="") => MarketIgnoreVisitor.GetByFilter(filterFunc,tag);
		public static rawMarketIgnore? GetOneMarketIgnoreByFilter(Func<rawMarketIgnore, bool> filterFunc,string tag="") => MarketIgnoreVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MarketIgnore
	#region MarketIncrease
		public static int GetCountMarketIncreaseMap(string tag="") => MarketIncreaseVisitor.GetCount(tag);
		public static string GetFileNameMarketIncreaseMap() => MarketIncreaseVisitor.GetFileName();
		public static List<int> SortedKeysMarketIncreaseMap(string tag="") => MarketIncreaseVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMarketIncrease> GetMarketIncreaseMap(string tag="") => MarketIncreaseVisitor.All(tag);
		public static void RangeMarketIncreaseMap(Action<int, rawMarketIncrease> filter,string tag="") => MarketIncreaseVisitor.Range(filter,tag);
		public static List<int> KeysMarketIncreaseMap(string tag="") => MarketIncreaseVisitor.Keys(tag);
		public static rawMarketIncrease? GetMarketIncrease(int key,string tag="") => MarketIncreaseVisitor.Get(key,tag);
		public static List<rawMarketIncrease> GetMarketIncreaseByFilter(Func<rawMarketIncrease, bool> filterFunc,string tag="") => MarketIncreaseVisitor.GetByFilter(filterFunc,tag);
		public static rawMarketIncrease? GetOneMarketIncreaseByFilter(Func<rawMarketIncrease, bool> filterFunc,string tag="") => MarketIncreaseVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MarketIncrease
	#region MarketSlidePack
		public static int GetCountMarketSlidePackMap(string tag="") => MarketSlidePackVisitor.GetCount(tag);
		public static string GetFileNameMarketSlidePackMap() => MarketSlidePackVisitor.GetFileName();
		public static List<int> SortedKeysMarketSlidePackMap(string tag="") => MarketSlidePackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMarketSlidePack> GetMarketSlidePackMap(string tag="") => MarketSlidePackVisitor.All(tag);
		public static void RangeMarketSlidePackMap(Action<int, rawMarketSlidePack> filter,string tag="") => MarketSlidePackVisitor.Range(filter,tag);
		public static List<int> KeysMarketSlidePackMap(string tag="") => MarketSlidePackVisitor.Keys(tag);
		public static rawMarketSlidePack? GetMarketSlidePack(int key,string tag="") => MarketSlidePackVisitor.Get(key,tag);
		public static List<rawMarketSlidePack> GetMarketSlidePackByFilter(Func<rawMarketSlidePack, bool> filterFunc,string tag="") => MarketSlidePackVisitor.GetByFilter(filterFunc,tag);
		public static rawMarketSlidePack? GetOneMarketSlidePackByFilter(Func<rawMarketSlidePack, bool> filterFunc,string tag="") => MarketSlidePackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MarketSlidePack
	#region MarketSlidePackDetail
		public static int GetCountMarketSlidePackDetailMap(string tag="") => MarketSlidePackDetailVisitor.GetCount(tag);
		public static string GetFileNameMarketSlidePackDetailMap() => MarketSlidePackDetailVisitor.GetFileName();
		public static List<int> SortedKeysMarketSlidePackDetailMap(string tag="") => MarketSlidePackDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMarketSlidePackDetail> GetMarketSlidePackDetailMap(string tag="") => MarketSlidePackDetailVisitor.All(tag);
		public static void RangeMarketSlidePackDetailMap(Action<int, rawMarketSlidePackDetail> filter,string tag="") => MarketSlidePackDetailVisitor.Range(filter,tag);
		public static List<int> KeysMarketSlidePackDetailMap(string tag="") => MarketSlidePackDetailVisitor.Keys(tag);
		public static rawMarketSlidePackDetail? GetMarketSlidePackDetail(int key,string tag="") => MarketSlidePackDetailVisitor.Get(key,tag);
		public static List<rawMarketSlidePackDetail> GetMarketSlidePackDetailByFilter(Func<rawMarketSlidePackDetail, bool> filterFunc,string tag="") => MarketSlidePackDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawMarketSlidePackDetail? GetOneMarketSlidePackDetailByFilter(Func<rawMarketSlidePackDetail, bool> filterFunc,string tag="") => MarketSlidePackDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MarketSlidePackDetail
	#region MarketWeight
		public static int GetCountMarketWeightMap(string tag="") => MarketWeightVisitor.GetCount(tag);
		public static string GetFileNameMarketWeightMap() => MarketWeightVisitor.GetFileName();
		public static List<int> SortedKeysMarketWeightMap(string tag="") => MarketWeightVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMarketWeight> GetMarketWeightMap(string tag="") => MarketWeightVisitor.All(tag);
		public static void RangeMarketWeightMap(Action<int, rawMarketWeight> filter,string tag="") => MarketWeightVisitor.Range(filter,tag);
		public static List<int> KeysMarketWeightMap(string tag="") => MarketWeightVisitor.Keys(tag);
		public static rawMarketWeight? GetMarketWeight(int key,string tag="") => MarketWeightVisitor.Get(key,tag);
		public static List<rawMarketWeight> GetMarketWeightByFilter(Func<rawMarketWeight, bool> filterFunc,string tag="") => MarketWeightVisitor.GetByFilter(filterFunc,tag);
		public static rawMarketWeight? GetOneMarketWeightByFilter(Func<rawMarketWeight, bool> filterFunc,string tag="") => MarketWeightVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MarketWeight
	#region MergeBoard
		public static int GetCountMergeBoardMap(string tag="") => MergeBoardVisitor.GetCount(tag);
		public static string GetFileNameMergeBoardMap() => MergeBoardVisitor.GetFileName();
		public static List<int> SortedKeysMergeBoardMap(string tag="") => MergeBoardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMergeBoard> GetMergeBoardMap(string tag="") => MergeBoardVisitor.All(tag);
		public static void RangeMergeBoardMap(Action<int, rawMergeBoard> filter,string tag="") => MergeBoardVisitor.Range(filter,tag);
		public static List<int> KeysMergeBoardMap(string tag="") => MergeBoardVisitor.Keys(tag);
		public static rawMergeBoard? GetMergeBoard(int key,string tag="") => MergeBoardVisitor.Get(key,tag);
		public static List<rawMergeBoard> GetMergeBoardByFilter(Func<rawMergeBoard, bool> filterFunc,string tag="") => MergeBoardVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeBoard? GetOneMergeBoardByFilter(Func<rawMergeBoard, bool> filterFunc,string tag="") => MergeBoardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeBoard
	#region MergeBoardEnergy
		public static int GetCountMergeBoardEnergyMap(string tag="") => MergeBoardEnergyVisitor.GetCount(tag);
		public static string GetFileNameMergeBoardEnergyMap() => MergeBoardEnergyVisitor.GetFileName();
		public static List<int> SortedKeysMergeBoardEnergyMap(string tag="") => MergeBoardEnergyVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMergeBoardEnergy> GetMergeBoardEnergyMap(string tag="") => MergeBoardEnergyVisitor.All(tag);
		public static void RangeMergeBoardEnergyMap(Action<int, rawMergeBoardEnergy> filter,string tag="") => MergeBoardEnergyVisitor.Range(filter,tag);
		public static List<int> KeysMergeBoardEnergyMap(string tag="") => MergeBoardEnergyVisitor.Keys(tag);
		public static rawMergeBoardEnergy? GetMergeBoardEnergy(int key,string tag="") => MergeBoardEnergyVisitor.Get(key,tag);
		public static List<rawMergeBoardEnergy> GetMergeBoardEnergyByFilter(Func<rawMergeBoardEnergy, bool> filterFunc,string tag="") => MergeBoardEnergyVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeBoardEnergy? GetOneMergeBoardEnergyByFilter(Func<rawMergeBoardEnergy, bool> filterFunc,string tag="") => MergeBoardEnergyVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeBoardEnergy
	#region MergeBoardGrp
		public static int GetCountMergeBoardGrpMap(string tag="") => MergeBoardGrpVisitor.GetCount(tag);
		public static string GetFileNameMergeBoardGrpMap() => MergeBoardGrpVisitor.GetFileName();
		public static List<int> SortedKeysMergeBoardGrpMap(string tag="") => MergeBoardGrpVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMergeBoardGrp> GetMergeBoardGrpMap(string tag="") => MergeBoardGrpVisitor.All(tag);
		public static void RangeMergeBoardGrpMap(Action<int, rawMergeBoardGrp> filter,string tag="") => MergeBoardGrpVisitor.Range(filter,tag);
		public static List<int> KeysMergeBoardGrpMap(string tag="") => MergeBoardGrpVisitor.Keys(tag);
		public static rawMergeBoardGrp? GetMergeBoardGrp(int key,string tag="") => MergeBoardGrpVisitor.Get(key,tag);
		public static List<rawMergeBoardGrp> GetMergeBoardGrpByFilter(Func<rawMergeBoardGrp, bool> filterFunc,string tag="") => MergeBoardGrpVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeBoardGrp? GetOneMergeBoardGrpByFilter(Func<rawMergeBoardGrp, bool> filterFunc,string tag="") => MergeBoardGrpVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeBoardGrp
	#region MergeBoardOrder
		public static int GetCountMergeBoardOrderMap(string tag="") => MergeBoardOrderVisitor.GetCount(tag);
		public static string GetFileNameMergeBoardOrderMap() => MergeBoardOrderVisitor.GetFileName();
		public static List<int> SortedKeysMergeBoardOrderMap(string tag="") => MergeBoardOrderVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMergeBoardOrder> GetMergeBoardOrderMap(string tag="") => MergeBoardOrderVisitor.All(tag);
		public static void RangeMergeBoardOrderMap(Action<int, rawMergeBoardOrder> filter,string tag="") => MergeBoardOrderVisitor.Range(filter,tag);
		public static List<int> KeysMergeBoardOrderMap(string tag="") => MergeBoardOrderVisitor.Keys(tag);
		public static rawMergeBoardOrder? GetMergeBoardOrder(int key,string tag="") => MergeBoardOrderVisitor.Get(key,tag);
		public static List<rawMergeBoardOrder> GetMergeBoardOrderByFilter(Func<rawMergeBoardOrder, bool> filterFunc,string tag="") => MergeBoardOrderVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeBoardOrder? GetOneMergeBoardOrderByFilter(Func<rawMergeBoardOrder, bool> filterFunc,string tag="") => MergeBoardOrderVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeBoardOrder
	#region MergeCloud
		public static int GetCountMergeCloudSlice(string tag="") => MergeCloudVisitor.GetCount(tag);
		public static string GetFileNameMergeCloudSlice() => MergeCloudVisitor.GetFileName();
		public static PBC::RepeatedField<rawMergeCloud> GetMergeCloudSlice(string tag="") => MergeCloudVisitor.All(tag);
		public static void RangeMergeCloudSlice(Action<int, rawMergeCloud> filter,string tag="") => MergeCloudVisitor.Range(filter,tag);
		public static rawMergeCloud? GetMergeCloudByIndex(int index,string tag="") => MergeCloudVisitor.GetByIndex(index,tag);
		public static List<rawMergeCloud> GetMergeCloudByFilter(Func<rawMergeCloud, bool> filterFunc,string tag="") => MergeCloudVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeCloud? GetOneMergeCloudByFilter(Func<rawMergeCloud, bool> filterFunc,string tag="") => MergeCloudVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeCloud
	#region MergeDifficulty
		public static int GetCountMergeDifficultyMap(string tag="") => MergeDifficultyVisitor.GetCount(tag);
		public static string GetFileNameMergeDifficultyMap() => MergeDifficultyVisitor.GetFileName();
		public static List<int> SortedKeysMergeDifficultyMap(string tag="") => MergeDifficultyVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMergeDifficulty> GetMergeDifficultyMap(string tag="") => MergeDifficultyVisitor.All(tag);
		public static void RangeMergeDifficultyMap(Action<int, rawMergeDifficulty> filter,string tag="") => MergeDifficultyVisitor.Range(filter,tag);
		public static List<int> KeysMergeDifficultyMap(string tag="") => MergeDifficultyVisitor.Keys(tag);
		public static rawMergeDifficulty? GetMergeDifficulty(int key,string tag="") => MergeDifficultyVisitor.Get(key,tag);
		public static List<rawMergeDifficulty> GetMergeDifficultyByFilter(Func<rawMergeDifficulty, bool> filterFunc,string tag="") => MergeDifficultyVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeDifficulty? GetOneMergeDifficultyByFilter(Func<rawMergeDifficulty, bool> filterFunc,string tag="") => MergeDifficultyVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeDifficulty
	#region MergeFixedItem
		public static int GetCountMergeFixedItemSlice(string tag="") => MergeFixedItemVisitor.GetCount(tag);
		public static string GetFileNameMergeFixedItemSlice() => MergeFixedItemVisitor.GetFileName();
		public static PBC::RepeatedField<rawMergeFixedItem> GetMergeFixedItemSlice(string tag="") => MergeFixedItemVisitor.All(tag);
		public static void RangeMergeFixedItemSlice(Action<int, rawMergeFixedItem> filter,string tag="") => MergeFixedItemVisitor.Range(filter,tag);
		public static rawMergeFixedItem? GetMergeFixedItemByIndex(int index,string tag="") => MergeFixedItemVisitor.GetByIndex(index,tag);
		public static List<rawMergeFixedItem> GetMergeFixedItemByFilter(Func<rawMergeFixedItem, bool> filterFunc,string tag="") => MergeFixedItemVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeFixedItem? GetOneMergeFixedItemByFilter(Func<rawMergeFixedItem, bool> filterFunc,string tag="") => MergeFixedItemVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeFixedItem
	#region MergeFixedOutput
		public static int GetCountMergeFixedOutputSlice(string tag="") => MergeFixedOutputVisitor.GetCount(tag);
		public static string GetFileNameMergeFixedOutputSlice() => MergeFixedOutputVisitor.GetFileName();
		public static PBC::RepeatedField<rawMergeFixedOutput> GetMergeFixedOutputSlice(string tag="") => MergeFixedOutputVisitor.All(tag);
		public static void RangeMergeFixedOutputSlice(Action<int, rawMergeFixedOutput> filter,string tag="") => MergeFixedOutputVisitor.Range(filter,tag);
		public static rawMergeFixedOutput? GetMergeFixedOutputByIndex(int index,string tag="") => MergeFixedOutputVisitor.GetByIndex(index,tag);
		public static List<rawMergeFixedOutput> GetMergeFixedOutputByFilter(Func<rawMergeFixedOutput, bool> filterFunc,string tag="") => MergeFixedOutputVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeFixedOutput? GetOneMergeFixedOutputByFilter(Func<rawMergeFixedOutput, bool> filterFunc,string tag="") => MergeFixedOutputVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeFixedOutput
	#region MergeGrid
		public static int GetCountMergeGridMap(string tag="") => MergeGridVisitor.GetCount(tag);
		public static string GetFileNameMergeGridMap() => MergeGridVisitor.GetFileName();
		public static List<int> SortedKeysMergeGridMap(string tag="") => MergeGridVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMergeGrid> GetMergeGridMap(string tag="") => MergeGridVisitor.All(tag);
		public static void RangeMergeGridMap(Action<int, rawMergeGrid> filter,string tag="") => MergeGridVisitor.Range(filter,tag);
		public static List<int> KeysMergeGridMap(string tag="") => MergeGridVisitor.Keys(tag);
		public static rawMergeGrid? GetMergeGrid(int key,string tag="") => MergeGridVisitor.Get(key,tag);
		public static List<rawMergeGrid> GetMergeGridByFilter(Func<rawMergeGrid, bool> filterFunc,string tag="") => MergeGridVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeGrid? GetOneMergeGridByFilter(Func<rawMergeGrid, bool> filterFunc,string tag="") => MergeGridVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeGrid
	#region MergeGridArea
		public static int GetCountMergeGridAreaSlice(string tag="") => MergeGridAreaVisitor.GetCount(tag);
		public static string GetFileNameMergeGridAreaSlice() => MergeGridAreaVisitor.GetFileName();
		public static PBC::RepeatedField<rawMergeGridArea> GetMergeGridAreaSlice(string tag="") => MergeGridAreaVisitor.All(tag);
		public static void RangeMergeGridAreaSlice(Action<int, rawMergeGridArea> filter,string tag="") => MergeGridAreaVisitor.Range(filter,tag);
		public static rawMergeGridArea? GetMergeGridAreaByIndex(int index,string tag="") => MergeGridAreaVisitor.GetByIndex(index,tag);
		public static List<rawMergeGridArea> GetMergeGridAreaByFilter(Func<rawMergeGridArea, bool> filterFunc,string tag="") => MergeGridAreaVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeGridArea? GetOneMergeGridAreaByFilter(Func<rawMergeGridArea, bool> filterFunc,string tag="") => MergeGridAreaVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeGridArea
	#region MergeItemCategory
		public static int GetCountMergeItemCategoryMap(string tag="") => MergeItemCategoryVisitor.GetCount(tag);
		public static string GetFileNameMergeItemCategoryMap() => MergeItemCategoryVisitor.GetFileName();
		public static List<string> SortedKeysMergeItemCategoryMap(string tag="") => MergeItemCategoryVisitor.SortedKeys(tag);
		public static PBC::MapField<string, rawMergeItemCategory> GetMergeItemCategoryMap(string tag="") => MergeItemCategoryVisitor.All(tag);
		public static void RangeMergeItemCategoryMap(Action<string, rawMergeItemCategory> filter,string tag="") => MergeItemCategoryVisitor.Range(filter,tag);
		public static List<string> KeysMergeItemCategoryMap(string tag="") => MergeItemCategoryVisitor.Keys(tag);
		public static rawMergeItemCategory? GetMergeItemCategory(string key,string tag="") => MergeItemCategoryVisitor.Get(key,tag);
		public static List<rawMergeItemCategory> GetMergeItemCategoryByFilter(Func<rawMergeItemCategory, bool> filterFunc,string tag="") => MergeItemCategoryVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeItemCategory? GetOneMergeItemCategoryByFilter(Func<rawMergeItemCategory, bool> filterFunc,string tag="") => MergeItemCategoryVisitor.GetOneByFilter(filterFunc,tag);
        public static rawMergeItemCategory GetMergeItemCategoryByCombinedKeys(MergeItemCategoryVisitor.CK ck) => MergeItemCategoryVisitor.GetByCombinedKeys(ck);
	#endregion MergeItemCategory
	#region MergeLevel
		public static int GetCountMergeLevelSlice(string tag="") => MergeLevelVisitor.GetCount(tag);
		public static string GetFileNameMergeLevelSlice() => MergeLevelVisitor.GetFileName();
		public static PBC::RepeatedField<rawMergeLevel> GetMergeLevelSlice(string tag="") => MergeLevelVisitor.All(tag);
		public static void RangeMergeLevelSlice(Action<int, rawMergeLevel> filter,string tag="") => MergeLevelVisitor.Range(filter,tag);
		public static rawMergeLevel? GetMergeLevelByIndex(int index,string tag="") => MergeLevelVisitor.GetByIndex(index,tag);
		public static List<rawMergeLevel> GetMergeLevelByFilter(Func<rawMergeLevel, bool> filterFunc,string tag="") => MergeLevelVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeLevel? GetOneMergeLevelByFilter(Func<rawMergeLevel, bool> filterFunc,string tag="") => MergeLevelVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeLevel
	#region MergeLevelRate
		public static int GetCountMergeLevelRateMap(string tag="") => MergeLevelRateVisitor.GetCount(tag);
		public static string GetFileNameMergeLevelRateMap() => MergeLevelRateVisitor.GetFileName();
		public static List<int> SortedKeysMergeLevelRateMap(string tag="") => MergeLevelRateVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMergeLevelRate> GetMergeLevelRateMap(string tag="") => MergeLevelRateVisitor.All(tag);
		public static void RangeMergeLevelRateMap(Action<int, rawMergeLevelRate> filter,string tag="") => MergeLevelRateVisitor.Range(filter,tag);
		public static List<int> KeysMergeLevelRateMap(string tag="") => MergeLevelRateVisitor.Keys(tag);
		public static rawMergeLevelRate? GetMergeLevelRate(int key,string tag="") => MergeLevelRateVisitor.Get(key,tag);
		public static List<rawMergeLevelRate> GetMergeLevelRateByFilter(Func<rawMergeLevelRate, bool> filterFunc,string tag="") => MergeLevelRateVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeLevelRate? GetOneMergeLevelRateByFilter(Func<rawMergeLevelRate, bool> filterFunc,string tag="") => MergeLevelRateVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeLevelRate
	#region MergeMixCost
		public static int GetCountMergeMixCostMap(string tag="") => MergeMixCostVisitor.GetCount(tag);
		public static string GetFileNameMergeMixCostMap() => MergeMixCostVisitor.GetFileName();
		public static List<int> SortedKeysMergeMixCostMap(string tag="") => MergeMixCostVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMergeMixCost> GetMergeMixCostMap(string tag="") => MergeMixCostVisitor.All(tag);
		public static void RangeMergeMixCostMap(Action<int, rawMergeMixCost> filter,string tag="") => MergeMixCostVisitor.Range(filter,tag);
		public static List<int> KeysMergeMixCostMap(string tag="") => MergeMixCostVisitor.Keys(tag);
		public static rawMergeMixCost? GetMergeMixCost(int key,string tag="") => MergeMixCostVisitor.Get(key,tag);
		public static List<rawMergeMixCost> GetMergeMixCostByFilter(Func<rawMergeMixCost, bool> filterFunc,string tag="") => MergeMixCostVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeMixCost? GetOneMergeMixCostByFilter(Func<rawMergeMixCost, bool> filterFunc,string tag="") => MergeMixCostVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeMixCost
	#region MergeRule
		public static int GetCountMergeRuleMap(string tag="") => MergeRuleVisitor.GetCount(tag);
		public static string GetFileNameMergeRuleMap() => MergeRuleVisitor.GetFileName();
		public static List<int> SortedKeysMergeRuleMap(string tag="") => MergeRuleVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMergeRule> GetMergeRuleMap(string tag="") => MergeRuleVisitor.All(tag);
		public static void RangeMergeRuleMap(Action<int, rawMergeRule> filter,string tag="") => MergeRuleVisitor.Range(filter,tag);
		public static List<int> KeysMergeRuleMap(string tag="") => MergeRuleVisitor.Keys(tag);
		public static rawMergeRule? GetMergeRule(int key,string tag="") => MergeRuleVisitor.Get(key,tag);
		public static List<rawMergeRule> GetMergeRuleByFilter(Func<rawMergeRule, bool> filterFunc,string tag="") => MergeRuleVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeRule? GetOneMergeRuleByFilter(Func<rawMergeRule, bool> filterFunc,string tag="") => MergeRuleVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeRule
	#region MergeRuledOutput
		public static int GetCountMergeRuledOutputMap(string tag="") => MergeRuledOutputVisitor.GetCount(tag);
		public static string GetFileNameMergeRuledOutputMap() => MergeRuledOutputVisitor.GetFileName();
		public static List<int> SortedKeysMergeRuledOutputMap(string tag="") => MergeRuledOutputVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMergeRuledOutput> GetMergeRuledOutputMap(string tag="") => MergeRuledOutputVisitor.All(tag);
		public static void RangeMergeRuledOutputMap(Action<int, rawMergeRuledOutput> filter,string tag="") => MergeRuledOutputVisitor.Range(filter,tag);
		public static List<int> KeysMergeRuledOutputMap(string tag="") => MergeRuledOutputVisitor.Keys(tag);
		public static rawMergeRuledOutput? GetMergeRuledOutput(int key,string tag="") => MergeRuledOutputVisitor.Get(key,tag);
		public static List<rawMergeRuledOutput> GetMergeRuledOutputByFilter(Func<rawMergeRuledOutput, bool> filterFunc,string tag="") => MergeRuledOutputVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeRuledOutput? GetOneMergeRuledOutputByFilter(Func<rawMergeRuledOutput, bool> filterFunc,string tag="") => MergeRuledOutputVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeRuledOutput
	#region MergeTapCost
		public static int GetCountMergeTapCostMap(string tag="") => MergeTapCostVisitor.GetCount(tag);
		public static string GetFileNameMergeTapCostMap() => MergeTapCostVisitor.GetFileName();
		public static List<int> SortedKeysMergeTapCostMap(string tag="") => MergeTapCostVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMergeTapCost> GetMergeTapCostMap(string tag="") => MergeTapCostVisitor.All(tag);
		public static void RangeMergeTapCostMap(Action<int, rawMergeTapCost> filter,string tag="") => MergeTapCostVisitor.Range(filter,tag);
		public static List<int> KeysMergeTapCostMap(string tag="") => MergeTapCostVisitor.Keys(tag);
		public static rawMergeTapCost? GetMergeTapCost(int key,string tag="") => MergeTapCostVisitor.Get(key,tag);
		public static List<rawMergeTapCost> GetMergeTapCostByFilter(Func<rawMergeTapCost, bool> filterFunc,string tag="") => MergeTapCostVisitor.GetByFilter(filterFunc,tag);
		public static rawMergeTapCost? GetOneMergeTapCostByFilter(Func<rawMergeTapCost, bool> filterFunc,string tag="") => MergeTapCostVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MergeTapCost
	#region MicMilestone
		public static int GetCountMicMilestoneMap(string tag="") => MicMilestoneVisitor.GetCount(tag);
		public static string GetFileNameMicMilestoneMap() => MicMilestoneVisitor.GetFileName();
		public static List<int> SortedKeysMicMilestoneMap(string tag="") => MicMilestoneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMicMilestone> GetMicMilestoneMap(string tag="") => MicMilestoneVisitor.All(tag);
		public static void RangeMicMilestoneMap(Action<int, rawMicMilestone> filter,string tag="") => MicMilestoneVisitor.Range(filter,tag);
		public static List<int> KeysMicMilestoneMap(string tag="") => MicMilestoneVisitor.Keys(tag);
		public static rawMicMilestone? GetMicMilestone(int key,string tag="") => MicMilestoneVisitor.Get(key,tag);
		public static List<rawMicMilestone> GetMicMilestoneByFilter(Func<rawMicMilestone, bool> filterFunc,string tag="") => MicMilestoneVisitor.GetByFilter(filterFunc,tag);
		public static rawMicMilestone? GetOneMicMilestoneByFilter(Func<rawMicMilestone, bool> filterFunc,string tag="") => MicMilestoneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MicMilestone
	#region MicMilestoneDetail
		public static int GetCountMicMilestoneDetailMap(string tag="") => MicMilestoneDetailVisitor.GetCount(tag);
		public static string GetFileNameMicMilestoneDetailMap() => MicMilestoneDetailVisitor.GetFileName();
		public static List<int> SortedKeysMicMilestoneDetailMap(string tag="") => MicMilestoneDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMicMilestoneDetail> GetMicMilestoneDetailMap(string tag="") => MicMilestoneDetailVisitor.All(tag);
		public static void RangeMicMilestoneDetailMap(Action<int, rawMicMilestoneDetail> filter,string tag="") => MicMilestoneDetailVisitor.Range(filter,tag);
		public static List<int> KeysMicMilestoneDetailMap(string tag="") => MicMilestoneDetailVisitor.Keys(tag);
		public static rawMicMilestoneDetail? GetMicMilestoneDetail(int key,string tag="") => MicMilestoneDetailVisitor.Get(key,tag);
		public static List<rawMicMilestoneDetail> GetMicMilestoneDetailByFilter(Func<rawMicMilestoneDetail, bool> filterFunc,string tag="") => MicMilestoneDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawMicMilestoneDetail? GetOneMicMilestoneDetailByFilter(Func<rawMicMilestoneDetail, bool> filterFunc,string tag="") => MicMilestoneDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MicMilestoneDetail
	#region MicMilestoneGroup
		public static int GetCountMicMilestoneGroupMap(string tag="") => MicMilestoneGroupVisitor.GetCount(tag);
		public static string GetFileNameMicMilestoneGroupMap() => MicMilestoneGroupVisitor.GetFileName();
		public static List<int> SortedKeysMicMilestoneGroupMap(string tag="") => MicMilestoneGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMicMilestoneGroup> GetMicMilestoneGroupMap(string tag="") => MicMilestoneGroupVisitor.All(tag);
		public static void RangeMicMilestoneGroupMap(Action<int, rawMicMilestoneGroup> filter,string tag="") => MicMilestoneGroupVisitor.Range(filter,tag);
		public static List<int> KeysMicMilestoneGroupMap(string tag="") => MicMilestoneGroupVisitor.Keys(tag);
		public static rawMicMilestoneGroup? GetMicMilestoneGroup(int key,string tag="") => MicMilestoneGroupVisitor.Get(key,tag);
		public static List<rawMicMilestoneGroup> GetMicMilestoneGroupByFilter(Func<rawMicMilestoneGroup, bool> filterFunc,string tag="") => MicMilestoneGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawMicMilestoneGroup? GetOneMicMilestoneGroupByFilter(Func<rawMicMilestoneGroup, bool> filterFunc,string tag="") => MicMilestoneGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MicMilestoneGroup
	#region MiniGameBeadsBase
		public static int GetCountMiniGameBeadsBaseMap(string tag="") => MiniGameBeadsBaseVisitor.GetCount(tag);
		public static string GetFileNameMiniGameBeadsBaseMap() => MiniGameBeadsBaseVisitor.GetFileName();
		public static List<int> SortedKeysMiniGameBeadsBaseMap(string tag="") => MiniGameBeadsBaseVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMiniGameBeadsBase> GetMiniGameBeadsBaseMap(string tag="") => MiniGameBeadsBaseVisitor.All(tag);
		public static void RangeMiniGameBeadsBaseMap(Action<int, rawMiniGameBeadsBase> filter,string tag="") => MiniGameBeadsBaseVisitor.Range(filter,tag);
		public static List<int> KeysMiniGameBeadsBaseMap(string tag="") => MiniGameBeadsBaseVisitor.Keys(tag);
		public static rawMiniGameBeadsBase? GetMiniGameBeadsBase(int key,string tag="") => MiniGameBeadsBaseVisitor.Get(key,tag);
		public static List<rawMiniGameBeadsBase> GetMiniGameBeadsBaseByFilter(Func<rawMiniGameBeadsBase, bool> filterFunc,string tag="") => MiniGameBeadsBaseVisitor.GetByFilter(filterFunc,tag);
		public static rawMiniGameBeadsBase? GetOneMiniGameBeadsBaseByFilter(Func<rawMiniGameBeadsBase, bool> filterFunc,string tag="") => MiniGameBeadsBaseVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MiniGameBeadsBase
	#region MiniGameBeadsCell
		public static int GetCountMiniGameBeadsCellMap(string tag="") => MiniGameBeadsCellVisitor.GetCount(tag);
		public static string GetFileNameMiniGameBeadsCellMap() => MiniGameBeadsCellVisitor.GetFileName();
		public static List<int> SortedKeysMiniGameBeadsCellMap(string tag="") => MiniGameBeadsCellVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMiniGameBeadsCell> GetMiniGameBeadsCellMap(string tag="") => MiniGameBeadsCellVisitor.All(tag);
		public static void RangeMiniGameBeadsCellMap(Action<int, rawMiniGameBeadsCell> filter,string tag="") => MiniGameBeadsCellVisitor.Range(filter,tag);
		public static List<int> KeysMiniGameBeadsCellMap(string tag="") => MiniGameBeadsCellVisitor.Keys(tag);
		public static rawMiniGameBeadsCell? GetMiniGameBeadsCell(int key,string tag="") => MiniGameBeadsCellVisitor.Get(key,tag);
		public static List<rawMiniGameBeadsCell> GetMiniGameBeadsCellByFilter(Func<rawMiniGameBeadsCell, bool> filterFunc,string tag="") => MiniGameBeadsCellVisitor.GetByFilter(filterFunc,tag);
		public static rawMiniGameBeadsCell? GetOneMiniGameBeadsCellByFilter(Func<rawMiniGameBeadsCell, bool> filterFunc,string tag="") => MiniGameBeadsCellVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MiniGameBeadsCell
	#region MiniGameBeadsLevel
		public static int GetCountMiniGameBeadsLevelMap(string tag="") => MiniGameBeadsLevelVisitor.GetCount(tag);
		public static string GetFileNameMiniGameBeadsLevelMap() => MiniGameBeadsLevelVisitor.GetFileName();
		public static List<int> SortedKeysMiniGameBeadsLevelMap(string tag="") => MiniGameBeadsLevelVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMiniGameBeadsLevel> GetMiniGameBeadsLevelMap(string tag="") => MiniGameBeadsLevelVisitor.All(tag);
		public static void RangeMiniGameBeadsLevelMap(Action<int, rawMiniGameBeadsLevel> filter,string tag="") => MiniGameBeadsLevelVisitor.Range(filter,tag);
		public static List<int> KeysMiniGameBeadsLevelMap(string tag="") => MiniGameBeadsLevelVisitor.Keys(tag);
		public static rawMiniGameBeadsLevel? GetMiniGameBeadsLevel(int key,string tag="") => MiniGameBeadsLevelVisitor.Get(key,tag);
		public static List<rawMiniGameBeadsLevel> GetMiniGameBeadsLevelByFilter(Func<rawMiniGameBeadsLevel, bool> filterFunc,string tag="") => MiniGameBeadsLevelVisitor.GetByFilter(filterFunc,tag);
		public static rawMiniGameBeadsLevel? GetOneMiniGameBeadsLevelByFilter(Func<rawMiniGameBeadsLevel, bool> filterFunc,string tag="") => MiniGameBeadsLevelVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MiniGameBeadsLevel
	#region MiniGameBeadsStage
		public static int GetCountMiniGameBeadsStageMap(string tag="") => MiniGameBeadsStageVisitor.GetCount(tag);
		public static string GetFileNameMiniGameBeadsStageMap() => MiniGameBeadsStageVisitor.GetFileName();
		public static List<int> SortedKeysMiniGameBeadsStageMap(string tag="") => MiniGameBeadsStageVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMiniGameBeadsStage> GetMiniGameBeadsStageMap(string tag="") => MiniGameBeadsStageVisitor.All(tag);
		public static void RangeMiniGameBeadsStageMap(Action<int, rawMiniGameBeadsStage> filter,string tag="") => MiniGameBeadsStageVisitor.Range(filter,tag);
		public static List<int> KeysMiniGameBeadsStageMap(string tag="") => MiniGameBeadsStageVisitor.Keys(tag);
		public static rawMiniGameBeadsStage? GetMiniGameBeadsStage(int key,string tag="") => MiniGameBeadsStageVisitor.Get(key,tag);
		public static List<rawMiniGameBeadsStage> GetMiniGameBeadsStageByFilter(Func<rawMiniGameBeadsStage, bool> filterFunc,string tag="") => MiniGameBeadsStageVisitor.GetByFilter(filterFunc,tag);
		public static rawMiniGameBeadsStage? GetOneMiniGameBeadsStageByFilter(Func<rawMiniGameBeadsStage, bool> filterFunc,string tag="") => MiniGameBeadsStageVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MiniGameBeadsStage
	#region MiniGameSheet
		public static int GetCountMiniGameSheetMap(string tag="") => MiniGameSheetVisitor.GetCount(tag);
		public static string GetFileNameMiniGameSheetMap() => MiniGameSheetVisitor.GetFileName();
		public static List<int> SortedKeysMiniGameSheetMap(string tag="") => MiniGameSheetVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMiniGameSheet> GetMiniGameSheetMap(string tag="") => MiniGameSheetVisitor.All(tag);
		public static void RangeMiniGameSheetMap(Action<int, rawMiniGameSheet> filter,string tag="") => MiniGameSheetVisitor.Range(filter,tag);
		public static List<int> KeysMiniGameSheetMap(string tag="") => MiniGameSheetVisitor.Keys(tag);
		public static rawMiniGameSheet? GetMiniGameSheet(int key,string tag="") => MiniGameSheetVisitor.Get(key,tag);
		public static List<rawMiniGameSheet> GetMiniGameSheetByFilter(Func<rawMiniGameSheet, bool> filterFunc,string tag="") => MiniGameSheetVisitor.GetByFilter(filterFunc,tag);
		public static rawMiniGameSheet? GetOneMiniGameSheetByFilter(Func<rawMiniGameSheet, bool> filterFunc,string tag="") => MiniGameSheetVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MiniGameSheet
	#region MiniGameSlideMergeItem
		public static int GetCountMiniGameSlideMergeItemMap(string tag="") => MiniGameSlideMergeItemVisitor.GetCount(tag);
		public static string GetFileNameMiniGameSlideMergeItemMap() => MiniGameSlideMergeItemVisitor.GetFileName();
		public static List<int> SortedKeysMiniGameSlideMergeItemMap(string tag="") => MiniGameSlideMergeItemVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMiniGameSlideMergeItem> GetMiniGameSlideMergeItemMap(string tag="") => MiniGameSlideMergeItemVisitor.All(tag);
		public static void RangeMiniGameSlideMergeItemMap(Action<int, rawMiniGameSlideMergeItem> filter,string tag="") => MiniGameSlideMergeItemVisitor.Range(filter,tag);
		public static List<int> KeysMiniGameSlideMergeItemMap(string tag="") => MiniGameSlideMergeItemVisitor.Keys(tag);
		public static rawMiniGameSlideMergeItem? GetMiniGameSlideMergeItem(int key,string tag="") => MiniGameSlideMergeItemVisitor.Get(key,tag);
		public static List<rawMiniGameSlideMergeItem> GetMiniGameSlideMergeItemByFilter(Func<rawMiniGameSlideMergeItem, bool> filterFunc,string tag="") => MiniGameSlideMergeItemVisitor.GetByFilter(filterFunc,tag);
		public static rawMiniGameSlideMergeItem? GetOneMiniGameSlideMergeItemByFilter(Func<rawMiniGameSlideMergeItem, bool> filterFunc,string tag="") => MiniGameSlideMergeItemVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MiniGameSlideMergeItem
	#region MiniGameSlideMergeLevel
		public static int GetCountMiniGameSlideMergeLevelMap(string tag="") => MiniGameSlideMergeLevelVisitor.GetCount(tag);
		public static string GetFileNameMiniGameSlideMergeLevelMap() => MiniGameSlideMergeLevelVisitor.GetFileName();
		public static List<int> SortedKeysMiniGameSlideMergeLevelMap(string tag="") => MiniGameSlideMergeLevelVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMiniGameSlideMergeLevel> GetMiniGameSlideMergeLevelMap(string tag="") => MiniGameSlideMergeLevelVisitor.All(tag);
		public static void RangeMiniGameSlideMergeLevelMap(Action<int, rawMiniGameSlideMergeLevel> filter,string tag="") => MiniGameSlideMergeLevelVisitor.Range(filter,tag);
		public static List<int> KeysMiniGameSlideMergeLevelMap(string tag="") => MiniGameSlideMergeLevelVisitor.Keys(tag);
		public static rawMiniGameSlideMergeLevel? GetMiniGameSlideMergeLevel(int key,string tag="") => MiniGameSlideMergeLevelVisitor.Get(key,tag);
		public static List<rawMiniGameSlideMergeLevel> GetMiniGameSlideMergeLevelByFilter(Func<rawMiniGameSlideMergeLevel, bool> filterFunc,string tag="") => MiniGameSlideMergeLevelVisitor.GetByFilter(filterFunc,tag);
		public static rawMiniGameSlideMergeLevel? GetOneMiniGameSlideMergeLevelByFilter(Func<rawMiniGameSlideMergeLevel, bool> filterFunc,string tag="") => MiniGameSlideMergeLevelVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MiniGameSlideMergeLevel
	#region MiniGameSlideMergeStage
		public static int GetCountMiniGameSlideMergeStageMap(string tag="") => MiniGameSlideMergeStageVisitor.GetCount(tag);
		public static string GetFileNameMiniGameSlideMergeStageMap() => MiniGameSlideMergeStageVisitor.GetFileName();
		public static List<int> SortedKeysMiniGameSlideMergeStageMap(string tag="") => MiniGameSlideMergeStageVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMiniGameSlideMergeStage> GetMiniGameSlideMergeStageMap(string tag="") => MiniGameSlideMergeStageVisitor.All(tag);
		public static void RangeMiniGameSlideMergeStageMap(Action<int, rawMiniGameSlideMergeStage> filter,string tag="") => MiniGameSlideMergeStageVisitor.Range(filter,tag);
		public static List<int> KeysMiniGameSlideMergeStageMap(string tag="") => MiniGameSlideMergeStageVisitor.Keys(tag);
		public static rawMiniGameSlideMergeStage? GetMiniGameSlideMergeStage(int key,string tag="") => MiniGameSlideMergeStageVisitor.Get(key,tag);
		public static List<rawMiniGameSlideMergeStage> GetMiniGameSlideMergeStageByFilter(Func<rawMiniGameSlideMergeStage, bool> filterFunc,string tag="") => MiniGameSlideMergeStageVisitor.GetByFilter(filterFunc,tag);
		public static rawMiniGameSlideMergeStage? GetOneMiniGameSlideMergeStageByFilter(Func<rawMiniGameSlideMergeStage, bool> filterFunc,string tag="") => MiniGameSlideMergeStageVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MiniGameSlideMergeStage
	#region Monster
		public static int GetCountMonsterMap(string tag="") => MonsterVisitor.GetCount(tag);
		public static string GetFileNameMonsterMap() => MonsterVisitor.GetFileName();
		public static List<int> SortedKeysMonsterMap(string tag="") => MonsterVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMonster> GetMonsterMap(string tag="") => MonsterVisitor.All(tag);
		public static void RangeMonsterMap(Action<int, rawMonster> filter,string tag="") => MonsterVisitor.Range(filter,tag);
		public static List<int> KeysMonsterMap(string tag="") => MonsterVisitor.Keys(tag);
		public static rawMonster? GetMonster(int key,string tag="") => MonsterVisitor.Get(key,tag);
		public static List<rawMonster> GetMonsterByFilter(Func<rawMonster, bool> filterFunc,string tag="") => MonsterVisitor.GetByFilter(filterFunc,tag);
		public static rawMonster? GetOneMonsterByFilter(Func<rawMonster, bool> filterFunc,string tag="") => MonsterVisitor.GetOneByFilter(filterFunc,tag);
	#endregion Monster
	#region MonsterTalk
		public static int GetCountMonsterTalkMap(string tag="") => MonsterTalkVisitor.GetCount(tag);
		public static string GetFileNameMonsterTalkMap() => MonsterTalkVisitor.GetFileName();
		public static List<int> SortedKeysMonsterTalkMap(string tag="") => MonsterTalkVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMonsterTalk> GetMonsterTalkMap(string tag="") => MonsterTalkVisitor.All(tag);
		public static void RangeMonsterTalkMap(Action<int, rawMonsterTalk> filter,string tag="") => MonsterTalkVisitor.Range(filter,tag);
		public static List<int> KeysMonsterTalkMap(string tag="") => MonsterTalkVisitor.Keys(tag);
		public static rawMonsterTalk? GetMonsterTalk(int key,string tag="") => MonsterTalkVisitor.Get(key,tag);
		public static List<rawMonsterTalk> GetMonsterTalkByFilter(Func<rawMonsterTalk, bool> filterFunc,string tag="") => MonsterTalkVisitor.GetByFilter(filterFunc,tag);
		public static rawMonsterTalk? GetOneMonsterTalkByFilter(Func<rawMonsterTalk, bool> filterFunc,string tag="") => MonsterTalkVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MonsterTalk
	#region MultiRank
		public static int GetCountMultiRankMap(string tag="") => MultiRankVisitor.GetCount(tag);
		public static string GetFileNameMultiRankMap() => MultiRankVisitor.GetFileName();
		public static List<int> SortedKeysMultiRankMap(string tag="") => MultiRankVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMultiRank> GetMultiRankMap(string tag="") => MultiRankVisitor.All(tag);
		public static void RangeMultiRankMap(Action<int, rawMultiRank> filter,string tag="") => MultiRankVisitor.Range(filter,tag);
		public static List<int> KeysMultiRankMap(string tag="") => MultiRankVisitor.Keys(tag);
		public static rawMultiRank? GetMultiRank(int key,string tag="") => MultiRankVisitor.Get(key,tag);
		public static List<rawMultiRank> GetMultiRankByFilter(Func<rawMultiRank, bool> filterFunc,string tag="") => MultiRankVisitor.GetByFilter(filterFunc,tag);
		public static rawMultiRank? GetOneMultiRankByFilter(Func<rawMultiRank, bool> filterFunc,string tag="") => MultiRankVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MultiRank
	#region MultiRankDetail
		public static int GetCountMultiRankDetailMap(string tag="") => MultiRankDetailVisitor.GetCount(tag);
		public static string GetFileNameMultiRankDetailMap() => MultiRankDetailVisitor.GetFileName();
		public static List<int> SortedKeysMultiRankDetailMap(string tag="") => MultiRankDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMultiRankDetail> GetMultiRankDetailMap(string tag="") => MultiRankDetailVisitor.All(tag);
		public static void RangeMultiRankDetailMap(Action<int, rawMultiRankDetail> filter,string tag="") => MultiRankDetailVisitor.Range(filter,tag);
		public static List<int> KeysMultiRankDetailMap(string tag="") => MultiRankDetailVisitor.Keys(tag);
		public static rawMultiRankDetail? GetMultiRankDetail(int key,string tag="") => MultiRankDetailVisitor.Get(key,tag);
		public static List<rawMultiRankDetail> GetMultiRankDetailByFilter(Func<rawMultiRankDetail, bool> filterFunc,string tag="") => MultiRankDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawMultiRankDetail? GetOneMultiRankDetailByFilter(Func<rawMultiRankDetail, bool> filterFunc,string tag="") => MultiRankDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MultiRankDetail
	#region MultiRankMilestone
		public static int GetCountMultiRankMilestoneMap(string tag="") => MultiRankMilestoneVisitor.GetCount(tag);
		public static string GetFileNameMultiRankMilestoneMap() => MultiRankMilestoneVisitor.GetFileName();
		public static List<int> SortedKeysMultiRankMilestoneMap(string tag="") => MultiRankMilestoneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMultiRankMilestone> GetMultiRankMilestoneMap(string tag="") => MultiRankMilestoneVisitor.All(tag);
		public static void RangeMultiRankMilestoneMap(Action<int, rawMultiRankMilestone> filter,string tag="") => MultiRankMilestoneVisitor.Range(filter,tag);
		public static List<int> KeysMultiRankMilestoneMap(string tag="") => MultiRankMilestoneVisitor.Keys(tag);
		public static rawMultiRankMilestone? GetMultiRankMilestone(int key,string tag="") => MultiRankMilestoneVisitor.Get(key,tag);
		public static List<rawMultiRankMilestone> GetMultiRankMilestoneByFilter(Func<rawMultiRankMilestone, bool> filterFunc,string tag="") => MultiRankMilestoneVisitor.GetByFilter(filterFunc,tag);
		public static rawMultiRankMilestone? GetOneMultiRankMilestoneByFilter(Func<rawMultiRankMilestone, bool> filterFunc,string tag="") => MultiRankMilestoneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MultiRankMilestone
	#region MultiRankReward
		public static int GetCountMultiRankRewardMap(string tag="") => MultiRankRewardVisitor.GetCount(tag);
		public static string GetFileNameMultiRankRewardMap() => MultiRankRewardVisitor.GetFileName();
		public static List<int> SortedKeysMultiRankRewardMap(string tag="") => MultiRankRewardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMultiRankReward> GetMultiRankRewardMap(string tag="") => MultiRankRewardVisitor.All(tag);
		public static void RangeMultiRankRewardMap(Action<int, rawMultiRankReward> filter,string tag="") => MultiRankRewardVisitor.Range(filter,tag);
		public static List<int> KeysMultiRankRewardMap(string tag="") => MultiRankRewardVisitor.Keys(tag);
		public static rawMultiRankReward? GetMultiRankReward(int key,string tag="") => MultiRankRewardVisitor.Get(key,tag);
		public static List<rawMultiRankReward> GetMultiRankRewardByFilter(Func<rawMultiRankReward, bool> filterFunc,string tag="") => MultiRankRewardVisitor.GetByFilter(filterFunc,tag);
		public static rawMultiRankReward? GetOneMultiRankRewardByFilter(Func<rawMultiRankReward, bool> filterFunc,string tag="") => MultiRankRewardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MultiRankReward
	#region MultiRankRobotDetail
		public static int GetCountMultiRankRobotDetailMap(string tag="") => MultiRankRobotDetailVisitor.GetCount(tag);
		public static string GetFileNameMultiRankRobotDetailMap() => MultiRankRobotDetailVisitor.GetFileName();
		public static List<int> SortedKeysMultiRankRobotDetailMap(string tag="") => MultiRankRobotDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMultiRankRobotDetail> GetMultiRankRobotDetailMap(string tag="") => MultiRankRobotDetailVisitor.All(tag);
		public static void RangeMultiRankRobotDetailMap(Action<int, rawMultiRankRobotDetail> filter,string tag="") => MultiRankRobotDetailVisitor.Range(filter,tag);
		public static List<int> KeysMultiRankRobotDetailMap(string tag="") => MultiRankRobotDetailVisitor.Keys(tag);
		public static rawMultiRankRobotDetail? GetMultiRankRobotDetail(int key,string tag="") => MultiRankRobotDetailVisitor.Get(key,tag);
		public static List<rawMultiRankRobotDetail> GetMultiRankRobotDetailByFilter(Func<rawMultiRankRobotDetail, bool> filterFunc,string tag="") => MultiRankRobotDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawMultiRankRobotDetail? GetOneMultiRankRobotDetailByFilter(Func<rawMultiRankRobotDetail, bool> filterFunc,string tag="") => MultiRankRobotDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MultiRankRobotDetail
	#region MultiRankRobotGroup
		public static int GetCountMultiRankRobotGroupMap(string tag="") => MultiRankRobotGroupVisitor.GetCount(tag);
		public static string GetFileNameMultiRankRobotGroupMap() => MultiRankRobotGroupVisitor.GetFileName();
		public static List<int> SortedKeysMultiRankRobotGroupMap(string tag="") => MultiRankRobotGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawMultiRankRobotGroup> GetMultiRankRobotGroupMap(string tag="") => MultiRankRobotGroupVisitor.All(tag);
		public static void RangeMultiRankRobotGroupMap(Action<int, rawMultiRankRobotGroup> filter,string tag="") => MultiRankRobotGroupVisitor.Range(filter,tag);
		public static List<int> KeysMultiRankRobotGroupMap(string tag="") => MultiRankRobotGroupVisitor.Keys(tag);
		public static rawMultiRankRobotGroup? GetMultiRankRobotGroup(int key,string tag="") => MultiRankRobotGroupVisitor.Get(key,tag);
		public static List<rawMultiRankRobotGroup> GetMultiRankRobotGroupByFilter(Func<rawMultiRankRobotGroup, bool> filterFunc,string tag="") => MultiRankRobotGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawMultiRankRobotGroup? GetOneMultiRankRobotGroupByFilter(Func<rawMultiRankRobotGroup, bool> filterFunc,string tag="") => MultiRankRobotGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion MultiRankRobotGroup
	#region NewSessionPack
		public static int GetCountNewSessionPackMap(string tag="") => NewSessionPackVisitor.GetCount(tag);
		public static string GetFileNameNewSessionPackMap() => NewSessionPackVisitor.GetFileName();
		public static List<int> SortedKeysNewSessionPackMap(string tag="") => NewSessionPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawNewSessionPack> GetNewSessionPackMap(string tag="") => NewSessionPackVisitor.All(tag);
		public static void RangeNewSessionPackMap(Action<int, rawNewSessionPack> filter,string tag="") => NewSessionPackVisitor.Range(filter,tag);
		public static List<int> KeysNewSessionPackMap(string tag="") => NewSessionPackVisitor.Keys(tag);
		public static rawNewSessionPack? GetNewSessionPack(int key,string tag="") => NewSessionPackVisitor.Get(key,tag);
		public static List<rawNewSessionPack> GetNewSessionPackByFilter(Func<rawNewSessionPack, bool> filterFunc,string tag="") => NewSessionPackVisitor.GetByFilter(filterFunc,tag);
		public static rawNewSessionPack? GetOneNewSessionPackByFilter(Func<rawNewSessionPack, bool> filterFunc,string tag="") => NewSessionPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion NewSessionPack
	#region NewUserPack
		public static int GetCountNewUserPackMap(string tag="") => NewUserPackVisitor.GetCount(tag);
		public static string GetFileNameNewUserPackMap() => NewUserPackVisitor.GetFileName();
		public static List<int> SortedKeysNewUserPackMap(string tag="") => NewUserPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawNewUserPack> GetNewUserPackMap(string tag="") => NewUserPackVisitor.All(tag);
		public static void RangeNewUserPackMap(Action<int, rawNewUserPack> filter,string tag="") => NewUserPackVisitor.Range(filter,tag);
		public static List<int> KeysNewUserPackMap(string tag="") => NewUserPackVisitor.Keys(tag);
		public static rawNewUserPack? GetNewUserPack(int key,string tag="") => NewUserPackVisitor.Get(key,tag);
		public static List<rawNewUserPack> GetNewUserPackByFilter(Func<rawNewUserPack, bool> filterFunc,string tag="") => NewUserPackVisitor.GetByFilter(filterFunc,tag);
		public static rawNewUserPack? GetOneNewUserPackByFilter(Func<rawNewUserPack, bool> filterFunc,string tag="") => NewUserPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion NewUserPack
	#region NoticeDetail
		public static int GetCountNoticeDetailMap(string tag="") => NoticeDetailVisitor.GetCount(tag);
		public static string GetFileNameNoticeDetailMap() => NoticeDetailVisitor.GetFileName();
		public static List<int> SortedKeysNoticeDetailMap(string tag="") => NoticeDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawNoticeDetail> GetNoticeDetailMap(string tag="") => NoticeDetailVisitor.All(tag);
		public static void RangeNoticeDetailMap(Action<int, rawNoticeDetail> filter,string tag="") => NoticeDetailVisitor.Range(filter,tag);
		public static List<int> KeysNoticeDetailMap(string tag="") => NoticeDetailVisitor.Keys(tag);
		public static rawNoticeDetail? GetNoticeDetail(int key,string tag="") => NoticeDetailVisitor.Get(key,tag);
		public static List<rawNoticeDetail> GetNoticeDetailByFilter(Func<rawNoticeDetail, bool> filterFunc,string tag="") => NoticeDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawNoticeDetail? GetOneNoticeDetailByFilter(Func<rawNoticeDetail, bool> filterFunc,string tag="") => NoticeDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion NoticeDetail
	#region NoticeEvent
		public static int GetCountNoticeEventMap(string tag="") => NoticeEventVisitor.GetCount(tag);
		public static string GetFileNameNoticeEventMap() => NoticeEventVisitor.GetFileName();
		public static List<int> SortedKeysNoticeEventMap(string tag="") => NoticeEventVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawNoticeEvent> GetNoticeEventMap(string tag="") => NoticeEventVisitor.All(tag);
		public static void RangeNoticeEventMap(Action<int, rawNoticeEvent> filter,string tag="") => NoticeEventVisitor.Range(filter,tag);
		public static List<int> KeysNoticeEventMap(string tag="") => NoticeEventVisitor.Keys(tag);
		public static rawNoticeEvent? GetNoticeEvent(int key,string tag="") => NoticeEventVisitor.Get(key,tag);
		public static List<rawNoticeEvent> GetNoticeEventByFilter(Func<rawNoticeEvent, bool> filterFunc,string tag="") => NoticeEventVisitor.GetByFilter(filterFunc,tag);
		public static rawNoticeEvent? GetOneNoticeEventByFilter(Func<rawNoticeEvent, bool> filterFunc,string tag="") => NoticeEventVisitor.GetOneByFilter(filterFunc,tag);
	#endregion NoticeEvent
	#region NoticeInfo
		public static int GetCountNoticeInfoSlice(string tag="") => NoticeInfoVisitor.GetCount(tag);
		public static string GetFileNameNoticeInfoSlice() => NoticeInfoVisitor.GetFileName();
		public static PBC::RepeatedField<rawNoticeInfo> GetNoticeInfoSlice(string tag="") => NoticeInfoVisitor.All(tag);
		public static void RangeNoticeInfoSlice(Action<int, rawNoticeInfo> filter,string tag="") => NoticeInfoVisitor.Range(filter,tag);
		public static rawNoticeInfo? GetNoticeInfoByIndex(int index,string tag="") => NoticeInfoVisitor.GetByIndex(index,tag);
		public static List<rawNoticeInfo> GetNoticeInfoByFilter(Func<rawNoticeInfo, bool> filterFunc,string tag="") => NoticeInfoVisitor.GetByFilter(filterFunc,tag);
		public static rawNoticeInfo? GetOneNoticeInfoByFilter(Func<rawNoticeInfo, bool> filterFunc,string tag="") => NoticeInfoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion NoticeInfo
	#region NpcConfig
		public static int GetCountNpcConfigMap(string tag="") => NpcConfigVisitor.GetCount(tag);
		public static string GetFileNameNpcConfigMap() => NpcConfigVisitor.GetFileName();
		public static List<int> SortedKeysNpcConfigMap(string tag="") => NpcConfigVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawNpcConfig> GetNpcConfigMap(string tag="") => NpcConfigVisitor.All(tag);
		public static void RangeNpcConfigMap(Action<int, rawNpcConfig> filter,string tag="") => NpcConfigVisitor.Range(filter,tag);
		public static List<int> KeysNpcConfigMap(string tag="") => NpcConfigVisitor.Keys(tag);
		public static rawNpcConfig? GetNpcConfig(int key,string tag="") => NpcConfigVisitor.Get(key,tag);
		public static List<rawNpcConfig> GetNpcConfigByFilter(Func<rawNpcConfig, bool> filterFunc,string tag="") => NpcConfigVisitor.GetByFilter(filterFunc,tag);
		public static rawNpcConfig? GetOneNpcConfigByFilter(Func<rawNpcConfig, bool> filterFunc,string tag="") => NpcConfigVisitor.GetOneByFilter(filterFunc,tag);
	#endregion NpcConfig
	#region ObjBasic
		public static int GetCountObjBasicMap(string tag="") => ObjBasicVisitor.GetCount(tag);
		public static string GetFileNameObjBasicMap() => ObjBasicVisitor.GetFileName();
		public static List<int> SortedKeysObjBasicMap(string tag="") => ObjBasicVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawObjBasic> GetObjBasicMap(string tag="") => ObjBasicVisitor.All(tag);
		public static void RangeObjBasicMap(Action<int, rawObjBasic> filter,string tag="") => ObjBasicVisitor.Range(filter,tag);
		public static List<int> KeysObjBasicMap(string tag="") => ObjBasicVisitor.Keys(tag);
		public static rawObjBasic? GetObjBasic(int key,string tag="") => ObjBasicVisitor.Get(key,tag);
		public static List<rawObjBasic> GetObjBasicByFilter(Func<rawObjBasic, bool> filterFunc,string tag="") => ObjBasicVisitor.GetByFilter(filterFunc,tag);
		public static rawObjBasic? GetOneObjBasicByFilter(Func<rawObjBasic, bool> filterFunc,string tag="") => ObjBasicVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ObjBasic
	#region ObjCard
		public static int GetCountObjCardMap(string tag="") => ObjCardVisitor.GetCount(tag);
		public static string GetFileNameObjCardMap() => ObjCardVisitor.GetFileName();
		public static List<int> SortedKeysObjCardMap(string tag="") => ObjCardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawObjCard> GetObjCardMap(string tag="") => ObjCardVisitor.All(tag);
		public static void RangeObjCardMap(Action<int, rawObjCard> filter,string tag="") => ObjCardVisitor.Range(filter,tag);
		public static List<int> KeysObjCardMap(string tag="") => ObjCardVisitor.Keys(tag);
		public static rawObjCard? GetObjCard(int key,string tag="") => ObjCardVisitor.Get(key,tag);
		public static List<rawObjCard> GetObjCardByFilter(Func<rawObjCard, bool> filterFunc,string tag="") => ObjCardVisitor.GetByFilter(filterFunc,tag);
		public static rawObjCard? GetOneObjCardByFilter(Func<rawObjCard, bool> filterFunc,string tag="") => ObjCardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ObjCard
	#region ObjCardJoker
		public static int GetCountObjCardJokerMap(string tag="") => ObjCardJokerVisitor.GetCount(tag);
		public static string GetFileNameObjCardJokerMap() => ObjCardJokerVisitor.GetFileName();
		public static List<int> SortedKeysObjCardJokerMap(string tag="") => ObjCardJokerVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawObjCardJoker> GetObjCardJokerMap(string tag="") => ObjCardJokerVisitor.All(tag);
		public static void RangeObjCardJokerMap(Action<int, rawObjCardJoker> filter,string tag="") => ObjCardJokerVisitor.Range(filter,tag);
		public static List<int> KeysObjCardJokerMap(string tag="") => ObjCardJokerVisitor.Keys(tag);
		public static rawObjCardJoker? GetObjCardJoker(int key,string tag="") => ObjCardJokerVisitor.Get(key,tag);
		public static List<rawObjCardJoker> GetObjCardJokerByFilter(Func<rawObjCardJoker, bool> filterFunc,string tag="") => ObjCardJokerVisitor.GetByFilter(filterFunc,tag);
		public static rawObjCardJoker? GetOneObjCardJokerByFilter(Func<rawObjCardJoker, bool> filterFunc,string tag="") => ObjCardJokerVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ObjCardJoker
	#region ObjCardPack
		public static int GetCountObjCardPackMap(string tag="") => ObjCardPackVisitor.GetCount(tag);
		public static string GetFileNameObjCardPackMap() => ObjCardPackVisitor.GetFileName();
		public static List<int> SortedKeysObjCardPackMap(string tag="") => ObjCardPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawObjCardPack> GetObjCardPackMap(string tag="") => ObjCardPackVisitor.All(tag);
		public static void RangeObjCardPackMap(Action<int, rawObjCardPack> filter,string tag="") => ObjCardPackVisitor.Range(filter,tag);
		public static List<int> KeysObjCardPackMap(string tag="") => ObjCardPackVisitor.Keys(tag);
		public static rawObjCardPack? GetObjCardPack(int key,string tag="") => ObjCardPackVisitor.Get(key,tag);
		public static List<rawObjCardPack> GetObjCardPackByFilter(Func<rawObjCardPack, bool> filterFunc,string tag="") => ObjCardPackVisitor.GetByFilter(filterFunc,tag);
		public static rawObjCardPack? GetOneObjCardPackByFilter(Func<rawObjCardPack, bool> filterFunc,string tag="") => ObjCardPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ObjCardPack
	#region ObjCoin
		public static int GetCountObjCoinMap(string tag="") => ObjCoinVisitor.GetCount(tag);
		public static string GetFileNameObjCoinMap() => ObjCoinVisitor.GetFileName();
		public static List<int> SortedKeysObjCoinMap(string tag="") => ObjCoinVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawObjCoin> GetObjCoinMap(string tag="") => ObjCoinVisitor.All(tag);
		public static void RangeObjCoinMap(Action<int, rawObjCoin> filter,string tag="") => ObjCoinVisitor.Range(filter,tag);
		public static List<int> KeysObjCoinMap(string tag="") => ObjCoinVisitor.Keys(tag);
		public static rawObjCoin? GetObjCoin(int key,string tag="") => ObjCoinVisitor.Get(key,tag);
		public static List<rawObjCoin> GetObjCoinByFilter(Func<rawObjCoin, bool> filterFunc,string tag="") => ObjCoinVisitor.GetByFilter(filterFunc,tag);
		public static rawObjCoin? GetOneObjCoinByFilter(Func<rawObjCoin, bool> filterFunc,string tag="") => ObjCoinVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ObjCoin
	#region ObjMergeItem
		public static int GetCountObjMergeItemMap(string tag="") => ObjMergeItemVisitor.GetCount(tag);
		public static string GetFileNameObjMergeItemMap() => ObjMergeItemVisitor.GetFileName();
		public static List<string> SortedKeysObjMergeItemMap(string tag="") => ObjMergeItemVisitor.SortedKeys(tag);
		public static PBC::MapField<string, rawObjMergeItem> GetObjMergeItemMap(string tag="") => ObjMergeItemVisitor.All(tag);
		public static void RangeObjMergeItemMap(Action<string, rawObjMergeItem> filter,string tag="") => ObjMergeItemVisitor.Range(filter,tag);
		public static List<string> KeysObjMergeItemMap(string tag="") => ObjMergeItemVisitor.Keys(tag);
		public static rawObjMergeItem? GetObjMergeItem(string key,string tag="") => ObjMergeItemVisitor.Get(key,tag);
		public static List<rawObjMergeItem> GetObjMergeItemByFilter(Func<rawObjMergeItem, bool> filterFunc,string tag="") => ObjMergeItemVisitor.GetByFilter(filterFunc,tag);
		public static rawObjMergeItem? GetOneObjMergeItemByFilter(Func<rawObjMergeItem, bool> filterFunc,string tag="") => ObjMergeItemVisitor.GetOneByFilter(filterFunc,tag);
        public static rawObjMergeItem GetObjMergeItemByCombinedKeys(ObjMergeItemVisitor.CK ck) => ObjMergeItemVisitor.GetByCombinedKeys(ck);
	#endregion ObjMergeItem
	#region ObjMergeTool
		public static int GetCountObjMergeToolMap(string tag="") => ObjMergeToolVisitor.GetCount(tag);
		public static string GetFileNameObjMergeToolMap() => ObjMergeToolVisitor.GetFileName();
		public static List<int> SortedKeysObjMergeToolMap(string tag="") => ObjMergeToolVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawObjMergeTool> GetObjMergeToolMap(string tag="") => ObjMergeToolVisitor.All(tag);
		public static void RangeObjMergeToolMap(Action<int, rawObjMergeTool> filter,string tag="") => ObjMergeToolVisitor.Range(filter,tag);
		public static List<int> KeysObjMergeToolMap(string tag="") => ObjMergeToolVisitor.Keys(tag);
		public static rawObjMergeTool? GetObjMergeTool(int key,string tag="") => ObjMergeToolVisitor.Get(key,tag);
		public static List<rawObjMergeTool> GetObjMergeToolByFilter(Func<rawObjMergeTool, bool> filterFunc,string tag="") => ObjMergeToolVisitor.GetByFilter(filterFunc,tag);
		public static rawObjMergeTool? GetOneObjMergeToolByFilter(Func<rawObjMergeTool, bool> filterFunc,string tag="") => ObjMergeToolVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ObjMergeTool
	#region ObjRandomChest
		public static int GetCountObjRandomChestMap(string tag="") => ObjRandomChestVisitor.GetCount(tag);
		public static string GetFileNameObjRandomChestMap() => ObjRandomChestVisitor.GetFileName();
		public static List<int> SortedKeysObjRandomChestMap(string tag="") => ObjRandomChestVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawObjRandomChest> GetObjRandomChestMap(string tag="") => ObjRandomChestVisitor.All(tag);
		public static void RangeObjRandomChestMap(Action<int, rawObjRandomChest> filter,string tag="") => ObjRandomChestVisitor.Range(filter,tag);
		public static List<int> KeysObjRandomChestMap(string tag="") => ObjRandomChestVisitor.Keys(tag);
		public static rawObjRandomChest? GetObjRandomChest(int key,string tag="") => ObjRandomChestVisitor.Get(key,tag);
		public static List<rawObjRandomChest> GetObjRandomChestByFilter(Func<rawObjRandomChest, bool> filterFunc,string tag="") => ObjRandomChestVisitor.GetByFilter(filterFunc,tag);
		public static rawObjRandomChest? GetOneObjRandomChestByFilter(Func<rawObjRandomChest, bool> filterFunc,string tag="") => ObjRandomChestVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ObjRandomChest
	#region ObjSeasonItem
		public static int GetCountObjSeasonItemMap(string tag="") => ObjSeasonItemVisitor.GetCount(tag);
		public static string GetFileNameObjSeasonItemMap() => ObjSeasonItemVisitor.GetFileName();
		public static List<int> SortedKeysObjSeasonItemMap(string tag="") => ObjSeasonItemVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawObjSeasonItem> GetObjSeasonItemMap(string tag="") => ObjSeasonItemVisitor.All(tag);
		public static void RangeObjSeasonItemMap(Action<int, rawObjSeasonItem> filter,string tag="") => ObjSeasonItemVisitor.Range(filter,tag);
		public static List<int> KeysObjSeasonItemMap(string tag="") => ObjSeasonItemVisitor.Keys(tag);
		public static rawObjSeasonItem? GetObjSeasonItem(int key,string tag="") => ObjSeasonItemVisitor.Get(key,tag);
		public static List<rawObjSeasonItem> GetObjSeasonItemByFilter(Func<rawObjSeasonItem, bool> filterFunc,string tag="") => ObjSeasonItemVisitor.GetByFilter(filterFunc,tag);
		public static rawObjSeasonItem? GetOneObjSeasonItemByFilter(Func<rawObjSeasonItem, bool> filterFunc,string tag="") => ObjSeasonItemVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ObjSeasonItem
	#region ObjToken
		public static int GetCountObjTokenMap(string tag="") => ObjTokenVisitor.GetCount(tag);
		public static string GetFileNameObjTokenMap() => ObjTokenVisitor.GetFileName();
		public static List<int> SortedKeysObjTokenMap(string tag="") => ObjTokenVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawObjToken> GetObjTokenMap(string tag="") => ObjTokenVisitor.All(tag);
		public static void RangeObjTokenMap(Action<int, rawObjToken> filter,string tag="") => ObjTokenVisitor.Range(filter,tag);
		public static List<int> KeysObjTokenMap(string tag="") => ObjTokenVisitor.Keys(tag);
		public static rawObjToken? GetObjToken(int key,string tag="") => ObjTokenVisitor.Get(key,tag);
		public static List<rawObjToken> GetObjTokenByFilter(Func<rawObjToken, bool> filterFunc,string tag="") => ObjTokenVisitor.GetByFilter(filterFunc,tag);
		public static rawObjToken? GetOneObjTokenByFilter(Func<rawObjToken, bool> filterFunc,string tag="") => ObjTokenVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ObjToken
	#region ObjTool
		public static int GetCountObjToolMap(string tag="") => ObjToolVisitor.GetCount(tag);
		public static string GetFileNameObjToolMap() => ObjToolVisitor.GetFileName();
		public static List<int> SortedKeysObjToolMap(string tag="") => ObjToolVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawObjTool> GetObjToolMap(string tag="") => ObjToolVisitor.All(tag);
		public static void RangeObjToolMap(Action<int, rawObjTool> filter,string tag="") => ObjToolVisitor.Range(filter,tag);
		public static List<int> KeysObjToolMap(string tag="") => ObjToolVisitor.Keys(tag);
		public static rawObjTool? GetObjTool(int key,string tag="") => ObjToolVisitor.Get(key,tag);
		public static List<rawObjTool> GetObjToolByFilter(Func<rawObjTool, bool> filterFunc,string tag="") => ObjToolVisitor.GetByFilter(filterFunc,tag);
		public static rawObjTool? GetOneObjToolByFilter(Func<rawObjTool, bool> filterFunc,string tag="") => ObjToolVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ObjTool
	#region OnePlusOne
		public static int GetCountOnePlusOneMap(string tag="") => OnePlusOneVisitor.GetCount(tag);
		public static string GetFileNameOnePlusOneMap() => OnePlusOneVisitor.GetFileName();
		public static List<int> SortedKeysOnePlusOneMap(string tag="") => OnePlusOneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawOnePlusOne> GetOnePlusOneMap(string tag="") => OnePlusOneVisitor.All(tag);
		public static void RangeOnePlusOneMap(Action<int, rawOnePlusOne> filter,string tag="") => OnePlusOneVisitor.Range(filter,tag);
		public static List<int> KeysOnePlusOneMap(string tag="") => OnePlusOneVisitor.Keys(tag);
		public static rawOnePlusOne? GetOnePlusOne(int key,string tag="") => OnePlusOneVisitor.Get(key,tag);
		public static List<rawOnePlusOne> GetOnePlusOneByFilter(Func<rawOnePlusOne, bool> filterFunc,string tag="") => OnePlusOneVisitor.GetByFilter(filterFunc,tag);
		public static rawOnePlusOne? GetOneOnePlusOneByFilter(Func<rawOnePlusOne, bool> filterFunc,string tag="") => OnePlusOneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion OnePlusOne
	#region OnePlusTwo
		public static int GetCountOnePlusTwoMap(string tag="") => OnePlusTwoVisitor.GetCount(tag);
		public static string GetFileNameOnePlusTwoMap() => OnePlusTwoVisitor.GetFileName();
		public static List<int> SortedKeysOnePlusTwoMap(string tag="") => OnePlusTwoVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawOnePlusTwo> GetOnePlusTwoMap(string tag="") => OnePlusTwoVisitor.All(tag);
		public static void RangeOnePlusTwoMap(Action<int, rawOnePlusTwo> filter,string tag="") => OnePlusTwoVisitor.Range(filter,tag);
		public static List<int> KeysOnePlusTwoMap(string tag="") => OnePlusTwoVisitor.Keys(tag);
		public static rawOnePlusTwo? GetOnePlusTwo(int key,string tag="") => OnePlusTwoVisitor.Get(key,tag);
		public static List<rawOnePlusTwo> GetOnePlusTwoByFilter(Func<rawOnePlusTwo, bool> filterFunc,string tag="") => OnePlusTwoVisitor.GetByFilter(filterFunc,tag);
		public static rawOnePlusTwo? GetOneOnePlusTwoByFilter(Func<rawOnePlusTwo, bool> filterFunc,string tag="") => OnePlusTwoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion OnePlusTwo
	#region OpenNoticePop
		public static int GetCountOpenNoticePopSlice(string tag="") => OpenNoticePopVisitor.GetCount(tag);
		public static string GetFileNameOpenNoticePopSlice() => OpenNoticePopVisitor.GetFileName();
		public static PBC::RepeatedField<rawOpenNoticePop> GetOpenNoticePopSlice(string tag="") => OpenNoticePopVisitor.All(tag);
		public static void RangeOpenNoticePopSlice(Action<int, rawOpenNoticePop> filter,string tag="") => OpenNoticePopVisitor.Range(filter,tag);
		public static rawOpenNoticePop? GetOpenNoticePopByIndex(int index,string tag="") => OpenNoticePopVisitor.GetByIndex(index,tag);
		public static List<rawOpenNoticePop> GetOpenNoticePopByFilter(Func<rawOpenNoticePop, bool> filterFunc,string tag="") => OpenNoticePopVisitor.GetByFilter(filterFunc,tag);
		public static rawOpenNoticePop? GetOneOpenNoticePopByFilter(Func<rawOpenNoticePop, bool> filterFunc,string tag="") => OpenNoticePopVisitor.GetOneByFilter(filterFunc,tag);
	#endregion OpenNoticePop
	#region OrderApiWhitelist
		public static int GetCountOrderApiWhitelistMap(string tag="") => OrderApiWhitelistVisitor.GetCount(tag);
		public static string GetFileNameOrderApiWhitelistMap() => OrderApiWhitelistVisitor.GetFileName();
		public static List<string> SortedKeysOrderApiWhitelistMap(string tag="") => OrderApiWhitelistVisitor.SortedKeys(tag);
		public static PBC::MapField<string, rawOrderApiWhitelist> GetOrderApiWhitelistMap(string tag="") => OrderApiWhitelistVisitor.All(tag);
		public static void RangeOrderApiWhitelistMap(Action<string, rawOrderApiWhitelist> filter,string tag="") => OrderApiWhitelistVisitor.Range(filter,tag);
		public static List<string> KeysOrderApiWhitelistMap(string tag="") => OrderApiWhitelistVisitor.Keys(tag);
		public static rawOrderApiWhitelist? GetOrderApiWhitelist(string key,string tag="") => OrderApiWhitelistVisitor.Get(key,tag);
		public static List<rawOrderApiWhitelist> GetOrderApiWhitelistByFilter(Func<rawOrderApiWhitelist, bool> filterFunc,string tag="") => OrderApiWhitelistVisitor.GetByFilter(filterFunc,tag);
		public static rawOrderApiWhitelist? GetOneOrderApiWhitelistByFilter(Func<rawOrderApiWhitelist, bool> filterFunc,string tag="") => OrderApiWhitelistVisitor.GetOneByFilter(filterFunc,tag);
	#endregion OrderApiWhitelist
	#region OrderBoxDetail
		public static int GetCountOrderBoxDetailMap(string tag="") => OrderBoxDetailVisitor.GetCount(tag);
		public static string GetFileNameOrderBoxDetailMap() => OrderBoxDetailVisitor.GetFileName();
		public static List<int> SortedKeysOrderBoxDetailMap(string tag="") => OrderBoxDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawOrderBoxDetail> GetOrderBoxDetailMap(string tag="") => OrderBoxDetailVisitor.All(tag);
		public static void RangeOrderBoxDetailMap(Action<int, rawOrderBoxDetail> filter,string tag="") => OrderBoxDetailVisitor.Range(filter,tag);
		public static List<int> KeysOrderBoxDetailMap(string tag="") => OrderBoxDetailVisitor.Keys(tag);
		public static rawOrderBoxDetail? GetOrderBoxDetail(int key,string tag="") => OrderBoxDetailVisitor.Get(key,tag);
		public static List<rawOrderBoxDetail> GetOrderBoxDetailByFilter(Func<rawOrderBoxDetail, bool> filterFunc,string tag="") => OrderBoxDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawOrderBoxDetail? GetOneOrderBoxDetailByFilter(Func<rawOrderBoxDetail, bool> filterFunc,string tag="") => OrderBoxDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion OrderBoxDetail
	#region OrderCategory
		public static int GetCountOrderCategoryMap(string tag="") => OrderCategoryVisitor.GetCount(tag);
		public static string GetFileNameOrderCategoryMap() => OrderCategoryVisitor.GetFileName();
		public static List<int> SortedKeysOrderCategoryMap(string tag="") => OrderCategoryVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawOrderCategory> GetOrderCategoryMap(string tag="") => OrderCategoryVisitor.All(tag);
		public static void RangeOrderCategoryMap(Action<int, rawOrderCategory> filter,string tag="") => OrderCategoryVisitor.Range(filter,tag);
		public static List<int> KeysOrderCategoryMap(string tag="") => OrderCategoryVisitor.Keys(tag);
		public static rawOrderCategory? GetOrderCategory(int key,string tag="") => OrderCategoryVisitor.Get(key,tag);
		public static List<rawOrderCategory> GetOrderCategoryByFilter(Func<rawOrderCategory, bool> filterFunc,string tag="") => OrderCategoryVisitor.GetByFilter(filterFunc,tag);
		public static rawOrderCategory? GetOneOrderCategoryByFilter(Func<rawOrderCategory, bool> filterFunc,string tag="") => OrderCategoryVisitor.GetOneByFilter(filterFunc,tag);
	#endregion OrderCategory
	#region OrderCommon
		public static int GetCountOrderCommonMap(string tag="") => OrderCommonVisitor.GetCount(tag);
		public static string GetFileNameOrderCommonMap() => OrderCommonVisitor.GetFileName();
		public static List<int> SortedKeysOrderCommonMap(string tag="") => OrderCommonVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawOrderCommon> GetOrderCommonMap(string tag="") => OrderCommonVisitor.All(tag);
		public static void RangeOrderCommonMap(Action<int, rawOrderCommon> filter,string tag="") => OrderCommonVisitor.Range(filter,tag);
		public static List<int> KeysOrderCommonMap(string tag="") => OrderCommonVisitor.Keys(tag);
		public static rawOrderCommon? GetOrderCommon(int key,string tag="") => OrderCommonVisitor.Get(key,tag);
		public static List<rawOrderCommon> GetOrderCommonByFilter(Func<rawOrderCommon, bool> filterFunc,string tag="") => OrderCommonVisitor.GetByFilter(filterFunc,tag);
		public static rawOrderCommon? GetOneOrderCommonByFilter(Func<rawOrderCommon, bool> filterFunc,string tag="") => OrderCommonVisitor.GetOneByFilter(filterFunc,tag);
	#endregion OrderCommon
	#region OrderDetector
		public static int GetCountOrderDetectorMap(string tag="") => OrderDetectorVisitor.GetCount(tag);
		public static string GetFileNameOrderDetectorMap() => OrderDetectorVisitor.GetFileName();
		public static List<int> SortedKeysOrderDetectorMap(string tag="") => OrderDetectorVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawOrderDetector> GetOrderDetectorMap(string tag="") => OrderDetectorVisitor.All(tag);
		public static void RangeOrderDetectorMap(Action<int, rawOrderDetector> filter,string tag="") => OrderDetectorVisitor.Range(filter,tag);
		public static List<int> KeysOrderDetectorMap(string tag="") => OrderDetectorVisitor.Keys(tag);
		public static rawOrderDetector? GetOrderDetector(int key,string tag="") => OrderDetectorVisitor.Get(key,tag);
		public static List<rawOrderDetector> GetOrderDetectorByFilter(Func<rawOrderDetector, bool> filterFunc,string tag="") => OrderDetectorVisitor.GetByFilter(filterFunc,tag);
		public static rawOrderDetector? GetOneOrderDetectorByFilter(Func<rawOrderDetector, bool> filterFunc,string tag="") => OrderDetectorVisitor.GetOneByFilter(filterFunc,tag);
	#endregion OrderDetector
	#region OrderDiff
		public static int GetCountOrderDiffMap(string tag="") => OrderDiffVisitor.GetCount(tag);
		public static string GetFileNameOrderDiffMap() => OrderDiffVisitor.GetFileName();
		public static List<int> SortedKeysOrderDiffMap(string tag="") => OrderDiffVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawOrderDiff> GetOrderDiffMap(string tag="") => OrderDiffVisitor.All(tag);
		public static void RangeOrderDiffMap(Action<int, rawOrderDiff> filter,string tag="") => OrderDiffVisitor.Range(filter,tag);
		public static List<int> KeysOrderDiffMap(string tag="") => OrderDiffVisitor.Keys(tag);
		public static rawOrderDiff? GetOrderDiff(int key,string tag="") => OrderDiffVisitor.Get(key,tag);
		public static List<rawOrderDiff> GetOrderDiffByFilter(Func<rawOrderDiff, bool> filterFunc,string tag="") => OrderDiffVisitor.GetByFilter(filterFunc,tag);
		public static rawOrderDiff? GetOneOrderDiffByFilter(Func<rawOrderDiff, bool> filterFunc,string tag="") => OrderDiffVisitor.GetOneByFilter(filterFunc,tag);
	#endregion OrderDiff
	#region OrderIgnore
		public static int GetCountOrderIgnoreMap(string tag="") => OrderIgnoreVisitor.GetCount(tag);
		public static string GetFileNameOrderIgnoreMap() => OrderIgnoreVisitor.GetFileName();
		public static List<int> SortedKeysOrderIgnoreMap(string tag="") => OrderIgnoreVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawOrderIgnore> GetOrderIgnoreMap(string tag="") => OrderIgnoreVisitor.All(tag);
		public static void RangeOrderIgnoreMap(Action<int, rawOrderIgnore> filter,string tag="") => OrderIgnoreVisitor.Range(filter,tag);
		public static List<int> KeysOrderIgnoreMap(string tag="") => OrderIgnoreVisitor.Keys(tag);
		public static rawOrderIgnore? GetOrderIgnore(int key,string tag="") => OrderIgnoreVisitor.Get(key,tag);
		public static List<rawOrderIgnore> GetOrderIgnoreByFilter(Func<rawOrderIgnore, bool> filterFunc,string tag="") => OrderIgnoreVisitor.GetByFilter(filterFunc,tag);
		public static rawOrderIgnore? GetOneOrderIgnoreByFilter(Func<rawOrderIgnore, bool> filterFunc,string tag="") => OrderIgnoreVisitor.GetOneByFilter(filterFunc,tag);
	#endregion OrderIgnore
	#region OrderRandomer
		public static int GetCountOrderRandomerMap(string tag="") => OrderRandomerVisitor.GetCount(tag);
		public static string GetFileNameOrderRandomerMap() => OrderRandomerVisitor.GetFileName();
		public static List<int> SortedKeysOrderRandomerMap(string tag="") => OrderRandomerVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawOrderRandomer> GetOrderRandomerMap(string tag="") => OrderRandomerVisitor.All(tag);
		public static void RangeOrderRandomerMap(Action<int, rawOrderRandomer> filter,string tag="") => OrderRandomerVisitor.Range(filter,tag);
		public static List<int> KeysOrderRandomerMap(string tag="") => OrderRandomerVisitor.Keys(tag);
		public static rawOrderRandomer? GetOrderRandomer(int key,string tag="") => OrderRandomerVisitor.Get(key,tag);
		public static List<rawOrderRandomer> GetOrderRandomerByFilter(Func<rawOrderRandomer, bool> filterFunc,string tag="") => OrderRandomerVisitor.GetByFilter(filterFunc,tag);
		public static rawOrderRandomer? GetOneOrderRandomerByFilter(Func<rawOrderRandomer, bool> filterFunc,string tag="") => OrderRandomerVisitor.GetOneByFilter(filterFunc,tag);
	#endregion OrderRandomer
	#region OrderReward
		public static int GetCountOrderRewardMap(string tag="") => OrderRewardVisitor.GetCount(tag);
		public static string GetFileNameOrderRewardMap() => OrderRewardVisitor.GetFileName();
		public static List<int> SortedKeysOrderRewardMap(string tag="") => OrderRewardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawOrderReward> GetOrderRewardMap(string tag="") => OrderRewardVisitor.All(tag);
		public static void RangeOrderRewardMap(Action<int, rawOrderReward> filter,string tag="") => OrderRewardVisitor.Range(filter,tag);
		public static List<int> KeysOrderRewardMap(string tag="") => OrderRewardVisitor.Keys(tag);
		public static rawOrderReward? GetOrderReward(int key,string tag="") => OrderRewardVisitor.Get(key,tag);
		public static List<rawOrderReward> GetOrderRewardByFilter(Func<rawOrderReward, bool> filterFunc,string tag="") => OrderRewardVisitor.GetByFilter(filterFunc,tag);
		public static rawOrderReward? GetOneOrderRewardByFilter(Func<rawOrderReward, bool> filterFunc,string tag="") => OrderRewardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion OrderReward
	#region PachinkoMultiple
		public static int GetCountPachinkoMultipleMap(string tag="") => PachinkoMultipleVisitor.GetCount(tag);
		public static string GetFileNamePachinkoMultipleMap() => PachinkoMultipleVisitor.GetFileName();
		public static List<int> SortedKeysPachinkoMultipleMap(string tag="") => PachinkoMultipleVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawPachinkoMultiple> GetPachinkoMultipleMap(string tag="") => PachinkoMultipleVisitor.All(tag);
		public static void RangePachinkoMultipleMap(Action<int, rawPachinkoMultiple> filter,string tag="") => PachinkoMultipleVisitor.Range(filter,tag);
		public static List<int> KeysPachinkoMultipleMap(string tag="") => PachinkoMultipleVisitor.Keys(tag);
		public static rawPachinkoMultiple? GetPachinkoMultiple(int key,string tag="") => PachinkoMultipleVisitor.Get(key,tag);
		public static List<rawPachinkoMultiple> GetPachinkoMultipleByFilter(Func<rawPachinkoMultiple, bool> filterFunc,string tag="") => PachinkoMultipleVisitor.GetByFilter(filterFunc,tag);
		public static rawPachinkoMultiple? GetOnePachinkoMultipleByFilter(Func<rawPachinkoMultiple, bool> filterFunc,string tag="") => PachinkoMultipleVisitor.GetOneByFilter(filterFunc,tag);
	#endregion PachinkoMultiple
	#region PlayerGroup
		public static int GetCountPlayerGroupMap(string tag="") => PlayerGroupVisitor.GetCount(tag);
		public static string GetFileNamePlayerGroupMap() => PlayerGroupVisitor.GetFileName();
		public static List<int> SortedKeysPlayerGroupMap(string tag="") => PlayerGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawPlayerGroup> GetPlayerGroupMap(string tag="") => PlayerGroupVisitor.All(tag);
		public static void RangePlayerGroupMap(Action<int, rawPlayerGroup> filter,string tag="") => PlayerGroupVisitor.Range(filter,tag);
		public static List<int> KeysPlayerGroupMap(string tag="") => PlayerGroupVisitor.Keys(tag);
		public static rawPlayerGroup? GetPlayerGroup(int key,string tag="") => PlayerGroupVisitor.Get(key,tag);
		public static List<rawPlayerGroup> GetPlayerGroupByFilter(Func<rawPlayerGroup, bool> filterFunc,string tag="") => PlayerGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawPlayerGroup? GetOnePlayerGroupByFilter(Func<rawPlayerGroup, bool> filterFunc,string tag="") => PlayerGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion PlayerGroup
	#region PlayerGroupRule
		public static int GetCountPlayerGroupRuleSlice(string tag="") => PlayerGroupRuleVisitor.GetCount(tag);
		public static string GetFileNamePlayerGroupRuleSlice() => PlayerGroupRuleVisitor.GetFileName();
		public static PBC::RepeatedField<rawPlayerGroupRule> GetPlayerGroupRuleSlice(string tag="") => PlayerGroupRuleVisitor.All(tag);
		public static void RangePlayerGroupRuleSlice(Action<int, rawPlayerGroupRule> filter,string tag="") => PlayerGroupRuleVisitor.Range(filter,tag);
		public static rawPlayerGroupRule? GetPlayerGroupRuleByIndex(int index,string tag="") => PlayerGroupRuleVisitor.GetByIndex(index,tag);
		public static List<rawPlayerGroupRule> GetPlayerGroupRuleByFilter(Func<rawPlayerGroupRule, bool> filterFunc,string tag="") => PlayerGroupRuleVisitor.GetByFilter(filterFunc,tag);
		public static rawPlayerGroupRule? GetOnePlayerGroupRuleByFilter(Func<rawPlayerGroupRule, bool> filterFunc,string tag="") => PlayerGroupRuleVisitor.GetOneByFilter(filterFunc,tag);
	#endregion PlayerGroupRule
	#region PlotDialog
		public static int GetCountPlotDialogMap(string tag="") => PlotDialogVisitor.GetCount(tag);
		public static string GetFileNamePlotDialogMap() => PlotDialogVisitor.GetFileName();
		public static List<int> SortedKeysPlotDialogMap(string tag="") => PlotDialogVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawPlotDialog> GetPlotDialogMap(string tag="") => PlotDialogVisitor.All(tag);
		public static void RangePlotDialogMap(Action<int, rawPlotDialog> filter,string tag="") => PlotDialogVisitor.Range(filter,tag);
		public static List<int> KeysPlotDialogMap(string tag="") => PlotDialogVisitor.Keys(tag);
		public static rawPlotDialog? GetPlotDialog(int key,string tag="") => PlotDialogVisitor.Get(key,tag);
		public static List<rawPlotDialog> GetPlotDialogByFilter(Func<rawPlotDialog, bool> filterFunc,string tag="") => PlotDialogVisitor.GetByFilter(filterFunc,tag);
		public static rawPlotDialog? GetOnePlotDialogByFilter(Func<rawPlotDialog, bool> filterFunc,string tag="") => PlotDialogVisitor.GetOneByFilter(filterFunc,tag);
	#endregion PlotDialog
	#region PlotDrama
		public static int GetCountPlotDramaMap(string tag="") => PlotDramaVisitor.GetCount(tag);
		public static string GetFileNamePlotDramaMap() => PlotDramaVisitor.GetFileName();
		public static List<int> SortedKeysPlotDramaMap(string tag="") => PlotDramaVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawPlotDrama> GetPlotDramaMap(string tag="") => PlotDramaVisitor.All(tag);
		public static void RangePlotDramaMap(Action<int, rawPlotDrama> filter,string tag="") => PlotDramaVisitor.Range(filter,tag);
		public static List<int> KeysPlotDramaMap(string tag="") => PlotDramaVisitor.Keys(tag);
		public static rawPlotDrama? GetPlotDrama(int key,string tag="") => PlotDramaVisitor.Get(key,tag);
		public static List<rawPlotDrama> GetPlotDramaByFilter(Func<rawPlotDrama, bool> filterFunc,string tag="") => PlotDramaVisitor.GetByFilter(filterFunc,tag);
		public static rawPlotDrama? GetOnePlotDramaByFilter(Func<rawPlotDrama, bool> filterFunc,string tag="") => PlotDramaVisitor.GetOneByFilter(filterFunc,tag);
	#endregion PlotDrama
	#region PlotStory
		public static int GetCountPlotStoryMap(string tag="") => PlotStoryVisitor.GetCount(tag);
		public static string GetFileNamePlotStoryMap() => PlotStoryVisitor.GetFileName();
		public static List<int> SortedKeysPlotStoryMap(string tag="") => PlotStoryVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawPlotStory> GetPlotStoryMap(string tag="") => PlotStoryVisitor.All(tag);
		public static void RangePlotStoryMap(Action<int, rawPlotStory> filter,string tag="") => PlotStoryVisitor.Range(filter,tag);
		public static List<int> KeysPlotStoryMap(string tag="") => PlotStoryVisitor.Keys(tag);
		public static rawPlotStory? GetPlotStory(int key,string tag="") => PlotStoryVisitor.Get(key,tag);
		public static List<rawPlotStory> GetPlotStoryByFilter(Func<rawPlotStory, bool> filterFunc,string tag="") => PlotStoryVisitor.GetByFilter(filterFunc,tag);
		public static rawPlotStory? GetOnePlotStoryByFilter(Func<rawPlotStory, bool> filterFunc,string tag="") => PlotStoryVisitor.GetOneByFilter(filterFunc,tag);
	#endregion PlotStory
	#region Popup
		public static int GetCountPopupMap(string tag="") => PopupVisitor.GetCount(tag);
		public static string GetFileNamePopupMap() => PopupVisitor.GetFileName();
		public static List<int> SortedKeysPopupMap(string tag="") => PopupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawPopup> GetPopupMap(string tag="") => PopupVisitor.All(tag);
		public static void RangePopupMap(Action<int, rawPopup> filter,string tag="") => PopupVisitor.Range(filter,tag);
		public static List<int> KeysPopupMap(string tag="") => PopupVisitor.Keys(tag);
		public static rawPopup? GetPopup(int key,string tag="") => PopupVisitor.Get(key,tag);
		public static List<rawPopup> GetPopupByFilter(Func<rawPopup, bool> filterFunc,string tag="") => PopupVisitor.GetByFilter(filterFunc,tag);
		public static rawPopup? GetOnePopupByFilter(Func<rawPopup, bool> filterFunc,string tag="") => PopupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion Popup
	#region ProgressPack
		public static int GetCountProgressPackMap(string tag="") => ProgressPackVisitor.GetCount(tag);
		public static string GetFileNameProgressPackMap() => ProgressPackVisitor.GetFileName();
		public static List<int> SortedKeysProgressPackMap(string tag="") => ProgressPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawProgressPack> GetProgressPackMap(string tag="") => ProgressPackVisitor.All(tag);
		public static void RangeProgressPackMap(Action<int, rawProgressPack> filter,string tag="") => ProgressPackVisitor.Range(filter,tag);
		public static List<int> KeysProgressPackMap(string tag="") => ProgressPackVisitor.Keys(tag);
		public static rawProgressPack? GetProgressPack(int key,string tag="") => ProgressPackVisitor.Get(key,tag);
		public static List<rawProgressPack> GetProgressPackByFilter(Func<rawProgressPack, bool> filterFunc,string tag="") => ProgressPackVisitor.GetByFilter(filterFunc,tag);
		public static rawProgressPack? GetOneProgressPackByFilter(Func<rawProgressPack, bool> filterFunc,string tag="") => ProgressPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ProgressPack
	#region RandomReward
		public static int GetCountRandomRewardMap(string tag="") => RandomRewardVisitor.GetCount(tag);
		public static string GetFileNameRandomRewardMap() => RandomRewardVisitor.GetFileName();
		public static List<int> SortedKeysRandomRewardMap(string tag="") => RandomRewardVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawRandomReward> GetRandomRewardMap(string tag="") => RandomRewardVisitor.All(tag);
		public static void RangeRandomRewardMap(Action<int, rawRandomReward> filter,string tag="") => RandomRewardVisitor.Range(filter,tag);
		public static List<int> KeysRandomRewardMap(string tag="") => RandomRewardVisitor.Keys(tag);
		public static rawRandomReward? GetRandomReward(int key,string tag="") => RandomRewardVisitor.Get(key,tag);
		public static List<rawRandomReward> GetRandomRewardByFilter(Func<rawRandomReward, bool> filterFunc,string tag="") => RandomRewardVisitor.GetByFilter(filterFunc,tag);
		public static rawRandomReward? GetOneRandomRewardByFilter(Func<rawRandomReward, bool> filterFunc,string tag="") => RandomRewardVisitor.GetOneByFilter(filterFunc,tag);
	#endregion RandomReward
	#region RandomStar
		public static int GetCountRandomStarMap(string tag="") => RandomStarVisitor.GetCount(tag);
		public static string GetFileNameRandomStarMap() => RandomStarVisitor.GetFileName();
		public static List<int> SortedKeysRandomStarMap(string tag="") => RandomStarVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawRandomStar> GetRandomStarMap(string tag="") => RandomStarVisitor.All(tag);
		public static void RangeRandomStarMap(Action<int, rawRandomStar> filter,string tag="") => RandomStarVisitor.Range(filter,tag);
		public static List<int> KeysRandomStarMap(string tag="") => RandomStarVisitor.Keys(tag);
		public static rawRandomStar? GetRandomStar(int key,string tag="") => RandomStarVisitor.Get(key,tag);
		public static List<rawRandomStar> GetRandomStarByFilter(Func<rawRandomStar, bool> filterFunc,string tag="") => RandomStarVisitor.GetByFilter(filterFunc,tag);
		public static rawRandomStar? GetOneRandomStarByFilter(Func<rawRandomStar, bool> filterFunc,string tag="") => RandomStarVisitor.GetOneByFilter(filterFunc,tag);
	#endregion RandomStar
	#region Reshipment
		public static int GetCountReshipmentMap(string tag="") => ReshipmentVisitor.GetCount(tag);
		public static string GetFileNameReshipmentMap() => ReshipmentVisitor.GetFileName();
		public static List<int> SortedKeysReshipmentMap(string tag="") => ReshipmentVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawReshipment> GetReshipmentMap(string tag="") => ReshipmentVisitor.All(tag);
		public static void RangeReshipmentMap(Action<int, rawReshipment> filter,string tag="") => ReshipmentVisitor.Range(filter,tag);
		public static List<int> KeysReshipmentMap(string tag="") => ReshipmentVisitor.Keys(tag);
		public static rawReshipment? GetReshipment(int key,string tag="") => ReshipmentVisitor.Get(key,tag);
		public static List<rawReshipment> GetReshipmentByFilter(Func<rawReshipment, bool> filterFunc,string tag="") => ReshipmentVisitor.GetByFilter(filterFunc,tag);
		public static rawReshipment? GetOneReshipmentByFilter(Func<rawReshipment, bool> filterFunc,string tag="") => ReshipmentVisitor.GetOneByFilter(filterFunc,tag);
	#endregion Reshipment
	#region RetentionPack
		public static int GetCountRetentionPackMap(string tag="") => RetentionPackVisitor.GetCount(tag);
		public static string GetFileNameRetentionPackMap() => RetentionPackVisitor.GetFileName();
		public static List<int> SortedKeysRetentionPackMap(string tag="") => RetentionPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawRetentionPack> GetRetentionPackMap(string tag="") => RetentionPackVisitor.All(tag);
		public static void RangeRetentionPackMap(Action<int, rawRetentionPack> filter,string tag="") => RetentionPackVisitor.Range(filter,tag);
		public static List<int> KeysRetentionPackMap(string tag="") => RetentionPackVisitor.Keys(tag);
		public static rawRetentionPack? GetRetentionPack(int key,string tag="") => RetentionPackVisitor.Get(key,tag);
		public static List<rawRetentionPack> GetRetentionPackByFilter(Func<rawRetentionPack, bool> filterFunc,string tag="") => RetentionPackVisitor.GetByFilter(filterFunc,tag);
		public static rawRetentionPack? GetOneRetentionPackByFilter(Func<rawRetentionPack, bool> filterFunc,string tag="") => RetentionPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion RetentionPack
	#region RoundCoin
		public static int GetCountRoundCoinSlice(string tag="") => RoundCoinVisitor.GetCount(tag);
		public static string GetFileNameRoundCoinSlice() => RoundCoinVisitor.GetFileName();
		public static PBC::RepeatedField<rawRoundCoin> GetRoundCoinSlice(string tag="") => RoundCoinVisitor.All(tag);
		public static void RangeRoundCoinSlice(Action<int, rawRoundCoin> filter,string tag="") => RoundCoinVisitor.Range(filter,tag);
		public static rawRoundCoin? GetRoundCoinByIndex(int index,string tag="") => RoundCoinVisitor.GetByIndex(index,tag);
		public static List<rawRoundCoin> GetRoundCoinByFilter(Func<rawRoundCoin, bool> filterFunc,string tag="") => RoundCoinVisitor.GetByFilter(filterFunc,tag);
		public static rawRoundCoin? GetOneRoundCoinByFilter(Func<rawRoundCoin, bool> filterFunc,string tag="") => RoundCoinVisitor.GetOneByFilter(filterFunc,tag);
	#endregion RoundCoin
	#region RoundExpire
		public static int GetCountRoundExpireSlice(string tag="") => RoundExpireVisitor.GetCount(tag);
		public static string GetFileNameRoundExpireSlice() => RoundExpireVisitor.GetFileName();
		public static PBC::RepeatedField<rawRoundExpire> GetRoundExpireSlice(string tag="") => RoundExpireVisitor.All(tag);
		public static void RangeRoundExpireSlice(Action<int, rawRoundExpire> filter,string tag="") => RoundExpireVisitor.Range(filter,tag);
		public static rawRoundExpire? GetRoundExpireByIndex(int index,string tag="") => RoundExpireVisitor.GetByIndex(index,tag);
		public static List<rawRoundExpire> GetRoundExpireByFilter(Func<rawRoundExpire, bool> filterFunc,string tag="") => RoundExpireVisitor.GetByFilter(filterFunc,tag);
		public static rawRoundExpire? GetOneRoundExpireByFilter(Func<rawRoundExpire, bool> filterFunc,string tag="") => RoundExpireVisitor.GetOneByFilter(filterFunc,tag);
	#endregion RoundExpire
	#region RoundLifeTime
		public static int GetCountRoundLifeTimeSlice(string tag="") => RoundLifeTimeVisitor.GetCount(tag);
		public static string GetFileNameRoundLifeTimeSlice() => RoundLifeTimeVisitor.GetFileName();
		public static PBC::RepeatedField<rawRoundLifeTime> GetRoundLifeTimeSlice(string tag="") => RoundLifeTimeVisitor.All(tag);
		public static void RangeRoundLifeTimeSlice(Action<int, rawRoundLifeTime> filter,string tag="") => RoundLifeTimeVisitor.Range(filter,tag);
		public static rawRoundLifeTime? GetRoundLifeTimeByIndex(int index,string tag="") => RoundLifeTimeVisitor.GetByIndex(index,tag);
		public static List<rawRoundLifeTime> GetRoundLifeTimeByFilter(Func<rawRoundLifeTime, bool> filterFunc,string tag="") => RoundLifeTimeVisitor.GetByFilter(filterFunc,tag);
		public static rawRoundLifeTime? GetOneRoundLifeTimeByFilter(Func<rawRoundLifeTime, bool> filterFunc,string tag="") => RoundLifeTimeVisitor.GetOneByFilter(filterFunc,tag);
	#endregion RoundLifeTime
	#region RoundScore
		public static int GetCountRoundScoreSlice(string tag="") => RoundScoreVisitor.GetCount(tag);
		public static string GetFileNameRoundScoreSlice() => RoundScoreVisitor.GetFileName();
		public static PBC::RepeatedField<rawRoundScore> GetRoundScoreSlice(string tag="") => RoundScoreVisitor.All(tag);
		public static void RangeRoundScoreSlice(Action<int, rawRoundScore> filter,string tag="") => RoundScoreVisitor.Range(filter,tag);
		public static rawRoundScore? GetRoundScoreByIndex(int index,string tag="") => RoundScoreVisitor.GetByIndex(index,tag);
		public static List<rawRoundScore> GetRoundScoreByFilter(Func<rawRoundScore, bool> filterFunc,string tag="") => RoundScoreVisitor.GetByFilter(filterFunc,tag);
		public static rawRoundScore? GetOneRoundScoreByFilter(Func<rawRoundScore, bool> filterFunc,string tag="") => RoundScoreVisitor.GetOneByFilter(filterFunc,tag);
	#endregion RoundScore
	#region RoundTool
		public static int GetCountRoundToolSlice(string tag="") => RoundToolVisitor.GetCount(tag);
		public static string GetFileNameRoundToolSlice() => RoundToolVisitor.GetFileName();
		public static PBC::RepeatedField<rawRoundTool> GetRoundToolSlice(string tag="") => RoundToolVisitor.All(tag);
		public static void RangeRoundToolSlice(Action<int, rawRoundTool> filter,string tag="") => RoundToolVisitor.Range(filter,tag);
		public static rawRoundTool? GetRoundToolByIndex(int index,string tag="") => RoundToolVisitor.GetByIndex(index,tag);
		public static List<rawRoundTool> GetRoundToolByFilter(Func<rawRoundTool, bool> filterFunc,string tag="") => RoundToolVisitor.GetByFilter(filterFunc,tag);
		public static rawRoundTool? GetOneRoundToolByFilter(Func<rawRoundTool, bool> filterFunc,string tag="") => RoundToolVisitor.GetOneByFilter(filterFunc,tag);
	#endregion RoundTool
	#region SettingsCommunity
		public static int GetCountSettingsCommunityMap(string tag="") => SettingsCommunityVisitor.GetCount(tag);
		public static string GetFileNameSettingsCommunityMap() => SettingsCommunityVisitor.GetFileName();
		public static List<int> SortedKeysSettingsCommunityMap(string tag="") => SettingsCommunityVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawSettingsCommunity> GetSettingsCommunityMap(string tag="") => SettingsCommunityVisitor.All(tag);
		public static void RangeSettingsCommunityMap(Action<int, rawSettingsCommunity> filter,string tag="") => SettingsCommunityVisitor.Range(filter,tag);
		public static List<int> KeysSettingsCommunityMap(string tag="") => SettingsCommunityVisitor.Keys(tag);
		public static rawSettingsCommunity? GetSettingsCommunity(int key,string tag="") => SettingsCommunityVisitor.Get(key,tag);
		public static List<rawSettingsCommunity> GetSettingsCommunityByFilter(Func<rawSettingsCommunity, bool> filterFunc,string tag="") => SettingsCommunityVisitor.GetByFilter(filterFunc,tag);
		public static rawSettingsCommunity? GetOneSettingsCommunityByFilter(Func<rawSettingsCommunity, bool> filterFunc,string tag="") => SettingsCommunityVisitor.GetOneByFilter(filterFunc,tag);
	#endregion SettingsCommunity
	#region SevenDayTaskDetail
		public static int GetCountSevenDayTaskDetailMap(string tag="") => SevenDayTaskDetailVisitor.GetCount(tag);
		public static string GetFileNameSevenDayTaskDetailMap() => SevenDayTaskDetailVisitor.GetFileName();
		public static List<int> SortedKeysSevenDayTaskDetailMap(string tag="") => SevenDayTaskDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawSevenDayTaskDetail> GetSevenDayTaskDetailMap(string tag="") => SevenDayTaskDetailVisitor.All(tag);
		public static void RangeSevenDayTaskDetailMap(Action<int, rawSevenDayTaskDetail> filter,string tag="") => SevenDayTaskDetailVisitor.Range(filter,tag);
		public static List<int> KeysSevenDayTaskDetailMap(string tag="") => SevenDayTaskDetailVisitor.Keys(tag);
		public static rawSevenDayTaskDetail? GetSevenDayTaskDetail(int key,string tag="") => SevenDayTaskDetailVisitor.Get(key,tag);
		public static List<rawSevenDayTaskDetail> GetSevenDayTaskDetailByFilter(Func<rawSevenDayTaskDetail, bool> filterFunc,string tag="") => SevenDayTaskDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawSevenDayTaskDetail? GetOneSevenDayTaskDetailByFilter(Func<rawSevenDayTaskDetail, bool> filterFunc,string tag="") => SevenDayTaskDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion SevenDayTaskDetail
	#region SevenDayTaskGroup
		public static int GetCountSevenDayTaskGroupMap(string tag="") => SevenDayTaskGroupVisitor.GetCount(tag);
		public static string GetFileNameSevenDayTaskGroupMap() => SevenDayTaskGroupVisitor.GetFileName();
		public static List<int> SortedKeysSevenDayTaskGroupMap(string tag="") => SevenDayTaskGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawSevenDayTaskGroup> GetSevenDayTaskGroupMap(string tag="") => SevenDayTaskGroupVisitor.All(tag);
		public static void RangeSevenDayTaskGroupMap(Action<int, rawSevenDayTaskGroup> filter,string tag="") => SevenDayTaskGroupVisitor.Range(filter,tag);
		public static List<int> KeysSevenDayTaskGroupMap(string tag="") => SevenDayTaskGroupVisitor.Keys(tag);
		public static rawSevenDayTaskGroup? GetSevenDayTaskGroup(int key,string tag="") => SevenDayTaskGroupVisitor.Get(key,tag);
		public static List<rawSevenDayTaskGroup> GetSevenDayTaskGroupByFilter(Func<rawSevenDayTaskGroup, bool> filterFunc,string tag="") => SevenDayTaskGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawSevenDayTaskGroup? GetOneSevenDayTaskGroupByFilter(Func<rawSevenDayTaskGroup, bool> filterFunc,string tag="") => SevenDayTaskGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion SevenDayTaskGroup
	#region SevenDayTaskInfo
		public static int GetCountSevenDayTaskInfoMap(string tag="") => SevenDayTaskInfoVisitor.GetCount(tag);
		public static string GetFileNameSevenDayTaskInfoMap() => SevenDayTaskInfoVisitor.GetFileName();
		public static List<int> SortedKeysSevenDayTaskInfoMap(string tag="") => SevenDayTaskInfoVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawSevenDayTaskInfo> GetSevenDayTaskInfoMap(string tag="") => SevenDayTaskInfoVisitor.All(tag);
		public static void RangeSevenDayTaskInfoMap(Action<int, rawSevenDayTaskInfo> filter,string tag="") => SevenDayTaskInfoVisitor.Range(filter,tag);
		public static List<int> KeysSevenDayTaskInfoMap(string tag="") => SevenDayTaskInfoVisitor.Keys(tag);
		public static rawSevenDayTaskInfo? GetSevenDayTaskInfo(int key,string tag="") => SevenDayTaskInfoVisitor.Get(key,tag);
		public static List<rawSevenDayTaskInfo> GetSevenDayTaskInfoByFilter(Func<rawSevenDayTaskInfo, bool> filterFunc,string tag="") => SevenDayTaskInfoVisitor.GetByFilter(filterFunc,tag);
		public static rawSevenDayTaskInfo? GetOneSevenDayTaskInfoByFilter(Func<rawSevenDayTaskInfo, bool> filterFunc,string tag="") => SevenDayTaskInfoVisitor.GetOneByFilter(filterFunc,tag);
	#endregion SevenDayTaskInfo
	#region SevenDayTaskRwd
		public static int GetCountSevenDayTaskRwdMap(string tag="") => SevenDayTaskRwdVisitor.GetCount(tag);
		public static string GetFileNameSevenDayTaskRwdMap() => SevenDayTaskRwdVisitor.GetFileName();
		public static List<int> SortedKeysSevenDayTaskRwdMap(string tag="") => SevenDayTaskRwdVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawSevenDayTaskRwd> GetSevenDayTaskRwdMap(string tag="") => SevenDayTaskRwdVisitor.All(tag);
		public static void RangeSevenDayTaskRwdMap(Action<int, rawSevenDayTaskRwd> filter,string tag="") => SevenDayTaskRwdVisitor.Range(filter,tag);
		public static List<int> KeysSevenDayTaskRwdMap(string tag="") => SevenDayTaskRwdVisitor.Keys(tag);
		public static rawSevenDayTaskRwd? GetSevenDayTaskRwd(int key,string tag="") => SevenDayTaskRwdVisitor.Get(key,tag);
		public static List<rawSevenDayTaskRwd> GetSevenDayTaskRwdByFilter(Func<rawSevenDayTaskRwd, bool> filterFunc,string tag="") => SevenDayTaskRwdVisitor.GetByFilter(filterFunc,tag);
		public static rawSevenDayTaskRwd? GetOneSevenDayTaskRwdByFilter(Func<rawSevenDayTaskRwd, bool> filterFunc,string tag="") => SevenDayTaskRwdVisitor.GetOneByFilter(filterFunc,tag);
	#endregion SevenDayTaskRwd
	#region Shake
		public static int GetCountShakeMap(string tag="") => ShakeVisitor.GetCount(tag);
		public static string GetFileNameShakeMap() => ShakeVisitor.GetFileName();
		public static List<int> SortedKeysShakeMap(string tag="") => ShakeVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawShake> GetShakeMap(string tag="") => ShakeVisitor.All(tag);
		public static void RangeShakeMap(Action<int, rawShake> filter,string tag="") => ShakeVisitor.Range(filter,tag);
		public static List<int> KeysShakeMap(string tag="") => ShakeVisitor.Keys(tag);
		public static rawShake? GetShake(int key,string tag="") => ShakeVisitor.Get(key,tag);
		public static List<rawShake> GetShakeByFilter(Func<rawShake, bool> filterFunc,string tag="") => ShakeVisitor.GetByFilter(filterFunc,tag);
		public static rawShake? GetOneShakeByFilter(Func<rawShake, bool> filterFunc,string tag="") => ShakeVisitor.GetOneByFilter(filterFunc,tag);
	#endregion Shake
	#region ShinnyGuarPack
		public static int GetCountShinnyGuarPackMap(string tag="") => ShinnyGuarPackVisitor.GetCount(tag);
		public static string GetFileNameShinnyGuarPackMap() => ShinnyGuarPackVisitor.GetFileName();
		public static List<int> SortedKeysShinnyGuarPackMap(string tag="") => ShinnyGuarPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawShinnyGuarPack> GetShinnyGuarPackMap(string tag="") => ShinnyGuarPackVisitor.All(tag);
		public static void RangeShinnyGuarPackMap(Action<int, rawShinnyGuarPack> filter,string tag="") => ShinnyGuarPackVisitor.Range(filter,tag);
		public static List<int> KeysShinnyGuarPackMap(string tag="") => ShinnyGuarPackVisitor.Keys(tag);
		public static rawShinnyGuarPack? GetShinnyGuarPack(int key,string tag="") => ShinnyGuarPackVisitor.Get(key,tag);
		public static List<rawShinnyGuarPack> GetShinnyGuarPackByFilter(Func<rawShinnyGuarPack, bool> filterFunc,string tag="") => ShinnyGuarPackVisitor.GetByFilter(filterFunc,tag);
		public static rawShinnyGuarPack? GetOneShinnyGuarPackByFilter(Func<rawShinnyGuarPack, bool> filterFunc,string tag="") => ShinnyGuarPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ShinnyGuarPack
	#region ShopCommunity
		public static int GetCountShopCommunityMap(string tag="") => ShopCommunityVisitor.GetCount(tag);
		public static string GetFileNameShopCommunityMap() => ShopCommunityVisitor.GetFileName();
		public static List<int> SortedKeysShopCommunityMap(string tag="") => ShopCommunityVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawShopCommunity> GetShopCommunityMap(string tag="") => ShopCommunityVisitor.All(tag);
		public static void RangeShopCommunityMap(Action<int, rawShopCommunity> filter,string tag="") => ShopCommunityVisitor.Range(filter,tag);
		public static List<int> KeysShopCommunityMap(string tag="") => ShopCommunityVisitor.Keys(tag);
		public static rawShopCommunity? GetShopCommunity(int key,string tag="") => ShopCommunityVisitor.Get(key,tag);
		public static List<rawShopCommunity> GetShopCommunityByFilter(Func<rawShopCommunity, bool> filterFunc,string tag="") => ShopCommunityVisitor.GetByFilter(filterFunc,tag);
		public static rawShopCommunity? GetOneShopCommunityByFilter(Func<rawShopCommunity, bool> filterFunc,string tag="") => ShopCommunityVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ShopCommunity
	#region Sound
		public static int GetCountSoundMap(string tag="") => SoundVisitor.GetCount(tag);
		public static string GetFileNameSoundMap() => SoundVisitor.GetFileName();
		public static List<string> SortedKeysSoundMap(string tag="") => SoundVisitor.SortedKeys(tag);
		public static PBC::MapField<string, rawSound> GetSoundMap(string tag="") => SoundVisitor.All(tag);
		public static void RangeSoundMap(Action<string, rawSound> filter,string tag="") => SoundVisitor.Range(filter,tag);
		public static List<string> KeysSoundMap(string tag="") => SoundVisitor.Keys(tag);
		public static rawSound? GetSound(string key,string tag="") => SoundVisitor.Get(key,tag);
		public static List<rawSound> GetSoundByFilter(Func<rawSound, bool> filterFunc,string tag="") => SoundVisitor.GetByFilter(filterFunc,tag);
		public static rawSound? GetOneSoundByFilter(Func<rawSound, bool> filterFunc,string tag="") => SoundVisitor.GetOneByFilter(filterFunc,tag);
	#endregion Sound
	#region SpinPack
		public static int GetCountSpinPackMap(string tag="") => SpinPackVisitor.GetCount(tag);
		public static string GetFileNameSpinPackMap() => SpinPackVisitor.GetFileName();
		public static List<int> SortedKeysSpinPackMap(string tag="") => SpinPackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawSpinPack> GetSpinPackMap(string tag="") => SpinPackVisitor.All(tag);
		public static void RangeSpinPackMap(Action<int, rawSpinPack> filter,string tag="") => SpinPackVisitor.Range(filter,tag);
		public static List<int> KeysSpinPackMap(string tag="") => SpinPackVisitor.Keys(tag);
		public static rawSpinPack? GetSpinPack(int key,string tag="") => SpinPackVisitor.Get(key,tag);
		public static List<rawSpinPack> GetSpinPackByFilter(Func<rawSpinPack, bool> filterFunc,string tag="") => SpinPackVisitor.GetByFilter(filterFunc,tag);
		public static rawSpinPack? GetOneSpinPackByFilter(Func<rawSpinPack, bool> filterFunc,string tag="") => SpinPackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion SpinPack
	#region SpinPackDetail
		public static int GetCountSpinPackDetailMap(string tag="") => SpinPackDetailVisitor.GetCount(tag);
		public static string GetFileNameSpinPackDetailMap() => SpinPackDetailVisitor.GetFileName();
		public static List<int> SortedKeysSpinPackDetailMap(string tag="") => SpinPackDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawSpinPackDetail> GetSpinPackDetailMap(string tag="") => SpinPackDetailVisitor.All(tag);
		public static void RangeSpinPackDetailMap(Action<int, rawSpinPackDetail> filter,string tag="") => SpinPackDetailVisitor.Range(filter,tag);
		public static List<int> KeysSpinPackDetailMap(string tag="") => SpinPackDetailVisitor.Keys(tag);
		public static rawSpinPackDetail? GetSpinPackDetail(int key,string tag="") => SpinPackDetailVisitor.Get(key,tag);
		public static List<rawSpinPackDetail> GetSpinPackDetailByFilter(Func<rawSpinPackDetail, bool> filterFunc,string tag="") => SpinPackDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawSpinPackDetail? GetOneSpinPackDetailByFilter(Func<rawSpinPackDetail, bool> filterFunc,string tag="") => SpinPackDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion SpinPackDetail
	#region SpinPackRewardPool
		public static int GetCountSpinPackRewardPoolMap(string tag="") => SpinPackRewardPoolVisitor.GetCount(tag);
		public static string GetFileNameSpinPackRewardPoolMap() => SpinPackRewardPoolVisitor.GetFileName();
		public static List<int> SortedKeysSpinPackRewardPoolMap(string tag="") => SpinPackRewardPoolVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawSpinPackRewardPool> GetSpinPackRewardPoolMap(string tag="") => SpinPackRewardPoolVisitor.All(tag);
		public static void RangeSpinPackRewardPoolMap(Action<int, rawSpinPackRewardPool> filter,string tag="") => SpinPackRewardPoolVisitor.Range(filter,tag);
		public static List<int> KeysSpinPackRewardPoolMap(string tag="") => SpinPackRewardPoolVisitor.Keys(tag);
		public static rawSpinPackRewardPool? GetSpinPackRewardPool(int key,string tag="") => SpinPackRewardPoolVisitor.Get(key,tag);
		public static List<rawSpinPackRewardPool> GetSpinPackRewardPoolByFilter(Func<rawSpinPackRewardPool, bool> filterFunc,string tag="") => SpinPackRewardPoolVisitor.GetByFilter(filterFunc,tag);
		public static rawSpinPackRewardPool? GetOneSpinPackRewardPoolByFilter(Func<rawSpinPackRewardPool, bool> filterFunc,string tag="") => SpinPackRewardPoolVisitor.GetOneByFilter(filterFunc,tag);
	#endregion SpinPackRewardPool
	#region StarExchange
		public static int GetCountStarExchangeMap(string tag="") => StarExchangeVisitor.GetCount(tag);
		public static string GetFileNameStarExchangeMap() => StarExchangeVisitor.GetFileName();
		public static List<int> SortedKeysStarExchangeMap(string tag="") => StarExchangeVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawStarExchange> GetStarExchangeMap(string tag="") => StarExchangeVisitor.All(tag);
		public static void RangeStarExchangeMap(Action<int, rawStarExchange> filter,string tag="") => StarExchangeVisitor.Range(filter,tag);
		public static List<int> KeysStarExchangeMap(string tag="") => StarExchangeVisitor.Keys(tag);
		public static rawStarExchange? GetStarExchange(int key,string tag="") => StarExchangeVisitor.Get(key,tag);
		public static List<rawStarExchange> GetStarExchangeByFilter(Func<rawStarExchange, bool> filterFunc,string tag="") => StarExchangeVisitor.GetByFilter(filterFunc,tag);
		public static rawStarExchange? GetOneStarExchangeByFilter(Func<rawStarExchange, bool> filterFunc,string tag="") => StarExchangeVisitor.GetOneByFilter(filterFunc,tag);
	#endregion StarExchange
	#region ThreeForOnePack
		public static int GetCountThreeForOnePackMap(string tag="") => ThreeForOnePackVisitor.GetCount(tag);
		public static string GetFileNameThreeForOnePackMap() => ThreeForOnePackVisitor.GetFileName();
		public static List<int> SortedKeysThreeForOnePackMap(string tag="") => ThreeForOnePackVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawThreeForOnePack> GetThreeForOnePackMap(string tag="") => ThreeForOnePackVisitor.All(tag);
		public static void RangeThreeForOnePackMap(Action<int, rawThreeForOnePack> filter,string tag="") => ThreeForOnePackVisitor.Range(filter,tag);
		public static List<int> KeysThreeForOnePackMap(string tag="") => ThreeForOnePackVisitor.Keys(tag);
		public static rawThreeForOnePack? GetThreeForOnePack(int key,string tag="") => ThreeForOnePackVisitor.Get(key,tag);
		public static List<rawThreeForOnePack> GetThreeForOnePackByFilter(Func<rawThreeForOnePack, bool> filterFunc,string tag="") => ThreeForOnePackVisitor.GetByFilter(filterFunc,tag);
		public static rawThreeForOnePack? GetOneThreeForOnePackByFilter(Func<rawThreeForOnePack, bool> filterFunc,string tag="") => ThreeForOnePackVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ThreeForOnePack
	#region ToastConfig
		public static int GetCountToastConfigSlice(string tag="") => ToastConfigVisitor.GetCount(tag);
		public static string GetFileNameToastConfigSlice() => ToastConfigVisitor.GetFileName();
		public static PBC::RepeatedField<rawToastConfig> GetToastConfigSlice(string tag="") => ToastConfigVisitor.All(tag);
		public static void RangeToastConfigSlice(Action<int, rawToastConfig> filter,string tag="") => ToastConfigVisitor.Range(filter,tag);
		public static rawToastConfig? GetToastConfigByIndex(int index,string tag="") => ToastConfigVisitor.GetByIndex(index,tag);
		public static List<rawToastConfig> GetToastConfigByFilter(Func<rawToastConfig, bool> filterFunc,string tag="") => ToastConfigVisitor.GetByFilter(filterFunc,tag);
		public static rawToastConfig? GetOneToastConfigByFilter(Func<rawToastConfig, bool> filterFunc,string tag="") => ToastConfigVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ToastConfig
	#region ToolExchange
		public static int GetCountToolExchangeMap(string tag="") => ToolExchangeVisitor.GetCount(tag);
		public static string GetFileNameToolExchangeMap() => ToolExchangeVisitor.GetFileName();
		public static List<int> SortedKeysToolExchangeMap(string tag="") => ToolExchangeVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawToolExchange> GetToolExchangeMap(string tag="") => ToolExchangeVisitor.All(tag);
		public static void RangeToolExchangeMap(Action<int, rawToolExchange> filter,string tag="") => ToolExchangeVisitor.Range(filter,tag);
		public static List<int> KeysToolExchangeMap(string tag="") => ToolExchangeVisitor.Keys(tag);
		public static rawToolExchange? GetToolExchange(int key,string tag="") => ToolExchangeVisitor.Get(key,tag);
		public static List<rawToolExchange> GetToolExchangeByFilter(Func<rawToolExchange, bool> filterFunc,string tag="") => ToolExchangeVisitor.GetByFilter(filterFunc,tag);
		public static rawToolExchange? GetOneToolExchangeByFilter(Func<rawToolExchange, bool> filterFunc,string tag="") => ToolExchangeVisitor.GetOneByFilter(filterFunc,tag);
	#endregion ToolExchange
	#region TrainChallenge
		public static int GetCountTrainChallengeMap(string tag="") => TrainChallengeVisitor.GetCount(tag);
		public static string GetFileNameTrainChallengeMap() => TrainChallengeVisitor.GetFileName();
		public static List<int> SortedKeysTrainChallengeMap(string tag="") => TrainChallengeVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawTrainChallenge> GetTrainChallengeMap(string tag="") => TrainChallengeVisitor.All(tag);
		public static void RangeTrainChallengeMap(Action<int, rawTrainChallenge> filter,string tag="") => TrainChallengeVisitor.Range(filter,tag);
		public static List<int> KeysTrainChallengeMap(string tag="") => TrainChallengeVisitor.Keys(tag);
		public static rawTrainChallenge? GetTrainChallenge(int key,string tag="") => TrainChallengeVisitor.Get(key,tag);
		public static List<rawTrainChallenge> GetTrainChallengeByFilter(Func<rawTrainChallenge, bool> filterFunc,string tag="") => TrainChallengeVisitor.GetByFilter(filterFunc,tag);
		public static rawTrainChallenge? GetOneTrainChallengeByFilter(Func<rawTrainChallenge, bool> filterFunc,string tag="") => TrainChallengeVisitor.GetOneByFilter(filterFunc,tag);
	#endregion TrainChallenge
	#region TrainGroupDetail
		public static int GetCountTrainGroupDetailMap(string tag="") => TrainGroupDetailVisitor.GetCount(tag);
		public static string GetFileNameTrainGroupDetailMap() => TrainGroupDetailVisitor.GetFileName();
		public static List<int> SortedKeysTrainGroupDetailMap(string tag="") => TrainGroupDetailVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawTrainGroupDetail> GetTrainGroupDetailMap(string tag="") => TrainGroupDetailVisitor.All(tag);
		public static void RangeTrainGroupDetailMap(Action<int, rawTrainGroupDetail> filter,string tag="") => TrainGroupDetailVisitor.Range(filter,tag);
		public static List<int> KeysTrainGroupDetailMap(string tag="") => TrainGroupDetailVisitor.Keys(tag);
		public static rawTrainGroupDetail? GetTrainGroupDetail(int key,string tag="") => TrainGroupDetailVisitor.Get(key,tag);
		public static List<rawTrainGroupDetail> GetTrainGroupDetailByFilter(Func<rawTrainGroupDetail, bool> filterFunc,string tag="") => TrainGroupDetailVisitor.GetByFilter(filterFunc,tag);
		public static rawTrainGroupDetail? GetOneTrainGroupDetailByFilter(Func<rawTrainGroupDetail, bool> filterFunc,string tag="") => TrainGroupDetailVisitor.GetOneByFilter(filterFunc,tag);
	#endregion TrainGroupDetail
	#region TrainLevelGroup
		public static int GetCountTrainLevelGroupMap(string tag="") => TrainLevelGroupVisitor.GetCount(tag);
		public static string GetFileNameTrainLevelGroupMap() => TrainLevelGroupVisitor.GetFileName();
		public static List<int> SortedKeysTrainLevelGroupMap(string tag="") => TrainLevelGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawTrainLevelGroup> GetTrainLevelGroupMap(string tag="") => TrainLevelGroupVisitor.All(tag);
		public static void RangeTrainLevelGroupMap(Action<int, rawTrainLevelGroup> filter,string tag="") => TrainLevelGroupVisitor.Range(filter,tag);
		public static List<int> KeysTrainLevelGroupMap(string tag="") => TrainLevelGroupVisitor.Keys(tag);
		public static rawTrainLevelGroup? GetTrainLevelGroup(int key,string tag="") => TrainLevelGroupVisitor.Get(key,tag);
		public static List<rawTrainLevelGroup> GetTrainLevelGroupByFilter(Func<rawTrainLevelGroup, bool> filterFunc,string tag="") => TrainLevelGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawTrainLevelGroup? GetOneTrainLevelGroupByFilter(Func<rawTrainLevelGroup, bool> filterFunc,string tag="") => TrainLevelGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion TrainLevelGroup
	#region TrainMilestone
		public static int GetCountTrainMilestoneMap(string tag="") => TrainMilestoneVisitor.GetCount(tag);
		public static string GetFileNameTrainMilestoneMap() => TrainMilestoneVisitor.GetFileName();
		public static List<int> SortedKeysTrainMilestoneMap(string tag="") => TrainMilestoneVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawTrainMilestone> GetTrainMilestoneMap(string tag="") => TrainMilestoneVisitor.All(tag);
		public static void RangeTrainMilestoneMap(Action<int, rawTrainMilestone> filter,string tag="") => TrainMilestoneVisitor.Range(filter,tag);
		public static List<int> KeysTrainMilestoneMap(string tag="") => TrainMilestoneVisitor.Keys(tag);
		public static rawTrainMilestone? GetTrainMilestone(int key,string tag="") => TrainMilestoneVisitor.Get(key,tag);
		public static List<rawTrainMilestone> GetTrainMilestoneByFilter(Func<rawTrainMilestone, bool> filterFunc,string tag="") => TrainMilestoneVisitor.GetByFilter(filterFunc,tag);
		public static rawTrainMilestone? GetOneTrainMilestoneByFilter(Func<rawTrainMilestone, bool> filterFunc,string tag="") => TrainMilestoneVisitor.GetOneByFilter(filterFunc,tag);
	#endregion TrainMilestone
	#region TrainMission
		public static int GetCountTrainMissionMap(string tag="") => TrainMissionVisitor.GetCount(tag);
		public static string GetFileNameTrainMissionMap() => TrainMissionVisitor.GetFileName();
		public static List<int> SortedKeysTrainMissionMap(string tag="") => TrainMissionVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawTrainMission> GetTrainMissionMap(string tag="") => TrainMissionVisitor.All(tag);
		public static void RangeTrainMissionMap(Action<int, rawTrainMission> filter,string tag="") => TrainMissionVisitor.Range(filter,tag);
		public static List<int> KeysTrainMissionMap(string tag="") => TrainMissionVisitor.Keys(tag);
		public static rawTrainMission? GetTrainMission(int key,string tag="") => TrainMissionVisitor.Get(key,tag);
		public static List<rawTrainMission> GetTrainMissionByFilter(Func<rawTrainMission, bool> filterFunc,string tag="") => TrainMissionVisitor.GetByFilter(filterFunc,tag);
		public static rawTrainMission? GetOneTrainMissionByFilter(Func<rawTrainMission, bool> filterFunc,string tag="") => TrainMissionVisitor.GetOneByFilter(filterFunc,tag);
	#endregion TrainMission
	#region UserGrade
		public static int GetCountUserGradeMap(string tag="") => UserGradeVisitor.GetCount(tag);
		public static string GetFileNameUserGradeMap() => UserGradeVisitor.GetFileName();
		public static List<int> SortedKeysUserGradeMap(string tag="") => UserGradeVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawUserGrade> GetUserGradeMap(string tag="") => UserGradeVisitor.All(tag);
		public static void RangeUserGradeMap(Action<int, rawUserGrade> filter,string tag="") => UserGradeVisitor.Range(filter,tag);
		public static List<int> KeysUserGradeMap(string tag="") => UserGradeVisitor.Keys(tag);
		public static rawUserGrade? GetUserGrade(int key,string tag="") => UserGradeVisitor.Get(key,tag);
		public static List<rawUserGrade> GetUserGradeByFilter(Func<rawUserGrade, bool> filterFunc,string tag="") => UserGradeVisitor.GetByFilter(filterFunc,tag);
		public static rawUserGrade? GetOneUserGradeByFilter(Func<rawUserGrade, bool> filterFunc,string tag="") => UserGradeVisitor.GetOneByFilter(filterFunc,tag);
	#endregion UserGrade
	#region UserGradeGroup
		public static int GetCountUserGradeGroupMap(string tag="") => UserGradeGroupVisitor.GetCount(tag);
		public static string GetFileNameUserGradeGroupMap() => UserGradeGroupVisitor.GetFileName();
		public static List<int> SortedKeysUserGradeGroupMap(string tag="") => UserGradeGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawUserGradeGroup> GetUserGradeGroupMap(string tag="") => UserGradeGroupVisitor.All(tag);
		public static void RangeUserGradeGroupMap(Action<int, rawUserGradeGroup> filter,string tag="") => UserGradeGroupVisitor.Range(filter,tag);
		public static List<int> KeysUserGradeGroupMap(string tag="") => UserGradeGroupVisitor.Keys(tag);
		public static rawUserGradeGroup? GetUserGradeGroup(int key,string tag="") => UserGradeGroupVisitor.Get(key,tag);
		public static List<rawUserGradeGroup> GetUserGradeGroupByFilter(Func<rawUserGradeGroup, bool> filterFunc,string tag="") => UserGradeGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawUserGradeGroup? GetOneUserGradeGroupByFilter(Func<rawUserGradeGroup, bool> filterFunc,string tag="") => UserGradeGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion UserGradeGroup
	#region UserTag
		public static int GetCountUserTagMap(string tag="") => UserTagVisitor.GetCount(tag);
		public static string GetFileNameUserTagMap() => UserTagVisitor.GetFileName();
		public static List<int> SortedKeysUserTagMap(string tag="") => UserTagVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawUserTag> GetUserTagMap(string tag="") => UserTagVisitor.All(tag);
		public static void RangeUserTagMap(Action<int, rawUserTag> filter,string tag="") => UserTagVisitor.Range(filter,tag);
		public static List<int> KeysUserTagMap(string tag="") => UserTagVisitor.Keys(tag);
		public static rawUserTag? GetUserTag(int key,string tag="") => UserTagVisitor.Get(key,tag);
		public static List<rawUserTag> GetUserTagByFilter(Func<rawUserTag, bool> filterFunc,string tag="") => UserTagVisitor.GetByFilter(filterFunc,tag);
		public static rawUserTag? GetOneUserTagByFilter(Func<rawUserTag, bool> filterFunc,string tag="") => UserTagVisitor.GetOneByFilter(filterFunc,tag);
	#endregion UserTag
	#region UserTagGroup
		public static int GetCountUserTagGroupMap(string tag="") => UserTagGroupVisitor.GetCount(tag);
		public static string GetFileNameUserTagGroupMap() => UserTagGroupVisitor.GetFileName();
		public static List<int> SortedKeysUserTagGroupMap(string tag="") => UserTagGroupVisitor.SortedKeys(tag);
		public static PBC::MapField<int, rawUserTagGroup> GetUserTagGroupMap(string tag="") => UserTagGroupVisitor.All(tag);
		public static void RangeUserTagGroupMap(Action<int, rawUserTagGroup> filter,string tag="") => UserTagGroupVisitor.Range(filter,tag);
		public static List<int> KeysUserTagGroupMap(string tag="") => UserTagGroupVisitor.Keys(tag);
		public static rawUserTagGroup? GetUserTagGroup(int key,string tag="") => UserTagGroupVisitor.Get(key,tag);
		public static List<rawUserTagGroup> GetUserTagGroupByFilter(Func<rawUserTagGroup, bool> filterFunc,string tag="") => UserTagGroupVisitor.GetByFilter(filterFunc,tag);
		public static rawUserTagGroup? GetOneUserTagGroupByFilter(Func<rawUserTagGroup, bool> filterFunc,string tag="") => UserTagGroupVisitor.GetOneByFilter(filterFunc,tag);
	#endregion UserTagGroup
	}
}
#endregion Designer generated code
