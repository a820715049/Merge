// Code generated by protokitgo. DO NOT EDIT.
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System;
using System.Collections.Generic;

using BpMilestoneConf = fat.rawdata.BpMilestoneConf;
using rawBpMilestone = fat.rawdata.BpMilestone;
using rawBpMilestoneMapABValue = fat.rawdata.BpMilestoneMapABValue;
using PBC = global::Google.Protobuf.Collections;
using ConfManager = fat.conf.conf_loader.ConfManager;

namespace fat.conf
{
    public partial class BpMilestoneVisitor
    {
		private static bool _isInitialized = false;
		public static void Initialize()
		{
			if (_isInitialized) return;
			_isInitialized = true;
			// 重置状态
			Dispose();
			ConfManager.DataStreamProviderSetter[FileName] = RegisterDataStreamProvider;
			ConfManager.ReferenceUpdate[FileName] = UpdateReference;
			ConfManager.SortValuesUpdater[FileName] = UpdateSortValues;
			ConfManager.ABFallbackUpdater[FileName] = SetABFallback;
			ConfManager.ABDefaultUpdater[FileName] = SetABDefault;
			ConfManager.Loaders[FileName] = Load;
			ConfManager.Disposers[FileName] = Dispose;
			// 外层gen_load.cs
			fat.conf.Data.GetMapFunctions[FileName] = All;
			fat.conf.Data.DataStreamProviderSetter[FileName] = RegisterDataStreamProvider;
			fat.conf.Data.Loaders[FileName] = LoadFromStream;
		}

		public static void Dispose()
		{
			abFallback = null;
			_loadedFlag = false;
		}
		public static Dictionary<string, List<string>> GetABFallback() 
		{
			if(abFallback==null){
				abFallback = ConfManager.InitABFallback();
			}
			return abFallback;
		}

		public const string FileName = "BpMilestoneConf";
		// 默认ABTag，可以通过ConfManager.SetABDefault设定全局默认的AB Tag，也可以通过BpMilestoneVisitor.SetABDefault单独设定BpMilestone的默认tag
		private static string DefaultABTag = ConfManager.TagFoundation;
		// 默认AB fallback策略，可以通过ConfManager.SetABFallback设定全局默认的AB fallback策略，也可以通过BpMilestoneVisitor.SetABFallback单独设定BpMilestone的fallback策略
		private static Dictionary<string, List<string>>? abFallback = null;	
		private static Lazy<PBC::MapField<int, rawBpMilestone>> emptyAllReadonly = new Lazy<PBC::MapField<int, rawBpMilestone>>(()=> new PBC::MapField<int, rawBpMilestone>());
		// 加载标记
		private static bool _loadedFlag = false;
		// 懒加载函数，主配置数据
		private static ConfManager.DataStreamProvider? _dataStreamProvider = null;
		// 多语言数据支持
		private static ConfManager.LangDataStreamProvider? _langDataStreamProvider = null;
		
		private static void updateLoadedFlag(bool f)
	    {
			_loadedFlag = f;
	    }

	    private static void readLoadedFlag(ref bool f)
	    {
			f = _loadedFlag;
	    }
		public static bool ReferenceLoadFrom(string from)
		{
			if (_dataStreamProvider == null || !tryLazyLoad())
			{
				ConfManager.ExceptionOnLazyLoadFailed(FileName,$"lazy load triggered from: {from} failed");
				return false; // should not here
			}
			return true;
		}
		private static bool tryLazyLoad()
		{
		    if (_dataStreamProvider == null)
		    {
		        return true;
		    }
		    bool f = false;
		    readLoadedFlag(ref f);
		    if (f)
            {
                return true;
            }
		    var v = _dataStreamProvider(FileName);
		    if (v != null)
		    {
		        LoadFromStream(v);
		        return true;
		    }
		    return false;
		}
        // RegisterDataStreamProvider 注册数据提供者
		public static void RegisterDataStreamProvider(ConfManager.DataStreamProvider provider)
		{
            _dataStreamProvider = provider;
		}
        // RegisterLangDataStreamProvider 注册多语言数据提供者
		public static void RegisterLangDataStreamProvider(ConfManager.LangDataStreamProvider provider)
		{
            _langDataStreamProvider = provider;
		}

        // RegisterLazyLoaderCallback 注册懒加载回调
		public static void RegisterLazyLoaderCallback(ConfManager.DataStreamProvider provider)
		{
            _dataStreamProvider = provider;
		}

		// SetABFallback 更新ab fallback策略
		public static void SetABFallback(string abTag, List<string> fallback) 
		{
			var abObj = GetABFallback();
			if (fallback == null || fallback.Count == 0) 
			{
				abObj.Remove(abTag);
				return;
			}
			abObj[abTag] = fallback;
		}
		
		// SetABDefault 更新ab策略默认tag
		public static void SetABDefault(string abTag) 
		{ 
			DefaultABTag = abTag;
		}
		// All 返回全量数据Map
		public static (PBC::MapField<int, rawBpMilestone>,string) _allWithTag(string abTag="")
		{
			if (!tryLazyLoad())
            {
				ConfManager.ExceptionOnLazyLoadFailed(FileName,"lazy load failed");
            }
			var v = ConfManager.GetCurrent().BpMilestoneMap;
			var abMap = v.BpMilestoneMapAB;
			var abUsing = abTagTryFallback(abTag==""?DefaultABTag:abTag,abMap);
			if(abUsing == ConfManager.TagFoundation){
				return (v.BpMilestoneMap,abUsing);
			}else if(abUsing == ""){
				return (emptyAllReadonly.Value,abUsing);
			}
			return (abMap[abUsing].BpMilestoneMap,abUsing);
		}
		// All 返回全量数据Map
		public static PBC::MapField<int, rawBpMilestone> All(string abTag="")
		{
			return _allWithTag(abTag).Item1;
		}
		// 当前配置支持的AB TAG列表, 不包含基础配置，包含Patch版本
		public static List<string> ABList() {
			if (!tryLazyLoad())
            {
                throw new Exception("lazy load error");
            }
			var v = ConfManager.GetCurrent().BpMilestoneMap;
			if (v.BpMilestoneMapAB == null) {
				return new List<string>();
			}
			return new List<string>(v.BpMilestoneMapAB.Keys);
		}
		// 基础标签或abMap含数据则返回; 否则进入fallback策略，如未设定则返回空.
		public static string abTagTryFallback(string ab, PBC::MapField<string, rawBpMilestoneMapABValue> abMap)
		{
			if (ab == ConfManager.TagFoundation || (abMap!=null && abMap.TryGetValue(ab, out _))) return ab;
			// 获取回退列表
			var abObj = GetABFallback();
			if (!abObj.TryGetValue(ab, out var fallback))
			{
				abObj.TryGetValue(ConfManager.TagCommon, out fallback);
			}
			if (fallback == null || fallback.Count == 0) return "";
			foreach (var tag in fallback)
			{
				if (abMap != null && abMap.TryGetValue(tag, out _)) return tag;
				if (tag == ConfManager.TagFoundation) return ConfManager.TagFoundation;
			}
			return "";
		}

		public static int GetCount(string tag="") { return All(tag).Count; }
		public static string GetFileName() { return FileName; }

		// 检测ab patch
		public static void Patch(BpMilestoneConf cc) {
			foreach(KeyValuePair <string, rawBpMilestoneMapABValue> tagEntry in cc.BpMilestoneMapABPatch) 
			{
				var tag = tagEntry.Key;
				if (!cc.BpMilestoneMapAB.TryGetValue(tag, out var ps))
				{
					ps = new rawBpMilestoneMapABValue();
					cc.BpMilestoneMapAB[tag] = ps;
				}
                var tagTmp = ps.BpMilestoneMap;
				// 基础数据
				foreach(KeyValuePair <int, rawBpMilestone> entry in cc.BpMilestoneMap) 
				{
					tagTmp[entry.Key] = entry.Value;
				}
				// patch数据
				foreach(KeyValuePair <int, rawBpMilestone> entry in tagEntry.Value.BpMilestoneMap) 
				{
					tagTmp[entry.Key] = entry.Value;
				}
			}
		}
		private static void __UpdateReferenceWithTableData(Dictionary<string, object> ctx,ConfManager current,PBC::MapField<int,fat.rawdata.BpMilestone> tableData)
		{
		}

		public static void UpdateReference(Dictionary<string, object> ctx,ConfManager current) {
		}

		public static void UpdateSortValues(Dictionary<string, object> ctx,ConfManager current) {
		}
		private static Dictionary<string, List<int>> genSortedKeys(BpMilestoneConf cc) 
		{
			var ret = new Dictionary<string, List<int>>();
			if (!ret.TryGetValue(ConfManager.TagFoundation, out var listFoundation))
			{
				listFoundation = new List<int>();
				listFoundation.AddRange(cc.BpMilestoneMap.Keys);
				ret[ConfManager.TagFoundation] = listFoundation;
			}

			if (cc.BpMilestoneMapAB != null)
			{
				foreach (var entry in cc.BpMilestoneMapAB)
				{
					if (!ret.TryGetValue(entry.Key, out var list))
					{
						list = new List<int>();
						list.AddRange(entry.Value.BpMilestoneMap.Keys);
						ret[entry.Key] = list;
					}
				}
			}
			foreach (var entry in ret)
			{
				entry.Value.Sort();
			}
			return ret;
		}

		public static void  LoadFromStream(Google.Protobuf.CodedInputStream cis) {
			var updating = ConfManager.GetCurrent();
			updating.BpMilestoneMap.MergeFrom(cis);
			Patch(updating.BpMilestoneMap);
			updating.BpMilestoneSortedKeys = genSortedKeys(updating.BpMilestoneMap);
			if(ConfManager.AutoReferenceUpdate){
				UpdateReference(new Dictionary<string, object>(),updating);
			}
			UpdateSortValues(new Dictionary<string, object>(),updating);
			updateLoadedFlag(true);
		}

		public static void Load(Dictionary<string, object> ctx, string key, Google.Protobuf.CodedInputStream cis)
        {
            var updating = ConfManager.UpdatingFromCtx(ctx);
           if (updating == null) {
	            updating = ConfManager.GetCurrent();
            }

            var tmp = new BpMilestoneConf();
            tmp.MergeFrom(cis);
			updating.BpMilestoneMap = tmp;

			Patch(updating.BpMilestoneMap);
			updating.BpMilestoneSortedKeys = genSortedKeys(updating.BpMilestoneMap);
			if(ConfManager.AutoReferenceUpdate){
				UpdateReference(new Dictionary<string, object>(),updating);
			}
			UpdateSortValues(new Dictionary<string, object>(),updating);
			updateLoadedFlag(true);
        }
		public static List<int> SortedKeys(string tag="") 
		{
			var v = ConfManager.GetCurrent().BpMilestoneSortedKeys;
			var abUsing = (tag=="")?DefaultABTag:tag;
			return v[abUsing];
		}
		public static void Range(Action<int, rawBpMilestone> filter,string tag=""){
			foreach (var entry in All(tag))
			{
				filter?.Invoke(entry.Key, entry.Value);
			}
		}

		public static List<int> Keys(string tag=""){
			List<int> ret = new List<int>();
			foreach(int key in All(tag).Keys){
				ret.Add(key);
			}
			return ret;
		}
		// Get 根据key和tag返回数据，如不存在则触发异常
		public static rawBpMilestone MustGet(int key,string tag="") {
			var (pl,tagActual) = _allWithTag(tag);
			if (pl.TryGetValue(key, out var value))
			{
				return value;
			}
			throw new Exception($"[WARNING] MustGet, {FileName} tag:{tagActual} key: {key} not exist");
		}
		// Get 根据key和tag返回数据，如不存在则触发ConfManager.TriggerDataNotFound(可定制是否抛出异常)
		public static rawBpMilestone? Get(int key,string tag="") {
			var (pl,tagActual) = _allWithTag(tag);
			if (pl.TryGetValue(key, out var value))
			{
				return value;
			}
			ConfManager.TriggerDataNotFound(FileName,tagActual,$"key: {key} not exist");
			return null;
		}
		public static List<rawBpMilestone> GetByFilter(Func<rawBpMilestone, bool> filterFunc,string tag="") {
			List<rawBpMilestone> ret = new List<rawBpMilestone>();
			foreach(KeyValuePair <int, rawBpMilestone> entry in All(tag)) {
				if(filterFunc(entry.Value))
					ret.Add(entry.Value);
			}
			return ret;
		}
		static public rawBpMilestone? GetOneByFilter(Func<rawBpMilestone, bool> filterFunc,string tag="") {
			var (pl,tagActual) = _allWithTag(tag);
			foreach(KeyValuePair <int, rawBpMilestone> entry in pl) {
				if(filterFunc(entry.Value))
					return entry.Value;
			}
			ConfManager.TriggerDataNotFound(FileName,tagActual,$"GetOneByFilter not exist");
			return null;
		}
		// 当类型为 map 时，返回给定数据在 map中的主键值
		static public int MapKey(rawBpMilestone data) 
		{
			return data.Id;			
		}
    }
}
#endregion Designer generated code
