// Code generated by protokitgo. DO NOT EDIT.
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System;
using System.Collections.Generic;

using LangDeConf = fat.rawdata.LangDeConf;
using rawLangDe = fat.rawdata.LangDe;
using rawLangDeSliceABValue = fat.rawdata.LangDeSliceABValue;
using PBC = global::Google.Protobuf.Collections;
using ConfManager = fat.conf.conf_loader.ConfManager;

namespace fat.conf
{
    public partial class LangDeVisitor
    {
		private static bool _isInitialized = false;
		public static void Initialize()
		{
			if (_isInitialized) return;
			_isInitialized = true;
			// 重置状态
			Dispose();
			ConfManager.DataStreamProviderSetter[FileName] = RegisterDataStreamProvider;
			ConfManager.ReferenceUpdate[FileName] = UpdateReference;
			ConfManager.SortValuesUpdater[FileName] = UpdateSortValues;
			ConfManager.ABFallbackUpdater[FileName] = SetABFallback;
			ConfManager.ABDefaultUpdater[FileName] = SetABDefault;
			ConfManager.Loaders[FileName] = Load;
			ConfManager.Disposers[FileName] = Dispose;
			// 外层gen_load.cs
			fat.conf.Data.GetMapFunctions[FileName] = All;
			fat.conf.Data.DataStreamProviderSetter[FileName] = RegisterDataStreamProvider;
			fat.conf.Data.Loaders[FileName] = LoadFromStream;
		}

		public static void Dispose()
		{
			abFallback = null;
			_loadedFlag = false;
		}
		public static Dictionary<string, List<string>> GetABFallback() 
		{
			if(abFallback==null){
				abFallback = ConfManager.InitABFallback();
			}
			return abFallback;
		}

		public const string FileName = "LangDeConf";
		// 默认ABTag，可以通过ConfManager.SetABDefault设定全局默认的AB Tag，也可以通过LangDeVisitor.SetABDefault单独设定LangDe的默认tag
		private static string DefaultABTag = ConfManager.TagFoundation;
		// 默认AB fallback策略，可以通过ConfManager.SetABFallback设定全局默认的AB fallback策略，也可以通过LangDeVisitor.SetABFallback单独设定LangDe的fallback策略
		private static Dictionary<string, List<string>>? abFallback = null;
		private static Lazy<PBC::RepeatedField<rawLangDe>> emptyAllReadonly = new Lazy<PBC::RepeatedField<rawLangDe>>(()=>new PBC::RepeatedField<rawLangDe>());
		// 加载标记
		private static bool _loadedFlag = false;
		// 懒加载函数，主配置数据
		private static ConfManager.DataStreamProvider? _dataStreamProvider = null;
		// 多语言数据支持
		private static ConfManager.LangDataStreamProvider? _langDataStreamProvider = null;
		
		private static void updateLoadedFlag(bool f)
	    {
			_loadedFlag = f;
	    }

	    private static void readLoadedFlag(ref bool f)
	    {
			f = _loadedFlag;
	    }
		public static bool ReferenceLoadFrom(string from)
		{
			if (_dataStreamProvider == null || !tryLazyLoad())
			{
				ConfManager.ExceptionOnLazyLoadFailed(FileName,$"lazy load triggered from: {from} failed");
				return false; // should not here
			}
			return true;
		}
		private static bool tryLazyLoad()
		{
		    if (_dataStreamProvider == null)
		    {
		        return true;
		    }
		    bool f = false;
		    readLoadedFlag(ref f);
		    if (f)
            {
                return true;
            }
		    var v = _dataStreamProvider(FileName);
		    if (v != null)
		    {
		        LoadFromStream(v);
		        return true;
		    }
		    return false;
		}
        // RegisterDataStreamProvider 注册数据提供者
		public static void RegisterDataStreamProvider(ConfManager.DataStreamProvider provider)
		{
            _dataStreamProvider = provider;
		}
        // RegisterLangDataStreamProvider 注册多语言数据提供者
		public static void RegisterLangDataStreamProvider(ConfManager.LangDataStreamProvider provider)
		{
            _langDataStreamProvider = provider;
		}

        // RegisterLazyLoaderCallback 注册懒加载回调
		public static void RegisterLazyLoaderCallback(ConfManager.DataStreamProvider provider)
		{
            _dataStreamProvider = provider;
		}

		// SetABFallback 更新ab fallback策略
		public static void SetABFallback(string abTag, List<string> fallback) 
		{
			var abObj = GetABFallback();
			if (fallback == null || fallback.Count == 0) 
			{
				abObj.Remove(abTag);
				return;
			}
			abObj[abTag] = fallback;
		}
		
		// SetABDefault 更新ab策略默认tag
		public static void SetABDefault(string abTag) 
		{ 
			DefaultABTag = abTag;
		}
		// All 返回全量数据列表
		public static (PBC::RepeatedField<rawLangDe>,string) _allWithTag(string abTag="")
		{
			if (!tryLazyLoad())
            {
				ConfManager.ExceptionOnLazyLoadFailed(FileName,"lazy load failed");
            }
			var v = ConfManager.GetCurrent().LangDeSlice;
			var abMap = v.LangDeSliceAB;
			var abUsing = abTagTryFallback(abTag==""?DefaultABTag:abTag,abMap);
			if(abUsing == ConfManager.TagFoundation){
				return (v.LangDeSlice,abUsing);
			}else if(abUsing == ""){
				return (emptyAllReadonly.Value,abUsing);
			}
			return (abMap[abUsing].LangDeSlice,abUsing);
		}
		// All 返回全量数据列表
		public static PBC::RepeatedField<rawLangDe> All(string abTag="")
		{
			return _allWithTag(abTag).Item1;
		}
		// 当前配置支持的AB TAG列表, 不包含基础配置，包含Patch版本
		public static List<string> ABList() {
			if (!tryLazyLoad())
            {
                throw new Exception("lazy load error");
            }
			var v = ConfManager.GetCurrent().LangDeSlice;
			if (v.LangDeSliceAB == null) {
				return new List<string>();
			}
			return new List<string>(v.LangDeSliceAB.Keys);
		}
		// 基础标签或abMap含数据则返回; 否则进入fallback策略，如未设定则返回空.
		public static string abTagTryFallback(string ab, PBC::MapField<string, rawLangDeSliceABValue> abMap)
		{
			if (ab == ConfManager.TagFoundation || (abMap!=null && abMap.TryGetValue(ab, out _))) return ab;
			// 获取回退列表
			var abObj = GetABFallback();
			if (!abObj.TryGetValue(ab, out var fallback))
			{
				abObj.TryGetValue(ConfManager.TagCommon, out fallback);
			}
			if (fallback == null || fallback.Count == 0) return "";
			foreach (var tag in fallback)
			{
				if (abMap != null && abMap.TryGetValue(tag, out _)) return tag;
				if (tag == ConfManager.TagFoundation) return ConfManager.TagFoundation;
			}
			return "";
		}

		public static int GetCount(string tag="") { return All(tag).Count; }
		public static string GetFileName() { return FileName; }

		// 检测ab patch
		public static void Patch(LangDeConf cc) {
			foreach(KeyValuePair <string, rawLangDeSliceABValue> tagEntry in cc.LangDeSliceABPatch) 
			{
				var tag = tagEntry.Key;
				if (!cc.LangDeSliceAB.TryGetValue(tag, out var ps))
				{
					ps = new rawLangDeSliceABValue();
					cc.LangDeSliceAB[tag] = ps;
				}
                var tagTmp = ps.LangDeSlice;
				// 基础数据
				for(int i=0; i<cc.LangDeSlice.Count; ++i) 
				{
					tagTmp.Add(cc.LangDeSlice[i]);
				}
				// patch 数据
				var patchData = tagEntry.Value.LangDeSlice;
				for(int i=0; i<patchData.Count; ++i) 
				{
					// 未配置abp header，直接append到尾部
					tagTmp.Add(patchData[i]);
				}
			}
		}
		private static void __UpdateReferenceWithTableData(Dictionary<string, object> ctx,ConfManager current,PBC::RepeatedField<fat.rawdata.LangDe> tableData)
		{
		}

		public static void UpdateReference(Dictionary<string, object> ctx,ConfManager current) {
		}

		public static void UpdateSortValues(Dictionary<string, object> ctx,ConfManager current) {
		}

		public static void  LoadFromStream(Google.Protobuf.CodedInputStream cis) {
			var updating = ConfManager.GetCurrent();
			updating.LangDeSlice.MergeFrom(cis);
			Patch(updating.LangDeSlice);
			if(ConfManager.AutoReferenceUpdate){
				UpdateReference(new Dictionary<string, object>(),updating);
			}
			UpdateSortValues(new Dictionary<string, object>(),updating);
			updateLoadedFlag(true);
		}

		public static void Load(Dictionary<string, object> ctx, string key, Google.Protobuf.CodedInputStream cis)
        {
            var updating = ConfManager.UpdatingFromCtx(ctx);
           if (updating == null) {
	            updating = ConfManager.GetCurrent();
            }

            var tmp = new LangDeConf();
            tmp.MergeFrom(cis);
			updating.LangDeSlice = tmp;

			Patch(updating.LangDeSlice);
			if(ConfManager.AutoReferenceUpdate){
				UpdateReference(new Dictionary<string, object>(),updating);
			}
			UpdateSortValues(new Dictionary<string, object>(),updating);
			updateLoadedFlag(true);
        }
		public static void Range(Action<int, rawLangDe> filter,string tag="") {
			var pl = All(tag);
			for(int i=0; i < pl.Count; ++i) {
				filter?.Invoke(i, pl[i]);
			}
		}
		// MustGetByIndex 如数据不存在则抛出异常
		public static rawLangDe MustGetByIndex(int index,string tag="") {
			var (pl,tagActual) = _allWithTag(tag);
			if (index < 0 || index >= pl.Count)
			{
				throw new Exception($"[WARNING] MustGetByIndex, {FileName} tag:{tagActual} index: {index} not exist");
			}
			return pl[index];
		}
		// GetByIndex GetByIndex 如数据不存在触发 ConfManager.TriggerDataNotFound
		public static rawLangDe? GetByIndex(int index,string tag="") {
			var (pl,tagActual) = _allWithTag(tag);
			if (index < 0 || index >= pl.Count)
			{
				ConfManager.TriggerDataNotFound(FileName,tagActual,$"Index: {index} not exist");
				return null;
			}
			return pl[index];
		}
		static public List<rawLangDe> GetByFilter(Func<rawLangDe,bool> filterFunc,string tag="") {
			var pl = All(tag);
			var ret = new List<rawLangDe>();
			foreach (var val in pl)
			{
				if (filterFunc(val))
					ret.Add(val);
			}
			return ret;
		}
		static public rawLangDe? GetOneByFilter(Func<rawLangDe,bool> filterFunc,string tag="")  {
			var (pl,tagActual) = _allWithTag(tag);
			foreach (var val in pl)
			{
				if (filterFunc(val))
					return val;
			}
			ConfManager.TriggerDataNotFound(FileName,tagActual,$"GetOneByFilter not exist");
			return null;
		}
    }
}
#endregion Designer generated code
