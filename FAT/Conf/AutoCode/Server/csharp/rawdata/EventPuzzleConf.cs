// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventPuzzleConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventPuzzleConf.proto</summary>
  public static partial class EventPuzzleConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventPuzzleConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventPuzzleConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1yYXdkYXRhL0V2ZW50UHV6emxlQ29uZi5wcm90bxIHcmF3ZGF0YSKHAgoL",
            "RXZlbnRQdXp6bGUSCgoCaWQYASABKAUSDwoHYm9hcmRJZBgCIAEoBRIUCgxl",
            "dmVudFRoZW1lSWQYAyABKAUSOgoLZXhwaXJlUG9wdXAYBCADKAsyJS5yYXdk",
            "YXRhLkV2ZW50UHV6emxlLkV4cGlyZVBvcHVwRW50cnkSFAoMZnJlZVRva2Vu",
            "TnVtGAUgASgFEhUKDW5vcm1hbFJvdW5kSWQYBiADKAUSFwoPcmVjb250aW51",
            "ZVRoZW1lGAcgASgFEg8KB3Rva2VuSWQYCCABKAUaMgoQRXhwaXJlUG9wdXBF",
            "bnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAk6AjgBIrABChVFdmVu",
            "dFB1enpsZU1hcEFCVmFsdWUSSgoORXZlbnRQdXp6bGVNYXAYASADKAsyMi5y",
            "YXdkYXRhLkV2ZW50UHV6emxlTWFwQUJWYWx1ZS5FdmVudFB1enpsZU1hcEVu",
            "dHJ5GksKE0V2ZW50UHV6emxlTWFwRW50cnkSCwoDa2V5GAEgASgFEiMKBXZh",
            "bHVlGAIgASgLMhQucmF3ZGF0YS5FdmVudFB1enpsZToCOAEi+QMKD0V2ZW50",
            "UHV6emxlQ29uZhJECg5FdmVudFB1enpsZU1hcBgBIAMoCzIsLnJhd2RhdGEu",
            "RXZlbnRQdXp6bGVDb25mLkV2ZW50UHV6emxlTWFwRW50cnkSSAoQRXZlbnRQ",
            "dXp6bGVNYXBBQhgCIAMoCzIuLnJhd2RhdGEuRXZlbnRQdXp6bGVDb25mLkV2",
            "ZW50UHV6emxlTWFwQUJFbnRyeRJSChVFdmVudFB1enpsZU1hcEFCUGF0Y2gY",
            "AyADKAsyMy5yYXdkYXRhLkV2ZW50UHV6emxlQ29uZi5FdmVudFB1enpsZU1h",
            "cEFCUGF0Y2hFbnRyeRpLChNFdmVudFB1enpsZU1hcEVudHJ5EgsKA2tleRgB",
            "IAEoBRIjCgV2YWx1ZRgCIAEoCzIULnJhd2RhdGEuRXZlbnRQdXp6bGU6AjgB",
            "GlcKFUV2ZW50UHV6emxlTWFwQUJFbnRyeRILCgNrZXkYASABKAkSLQoFdmFs",
            "dWUYAiABKAsyHi5yYXdkYXRhLkV2ZW50UHV6emxlTWFwQUJWYWx1ZToCOAEa",
            "XAoaRXZlbnRQdXp6bGVNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEi0K",
            "BXZhbHVlGAIgASgLMh4ucmF3ZGF0YS5FdmVudFB1enpsZU1hcEFCVmFsdWU6",
            "AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcv",
            "cmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventPuzzle), global::fat.rawdata.EventPuzzle.Parser, new[]{ "Id", "BoardId", "EventThemeId", "ExpirePopup", "FreeTokenNum", "NormalRoundId", "RecontinueTheme", "TokenId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventPuzzleMapABValue), global::fat.rawdata.EventPuzzleMapABValue.Parser, new[]{ "EventPuzzleMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventPuzzleConf), global::fat.rawdata.EventPuzzleConf.Parser, new[]{ "EventPuzzleMap", "EventPuzzleMapAB", "EventPuzzleMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventPuzzle",table="EventPuzzleMap",table_wrapper="EventPuzzleConf",map="true",map_key_type="int32",data="EventPuzzleConf")
  /// annotation@ab(table_ab="EventPuzzleMapAB",table_ab_patch="EventPuzzleMapABPatch",table_ab_value="EventPuzzleMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventPuzzle(id="id")
  /// </summary>
  public sealed partial class EventPuzzle : pb::IMessage<EventPuzzle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventPuzzle> _parser = new pb::MessageParser<EventPuzzle>(() => new EventPuzzle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventPuzzle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventPuzzleConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPuzzle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPuzzle(EventPuzzle other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      eventThemeId_ = other.eventThemeId_;
      expirePopup_ = other.expirePopup_.Clone();
      freeTokenNum_ = other.freeTokenNum_;
      normalRoundId_ = other.normalRoundId_.Clone();
      recontinueTheme_ = other.recontinueTheme_;
      tokenId_ = other.tokenId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPuzzle Clone() {
      return new EventPuzzle(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 模版id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 生效棋盘
    /// （MergeBoard.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "eventThemeId" field.</summary>
    public const int EventThemeIdFieldNumber = 3;
    private int eventThemeId_;
    /// <summary>
    /// 活动主界面弹板id
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventThemeId {
      get { return eventThemeId_; }
      set {
        eventThemeId_ = value;
      }
    }

    /// <summary>Field number for the "expirePopup" field.</summary>
    public const int ExpirePopupFieldNumber = 4;
    private static readonly pbc::MapField<int, string>.Codec _map_expirePopup_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<int, string> expirePopup_ = new pbc::MapField<int, string>();
    /// <summary>
    /// 活动结束时
    /// 通过弹板的方式一次性删除棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> ExpirePopup {
      get { return expirePopup_; }
    }

    /// <summary>Field number for the "freeTokenNum" field.</summary>
    public const int FreeTokenNumFieldNumber = 5;
    private int freeTokenNum_;
    /// <summary>
    /// 初始Token数量
    /// （为空=0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTokenNum {
      get { return freeTokenNum_; }
      set {
        freeTokenNum_ = value;
      }
    }

    /// <summary>Field number for the "normalRoundId" field.</summary>
    public const int NormalRoundIdFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_normalRoundId_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> normalRoundId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 普通回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NormalRoundId {
      get { return normalRoundId_; }
    }

    /// <summary>Field number for the "recontinueTheme" field.</summary>
    public const int RecontinueThemeFieldNumber = 7;
    private int recontinueTheme_;
    /// <summary>
    /// 回收清算
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecontinueTheme {
      get { return recontinueTheme_; }
      set {
        recontinueTheme_ = value;
      }
    }

    /// <summary>Field number for the "tokenId" field.</summary>
    public const int TokenIdFieldNumber = 8;
    private int tokenId_;
    /// <summary>
    /// 活动tokenId
    /// (ObjToken.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TokenId {
      get { return tokenId_; }
      set {
        tokenId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventPuzzle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventPuzzle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (EventThemeId != other.EventThemeId) return false;
      if (!ExpirePopup.Equals(other.ExpirePopup)) return false;
      if (FreeTokenNum != other.FreeTokenNum) return false;
      if(!normalRoundId_.Equals(other.normalRoundId_)) return false;
      if (RecontinueTheme != other.RecontinueTheme) return false;
      if (TokenId != other.TokenId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (EventThemeId != 0) hash ^= EventThemeId.GetHashCode();
      hash ^= ExpirePopup.GetHashCode();
      if (FreeTokenNum != 0) hash ^= FreeTokenNum.GetHashCode();
      hash ^= normalRoundId_.GetHashCode();
      if (RecontinueTheme != 0) hash ^= RecontinueTheme.GetHashCode();
      if (TokenId != 0) hash ^= TokenId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (EventThemeId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventThemeId);
      }
      expirePopup_.WriteTo(output, _map_expirePopup_codec);
      if (FreeTokenNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeTokenNum);
      }
      normalRoundId_.WriteTo(output, _repeated_normalRoundId_codec);
      if (RecontinueTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RecontinueTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TokenId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (EventThemeId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventThemeId);
      }
      expirePopup_.WriteTo(ref output, _map_expirePopup_codec);
      if (FreeTokenNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeTokenNum);
      }
      normalRoundId_.WriteTo(ref output, _repeated_normalRoundId_codec);
      if (RecontinueTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RecontinueTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TokenId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (EventThemeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventThemeId);
      }
      size += expirePopup_.CalculateSize(_map_expirePopup_codec);
      if (FreeTokenNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTokenNum);
      }
      size += normalRoundId_.CalculateSize(_repeated_normalRoundId_codec);
      if (RecontinueTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecontinueTheme);
      }
      if (TokenId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TokenId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventPuzzle other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.EventThemeId != 0) {
        EventThemeId = other.EventThemeId;
      }
      expirePopup_.Add(other.expirePopup_);
      if (other.FreeTokenNum != 0) {
        FreeTokenNum = other.FreeTokenNum;
      }
      normalRoundId_.Add(other.normalRoundId_);
      if (other.RecontinueTheme != 0) {
        RecontinueTheme = other.RecontinueTheme;
      }
      if (other.TokenId != 0) {
        TokenId = other.TokenId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            EventThemeId = input.ReadInt32();
            break;
          }
          case 34: {
            expirePopup_.AddEntriesFrom(input, _map_expirePopup_codec);
            break;
          }
          case 40: {
            FreeTokenNum = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            normalRoundId_.AddEntriesFrom(input, _repeated_normalRoundId_codec);
            break;
          }
          case 56: {
            RecontinueTheme = input.ReadInt32();
            break;
          }
          case 64: {
            TokenId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            EventThemeId = input.ReadInt32();
            break;
          }
          case 34: {
            expirePopup_.AddEntriesFrom(ref input, _map_expirePopup_codec);
            break;
          }
          case 40: {
            FreeTokenNum = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            normalRoundId_.AddEntriesFrom(ref input, _repeated_normalRoundId_codec);
            break;
          }
          case 56: {
            RecontinueTheme = input.ReadInt32();
            break;
          }
          case 64: {
            TokenId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventPuzzleMapABValue : pb::IMessage<EventPuzzleMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventPuzzleMapABValue> _parser = new pb::MessageParser<EventPuzzleMapABValue>(() => new EventPuzzleMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventPuzzleMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventPuzzleConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPuzzleMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPuzzleMapABValue(EventPuzzleMapABValue other) : this() {
      eventPuzzleMap_ = other.eventPuzzleMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPuzzleMapABValue Clone() {
      return new EventPuzzleMapABValue(this);
    }

    /// <summary>Field number for the "EventPuzzleMap" field.</summary>
    public const int EventPuzzleMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventPuzzle>.Codec _map_eventPuzzleMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventPuzzle>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPuzzle.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventPuzzle> eventPuzzleMap_ = new pbc::MapField<int, global::fat.rawdata.EventPuzzle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventPuzzle> EventPuzzleMap {
      get { return eventPuzzleMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventPuzzleMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventPuzzleMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventPuzzleMap.Equals(other.EventPuzzleMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventPuzzleMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventPuzzleMap_.WriteTo(output, _map_eventPuzzleMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventPuzzleMap_.WriteTo(ref output, _map_eventPuzzleMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventPuzzleMap_.CalculateSize(_map_eventPuzzleMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventPuzzleMapABValue other) {
      if (other == null) {
        return;
      }
      eventPuzzleMap_.Add(other.eventPuzzleMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventPuzzleMap_.AddEntriesFrom(input, _map_eventPuzzleMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventPuzzleMap_.AddEntriesFrom(ref input, _map_eventPuzzleMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventPuzzleConf : pb::IMessage<EventPuzzleConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventPuzzleConf> _parser = new pb::MessageParser<EventPuzzleConf>(() => new EventPuzzleConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventPuzzleConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventPuzzleConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPuzzleConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPuzzleConf(EventPuzzleConf other) : this() {
      eventPuzzleMap_ = other.eventPuzzleMap_.Clone();
      eventPuzzleMapAB_ = other.eventPuzzleMapAB_.Clone();
      eventPuzzleMapABPatch_ = other.eventPuzzleMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPuzzleConf Clone() {
      return new EventPuzzleConf(this);
    }

    /// <summary>Field number for the "EventPuzzleMap" field.</summary>
    public const int EventPuzzleMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventPuzzle>.Codec _map_eventPuzzleMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventPuzzle>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPuzzle.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventPuzzle> eventPuzzleMap_ = new pbc::MapField<int, global::fat.rawdata.EventPuzzle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventPuzzle> EventPuzzleMap {
      get { return eventPuzzleMap_; }
    }

    /// <summary>Field number for the "EventPuzzleMapAB" field.</summary>
    public const int EventPuzzleMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventPuzzleMapABValue>.Codec _map_eventPuzzleMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventPuzzleMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPuzzleMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventPuzzleMapABValue> eventPuzzleMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventPuzzleMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventPuzzleMapABValue> EventPuzzleMapAB {
      get { return eventPuzzleMapAB_; }
    }

    /// <summary>Field number for the "EventPuzzleMapABPatch" field.</summary>
    public const int EventPuzzleMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventPuzzleMapABValue>.Codec _map_eventPuzzleMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventPuzzleMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPuzzleMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventPuzzleMapABValue> eventPuzzleMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventPuzzleMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventPuzzleMapABValue> EventPuzzleMapABPatch {
      get { return eventPuzzleMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventPuzzleConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventPuzzleConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventPuzzleMap.Equals(other.EventPuzzleMap)) return false;
      if (!EventPuzzleMapAB.Equals(other.EventPuzzleMapAB)) return false;
      if (!EventPuzzleMapABPatch.Equals(other.EventPuzzleMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventPuzzleMap.GetHashCode();
      hash ^= EventPuzzleMapAB.GetHashCode();
      hash ^= EventPuzzleMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventPuzzleMap_.WriteTo(output, _map_eventPuzzleMap_codec);
      eventPuzzleMapAB_.WriteTo(output, _map_eventPuzzleMapAB_codec);
      eventPuzzleMapABPatch_.WriteTo(output, _map_eventPuzzleMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventPuzzleMap_.WriteTo(ref output, _map_eventPuzzleMap_codec);
      eventPuzzleMapAB_.WriteTo(ref output, _map_eventPuzzleMapAB_codec);
      eventPuzzleMapABPatch_.WriteTo(ref output, _map_eventPuzzleMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventPuzzleMap_.CalculateSize(_map_eventPuzzleMap_codec);
      size += eventPuzzleMapAB_.CalculateSize(_map_eventPuzzleMapAB_codec);
      size += eventPuzzleMapABPatch_.CalculateSize(_map_eventPuzzleMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventPuzzleConf other) {
      if (other == null) {
        return;
      }
      eventPuzzleMap_.Add(other.eventPuzzleMap_);
      eventPuzzleMapAB_.Add(other.eventPuzzleMapAB_);
      eventPuzzleMapABPatch_.Add(other.eventPuzzleMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventPuzzleMap_.AddEntriesFrom(input, _map_eventPuzzleMap_codec);
            break;
          }
          case 18: {
            eventPuzzleMapAB_.AddEntriesFrom(input, _map_eventPuzzleMapAB_codec);
            break;
          }
          case 26: {
            eventPuzzleMapABPatch_.AddEntriesFrom(input, _map_eventPuzzleMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventPuzzleMap_.AddEntriesFrom(ref input, _map_eventPuzzleMap_codec);
            break;
          }
          case 18: {
            eventPuzzleMapAB_.AddEntriesFrom(ref input, _map_eventPuzzleMapAB_codec);
            break;
          }
          case 26: {
            eventPuzzleMapABPatch_.AddEntriesFrom(ref input, _map_eventPuzzleMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
