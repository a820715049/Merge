// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/AutoFingerInfoConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/AutoFingerInfoConf.proto</summary>
  public static partial class AutoFingerInfoConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/AutoFingerInfoConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AutoFingerInfoConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiByYXdkYXRhL0F1dG9GaW5nZXJJbmZvQ29uZi5wcm90bxIHcmF3ZGF0YRoY",
            "cmF3ZGF0YS9BdXRvRmluZ2VyLnByb3RvIpQBCg5BdXRvRmluZ2VySW5mbxIQ",
            "CghhY3RpdmVMdhgBIAEoBRInCgphdXRvRmluZ2VyGAIgASgOMhMucmF3ZGF0",
            "YS5BdXRvRmluZ2VyEhMKC2lzSGlkZU1lcmdlGAMgASgIEhAKCHByaW9yaXR5",
            "GAQgASgFEhIKCnNodXRkb3duTHYYBSABKAUSDAoEdGltZRgGIAEoBSJSChpB",
            "dXRvRmluZ2VySW5mb1NsaWNlQUJWYWx1ZRI0ChNBdXRvRmluZ2VySW5mb1Ns",
            "aWNlGAEgAygLMhcucmF3ZGF0YS5BdXRvRmluZ2VySW5mbyLNAwoSQXV0b0Zp",
            "bmdlckluZm9Db25mEjQKE0F1dG9GaW5nZXJJbmZvU2xpY2UYASADKAsyFy5y",
            "YXdkYXRhLkF1dG9GaW5nZXJJbmZvElUKFUF1dG9GaW5nZXJJbmZvU2xpY2VB",
            "QhgCIAMoCzI2LnJhd2RhdGEuQXV0b0ZpbmdlckluZm9Db25mLkF1dG9GaW5n",
            "ZXJJbmZvU2xpY2VBQkVudHJ5El8KGkF1dG9GaW5nZXJJbmZvU2xpY2VBQlBh",
            "dGNoGAMgAygLMjsucmF3ZGF0YS5BdXRvRmluZ2VySW5mb0NvbmYuQXV0b0Zp",
            "bmdlckluZm9TbGljZUFCUGF0Y2hFbnRyeRphChpBdXRvRmluZ2VySW5mb1Ns",
            "aWNlQUJFbnRyeRILCgNrZXkYASABKAkSMgoFdmFsdWUYAiABKAsyIy5yYXdk",
            "YXRhLkF1dG9GaW5nZXJJbmZvU2xpY2VBQlZhbHVlOgI4ARpmCh9BdXRvRmlu",
            "Z2VySW5mb1NsaWNlQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIyCgV2YWx1",
            "ZRgCIAEoCzIjLnJhd2RhdGEuQXV0b0ZpbmdlckluZm9TbGljZUFCVmFsdWU6",
            "AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcv",
            "cmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.rawdata.AutoFingerReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.AutoFingerInfo), global::fat.rawdata.AutoFingerInfo.Parser, new[]{ "ActiveLv", "AutoFinger", "IsHideMerge", "Priority", "ShutdownLv", "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.AutoFingerInfoSliceABValue), global::fat.rawdata.AutoFingerInfoSliceABValue.Parser, new[]{ "AutoFingerInfoSlice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.AutoFingerInfoConf), global::fat.rawdata.AutoFingerInfoConf.Parser, new[]{ "AutoFingerInfoSlice", "AutoFingerInfoSliceAB", "AutoFingerInfoSliceABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="AutoFingerInfo",table="AutoFingerInfoSlice",table_wrapper="AutoFingerInfoConf",map="false",map_key_type="",data="AutoFingerInfoConf")
  /// annotation@ab(table_ab="AutoFingerInfoSliceAB",table_ab_patch="AutoFingerInfoSliceABPatch",table_ab_value="AutoFingerInfoSliceABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// </summary>
  public sealed partial class AutoFingerInfo : pb::IMessage<AutoFingerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AutoFingerInfo> _parser = new pb::MessageParser<AutoFingerInfo>(() => new AutoFingerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutoFingerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.AutoFingerInfoConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoFingerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoFingerInfo(AutoFingerInfo other) : this() {
      activeLv_ = other.activeLv_;
      autoFinger_ = other.autoFinger_;
      isHideMerge_ = other.isHideMerge_;
      priority_ = other.priority_;
      shutdownLv_ = other.shutdownLv_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoFingerInfo Clone() {
      return new AutoFingerInfo(this);
    }

    /// <summary>Field number for the "activeLv" field.</summary>
    public const int ActiveLvFieldNumber = 1;
    private int activeLv_;
    /// <summary>
    /// 激活等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveLv {
      get { return activeLv_; }
      set {
        activeLv_ = value;
      }
    }

    /// <summary>Field number for the "autoFinger" field.</summary>
    public const int AutoFingerFieldNumber = 2;
    private global::fat.rawdata.AutoFinger autoFinger_ = global::fat.rawdata.AutoFinger.Meta;
    /// <summary>
    /// 自动手指类型
    /// （AutoFinger@enum）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.rawdata.AutoFinger AutoFinger {
      get { return autoFinger_; }
      set {
        autoFinger_ = value;
      }
    }

    /// <summary>Field number for the "isHideMerge" field.</summary>
    public const int IsHideMergeFieldNumber = 3;
    private bool isHideMerge_;
    /// <summary>
    /// 是否在合成提醒触发的时候屏蔽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHideMerge {
      get { return isHideMerge_; }
      set {
        isHideMerge_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 4;
    private int priority_;
    /// <summary>
    /// 优先级
    /// （越小越优先）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "shutdownLv" field.</summary>
    public const int ShutdownLvFieldNumber = 5;
    private int shutdownLv_;
    /// <summary>
    /// 关闭等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShutdownLv {
      get { return shutdownLv_; }
      set {
        shutdownLv_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 6;
    private int time_;
    /// <summary>
    /// UI弹出间隔时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutoFingerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutoFingerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActiveLv != other.ActiveLv) return false;
      if (AutoFinger != other.AutoFinger) return false;
      if (IsHideMerge != other.IsHideMerge) return false;
      if (Priority != other.Priority) return false;
      if (ShutdownLv != other.ShutdownLv) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActiveLv != 0) hash ^= ActiveLv.GetHashCode();
      if (AutoFinger != global::fat.rawdata.AutoFinger.Meta) hash ^= AutoFinger.GetHashCode();
      if (IsHideMerge != false) hash ^= IsHideMerge.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (ShutdownLv != 0) hash ^= ShutdownLv.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ActiveLv != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActiveLv);
      }
      if (AutoFinger != global::fat.rawdata.AutoFinger.Meta) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AutoFinger);
      }
      if (IsHideMerge != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsHideMerge);
      }
      if (Priority != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Priority);
      }
      if (ShutdownLv != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ShutdownLv);
      }
      if (Time != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ActiveLv != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActiveLv);
      }
      if (AutoFinger != global::fat.rawdata.AutoFinger.Meta) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AutoFinger);
      }
      if (IsHideMerge != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsHideMerge);
      }
      if (Priority != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Priority);
      }
      if (ShutdownLv != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ShutdownLv);
      }
      if (Time != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActiveLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveLv);
      }
      if (AutoFinger != global::fat.rawdata.AutoFinger.Meta) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AutoFinger);
      }
      if (IsHideMerge != false) {
        size += 1 + 1;
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (ShutdownLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShutdownLv);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutoFingerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ActiveLv != 0) {
        ActiveLv = other.ActiveLv;
      }
      if (other.AutoFinger != global::fat.rawdata.AutoFinger.Meta) {
        AutoFinger = other.AutoFinger;
      }
      if (other.IsHideMerge != false) {
        IsHideMerge = other.IsHideMerge;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.ShutdownLv != 0) {
        ShutdownLv = other.ShutdownLv;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActiveLv = input.ReadInt32();
            break;
          }
          case 16: {
            AutoFinger = (global::fat.rawdata.AutoFinger) input.ReadEnum();
            break;
          }
          case 24: {
            IsHideMerge = input.ReadBool();
            break;
          }
          case 32: {
            Priority = input.ReadInt32();
            break;
          }
          case 40: {
            ShutdownLv = input.ReadInt32();
            break;
          }
          case 48: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ActiveLv = input.ReadInt32();
            break;
          }
          case 16: {
            AutoFinger = (global::fat.rawdata.AutoFinger) input.ReadEnum();
            break;
          }
          case 24: {
            IsHideMerge = input.ReadBool();
            break;
          }
          case 32: {
            Priority = input.ReadInt32();
            break;
          }
          case 40: {
            ShutdownLv = input.ReadInt32();
            break;
          }
          case 48: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AutoFingerInfoSliceABValue : pb::IMessage<AutoFingerInfoSliceABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AutoFingerInfoSliceABValue> _parser = new pb::MessageParser<AutoFingerInfoSliceABValue>(() => new AutoFingerInfoSliceABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutoFingerInfoSliceABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.AutoFingerInfoConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoFingerInfoSliceABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoFingerInfoSliceABValue(AutoFingerInfoSliceABValue other) : this() {
      autoFingerInfoSlice_ = other.autoFingerInfoSlice_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoFingerInfoSliceABValue Clone() {
      return new AutoFingerInfoSliceABValue(this);
    }

    /// <summary>Field number for the "AutoFingerInfoSlice" field.</summary>
    public const int AutoFingerInfoSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.AutoFingerInfo> _repeated_autoFingerInfoSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.AutoFingerInfo.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.AutoFingerInfo> autoFingerInfoSlice_ = new pbc::RepeatedField<global::fat.rawdata.AutoFingerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.AutoFingerInfo> AutoFingerInfoSlice {
      get { return autoFingerInfoSlice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutoFingerInfoSliceABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutoFingerInfoSliceABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!autoFingerInfoSlice_.Equals(other.autoFingerInfoSlice_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= autoFingerInfoSlice_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      autoFingerInfoSlice_.WriteTo(output, _repeated_autoFingerInfoSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      autoFingerInfoSlice_.WriteTo(ref output, _repeated_autoFingerInfoSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += autoFingerInfoSlice_.CalculateSize(_repeated_autoFingerInfoSlice_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutoFingerInfoSliceABValue other) {
      if (other == null) {
        return;
      }
      autoFingerInfoSlice_.Add(other.autoFingerInfoSlice_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            autoFingerInfoSlice_.AddEntriesFrom(input, _repeated_autoFingerInfoSlice_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            autoFingerInfoSlice_.AddEntriesFrom(ref input, _repeated_autoFingerInfoSlice_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AutoFingerInfoConf : pb::IMessage<AutoFingerInfoConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AutoFingerInfoConf> _parser = new pb::MessageParser<AutoFingerInfoConf>(() => new AutoFingerInfoConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutoFingerInfoConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.AutoFingerInfoConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoFingerInfoConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoFingerInfoConf(AutoFingerInfoConf other) : this() {
      autoFingerInfoSlice_ = other.autoFingerInfoSlice_.Clone();
      autoFingerInfoSliceAB_ = other.autoFingerInfoSliceAB_.Clone();
      autoFingerInfoSliceABPatch_ = other.autoFingerInfoSliceABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoFingerInfoConf Clone() {
      return new AutoFingerInfoConf(this);
    }

    /// <summary>Field number for the "AutoFingerInfoSlice" field.</summary>
    public const int AutoFingerInfoSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.AutoFingerInfo> _repeated_autoFingerInfoSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.AutoFingerInfo.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.AutoFingerInfo> autoFingerInfoSlice_ = new pbc::RepeatedField<global::fat.rawdata.AutoFingerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.AutoFingerInfo> AutoFingerInfoSlice {
      get { return autoFingerInfoSlice_; }
    }

    /// <summary>Field number for the "AutoFingerInfoSliceAB" field.</summary>
    public const int AutoFingerInfoSliceABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.AutoFingerInfoSliceABValue>.Codec _map_autoFingerInfoSliceAB_codec
        = new pbc::MapField<string, global::fat.rawdata.AutoFingerInfoSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.AutoFingerInfoSliceABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.AutoFingerInfoSliceABValue> autoFingerInfoSliceAB_ = new pbc::MapField<string, global::fat.rawdata.AutoFingerInfoSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.AutoFingerInfoSliceABValue> AutoFingerInfoSliceAB {
      get { return autoFingerInfoSliceAB_; }
    }

    /// <summary>Field number for the "AutoFingerInfoSliceABPatch" field.</summary>
    public const int AutoFingerInfoSliceABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.AutoFingerInfoSliceABValue>.Codec _map_autoFingerInfoSliceABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.AutoFingerInfoSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.AutoFingerInfoSliceABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.AutoFingerInfoSliceABValue> autoFingerInfoSliceABPatch_ = new pbc::MapField<string, global::fat.rawdata.AutoFingerInfoSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.AutoFingerInfoSliceABValue> AutoFingerInfoSliceABPatch {
      get { return autoFingerInfoSliceABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutoFingerInfoConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutoFingerInfoConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!autoFingerInfoSlice_.Equals(other.autoFingerInfoSlice_)) return false;
      if (!AutoFingerInfoSliceAB.Equals(other.AutoFingerInfoSliceAB)) return false;
      if (!AutoFingerInfoSliceABPatch.Equals(other.AutoFingerInfoSliceABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= autoFingerInfoSlice_.GetHashCode();
      hash ^= AutoFingerInfoSliceAB.GetHashCode();
      hash ^= AutoFingerInfoSliceABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      autoFingerInfoSlice_.WriteTo(output, _repeated_autoFingerInfoSlice_codec);
      autoFingerInfoSliceAB_.WriteTo(output, _map_autoFingerInfoSliceAB_codec);
      autoFingerInfoSliceABPatch_.WriteTo(output, _map_autoFingerInfoSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      autoFingerInfoSlice_.WriteTo(ref output, _repeated_autoFingerInfoSlice_codec);
      autoFingerInfoSliceAB_.WriteTo(ref output, _map_autoFingerInfoSliceAB_codec);
      autoFingerInfoSliceABPatch_.WriteTo(ref output, _map_autoFingerInfoSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += autoFingerInfoSlice_.CalculateSize(_repeated_autoFingerInfoSlice_codec);
      size += autoFingerInfoSliceAB_.CalculateSize(_map_autoFingerInfoSliceAB_codec);
      size += autoFingerInfoSliceABPatch_.CalculateSize(_map_autoFingerInfoSliceABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutoFingerInfoConf other) {
      if (other == null) {
        return;
      }
      autoFingerInfoSlice_.Add(other.autoFingerInfoSlice_);
      autoFingerInfoSliceAB_.Add(other.autoFingerInfoSliceAB_);
      autoFingerInfoSliceABPatch_.Add(other.autoFingerInfoSliceABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            autoFingerInfoSlice_.AddEntriesFrom(input, _repeated_autoFingerInfoSlice_codec);
            break;
          }
          case 18: {
            autoFingerInfoSliceAB_.AddEntriesFrom(input, _map_autoFingerInfoSliceAB_codec);
            break;
          }
          case 26: {
            autoFingerInfoSliceABPatch_.AddEntriesFrom(input, _map_autoFingerInfoSliceABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            autoFingerInfoSlice_.AddEntriesFrom(ref input, _repeated_autoFingerInfoSlice_codec);
            break;
          }
          case 18: {
            autoFingerInfoSliceAB_.AddEntriesFrom(ref input, _map_autoFingerInfoSliceAB_codec);
            break;
          }
          case 26: {
            autoFingerInfoSliceABPatch_.AddEntriesFrom(ref input, _map_autoFingerInfoSliceABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
