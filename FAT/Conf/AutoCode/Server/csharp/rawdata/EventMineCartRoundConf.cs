// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventMineCartRoundConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventMineCartRoundConf.proto</summary>
  public static partial class EventMineCartRoundConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventMineCartRoundConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventMineCartRoundConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRyYXdkYXRhL0V2ZW50TWluZUNhcnRSb3VuZENvbmYucHJvdG8SB3Jhd2Rh",
            "dGEitQEKEkV2ZW50TWluZUNhcnRSb3VuZBIKCgJpZBgBIAEoBRISCgpSZXdh",
            "cmRJY29uGAIgASgJEhEKCWJhc2VDb3VudBgDIAEoBRISCgpiYXNlUmV3YXJk",
            "GAQgAygJEhcKD21pbGVzdG9uZVJld2FyZBgFIAMoBRIWCg5taWxlc3RvbmVT",
            "Y29yZRgGIAMoBRISCgpyb3VuZFF1ZXVlGAcgASgFEhMKC3JvdW5kUmV3YXJk",
            "GAggAygJItoBChxFdmVudE1pbmVDYXJ0Um91bmRNYXBBQlZhbHVlEl8KFUV2",
            "ZW50TWluZUNhcnRSb3VuZE1hcBgBIAMoCzJALnJhd2RhdGEuRXZlbnRNaW5l",
            "Q2FydFJvdW5kTWFwQUJWYWx1ZS5FdmVudE1pbmVDYXJ0Um91bmRNYXBFbnRy",
            "eRpZChpFdmVudE1pbmVDYXJ0Um91bmRNYXBFbnRyeRILCgNrZXkYASABKAUS",
            "KgoFdmFsdWUYAiABKAsyGy5yYXdkYXRhLkV2ZW50TWluZUNhcnRSb3VuZDoC",
            "OAEi6QQKFkV2ZW50TWluZUNhcnRSb3VuZENvbmYSWQoVRXZlbnRNaW5lQ2Fy",
            "dFJvdW5kTWFwGAEgAygLMjoucmF3ZGF0YS5FdmVudE1pbmVDYXJ0Um91bmRD",
            "b25mLkV2ZW50TWluZUNhcnRSb3VuZE1hcEVudHJ5El0KF0V2ZW50TWluZUNh",
            "cnRSb3VuZE1hcEFCGAIgAygLMjwucmF3ZGF0YS5FdmVudE1pbmVDYXJ0Um91",
            "bmRDb25mLkV2ZW50TWluZUNhcnRSb3VuZE1hcEFCRW50cnkSZwocRXZlbnRN",
            "aW5lQ2FydFJvdW5kTWFwQUJQYXRjaBgDIAMoCzJBLnJhd2RhdGEuRXZlbnRN",
            "aW5lQ2FydFJvdW5kQ29uZi5FdmVudE1pbmVDYXJ0Um91bmRNYXBBQlBhdGNo",
            "RW50cnkaWQoaRXZlbnRNaW5lQ2FydFJvdW5kTWFwRW50cnkSCwoDa2V5GAEg",
            "ASgFEioKBXZhbHVlGAIgASgLMhsucmF3ZGF0YS5FdmVudE1pbmVDYXJ0Um91",
            "bmQ6AjgBGmUKHEV2ZW50TWluZUNhcnRSb3VuZE1hcEFCRW50cnkSCwoDa2V5",
            "GAEgASgJEjQKBXZhbHVlGAIgASgLMiUucmF3ZGF0YS5FdmVudE1pbmVDYXJ0",
            "Um91bmRNYXBBQlZhbHVlOgI4ARpqCiFFdmVudE1pbmVDYXJ0Um91bmRNYXBB",
            "QlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEjQKBXZhbHVlGAIgASgLMiUucmF3",
            "ZGF0YS5FdmVudE1pbmVDYXJ0Um91bmRNYXBBQlZhbHVlOgI4AUI9Wi1naXRs",
            "YWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtm",
            "YXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMineCartRound), global::fat.rawdata.EventMineCartRound.Parser, new[]{ "Id", "RewardIcon", "BaseCount", "BaseReward", "MilestoneReward", "MilestoneScore", "RoundQueue", "RoundReward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMineCartRoundMapABValue), global::fat.rawdata.EventMineCartRoundMapABValue.Parser, new[]{ "EventMineCartRoundMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMineCartRoundConf), global::fat.rawdata.EventMineCartRoundConf.Parser, new[]{ "EventMineCartRoundMap", "EventMineCartRoundMapAB", "EventMineCartRoundMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventMineCartRound",table="EventMineCartRoundMap",table_wrapper="EventMineCartRoundConf",map="true",map_key_type="int32",data="EventMineCartRoundConf")
  /// annotation@ab(table_ab="EventMineCartRoundMapAB",table_ab_patch="EventMineCartRoundMapABPatch",table_ab_value="EventMineCartRoundMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventMineCartRound(id="id")
  /// </summary>
  public sealed partial class EventMineCartRound : pb::IMessage<EventMineCartRound>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMineCartRound> _parser = new pb::MessageParser<EventMineCartRound>(() => new EventMineCartRound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMineCartRound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMineCartRoundConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartRound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartRound(EventMineCartRound other) : this() {
      id_ = other.id_;
      rewardIcon_ = other.rewardIcon_;
      baseCount_ = other.baseCount_;
      baseReward_ = other.baseReward_.Clone();
      milestoneReward_ = other.milestoneReward_.Clone();
      milestoneScore_ = other.milestoneScore_.Clone();
      roundQueue_ = other.roundQueue_;
      roundReward_ = other.roundReward_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartRound Clone() {
      return new EventMineCartRound(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 回合配置详情id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "RewardIcon" field.</summary>
    public const int RewardIconFieldNumber = 2;
    private string rewardIcon_ = "";
    /// <summary>
    /// 回合宝箱icon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RewardIcon {
      get { return rewardIcon_; }
      set {
        rewardIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "baseCount" field.</summary>
    public const int BaseCountFieldNumber = 3;
    private int baseCount_;
    /// <summary>
    /// 使用活动棋子后发{n}次奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseCount {
      get { return baseCount_; }
      set {
        baseCount_ = value;
      }
    }

    /// <summary>Field number for the "baseReward" field.</summary>
    public const int BaseRewardFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_baseReward_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> baseReward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 活动棋子奖池
    /// (棋子id:权重,...)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> BaseReward {
      get { return baseReward_; }
    }

    /// <summary>Field number for the "milestoneReward" field.</summary>
    public const int MilestoneRewardFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_milestoneReward_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> milestoneReward_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 节点奖励池id
    /// (EventMineCartReward.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MilestoneReward {
      get { return milestoneReward_; }
    }

    /// <summary>Field number for the "milestoneScore" field.</summary>
    public const int MilestoneScoreFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_milestoneScore_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> milestoneScore_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 节点所需积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MilestoneScore {
      get { return milestoneScore_; }
    }

    /// <summary>Field number for the "roundQueue" field.</summary>
    public const int RoundQueueFieldNumber = 7;
    private int roundQueue_;
    /// <summary>
    /// 回合排序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundQueue {
      get { return roundQueue_; }
      set {
        roundQueue_ = value;
      }
    }

    /// <summary>Field number for the "roundReward" field.</summary>
    public const int RoundRewardFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_roundReward_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> roundReward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 回合奖励内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RoundReward {
      get { return roundReward_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMineCartRound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMineCartRound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (RewardIcon != other.RewardIcon) return false;
      if (BaseCount != other.BaseCount) return false;
      if(!baseReward_.Equals(other.baseReward_)) return false;
      if(!milestoneReward_.Equals(other.milestoneReward_)) return false;
      if(!milestoneScore_.Equals(other.milestoneScore_)) return false;
      if (RoundQueue != other.RoundQueue) return false;
      if(!roundReward_.Equals(other.roundReward_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (RewardIcon.Length != 0) hash ^= RewardIcon.GetHashCode();
      if (BaseCount != 0) hash ^= BaseCount.GetHashCode();
      hash ^= baseReward_.GetHashCode();
      hash ^= milestoneReward_.GetHashCode();
      hash ^= milestoneScore_.GetHashCode();
      if (RoundQueue != 0) hash ^= RoundQueue.GetHashCode();
      hash ^= roundReward_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (RewardIcon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RewardIcon);
      }
      if (BaseCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BaseCount);
      }
      baseReward_.WriteTo(output, _repeated_baseReward_codec);
      milestoneReward_.WriteTo(output, _repeated_milestoneReward_codec);
      milestoneScore_.WriteTo(output, _repeated_milestoneScore_codec);
      if (RoundQueue != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RoundQueue);
      }
      roundReward_.WriteTo(output, _repeated_roundReward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (RewardIcon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RewardIcon);
      }
      if (BaseCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BaseCount);
      }
      baseReward_.WriteTo(ref output, _repeated_baseReward_codec);
      milestoneReward_.WriteTo(ref output, _repeated_milestoneReward_codec);
      milestoneScore_.WriteTo(ref output, _repeated_milestoneScore_codec);
      if (RoundQueue != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RoundQueue);
      }
      roundReward_.WriteTo(ref output, _repeated_roundReward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (RewardIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RewardIcon);
      }
      if (BaseCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseCount);
      }
      size += baseReward_.CalculateSize(_repeated_baseReward_codec);
      size += milestoneReward_.CalculateSize(_repeated_milestoneReward_codec);
      size += milestoneScore_.CalculateSize(_repeated_milestoneScore_codec);
      if (RoundQueue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundQueue);
      }
      size += roundReward_.CalculateSize(_repeated_roundReward_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMineCartRound other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.RewardIcon.Length != 0) {
        RewardIcon = other.RewardIcon;
      }
      if (other.BaseCount != 0) {
        BaseCount = other.BaseCount;
      }
      baseReward_.Add(other.baseReward_);
      milestoneReward_.Add(other.milestoneReward_);
      milestoneScore_.Add(other.milestoneScore_);
      if (other.RoundQueue != 0) {
        RoundQueue = other.RoundQueue;
      }
      roundReward_.Add(other.roundReward_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            RewardIcon = input.ReadString();
            break;
          }
          case 24: {
            BaseCount = input.ReadInt32();
            break;
          }
          case 34: {
            baseReward_.AddEntriesFrom(input, _repeated_baseReward_codec);
            break;
          }
          case 42:
          case 40: {
            milestoneReward_.AddEntriesFrom(input, _repeated_milestoneReward_codec);
            break;
          }
          case 50:
          case 48: {
            milestoneScore_.AddEntriesFrom(input, _repeated_milestoneScore_codec);
            break;
          }
          case 56: {
            RoundQueue = input.ReadInt32();
            break;
          }
          case 66: {
            roundReward_.AddEntriesFrom(input, _repeated_roundReward_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            RewardIcon = input.ReadString();
            break;
          }
          case 24: {
            BaseCount = input.ReadInt32();
            break;
          }
          case 34: {
            baseReward_.AddEntriesFrom(ref input, _repeated_baseReward_codec);
            break;
          }
          case 42:
          case 40: {
            milestoneReward_.AddEntriesFrom(ref input, _repeated_milestoneReward_codec);
            break;
          }
          case 50:
          case 48: {
            milestoneScore_.AddEntriesFrom(ref input, _repeated_milestoneScore_codec);
            break;
          }
          case 56: {
            RoundQueue = input.ReadInt32();
            break;
          }
          case 66: {
            roundReward_.AddEntriesFrom(ref input, _repeated_roundReward_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMineCartRoundMapABValue : pb::IMessage<EventMineCartRoundMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMineCartRoundMapABValue> _parser = new pb::MessageParser<EventMineCartRoundMapABValue>(() => new EventMineCartRoundMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMineCartRoundMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMineCartRoundConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartRoundMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartRoundMapABValue(EventMineCartRoundMapABValue other) : this() {
      eventMineCartRoundMap_ = other.eventMineCartRoundMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartRoundMapABValue Clone() {
      return new EventMineCartRoundMapABValue(this);
    }

    /// <summary>Field number for the "EventMineCartRoundMap" field.</summary>
    public const int EventMineCartRoundMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMineCartRound>.Codec _map_eventMineCartRoundMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMineCartRound>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMineCartRound.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMineCartRound> eventMineCartRoundMap_ = new pbc::MapField<int, global::fat.rawdata.EventMineCartRound>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMineCartRound> EventMineCartRoundMap {
      get { return eventMineCartRoundMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMineCartRoundMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMineCartRoundMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMineCartRoundMap.Equals(other.EventMineCartRoundMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMineCartRoundMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMineCartRoundMap_.WriteTo(output, _map_eventMineCartRoundMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMineCartRoundMap_.WriteTo(ref output, _map_eventMineCartRoundMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMineCartRoundMap_.CalculateSize(_map_eventMineCartRoundMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMineCartRoundMapABValue other) {
      if (other == null) {
        return;
      }
      eventMineCartRoundMap_.Add(other.eventMineCartRoundMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMineCartRoundMap_.AddEntriesFrom(input, _map_eventMineCartRoundMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMineCartRoundMap_.AddEntriesFrom(ref input, _map_eventMineCartRoundMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMineCartRoundConf : pb::IMessage<EventMineCartRoundConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMineCartRoundConf> _parser = new pb::MessageParser<EventMineCartRoundConf>(() => new EventMineCartRoundConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMineCartRoundConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMineCartRoundConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartRoundConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartRoundConf(EventMineCartRoundConf other) : this() {
      eventMineCartRoundMap_ = other.eventMineCartRoundMap_.Clone();
      eventMineCartRoundMapAB_ = other.eventMineCartRoundMapAB_.Clone();
      eventMineCartRoundMapABPatch_ = other.eventMineCartRoundMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartRoundConf Clone() {
      return new EventMineCartRoundConf(this);
    }

    /// <summary>Field number for the "EventMineCartRoundMap" field.</summary>
    public const int EventMineCartRoundMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMineCartRound>.Codec _map_eventMineCartRoundMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMineCartRound>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMineCartRound.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMineCartRound> eventMineCartRoundMap_ = new pbc::MapField<int, global::fat.rawdata.EventMineCartRound>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMineCartRound> EventMineCartRoundMap {
      get { return eventMineCartRoundMap_; }
    }

    /// <summary>Field number for the "EventMineCartRoundMapAB" field.</summary>
    public const int EventMineCartRoundMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMineCartRoundMapABValue>.Codec _map_eventMineCartRoundMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMineCartRoundMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMineCartRoundMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMineCartRoundMapABValue> eventMineCartRoundMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventMineCartRoundMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMineCartRoundMapABValue> EventMineCartRoundMapAB {
      get { return eventMineCartRoundMapAB_; }
    }

    /// <summary>Field number for the "EventMineCartRoundMapABPatch" field.</summary>
    public const int EventMineCartRoundMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMineCartRoundMapABValue>.Codec _map_eventMineCartRoundMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMineCartRoundMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMineCartRoundMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMineCartRoundMapABValue> eventMineCartRoundMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventMineCartRoundMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMineCartRoundMapABValue> EventMineCartRoundMapABPatch {
      get { return eventMineCartRoundMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMineCartRoundConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMineCartRoundConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMineCartRoundMap.Equals(other.EventMineCartRoundMap)) return false;
      if (!EventMineCartRoundMapAB.Equals(other.EventMineCartRoundMapAB)) return false;
      if (!EventMineCartRoundMapABPatch.Equals(other.EventMineCartRoundMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMineCartRoundMap.GetHashCode();
      hash ^= EventMineCartRoundMapAB.GetHashCode();
      hash ^= EventMineCartRoundMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMineCartRoundMap_.WriteTo(output, _map_eventMineCartRoundMap_codec);
      eventMineCartRoundMapAB_.WriteTo(output, _map_eventMineCartRoundMapAB_codec);
      eventMineCartRoundMapABPatch_.WriteTo(output, _map_eventMineCartRoundMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMineCartRoundMap_.WriteTo(ref output, _map_eventMineCartRoundMap_codec);
      eventMineCartRoundMapAB_.WriteTo(ref output, _map_eventMineCartRoundMapAB_codec);
      eventMineCartRoundMapABPatch_.WriteTo(ref output, _map_eventMineCartRoundMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMineCartRoundMap_.CalculateSize(_map_eventMineCartRoundMap_codec);
      size += eventMineCartRoundMapAB_.CalculateSize(_map_eventMineCartRoundMapAB_codec);
      size += eventMineCartRoundMapABPatch_.CalculateSize(_map_eventMineCartRoundMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMineCartRoundConf other) {
      if (other == null) {
        return;
      }
      eventMineCartRoundMap_.Add(other.eventMineCartRoundMap_);
      eventMineCartRoundMapAB_.Add(other.eventMineCartRoundMapAB_);
      eventMineCartRoundMapABPatch_.Add(other.eventMineCartRoundMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMineCartRoundMap_.AddEntriesFrom(input, _map_eventMineCartRoundMap_codec);
            break;
          }
          case 18: {
            eventMineCartRoundMapAB_.AddEntriesFrom(input, _map_eventMineCartRoundMapAB_codec);
            break;
          }
          case 26: {
            eventMineCartRoundMapABPatch_.AddEntriesFrom(input, _map_eventMineCartRoundMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMineCartRoundMap_.AddEntriesFrom(ref input, _map_eventMineCartRoundMap_codec);
            break;
          }
          case 18: {
            eventMineCartRoundMapAB_.AddEntriesFrom(ref input, _map_eventMineCartRoundMapAB_codec);
            break;
          }
          case 26: {
            eventMineCartRoundMapABPatch_.AddEntriesFrom(ref input, _map_eventMineCartRoundMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
