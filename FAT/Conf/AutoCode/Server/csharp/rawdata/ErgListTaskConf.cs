// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/ErgListTaskConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/ErgListTaskConf.proto</summary>
  public static partial class ErgListTaskConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/ErgListTaskConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ErgListTaskConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1yYXdkYXRhL0VyZ0xpc3RUYXNrQ29uZi5wcm90bxIHcmF3ZGF0YSKDAQoL",
            "RXJnTGlzdFRhc2sSCgoCaWQYASABKAUSDAoEZGVzYxgCIAEoCRIQCghpY29u",
            "U2hvdxgDIAEoBRIUCgxyZXF1aXJlUGFyYW0YBCABKAkSDAoEc29ydBgFIAEo",
            "BRISCgp0YXNrUmV3YXJkGAYgASgJEhAKCHRhc2tUeXBlGAcgASgFIrABChVF",
            "cmdMaXN0VGFza01hcEFCVmFsdWUSSgoORXJnTGlzdFRhc2tNYXAYASADKAsy",
            "Mi5yYXdkYXRhLkVyZ0xpc3RUYXNrTWFwQUJWYWx1ZS5FcmdMaXN0VGFza01h",
            "cEVudHJ5GksKE0VyZ0xpc3RUYXNrTWFwRW50cnkSCwoDa2V5GAEgASgFEiMK",
            "BXZhbHVlGAIgASgLMhQucmF3ZGF0YS5FcmdMaXN0VGFzazoCOAEi+QMKD0Vy",
            "Z0xpc3RUYXNrQ29uZhJECg5FcmdMaXN0VGFza01hcBgBIAMoCzIsLnJhd2Rh",
            "dGEuRXJnTGlzdFRhc2tDb25mLkVyZ0xpc3RUYXNrTWFwRW50cnkSSAoQRXJn",
            "TGlzdFRhc2tNYXBBQhgCIAMoCzIuLnJhd2RhdGEuRXJnTGlzdFRhc2tDb25m",
            "LkVyZ0xpc3RUYXNrTWFwQUJFbnRyeRJSChVFcmdMaXN0VGFza01hcEFCUGF0",
            "Y2gYAyADKAsyMy5yYXdkYXRhLkVyZ0xpc3RUYXNrQ29uZi5FcmdMaXN0VGFz",
            "a01hcEFCUGF0Y2hFbnRyeRpLChNFcmdMaXN0VGFza01hcEVudHJ5EgsKA2tl",
            "eRgBIAEoBRIjCgV2YWx1ZRgCIAEoCzIULnJhd2RhdGEuRXJnTGlzdFRhc2s6",
            "AjgBGlcKFUVyZ0xpc3RUYXNrTWFwQUJFbnRyeRILCgNrZXkYASABKAkSLQoF",
            "dmFsdWUYAiABKAsyHi5yYXdkYXRhLkVyZ0xpc3RUYXNrTWFwQUJWYWx1ZToC",
            "OAEaXAoaRXJnTGlzdFRhc2tNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJ",
            "Ei0KBXZhbHVlGAIgASgLMh4ucmF3ZGF0YS5FcmdMaXN0VGFza01hcEFCVmFs",
            "dWU6AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xh",
            "bmcvcmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ErgListTask), global::fat.rawdata.ErgListTask.Parser, new[]{ "Id", "Desc", "IconShow", "RequireParam", "Sort", "TaskReward", "TaskType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ErgListTaskMapABValue), global::fat.rawdata.ErgListTaskMapABValue.Parser, new[]{ "ErgListTaskMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ErgListTaskConf), global::fat.rawdata.ErgListTaskConf.Parser, new[]{ "ErgListTaskMap", "ErgListTaskMapAB", "ErgListTaskMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="ErgListTask",table="ErgListTaskMap",table_wrapper="ErgListTaskConf",map="true",map_key_type="int32",data="ErgListTaskConf")
  /// annotation@ab(table_ab="ErgListTaskMapAB",table_ab_patch="ErgListTaskMapABPatch",table_ab_value="ErgListTaskMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@ErgListTask(id="id")
  /// </summary>
  public sealed partial class ErgListTask : pb::IMessage<ErgListTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ErgListTask> _parser = new pb::MessageParser<ErgListTask>(() => new ErgListTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErgListTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ErgListTaskConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErgListTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErgListTask(ErgListTask other) : this() {
      id_ = other.id_;
      desc_ = other.desc_;
      iconShow_ = other.iconShow_;
      requireParam_ = other.requireParam_;
      sort_ = other.sort_;
      taskReward_ = other.taskReward_;
      taskType_ = other.taskType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErgListTask Clone() {
      return new ErgListTask(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 任务id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 2;
    private string desc_ = "";
    /// <summary>
    /// 任务描述
    /// (key)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iconShow" field.</summary>
    public const int IconShowFieldNumber = 3;
    private int iconShow_;
    /// <summary>
    /// 任务图标
    /// (ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IconShow {
      get { return iconShow_; }
      set {
        iconShow_ = value;
      }
    }

    /// <summary>Field number for the "requireParam" field.</summary>
    public const int RequireParamFieldNumber = 4;
    private string requireParam_ = "";
    /// <summary>
    /// 任务目标数量
    /// 约定配置方式为：{数量:计算方式}；
    /// 参数2计算方式规则如下：
    /// 0 = 数量
    /// 3 = 数量*（等级系数/100），RoundCoin取整）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequireParam {
      get { return requireParam_; }
      set {
        requireParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 5;
    private int sort_;
    /// <summary>
    /// 任务排序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "taskReward" field.</summary>
    public const int TaskRewardFieldNumber = 6;
    private string taskReward_ = "";
    /// <summary>
    /// 奖励详情
    /// {奖励id:数量}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskReward {
      get { return taskReward_; }
      set {
        taskReward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskType" field.</summary>
    public const int TaskTypeFieldNumber = 7;
    private int taskType_;
    /// <summary>
    /// 任务类型
    /// 1:收集金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskType {
      get { return taskType_; }
      set {
        taskType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErgListTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErgListTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Desc != other.Desc) return false;
      if (IconShow != other.IconShow) return false;
      if (RequireParam != other.RequireParam) return false;
      if (Sort != other.Sort) return false;
      if (TaskReward != other.TaskReward) return false;
      if (TaskType != other.TaskType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (IconShow != 0) hash ^= IconShow.GetHashCode();
      if (RequireParam.Length != 0) hash ^= RequireParam.GetHashCode();
      if (Sort != 0) hash ^= Sort.GetHashCode();
      if (TaskReward.Length != 0) hash ^= TaskReward.GetHashCode();
      if (TaskType != 0) hash ^= TaskType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Desc);
      }
      if (IconShow != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IconShow);
      }
      if (RequireParam.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RequireParam);
      }
      if (Sort != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Sort);
      }
      if (TaskReward.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TaskReward);
      }
      if (TaskType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TaskType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Desc);
      }
      if (IconShow != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IconShow);
      }
      if (RequireParam.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RequireParam);
      }
      if (Sort != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Sort);
      }
      if (TaskReward.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TaskReward);
      }
      if (TaskType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TaskType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (IconShow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IconShow);
      }
      if (RequireParam.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequireParam);
      }
      if (Sort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sort);
      }
      if (TaskReward.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskReward);
      }
      if (TaskType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErgListTask other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.IconShow != 0) {
        IconShow = other.IconShow;
      }
      if (other.RequireParam.Length != 0) {
        RequireParam = other.RequireParam;
      }
      if (other.Sort != 0) {
        Sort = other.Sort;
      }
      if (other.TaskReward.Length != 0) {
        TaskReward = other.TaskReward;
      }
      if (other.TaskType != 0) {
        TaskType = other.TaskType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Desc = input.ReadString();
            break;
          }
          case 24: {
            IconShow = input.ReadInt32();
            break;
          }
          case 34: {
            RequireParam = input.ReadString();
            break;
          }
          case 40: {
            Sort = input.ReadInt32();
            break;
          }
          case 50: {
            TaskReward = input.ReadString();
            break;
          }
          case 56: {
            TaskType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Desc = input.ReadString();
            break;
          }
          case 24: {
            IconShow = input.ReadInt32();
            break;
          }
          case 34: {
            RequireParam = input.ReadString();
            break;
          }
          case 40: {
            Sort = input.ReadInt32();
            break;
          }
          case 50: {
            TaskReward = input.ReadString();
            break;
          }
          case 56: {
            TaskType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ErgListTaskMapABValue : pb::IMessage<ErgListTaskMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ErgListTaskMapABValue> _parser = new pb::MessageParser<ErgListTaskMapABValue>(() => new ErgListTaskMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErgListTaskMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ErgListTaskConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErgListTaskMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErgListTaskMapABValue(ErgListTaskMapABValue other) : this() {
      ergListTaskMap_ = other.ergListTaskMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErgListTaskMapABValue Clone() {
      return new ErgListTaskMapABValue(this);
    }

    /// <summary>Field number for the "ErgListTaskMap" field.</summary>
    public const int ErgListTaskMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.ErgListTask>.Codec _map_ergListTaskMap_codec
        = new pbc::MapField<int, global::fat.rawdata.ErgListTask>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ErgListTask.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.ErgListTask> ergListTaskMap_ = new pbc::MapField<int, global::fat.rawdata.ErgListTask>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.ErgListTask> ErgListTaskMap {
      get { return ergListTaskMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErgListTaskMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErgListTaskMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ErgListTaskMap.Equals(other.ErgListTaskMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ErgListTaskMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ergListTaskMap_.WriteTo(output, _map_ergListTaskMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ergListTaskMap_.WriteTo(ref output, _map_ergListTaskMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ergListTaskMap_.CalculateSize(_map_ergListTaskMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErgListTaskMapABValue other) {
      if (other == null) {
        return;
      }
      ergListTaskMap_.Add(other.ergListTaskMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ergListTaskMap_.AddEntriesFrom(input, _map_ergListTaskMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ergListTaskMap_.AddEntriesFrom(ref input, _map_ergListTaskMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ErgListTaskConf : pb::IMessage<ErgListTaskConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ErgListTaskConf> _parser = new pb::MessageParser<ErgListTaskConf>(() => new ErgListTaskConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErgListTaskConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ErgListTaskConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErgListTaskConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErgListTaskConf(ErgListTaskConf other) : this() {
      ergListTaskMap_ = other.ergListTaskMap_.Clone();
      ergListTaskMapAB_ = other.ergListTaskMapAB_.Clone();
      ergListTaskMapABPatch_ = other.ergListTaskMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErgListTaskConf Clone() {
      return new ErgListTaskConf(this);
    }

    /// <summary>Field number for the "ErgListTaskMap" field.</summary>
    public const int ErgListTaskMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.ErgListTask>.Codec _map_ergListTaskMap_codec
        = new pbc::MapField<int, global::fat.rawdata.ErgListTask>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ErgListTask.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.ErgListTask> ergListTaskMap_ = new pbc::MapField<int, global::fat.rawdata.ErgListTask>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.ErgListTask> ErgListTaskMap {
      get { return ergListTaskMap_; }
    }

    /// <summary>Field number for the "ErgListTaskMapAB" field.</summary>
    public const int ErgListTaskMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.ErgListTaskMapABValue>.Codec _map_ergListTaskMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.ErgListTaskMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ErgListTaskMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.ErgListTaskMapABValue> ergListTaskMapAB_ = new pbc::MapField<string, global::fat.rawdata.ErgListTaskMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ErgListTaskMapABValue> ErgListTaskMapAB {
      get { return ergListTaskMapAB_; }
    }

    /// <summary>Field number for the "ErgListTaskMapABPatch" field.</summary>
    public const int ErgListTaskMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.ErgListTaskMapABValue>.Codec _map_ergListTaskMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.ErgListTaskMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ErgListTaskMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.ErgListTaskMapABValue> ergListTaskMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.ErgListTaskMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ErgListTaskMapABValue> ErgListTaskMapABPatch {
      get { return ergListTaskMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErgListTaskConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErgListTaskConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ErgListTaskMap.Equals(other.ErgListTaskMap)) return false;
      if (!ErgListTaskMapAB.Equals(other.ErgListTaskMapAB)) return false;
      if (!ErgListTaskMapABPatch.Equals(other.ErgListTaskMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ErgListTaskMap.GetHashCode();
      hash ^= ErgListTaskMapAB.GetHashCode();
      hash ^= ErgListTaskMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ergListTaskMap_.WriteTo(output, _map_ergListTaskMap_codec);
      ergListTaskMapAB_.WriteTo(output, _map_ergListTaskMapAB_codec);
      ergListTaskMapABPatch_.WriteTo(output, _map_ergListTaskMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ergListTaskMap_.WriteTo(ref output, _map_ergListTaskMap_codec);
      ergListTaskMapAB_.WriteTo(ref output, _map_ergListTaskMapAB_codec);
      ergListTaskMapABPatch_.WriteTo(ref output, _map_ergListTaskMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ergListTaskMap_.CalculateSize(_map_ergListTaskMap_codec);
      size += ergListTaskMapAB_.CalculateSize(_map_ergListTaskMapAB_codec);
      size += ergListTaskMapABPatch_.CalculateSize(_map_ergListTaskMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErgListTaskConf other) {
      if (other == null) {
        return;
      }
      ergListTaskMap_.Add(other.ergListTaskMap_);
      ergListTaskMapAB_.Add(other.ergListTaskMapAB_);
      ergListTaskMapABPatch_.Add(other.ergListTaskMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ergListTaskMap_.AddEntriesFrom(input, _map_ergListTaskMap_codec);
            break;
          }
          case 18: {
            ergListTaskMapAB_.AddEntriesFrom(input, _map_ergListTaskMapAB_codec);
            break;
          }
          case 26: {
            ergListTaskMapABPatch_.AddEntriesFrom(input, _map_ergListTaskMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ergListTaskMap_.AddEntriesFrom(ref input, _map_ergListTaskMap_codec);
            break;
          }
          case 18: {
            ergListTaskMapAB_.AddEntriesFrom(ref input, _map_ergListTaskMapAB_codec);
            break;
          }
          case 26: {
            ergListTaskMapABPatch_.AddEntriesFrom(ref input, _map_ergListTaskMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
