// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/MonopolyOrderItemConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/MonopolyOrderItemConf.proto</summary>
  public static partial class MonopolyOrderItemConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/MonopolyOrderItemConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonopolyOrderItemConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNyYXdkYXRhL01vbm9wb2x5T3JkZXJJdGVtQ29uZi5wcm90bxIHcmF3ZGF0",
            "YSJUChFNb25vcG9seU9yZGVySXRlbRIKCgJpZBgBIAEoBRIMCgRiYXNlGAIg",
            "ASgFEg4KBml0ZW1JZBgDIAEoBRIVCg1wYXlEaWZmaWN1bHR5GAQgASgFItQB",
            "ChtNb25vcG9seU9yZGVySXRlbU1hcEFCVmFsdWUSXAoUTW9ub3BvbHlPcmRl",
            "ckl0ZW1NYXAYASADKAsyPi5yYXdkYXRhLk1vbm9wb2x5T3JkZXJJdGVtTWFw",
            "QUJWYWx1ZS5Nb25vcG9seU9yZGVySXRlbU1hcEVudHJ5GlcKGU1vbm9wb2x5",
            "T3JkZXJJdGVtTWFwRW50cnkSCwoDa2V5GAEgASgFEikKBXZhbHVlGAIgASgL",
            "MhoucmF3ZGF0YS5Nb25vcG9seU9yZGVySXRlbToCOAEi2QQKFU1vbm9wb2x5",
            "T3JkZXJJdGVtQ29uZhJWChRNb25vcG9seU9yZGVySXRlbU1hcBgBIAMoCzI4",
            "LnJhd2RhdGEuTW9ub3BvbHlPcmRlckl0ZW1Db25mLk1vbm9wb2x5T3JkZXJJ",
            "dGVtTWFwRW50cnkSWgoWTW9ub3BvbHlPcmRlckl0ZW1NYXBBQhgCIAMoCzI6",
            "LnJhd2RhdGEuTW9ub3BvbHlPcmRlckl0ZW1Db25mLk1vbm9wb2x5T3JkZXJJ",
            "dGVtTWFwQUJFbnRyeRJkChtNb25vcG9seU9yZGVySXRlbU1hcEFCUGF0Y2gY",
            "AyADKAsyPy5yYXdkYXRhLk1vbm9wb2x5T3JkZXJJdGVtQ29uZi5Nb25vcG9s",
            "eU9yZGVySXRlbU1hcEFCUGF0Y2hFbnRyeRpXChlNb25vcG9seU9yZGVySXRl",
            "bU1hcEVudHJ5EgsKA2tleRgBIAEoBRIpCgV2YWx1ZRgCIAEoCzIaLnJhd2Rh",
            "dGEuTW9ub3BvbHlPcmRlckl0ZW06AjgBGmMKG01vbm9wb2x5T3JkZXJJdGVt",
            "TWFwQUJFbnRyeRILCgNrZXkYASABKAkSMwoFdmFsdWUYAiABKAsyJC5yYXdk",
            "YXRhLk1vbm9wb2x5T3JkZXJJdGVtTWFwQUJWYWx1ZToCOAEaaAogTW9ub3Bv",
            "bHlPcmRlckl0ZW1NYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEjMKBXZh",
            "bHVlGAIgASgLMiQucmF3ZGF0YS5Nb25vcG9seU9yZGVySXRlbU1hcEFCVmFs",
            "dWU6AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xh",
            "bmcvcmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MonopolyOrderItem), global::fat.rawdata.MonopolyOrderItem.Parser, new[]{ "Id", "Base", "ItemId", "PayDifficulty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MonopolyOrderItemMapABValue), global::fat.rawdata.MonopolyOrderItemMapABValue.Parser, new[]{ "MonopolyOrderItemMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MonopolyOrderItemConf), global::fat.rawdata.MonopolyOrderItemConf.Parser, new[]{ "MonopolyOrderItemMap", "MonopolyOrderItemMapAB", "MonopolyOrderItemMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="MonopolyOrderItem",table="MonopolyOrderItemMap",table_wrapper="MonopolyOrderItemConf",map="true",map_key_type="int32",data="MonopolyOrderItemConf")
  /// annotation@ab(table_ab="MonopolyOrderItemMapAB",table_ab_patch="MonopolyOrderItemMapABPatch",table_ab_value="MonopolyOrderItemMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@MonopolyOrderItem(id="id")
  /// </summary>
  public sealed partial class MonopolyOrderItem : pb::IMessage<MonopolyOrderItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonopolyOrderItem> _parser = new pb::MessageParser<MonopolyOrderItem>(() => new MonopolyOrderItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonopolyOrderItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MonopolyOrderItemConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyOrderItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyOrderItem(MonopolyOrderItem other) : this() {
      id_ = other.id_;
      base_ = other.base_;
      itemId_ = other.itemId_;
      payDifficulty_ = other.payDifficulty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyOrderItem Clone() {
      return new MonopolyOrderItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// OrderItemId
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 2;
    private int base_;
    /// <summary>
    /// base
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 3;
    private int itemId_;
    /// <summary>
    /// 对应棋子 id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "payDifficulty" field.</summary>
    public const int PayDifficultyFieldNumber = 4;
    private int payDifficulty_;
    /// <summary>
    /// 实际难度门槛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayDifficulty {
      get { return payDifficulty_; }
      set {
        payDifficulty_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonopolyOrderItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonopolyOrderItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Base != other.Base) return false;
      if (ItemId != other.ItemId) return false;
      if (PayDifficulty != other.PayDifficulty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Base != 0) hash ^= Base.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (PayDifficulty != 0) hash ^= PayDifficulty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Base != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Base);
      }
      if (ItemId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemId);
      }
      if (PayDifficulty != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PayDifficulty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Base != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Base);
      }
      if (ItemId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemId);
      }
      if (PayDifficulty != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PayDifficulty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Base != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Base);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (PayDifficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayDifficulty);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonopolyOrderItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Base != 0) {
        Base = other.Base;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.PayDifficulty != 0) {
        PayDifficulty = other.PayDifficulty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Base = input.ReadInt32();
            break;
          }
          case 24: {
            ItemId = input.ReadInt32();
            break;
          }
          case 32: {
            PayDifficulty = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Base = input.ReadInt32();
            break;
          }
          case 24: {
            ItemId = input.ReadInt32();
            break;
          }
          case 32: {
            PayDifficulty = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MonopolyOrderItemMapABValue : pb::IMessage<MonopolyOrderItemMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonopolyOrderItemMapABValue> _parser = new pb::MessageParser<MonopolyOrderItemMapABValue>(() => new MonopolyOrderItemMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonopolyOrderItemMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MonopolyOrderItemConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyOrderItemMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyOrderItemMapABValue(MonopolyOrderItemMapABValue other) : this() {
      monopolyOrderItemMap_ = other.monopolyOrderItemMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyOrderItemMapABValue Clone() {
      return new MonopolyOrderItemMapABValue(this);
    }

    /// <summary>Field number for the "MonopolyOrderItemMap" field.</summary>
    public const int MonopolyOrderItemMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MonopolyOrderItem>.Codec _map_monopolyOrderItemMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MonopolyOrderItem>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyOrderItem.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MonopolyOrderItem> monopolyOrderItemMap_ = new pbc::MapField<int, global::fat.rawdata.MonopolyOrderItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MonopolyOrderItem> MonopolyOrderItemMap {
      get { return monopolyOrderItemMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonopolyOrderItemMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonopolyOrderItemMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MonopolyOrderItemMap.Equals(other.MonopolyOrderItemMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MonopolyOrderItemMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      monopolyOrderItemMap_.WriteTo(output, _map_monopolyOrderItemMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      monopolyOrderItemMap_.WriteTo(ref output, _map_monopolyOrderItemMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monopolyOrderItemMap_.CalculateSize(_map_monopolyOrderItemMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonopolyOrderItemMapABValue other) {
      if (other == null) {
        return;
      }
      monopolyOrderItemMap_.Add(other.monopolyOrderItemMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            monopolyOrderItemMap_.AddEntriesFrom(input, _map_monopolyOrderItemMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            monopolyOrderItemMap_.AddEntriesFrom(ref input, _map_monopolyOrderItemMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MonopolyOrderItemConf : pb::IMessage<MonopolyOrderItemConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonopolyOrderItemConf> _parser = new pb::MessageParser<MonopolyOrderItemConf>(() => new MonopolyOrderItemConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonopolyOrderItemConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MonopolyOrderItemConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyOrderItemConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyOrderItemConf(MonopolyOrderItemConf other) : this() {
      monopolyOrderItemMap_ = other.monopolyOrderItemMap_.Clone();
      monopolyOrderItemMapAB_ = other.monopolyOrderItemMapAB_.Clone();
      monopolyOrderItemMapABPatch_ = other.monopolyOrderItemMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyOrderItemConf Clone() {
      return new MonopolyOrderItemConf(this);
    }

    /// <summary>Field number for the "MonopolyOrderItemMap" field.</summary>
    public const int MonopolyOrderItemMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MonopolyOrderItem>.Codec _map_monopolyOrderItemMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MonopolyOrderItem>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyOrderItem.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MonopolyOrderItem> monopolyOrderItemMap_ = new pbc::MapField<int, global::fat.rawdata.MonopolyOrderItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MonopolyOrderItem> MonopolyOrderItemMap {
      get { return monopolyOrderItemMap_; }
    }

    /// <summary>Field number for the "MonopolyOrderItemMapAB" field.</summary>
    public const int MonopolyOrderItemMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.MonopolyOrderItemMapABValue>.Codec _map_monopolyOrderItemMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.MonopolyOrderItemMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyOrderItemMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.MonopolyOrderItemMapABValue> monopolyOrderItemMapAB_ = new pbc::MapField<string, global::fat.rawdata.MonopolyOrderItemMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MonopolyOrderItemMapABValue> MonopolyOrderItemMapAB {
      get { return monopolyOrderItemMapAB_; }
    }

    /// <summary>Field number for the "MonopolyOrderItemMapABPatch" field.</summary>
    public const int MonopolyOrderItemMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.MonopolyOrderItemMapABValue>.Codec _map_monopolyOrderItemMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.MonopolyOrderItemMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyOrderItemMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.MonopolyOrderItemMapABValue> monopolyOrderItemMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.MonopolyOrderItemMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MonopolyOrderItemMapABValue> MonopolyOrderItemMapABPatch {
      get { return monopolyOrderItemMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonopolyOrderItemConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonopolyOrderItemConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MonopolyOrderItemMap.Equals(other.MonopolyOrderItemMap)) return false;
      if (!MonopolyOrderItemMapAB.Equals(other.MonopolyOrderItemMapAB)) return false;
      if (!MonopolyOrderItemMapABPatch.Equals(other.MonopolyOrderItemMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MonopolyOrderItemMap.GetHashCode();
      hash ^= MonopolyOrderItemMapAB.GetHashCode();
      hash ^= MonopolyOrderItemMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      monopolyOrderItemMap_.WriteTo(output, _map_monopolyOrderItemMap_codec);
      monopolyOrderItemMapAB_.WriteTo(output, _map_monopolyOrderItemMapAB_codec);
      monopolyOrderItemMapABPatch_.WriteTo(output, _map_monopolyOrderItemMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      monopolyOrderItemMap_.WriteTo(ref output, _map_monopolyOrderItemMap_codec);
      monopolyOrderItemMapAB_.WriteTo(ref output, _map_monopolyOrderItemMapAB_codec);
      monopolyOrderItemMapABPatch_.WriteTo(ref output, _map_monopolyOrderItemMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monopolyOrderItemMap_.CalculateSize(_map_monopolyOrderItemMap_codec);
      size += monopolyOrderItemMapAB_.CalculateSize(_map_monopolyOrderItemMapAB_codec);
      size += monopolyOrderItemMapABPatch_.CalculateSize(_map_monopolyOrderItemMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonopolyOrderItemConf other) {
      if (other == null) {
        return;
      }
      monopolyOrderItemMap_.Add(other.monopolyOrderItemMap_);
      monopolyOrderItemMapAB_.Add(other.monopolyOrderItemMapAB_);
      monopolyOrderItemMapABPatch_.Add(other.monopolyOrderItemMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            monopolyOrderItemMap_.AddEntriesFrom(input, _map_monopolyOrderItemMap_codec);
            break;
          }
          case 18: {
            monopolyOrderItemMapAB_.AddEntriesFrom(input, _map_monopolyOrderItemMapAB_codec);
            break;
          }
          case 26: {
            monopolyOrderItemMapABPatch_.AddEntriesFrom(input, _map_monopolyOrderItemMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            monopolyOrderItemMap_.AddEntriesFrom(ref input, _map_monopolyOrderItemMap_codec);
            break;
          }
          case 18: {
            monopolyOrderItemMapAB_.AddEntriesFrom(ref input, _map_monopolyOrderItemMapAB_codec);
            break;
          }
          case 26: {
            monopolyOrderItemMapABPatch_.AddEntriesFrom(ref input, _map_monopolyOrderItemMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
