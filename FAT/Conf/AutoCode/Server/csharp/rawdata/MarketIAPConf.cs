// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/MarketIAPConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/MarketIAPConf.proto</summary>
  public static partial class MarketIAPConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/MarketIAPConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MarketIAPConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtyYXdkYXRhL01hcmtldElBUENvbmYucHJvdG8SB3Jhd2RhdGEihQEKCU1h",
            "cmtldElBUBIKCgJpZBgKIAEoBRINCgVpbWFnZRgHIAEoCRINCgVpc1RhZxgD",
            "IAEoCBINCgVsYWJlbBgLIAEoBRIMCgRuYW1lGAggASgJEg4KBnBhY2tJZBgJ",
            "IAEoBRIQCghzZXF1ZW5jZRgFIAEoBRIPCgd0YWdUZXh0GAYgASgJIqQBChNN",
            "YXJrZXRJQVBNYXBBQlZhbHVlEkQKDE1hcmtldElBUE1hcBgBIAMoCzIuLnJh",
            "d2RhdGEuTWFya2V0SUFQTWFwQUJWYWx1ZS5NYXJrZXRJQVBNYXBFbnRyeRpH",
            "ChFNYXJrZXRJQVBNYXBFbnRyeRILCgNrZXkYASABKAUSIQoFdmFsdWUYAiAB",
            "KAsyEi5yYXdkYXRhLk1hcmtldElBUDoCOAEi2QMKDU1hcmtldElBUENvbmYS",
            "PgoMTWFya2V0SUFQTWFwGAEgAygLMigucmF3ZGF0YS5NYXJrZXRJQVBDb25m",
            "Lk1hcmtldElBUE1hcEVudHJ5EkIKDk1hcmtldElBUE1hcEFCGAIgAygLMiou",
            "cmF3ZGF0YS5NYXJrZXRJQVBDb25mLk1hcmtldElBUE1hcEFCRW50cnkSTAoT",
            "TWFya2V0SUFQTWFwQUJQYXRjaBgDIAMoCzIvLnJhd2RhdGEuTWFya2V0SUFQ",
            "Q29uZi5NYXJrZXRJQVBNYXBBQlBhdGNoRW50cnkaRwoRTWFya2V0SUFQTWFw",
            "RW50cnkSCwoDa2V5GAEgASgFEiEKBXZhbHVlGAIgASgLMhIucmF3ZGF0YS5N",
            "YXJrZXRJQVA6AjgBGlMKE01hcmtldElBUE1hcEFCRW50cnkSCwoDa2V5GAEg",
            "ASgJEisKBXZhbHVlGAIgASgLMhwucmF3ZGF0YS5NYXJrZXRJQVBNYXBBQlZh",
            "bHVlOgI4ARpYChhNYXJrZXRJQVBNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEg",
            "ASgJEisKBXZhbHVlGAIgASgLMhwucmF3ZGF0YS5NYXJrZXRJQVBNYXBBQlZh",
            "bHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29s",
            "YW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MarketIAP), global::fat.rawdata.MarketIAP.Parser, new[]{ "Id", "Image", "IsTag", "Label", "Name", "PackId", "Sequence", "TagText" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MarketIAPMapABValue), global::fat.rawdata.MarketIAPMapABValue.Parser, new[]{ "MarketIAPMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MarketIAPConf), global::fat.rawdata.MarketIAPConf.Parser, new[]{ "MarketIAPMap", "MarketIAPMapAB", "MarketIAPMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="MarketIAP",table="MarketIAPMap",table_wrapper="MarketIAPConf",map="true",map_key_type="int32",data="MarketIAPConf")
  /// annotation@ab(table_ab="MarketIAPMapAB",table_ab_patch="MarketIAPMapABPatch",table_ab_value="MarketIAPMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@MarketIAP(id="id")
  /// </summary>
  public sealed partial class MarketIAP : pb::IMessage<MarketIAP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketIAP> _parser = new pb::MessageParser<MarketIAP>(() => new MarketIAP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketIAP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MarketIAPConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIAP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIAP(MarketIAP other) : this() {
      id_ = other.id_;
      image_ = other.image_;
      isTag_ = other.isTag_;
      label_ = other.label_;
      name_ = other.name_;
      packId_ = other.packId_;
      sequence_ = other.sequence_;
      tagText_ = other.tagText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIAP Clone() {
      return new MarketIAP(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 10;
    private int id_;
    /// <summary>
    /// IAP列表格子ID
    /// （全局商店）
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 7;
    private string image_ = "";
    /// <summary>
    /// 商品特殊配图
    /// （Asset）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isTag" field.</summary>
    public const int IsTagFieldNumber = 3;
    private bool isTag_;
    /// <summary>
    /// 是否显示标签
    /// (废弃）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTag {
      get { return isTag_; }
      set {
        isTag_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 11;
    private int label_;
    /// <summary>
    /// 标签信息
    /// （Label.id）
    /// （为空代表不显示标签）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 8;
    private string name_ = "";
    /// <summary>
    /// 商品名称
    /// （多语言）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "packId" field.</summary>
    public const int PackIdFieldNumber = 9;
    private int packId_;
    /// <summary>
    /// IAP商品ID
    /// （IAPPack.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackId {
      get { return packId_; }
      set {
        packId_ = value;
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 5;
    private int sequence_;
    /// <summary>
    /// 格子的排序权重
    /// （越小越靠前）
    /// （先横后竖）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "tagText" field.</summary>
    public const int TagTextFieldNumber = 6;
    private string tagText_ = "";
    /// <summary>
    /// 标签文字
    /// （多语言）废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TagText {
      get { return tagText_; }
      set {
        tagText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketIAP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketIAP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Image != other.Image) return false;
      if (IsTag != other.IsTag) return false;
      if (Label != other.Label) return false;
      if (Name != other.Name) return false;
      if (PackId != other.PackId) return false;
      if (Sequence != other.Sequence) return false;
      if (TagText != other.TagText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (IsTag != false) hash ^= IsTag.GetHashCode();
      if (Label != 0) hash ^= Label.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PackId != 0) hash ^= PackId.GetHashCode();
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      if (TagText.Length != 0) hash ^= TagText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsTag != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsTag);
      }
      if (Sequence != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Sequence);
      }
      if (TagText.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TagText);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Image);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (PackId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PackId);
      }
      if (Id != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Id);
      }
      if (Label != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsTag != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsTag);
      }
      if (Sequence != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Sequence);
      }
      if (TagText.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TagText);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Image);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (PackId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PackId);
      }
      if (Id != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Id);
      }
      if (Label != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      if (IsTag != false) {
        size += 1 + 1;
      }
      if (Label != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Label);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackId);
      }
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
      }
      if (TagText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TagText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketIAP other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      if (other.IsTag != false) {
        IsTag = other.IsTag;
      }
      if (other.Label != 0) {
        Label = other.Label;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PackId != 0) {
        PackId = other.PackId;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
      if (other.TagText.Length != 0) {
        TagText = other.TagText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 24: {
            IsTag = input.ReadBool();
            break;
          }
          case 40: {
            Sequence = input.ReadInt32();
            break;
          }
          case 50: {
            TagText = input.ReadString();
            break;
          }
          case 58: {
            Image = input.ReadString();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 72: {
            PackId = input.ReadInt32();
            break;
          }
          case 80: {
            Id = input.ReadInt32();
            break;
          }
          case 88: {
            Label = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 24: {
            IsTag = input.ReadBool();
            break;
          }
          case 40: {
            Sequence = input.ReadInt32();
            break;
          }
          case 50: {
            TagText = input.ReadString();
            break;
          }
          case 58: {
            Image = input.ReadString();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 72: {
            PackId = input.ReadInt32();
            break;
          }
          case 80: {
            Id = input.ReadInt32();
            break;
          }
          case 88: {
            Label = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MarketIAPMapABValue : pb::IMessage<MarketIAPMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketIAPMapABValue> _parser = new pb::MessageParser<MarketIAPMapABValue>(() => new MarketIAPMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketIAPMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MarketIAPConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIAPMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIAPMapABValue(MarketIAPMapABValue other) : this() {
      marketIAPMap_ = other.marketIAPMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIAPMapABValue Clone() {
      return new MarketIAPMapABValue(this);
    }

    /// <summary>Field number for the "MarketIAPMap" field.</summary>
    public const int MarketIAPMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MarketIAP>.Codec _map_marketIAPMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MarketIAP>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MarketIAP.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MarketIAP> marketIAPMap_ = new pbc::MapField<int, global::fat.rawdata.MarketIAP>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MarketIAP> MarketIAPMap {
      get { return marketIAPMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketIAPMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketIAPMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MarketIAPMap.Equals(other.MarketIAPMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MarketIAPMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      marketIAPMap_.WriteTo(output, _map_marketIAPMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      marketIAPMap_.WriteTo(ref output, _map_marketIAPMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += marketIAPMap_.CalculateSize(_map_marketIAPMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketIAPMapABValue other) {
      if (other == null) {
        return;
      }
      marketIAPMap_.Add(other.marketIAPMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            marketIAPMap_.AddEntriesFrom(input, _map_marketIAPMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            marketIAPMap_.AddEntriesFrom(ref input, _map_marketIAPMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MarketIAPConf : pb::IMessage<MarketIAPConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketIAPConf> _parser = new pb::MessageParser<MarketIAPConf>(() => new MarketIAPConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketIAPConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MarketIAPConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIAPConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIAPConf(MarketIAPConf other) : this() {
      marketIAPMap_ = other.marketIAPMap_.Clone();
      marketIAPMapAB_ = other.marketIAPMapAB_.Clone();
      marketIAPMapABPatch_ = other.marketIAPMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIAPConf Clone() {
      return new MarketIAPConf(this);
    }

    /// <summary>Field number for the "MarketIAPMap" field.</summary>
    public const int MarketIAPMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MarketIAP>.Codec _map_marketIAPMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MarketIAP>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MarketIAP.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MarketIAP> marketIAPMap_ = new pbc::MapField<int, global::fat.rawdata.MarketIAP>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MarketIAP> MarketIAPMap {
      get { return marketIAPMap_; }
    }

    /// <summary>Field number for the "MarketIAPMapAB" field.</summary>
    public const int MarketIAPMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.MarketIAPMapABValue>.Codec _map_marketIAPMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.MarketIAPMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MarketIAPMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.MarketIAPMapABValue> marketIAPMapAB_ = new pbc::MapField<string, global::fat.rawdata.MarketIAPMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MarketIAPMapABValue> MarketIAPMapAB {
      get { return marketIAPMapAB_; }
    }

    /// <summary>Field number for the "MarketIAPMapABPatch" field.</summary>
    public const int MarketIAPMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.MarketIAPMapABValue>.Codec _map_marketIAPMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.MarketIAPMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MarketIAPMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.MarketIAPMapABValue> marketIAPMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.MarketIAPMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MarketIAPMapABValue> MarketIAPMapABPatch {
      get { return marketIAPMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketIAPConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketIAPConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MarketIAPMap.Equals(other.MarketIAPMap)) return false;
      if (!MarketIAPMapAB.Equals(other.MarketIAPMapAB)) return false;
      if (!MarketIAPMapABPatch.Equals(other.MarketIAPMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MarketIAPMap.GetHashCode();
      hash ^= MarketIAPMapAB.GetHashCode();
      hash ^= MarketIAPMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      marketIAPMap_.WriteTo(output, _map_marketIAPMap_codec);
      marketIAPMapAB_.WriteTo(output, _map_marketIAPMapAB_codec);
      marketIAPMapABPatch_.WriteTo(output, _map_marketIAPMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      marketIAPMap_.WriteTo(ref output, _map_marketIAPMap_codec);
      marketIAPMapAB_.WriteTo(ref output, _map_marketIAPMapAB_codec);
      marketIAPMapABPatch_.WriteTo(ref output, _map_marketIAPMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += marketIAPMap_.CalculateSize(_map_marketIAPMap_codec);
      size += marketIAPMapAB_.CalculateSize(_map_marketIAPMapAB_codec);
      size += marketIAPMapABPatch_.CalculateSize(_map_marketIAPMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketIAPConf other) {
      if (other == null) {
        return;
      }
      marketIAPMap_.Add(other.marketIAPMap_);
      marketIAPMapAB_.Add(other.marketIAPMapAB_);
      marketIAPMapABPatch_.Add(other.marketIAPMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            marketIAPMap_.AddEntriesFrom(input, _map_marketIAPMap_codec);
            break;
          }
          case 18: {
            marketIAPMapAB_.AddEntriesFrom(input, _map_marketIAPMapAB_codec);
            break;
          }
          case 26: {
            marketIAPMapABPatch_.AddEntriesFrom(input, _map_marketIAPMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            marketIAPMap_.AddEntriesFrom(ref input, _map_marketIAPMap_codec);
            break;
          }
          case 18: {
            marketIAPMapAB_.AddEntriesFrom(ref input, _map_marketIAPMapAB_codec);
            break;
          }
          case 26: {
            marketIAPMapABPatch_.AddEntriesFrom(ref input, _map_marketIAPMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
