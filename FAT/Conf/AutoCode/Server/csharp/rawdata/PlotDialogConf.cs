// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/PlotDialogConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/PlotDialogConf.proto</summary>
  public static partial class PlotDialogConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/PlotDialogConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlotDialogConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxyYXdkYXRhL1Bsb3REaWFsb2dDb25mLnByb3RvEgdyYXdkYXRhIkUKClBs",
            "b3REaWFsb2cSCgoCaWQYASABKAUSDgoGaXNMZWZ0GAIgASgIEg0KBW5wY0lk",
            "GAMgASgFEgwKBHRleHQYBCABKAkiqgEKFFBsb3REaWFsb2dNYXBBQlZhbHVl",
            "EkcKDVBsb3REaWFsb2dNYXAYASADKAsyMC5yYXdkYXRhLlBsb3REaWFsb2dN",
            "YXBBQlZhbHVlLlBsb3REaWFsb2dNYXBFbnRyeRpJChJQbG90RGlhbG9nTWFw",
            "RW50cnkSCwoDa2V5GAEgASgFEiIKBXZhbHVlGAIgASgLMhMucmF3ZGF0YS5Q",
            "bG90RGlhbG9nOgI4ASLpAwoOUGxvdERpYWxvZ0NvbmYSQQoNUGxvdERpYWxv",
            "Z01hcBgBIAMoCzIqLnJhd2RhdGEuUGxvdERpYWxvZ0NvbmYuUGxvdERpYWxv",
            "Z01hcEVudHJ5EkUKD1Bsb3REaWFsb2dNYXBBQhgCIAMoCzIsLnJhd2RhdGEu",
            "UGxvdERpYWxvZ0NvbmYuUGxvdERpYWxvZ01hcEFCRW50cnkSTwoUUGxvdERp",
            "YWxvZ01hcEFCUGF0Y2gYAyADKAsyMS5yYXdkYXRhLlBsb3REaWFsb2dDb25m",
            "LlBsb3REaWFsb2dNYXBBQlBhdGNoRW50cnkaSQoSUGxvdERpYWxvZ01hcEVu",
            "dHJ5EgsKA2tleRgBIAEoBRIiCgV2YWx1ZRgCIAEoCzITLnJhd2RhdGEuUGxv",
            "dERpYWxvZzoCOAEaVQoUUGxvdERpYWxvZ01hcEFCRW50cnkSCwoDa2V5GAEg",
            "ASgJEiwKBXZhbHVlGAIgASgLMh0ucmF3ZGF0YS5QbG90RGlhbG9nTWFwQUJW",
            "YWx1ZToCOAEaWgoZUGxvdERpYWxvZ01hcEFCUGF0Y2hFbnRyeRILCgNrZXkY",
            "ASABKAkSLAoFdmFsdWUYAiABKAsyHS5yYXdkYXRhLlBsb3REaWFsb2dNYXBB",
            "QlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4v",
            "Z29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.PlotDialog), global::fat.rawdata.PlotDialog.Parser, new[]{ "Id", "IsLeft", "NpcId", "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.PlotDialogMapABValue), global::fat.rawdata.PlotDialogMapABValue.Parser, new[]{ "PlotDialogMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.PlotDialogConf), global::fat.rawdata.PlotDialogConf.Parser, new[]{ "PlotDialogMap", "PlotDialogMapAB", "PlotDialogMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="PlotDialog",table="PlotDialogMap",table_wrapper="PlotDialogConf",map="true",map_key_type="int32",data="PlotDialogConf")
  /// annotation@ab(table_ab="PlotDialogMapAB",table_ab_patch="PlotDialogMapABPatch",table_ab_value="PlotDialogMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@PlotDialog(id="id")
  /// </summary>
  public sealed partial class PlotDialog : pb::IMessage<PlotDialog>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlotDialog> _parser = new pb::MessageParser<PlotDialog>(() => new PlotDialog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlotDialog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.PlotDialogConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlotDialog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlotDialog(PlotDialog other) : this() {
      id_ = other.id_;
      isLeft_ = other.isLeft_;
      npcId_ = other.npcId_;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlotDialog Clone() {
      return new PlotDialog(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 对话ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "isLeft" field.</summary>
    public const int IsLeftFieldNumber = 2;
    private bool isLeft_;
    /// <summary>
    /// 是否在左侧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLeft {
      get { return isLeft_; }
      set {
        isLeft_ = value;
      }
    }

    /// <summary>Field number for the "npcId" field.</summary>
    public const int NpcIdFieldNumber = 3;
    private int npcId_;
    /// <summary>
    /// 说话的角色ID
    /// （NpcConfig.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NpcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 4;
    private string text_ = "";
    /// <summary>
    /// 对话内容
    /// （多语言）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlotDialog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlotDialog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IsLeft != other.IsLeft) return false;
      if (NpcId != other.NpcId) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (IsLeft != false) hash ^= IsLeft.GetHashCode();
      if (NpcId != 0) hash ^= NpcId.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (IsLeft != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsLeft);
      }
      if (NpcId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NpcId);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (IsLeft != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsLeft);
      }
      if (NpcId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NpcId);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (IsLeft != false) {
        size += 1 + 1;
      }
      if (NpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NpcId);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlotDialog other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.IsLeft != false) {
        IsLeft = other.IsLeft;
      }
      if (other.NpcId != 0) {
        NpcId = other.NpcId;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            IsLeft = input.ReadBool();
            break;
          }
          case 24: {
            NpcId = input.ReadInt32();
            break;
          }
          case 34: {
            Text = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            IsLeft = input.ReadBool();
            break;
          }
          case 24: {
            NpcId = input.ReadInt32();
            break;
          }
          case 34: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlotDialogMapABValue : pb::IMessage<PlotDialogMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlotDialogMapABValue> _parser = new pb::MessageParser<PlotDialogMapABValue>(() => new PlotDialogMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlotDialogMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.PlotDialogConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlotDialogMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlotDialogMapABValue(PlotDialogMapABValue other) : this() {
      plotDialogMap_ = other.plotDialogMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlotDialogMapABValue Clone() {
      return new PlotDialogMapABValue(this);
    }

    /// <summary>Field number for the "PlotDialogMap" field.</summary>
    public const int PlotDialogMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.PlotDialog>.Codec _map_plotDialogMap_codec
        = new pbc::MapField<int, global::fat.rawdata.PlotDialog>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.PlotDialog.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.PlotDialog> plotDialogMap_ = new pbc::MapField<int, global::fat.rawdata.PlotDialog>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.PlotDialog> PlotDialogMap {
      get { return plotDialogMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlotDialogMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlotDialogMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!PlotDialogMap.Equals(other.PlotDialogMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= PlotDialogMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plotDialogMap_.WriteTo(output, _map_plotDialogMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plotDialogMap_.WriteTo(ref output, _map_plotDialogMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plotDialogMap_.CalculateSize(_map_plotDialogMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlotDialogMapABValue other) {
      if (other == null) {
        return;
      }
      plotDialogMap_.Add(other.plotDialogMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plotDialogMap_.AddEntriesFrom(input, _map_plotDialogMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plotDialogMap_.AddEntriesFrom(ref input, _map_plotDialogMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlotDialogConf : pb::IMessage<PlotDialogConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlotDialogConf> _parser = new pb::MessageParser<PlotDialogConf>(() => new PlotDialogConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlotDialogConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.PlotDialogConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlotDialogConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlotDialogConf(PlotDialogConf other) : this() {
      plotDialogMap_ = other.plotDialogMap_.Clone();
      plotDialogMapAB_ = other.plotDialogMapAB_.Clone();
      plotDialogMapABPatch_ = other.plotDialogMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlotDialogConf Clone() {
      return new PlotDialogConf(this);
    }

    /// <summary>Field number for the "PlotDialogMap" field.</summary>
    public const int PlotDialogMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.PlotDialog>.Codec _map_plotDialogMap_codec
        = new pbc::MapField<int, global::fat.rawdata.PlotDialog>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.PlotDialog.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.PlotDialog> plotDialogMap_ = new pbc::MapField<int, global::fat.rawdata.PlotDialog>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.PlotDialog> PlotDialogMap {
      get { return plotDialogMap_; }
    }

    /// <summary>Field number for the "PlotDialogMapAB" field.</summary>
    public const int PlotDialogMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.PlotDialogMapABValue>.Codec _map_plotDialogMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.PlotDialogMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.PlotDialogMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.PlotDialogMapABValue> plotDialogMapAB_ = new pbc::MapField<string, global::fat.rawdata.PlotDialogMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.PlotDialogMapABValue> PlotDialogMapAB {
      get { return plotDialogMapAB_; }
    }

    /// <summary>Field number for the "PlotDialogMapABPatch" field.</summary>
    public const int PlotDialogMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.PlotDialogMapABValue>.Codec _map_plotDialogMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.PlotDialogMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.PlotDialogMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.PlotDialogMapABValue> plotDialogMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.PlotDialogMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.PlotDialogMapABValue> PlotDialogMapABPatch {
      get { return plotDialogMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlotDialogConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlotDialogConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!PlotDialogMap.Equals(other.PlotDialogMap)) return false;
      if (!PlotDialogMapAB.Equals(other.PlotDialogMapAB)) return false;
      if (!PlotDialogMapABPatch.Equals(other.PlotDialogMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= PlotDialogMap.GetHashCode();
      hash ^= PlotDialogMapAB.GetHashCode();
      hash ^= PlotDialogMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plotDialogMap_.WriteTo(output, _map_plotDialogMap_codec);
      plotDialogMapAB_.WriteTo(output, _map_plotDialogMapAB_codec);
      plotDialogMapABPatch_.WriteTo(output, _map_plotDialogMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plotDialogMap_.WriteTo(ref output, _map_plotDialogMap_codec);
      plotDialogMapAB_.WriteTo(ref output, _map_plotDialogMapAB_codec);
      plotDialogMapABPatch_.WriteTo(ref output, _map_plotDialogMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plotDialogMap_.CalculateSize(_map_plotDialogMap_codec);
      size += plotDialogMapAB_.CalculateSize(_map_plotDialogMapAB_codec);
      size += plotDialogMapABPatch_.CalculateSize(_map_plotDialogMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlotDialogConf other) {
      if (other == null) {
        return;
      }
      plotDialogMap_.Add(other.plotDialogMap_);
      plotDialogMapAB_.Add(other.plotDialogMapAB_);
      plotDialogMapABPatch_.Add(other.plotDialogMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plotDialogMap_.AddEntriesFrom(input, _map_plotDialogMap_codec);
            break;
          }
          case 18: {
            plotDialogMapAB_.AddEntriesFrom(input, _map_plotDialogMapAB_codec);
            break;
          }
          case 26: {
            plotDialogMapABPatch_.AddEntriesFrom(input, _map_plotDialogMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plotDialogMap_.AddEntriesFrom(ref input, _map_plotDialogMap_codec);
            break;
          }
          case 18: {
            plotDialogMapAB_.AddEntriesFrom(ref input, _map_plotDialogMapAB_codec);
            break;
          }
          case 26: {
            plotDialogMapABPatch_.AddEntriesFrom(ref input, _map_plotDialogMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
