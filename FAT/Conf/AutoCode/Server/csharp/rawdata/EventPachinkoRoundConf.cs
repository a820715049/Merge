// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventPachinkoRoundConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventPachinkoRoundConf.proto</summary>
  public static partial class EventPachinkoRoundConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventPachinkoRoundConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventPachinkoRoundConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRyYXdkYXRhL0V2ZW50UGFjaGlua29Sb3VuZENvbmYucHJvdG8SB3Jhd2Rh",
            "dGEiOwoSRXZlbnRQYWNoaW5rb1JvdW5kEgoKAmlkGAEgASgFEhkKEWluY2x1",
            "ZGVQYWNoaW5rb0lkGAIgAygFItoBChxFdmVudFBhY2hpbmtvUm91bmRNYXBB",
            "QlZhbHVlEl8KFUV2ZW50UGFjaGlua29Sb3VuZE1hcBgBIAMoCzJALnJhd2Rh",
            "dGEuRXZlbnRQYWNoaW5rb1JvdW5kTWFwQUJWYWx1ZS5FdmVudFBhY2hpbmtv",
            "Um91bmRNYXBFbnRyeRpZChpFdmVudFBhY2hpbmtvUm91bmRNYXBFbnRyeRIL",
            "CgNrZXkYASABKAUSKgoFdmFsdWUYAiABKAsyGy5yYXdkYXRhLkV2ZW50UGFj",
            "aGlua29Sb3VuZDoCOAEi6QQKFkV2ZW50UGFjaGlua29Sb3VuZENvbmYSWQoV",
            "RXZlbnRQYWNoaW5rb1JvdW5kTWFwGAEgAygLMjoucmF3ZGF0YS5FdmVudFBh",
            "Y2hpbmtvUm91bmRDb25mLkV2ZW50UGFjaGlua29Sb3VuZE1hcEVudHJ5El0K",
            "F0V2ZW50UGFjaGlua29Sb3VuZE1hcEFCGAIgAygLMjwucmF3ZGF0YS5FdmVu",
            "dFBhY2hpbmtvUm91bmRDb25mLkV2ZW50UGFjaGlua29Sb3VuZE1hcEFCRW50",
            "cnkSZwocRXZlbnRQYWNoaW5rb1JvdW5kTWFwQUJQYXRjaBgDIAMoCzJBLnJh",
            "d2RhdGEuRXZlbnRQYWNoaW5rb1JvdW5kQ29uZi5FdmVudFBhY2hpbmtvUm91",
            "bmRNYXBBQlBhdGNoRW50cnkaWQoaRXZlbnRQYWNoaW5rb1JvdW5kTWFwRW50",
            "cnkSCwoDa2V5GAEgASgFEioKBXZhbHVlGAIgASgLMhsucmF3ZGF0YS5FdmVu",
            "dFBhY2hpbmtvUm91bmQ6AjgBGmUKHEV2ZW50UGFjaGlua29Sb3VuZE1hcEFC",
            "RW50cnkSCwoDa2V5GAEgASgJEjQKBXZhbHVlGAIgASgLMiUucmF3ZGF0YS5F",
            "dmVudFBhY2hpbmtvUm91bmRNYXBBQlZhbHVlOgI4ARpqCiFFdmVudFBhY2hp",
            "bmtvUm91bmRNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEjQKBXZhbHVl",
            "GAIgASgLMiUucmF3ZGF0YS5FdmVudFBhY2hpbmtvUm91bmRNYXBBQlZhbHVl",
            "OgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5n",
            "L3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventPachinkoRound), global::fat.rawdata.EventPachinkoRound.Parser, new[]{ "Id", "IncludePachinkoId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventPachinkoRoundMapABValue), global::fat.rawdata.EventPachinkoRoundMapABValue.Parser, new[]{ "EventPachinkoRoundMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventPachinkoRoundConf), global::fat.rawdata.EventPachinkoRoundConf.Parser, new[]{ "EventPachinkoRoundMap", "EventPachinkoRoundMapAB", "EventPachinkoRoundMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventPachinkoRound",table="EventPachinkoRoundMap",table_wrapper="EventPachinkoRoundConf",map="true",map_key_type="int32",data="EventPachinkoRoundConf")
  /// annotation@ab(table_ab="EventPachinkoRoundMapAB",table_ab_patch="EventPachinkoRoundMapABPatch",table_ab_value="EventPachinkoRoundMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventPachinkoRound(id="id")
  /// </summary>
  public sealed partial class EventPachinkoRound : pb::IMessage<EventPachinkoRound>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventPachinkoRound> _parser = new pb::MessageParser<EventPachinkoRound>(() => new EventPachinkoRound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventPachinkoRound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventPachinkoRoundConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoRound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoRound(EventPachinkoRound other) : this() {
      id_ = other.id_;
      includePachinkoId_ = other.includePachinkoId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoRound Clone() {
      return new EventPachinkoRound(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动模板ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "includePachinkoId" field.</summary>
    public const int IncludePachinkoIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_includePachinkoId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> includePachinkoId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 活动包含哪几轮活动
    /// （Eventpachinko.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IncludePachinkoId {
      get { return includePachinkoId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventPachinkoRound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventPachinkoRound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!includePachinkoId_.Equals(other.includePachinkoId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= includePachinkoId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      includePachinkoId_.WriteTo(output, _repeated_includePachinkoId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      includePachinkoId_.WriteTo(ref output, _repeated_includePachinkoId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += includePachinkoId_.CalculateSize(_repeated_includePachinkoId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventPachinkoRound other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      includePachinkoId_.Add(other.includePachinkoId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            includePachinkoId_.AddEntriesFrom(input, _repeated_includePachinkoId_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            includePachinkoId_.AddEntriesFrom(ref input, _repeated_includePachinkoId_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventPachinkoRoundMapABValue : pb::IMessage<EventPachinkoRoundMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventPachinkoRoundMapABValue> _parser = new pb::MessageParser<EventPachinkoRoundMapABValue>(() => new EventPachinkoRoundMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventPachinkoRoundMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventPachinkoRoundConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoRoundMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoRoundMapABValue(EventPachinkoRoundMapABValue other) : this() {
      eventPachinkoRoundMap_ = other.eventPachinkoRoundMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoRoundMapABValue Clone() {
      return new EventPachinkoRoundMapABValue(this);
    }

    /// <summary>Field number for the "EventPachinkoRoundMap" field.</summary>
    public const int EventPachinkoRoundMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventPachinkoRound>.Codec _map_eventPachinkoRoundMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventPachinkoRound>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPachinkoRound.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventPachinkoRound> eventPachinkoRoundMap_ = new pbc::MapField<int, global::fat.rawdata.EventPachinkoRound>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventPachinkoRound> EventPachinkoRoundMap {
      get { return eventPachinkoRoundMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventPachinkoRoundMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventPachinkoRoundMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventPachinkoRoundMap.Equals(other.EventPachinkoRoundMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventPachinkoRoundMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventPachinkoRoundMap_.WriteTo(output, _map_eventPachinkoRoundMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventPachinkoRoundMap_.WriteTo(ref output, _map_eventPachinkoRoundMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventPachinkoRoundMap_.CalculateSize(_map_eventPachinkoRoundMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventPachinkoRoundMapABValue other) {
      if (other == null) {
        return;
      }
      eventPachinkoRoundMap_.Add(other.eventPachinkoRoundMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventPachinkoRoundMap_.AddEntriesFrom(input, _map_eventPachinkoRoundMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventPachinkoRoundMap_.AddEntriesFrom(ref input, _map_eventPachinkoRoundMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventPachinkoRoundConf : pb::IMessage<EventPachinkoRoundConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventPachinkoRoundConf> _parser = new pb::MessageParser<EventPachinkoRoundConf>(() => new EventPachinkoRoundConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventPachinkoRoundConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventPachinkoRoundConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoRoundConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoRoundConf(EventPachinkoRoundConf other) : this() {
      eventPachinkoRoundMap_ = other.eventPachinkoRoundMap_.Clone();
      eventPachinkoRoundMapAB_ = other.eventPachinkoRoundMapAB_.Clone();
      eventPachinkoRoundMapABPatch_ = other.eventPachinkoRoundMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoRoundConf Clone() {
      return new EventPachinkoRoundConf(this);
    }

    /// <summary>Field number for the "EventPachinkoRoundMap" field.</summary>
    public const int EventPachinkoRoundMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventPachinkoRound>.Codec _map_eventPachinkoRoundMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventPachinkoRound>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPachinkoRound.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventPachinkoRound> eventPachinkoRoundMap_ = new pbc::MapField<int, global::fat.rawdata.EventPachinkoRound>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventPachinkoRound> EventPachinkoRoundMap {
      get { return eventPachinkoRoundMap_; }
    }

    /// <summary>Field number for the "EventPachinkoRoundMapAB" field.</summary>
    public const int EventPachinkoRoundMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventPachinkoRoundMapABValue>.Codec _map_eventPachinkoRoundMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventPachinkoRoundMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPachinkoRoundMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventPachinkoRoundMapABValue> eventPachinkoRoundMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventPachinkoRoundMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventPachinkoRoundMapABValue> EventPachinkoRoundMapAB {
      get { return eventPachinkoRoundMapAB_; }
    }

    /// <summary>Field number for the "EventPachinkoRoundMapABPatch" field.</summary>
    public const int EventPachinkoRoundMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventPachinkoRoundMapABValue>.Codec _map_eventPachinkoRoundMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventPachinkoRoundMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPachinkoRoundMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventPachinkoRoundMapABValue> eventPachinkoRoundMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventPachinkoRoundMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventPachinkoRoundMapABValue> EventPachinkoRoundMapABPatch {
      get { return eventPachinkoRoundMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventPachinkoRoundConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventPachinkoRoundConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventPachinkoRoundMap.Equals(other.EventPachinkoRoundMap)) return false;
      if (!EventPachinkoRoundMapAB.Equals(other.EventPachinkoRoundMapAB)) return false;
      if (!EventPachinkoRoundMapABPatch.Equals(other.EventPachinkoRoundMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventPachinkoRoundMap.GetHashCode();
      hash ^= EventPachinkoRoundMapAB.GetHashCode();
      hash ^= EventPachinkoRoundMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventPachinkoRoundMap_.WriteTo(output, _map_eventPachinkoRoundMap_codec);
      eventPachinkoRoundMapAB_.WriteTo(output, _map_eventPachinkoRoundMapAB_codec);
      eventPachinkoRoundMapABPatch_.WriteTo(output, _map_eventPachinkoRoundMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventPachinkoRoundMap_.WriteTo(ref output, _map_eventPachinkoRoundMap_codec);
      eventPachinkoRoundMapAB_.WriteTo(ref output, _map_eventPachinkoRoundMapAB_codec);
      eventPachinkoRoundMapABPatch_.WriteTo(ref output, _map_eventPachinkoRoundMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventPachinkoRoundMap_.CalculateSize(_map_eventPachinkoRoundMap_codec);
      size += eventPachinkoRoundMapAB_.CalculateSize(_map_eventPachinkoRoundMapAB_codec);
      size += eventPachinkoRoundMapABPatch_.CalculateSize(_map_eventPachinkoRoundMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventPachinkoRoundConf other) {
      if (other == null) {
        return;
      }
      eventPachinkoRoundMap_.Add(other.eventPachinkoRoundMap_);
      eventPachinkoRoundMapAB_.Add(other.eventPachinkoRoundMapAB_);
      eventPachinkoRoundMapABPatch_.Add(other.eventPachinkoRoundMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventPachinkoRoundMap_.AddEntriesFrom(input, _map_eventPachinkoRoundMap_codec);
            break;
          }
          case 18: {
            eventPachinkoRoundMapAB_.AddEntriesFrom(input, _map_eventPachinkoRoundMapAB_codec);
            break;
          }
          case 26: {
            eventPachinkoRoundMapABPatch_.AddEntriesFrom(input, _map_eventPachinkoRoundMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventPachinkoRoundMap_.AddEntriesFrom(ref input, _map_eventPachinkoRoundMap_codec);
            break;
          }
          case 18: {
            eventPachinkoRoundMapAB_.AddEntriesFrom(ref input, _map_eventPachinkoRoundMapAB_codec);
            break;
          }
          case 26: {
            eventPachinkoRoundMapABPatch_.AddEntriesFrom(ref input, _map_eventPachinkoRoundMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
