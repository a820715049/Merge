// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventTriggerConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventTriggerConf.proto</summary>
  public static partial class EventTriggerConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventTriggerConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventTriggerConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5yYXdkYXRhL0V2ZW50VHJpZ2dlckNvbmYucHJvdG8SB3Jhd2RhdGEaF3Jh",
            "d2RhdGEvRXZlbnRUeXBlLnByb3RvIocCCgxFdmVudFRyaWdnZXISCgoCaWQY",
            "ASABKAUSEgoKZXZlbnRQYXJhbRgCIAEoBRIlCglldmVudFR5cGUYAyABKA4y",
            "Ei5yYXdkYXRhLkV2ZW50VHlwZRIRCglpc0FiYW5kb24YBCABKAgSEAoIaXNB",
            "Y3RpdmUYBSABKAgSDQoFaXNVdGMYBiABKAgSEAoIbGlmZXRpbWUYByABKAUS",
            "EAoIcHJpb3JpdHkYCCABKAUSFQoNcmV2aXZlUmVxdWlyZRgLIAEoCRIXCg9z",
            "aHV0ZG93blRyaWdnZXIYDCADKAUSEAoIc3RhcnRVdGMYCSABKAUSFgoOdHJp",
            "Z2dlclJlcXVpcmUYCiABKAkitgEKFkV2ZW50VHJpZ2dlck1hcEFCVmFsdWUS",
            "TQoPRXZlbnRUcmlnZ2VyTWFwGAEgAygLMjQucmF3ZGF0YS5FdmVudFRyaWdn",
            "ZXJNYXBBQlZhbHVlLkV2ZW50VHJpZ2dlck1hcEVudHJ5Gk0KFEV2ZW50VHJp",
            "Z2dlck1hcEVudHJ5EgsKA2tleRgBIAEoBRIkCgV2YWx1ZRgCIAEoCzIVLnJh",
            "d2RhdGEuRXZlbnRUcmlnZ2VyOgI4ASKJBAoQRXZlbnRUcmlnZ2VyQ29uZhJH",
            "Cg9FdmVudFRyaWdnZXJNYXAYASADKAsyLi5yYXdkYXRhLkV2ZW50VHJpZ2dl",
            "ckNvbmYuRXZlbnRUcmlnZ2VyTWFwRW50cnkSSwoRRXZlbnRUcmlnZ2VyTWFw",
            "QUIYAiADKAsyMC5yYXdkYXRhLkV2ZW50VHJpZ2dlckNvbmYuRXZlbnRUcmln",
            "Z2VyTWFwQUJFbnRyeRJVChZFdmVudFRyaWdnZXJNYXBBQlBhdGNoGAMgAygL",
            "MjUucmF3ZGF0YS5FdmVudFRyaWdnZXJDb25mLkV2ZW50VHJpZ2dlck1hcEFC",
            "UGF0Y2hFbnRyeRpNChRFdmVudFRyaWdnZXJNYXBFbnRyeRILCgNrZXkYASAB",
            "KAUSJAoFdmFsdWUYAiABKAsyFS5yYXdkYXRhLkV2ZW50VHJpZ2dlcjoCOAEa",
            "WQoWRXZlbnRUcmlnZ2VyTWFwQUJFbnRyeRILCgNrZXkYASABKAkSLgoFdmFs",
            "dWUYAiABKAsyHy5yYXdkYXRhLkV2ZW50VHJpZ2dlck1hcEFCVmFsdWU6AjgB",
            "Gl4KG0V2ZW50VHJpZ2dlck1hcEFCUGF0Y2hFbnRyeRILCgNrZXkYASABKAkS",
            "LgoFdmFsdWUYAiABKAsyHy5yYXdkYXRhLkV2ZW50VHJpZ2dlck1hcEFCVmFs",
            "dWU6AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xh",
            "bmcvcmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.rawdata.EventTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTrigger), global::fat.rawdata.EventTrigger.Parser, new[]{ "Id", "EventParam", "EventType", "IsAbandon", "IsActive", "IsUtc", "Lifetime", "Priority", "ReviveRequire", "ShutdownTrigger", "StartUtc", "TriggerRequire" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTriggerMapABValue), global::fat.rawdata.EventTriggerMapABValue.Parser, new[]{ "EventTriggerMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTriggerConf), global::fat.rawdata.EventTriggerConf.Parser, new[]{ "EventTriggerMap", "EventTriggerMapAB", "EventTriggerMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventTrigger",table="EventTriggerMap",table_wrapper="EventTriggerConf",map="true",map_key_type="int32",data="EventTriggerConf")
  /// annotation@ab(table_ab="EventTriggerMapAB",table_ab_patch="EventTriggerMapABPatch",table_ab_value="EventTriggerMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventTrigger(id="id")
  /// </summary>
  public sealed partial class EventTrigger : pb::IMessage<EventTrigger>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTrigger> _parser = new pb::MessageParser<EventTrigger>(() => new EventTrigger());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTrigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventTriggerConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTrigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTrigger(EventTrigger other) : this() {
      id_ = other.id_;
      eventParam_ = other.eventParam_;
      eventType_ = other.eventType_;
      isAbandon_ = other.isAbandon_;
      isActive_ = other.isActive_;
      isUtc_ = other.isUtc_;
      lifetime_ = other.lifetime_;
      priority_ = other.priority_;
      reviveRequire_ = other.reviveRequire_;
      shutdownTrigger_ = other.shutdownTrigger_.Clone();
      startUtc_ = other.startUtc_;
      triggerRequire_ = other.triggerRequire_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTrigger Clone() {
      return new EventTrigger(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 条件活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "eventParam" field.</summary>
    public const int EventParamFieldNumber = 2;
    private int eventParam_;
    /// <summary>
    /// 活动参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventParam {
      get { return eventParam_; }
      set {
        eventParam_ = value;
      }
    }

    /// <summary>Field number for the "eventType" field.</summary>
    public const int EventTypeFieldNumber = 3;
    private global::fat.rawdata.EventType eventType_ = global::fat.rawdata.EventType.Default;
    /// <summary>
    /// 活动类型
    /// （EventType@enum）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.rawdata.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "isAbandon" field.</summary>
    public const int IsAbandonFieldNumber = 4;
    private bool isAbandon_;
    /// <summary>
    /// 是否强制废弃
    /// （会干掉已有的活动实例）
    /// （慎用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAbandon {
      get { return isAbandon_; }
      set {
        isAbandon_ = value;
      }
    }

    /// <summary>Field number for the "isActive" field.</summary>
    public const int IsActiveFieldNumber = 5;
    private bool isActive_;
    /// <summary>
    /// 是否启用
    /// （不会影响已有的活动实例）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "isUtc" field.</summary>
    public const int IsUtcFieldNumber = 6;
    private bool isUtc_;
    /// <summary>
    /// 是否是UTC时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUtc {
      get { return isUtc_; }
      set {
        isUtc_ = value;
      }
    }

    /// <summary>Field number for the "lifetime" field.</summary>
    public const int LifetimeFieldNumber = 7;
    private int lifetime_;
    /// <summary>
    /// 活动持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lifetime {
      get { return lifetime_; }
      set {
        lifetime_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 8;
    private int priority_;
    /// <summary>
    /// 备用优先级
    /// （同时触发的trigger的排序）
    /// （越小越优先）
    /// （一般与EventTrigger.id一致即可）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "reviveRequire" field.</summary>
    public const int ReviveRequireFieldNumber = 11;
    private string reviveRequire_ = "";
    /// <summary>
    /// Trigger复活函数表达式
    /// （能复活的Trigger，能够反复开启）
    /// （留空代表不能复活）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReviveRequire {
      get { return reviveRequire_; }
      set {
        reviveRequire_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shutdownTrigger" field.</summary>
    public const int ShutdownTriggerFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_shutdownTrigger_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> shutdownTrigger_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 当此 trigger 要触发时
    /// 需要关掉哪个 trigger
    /// （EventTrigger.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ShutdownTrigger {
      get { return shutdownTrigger_; }
    }

    /// <summary>Field number for the "startUtc" field.</summary>
    public const int StartUtcFieldNumber = 9;
    private int startUtc_;
    /// <summary>
    /// UTC起始时间
    /// isUtc为FALSE时
    /// 此值留空
    /// 配了也没意义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartUtc {
      get { return startUtc_; }
      set {
        startUtc_ = value;
      }
    }

    /// <summary>Field number for the "triggerRequire" field.</summary>
    public const int TriggerRequireFieldNumber = 10;
    private string triggerRequire_ = "";
    /// <summary>
    /// 触发条件函数表达式
    /// （配置方式见文档）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerRequire {
      get { return triggerRequire_; }
      set {
        triggerRequire_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTrigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTrigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (EventParam != other.EventParam) return false;
      if (EventType != other.EventType) return false;
      if (IsAbandon != other.IsAbandon) return false;
      if (IsActive != other.IsActive) return false;
      if (IsUtc != other.IsUtc) return false;
      if (Lifetime != other.Lifetime) return false;
      if (Priority != other.Priority) return false;
      if (ReviveRequire != other.ReviveRequire) return false;
      if(!shutdownTrigger_.Equals(other.shutdownTrigger_)) return false;
      if (StartUtc != other.StartUtc) return false;
      if (TriggerRequire != other.TriggerRequire) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (EventParam != 0) hash ^= EventParam.GetHashCode();
      if (EventType != global::fat.rawdata.EventType.Default) hash ^= EventType.GetHashCode();
      if (IsAbandon != false) hash ^= IsAbandon.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (IsUtc != false) hash ^= IsUtc.GetHashCode();
      if (Lifetime != 0) hash ^= Lifetime.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (ReviveRequire.Length != 0) hash ^= ReviveRequire.GetHashCode();
      hash ^= shutdownTrigger_.GetHashCode();
      if (StartUtc != 0) hash ^= StartUtc.GetHashCode();
      if (TriggerRequire.Length != 0) hash ^= TriggerRequire.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (EventParam != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EventParam);
      }
      if (EventType != global::fat.rawdata.EventType.Default) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EventType);
      }
      if (IsAbandon != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsAbandon);
      }
      if (IsActive != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsActive);
      }
      if (IsUtc != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsUtc);
      }
      if (Lifetime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Lifetime);
      }
      if (Priority != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Priority);
      }
      if (StartUtc != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StartUtc);
      }
      if (TriggerRequire.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TriggerRequire);
      }
      if (ReviveRequire.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ReviveRequire);
      }
      shutdownTrigger_.WriteTo(output, _repeated_shutdownTrigger_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (EventParam != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EventParam);
      }
      if (EventType != global::fat.rawdata.EventType.Default) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EventType);
      }
      if (IsAbandon != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsAbandon);
      }
      if (IsActive != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsActive);
      }
      if (IsUtc != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsUtc);
      }
      if (Lifetime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Lifetime);
      }
      if (Priority != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Priority);
      }
      if (StartUtc != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StartUtc);
      }
      if (TriggerRequire.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TriggerRequire);
      }
      if (ReviveRequire.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ReviveRequire);
      }
      shutdownTrigger_.WriteTo(ref output, _repeated_shutdownTrigger_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (EventParam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventParam);
      }
      if (EventType != global::fat.rawdata.EventType.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (IsAbandon != false) {
        size += 1 + 1;
      }
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (IsUtc != false) {
        size += 1 + 1;
      }
      if (Lifetime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lifetime);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (ReviveRequire.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReviveRequire);
      }
      size += shutdownTrigger_.CalculateSize(_repeated_shutdownTrigger_codec);
      if (StartUtc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartUtc);
      }
      if (TriggerRequire.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TriggerRequire);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTrigger other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.EventParam != 0) {
        EventParam = other.EventParam;
      }
      if (other.EventType != global::fat.rawdata.EventType.Default) {
        EventType = other.EventType;
      }
      if (other.IsAbandon != false) {
        IsAbandon = other.IsAbandon;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      if (other.IsUtc != false) {
        IsUtc = other.IsUtc;
      }
      if (other.Lifetime != 0) {
        Lifetime = other.Lifetime;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.ReviveRequire.Length != 0) {
        ReviveRequire = other.ReviveRequire;
      }
      shutdownTrigger_.Add(other.shutdownTrigger_);
      if (other.StartUtc != 0) {
        StartUtc = other.StartUtc;
      }
      if (other.TriggerRequire.Length != 0) {
        TriggerRequire = other.TriggerRequire;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            EventParam = input.ReadInt32();
            break;
          }
          case 24: {
            EventType = (global::fat.rawdata.EventType) input.ReadEnum();
            break;
          }
          case 32: {
            IsAbandon = input.ReadBool();
            break;
          }
          case 40: {
            IsActive = input.ReadBool();
            break;
          }
          case 48: {
            IsUtc = input.ReadBool();
            break;
          }
          case 56: {
            Lifetime = input.ReadInt32();
            break;
          }
          case 64: {
            Priority = input.ReadInt32();
            break;
          }
          case 72: {
            StartUtc = input.ReadInt32();
            break;
          }
          case 82: {
            TriggerRequire = input.ReadString();
            break;
          }
          case 90: {
            ReviveRequire = input.ReadString();
            break;
          }
          case 98:
          case 96: {
            shutdownTrigger_.AddEntriesFrom(input, _repeated_shutdownTrigger_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            EventParam = input.ReadInt32();
            break;
          }
          case 24: {
            EventType = (global::fat.rawdata.EventType) input.ReadEnum();
            break;
          }
          case 32: {
            IsAbandon = input.ReadBool();
            break;
          }
          case 40: {
            IsActive = input.ReadBool();
            break;
          }
          case 48: {
            IsUtc = input.ReadBool();
            break;
          }
          case 56: {
            Lifetime = input.ReadInt32();
            break;
          }
          case 64: {
            Priority = input.ReadInt32();
            break;
          }
          case 72: {
            StartUtc = input.ReadInt32();
            break;
          }
          case 82: {
            TriggerRequire = input.ReadString();
            break;
          }
          case 90: {
            ReviveRequire = input.ReadString();
            break;
          }
          case 98:
          case 96: {
            shutdownTrigger_.AddEntriesFrom(ref input, _repeated_shutdownTrigger_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventTriggerMapABValue : pb::IMessage<EventTriggerMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTriggerMapABValue> _parser = new pb::MessageParser<EventTriggerMapABValue>(() => new EventTriggerMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTriggerMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventTriggerConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTriggerMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTriggerMapABValue(EventTriggerMapABValue other) : this() {
      eventTriggerMap_ = other.eventTriggerMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTriggerMapABValue Clone() {
      return new EventTriggerMapABValue(this);
    }

    /// <summary>Field number for the "EventTriggerMap" field.</summary>
    public const int EventTriggerMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventTrigger>.Codec _map_eventTriggerMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventTrigger>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTrigger.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventTrigger> eventTriggerMap_ = new pbc::MapField<int, global::fat.rawdata.EventTrigger>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventTrigger> EventTriggerMap {
      get { return eventTriggerMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTriggerMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTriggerMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventTriggerMap.Equals(other.EventTriggerMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventTriggerMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventTriggerMap_.WriteTo(output, _map_eventTriggerMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventTriggerMap_.WriteTo(ref output, _map_eventTriggerMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventTriggerMap_.CalculateSize(_map_eventTriggerMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTriggerMapABValue other) {
      if (other == null) {
        return;
      }
      eventTriggerMap_.Add(other.eventTriggerMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventTriggerMap_.AddEntriesFrom(input, _map_eventTriggerMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventTriggerMap_.AddEntriesFrom(ref input, _map_eventTriggerMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventTriggerConf : pb::IMessage<EventTriggerConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTriggerConf> _parser = new pb::MessageParser<EventTriggerConf>(() => new EventTriggerConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTriggerConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventTriggerConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTriggerConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTriggerConf(EventTriggerConf other) : this() {
      eventTriggerMap_ = other.eventTriggerMap_.Clone();
      eventTriggerMapAB_ = other.eventTriggerMapAB_.Clone();
      eventTriggerMapABPatch_ = other.eventTriggerMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTriggerConf Clone() {
      return new EventTriggerConf(this);
    }

    /// <summary>Field number for the "EventTriggerMap" field.</summary>
    public const int EventTriggerMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventTrigger>.Codec _map_eventTriggerMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventTrigger>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTrigger.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventTrigger> eventTriggerMap_ = new pbc::MapField<int, global::fat.rawdata.EventTrigger>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventTrigger> EventTriggerMap {
      get { return eventTriggerMap_; }
    }

    /// <summary>Field number for the "EventTriggerMapAB" field.</summary>
    public const int EventTriggerMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventTriggerMapABValue>.Codec _map_eventTriggerMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventTriggerMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTriggerMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventTriggerMapABValue> eventTriggerMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventTriggerMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventTriggerMapABValue> EventTriggerMapAB {
      get { return eventTriggerMapAB_; }
    }

    /// <summary>Field number for the "EventTriggerMapABPatch" field.</summary>
    public const int EventTriggerMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventTriggerMapABValue>.Codec _map_eventTriggerMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventTriggerMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTriggerMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventTriggerMapABValue> eventTriggerMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventTriggerMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventTriggerMapABValue> EventTriggerMapABPatch {
      get { return eventTriggerMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTriggerConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTriggerConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventTriggerMap.Equals(other.EventTriggerMap)) return false;
      if (!EventTriggerMapAB.Equals(other.EventTriggerMapAB)) return false;
      if (!EventTriggerMapABPatch.Equals(other.EventTriggerMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventTriggerMap.GetHashCode();
      hash ^= EventTriggerMapAB.GetHashCode();
      hash ^= EventTriggerMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventTriggerMap_.WriteTo(output, _map_eventTriggerMap_codec);
      eventTriggerMapAB_.WriteTo(output, _map_eventTriggerMapAB_codec);
      eventTriggerMapABPatch_.WriteTo(output, _map_eventTriggerMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventTriggerMap_.WriteTo(ref output, _map_eventTriggerMap_codec);
      eventTriggerMapAB_.WriteTo(ref output, _map_eventTriggerMapAB_codec);
      eventTriggerMapABPatch_.WriteTo(ref output, _map_eventTriggerMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventTriggerMap_.CalculateSize(_map_eventTriggerMap_codec);
      size += eventTriggerMapAB_.CalculateSize(_map_eventTriggerMapAB_codec);
      size += eventTriggerMapABPatch_.CalculateSize(_map_eventTriggerMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTriggerConf other) {
      if (other == null) {
        return;
      }
      eventTriggerMap_.Add(other.eventTriggerMap_);
      eventTriggerMapAB_.Add(other.eventTriggerMapAB_);
      eventTriggerMapABPatch_.Add(other.eventTriggerMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventTriggerMap_.AddEntriesFrom(input, _map_eventTriggerMap_codec);
            break;
          }
          case 18: {
            eventTriggerMapAB_.AddEntriesFrom(input, _map_eventTriggerMapAB_codec);
            break;
          }
          case 26: {
            eventTriggerMapABPatch_.AddEntriesFrom(input, _map_eventTriggerMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventTriggerMap_.AddEntriesFrom(ref input, _map_eventTriggerMap_codec);
            break;
          }
          case 18: {
            eventTriggerMapAB_.AddEntriesFrom(ref input, _map_eventTriggerMapAB_codec);
            break;
          }
          case 26: {
            eventTriggerMapABPatch_.AddEntriesFrom(ref input, _map_eventTriggerMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
