// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventMiniBoardMultiConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventMiniBoardMultiConf.proto</summary>
  public static partial class EventMiniBoardMultiConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventMiniBoardMultiConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventMiniBoardMultiConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVyYXdkYXRhL0V2ZW50TWluaUJvYXJkTXVsdGlDb25mLnByb3RvEgdyYXdk",
            "YXRhItIBChNFdmVudE1pbmlCb2FyZE11bHRpEgoKAmlkGAEgASgFEhYKDmJv",
            "YXJkTmV4dFRoZW1lGAggASgFEhIKCmJvYXJkVGhlbWUYAiABKAUSDAoEY29z",
            "dBgDIAEoBRIWCg5lbmRSZXdhcmRUaGVtZRgEIAEoBRIQCghlbmRUaGVtZRgF",
            "IAEoBRISCgpldmVudFRoZW1lGAYgASgFEhMKC2dldEtleVRoZW1lGAogASgF",
            "Eg8KB2dyYWRlSWQYByABKAUSEQoJaGVscFRoZW1lGAkgASgFIuABCh1FdmVu",
            "dE1pbmlCb2FyZE11bHRpTWFwQUJWYWx1ZRJiChZFdmVudE1pbmlCb2FyZE11",
            "bHRpTWFwGAEgAygLMkIucmF3ZGF0YS5FdmVudE1pbmlCb2FyZE11bHRpTWFw",
            "QUJWYWx1ZS5FdmVudE1pbmlCb2FyZE11bHRpTWFwRW50cnkaWwobRXZlbnRN",
            "aW5pQm9hcmRNdWx0aU1hcEVudHJ5EgsKA2tleRgBIAEoBRIrCgV2YWx1ZRgC",
            "IAEoCzIcLnJhd2RhdGEuRXZlbnRNaW5pQm9hcmRNdWx0aToCOAEi+QQKF0V2",
            "ZW50TWluaUJvYXJkTXVsdGlDb25mElwKFkV2ZW50TWluaUJvYXJkTXVsdGlN",
            "YXAYASADKAsyPC5yYXdkYXRhLkV2ZW50TWluaUJvYXJkTXVsdGlDb25mLkV2",
            "ZW50TWluaUJvYXJkTXVsdGlNYXBFbnRyeRJgChhFdmVudE1pbmlCb2FyZE11",
            "bHRpTWFwQUIYAiADKAsyPi5yYXdkYXRhLkV2ZW50TWluaUJvYXJkTXVsdGlD",
            "b25mLkV2ZW50TWluaUJvYXJkTXVsdGlNYXBBQkVudHJ5EmoKHUV2ZW50TWlu",
            "aUJvYXJkTXVsdGlNYXBBQlBhdGNoGAMgAygLMkMucmF3ZGF0YS5FdmVudE1p",
            "bmlCb2FyZE11bHRpQ29uZi5FdmVudE1pbmlCb2FyZE11bHRpTWFwQUJQYXRj",
            "aEVudHJ5GlsKG0V2ZW50TWluaUJvYXJkTXVsdGlNYXBFbnRyeRILCgNrZXkY",
            "ASABKAUSKwoFdmFsdWUYAiABKAsyHC5yYXdkYXRhLkV2ZW50TWluaUJvYXJk",
            "TXVsdGk6AjgBGmcKHUV2ZW50TWluaUJvYXJkTXVsdGlNYXBBQkVudHJ5EgsK",
            "A2tleRgBIAEoCRI1CgV2YWx1ZRgCIAEoCzImLnJhd2RhdGEuRXZlbnRNaW5p",
            "Qm9hcmRNdWx0aU1hcEFCVmFsdWU6AjgBGmwKIkV2ZW50TWluaUJvYXJkTXVs",
            "dGlNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEjUKBXZhbHVlGAIgASgL",
            "MiYucmF3ZGF0YS5FdmVudE1pbmlCb2FyZE11bHRpTWFwQUJWYWx1ZToCOAFC",
            "PVotZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdk",
            "YXRhqgILZmF0LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMiniBoardMulti), global::fat.rawdata.EventMiniBoardMulti.Parser, new[]{ "Id", "BoardNextTheme", "BoardTheme", "Cost", "EndRewardTheme", "EndTheme", "EventTheme", "GetKeyTheme", "GradeId", "HelpTheme" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMiniBoardMultiMapABValue), global::fat.rawdata.EventMiniBoardMultiMapABValue.Parser, new[]{ "EventMiniBoardMultiMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMiniBoardMultiConf), global::fat.rawdata.EventMiniBoardMultiConf.Parser, new[]{ "EventMiniBoardMultiMap", "EventMiniBoardMultiMapAB", "EventMiniBoardMultiMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventMiniBoardMulti",table="EventMiniBoardMultiMap",table_wrapper="EventMiniBoardMultiConf",map="true",map_key_type="int32",data="EventMiniBoardMultiConf")
  /// annotation@ab(table_ab="EventMiniBoardMultiMapAB",table_ab_patch="EventMiniBoardMultiMapABPatch",table_ab_value="EventMiniBoardMultiMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventMiniBoardMulti(id="id")
  /// </summary>
  public sealed partial class EventMiniBoardMulti : pb::IMessage<EventMiniBoardMulti>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMiniBoardMulti> _parser = new pb::MessageParser<EventMiniBoardMulti>(() => new EventMiniBoardMulti());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMiniBoardMulti> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMiniBoardMultiConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMulti() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMulti(EventMiniBoardMulti other) : this() {
      id_ = other.id_;
      boardNextTheme_ = other.boardNextTheme_;
      boardTheme_ = other.boardTheme_;
      cost_ = other.cost_;
      endRewardTheme_ = other.endRewardTheme_;
      endTheme_ = other.endTheme_;
      eventTheme_ = other.eventTheme_;
      getKeyTheme_ = other.getKeyTheme_;
      gradeId_ = other.gradeId_;
      helpTheme_ = other.helpTheme_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMulti Clone() {
      return new EventMiniBoardMulti(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardNextTheme" field.</summary>
    public const int BoardNextThemeFieldNumber = 8;
    private int boardNextTheme_;
    /// <summary>
    /// 棋盘next
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardNextTheme {
      get { return boardNextTheme_; }
      set {
        boardNextTheme_ = value;
      }
    }

    /// <summary>Field number for the "boardTheme" field.</summary>
    public const int BoardThemeFieldNumber = 2;
    private int boardTheme_;
    /// <summary>
    /// 棋盘
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardTheme {
      get { return boardTheme_; }
      set {
        boardTheme_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 3;
    private int cost_;
    /// <summary>
    /// 消耗内容
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "endRewardTheme" field.</summary>
    public const int EndRewardThemeFieldNumber = 4;
    private int endRewardTheme_;
    /// <summary>
    /// 补领
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndRewardTheme {
      get { return endRewardTheme_; }
      set {
        endRewardTheme_ = value;
      }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 5;
    private int endTheme_;
    /// <summary>
    /// 结束
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 6;
    private int eventTheme_;
    /// <summary>
    /// 开启
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "getKeyTheme" field.</summary>
    public const int GetKeyThemeFieldNumber = 10;
    private int getKeyTheme_;
    /// <summary>
    /// 飞图标
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetKeyTheme {
      get { return getKeyTheme_; }
      set {
        getKeyTheme_ = value;
      }
    }

    /// <summary>Field number for the "gradeId" field.</summary>
    public const int GradeIdFieldNumber = 7;
    private int gradeId_;
    /// <summary>
    /// 分层后id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeId {
      get { return gradeId_; }
      set {
        gradeId_ = value;
      }
    }

    /// <summary>Field number for the "helpTheme" field.</summary>
    public const int HelpThemeFieldNumber = 9;
    private int helpTheme_;
    /// <summary>
    /// 帮助
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpTheme {
      get { return helpTheme_; }
      set {
        helpTheme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMiniBoardMulti);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMiniBoardMulti other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardNextTheme != other.BoardNextTheme) return false;
      if (BoardTheme != other.BoardTheme) return false;
      if (Cost != other.Cost) return false;
      if (EndRewardTheme != other.EndRewardTheme) return false;
      if (EndTheme != other.EndTheme) return false;
      if (EventTheme != other.EventTheme) return false;
      if (GetKeyTheme != other.GetKeyTheme) return false;
      if (GradeId != other.GradeId) return false;
      if (HelpTheme != other.HelpTheme) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardNextTheme != 0) hash ^= BoardNextTheme.GetHashCode();
      if (BoardTheme != 0) hash ^= BoardTheme.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (EndRewardTheme != 0) hash ^= EndRewardTheme.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (GetKeyTheme != 0) hash ^= GetKeyTheme.GetHashCode();
      if (GradeId != 0) hash ^= GradeId.GetHashCode();
      if (HelpTheme != 0) hash ^= HelpTheme.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardTheme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardTheme);
      }
      if (Cost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cost);
      }
      if (EndRewardTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndRewardTheme);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EndTheme);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EventTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GradeId);
      }
      if (BoardNextTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BoardNextTheme);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HelpTheme);
      }
      if (GetKeyTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GetKeyTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardTheme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardTheme);
      }
      if (Cost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cost);
      }
      if (EndRewardTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndRewardTheme);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EndTheme);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EventTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GradeId);
      }
      if (BoardNextTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BoardNextTheme);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HelpTheme);
      }
      if (GetKeyTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GetKeyTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardNextTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardNextTheme);
      }
      if (BoardTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardTheme);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (EndRewardTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndRewardTheme);
      }
      if (EndTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (GetKeyTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetKeyTheme);
      }
      if (GradeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeId);
      }
      if (HelpTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HelpTheme);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMiniBoardMulti other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardNextTheme != 0) {
        BoardNextTheme = other.BoardNextTheme;
      }
      if (other.BoardTheme != 0) {
        BoardTheme = other.BoardTheme;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.EndRewardTheme != 0) {
        EndRewardTheme = other.EndRewardTheme;
      }
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.GetKeyTheme != 0) {
        GetKeyTheme = other.GetKeyTheme;
      }
      if (other.GradeId != 0) {
        GradeId = other.GradeId;
      }
      if (other.HelpTheme != 0) {
        HelpTheme = other.HelpTheme;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardTheme = input.ReadInt32();
            break;
          }
          case 24: {
            Cost = input.ReadInt32();
            break;
          }
          case 32: {
            EndRewardTheme = input.ReadInt32();
            break;
          }
          case 40: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 48: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 56: {
            GradeId = input.ReadInt32();
            break;
          }
          case 64: {
            BoardNextTheme = input.ReadInt32();
            break;
          }
          case 72: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 80: {
            GetKeyTheme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardTheme = input.ReadInt32();
            break;
          }
          case 24: {
            Cost = input.ReadInt32();
            break;
          }
          case 32: {
            EndRewardTheme = input.ReadInt32();
            break;
          }
          case 40: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 48: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 56: {
            GradeId = input.ReadInt32();
            break;
          }
          case 64: {
            BoardNextTheme = input.ReadInt32();
            break;
          }
          case 72: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 80: {
            GetKeyTheme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMiniBoardMultiMapABValue : pb::IMessage<EventMiniBoardMultiMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMiniBoardMultiMapABValue> _parser = new pb::MessageParser<EventMiniBoardMultiMapABValue>(() => new EventMiniBoardMultiMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMiniBoardMultiMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMiniBoardMultiConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMultiMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMultiMapABValue(EventMiniBoardMultiMapABValue other) : this() {
      eventMiniBoardMultiMap_ = other.eventMiniBoardMultiMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMultiMapABValue Clone() {
      return new EventMiniBoardMultiMapABValue(this);
    }

    /// <summary>Field number for the "EventMiniBoardMultiMap" field.</summary>
    public const int EventMiniBoardMultiMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoardMulti>.Codec _map_eventMiniBoardMultiMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMiniBoardMulti>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoardMulti.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoardMulti> eventMiniBoardMultiMap_ = new pbc::MapField<int, global::fat.rawdata.EventMiniBoardMulti>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMiniBoardMulti> EventMiniBoardMultiMap {
      get { return eventMiniBoardMultiMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMiniBoardMultiMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMiniBoardMultiMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMiniBoardMultiMap.Equals(other.EventMiniBoardMultiMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMiniBoardMultiMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMiniBoardMultiMap_.WriteTo(output, _map_eventMiniBoardMultiMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMiniBoardMultiMap_.WriteTo(ref output, _map_eventMiniBoardMultiMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMiniBoardMultiMap_.CalculateSize(_map_eventMiniBoardMultiMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMiniBoardMultiMapABValue other) {
      if (other == null) {
        return;
      }
      eventMiniBoardMultiMap_.Add(other.eventMiniBoardMultiMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMiniBoardMultiMap_.AddEntriesFrom(input, _map_eventMiniBoardMultiMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMiniBoardMultiMap_.AddEntriesFrom(ref input, _map_eventMiniBoardMultiMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMiniBoardMultiConf : pb::IMessage<EventMiniBoardMultiConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMiniBoardMultiConf> _parser = new pb::MessageParser<EventMiniBoardMultiConf>(() => new EventMiniBoardMultiConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMiniBoardMultiConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMiniBoardMultiConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMultiConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMultiConf(EventMiniBoardMultiConf other) : this() {
      eventMiniBoardMultiMap_ = other.eventMiniBoardMultiMap_.Clone();
      eventMiniBoardMultiMapAB_ = other.eventMiniBoardMultiMapAB_.Clone();
      eventMiniBoardMultiMapABPatch_ = other.eventMiniBoardMultiMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMultiConf Clone() {
      return new EventMiniBoardMultiConf(this);
    }

    /// <summary>Field number for the "EventMiniBoardMultiMap" field.</summary>
    public const int EventMiniBoardMultiMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoardMulti>.Codec _map_eventMiniBoardMultiMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMiniBoardMulti>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoardMulti.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoardMulti> eventMiniBoardMultiMap_ = new pbc::MapField<int, global::fat.rawdata.EventMiniBoardMulti>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMiniBoardMulti> EventMiniBoardMultiMap {
      get { return eventMiniBoardMultiMap_; }
    }

    /// <summary>Field number for the "EventMiniBoardMultiMapAB" field.</summary>
    public const int EventMiniBoardMultiMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiMapABValue>.Codec _map_eventMiniBoardMultiMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoardMultiMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiMapABValue> eventMiniBoardMultiMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiMapABValue> EventMiniBoardMultiMapAB {
      get { return eventMiniBoardMultiMapAB_; }
    }

    /// <summary>Field number for the "EventMiniBoardMultiMapABPatch" field.</summary>
    public const int EventMiniBoardMultiMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiMapABValue>.Codec _map_eventMiniBoardMultiMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoardMultiMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiMapABValue> eventMiniBoardMultiMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiMapABValue> EventMiniBoardMultiMapABPatch {
      get { return eventMiniBoardMultiMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMiniBoardMultiConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMiniBoardMultiConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMiniBoardMultiMap.Equals(other.EventMiniBoardMultiMap)) return false;
      if (!EventMiniBoardMultiMapAB.Equals(other.EventMiniBoardMultiMapAB)) return false;
      if (!EventMiniBoardMultiMapABPatch.Equals(other.EventMiniBoardMultiMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMiniBoardMultiMap.GetHashCode();
      hash ^= EventMiniBoardMultiMapAB.GetHashCode();
      hash ^= EventMiniBoardMultiMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMiniBoardMultiMap_.WriteTo(output, _map_eventMiniBoardMultiMap_codec);
      eventMiniBoardMultiMapAB_.WriteTo(output, _map_eventMiniBoardMultiMapAB_codec);
      eventMiniBoardMultiMapABPatch_.WriteTo(output, _map_eventMiniBoardMultiMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMiniBoardMultiMap_.WriteTo(ref output, _map_eventMiniBoardMultiMap_codec);
      eventMiniBoardMultiMapAB_.WriteTo(ref output, _map_eventMiniBoardMultiMapAB_codec);
      eventMiniBoardMultiMapABPatch_.WriteTo(ref output, _map_eventMiniBoardMultiMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMiniBoardMultiMap_.CalculateSize(_map_eventMiniBoardMultiMap_codec);
      size += eventMiniBoardMultiMapAB_.CalculateSize(_map_eventMiniBoardMultiMapAB_codec);
      size += eventMiniBoardMultiMapABPatch_.CalculateSize(_map_eventMiniBoardMultiMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMiniBoardMultiConf other) {
      if (other == null) {
        return;
      }
      eventMiniBoardMultiMap_.Add(other.eventMiniBoardMultiMap_);
      eventMiniBoardMultiMapAB_.Add(other.eventMiniBoardMultiMapAB_);
      eventMiniBoardMultiMapABPatch_.Add(other.eventMiniBoardMultiMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMiniBoardMultiMap_.AddEntriesFrom(input, _map_eventMiniBoardMultiMap_codec);
            break;
          }
          case 18: {
            eventMiniBoardMultiMapAB_.AddEntriesFrom(input, _map_eventMiniBoardMultiMapAB_codec);
            break;
          }
          case 26: {
            eventMiniBoardMultiMapABPatch_.AddEntriesFrom(input, _map_eventMiniBoardMultiMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMiniBoardMultiMap_.AddEntriesFrom(ref input, _map_eventMiniBoardMultiMap_codec);
            break;
          }
          case 18: {
            eventMiniBoardMultiMapAB_.AddEntriesFrom(ref input, _map_eventMiniBoardMultiMapAB_codec);
            break;
          }
          case 26: {
            eventMiniBoardMultiMapABPatch_.AddEntriesFrom(ref input, _map_eventMiniBoardMultiMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
