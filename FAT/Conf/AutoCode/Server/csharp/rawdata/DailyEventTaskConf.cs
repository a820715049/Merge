// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/DailyEventTaskConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/DailyEventTaskConf.proto</summary>
  public static partial class DailyEventTaskConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/DailyEventTaskConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DailyEventTaskConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiByYXdkYXRhL0RhaWx5RXZlbnRUYXNrQ29uZi5wcm90bxIHcmF3ZGF0YSLF",
            "AQoORGFpbHlFdmVudFRhc2sSCgoCaWQYASABKAUSDAoEZGVzYxgCIAEoCRIM",
            "CgRkaWZmGAggASgFEhUKDWV2ZW50RXhjaGFuZ2UYCiABKAkSDgoGaXNHb2xk",
            "GAkgASgIEhcKD21pbGVzdG9uZVJld2FyZBgDIAEoCRIUCgxyZXF1aXJlUGFy",
            "YW0YBCABKAkSEwoLcmVxdWlyZVR5cGUYBSABKAUSDAoEc29ydBgGIAEoBRIS",
            "Cgp0YXNrUmV3YXJkGAcgASgJIsIBChhEYWlseUV2ZW50VGFza01hcEFCVmFs",
            "dWUSUwoRRGFpbHlFdmVudFRhc2tNYXAYASADKAsyOC5yYXdkYXRhLkRhaWx5",
            "RXZlbnRUYXNrTWFwQUJWYWx1ZS5EYWlseUV2ZW50VGFza01hcEVudHJ5GlEK",
            "FkRhaWx5RXZlbnRUYXNrTWFwRW50cnkSCwoDa2V5GAEgASgFEiYKBXZhbHVl",
            "GAIgASgLMhcucmF3ZGF0YS5EYWlseUV2ZW50VGFzazoCOAEiqQQKEkRhaWx5",
            "RXZlbnRUYXNrQ29uZhJNChFEYWlseUV2ZW50VGFza01hcBgBIAMoCzIyLnJh",
            "d2RhdGEuRGFpbHlFdmVudFRhc2tDb25mLkRhaWx5RXZlbnRUYXNrTWFwRW50",
            "cnkSUQoTRGFpbHlFdmVudFRhc2tNYXBBQhgCIAMoCzI0LnJhd2RhdGEuRGFp",
            "bHlFdmVudFRhc2tDb25mLkRhaWx5RXZlbnRUYXNrTWFwQUJFbnRyeRJbChhE",
            "YWlseUV2ZW50VGFza01hcEFCUGF0Y2gYAyADKAsyOS5yYXdkYXRhLkRhaWx5",
            "RXZlbnRUYXNrQ29uZi5EYWlseUV2ZW50VGFza01hcEFCUGF0Y2hFbnRyeRpR",
            "ChZEYWlseUV2ZW50VGFza01hcEVudHJ5EgsKA2tleRgBIAEoBRImCgV2YWx1",
            "ZRgCIAEoCzIXLnJhd2RhdGEuRGFpbHlFdmVudFRhc2s6AjgBGl0KGERhaWx5",
            "RXZlbnRUYXNrTWFwQUJFbnRyeRILCgNrZXkYASABKAkSMAoFdmFsdWUYAiAB",
            "KAsyIS5yYXdkYXRhLkRhaWx5RXZlbnRUYXNrTWFwQUJWYWx1ZToCOAEaYgod",
            "RGFpbHlFdmVudFRhc2tNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEjAK",
            "BXZhbHVlGAIgASgLMiEucmF3ZGF0YS5EYWlseUV2ZW50VGFza01hcEFCVmFs",
            "dWU6AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xh",
            "bmcvcmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.DailyEventTask), global::fat.rawdata.DailyEventTask.Parser, new[]{ "Id", "Desc", "Diff", "EventExchange", "IsGold", "MilestoneReward", "RequireParam", "RequireType", "Sort", "TaskReward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.DailyEventTaskMapABValue), global::fat.rawdata.DailyEventTaskMapABValue.Parser, new[]{ "DailyEventTaskMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.DailyEventTaskConf), global::fat.rawdata.DailyEventTaskConf.Parser, new[]{ "DailyEventTaskMap", "DailyEventTaskMapAB", "DailyEventTaskMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="DailyEventTask",table="DailyEventTaskMap",table_wrapper="DailyEventTaskConf",map="true",map_key_type="int32",data="DailyEventTaskConf")
  /// annotation@ab(table_ab="DailyEventTaskMapAB",table_ab_patch="DailyEventTaskMapABPatch",table_ab_value="DailyEventTaskMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@DailyEventTask(id="id")
  /// </summary>
  public sealed partial class DailyEventTask : pb::IMessage<DailyEventTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DailyEventTask> _parser = new pb::MessageParser<DailyEventTask>(() => new DailyEventTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyEventTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.DailyEventTaskConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventTask(DailyEventTask other) : this() {
      id_ = other.id_;
      desc_ = other.desc_;
      diff_ = other.diff_;
      eventExchange_ = other.eventExchange_;
      isGold_ = other.isGold_;
      milestoneReward_ = other.milestoneReward_;
      requireParam_ = other.requireParam_;
      requireType_ = other.requireType_;
      sort_ = other.sort_;
      taskReward_ = other.taskReward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventTask Clone() {
      return new DailyEventTask(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 每日任务ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 2;
    private string desc_ = "";
    /// <summary>
    /// 任务描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "diff" field.</summary>
    public const int DiffFieldNumber = 8;
    private int diff_;
    /// <summary>
    /// 预设难度值
    /// （TGA事件属性）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diff {
      get { return diff_; }
      set {
        diff_ = value;
      }
    }

    /// <summary>Field number for the "eventExchange" field.</summary>
    public const int EventExchangeFieldNumber = 10;
    private string eventExchange_ = "";
    /// <summary>
    /// 奖励替换
    /// （砍价礼包投放活动奖励，当活动不存在时，使用此列奖励）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventExchange {
      get { return eventExchange_; }
      set {
        eventExchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isGold" field.</summary>
    public const int IsGoldFieldNumber = 9;
    private bool isGold_;
    /// <summary>
    /// 是否是金色任务
    /// （会有不同的任务底图）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGold {
      get { return isGold_; }
      set {
        isGold_ = value;
      }
    }

    /// <summary>Field number for the "milestoneReward" field.</summary>
    public const int MilestoneRewardFieldNumber = 3;
    private string milestoneReward_ = "";
    /// <summary>
    /// 里程碑奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MilestoneReward {
      get { return milestoneReward_; }
      set {
        milestoneReward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requireParam" field.</summary>
    public const int RequireParamFieldNumber = 4;
    private string requireParam_ = "";
    /// <summary>
    /// 任务要求数量
    /// （数量:计算方式）
    /// 参数2计算方式规则如下：
    /// 0 = 数量
    /// 3 = 数量*（等级系数/100），RoundCoin取整
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequireParam {
      get { return requireParam_; }
      set {
        requireParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requireType" field.</summary>
    public const int RequireTypeFieldNumber = 5;
    private int requireType_;
    /// <summary>
    /// 任务对应变量
    /// 1 = 消耗钻石
    /// 2 = 合成次数
    /// 3 = 收集金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireType {
      get { return requireType_; }
      set {
        requireType_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 6;
    private int sort_;
    /// <summary>
    /// 任务排序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "taskReward" field.</summary>
    public const int TaskRewardFieldNumber = 7;
    private string taskReward_ = "";
    /// <summary>
    /// 任务奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskReward {
      get { return taskReward_; }
      set {
        taskReward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyEventTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyEventTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Desc != other.Desc) return false;
      if (Diff != other.Diff) return false;
      if (EventExchange != other.EventExchange) return false;
      if (IsGold != other.IsGold) return false;
      if (MilestoneReward != other.MilestoneReward) return false;
      if (RequireParam != other.RequireParam) return false;
      if (RequireType != other.RequireType) return false;
      if (Sort != other.Sort) return false;
      if (TaskReward != other.TaskReward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (Diff != 0) hash ^= Diff.GetHashCode();
      if (EventExchange.Length != 0) hash ^= EventExchange.GetHashCode();
      if (IsGold != false) hash ^= IsGold.GetHashCode();
      if (MilestoneReward.Length != 0) hash ^= MilestoneReward.GetHashCode();
      if (RequireParam.Length != 0) hash ^= RequireParam.GetHashCode();
      if (RequireType != 0) hash ^= RequireType.GetHashCode();
      if (Sort != 0) hash ^= Sort.GetHashCode();
      if (TaskReward.Length != 0) hash ^= TaskReward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Desc);
      }
      if (MilestoneReward.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MilestoneReward);
      }
      if (RequireParam.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RequireParam);
      }
      if (RequireType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RequireType);
      }
      if (Sort != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sort);
      }
      if (TaskReward.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TaskReward);
      }
      if (Diff != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Diff);
      }
      if (IsGold != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsGold);
      }
      if (EventExchange.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(EventExchange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Desc);
      }
      if (MilestoneReward.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MilestoneReward);
      }
      if (RequireParam.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RequireParam);
      }
      if (RequireType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RequireType);
      }
      if (Sort != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sort);
      }
      if (TaskReward.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TaskReward);
      }
      if (Diff != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Diff);
      }
      if (IsGold != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsGold);
      }
      if (EventExchange.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(EventExchange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (Diff != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diff);
      }
      if (EventExchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventExchange);
      }
      if (IsGold != false) {
        size += 1 + 1;
      }
      if (MilestoneReward.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MilestoneReward);
      }
      if (RequireParam.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequireParam);
      }
      if (RequireType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequireType);
      }
      if (Sort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sort);
      }
      if (TaskReward.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskReward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyEventTask other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.Diff != 0) {
        Diff = other.Diff;
      }
      if (other.EventExchange.Length != 0) {
        EventExchange = other.EventExchange;
      }
      if (other.IsGold != false) {
        IsGold = other.IsGold;
      }
      if (other.MilestoneReward.Length != 0) {
        MilestoneReward = other.MilestoneReward;
      }
      if (other.RequireParam.Length != 0) {
        RequireParam = other.RequireParam;
      }
      if (other.RequireType != 0) {
        RequireType = other.RequireType;
      }
      if (other.Sort != 0) {
        Sort = other.Sort;
      }
      if (other.TaskReward.Length != 0) {
        TaskReward = other.TaskReward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Desc = input.ReadString();
            break;
          }
          case 26: {
            MilestoneReward = input.ReadString();
            break;
          }
          case 34: {
            RequireParam = input.ReadString();
            break;
          }
          case 40: {
            RequireType = input.ReadInt32();
            break;
          }
          case 48: {
            Sort = input.ReadInt32();
            break;
          }
          case 58: {
            TaskReward = input.ReadString();
            break;
          }
          case 64: {
            Diff = input.ReadInt32();
            break;
          }
          case 72: {
            IsGold = input.ReadBool();
            break;
          }
          case 82: {
            EventExchange = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Desc = input.ReadString();
            break;
          }
          case 26: {
            MilestoneReward = input.ReadString();
            break;
          }
          case 34: {
            RequireParam = input.ReadString();
            break;
          }
          case 40: {
            RequireType = input.ReadInt32();
            break;
          }
          case 48: {
            Sort = input.ReadInt32();
            break;
          }
          case 58: {
            TaskReward = input.ReadString();
            break;
          }
          case 64: {
            Diff = input.ReadInt32();
            break;
          }
          case 72: {
            IsGold = input.ReadBool();
            break;
          }
          case 82: {
            EventExchange = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DailyEventTaskMapABValue : pb::IMessage<DailyEventTaskMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DailyEventTaskMapABValue> _parser = new pb::MessageParser<DailyEventTaskMapABValue>(() => new DailyEventTaskMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyEventTaskMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.DailyEventTaskConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventTaskMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventTaskMapABValue(DailyEventTaskMapABValue other) : this() {
      dailyEventTaskMap_ = other.dailyEventTaskMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventTaskMapABValue Clone() {
      return new DailyEventTaskMapABValue(this);
    }

    /// <summary>Field number for the "DailyEventTaskMap" field.</summary>
    public const int DailyEventTaskMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.DailyEventTask>.Codec _map_dailyEventTaskMap_codec
        = new pbc::MapField<int, global::fat.rawdata.DailyEventTask>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.DailyEventTask.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.DailyEventTask> dailyEventTaskMap_ = new pbc::MapField<int, global::fat.rawdata.DailyEventTask>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.DailyEventTask> DailyEventTaskMap {
      get { return dailyEventTaskMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyEventTaskMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyEventTaskMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!DailyEventTaskMap.Equals(other.DailyEventTaskMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= DailyEventTaskMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dailyEventTaskMap_.WriteTo(output, _map_dailyEventTaskMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dailyEventTaskMap_.WriteTo(ref output, _map_dailyEventTaskMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dailyEventTaskMap_.CalculateSize(_map_dailyEventTaskMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyEventTaskMapABValue other) {
      if (other == null) {
        return;
      }
      dailyEventTaskMap_.Add(other.dailyEventTaskMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dailyEventTaskMap_.AddEntriesFrom(input, _map_dailyEventTaskMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dailyEventTaskMap_.AddEntriesFrom(ref input, _map_dailyEventTaskMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DailyEventTaskConf : pb::IMessage<DailyEventTaskConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DailyEventTaskConf> _parser = new pb::MessageParser<DailyEventTaskConf>(() => new DailyEventTaskConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyEventTaskConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.DailyEventTaskConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventTaskConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventTaskConf(DailyEventTaskConf other) : this() {
      dailyEventTaskMap_ = other.dailyEventTaskMap_.Clone();
      dailyEventTaskMapAB_ = other.dailyEventTaskMapAB_.Clone();
      dailyEventTaskMapABPatch_ = other.dailyEventTaskMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventTaskConf Clone() {
      return new DailyEventTaskConf(this);
    }

    /// <summary>Field number for the "DailyEventTaskMap" field.</summary>
    public const int DailyEventTaskMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.DailyEventTask>.Codec _map_dailyEventTaskMap_codec
        = new pbc::MapField<int, global::fat.rawdata.DailyEventTask>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.DailyEventTask.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.DailyEventTask> dailyEventTaskMap_ = new pbc::MapField<int, global::fat.rawdata.DailyEventTask>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.DailyEventTask> DailyEventTaskMap {
      get { return dailyEventTaskMap_; }
    }

    /// <summary>Field number for the "DailyEventTaskMapAB" field.</summary>
    public const int DailyEventTaskMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.DailyEventTaskMapABValue>.Codec _map_dailyEventTaskMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.DailyEventTaskMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.DailyEventTaskMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.DailyEventTaskMapABValue> dailyEventTaskMapAB_ = new pbc::MapField<string, global::fat.rawdata.DailyEventTaskMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.DailyEventTaskMapABValue> DailyEventTaskMapAB {
      get { return dailyEventTaskMapAB_; }
    }

    /// <summary>Field number for the "DailyEventTaskMapABPatch" field.</summary>
    public const int DailyEventTaskMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.DailyEventTaskMapABValue>.Codec _map_dailyEventTaskMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.DailyEventTaskMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.DailyEventTaskMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.DailyEventTaskMapABValue> dailyEventTaskMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.DailyEventTaskMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.DailyEventTaskMapABValue> DailyEventTaskMapABPatch {
      get { return dailyEventTaskMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyEventTaskConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyEventTaskConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!DailyEventTaskMap.Equals(other.DailyEventTaskMap)) return false;
      if (!DailyEventTaskMapAB.Equals(other.DailyEventTaskMapAB)) return false;
      if (!DailyEventTaskMapABPatch.Equals(other.DailyEventTaskMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= DailyEventTaskMap.GetHashCode();
      hash ^= DailyEventTaskMapAB.GetHashCode();
      hash ^= DailyEventTaskMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dailyEventTaskMap_.WriteTo(output, _map_dailyEventTaskMap_codec);
      dailyEventTaskMapAB_.WriteTo(output, _map_dailyEventTaskMapAB_codec);
      dailyEventTaskMapABPatch_.WriteTo(output, _map_dailyEventTaskMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dailyEventTaskMap_.WriteTo(ref output, _map_dailyEventTaskMap_codec);
      dailyEventTaskMapAB_.WriteTo(ref output, _map_dailyEventTaskMapAB_codec);
      dailyEventTaskMapABPatch_.WriteTo(ref output, _map_dailyEventTaskMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dailyEventTaskMap_.CalculateSize(_map_dailyEventTaskMap_codec);
      size += dailyEventTaskMapAB_.CalculateSize(_map_dailyEventTaskMapAB_codec);
      size += dailyEventTaskMapABPatch_.CalculateSize(_map_dailyEventTaskMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyEventTaskConf other) {
      if (other == null) {
        return;
      }
      dailyEventTaskMap_.Add(other.dailyEventTaskMap_);
      dailyEventTaskMapAB_.Add(other.dailyEventTaskMapAB_);
      dailyEventTaskMapABPatch_.Add(other.dailyEventTaskMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dailyEventTaskMap_.AddEntriesFrom(input, _map_dailyEventTaskMap_codec);
            break;
          }
          case 18: {
            dailyEventTaskMapAB_.AddEntriesFrom(input, _map_dailyEventTaskMapAB_codec);
            break;
          }
          case 26: {
            dailyEventTaskMapABPatch_.AddEntriesFrom(input, _map_dailyEventTaskMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dailyEventTaskMap_.AddEntriesFrom(ref input, _map_dailyEventTaskMap_codec);
            break;
          }
          case 18: {
            dailyEventTaskMapAB_.AddEntriesFrom(ref input, _map_dailyEventTaskMapAB_codec);
            break;
          }
          case 26: {
            dailyEventTaskMapABPatch_.AddEntriesFrom(ref input, _map_dailyEventTaskMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
