// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/GlobalConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/GlobalConf.proto</summary>
  public static partial class GlobalConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/GlobalConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GlobalConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhyYXdkYXRhL0dsb2JhbENvbmYucHJvdG8SB3Jhd2RhdGEiokMKBkdsb2Jh",
            "bBIaChJBY3Rpdml0eUNvbnN1bWVOdW0YASABKAUSFgoOQWN0aXZpdHlNYXhO",
            "dW0YAiABKAUSHQoVQW5udWFsU3VtbWFyeURlYWRsaW5lGAMgASgDEhoKEkJw",
            "R3JvdXBSYW5raW5nSGlkZRgEIAEoCBIbChNCcFJhbmtpbmdGcmllbmRIaWRl",
            "GAUgASgIEhUKDUJwUmFua2luZ0hpZGUYBiABKAgSGgoSQnBSYW5raW5nV29y",
            "bGRIaWRlGAcgASgIEhYKDkJwaWNvbm92ZXJ0aXAxGAggASgFEhYKDkJwaWNv",
            "bm92ZXJ0aXAyGAkgASgFEh4KFUNhcmRTaG9wUmVkUmVmcmVzaFV0YxiBAiAB",
            "KAUSGgoSQ2xpZW50SHR0cENvbnRpbnVlGAogASgIEhkKEUNsaWVudEh0dHBU",
            "aW1lb3V0GAsgASgFEhgKD0Ryb3BQcm9iYWJpbGl0eRiOAiABKAkSGwoTRXZl",
            "bnRSb2xlU2hvd0Ftb3VudBgMIAEoBRIfChdFdmVudFJvbGVTaG93TGltaXRh",
            "dGlvbhgNIAEoBRIaChJGQkNvbW11bml0eVdlYnNpdGUYDiABKAkSGAoQR3Jv",
            "dXBSYW5raW5nSGlkZRgPIAEoCBIeChZHdWlsZEFubm91bmNlbWVudExpbWl0",
            "GBAgASgFEhQKDEd1aWxkQXBwbHlDZBgRIAEoBRIbChNHdWlsZEFwcGx5RXhw",
            "aXJlRGF5GBIgASgFEhcKD0d1aWxkQXBwbHlMaW1pdBgTIAEoBRIYChBHdWls",
            "ZENyZWF0ZVByaWNlGBQgASgFEhMKC0d1aWxkSm9pbkNkGBUgASgFEh4KFkd1",
            "aWxkS2lja291dExpbWl0YXRpb24YFiABKAUSIwobR3VpbGRMZWFkZXJJbmFj",
            "dGlvbkR1cmF0aW9uGBcgASgFEhQKDEd1aWxkTGlzdE51bRgYIAEoBRIWCg5H",
            "dWlsZE1lbWJlck51bRgZIAEoBRIcChRHdWlsZE1vZGlmeU5hbWVQcmljZRga",
            "IAEoBRIcChRHdWlsZE5hbWVJbnZhbGlkQ2hhchgbIAMoCRIXCg9HdWlsZE5h",
            "bWVMZW5NYXgYHCABKAUSFwoPR3VpbGROYW1lTGVuTWluGB0gASgFEhwKFEd1",
            "aWxkUmVmcmVzaEludGVydmFsGB4gASgDEhMKC0hvYmJpdHNOYW1lGB8gASgF",
            "EhQKDEhvYmJpdHNOYW1lMhggIAEoBRIcChRMaWdodExvYWRpbmdJbnRlcnZh",
            "bBghIAEoBRIVCgxMb2FkaW5nSW1hZ2UYjAIgAygJEhsKE01pbmlHYW1lU2hh",
            "cmVJbWdVcmwYIiABKAkSFQoNTm9OZXRRdWl0VGltZRgjIAEoBRIeChZOb3Rp",
            "Y2VGZXRjaEludGVydmFsU2VjGCQgASgFEiMKG05vdGljZVNob3dJbnRlcnZh",
            "bE1pbk1heFNlYxglIAMoBRIYChBOb3RpY2VUaW1lb3V0U2VjGCYgASgFEiUK",
            "HE5vdGlmaWNhdGlvbkFwcGxpY2F0aW9uTGV2ZWwYigIgASgFEh0KFE5vdGlm",
            "aWNhdGlvblBvcExpbWl0GIkCIAEoBRIYChBQYWNrZXREZWxhdGVEYXlzGCcg",
            "ASgFEhIKClBpb25lZXJJZHgYKCABKAUSFQoNUHJpdmFjeVBvbGljeRgpIAEo",
            "CRIfChdSYW5raW5nQW5ub3VuY2VEdXJhdGlvbhgqIAEoBRIXCg9SYW5raW5n",
            "QXJlYUhpZGUYKyABKAgSGwoTUmFua2luZ0FyZWFIaWRlSW5mbxgsIAEoBRIh",
            "ChlSYW5raW5nQXJlYVNob3dMaW1pdGF0aW9uGC0gASgFEhMKC1JhbmtpbmdI",
            "aWRlGC4gASgIEiAKGFJhbmtpbmdMZXZlbEFyZWFIaWRlSW5mbxgvIAEoBRIl",
            "Ch1SYW5raW5nTGV2ZWxBcmVhU2hvd0xpbWl0YWlvbhgwIAEoBRIcChRSYW5r",
            "aW5nTGV2ZWxIaWRlSW5mbxgxIAEoBRIhChlSYW5raW5nTGV2ZWxTaG93TGlt",
            "aXRhaW9uGDIgASgFEiEKGVJhbmtpbmdMZXZlbFdvcmxkSGlkZUluZm8YMyAB",
            "KAUSJgoeUmFua2luZ0xldmVsV29ybGRTaG93TGltaXRhaW9uGDQgASgFEhgK",
            "EFJhbmtpbmdXb3JsZEhpZGUYNSABKAgSHAoUUmFua2luZ1dvcmxkSGlkZUlu",
            "Zm8YNiABKAUSIAoYUmFua2luZ1dvcmxkTm9ybWFsQXZhdGFyGDcgAygFEiEK",
            "GVJhbmtpbmdXb3JsZFNob3dMaW1pdGFpb24YOCABKAUSHQoVUmFua2luZ1dv",
            "cmxkVG9wQXZhdGFyGDkgAygFEiAKF1JldGVudGlvblBhY2tSZWZyZXNoVXRj",
            "GOkBIAEoBRIXCg9TaG9wUmVmcmVzaFRpbWUYOiADKAUSFQoNU2lnbkNvaW5Q",
            "cml6ZRg7IAEoBRIcChRTaWduRW5lcmd5TGltaXRQcml6ZRg8IAEoBRIWCg5U",
            "ZXJtc09mU2VydmljZRg9IAEoCRIUCgxUcmFja1NwZWVkdXAYPiABKAISGwoT",
            "VW5sb2NrRXZlbnRSb2xlU2hvdxg/IAEoBRIXCg9Vc2VyQXZhdGFyQ291bnQY",
            "QCABKAUSFAoMVXNlclR6T2Zmc2V0GEEgASgFEiIKGldlY2hhdElPU0Rpc2Fi",
            "bGVQYXlWZXJzaW9uGEIgASgJEg0KBVlEU2VxGEMgAygFEkoKFWFiSW5mb0F0",
            "dHJpYnV0ZURpdmlkZRiGAiADKAsyKi5yYXdkYXRhLkdsb2JhbC5BYkluZm9B",
            "dHRyaWJ1dGVEaXZpZGVFbnRyeRIYChBhY3Rpdml0eUNvb2xEb3duGEQgASgF",
            "EhMKC2FkSWRBbmRyb2lkGEUgAygJEhwKFGFkSWRBbmRyb2lkQWRtb2JBc2lh",
            "GEYgAygJEg8KB2FkSWRJb3MYRyADKAkSGAoQYWRJZElvc0FkbW9iQXNpYRhI",
            "IAMoCRIRCglhbmNDZFRpbWUYSSABKAUSGAoQYW5jTmlnaHRTdG9wVGltZRhK",
            "IAMoBRIXCg9hbmNTZXNzaW9uTGltaXQYSyABKAUSHgoVYXV0b0ZpbmdlclRy",
            "aWdnZXJUaW1lGOABIAEoBRIVCg1iaW5kU29jaWFsR2VtGEwgASgFEhUKDWJv",
            "YXJkQ2xlYXJHZW0YTSABKAUSEwoLYm9hcmRDb2xvcnMYTiADKAkSEwoKYm9v",
            "c3RMZXZlbBjRASABKAUSFQoMYm9vc3RMZXZlbDR4GP8BIAEoBRISCglib29z",
            "dFJhdGUY0gEgASgFEhQKC2Jvb3N0UmF0ZTR4GIACIAEoBRIQCghib3RDb2xv",
            "chhPIAMoBRIZChFib3RGaXJzdFJhbmtMZXZlbBhQIAEoBRIaChFib3hQb3Nz",
            "aWJsZU9mZnNldBjoASABKAUSFgoNYnBUYXNrUmVmcmVzaBiNAiABKAUSEwoK",
            "YnViYmxlQWRJZBjCASABKAUSNQoLYnViYmxlQm9udXMYUSADKAsyIC5yYXdk",
            "YXRhLkdsb2JhbC5CdWJibGVCb251c0VudHJ5EhcKD2J1YmJsZUJvbnVzUHJv",
            "YhhSIAEoBRIWCg5idWJibGVEZWFkSXRlbRhTIAEoBRIYChBidWJibGVEZWFk",
            "V2VpZ2h0GFQgAygJEhYKDWJ1YmJsZUV4cGlyZWQYwAEgASgFEhkKEWJ1YmJs",
            "ZUd1aWRlSXRlbUlkGFUgASgFEhwKFGJ1YmJsZUxldmVsRGlmZlBhcmFtGFYg",
            "AygCEhUKDGJ1YmJsZU1heE51bRjBASABKAUSGgoSYnVkZHlBcHBseUxpbWl0",
            "TnVtGFcgASgFEhsKE2J1ZGR5QXBwbHlMaW1pdFRpbWUYWCABKAUSHQoVYnVk",
            "ZHlFbmVyZ3lEYWlseUxpbWl0GFkgASgFEhsKE2J1ZGR5RW5lcmd5RWFjaFNl",
            "bnQYWiABKAUSHQoVYnVkZHlWaXNpdEV4dHJhUmV3YXJkGFsgASgFEhcKD2J1",
            "ZGR5VmlzaXRMaW1pdBhcIAEoBRIYChBidWRkeVZpc2l0UmV3YXJkGF0gAygJ",
            "EhsKEmNhcmRUcmFkZUdyb3VwTGluaxjwASABKAkSGAoQZGFpbHlPcmRlclJl",
            "d2FyZBheIAEoBRI5Cg1kYWlseVRhc2tOdW1zGF8gAygLMiIucmF3ZGF0YS5H",
            "bG9iYWwuRGFpbHlUYXNrTnVtc0VudHJ5EhUKDGRlUmVmcmVzaFV0Yxi8ASAB",
            "KAUSGgoSZGVjb1Nob3BSZWZyZXNoR2VtGGAgASgFEh8KF2RlY29TaG9wUmVm",
            "cmVzaEludGVydmFsGGEgASgFEhMKC2RlZmF1bHRIb21lGGIgAygFEhcKD2Rl",
            "ZmF1bHRSb2xlUGFydBhjIAMoBRIaChFkZW1SZWZyZXNoV2Vla2RheRi9ASAB",
            "KAUSHAoUZGV0ZWN0aXZlVW5sb2NrTGV2ZWwYZCABKAUSFwoOZGlmZkFwaVRp",
            "bWVvdXQYhwIgASgFEhQKC2V4aXROZXdVc2VyGNcBIAEoBRIUCgxleWVCYXNl",
            "Q29sb3IYZSABKAkSGwoSZmlzaEJvYXJkUmVwZWF0TnVtGIQCIAEoBRIYChBm",
            "bG9vckRlY29EaXNwbGF5GGYgASgJEj4KD2ZyZWVCdWJibGVDb3VudBjTASAD",
            "KAsyJC5yYXdkYXRhLkdsb2JhbC5GcmVlQnViYmxlQ291bnRFbnRyeRIbChNm",
            "cmVlRW5lcmd5Q2xhaW1Db3N0GGcgAygFEhoKEmZyZWVFbmVyZ3lDbGFpbU51",
            "bRhoIAMoBRJFChNmcmVlRW5lcmd5Q2xhaW1UaW1lGGkgAygLMigucmF3ZGF0",
            "YS5HbG9iYWwuRnJlZUVuZXJneUNsYWltVGltZUVudHJ5EksKFmZyZWVFbmVy",
            "Z3lOb3RpZmljYXRpb24YaiADKAsyKy5yYXdkYXRhLkdsb2JhbC5GcmVlRW5l",
            "cmd5Tm90aWZpY2F0aW9uRW50cnkSGQoRZnJlZVJlY2hhcmdlVGltZXMYayAB",
            "KAUSFAoMZnJlZVJvbGVQYXJ0GGwgAygFEhgKEGZyZWVTcGVlZFVwVGltZXMY",
            "bSABKAUSEwoLZnJpZW5kTGltaXQYbiABKAUSHwoXZnJpZW5kT3BpbmlvbkZy",
            "aWVuZHNoaXAYbyABKAUSHQoUZnJvemVuSXRlbURlYWRXZWlnaHQYkAIgAygJ",
            "EhgKD2dhbGxlcnlGaW5nZXJMdhjDASABKAUSGwoTZ2lmdEF1dG9Sb2xsaW5n",
            "VGltZRhwIAEoBRIbChJnaWZ0Qm94U3RvcFNoYWtpbmcYxQEgASgFEhQKC2dp",
            "dmVDYXJkTnVtGPEBIAEoBRIbChJnaXZlQ2FyZFJlZnJlc2hVdGMY8gEgASgF",
            "EhIKCmd1aWRlTXVzaWMYcSABKAkSFQoNaGFpckJhc2VDb2xvchhyIAEoCRIU",
            "Cgxpbml0SWRsZUNvaW4YcyABKAkSGAoQaW52ZW50b3J5SW5pdENhcBh0IAEo",
            "BRIiChppbnZlbnRvcnlQcm9kdWNlckV4dHJhR3JpZBh1IAEoBRIaChJpbnZp",
            "dGVHZW1SZXdhcmROdW0YdiABKAUSGwoTaW52aXRlZEdlbVJld2FyZE51bRh3",
            "IAEoBRIWCg1pc0FuZEZhY2Vib29rGPUBIAEoCBIUCgtpc0FuZEdvb2dsZRj2",
            "ASABKAgSDgoFaXNGYXEY7wEgASgIEhUKDWlzSW5BcHBSZXZpZXcYeCABKAgS",
            "EwoKaXNJb3NBcHBsZRj3ASABKAgSFgoNaXNJb3NGYWNlYm9vaxj4ASABKAgS",
            "FAoLaXNJb3NHb29nbGUY+QEgASgIEhcKDmlzTmV3T3JkZXJWaWV3GIICIAEo",
            "CBIgChdpc09yZGVyQXBpT25seVdoaXRlbGlzdBjiASABKAgSHAoUaXNsYW5k",
            "Q2hhbmdlSXRlbUdvbGQYeSADKAkSPAoOaXRlbVNjYWxlVGVzdEIY1gEgAygL",
            "MiMucmF3ZGF0YS5HbG9iYWwuSXRlbVNjYWxlVGVzdEJFbnRyeRISCgpsdWNr",
            "eUJveENEGHogAygFEhUKDWx1Y2t5Qm94TGltaXQYeyABKAUSEwoLbHVja3lC",
            "b3hOdW0YfCABKAUSGgoSbHVja3lXaGVlbEFkc0NvdW50GH0gASgFEhsKE2x1",
            "Y2t5V2hlZWxGcmVlQ291bnQYfiABKAUSGQoRbHVja3lXaGVlbEdlbUNvc3QY",
            "fyABKAUSGwoSbHVja3lXaGVlbEdlbUNvdW50GIABIAEoBRIZChBsdlBvcHVw",
            "Q2FyZEFsYnVtGNkBIAEoBRIbChJsdlBvcHVwQ2xvc2VEaWFsb2cY3wEgASgF",
            "EhIKCWx2UG9wdXBERRjaASABKAUSGgoRbHZQb3B1cE5ld1Nlc3Npb24Y2wEg",
            "ASgFEhwKE2x2UG9wdXBOZXdTZXNzaW9uSWQY3AEgASgFEhYKDW1haWxTeXN0",
            "ZW1NYXgYgQEgASgFEhkKEG1hcEJ1aWxkU3RhcnRBaW0YygEgASgFEhgKD21h",
            "cEJ1aWxkU3RvcEFpbRjIASABKAUSFgoNbWFya2V0UmVmcmVzaBiCASABKAUS",
            "GQoQbWFya2V0UmVmcmVzaE51bRiDASABKAUSFwoObWFya2V0VXRjQ2xvY2sY",
            "hAEgASgFEicKHm1heEZhbWVMZXZlbFRvVmlld0FjdGl2aXR5RmVlZBiFASAB",
            "KAUSHQoUbWF4UHVsbEZyaWVuZEluZm9OdW0Y8wEgASgFEhMKCm1heFRvYXN0",
            "SWQYkQIgASgFEhUKDG1heFRvb2xDb3VudBjJASABKAUSEwoKbWVyZ2VCb251",
            "cxiGASABKAUSGAoPbWVyZ2VCb251c0xldmVsGIcBIAEoBRIbChJtZXJnZUVu",
            "ZXJneUF1dG9NYXgYiAEgASgFEhsKEm1lcmdlRW5lcmd5QXV0b1NlYxiJASAB",
            "KAUSGQoQbWVyZ2VFbmVyZ3lQcmljZRiKASADKAUSHwoWbWVyZ2VSZW1pbmRU",
            "cmlnZ2VyVGltZRjhASABKAUSHgoVbWVyZ2VUdXRvcmlhbEludGVydmFsGMYB",
            "IAEoBRIaChFtZXJnZVR1dG9yaWFsU3RvcBjHASABKAUSFwoObW91dGhCYXNl",
            "Q29sb3IYiwEgASgJEh4KFW15c3RlcnlTdG9yZUN1c3RvbU51bRiMASABKAUS",
            "HwoWbXlzdGVyeVN0b3JlQ3VzdG9tUmF0ZRiNASABKAUSIQoYbXlzdGVyeVN0",
            "b3JlUmVmcmVzaFByaWNlGI4BIAEoBRIgChdteXN0ZXJ5U3RvcmVSZWZyZXNo",
            "VGltZRiPASADKAUSEAoHbmFtZU1heBiQASABKAUSEAoHbmFtZU1pbhiRASAB",
            "KAUSIwoabmV3VXNlckdyYW5kUHJpemVJbnZpdGVOdW0YkgEgASgFEk4KF25l",
            "d1VzZXJHcmFuZFByaXplUmV3YXJkGJMBIAMoCzIsLnJhd2RhdGEuR2xvYmFs",
            "Lk5ld1VzZXJHcmFuZFByaXplUmV3YXJkRW50cnkSHwoWbmV3VXNlckludml0",
            "ZWVNYXhMZXZlbBiUASABKAUSTgoXbmV3VXNlclJld2FyZEZvckludml0ZWUY",
            "lQEgAygLMiwucmF3ZGF0YS5HbG9iYWwuTmV3VXNlclJld2FyZEZvckludml0",
            "ZWVFbnRyeRJOChduZXdVc2VyUmV3YXJkRm9ySW52aXRvchiWASADKAsyLC5y",
            "YXdkYXRhLkdsb2JhbC5OZXdVc2VyUmV3YXJkRm9ySW52aXRvckVudHJ5EhsK",
            "Em5ld1VzZXJSZXdhcmRMZXZlbBiXASABKAUSFgoNbm9ybWFsVG9hc3RJZBiS",
            "AiABKAUSGgoRbm90aWNlQ29tYmFja1RpbWUY0AEgASgFEh0KFG5vdGljZUV2",
            "ZW50VmFsaWRUaW1lGIgCIAEoBRIeChVub3RpZmlQb3B1cEV2ZW50VGhlbWUY",
            "3QEgASgFEh4KFW5vdGlmaVBvcHVwU2h1dGRvd25MdhjeASABKAUSIAoXbm90",
            "aWZpY2F0aW9uRW5lcmd5Qm9udXMYmAEgAygFEh4KFW9sZFVzZXJMZXR0ZXJE",
            "dXJhdGlvbhiZASABKAUSHQoUb3JkZXJBcGlMaXZlb3BzR3JhZGUY/AEgASgF",
            "EhgKD29yZGVyQXBpUGFzdE51bRj7ASABKAUSFQoMb3JkZXJDdHJsTnVtGOoB",
            "IAEoBRIZChBvcmRlckN0cmxUb29IaWdoGOsBIAEoBRIfChZvcmRlckN0cmxU",
            "b29IaWdoVGFyZ2V0GO0BIAEoBRIYCg9vcmRlckN0cmxUb29Mb3cY7AEgASgF",
            "Eh4KFW9yZGVyQ3RybFRvb0xvd1RhcmdldBjuASABKAUSGwoSb3JkZXJFbnRl",
            "ckFwaURlbGF5GOMBIAEoBRIYCg9vcmRlckVudGVyRGVsYXkYxAEgASgFEhgK",
            "D29yZGVyTGltaXRDb3VudBiaASABKAUSFwoOcGFja0FwaVRpbWVvdXQY/QEg",
            "ASgFEg8KBnBldE5QQxibASABKAUSEwoKcG9wdXBMaW1pdBjNASABKAUSFQoM",
            "cG9wdXBSZWZyZXNoGM4BIAEoBRIeChVwb3N0Q2FyZElQYXJhbUlzbGFuZDEY",
            "nAEgAygCEhYKDXBvc3RDYXJkUGFyYW0YnQEgAygCEiEKGHBvc3RjYXJkR2lm",
            "dE90aGVyc1Jld2FyZBieASADKAkSFwoOcG9zdGNhcmRNaW5OdW0YnwEgASgF",
            "Eh8KFnB1bGxGcmllbmRJbmZvV2FpdFRpbWUY9AEgASgFEhMKCnB1c2hTaG9w",
            "Q0QYoAEgAygFEhYKDXB1c2hTaG9wQ0RJY2UYoQEgAygFEhkKEHB1c2hTaG9w",
            "RHVyYXRpb24YogEgASgFEjwKDnB1c2hTaG9wTWF4TnVtGKMBIAMoCzIjLnJh",
            "d2RhdGEuR2xvYmFsLlB1c2hTaG9wTWF4TnVtRW50cnkSGQoQcHVzaFNob3BQ",
            "b3BUaW1lcxikASADKAUSHQoUcmFua0JvdE9yZGVyTGltaXROdW0YpQEgASgF",
            "EhcKDnJhbmtDb2luc1BhcmFtGKYBIAMoBRIaChFyYW5rQ29pbnNQYXJhbU5l",
            "dxinASADKAISFgoNcmFua01lbWJlck51bRioASABKAUSFQoMcmFua09yZGVy",
            "TnVtGKkBIAEoBRIZChByYW5raW5nV2hpdGVsaXN0GIUCIAMoCRIZChByYXRl",
            "QnVpbGRpbmdCYXNlGM8BIAMoBRIXCg5yYXRlUmVkaXJlY3RMdhjMASABKAUS",
            "FQoMcmF0ZVRhc2tPcGVuGKoBIAMoBRIaChFyZXF1aXJlVHlwZUFESW5pdBjk",
            "ASABKAUSGgoRcmVxdWlyZVR5cGVMVEluaXQY5QEgASgFEhwKE3JlcXVpcmVU",
            "eXBlVXRjQ2xvY2sY5gEgASgFEhQKC3Jlc3RhcnRUaW1lGP4BIAEoBRIdChRz",
            "ZXJ2ZXJUaW1lQ2hlY2tSYW5nZRiDAiABKAUSGwoSc2V0dGluZ0ZCRm9sbG93",
            "R2VtGKsBIAEoBRIgChdzZXR0aW5nSGVscHNoaWZ0V2Vic2l0ZRisASABKAkS",
            "FgoNc2tpbkJhc2VDb2xvchitASABKAkSEwoKc3BkR2VtVGlwcxiPAiABKAUS",
            "FAoLc3BkVXBEaXZpZGUYvgEgAygFEhMKCnNwZFVwUGFyYW0YvwEgAygFEiEK",
            "GHNwZWNpYWxTdHVkZW50Q2RJbnRlcnZhbBiuASABKAUSIQoYc3R1ZGVudEFu",
            "Y2hvclBvaW50QW1vdW50GK8BIAMoBRIaChFzdHVkZW50R3JvdXBUb3RhbBiw",
            "ASADKAUSHAoTc3R1ZGVudFNob3dJbnRlcnZhbBixASADKAUSGQoQc3VuUmFu",
            "a01lbWJlck51bRiyASABKAUSGwoSc3VuUmFua1N0b3BOZXdUaW1lGLMBIAEo",
            "BRIUCgtzdW5SYW5rVGltZRi0ASABKAUSFQoMc3VydmV5QWRzUG9zGLUBIAMo",
            "BRI6Cg10YXBTb3VyY2VUaXBzGOcBIAMoCzIiLnJhd2RhdGEuR2xvYmFsLlRh",
            "cFNvdXJjZVRpcHNFbnRyeRIcChN0YXNrRGFpbHlGaW5hbENoZXN0GLYBIAEo",
            "CRIaChF0YXNrRGFpbHlIYXJkUmF0ZRi3ASABKAUSGgoRdGFza0RhaWx5VG90",
            "YWxOdW0YuAEgASgFEhUKDHRhc2tQbG90VGltZRi5ASADKAUSHAoTdXBkYXRl",
            "UmVtaW5kUG9wdXBJZBiLAiABKAUSGQoQdXNlclJlY29yZE1heERheRjUASAB",
            "KAUSHQoUdXNlclJlY29yZFJlZnJlc2hVdGMY1QEgASgFEhoKEXVzZXJSZWNv",
            "cmRXZWVrZGF5GNgBIAEoBRIQCgd2ZXJzaW9uGLoBIAEoBRIZChB3YWxsUGFw",
            "ZXJEaXNwbGF5GLsBIAEoCRIXCg53ZWJzaG9wQWRkcmVzcxiTAiABKAkSGwoS",
            "d2Vic2hvcFNob3dQYXltZW50GJQCIAEoBRo8ChpBYkluZm9BdHRyaWJ1dGVE",
            "aXZpZGVFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAk6AjgBGjIK",
            "EEJ1YmJsZUJvbnVzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgF",
            "OgI4ARo0ChJEYWlseVRhc2tOdW1zRW50cnkSCwoDa2V5GAEgASgFEg0KBXZh",
            "bHVlGAIgASgFOgI4ARo2ChRGcmVlQnViYmxlQ291bnRFbnRyeRILCgNrZXkY",
            "ASABKAUSDQoFdmFsdWUYAiABKAU6AjgBGjoKGEZyZWVFbmVyZ3lDbGFpbVRp",
            "bWVFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBGj0KG0Zy",
            "ZWVFbmVyZ3lOb3RpZmljYXRpb25FbnRyeRILCgNrZXkYASABKAUSDQoFdmFs",
            "dWUYAiABKAU6AjgBGjUKE0l0ZW1TY2FsZVRlc3RCRW50cnkSCwoDa2V5GAEg",
            "ASgFEg0KBXZhbHVlGAIgASgFOgI4ARo+ChxOZXdVc2VyR3JhbmRQcml6ZVJl",
            "d2FyZEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEaPgoc",
            "TmV3VXNlclJld2FyZEZvckludml0ZWVFbnRyeRILCgNrZXkYASABKAUSDQoF",
            "dmFsdWUYAiABKAU6AjgBGj4KHE5ld1VzZXJSZXdhcmRGb3JJbnZpdG9yRW50",
            "cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ARo1ChNQdXNoU2hv",
            "cE1heE51bUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEa",
            "NAoSVGFwU291cmNlVGlwc0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgC",
            "IAEoBToCOAEiOgoSR2xvYmFsU2xpY2VBQlZhbHVlEiQKC0dsb2JhbFNsaWNl",
            "GAEgAygLMg8ucmF3ZGF0YS5HbG9iYWwi5QIKCkdsb2JhbENvbmYSJAoLR2xv",
            "YmFsU2xpY2UYASADKAsyDy5yYXdkYXRhLkdsb2JhbBI9Cg1HbG9iYWxTbGlj",
            "ZUFCGAIgAygLMiYucmF3ZGF0YS5HbG9iYWxDb25mLkdsb2JhbFNsaWNlQUJF",
            "bnRyeRJHChJHbG9iYWxTbGljZUFCUGF0Y2gYAyADKAsyKy5yYXdkYXRhLkds",
            "b2JhbENvbmYuR2xvYmFsU2xpY2VBQlBhdGNoRW50cnkaUQoSR2xvYmFsU2xp",
            "Y2VBQkVudHJ5EgsKA2tleRgBIAEoCRIqCgV2YWx1ZRgCIAEoCzIbLnJhd2Rh",
            "dGEuR2xvYmFsU2xpY2VBQlZhbHVlOgI4ARpWChdHbG9iYWxTbGljZUFCUGF0",
            "Y2hFbnRyeRILCgNrZXkYASABKAkSKgoFdmFsdWUYAiABKAsyGy5yYXdkYXRh",
            "Lkdsb2JhbFNsaWNlQUJWYWx1ZToCOAFCPVotZ2l0bGFiLmZ1bnBsdXMuaW8v",
            "ZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdkYXRhqgILZmF0LnJhd2RhdGFiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.Global), global::fat.rawdata.Global.Parser, new[]{ "ActivityConsumeNum", "ActivityMaxNum", "AnnualSummaryDeadline", "BpGroupRankingHide", "BpRankingFriendHide", "BpRankingHide", "BpRankingWorldHide", "Bpiconovertip1", "Bpiconovertip2", "CardShopRedRefreshUtc", "ClientHttpContinue", "ClientHttpTimeout", "DropProbability", "EventRoleShowAmount", "EventRoleShowLimitation", "FBCommunityWebsite", "GroupRankingHide", "GuildAnnouncementLimit", "GuildApplyCd", "GuildApplyExpireDay", "GuildApplyLimit", "GuildCreatePrice", "GuildJoinCd", "GuildKickoutLimitation", "GuildLeaderInactionDuration", "GuildListNum", "GuildMemberNum", "GuildModifyNamePrice", "GuildNameInvalidChar", "GuildNameLenMax", "GuildNameLenMin", "GuildRefreshInterval", "HobbitsName", "HobbitsName2", "LightLoadingInterval", "LoadingImage", "MiniGameShareImgUrl", "NoNetQuitTime", "NoticeFetchIntervalSec", "NoticeShowIntervalMinMaxSec", "NoticeTimeoutSec", "NotificationApplicationLevel", "NotificationPopLimit", "PacketDelateDays", "PioneerIdx", "PrivacyPolicy", "RankingAnnounceDuration", "RankingAreaHide", "RankingAreaHideInfo", "RankingAreaShowLimitation", "RankingHide", "RankingLevelAreaHideInfo", "RankingLevelAreaShowLimitaion", "RankingLevelHideInfo", "RankingLevelShowLimitaion", "RankingLevelWorldHideInfo", "RankingLevelWorldShowLimitaion", "RankingWorldHide", "RankingWorldHideInfo", "RankingWorldNormalAvatar", "RankingWorldShowLimitaion", "RankingWorldTopAvatar", "RetentionPackRefreshUtc", "ShopRefreshTime", "SignCoinPrize", "SignEnergyLimitPrize", "TermsOfService", "TrackSpeedup", "UnlockEventRoleShow", "UserAvatarCount", "UserTzOffset", "WechatIOSDisablePayVersion", "YDSeq", "AbInfoAttributeDivide", "ActivityCoolDown", "AdIdAndroid", "AdIdAndroidAdmobAsia", "AdIdIos", "AdIdIosAdmobAsia", "AncCdTime", "AncNightStopTime", "AncSessionLimit", "AutoFingerTriggerTime", "BindSocialGem", "BoardClearGem", "BoardColors", "BoostLevel", "BoostLevel4X", "BoostRate", "BoostRate4X", "BotColor", "BotFirstRankLevel", "BoxPossibleOffset", "BpTaskRefresh", "BubbleAdId", "BubbleBonus", "BubbleBonusProb", "BubbleDeadItem", "BubbleDeadWeight", "BubbleExpired", "BubbleGuideItemId", "BubbleLevelDiffParam", "BubbleMaxNum", "BuddyApplyLimitNum", "BuddyApplyLimitTime", "BuddyEnergyDailyLimit", "BuddyEnergyEachSent", "BuddyVisitExtraReward", "BuddyVisitLimit", "BuddyVisitReward", "CardTradeGroupLink", "DailyOrderReward", "DailyTaskNums", "DeRefreshUtc", "DecoShopRefreshGem", "DecoShopRefreshInterval", "DefaultHome", "DefaultRolePart", "DemRefreshWeekday", "DetectiveUnlockLevel", "DiffApiTimeout", "ExitNewUser", "EyeBaseColor", "FishBoardRepeatNum", "FloorDecoDisplay", "FreeBubbleCount", "FreeEnergyClaimCost", "FreeEnergyClaimNum", "FreeEnergyClaimTime", "FreeEnergyNotification", "FreeRechargeTimes", "FreeRolePart", "FreeSpeedUpTimes", "FriendLimit", "FriendOpinionFriendship", "FrozenItemDeadWeight", "GalleryFingerLv", "GiftAutoRollingTime", "GiftBoxStopShaking", "GiveCardNum", "GiveCardRefreshUtc", "GuideMusic", "HairBaseColor", "InitIdleCoin", "InventoryInitCap", "InventoryProducerExtraGrid", "InviteGemRewardNum", "InvitedGemRewardNum", "IsAndFacebook", "IsAndGoogle", "IsFaq", "IsInAppReview", "IsIosApple", "IsIosFacebook", "IsIosGoogle", "IsNewOrderView", "IsOrderApiOnlyWhitelist", "IslandChangeItemGold", "ItemScaleTestB", "LuckyBoxCD", "LuckyBoxLimit", "LuckyBoxNum", "LuckyWheelAdsCount", "LuckyWheelFreeCount", "LuckyWheelGemCost", "LuckyWheelGemCount", "LvPopupCardAlbum", "LvPopupCloseDialog", "LvPopupDE", "LvPopupNewSession", "LvPopupNewSessionId", "MailSystemMax", "MapBuildStartAim", "MapBuildStopAim", "MarketRefresh", "MarketRefreshNum", "MarketUtcClock", "MaxFameLevelToViewActivityFeed", "MaxPullFriendInfoNum", "MaxToastId", "MaxToolCount", "MergeBonus", "MergeBonusLevel", "MergeEnergyAutoMax", "MergeEnergyAutoSec", "MergeEnergyPrice", "MergeRemindTriggerTime", "MergeTutorialInterval", "MergeTutorialStop", "MouthBaseColor", "MysteryStoreCustomNum", "MysteryStoreCustomRate", "MysteryStoreRefreshPrice", "MysteryStoreRefreshTime", "NameMax", "NameMin", "NewUserGrandPrizeInviteNum", "NewUserGrandPrizeReward", "NewUserInviteeMaxLevel", "NewUserRewardForInvitee", "NewUserRewardForInvitor", "NewUserRewardLevel", "NormalToastId", "NoticeCombackTime", "NoticeEventValidTime", "NotifiPopupEventTheme", "NotifiPopupShutdownLv", "NotificationEnergyBonus", "OldUserLetterDuration", "OrderApiLiveopsGrade", "OrderApiPastNum", "OrderCtrlNum", "OrderCtrlTooHigh", "OrderCtrlTooHighTarget", "OrderCtrlTooLow", "OrderCtrlTooLowTarget", "OrderEnterApiDelay", "OrderEnterDelay", "OrderLimitCount", "PackApiTimeout", "PetNPC", "PopupLimit", "PopupRefresh", "PostCardIParamIsland1", "PostCardParam", "PostcardGiftOthersReward", "PostcardMinNum", "PullFriendInfoWaitTime", "PushShopCD", "PushShopCDIce", "PushShopDuration", "PushShopMaxNum", "PushShopPopTimes", "RankBotOrderLimitNum", "RankCoinsParam", "RankCoinsParamNew", "RankMemberNum", "RankOrderNum", "RankingWhitelist", "RateBuildingBase", "RateRedirectLv", "RateTaskOpen", "RequireTypeADInit", "RequireTypeLTInit", "RequireTypeUtcClock", "RestartTime", "ServerTimeCheckRange", "SettingFBFollowGem", "SettingHelpshiftWebsite", "SkinBaseColor", "SpdGemTips", "SpdUpDivide", "SpdUpParam", "SpecialStudentCdInterval", "StudentAnchorPointAmount", "StudentGroupTotal", "StudentShowInterval", "SunRankMemberNum", "SunRankStopNewTime", "SunRankTime", "SurveyAdsPos", "TapSourceTips", "TaskDailyFinalChest", "TaskDailyHardRate", "TaskDailyTotalNum", "TaskPlotTime", "UpdateRemindPopupId", "UserRecordMaxDay", "UserRecordRefreshUtc", "UserRecordWeekday", "Version", "WallPaperDisplay", "WebshopAddress", "WebshopShowPayment" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, null, null, null, null, null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.GlobalSliceABValue), global::fat.rawdata.GlobalSliceABValue.Parser, new[]{ "GlobalSlice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.GlobalConf), global::fat.rawdata.GlobalConf.Parser, new[]{ "GlobalSlice", "GlobalSliceAB", "GlobalSliceABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="Global",table="GlobalSlice",table_wrapper="GlobalConf",map="false",map_key_type="",data="GlobalConf")
  /// annotation@ab(table_ab="GlobalSliceAB",table_ab_patch="GlobalSliceABPatch",table_ab_value="GlobalSliceABValue",ab_patch="true")
  /// annotation@filter(just_server="false",just_client="false")
  /// </summary>
  public sealed partial class Global : pb::IMessage<Global>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Global> _parser = new pb::MessageParser<Global>(() => new Global());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Global> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.GlobalConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global(Global other) : this() {
      activityConsumeNum_ = other.activityConsumeNum_;
      activityMaxNum_ = other.activityMaxNum_;
      annualSummaryDeadline_ = other.annualSummaryDeadline_;
      bpGroupRankingHide_ = other.bpGroupRankingHide_;
      bpRankingFriendHide_ = other.bpRankingFriendHide_;
      bpRankingHide_ = other.bpRankingHide_;
      bpRankingWorldHide_ = other.bpRankingWorldHide_;
      bpiconovertip1_ = other.bpiconovertip1_;
      bpiconovertip2_ = other.bpiconovertip2_;
      cardShopRedRefreshUtc_ = other.cardShopRedRefreshUtc_;
      clientHttpContinue_ = other.clientHttpContinue_;
      clientHttpTimeout_ = other.clientHttpTimeout_;
      dropProbability_ = other.dropProbability_;
      eventRoleShowAmount_ = other.eventRoleShowAmount_;
      eventRoleShowLimitation_ = other.eventRoleShowLimitation_;
      fBCommunityWebsite_ = other.fBCommunityWebsite_;
      groupRankingHide_ = other.groupRankingHide_;
      guildAnnouncementLimit_ = other.guildAnnouncementLimit_;
      guildApplyCd_ = other.guildApplyCd_;
      guildApplyExpireDay_ = other.guildApplyExpireDay_;
      guildApplyLimit_ = other.guildApplyLimit_;
      guildCreatePrice_ = other.guildCreatePrice_;
      guildJoinCd_ = other.guildJoinCd_;
      guildKickoutLimitation_ = other.guildKickoutLimitation_;
      guildLeaderInactionDuration_ = other.guildLeaderInactionDuration_;
      guildListNum_ = other.guildListNum_;
      guildMemberNum_ = other.guildMemberNum_;
      guildModifyNamePrice_ = other.guildModifyNamePrice_;
      guildNameInvalidChar_ = other.guildNameInvalidChar_.Clone();
      guildNameLenMax_ = other.guildNameLenMax_;
      guildNameLenMin_ = other.guildNameLenMin_;
      guildRefreshInterval_ = other.guildRefreshInterval_;
      hobbitsName_ = other.hobbitsName_;
      hobbitsName2_ = other.hobbitsName2_;
      lightLoadingInterval_ = other.lightLoadingInterval_;
      loadingImage_ = other.loadingImage_.Clone();
      miniGameShareImgUrl_ = other.miniGameShareImgUrl_;
      noNetQuitTime_ = other.noNetQuitTime_;
      noticeFetchIntervalSec_ = other.noticeFetchIntervalSec_;
      noticeShowIntervalMinMaxSec_ = other.noticeShowIntervalMinMaxSec_.Clone();
      noticeTimeoutSec_ = other.noticeTimeoutSec_;
      notificationApplicationLevel_ = other.notificationApplicationLevel_;
      notificationPopLimit_ = other.notificationPopLimit_;
      packetDelateDays_ = other.packetDelateDays_;
      pioneerIdx_ = other.pioneerIdx_;
      privacyPolicy_ = other.privacyPolicy_;
      rankingAnnounceDuration_ = other.rankingAnnounceDuration_;
      rankingAreaHide_ = other.rankingAreaHide_;
      rankingAreaHideInfo_ = other.rankingAreaHideInfo_;
      rankingAreaShowLimitation_ = other.rankingAreaShowLimitation_;
      rankingHide_ = other.rankingHide_;
      rankingLevelAreaHideInfo_ = other.rankingLevelAreaHideInfo_;
      rankingLevelAreaShowLimitaion_ = other.rankingLevelAreaShowLimitaion_;
      rankingLevelHideInfo_ = other.rankingLevelHideInfo_;
      rankingLevelShowLimitaion_ = other.rankingLevelShowLimitaion_;
      rankingLevelWorldHideInfo_ = other.rankingLevelWorldHideInfo_;
      rankingLevelWorldShowLimitaion_ = other.rankingLevelWorldShowLimitaion_;
      rankingWorldHide_ = other.rankingWorldHide_;
      rankingWorldHideInfo_ = other.rankingWorldHideInfo_;
      rankingWorldNormalAvatar_ = other.rankingWorldNormalAvatar_.Clone();
      rankingWorldShowLimitaion_ = other.rankingWorldShowLimitaion_;
      rankingWorldTopAvatar_ = other.rankingWorldTopAvatar_.Clone();
      retentionPackRefreshUtc_ = other.retentionPackRefreshUtc_;
      shopRefreshTime_ = other.shopRefreshTime_.Clone();
      signCoinPrize_ = other.signCoinPrize_;
      signEnergyLimitPrize_ = other.signEnergyLimitPrize_;
      termsOfService_ = other.termsOfService_;
      trackSpeedup_ = other.trackSpeedup_;
      unlockEventRoleShow_ = other.unlockEventRoleShow_;
      userAvatarCount_ = other.userAvatarCount_;
      userTzOffset_ = other.userTzOffset_;
      wechatIOSDisablePayVersion_ = other.wechatIOSDisablePayVersion_;
      yDSeq_ = other.yDSeq_.Clone();
      abInfoAttributeDivide_ = other.abInfoAttributeDivide_.Clone();
      activityCoolDown_ = other.activityCoolDown_;
      adIdAndroid_ = other.adIdAndroid_.Clone();
      adIdAndroidAdmobAsia_ = other.adIdAndroidAdmobAsia_.Clone();
      adIdIos_ = other.adIdIos_.Clone();
      adIdIosAdmobAsia_ = other.adIdIosAdmobAsia_.Clone();
      ancCdTime_ = other.ancCdTime_;
      ancNightStopTime_ = other.ancNightStopTime_.Clone();
      ancSessionLimit_ = other.ancSessionLimit_;
      autoFingerTriggerTime_ = other.autoFingerTriggerTime_;
      bindSocialGem_ = other.bindSocialGem_;
      boardClearGem_ = other.boardClearGem_;
      boardColors_ = other.boardColors_.Clone();
      boostLevel_ = other.boostLevel_;
      boostLevel4X_ = other.boostLevel4X_;
      boostRate_ = other.boostRate_;
      boostRate4X_ = other.boostRate4X_;
      botColor_ = other.botColor_.Clone();
      botFirstRankLevel_ = other.botFirstRankLevel_;
      boxPossibleOffset_ = other.boxPossibleOffset_;
      bpTaskRefresh_ = other.bpTaskRefresh_;
      bubbleAdId_ = other.bubbleAdId_;
      bubbleBonus_ = other.bubbleBonus_.Clone();
      bubbleBonusProb_ = other.bubbleBonusProb_;
      bubbleDeadItem_ = other.bubbleDeadItem_;
      bubbleDeadWeight_ = other.bubbleDeadWeight_.Clone();
      bubbleExpired_ = other.bubbleExpired_;
      bubbleGuideItemId_ = other.bubbleGuideItemId_;
      bubbleLevelDiffParam_ = other.bubbleLevelDiffParam_.Clone();
      bubbleMaxNum_ = other.bubbleMaxNum_;
      buddyApplyLimitNum_ = other.buddyApplyLimitNum_;
      buddyApplyLimitTime_ = other.buddyApplyLimitTime_;
      buddyEnergyDailyLimit_ = other.buddyEnergyDailyLimit_;
      buddyEnergyEachSent_ = other.buddyEnergyEachSent_;
      buddyVisitExtraReward_ = other.buddyVisitExtraReward_;
      buddyVisitLimit_ = other.buddyVisitLimit_;
      buddyVisitReward_ = other.buddyVisitReward_.Clone();
      cardTradeGroupLink_ = other.cardTradeGroupLink_;
      dailyOrderReward_ = other.dailyOrderReward_;
      dailyTaskNums_ = other.dailyTaskNums_.Clone();
      deRefreshUtc_ = other.deRefreshUtc_;
      decoShopRefreshGem_ = other.decoShopRefreshGem_;
      decoShopRefreshInterval_ = other.decoShopRefreshInterval_;
      defaultHome_ = other.defaultHome_.Clone();
      defaultRolePart_ = other.defaultRolePart_.Clone();
      demRefreshWeekday_ = other.demRefreshWeekday_;
      detectiveUnlockLevel_ = other.detectiveUnlockLevel_;
      diffApiTimeout_ = other.diffApiTimeout_;
      exitNewUser_ = other.exitNewUser_;
      eyeBaseColor_ = other.eyeBaseColor_;
      fishBoardRepeatNum_ = other.fishBoardRepeatNum_;
      floorDecoDisplay_ = other.floorDecoDisplay_;
      freeBubbleCount_ = other.freeBubbleCount_.Clone();
      freeEnergyClaimCost_ = other.freeEnergyClaimCost_.Clone();
      freeEnergyClaimNum_ = other.freeEnergyClaimNum_.Clone();
      freeEnergyClaimTime_ = other.freeEnergyClaimTime_.Clone();
      freeEnergyNotification_ = other.freeEnergyNotification_.Clone();
      freeRechargeTimes_ = other.freeRechargeTimes_;
      freeRolePart_ = other.freeRolePart_.Clone();
      freeSpeedUpTimes_ = other.freeSpeedUpTimes_;
      friendLimit_ = other.friendLimit_;
      friendOpinionFriendship_ = other.friendOpinionFriendship_;
      frozenItemDeadWeight_ = other.frozenItemDeadWeight_.Clone();
      galleryFingerLv_ = other.galleryFingerLv_;
      giftAutoRollingTime_ = other.giftAutoRollingTime_;
      giftBoxStopShaking_ = other.giftBoxStopShaking_;
      giveCardNum_ = other.giveCardNum_;
      giveCardRefreshUtc_ = other.giveCardRefreshUtc_;
      guideMusic_ = other.guideMusic_;
      hairBaseColor_ = other.hairBaseColor_;
      initIdleCoin_ = other.initIdleCoin_;
      inventoryInitCap_ = other.inventoryInitCap_;
      inventoryProducerExtraGrid_ = other.inventoryProducerExtraGrid_;
      inviteGemRewardNum_ = other.inviteGemRewardNum_;
      invitedGemRewardNum_ = other.invitedGemRewardNum_;
      isAndFacebook_ = other.isAndFacebook_;
      isAndGoogle_ = other.isAndGoogle_;
      isFaq_ = other.isFaq_;
      isInAppReview_ = other.isInAppReview_;
      isIosApple_ = other.isIosApple_;
      isIosFacebook_ = other.isIosFacebook_;
      isIosGoogle_ = other.isIosGoogle_;
      isNewOrderView_ = other.isNewOrderView_;
      isOrderApiOnlyWhitelist_ = other.isOrderApiOnlyWhitelist_;
      islandChangeItemGold_ = other.islandChangeItemGold_.Clone();
      itemScaleTestB_ = other.itemScaleTestB_.Clone();
      luckyBoxCD_ = other.luckyBoxCD_.Clone();
      luckyBoxLimit_ = other.luckyBoxLimit_;
      luckyBoxNum_ = other.luckyBoxNum_;
      luckyWheelAdsCount_ = other.luckyWheelAdsCount_;
      luckyWheelFreeCount_ = other.luckyWheelFreeCount_;
      luckyWheelGemCost_ = other.luckyWheelGemCost_;
      luckyWheelGemCount_ = other.luckyWheelGemCount_;
      lvPopupCardAlbum_ = other.lvPopupCardAlbum_;
      lvPopupCloseDialog_ = other.lvPopupCloseDialog_;
      lvPopupDE_ = other.lvPopupDE_;
      lvPopupNewSession_ = other.lvPopupNewSession_;
      lvPopupNewSessionId_ = other.lvPopupNewSessionId_;
      mailSystemMax_ = other.mailSystemMax_;
      mapBuildStartAim_ = other.mapBuildStartAim_;
      mapBuildStopAim_ = other.mapBuildStopAim_;
      marketRefresh_ = other.marketRefresh_;
      marketRefreshNum_ = other.marketRefreshNum_;
      marketUtcClock_ = other.marketUtcClock_;
      maxFameLevelToViewActivityFeed_ = other.maxFameLevelToViewActivityFeed_;
      maxPullFriendInfoNum_ = other.maxPullFriendInfoNum_;
      maxToastId_ = other.maxToastId_;
      maxToolCount_ = other.maxToolCount_;
      mergeBonus_ = other.mergeBonus_;
      mergeBonusLevel_ = other.mergeBonusLevel_;
      mergeEnergyAutoMax_ = other.mergeEnergyAutoMax_;
      mergeEnergyAutoSec_ = other.mergeEnergyAutoSec_;
      mergeEnergyPrice_ = other.mergeEnergyPrice_.Clone();
      mergeRemindTriggerTime_ = other.mergeRemindTriggerTime_;
      mergeTutorialInterval_ = other.mergeTutorialInterval_;
      mergeTutorialStop_ = other.mergeTutorialStop_;
      mouthBaseColor_ = other.mouthBaseColor_;
      mysteryStoreCustomNum_ = other.mysteryStoreCustomNum_;
      mysteryStoreCustomRate_ = other.mysteryStoreCustomRate_;
      mysteryStoreRefreshPrice_ = other.mysteryStoreRefreshPrice_;
      mysteryStoreRefreshTime_ = other.mysteryStoreRefreshTime_.Clone();
      nameMax_ = other.nameMax_;
      nameMin_ = other.nameMin_;
      newUserGrandPrizeInviteNum_ = other.newUserGrandPrizeInviteNum_;
      newUserGrandPrizeReward_ = other.newUserGrandPrizeReward_.Clone();
      newUserInviteeMaxLevel_ = other.newUserInviteeMaxLevel_;
      newUserRewardForInvitee_ = other.newUserRewardForInvitee_.Clone();
      newUserRewardForInvitor_ = other.newUserRewardForInvitor_.Clone();
      newUserRewardLevel_ = other.newUserRewardLevel_;
      normalToastId_ = other.normalToastId_;
      noticeCombackTime_ = other.noticeCombackTime_;
      noticeEventValidTime_ = other.noticeEventValidTime_;
      notifiPopupEventTheme_ = other.notifiPopupEventTheme_;
      notifiPopupShutdownLv_ = other.notifiPopupShutdownLv_;
      notificationEnergyBonus_ = other.notificationEnergyBonus_.Clone();
      oldUserLetterDuration_ = other.oldUserLetterDuration_;
      orderApiLiveopsGrade_ = other.orderApiLiveopsGrade_;
      orderApiPastNum_ = other.orderApiPastNum_;
      orderCtrlNum_ = other.orderCtrlNum_;
      orderCtrlTooHigh_ = other.orderCtrlTooHigh_;
      orderCtrlTooHighTarget_ = other.orderCtrlTooHighTarget_;
      orderCtrlTooLow_ = other.orderCtrlTooLow_;
      orderCtrlTooLowTarget_ = other.orderCtrlTooLowTarget_;
      orderEnterApiDelay_ = other.orderEnterApiDelay_;
      orderEnterDelay_ = other.orderEnterDelay_;
      orderLimitCount_ = other.orderLimitCount_;
      packApiTimeout_ = other.packApiTimeout_;
      petNPC_ = other.petNPC_;
      popupLimit_ = other.popupLimit_;
      popupRefresh_ = other.popupRefresh_;
      postCardIParamIsland1_ = other.postCardIParamIsland1_.Clone();
      postCardParam_ = other.postCardParam_.Clone();
      postcardGiftOthersReward_ = other.postcardGiftOthersReward_.Clone();
      postcardMinNum_ = other.postcardMinNum_;
      pullFriendInfoWaitTime_ = other.pullFriendInfoWaitTime_;
      pushShopCD_ = other.pushShopCD_.Clone();
      pushShopCDIce_ = other.pushShopCDIce_.Clone();
      pushShopDuration_ = other.pushShopDuration_;
      pushShopMaxNum_ = other.pushShopMaxNum_.Clone();
      pushShopPopTimes_ = other.pushShopPopTimes_.Clone();
      rankBotOrderLimitNum_ = other.rankBotOrderLimitNum_;
      rankCoinsParam_ = other.rankCoinsParam_.Clone();
      rankCoinsParamNew_ = other.rankCoinsParamNew_.Clone();
      rankMemberNum_ = other.rankMemberNum_;
      rankOrderNum_ = other.rankOrderNum_;
      rankingWhitelist_ = other.rankingWhitelist_.Clone();
      rateBuildingBase_ = other.rateBuildingBase_.Clone();
      rateRedirectLv_ = other.rateRedirectLv_;
      rateTaskOpen_ = other.rateTaskOpen_.Clone();
      requireTypeADInit_ = other.requireTypeADInit_;
      requireTypeLTInit_ = other.requireTypeLTInit_;
      requireTypeUtcClock_ = other.requireTypeUtcClock_;
      restartTime_ = other.restartTime_;
      serverTimeCheckRange_ = other.serverTimeCheckRange_;
      settingFBFollowGem_ = other.settingFBFollowGem_;
      settingHelpshiftWebsite_ = other.settingHelpshiftWebsite_;
      skinBaseColor_ = other.skinBaseColor_;
      spdGemTips_ = other.spdGemTips_;
      spdUpDivide_ = other.spdUpDivide_.Clone();
      spdUpParam_ = other.spdUpParam_.Clone();
      specialStudentCdInterval_ = other.specialStudentCdInterval_;
      studentAnchorPointAmount_ = other.studentAnchorPointAmount_.Clone();
      studentGroupTotal_ = other.studentGroupTotal_.Clone();
      studentShowInterval_ = other.studentShowInterval_.Clone();
      sunRankMemberNum_ = other.sunRankMemberNum_;
      sunRankStopNewTime_ = other.sunRankStopNewTime_;
      sunRankTime_ = other.sunRankTime_;
      surveyAdsPos_ = other.surveyAdsPos_.Clone();
      tapSourceTips_ = other.tapSourceTips_.Clone();
      taskDailyFinalChest_ = other.taskDailyFinalChest_;
      taskDailyHardRate_ = other.taskDailyHardRate_;
      taskDailyTotalNum_ = other.taskDailyTotalNum_;
      taskPlotTime_ = other.taskPlotTime_.Clone();
      updateRemindPopupId_ = other.updateRemindPopupId_;
      userRecordMaxDay_ = other.userRecordMaxDay_;
      userRecordRefreshUtc_ = other.userRecordRefreshUtc_;
      userRecordWeekday_ = other.userRecordWeekday_;
      version_ = other.version_;
      wallPaperDisplay_ = other.wallPaperDisplay_;
      webshopAddress_ = other.webshopAddress_;
      webshopShowPayment_ = other.webshopShowPayment_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global Clone() {
      return new Global(this);
    }

    /// <summary>Field number for the "ActivityConsumeNum" field.</summary>
    public const int ActivityConsumeNumFieldNumber = 1;
    private int activityConsumeNum_;
    /// <summary>
    /// 开启侦探社全员体力加成需消耗的累积活跃度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityConsumeNum {
      get { return activityConsumeNum_; }
      set {
        activityConsumeNum_ = value;
      }
    }

    /// <summary>Field number for the "ActivityMaxNum" field.</summary>
    public const int ActivityMaxNumFieldNumber = 2;
    private int activityMaxNum_;
    /// <summary>
    /// 侦探社累积活跃度上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityMaxNum {
      get { return activityMaxNum_; }
      set {
        activityMaxNum_ = value;
      }
    }

    /// <summary>Field number for the "AnnualSummaryDeadline" field.</summary>
    public const int AnnualSummaryDeadlineFieldNumber = 3;
    private long annualSummaryDeadline_;
    /// <summary>
    /// 年度回顾的截止时间戳（废弃）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AnnualSummaryDeadline {
      get { return annualSummaryDeadline_; }
      set {
        annualSummaryDeadline_ = value;
      }
    }

    /// <summary>Field number for the "BpGroupRankingHide" field.</summary>
    public const int BpGroupRankingHideFieldNumber = 4;
    private bool bpGroupRankingHide_;
    /// <summary>
    /// 是否隐藏bp小组排行榜的入口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BpGroupRankingHide {
      get { return bpGroupRankingHide_; }
      set {
        bpGroupRankingHide_ = value;
      }
    }

    /// <summary>Field number for the "BpRankingFriendHide" field.</summary>
    public const int BpRankingFriendHideFieldNumber = 5;
    private bool bpRankingFriendHide_;
    /// <summary>
    /// 是否隐藏bp好友排行榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BpRankingFriendHide {
      get { return bpRankingFriendHide_; }
      set {
        bpRankingFriendHide_ = value;
      }
    }

    /// <summary>Field number for the "BpRankingHide" field.</summary>
    public const int BpRankingHideFieldNumber = 6;
    private bool bpRankingHide_;
    /// <summary>
    /// 是否隐藏bp排行榜所有入口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BpRankingHide {
      get { return bpRankingHide_; }
      set {
        bpRankingHide_ = value;
      }
    }

    /// <summary>Field number for the "BpRankingWorldHide" field.</summary>
    public const int BpRankingWorldHideFieldNumber = 7;
    private bool bpRankingWorldHide_;
    /// <summary>
    /// 是否隐藏bp全服排行榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BpRankingWorldHide {
      get { return bpRankingWorldHide_; }
      set {
        bpRankingWorldHide_ = value;
      }
    }

    /// <summary>Field number for the "Bpiconovertip1" field.</summary>
    public const int Bpiconovertip1FieldNumber = 8;
    private int bpiconovertip1_;
    /// <summary>
    /// bp活动快结束时，主入口气泡提示，倒计时多少天开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bpiconovertip1 {
      get { return bpiconovertip1_; }
      set {
        bpiconovertip1_ = value;
      }
    }

    /// <summary>Field number for the "Bpiconovertip2" field.</summary>
    public const int Bpiconovertip2FieldNumber = 9;
    private int bpiconovertip2_;
    /// <summary>
    /// bp活动快结束时，主入口气泡提示，每天多少次显示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bpiconovertip2 {
      get { return bpiconovertip2_; }
      set {
        bpiconovertip2_ = value;
      }
    }

    /// <summary>Field number for the "CardShopRedRefreshUtc" field.</summary>
    public const int CardShopRedRefreshUtcFieldNumber = 257;
    private int cardShopRedRefreshUtc_;
    /// <summary>
    /// 卡片星星兑换红点每日刷新的utc-0时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardShopRedRefreshUtc {
      get { return cardShopRedRefreshUtc_; }
      set {
        cardShopRedRefreshUtc_ = value;
      }
    }

    /// <summary>Field number for the "ClientHttpContinue" field.</summary>
    public const int ClientHttpContinueFieldNumber = 10;
    private bool clientHttpContinue_;
    /// <summary>
    /// 客户端Http请求是否开启100 continue
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClientHttpContinue {
      get { return clientHttpContinue_; }
      set {
        clientHttpContinue_ = value;
      }
    }

    /// <summary>Field number for the "ClientHttpTimeout" field.</summary>
    public const int ClientHttpTimeoutFieldNumber = 11;
    private int clientHttpTimeout_;
    /// <summary>
    /// 客户端Http请求Timeout时间(s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientHttpTimeout {
      get { return clientHttpTimeout_; }
      set {
        clientHttpTimeout_ = value;
      }
    }

    /// <summary>Field number for the "DropProbability" field.</summary>
    public const int DropProbabilityFieldNumber = 270;
    private string dropProbability_ = "";
    /// <summary>
    /// 概率掉落查看网址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DropProbability {
      get { return dropProbability_; }
      set {
        dropProbability_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EventRoleShowAmount" field.</summary>
    public const int EventRoleShowAmountFieldNumber = 12;
    private int eventRoleShowAmount_;
    /// <summary>
    /// 开屏时广场出现的做操角色数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventRoleShowAmount {
      get { return eventRoleShowAmount_; }
      set {
        eventRoleShowAmount_ = value;
      }
    }

    /// <summary>Field number for the "EventRoleShowLimitation" field.</summary>
    public const int EventRoleShowLimitationFieldNumber = 13;
    private int eventRoleShowLimitation_;
    /// <summary>
    /// 场景里角色的展示上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventRoleShowLimitation {
      get { return eventRoleShowLimitation_; }
      set {
        eventRoleShowLimitation_ = value;
      }
    }

    /// <summary>Field number for the "FBCommunityWebsite" field.</summary>
    public const int FBCommunityWebsiteFieldNumber = 14;
    private string fBCommunityWebsite_ = "";
    /// <summary>
    /// 跳转游戏社群网页链接
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FBCommunityWebsite {
      get { return fBCommunityWebsite_; }
      set {
        fBCommunityWebsite_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GroupRankingHide" field.</summary>
    public const int GroupRankingHideFieldNumber = 15;
    private bool groupRankingHide_;
    /// <summary>
    /// 是否隐藏季节性活动小组排行榜的入口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GroupRankingHide {
      get { return groupRankingHide_; }
      set {
        groupRankingHide_ = value;
      }
    }

    /// <summary>Field number for the "GuildAnnouncementLimit" field.</summary>
    public const int GuildAnnouncementLimitFieldNumber = 16;
    private int guildAnnouncementLimit_;
    /// <summary>
    /// 侦探社公告字符数量限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildAnnouncementLimit {
      get { return guildAnnouncementLimit_; }
      set {
        guildAnnouncementLimit_ = value;
      }
    }

    /// <summary>Field number for the "GuildApplyCd" field.</summary>
    public const int GuildApplyCdFieldNumber = 17;
    private int guildApplyCd_;
    /// <summary>
    /// 玩家申请同一侦探社的冷却时间/小时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildApplyCd {
      get { return guildApplyCd_; }
      set {
        guildApplyCd_ = value;
      }
    }

    /// <summary>Field number for the "GuildApplyExpireDay" field.</summary>
    public const int GuildApplyExpireDayFieldNumber = 18;
    private int guildApplyExpireDay_;
    /// <summary>
    /// 侦探社申请消息过期天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildApplyExpireDay {
      get { return guildApplyExpireDay_; }
      set {
        guildApplyExpireDay_ = value;
      }
    }

    /// <summary>Field number for the "GuildApplyLimit" field.</summary>
    public const int GuildApplyLimitFieldNumber = 19;
    private int guildApplyLimit_;
    /// <summary>
    /// 侦探社申请消息数量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildApplyLimit {
      get { return guildApplyLimit_; }
      set {
        guildApplyLimit_ = value;
      }
    }

    /// <summary>Field number for the "GuildCreatePrice" field.</summary>
    public const int GuildCreatePriceFieldNumber = 20;
    private int guildCreatePrice_;
    /// <summary>
    /// 创建侦探社所需钻石数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildCreatePrice {
      get { return guildCreatePrice_; }
      set {
        guildCreatePrice_ = value;
      }
    }

    /// <summary>Field number for the "GuildJoinCd" field.</summary>
    public const int GuildJoinCdFieldNumber = 21;
    private int guildJoinCd_;
    /// <summary>
    /// 侦探社成员被踢/主动退出后，重新加入侦探社的冷却时间/小时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildJoinCd {
      get { return guildJoinCd_; }
      set {
        guildJoinCd_ = value;
      }
    }

    /// <summary>Field number for the "GuildKickoutLimitation" field.</summary>
    public const int GuildKickoutLimitationFieldNumber = 22;
    private int guildKickoutLimitation_;
    /// <summary>
    /// 社长/副社长每天踢人的次数上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildKickoutLimitation {
      get { return guildKickoutLimitation_; }
      set {
        guildKickoutLimitation_ = value;
      }
    }

    /// <summary>Field number for the "GuildLeaderInactionDuration" field.</summary>
    public const int GuildLeaderInactionDurationFieldNumber = 23;
    private int guildLeaderInactionDuration_;
    /// <summary>
    /// 社长超过xx天没登录后，自动转让社长身份
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildLeaderInactionDuration {
      get { return guildLeaderInactionDuration_; }
      set {
        guildLeaderInactionDuration_ = value;
      }
    }

    /// <summary>Field number for the "GuildListNum" field.</summary>
    public const int GuildListNumFieldNumber = 24;
    private int guildListNum_;
    /// <summary>
    /// 公会列表一次刷新显示的公会数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildListNum {
      get { return guildListNum_; }
      set {
        guildListNum_ = value;
      }
    }

    /// <summary>Field number for the "GuildMemberNum" field.</summary>
    public const int GuildMemberNumFieldNumber = 25;
    private int guildMemberNum_;
    /// <summary>
    /// 侦探社人数限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildMemberNum {
      get { return guildMemberNum_; }
      set {
        guildMemberNum_ = value;
      }
    }

    /// <summary>Field number for the "GuildModifyNamePrice" field.</summary>
    public const int GuildModifyNamePriceFieldNumber = 26;
    private int guildModifyNamePrice_;
    /// <summary>
    /// 侦探社改名所需钻石数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildModifyNamePrice {
      get { return guildModifyNamePrice_; }
      set {
        guildModifyNamePrice_ = value;
      }
    }

    /// <summary>Field number for the "GuildNameInvalidChar" field.</summary>
    public const int GuildNameInvalidCharFieldNumber = 27;
    private static readonly pb::FieldCodec<string> _repeated_guildNameInvalidChar_codec
        = pb::FieldCodec.ForString(218);
    private readonly pbc::RepeatedField<string> guildNameInvalidChar_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 侦探社名字中不得出现的非法字符
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuildNameInvalidChar {
      get { return guildNameInvalidChar_; }
    }

    /// <summary>Field number for the "GuildNameLenMax" field.</summary>
    public const int GuildNameLenMaxFieldNumber = 28;
    private int guildNameLenMax_;
    /// <summary>
    /// 侦探社名字字符数量限制(最大)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildNameLenMax {
      get { return guildNameLenMax_; }
      set {
        guildNameLenMax_ = value;
      }
    }

    /// <summary>Field number for the "GuildNameLenMin" field.</summary>
    public const int GuildNameLenMinFieldNumber = 29;
    private int guildNameLenMin_;
    /// <summary>
    /// 侦探社名字字符数量限制(最小)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildNameLenMin {
      get { return guildNameLenMin_; }
      set {
        guildNameLenMin_ = value;
      }
    }

    /// <summary>Field number for the "GuildRefreshInterval" field.</summary>
    public const int GuildRefreshIntervalFieldNumber = 30;
    private long guildRefreshInterval_;
    /// <summary>
    /// 刷新列表间隔，s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GuildRefreshInterval {
      get { return guildRefreshInterval_; }
      set {
        guildRefreshInterval_ = value;
      }
    }

    /// <summary>Field number for the "HobbitsName" field.</summary>
    public const int HobbitsNameFieldNumber = 31;
    private int hobbitsName_;
    /// <summary>
    /// =IsEnableProtocolSign，1代表协议签名，0不签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HobbitsName {
      get { return hobbitsName_; }
      set {
        hobbitsName_ = value;
      }
    }

    /// <summary>Field number for the "HobbitsName2" field.</summary>
    public const int HobbitsName2FieldNumber = 32;
    private int hobbitsName2_;
    /// <summary>
    /// =IsEnableResponseProtocolSign，7不签名，其他都签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HobbitsName2 {
      get { return hobbitsName2_; }
      set {
        hobbitsName2_ = value;
      }
    }

    /// <summary>Field number for the "LightLoadingInterval" field.</summary>
    public const int LightLoadingIntervalFieldNumber = 33;
    private int lightLoadingInterval_;
    /// <summary>
    /// 玩家切后台最多多长时间会lightloading（请求商店发货),秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LightLoadingInterval {
      get { return lightLoadingInterval_; }
      set {
        lightLoadingInterval_ = value;
      }
    }

    /// <summary>Field number for the "LoadingImage" field.</summary>
    public const int LoadingImageFieldNumber = 268;
    private static readonly pb::FieldCodec<string> _repeated_loadingImage_codec
        = pb::FieldCodec.ForString(2146);
    private readonly pbc::RepeatedField<string> loadingImage_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// loading图片及生效截止日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LoadingImage {
      get { return loadingImage_; }
    }

    /// <summary>Field number for the "MiniGameShareImgUrl" field.</summary>
    public const int MiniGameShareImgUrlFieldNumber = 34;
    private string miniGameShareImgUrl_ = "";
    /// <summary>
    /// 小游戏分享url，以http开头意味着url，否则认为是imageid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MiniGameShareImgUrl {
      get { return miniGameShareImgUrl_; }
      set {
        miniGameShareImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NoNetQuitTime" field.</summary>
    public const int NoNetQuitTimeFieldNumber = 35;
    private int noNetQuitTime_;
    /// <summary>
    /// 弱网退出时长，单位秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoNetQuitTime {
      get { return noNetQuitTime_; }
      set {
        noNetQuitTime_ = value;
      }
    }

    /// <summary>Field number for the "NoticeFetchIntervalSec" field.</summary>
    public const int NoticeFetchIntervalSecFieldNumber = 36;
    private int noticeFetchIntervalSec_;
    /// <summary>
    /// 公告拉取频率 5分钟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoticeFetchIntervalSec {
      get { return noticeFetchIntervalSec_; }
      set {
        noticeFetchIntervalSec_ = value;
      }
    }

    /// <summary>Field number for the "NoticeShowIntervalMinMaxSec" field.</summary>
    public const int NoticeShowIntervalMinMaxSecFieldNumber = 37;
    private static readonly pb::FieldCodec<int> _repeated_noticeShowIntervalMinMaxSec_codec
        = pb::FieldCodec.ForInt32(298);
    private readonly pbc::RepeatedField<int> noticeShowIntervalMinMaxSec_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 公告前后两条记录之间的显示间隔 3~10随机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NoticeShowIntervalMinMaxSec {
      get { return noticeShowIntervalMinMaxSec_; }
    }

    /// <summary>Field number for the "NoticeTimeoutSec" field.</summary>
    public const int NoticeTimeoutSecFieldNumber = 38;
    private int noticeTimeoutSec_;
    /// <summary>
    /// 公告过期时间 3小时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoticeTimeoutSec {
      get { return noticeTimeoutSec_; }
      set {
        noticeTimeoutSec_ = value;
      }
    }

    /// <summary>Field number for the "NotificationApplicationLevel" field.</summary>
    public const int NotificationApplicationLevelFieldNumber = 266;
    private int notificationApplicationLevel_;
    /// <summary>
    /// 推送的app权限申请触发等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NotificationApplicationLevel {
      get { return notificationApplicationLevel_; }
      set {
        notificationApplicationLevel_ = value;
      }
    }

    /// <summary>Field number for the "NotificationPopLimit" field.</summary>
    public const int NotificationPopLimitFieldNumber = 265;
    private int notificationPopLimit_;
    /// <summary>
    /// 开启推送提醒弹窗每日限制次数（功能FeatureNotifiPop）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NotificationPopLimit {
      get { return notificationPopLimit_; }
      set {
        notificationPopLimit_ = value;
      }
    }

    /// <summary>Field number for the "PacketDelateDays" field.</summary>
    public const int PacketDelateDaysFieldNumber = 39;
    private int packetDelateDays_;
    /// <summary>
    /// 自动删除红包的天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PacketDelateDays {
      get { return packetDelateDays_; }
      set {
        packetDelateDays_ = value;
      }
    }

    /// <summary>Field number for the "PioneerIdx" field.</summary>
    public const int PioneerIdxFieldNumber = 40;
    private int pioneerIdx_;
    /// <summary>
    /// 先锋测试服届数，如果需要清理数据，请加1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PioneerIdx {
      get { return pioneerIdx_; }
      set {
        pioneerIdx_ = value;
      }
    }

    /// <summary>Field number for the "PrivacyPolicy" field.</summary>
    public const int PrivacyPolicyFieldNumber = 41;
    private string privacyPolicy_ = "";
    /// <summary>
    /// 小程序广告id（别被字段名误导）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivacyPolicy {
      get { return privacyPolicy_; }
      set {
        privacyPolicy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RankingAnnounceDuration" field.</summary>
    public const int RankingAnnounceDurationFieldNumber = 42;
    private int rankingAnnounceDuration_;
    /// <summary>
    /// 排行榜公示时长，单位（小时）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankingAnnounceDuration {
      get { return rankingAnnounceDuration_; }
      set {
        rankingAnnounceDuration_ = value;
      }
    }

    /// <summary>Field number for the "RankingAreaHide" field.</summary>
    public const int RankingAreaHideFieldNumber = 43;
    private bool rankingAreaHide_;
    /// <summary>
    /// 是否隐藏地区排行榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RankingAreaHide {
      get { return rankingAreaHide_; }
      set {
        rankingAreaHide_ = value;
      }
    }

    /// <summary>Field number for the "RankingAreaHideInfo" field.</summary>
    public const int RankingAreaHideInfoFieldNumber = 44;
    private int rankingAreaHideInfo_;
    /// <summary>
    /// 地区排名多少名以后的玩家不展示具体排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankingAreaHideInfo {
      get { return rankingAreaHideInfo_; }
      set {
        rankingAreaHideInfo_ = value;
      }
    }

    /// <summary>Field number for the "RankingAreaShowLimitation" field.</summary>
    public const int RankingAreaShowLimitationFieldNumber = 45;
    private int rankingAreaShowLimitation_;
    /// <summary>
    /// 地区排行展示的玩家数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankingAreaShowLimitation {
      get { return rankingAreaShowLimitation_; }
      set {
        rankingAreaShowLimitation_ = value;
      }
    }

    /// <summary>Field number for the "RankingHide" field.</summary>
    public const int RankingHideFieldNumber = 46;
    private bool rankingHide_;
    /// <summary>
    /// 是否隐藏排行榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RankingHide {
      get { return rankingHide_; }
      set {
        rankingHide_ = value;
      }
    }

    /// <summary>Field number for the "RankingLevelAreaHideInfo" field.</summary>
    public const int RankingLevelAreaHideInfoFieldNumber = 47;
    private int rankingLevelAreaHideInfo_;
    /// <summary>
    /// 关卡区域排名多少名以后的玩家不展示具体排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankingLevelAreaHideInfo {
      get { return rankingLevelAreaHideInfo_; }
      set {
        rankingLevelAreaHideInfo_ = value;
      }
    }

    /// <summary>Field number for the "RankingLevelAreaShowLimitaion" field.</summary>
    public const int RankingLevelAreaShowLimitaionFieldNumber = 48;
    private int rankingLevelAreaShowLimitaion_;
    /// <summary>
    /// 关卡区域排行榜显示数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankingLevelAreaShowLimitaion {
      get { return rankingLevelAreaShowLimitaion_; }
      set {
        rankingLevelAreaShowLimitaion_ = value;
      }
    }

    /// <summary>Field number for the "RankingLevelHideInfo" field.</summary>
    public const int RankingLevelHideInfoFieldNumber = 49;
    private int rankingLevelHideInfo_;
    /// <summary>
    /// 关卡排名多少名以后的玩家不展示具体排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankingLevelHideInfo {
      get { return rankingLevelHideInfo_; }
      set {
        rankingLevelHideInfo_ = value;
      }
    }

    /// <summary>Field number for the "RankingLevelShowLimitaion" field.</summary>
    public const int RankingLevelShowLimitaionFieldNumber = 50;
    private int rankingLevelShowLimitaion_;
    /// <summary>
    /// 关卡排行榜显示数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankingLevelShowLimitaion {
      get { return rankingLevelShowLimitaion_; }
      set {
        rankingLevelShowLimitaion_ = value;
      }
    }

    /// <summary>Field number for the "RankingLevelWorldHideInfo" field.</summary>
    public const int RankingLevelWorldHideInfoFieldNumber = 51;
    private int rankingLevelWorldHideInfo_;
    /// <summary>
    /// 关卡全服排名多少名以后的玩家不展示具体排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankingLevelWorldHideInfo {
      get { return rankingLevelWorldHideInfo_; }
      set {
        rankingLevelWorldHideInfo_ = value;
      }
    }

    /// <summary>Field number for the "RankingLevelWorldShowLimitaion" field.</summary>
    public const int RankingLevelWorldShowLimitaionFieldNumber = 52;
    private int rankingLevelWorldShowLimitaion_;
    /// <summary>
    /// 关卡全服排行榜显示数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankingLevelWorldShowLimitaion {
      get { return rankingLevelWorldShowLimitaion_; }
      set {
        rankingLevelWorldShowLimitaion_ = value;
      }
    }

    /// <summary>Field number for the "RankingWorldHide" field.</summary>
    public const int RankingWorldHideFieldNumber = 53;
    private bool rankingWorldHide_;
    /// <summary>
    /// 是否隐藏全服排行榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RankingWorldHide {
      get { return rankingWorldHide_; }
      set {
        rankingWorldHide_ = value;
      }
    }

    /// <summary>Field number for the "RankingWorldHideInfo" field.</summary>
    public const int RankingWorldHideInfoFieldNumber = 54;
    private int rankingWorldHideInfo_;
    /// <summary>
    /// 全服排名多少名以后的玩家不展示具体排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankingWorldHideInfo {
      get { return rankingWorldHideInfo_; }
      set {
        rankingWorldHideInfo_ = value;
      }
    }

    /// <summary>Field number for the "RankingWorldNormalAvatar" field.</summary>
    public const int RankingWorldNormalAvatarFieldNumber = 55;
    private static readonly pb::FieldCodec<int> _repeated_rankingWorldNormalAvatar_codec
        = pb::FieldCodec.ForInt32(442);
    private readonly pbc::RepeatedField<int> rankingWorldNormalAvatar_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 获得普通头像框的名次范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RankingWorldNormalAvatar {
      get { return rankingWorldNormalAvatar_; }
    }

    /// <summary>Field number for the "RankingWorldShowLimitaion" field.</summary>
    public const int RankingWorldShowLimitaionFieldNumber = 56;
    private int rankingWorldShowLimitaion_;
    /// <summary>
    /// 全服排行展示的玩家数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankingWorldShowLimitaion {
      get { return rankingWorldShowLimitaion_; }
      set {
        rankingWorldShowLimitaion_ = value;
      }
    }

    /// <summary>Field number for the "RankingWorldTopAvatar" field.</summary>
    public const int RankingWorldTopAvatarFieldNumber = 57;
    private static readonly pb::FieldCodec<int> _repeated_rankingWorldTopAvatar_codec
        = pb::FieldCodec.ForInt32(458);
    private readonly pbc::RepeatedField<int> rankingWorldTopAvatar_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 获得高级头像框的名次范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RankingWorldTopAvatar {
      get { return rankingWorldTopAvatar_; }
    }

    /// <summary>Field number for the "RetentionPackRefreshUtc" field.</summary>
    public const int RetentionPackRefreshUtcFieldNumber = 233;
    private int retentionPackRefreshUtc_;
    /// <summary>
    /// 留存礼包刷新的UTC-0时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetentionPackRefreshUtc {
      get { return retentionPackRefreshUtc_; }
      set {
        retentionPackRefreshUtc_ = value;
      }
    }

    /// <summary>Field number for the "ShopRefreshTime" field.</summary>
    public const int ShopRefreshTimeFieldNumber = 58;
    private static readonly pb::FieldCodec<int> _repeated_shopRefreshTime_codec
        = pb::FieldCodec.ForInt32(466);
    private readonly pbc::RepeatedField<int> shopRefreshTime_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 神秘商店刷新的utc时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ShopRefreshTime {
      get { return shopRefreshTime_; }
    }

    /// <summary>Field number for the "SignCoinPrize" field.</summary>
    public const int SignCoinPrizeFieldNumber = 59;
    private int signCoinPrize_;
    /// <summary>
    /// 签到给予的金币数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SignCoinPrize {
      get { return signCoinPrize_; }
      set {
        signCoinPrize_ = value;
      }
    }

    /// <summary>Field number for the "SignEnergyLimitPrize" field.</summary>
    public const int SignEnergyLimitPrizeFieldNumber = 60;
    private int signEnergyLimitPrize_;
    /// <summary>
    /// 签到给予的体力上限加成数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SignEnergyLimitPrize {
      get { return signEnergyLimitPrize_; }
      set {
        signEnergyLimitPrize_ = value;
      }
    }

    /// <summary>Field number for the "TermsOfService" field.</summary>
    public const int TermsOfServiceFieldNumber = 61;
    private string termsOfService_ = "";
    /// <summary>
    /// 服务条款网址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TermsOfService {
      get { return termsOfService_; }
      set {
        termsOfService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TrackSpeedup" field.</summary>
    public const int TrackSpeedupFieldNumber = 62;
    private float trackSpeedup_;
    /// <summary>
    /// 奖励条比平均值长时的增长加速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TrackSpeedup {
      get { return trackSpeedup_; }
      set {
        trackSpeedup_ = value;
      }
    }

    /// <summary>Field number for the "UnlockEventRoleShow" field.</summary>
    public const int UnlockEventRoleShowFieldNumber = 63;
    private int unlockEventRoleShow_;
    /// <summary>
    /// 特殊角色开屏功能解锁的订单ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnlockEventRoleShow {
      get { return unlockEventRoleShow_; }
      set {
        unlockEventRoleShow_ = value;
      }
    }

    /// <summary>Field number for the "UserAvatarCount" field.</summary>
    public const int UserAvatarCountFieldNumber = 64;
    private int userAvatarCount_;
    /// <summary>
    /// 预定义头像的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserAvatarCount {
      get { return userAvatarCount_; }
      set {
        userAvatarCount_ = value;
      }
    }

    /// <summary>Field number for the "UserTzOffset" field.</summary>
    public const int UserTzOffsetFieldNumber = 65;
    private int userTzOffset_;
    /// <summary>
    /// 如果涉及到前后端同时使用用户时区信息的时候需要使用这个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserTzOffset {
      get { return userTzOffset_; }
      set {
        userTzOffset_ = value;
      }
    }

    /// <summary>Field number for the "WechatIOSDisablePayVersion" field.</summary>
    public const int WechatIOSDisablePayVersionFieldNumber = 66;
    private string wechatIOSDisablePayVersion_ = "";
    /// <summary>
    /// IOS小程序屏蔽支付版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WechatIOSDisablePayVersion {
      get { return wechatIOSDisablePayVersion_; }
      set {
        wechatIOSDisablePayVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "YDSeq" field.</summary>
    public const int YDSeqFieldNumber = 67;
    private static readonly pb::FieldCodec<int> _repeated_yDSeq_codec
        = pb::FieldCodec.ForInt32(538);
    private readonly pbc::RepeatedField<int> yDSeq_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 间隔多少Store次数上传一次易盾数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> YDSeq {
      get { return yDSeq_; }
    }

    /// <summary>Field number for the "abInfoAttributeDivide" field.</summary>
    public const int AbInfoAttributeDivideFieldNumber = 262;
    private static readonly pbc::MapField<int, string>.Codec _map_abInfoAttributeDivide_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 2098);
    private readonly pbc::MapField<int, string> abInfoAttributeDivide_ = new pbc::MapField<int, string>();
    /// <summary>
    /// A/B分组对应用户属性（从哪个分组开始 : 用哪个用户属性）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> AbInfoAttributeDivide {
      get { return abInfoAttributeDivide_; }
    }

    /// <summary>Field number for the "activityCoolDown" field.</summary>
    public const int ActivityCoolDownFieldNumber = 68;
    private int activityCoolDown_;
    /// <summary>
    /// 领取奖励xx时间后可以参与新的活动，单位分钟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityCoolDown {
      get { return activityCoolDown_; }
      set {
        activityCoolDown_ = value;
      }
    }

    /// <summary>Field number for the "adIdAndroid" field.</summary>
    public const int AdIdAndroidFieldNumber = 69;
    private static readonly pb::FieldCodec<string> _repeated_adIdAndroid_codec
        = pb::FieldCodec.ForString(554);
    private readonly pbc::RepeatedField<string> adIdAndroid_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 安卓平台广告id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AdIdAndroid {
      get { return adIdAndroid_; }
    }

    /// <summary>Field number for the "adIdAndroidAdmobAsia" field.</summary>
    public const int AdIdAndroidAdmobAsiaFieldNumber = 70;
    private static readonly pb::FieldCodec<string> _repeated_adIdAndroidAdmobAsia_codec
        = pb::FieldCodec.ForString(562);
    private readonly pbc::RepeatedField<string> adIdAndroidAdmobAsia_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 安卓平台广告id max
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AdIdAndroidAdmobAsia {
      get { return adIdAndroidAdmobAsia_; }
    }

    /// <summary>Field number for the "adIdIos" field.</summary>
    public const int AdIdIosFieldNumber = 71;
    private static readonly pb::FieldCodec<string> _repeated_adIdIos_codec
        = pb::FieldCodec.ForString(570);
    private readonly pbc::RepeatedField<string> adIdIos_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// ios平台广告id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AdIdIos {
      get { return adIdIos_; }
    }

    /// <summary>Field number for the "adIdIosAdmobAsia" field.</summary>
    public const int AdIdIosAdmobAsiaFieldNumber = 72;
    private static readonly pb::FieldCodec<string> _repeated_adIdIosAdmobAsia_codec
        = pb::FieldCodec.ForString(578);
    private readonly pbc::RepeatedField<string> adIdIosAdmobAsia_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// ios平台广告id max
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AdIdIosAdmobAsia {
      get { return adIdIosAdmobAsia_; }
    }

    /// <summary>Field number for the "ancCdTime" field.</summary>
    public const int AncCdTimeFieldNumber = 73;
    private int ancCdTime_;
    /// <summary>
    /// 本地通知的cd时间(分钟)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AncCdTime {
      get { return ancCdTime_; }
      set {
        ancCdTime_ = value;
      }
    }

    /// <summary>Field number for the "ancNightStopTime" field.</summary>
    public const int AncNightStopTimeFieldNumber = 74;
    private static readonly pb::FieldCodec<int> _repeated_ancNightStopTime_codec
        = pb::FieldCodec.ForInt32(594);
    private readonly pbc::RepeatedField<int> ancNightStopTime_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 表示从几点到几点，后面的小则表示第二天的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AncNightStopTime {
      get { return ancNightStopTime_; }
    }

    /// <summary>Field number for the "ancSessionLimit" field.</summary>
    public const int AncSessionLimitFieldNumber = 75;
    private int ancSessionLimit_;
    /// <summary>
    /// 一次session最多发出多少本地通知
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AncSessionLimit {
      get { return ancSessionLimit_; }
      set {
        ancSessionLimit_ = value;
      }
    }

    /// <summary>Field number for the "autoFingerTriggerTime" field.</summary>
    public const int AutoFingerTriggerTimeFieldNumber = 224;
    private int autoFingerTriggerTime_;
    /// <summary>
    /// 自动手指触发等待时间（毫秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AutoFingerTriggerTime {
      get { return autoFingerTriggerTime_; }
      set {
        autoFingerTriggerTime_ = value;
      }
    }

    /// <summary>Field number for the "bindSocialGem" field.</summary>
    public const int BindSocialGemFieldNumber = 76;
    private int bindSocialGem_;
    /// <summary>
    /// 首次绑定账号给的钻石奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BindSocialGem {
      get { return bindSocialGem_; }
      set {
        bindSocialGem_ = value;
      }
    }

    /// <summary>Field number for the "boardClearGem" field.</summary>
    public const int BoardClearGemFieldNumber = 77;
    private int boardClearGem_;
    /// <summary>
    /// 棋盘清除奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardClearGem {
      get { return boardClearGem_; }
      set {
        boardClearGem_ = value;
      }
    }

    /// <summary>Field number for the "boardColors" field.</summary>
    public const int BoardColorsFieldNumber = 78;
    private static readonly pb::FieldCodec<string> _repeated_boardColors_codec
        = pb::FieldCodec.ForString(626);
    private readonly pbc::RepeatedField<string> boardColors_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 棋盘颜色（十六进制rgb）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> BoardColors {
      get { return boardColors_; }
    }

    /// <summary>Field number for the "boostLevel" field.</summary>
    public const int BoostLevelFieldNumber = 209;
    private int boostLevel_;
    /// <summary>
    /// 能量加倍消耗掉落在合成链内提升等级-作废（36版本开始使用整合版）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoostLevel {
      get { return boostLevel_; }
      set {
        boostLevel_ = value;
      }
    }

    /// <summary>Field number for the "boostLevel4x" field.</summary>
    public const int BoostLevel4XFieldNumber = 255;
    private int boostLevel4X_;
    /// <summary>
    /// 4倍能量加倍消耗掉落在合成链内提升等级-作废（36版本开始使用整合版）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoostLevel4X {
      get { return boostLevel4X_; }
      set {
        boostLevel4X_ = value;
      }
    }

    /// <summary>Field number for the "boostRate" field.</summary>
    public const int BoostRateFieldNumber = 210;
    private int boostRate_;
    /// <summary>
    /// 能量加倍消耗倍率-作废（36版本开始使用整合版）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoostRate {
      get { return boostRate_; }
      set {
        boostRate_ = value;
      }
    }

    /// <summary>Field number for the "boostRate4x" field.</summary>
    public const int BoostRate4XFieldNumber = 256;
    private int boostRate4X_;
    /// <summary>
    /// 4倍能量加倍消耗倍率-作废（36版本开始使用整合版）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoostRate4X {
      get { return boostRate4X_; }
      set {
        boostRate4X_ = value;
      }
    }

    /// <summary>Field number for the "botColor" field.</summary>
    public const int BotColorFieldNumber = 79;
    private static readonly pb::FieldCodec<int> _repeated_botColor_codec
        = pb::FieldCodec.ForInt32(634);
    private readonly pbc::RepeatedField<int> botColor_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 机器人的各部件颜色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BotColor {
      get { return botColor_; }
    }

    /// <summary>Field number for the "botFirstRankLevel" field.</summary>
    public const int BotFirstRankLevelFieldNumber = 80;
    private int botFirstRankLevel_;
    /// <summary>
    /// 玩家首次排行榜匹配bot难度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BotFirstRankLevel {
      get { return botFirstRankLevel_; }
      set {
        botFirstRankLevel_ = value;
      }
    }

    /// <summary>Field number for the "boxPossibleOffset" field.</summary>
    public const int BoxPossibleOffsetFieldNumber = 232;
    private int boxPossibleOffset_;
    /// <summary>
    /// 棋子魔盒和三选一盒子计算最优解时的偏移值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoxPossibleOffset {
      get { return boxPossibleOffset_; }
      set {
        boxPossibleOffset_ = value;
      }
    }

    /// <summary>Field number for the "bpTaskRefresh" field.</summary>
    public const int BpTaskRefreshFieldNumber = 269;
    private int bpTaskRefresh_;
    /// <summary>
    /// battlePass任务刷新的utc-0时间（北京18:00/纽约05:00）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BpTaskRefresh {
      get { return bpTaskRefresh_; }
      set {
        bpTaskRefresh_ = value;
      }
    }

    /// <summary>Field number for the "bubbleAdId" field.</summary>
    public const int BubbleAdIdFieldNumber = 194;
    private int bubbleAdId_;
    /// <summary>
    /// 泡泡使用的广告ID（AdSetting.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BubbleAdId {
      get { return bubbleAdId_; }
      set {
        bubbleAdId_ = value;
      }
    }

    /// <summary>Field number for the "bubbleBonus" field.</summary>
    public const int BubbleBonusFieldNumber = 81;
    private static readonly pbc::MapField<int, int>.Codec _map_bubbleBonus_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 650);
    private readonly pbc::MapField<int, int> bubbleBonus_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 气泡可能出的道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> BubbleBonus {
      get { return bubbleBonus_; }
    }

    /// <summary>Field number for the "bubbleBonusProb" field.</summary>
    public const int BubbleBonusProbFieldNumber = 82;
    private int bubbleBonusProb_;
    /// <summary>
    /// 气泡出道具的概率(百分数)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BubbleBonusProb {
      get { return bubbleBonusProb_; }
      set {
        bubbleBonusProb_ = value;
      }
    }

    /// <summary>Field number for the "bubbleDeadItem" field.</summary>
    public const int BubbleDeadItemFieldNumber = 83;
    private int bubbleDeadItem_;
    /// <summary>
    /// 泡泡过期后变成的棋子ID（废弃但不要删除）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BubbleDeadItem {
      get { return bubbleDeadItem_; }
      set {
        bubbleDeadItem_ = value;
      }
    }

    /// <summary>Field number for the "bubbleDeadWeight" field.</summary>
    public const int BubbleDeadWeightFieldNumber = 84;
    private static readonly pb::FieldCodec<string> _repeated_bubbleDeadWeight_codec
        = pb::FieldCodec.ForString(674);
    private readonly pbc::RepeatedField<string> bubbleDeadWeight_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 泡泡过期后变成的棋子ID按权重随机结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> BubbleDeadWeight {
      get { return bubbleDeadWeight_; }
    }

    /// <summary>Field number for the "bubbleExpired" field.</summary>
    public const int BubbleExpiredFieldNumber = 192;
    private int bubbleExpired_;
    /// <summary>
    /// 泡泡统一过期时间（毫秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BubbleExpired {
      get { return bubbleExpired_; }
      set {
        bubbleExpired_ = value;
      }
    }

    /// <summary>Field number for the "bubbleGuideItemId" field.</summary>
    public const int BubbleGuideItemIdFieldNumber = 85;
    private int bubbleGuideItemId_;
    /// <summary>
    /// 做气泡引导的物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BubbleGuideItemId {
      get { return bubbleGuideItemId_; }
      set {
        bubbleGuideItemId_ = value;
      }
    }

    /// <summary>Field number for the "bubbleLevelDiffParam" field.</summary>
    public const int BubbleLevelDiffParamFieldNumber = 86;
    private static readonly pb::FieldCodec<float> _repeated_bubbleLevelDiffParam_codec
        = pb::FieldCodec.ForFloat(690);
    private readonly pbc::RepeatedField<float> bubbleLevelDiffParam_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 泡泡等级差距修正参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> BubbleLevelDiffParam {
      get { return bubbleLevelDiffParam_; }
    }

    /// <summary>Field number for the "bubbleMaxNum" field.</summary>
    public const int BubbleMaxNumFieldNumber = 193;
    private int bubbleMaxNum_;
    /// <summary>
    /// 泡泡同屏数量限制（仅限同棋盘内）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BubbleMaxNum {
      get { return bubbleMaxNum_; }
      set {
        bubbleMaxNum_ = value;
      }
    }

    /// <summary>Field number for the "buddyApplyLimitNum" field.</summary>
    public const int BuddyApplyLimitNumFieldNumber = 87;
    private int buddyApplyLimitNum_;
    /// <summary>
    /// 好友申请数量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuddyApplyLimitNum {
      get { return buddyApplyLimitNum_; }
      set {
        buddyApplyLimitNum_ = value;
      }
    }

    /// <summary>Field number for the "buddyApplyLimitTime" field.</summary>
    public const int BuddyApplyLimitTimeFieldNumber = 88;
    private int buddyApplyLimitTime_;
    /// <summary>
    /// 好友申请时间上限（天）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuddyApplyLimitTime {
      get { return buddyApplyLimitTime_; }
      set {
        buddyApplyLimitTime_ = value;
      }
    }

    /// <summary>Field number for the "buddyEnergyDailyLimit" field.</summary>
    public const int BuddyEnergyDailyLimitFieldNumber = 89;
    private int buddyEnergyDailyLimit_;
    /// <summary>
    /// 好友功能中每日玩家可领取的体力上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuddyEnergyDailyLimit {
      get { return buddyEnergyDailyLimit_; }
      set {
        buddyEnergyDailyLimit_ = value;
      }
    }

    /// <summary>Field number for the "buddyEnergyEachSent" field.</summary>
    public const int BuddyEnergyEachSentFieldNumber = 90;
    private int buddyEnergyEachSent_;
    /// <summary>
    /// 好友功能中每次赠送体力对方获得的体力数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuddyEnergyEachSent {
      get { return buddyEnergyEachSent_; }
      set {
        buddyEnergyEachSent_ = value;
      }
    }

    /// <summary>Field number for the "buddyVisitExtraReward" field.</summary>
    public const int BuddyVisitExtraRewardFieldNumber = 91;
    private int buddyVisitExtraReward_;
    /// <summary>
    /// 每日拜访达到上限可领取的额外奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuddyVisitExtraReward {
      get { return buddyVisitExtraReward_; }
      set {
        buddyVisitExtraReward_ = value;
      }
    }

    /// <summary>Field number for the "buddyVisitLimit" field.</summary>
    public const int BuddyVisitLimitFieldNumber = 92;
    private int buddyVisitLimit_;
    /// <summary>
    /// 每日拜访好友可领取奖励的上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuddyVisitLimit {
      get { return buddyVisitLimit_; }
      set {
        buddyVisitLimit_ = value;
      }
    }

    /// <summary>Field number for the "buddyVisitReward" field.</summary>
    public const int BuddyVisitRewardFieldNumber = 93;
    private static readonly pb::FieldCodec<string> _repeated_buddyVisitReward_codec
        = pb::FieldCodec.ForString(746);
    private readonly pbc::RepeatedField<string> buddyVisitReward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 每日拜访奖励随机项（冒号分隔奖励id、奖励数量、权重，逗号分隔随机项）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> BuddyVisitReward {
      get { return buddyVisitReward_; }
    }

    /// <summary>Field number for the "cardTradeGroupLink" field.</summary>
    public const int CardTradeGroupLinkFieldNumber = 240;
    private string cardTradeGroupLink_ = "";
    /// <summary>
    /// 换卡-卡片交易群地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CardTradeGroupLink {
      get { return cardTradeGroupLink_; }
      set {
        cardTradeGroupLink_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dailyOrderReward" field.</summary>
    public const int DailyOrderRewardFieldNumber = 94;
    private int dailyOrderReward_;
    /// <summary>
    /// 每日订单的奖励箱子id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyOrderReward {
      get { return dailyOrderReward_; }
      set {
        dailyOrderReward_ = value;
      }
    }

    /// <summary>Field number for the "dailyTaskNums" field.</summary>
    public const int DailyTaskNumsFieldNumber = 95;
    private static readonly pbc::MapField<int, int>.Codec _map_dailyTaskNums_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 762);
    private readonly pbc::MapField<int, int> dailyTaskNums_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 各个随机池每日任务数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> DailyTaskNums {
      get { return dailyTaskNums_; }
    }

    /// <summary>Field number for the "deRefreshUtc" field.</summary>
    public const int DeRefreshUtcFieldNumber = 188;
    private int deRefreshUtc_;
    /// <summary>
    /// 每日任务刷新的utc-0时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeRefreshUtc {
      get { return deRefreshUtc_; }
      set {
        deRefreshUtc_ = value;
      }
    }

    /// <summary>Field number for the "decoShopRefreshGem" field.</summary>
    public const int DecoShopRefreshGemFieldNumber = 96;
    private int decoShopRefreshGem_;
    /// <summary>
    /// 家具商店刷新钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DecoShopRefreshGem {
      get { return decoShopRefreshGem_; }
      set {
        decoShopRefreshGem_ = value;
      }
    }

    /// <summary>Field number for the "decoShopRefreshInterval" field.</summary>
    public const int DecoShopRefreshIntervalFieldNumber = 97;
    private int decoShopRefreshInterval_;
    /// <summary>
    /// 家具商店刷新秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DecoShopRefreshInterval {
      get { return decoShopRefreshInterval_; }
      set {
        decoShopRefreshInterval_ = value;
      }
    }

    /// <summary>Field number for the "defaultHome" field.</summary>
    public const int DefaultHomeFieldNumber = 98;
    private static readonly pb::FieldCodec<int> _repeated_defaultHome_codec
        = pb::FieldCodec.ForInt32(786);
    private readonly pbc::RepeatedField<int> defaultHome_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 默认墙纸和地板
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DefaultHome {
      get { return defaultHome_; }
    }

    /// <summary>Field number for the "defaultRolePart" field.</summary>
    public const int DefaultRolePartFieldNumber = 99;
    private static readonly pb::FieldCodec<int> _repeated_defaultRolePart_codec
        = pb::FieldCodec.ForInt32(794);
    private readonly pbc::RepeatedField<int> defaultRolePart_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 默认装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DefaultRolePart {
      get { return defaultRolePart_; }
    }

    /// <summary>Field number for the "demRefreshWeekday" field.</summary>
    public const int DemRefreshWeekdayFieldNumber = 189;
    private int demRefreshWeekday_;
    /// <summary>
    /// 每日任务里程碑周几刷新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DemRefreshWeekday {
      get { return demRefreshWeekday_; }
      set {
        demRefreshWeekday_ = value;
      }
    }

    /// <summary>Field number for the "detectiveUnlockLevel" field.</summary>
    public const int DetectiveUnlockLevelFieldNumber = 100;
    private int detectiveUnlockLevel_;
    /// <summary>
    /// 梦境寻物可玩等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DetectiveUnlockLevel {
      get { return detectiveUnlockLevel_; }
      set {
        detectiveUnlockLevel_ = value;
      }
    }

    /// <summary>Field number for the "diffApiTimeout" field.</summary>
    public const int DiffApiTimeoutFieldNumber = 263;
    private int diffApiTimeout_;
    /// <summary>
    /// 难度API的超时时间（毫秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DiffApiTimeout {
      get { return diffApiTimeout_; }
      set {
        diffApiTimeout_ = value;
      }
    }

    /// <summary>Field number for the "exitNewUser" field.</summary>
    public const int ExitNewUserFieldNumber = 215;
    private int exitNewUser_;
    /// <summary>
    /// 强制退出新手期的等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExitNewUser {
      get { return exitNewUser_; }
      set {
        exitNewUser_ = value;
      }
    }

    /// <summary>Field number for the "eyeBaseColor" field.</summary>
    public const int EyeBaseColorFieldNumber = 101;
    private string eyeBaseColor_ = "";
    /// <summary>
    /// 眼基础色(hsv). h:s:v
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EyeBaseColor {
      get { return eyeBaseColor_; }
      set {
        eyeBaseColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fishBoardRepeatNum" field.</summary>
    public const int FishBoardRepeatNumFieldNumber = 260;
    private int fishBoardRepeatNum_;
    /// <summary>
    /// 钓鱼棋盘，某个鱼星星全部获得以后，再抽中x次后，权重(FishInfo.randomWeight)变为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishBoardRepeatNum {
      get { return fishBoardRepeatNum_; }
      set {
        fishBoardRepeatNum_ = value;
      }
    }

    /// <summary>Field number for the "floorDecoDisplay" field.</summary>
    public const int FloorDecoDisplayFieldNumber = 102;
    private string floorDecoDisplay_ = "";
    /// <summary>
    /// 地板默认展示模型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FloorDecoDisplay {
      get { return floorDecoDisplay_; }
      set {
        floorDecoDisplay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "freeBubbleCount" field.</summary>
    public const int FreeBubbleCountFieldNumber = 211;
    private static readonly pbc::MapField<int, int>.Codec _map_freeBubbleCount_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 1690);
    private readonly pbc::MapField<int, int> freeBubbleCount_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 棋盘ID:免费泡泡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> FreeBubbleCount {
      get { return freeBubbleCount_; }
    }

    /// <summary>Field number for the "freeEnergyClaimCost" field.</summary>
    public const int FreeEnergyClaimCostFieldNumber = 103;
    private static readonly pb::FieldCodec<int> _repeated_freeEnergyClaimCost_codec
        = pb::FieldCodec.ForInt32(826);
    private readonly pbc::RepeatedField<int> freeEnergyClaimCost_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 领体力的金币花费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FreeEnergyClaimCost {
      get { return freeEnergyClaimCost_; }
    }

    /// <summary>Field number for the "freeEnergyClaimNum" field.</summary>
    public const int FreeEnergyClaimNumFieldNumber = 104;
    private static readonly pb::FieldCodec<int> _repeated_freeEnergyClaimNum_codec
        = pb::FieldCodec.ForInt32(834);
    private readonly pbc::RepeatedField<int> freeEnergyClaimNum_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 免费领体力的体力id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FreeEnergyClaimNum {
      get { return freeEnergyClaimNum_; }
    }

    /// <summary>Field number for the "freeEnergyClaimTime" field.</summary>
    public const int FreeEnergyClaimTimeFieldNumber = 105;
    private static readonly pbc::MapField<int, int>.Codec _map_freeEnergyClaimTime_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 842);
    private readonly pbc::MapField<int, int> freeEnergyClaimTime_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 免费领体力的local时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> FreeEnergyClaimTime {
      get { return freeEnergyClaimTime_; }
    }

    /// <summary>Field number for the "freeEnergyNotification" field.</summary>
    public const int FreeEnergyNotificationFieldNumber = 106;
    private static readonly pbc::MapField<int, int>.Codec _map_freeEnergyNotification_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 850);
    private readonly pbc::MapField<int, int> freeEnergyNotification_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 推送体力领取的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> FreeEnergyNotification {
      get { return freeEnergyNotification_; }
    }

    /// <summary>Field number for the "freeRechargeTimes" field.</summary>
    public const int FreeRechargeTimesFieldNumber = 107;
    private int freeRechargeTimes_;
    /// <summary>
    /// 免费加速点击生成器次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeRechargeTimes {
      get { return freeRechargeTimes_; }
      set {
        freeRechargeTimes_ = value;
      }
    }

    /// <summary>Field number for the "freeRolePart" field.</summary>
    public const int FreeRolePartFieldNumber = 108;
    private static readonly pb::FieldCodec<int> _repeated_freeRolePart_codec
        = pb::FieldCodec.ForInt32(866);
    private readonly pbc::RepeatedField<int> freeRolePart_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 初始免费装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FreeRolePart {
      get { return freeRolePart_; }
    }

    /// <summary>Field number for the "freeSpeedUpTimes" field.</summary>
    public const int FreeSpeedUpTimesFieldNumber = 109;
    private int freeSpeedUpTimes_;
    /// <summary>
    /// 免费加速宝箱类棋子次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeSpeedUpTimes {
      get { return freeSpeedUpTimes_; }
      set {
        freeSpeedUpTimes_ = value;
      }
    }

    /// <summary>Field number for the "friendLimit" field.</summary>
    public const int FriendLimitFieldNumber = 110;
    private int friendLimit_;
    /// <summary>
    /// 最大好友数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FriendLimit {
      get { return friendLimit_; }
      set {
        friendLimit_ = value;
      }
    }

    /// <summary>Field number for the "friendOpinionFriendship" field.</summary>
    public const int FriendOpinionFriendshipFieldNumber = 111;
    private int friendOpinionFriendship_;
    /// <summary>
    /// 评价增加的好感度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FriendOpinionFriendship {
      get { return friendOpinionFriendship_; }
      set {
        friendOpinionFriendship_ = value;
      }
    }

    /// <summary>Field number for the "frozenItemDeadWeight" field.</summary>
    public const int FrozenItemDeadWeightFieldNumber = 272;
    private static readonly pb::FieldCodec<string> _repeated_frozenItemDeadWeight_codec
        = pb::FieldCodec.ForString(2178);
    private readonly pbc::RepeatedField<string> frozenItemDeadWeight_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 冰冻棋子过期后变成的棋子ID按权重随机结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FrozenItemDeadWeight {
      get { return frozenItemDeadWeight_; }
    }

    /// <summary>Field number for the "galleryFingerLv" field.</summary>
    public const int GalleryFingerLvFieldNumber = 195;
    private int galleryFingerLv_;
    /// <summary>
    /// 图鉴入口从多少级开始不再提示手指动画
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GalleryFingerLv {
      get { return galleryFingerLv_; }
      set {
        galleryFingerLv_ = value;
      }
    }

    /// <summary>Field number for the "giftAutoRollingTime" field.</summary>
    public const int GiftAutoRollingTimeFieldNumber = 112;
    private int giftAutoRollingTime_;
    /// <summary>
    /// 礼包多久自动滚动1次（s）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GiftAutoRollingTime {
      get { return giftAutoRollingTime_; }
      set {
        giftAutoRollingTime_ = value;
      }
    }

    /// <summary>Field number for the "giftBoxStopShaking" field.</summary>
    public const int GiftBoxStopShakingFieldNumber = 197;
    private int giftBoxStopShaking_;
    /// <summary>
    /// 奖励箱停止摇晃的等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GiftBoxStopShaking {
      get { return giftBoxStopShaking_; }
      set {
        giftBoxStopShaking_ = value;
      }
    }

    /// <summary>Field number for the "giveCardNum" field.</summary>
    public const int GiveCardNumFieldNumber = 241;
    private int giveCardNum_;
    /// <summary>
    /// 每日最多给好友送卡的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GiveCardNum {
      get { return giveCardNum_; }
      set {
        giveCardNum_ = value;
      }
    }

    /// <summary>Field number for the "giveCardRefreshUtc" field.</summary>
    public const int GiveCardRefreshUtcFieldNumber = 242;
    private int giveCardRefreshUtc_;
    /// <summary>
    /// 每日好友送卡次数刷新的utc-0时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GiveCardRefreshUtc {
      get { return giveCardRefreshUtc_; }
      set {
        giveCardRefreshUtc_ = value;
      }
    }

    /// <summary>Field number for the "guideMusic" field.</summary>
    public const int GuideMusicFieldNumber = 113;
    private string guideMusic_ = "";
    /// <summary>
    /// 新手引导音乐
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuideMusic {
      get { return guideMusic_; }
      set {
        guideMusic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hairBaseColor" field.</summary>
    public const int HairBaseColorFieldNumber = 114;
    private string hairBaseColor_ = "";
    /// <summary>
    /// 头发基础色(hsv). h:s:v
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HairBaseColor {
      get { return hairBaseColor_; }
      set {
        hairBaseColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "initIdleCoin" field.</summary>
    public const int InitIdleCoinFieldNumber = 115;
    private string initIdleCoin_ = "";
    /// <summary>
    /// 初始idlecoin
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InitIdleCoin {
      get { return initIdleCoin_; }
      set {
        initIdleCoin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inventoryInitCap" field.</summary>
    public const int InventoryInitCapFieldNumber = 116;
    private int inventoryInitCap_;
    /// <summary>
    /// 背包初始多少格子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InventoryInitCap {
      get { return inventoryInitCap_; }
      set {
        inventoryInitCap_ = value;
      }
    }

    /// <summary>Field number for the "inventoryProducerExtraGrid" field.</summary>
    public const int InventoryProducerExtraGridFieldNumber = 117;
    private int inventoryProducerExtraGrid_;
    /// <summary>
    /// 生成器背包提前显示几个格子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InventoryProducerExtraGrid {
      get { return inventoryProducerExtraGrid_; }
      set {
        inventoryProducerExtraGrid_ = value;
      }
    }

    /// <summary>Field number for the "inviteGemRewardNum" field.</summary>
    public const int InviteGemRewardNumFieldNumber = 118;
    private int inviteGemRewardNum_;
    /// <summary>
    /// 邀请他人可获得钻石奖励数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InviteGemRewardNum {
      get { return inviteGemRewardNum_; }
      set {
        inviteGemRewardNum_ = value;
      }
    }

    /// <summary>Field number for the "invitedGemRewardNum" field.</summary>
    public const int InvitedGemRewardNumFieldNumber = 119;
    private int invitedGemRewardNum_;
    /// <summary>
    /// 输入邀请码可获得钻石奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvitedGemRewardNum {
      get { return invitedGemRewardNum_; }
      set {
        invitedGemRewardNum_ = value;
      }
    }

    /// <summary>Field number for the "isAndFacebook" field.</summary>
    public const int IsAndFacebookFieldNumber = 245;
    private bool isAndFacebook_;
    /// <summary>
    /// 第三方绑定：是否开启And fb账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAndFacebook {
      get { return isAndFacebook_; }
      set {
        isAndFacebook_ = value;
      }
    }

    /// <summary>Field number for the "isAndGoogle" field.</summary>
    public const int IsAndGoogleFieldNumber = 246;
    private bool isAndGoogle_;
    /// <summary>
    /// 第三方绑定：是否开启And google账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAndGoogle {
      get { return isAndGoogle_; }
      set {
        isAndGoogle_ = value;
      }
    }

    /// <summary>Field number for the "isFaq" field.</summary>
    public const int IsFaqFieldNumber = 239;
    private bool isFaq_;
    /// <summary>
    /// 点击客服功能时，是否拉起FAQ界面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFaq {
      get { return isFaq_; }
      set {
        isFaq_ = value;
      }
    }

    /// <summary>Field number for the "isInAppReview" field.</summary>
    public const int IsInAppReviewFieldNumber = 120;
    private bool isInAppReview_;
    /// <summary>
    /// 是否处于审核状态（仅ios有效）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInAppReview {
      get { return isInAppReview_; }
      set {
        isInAppReview_ = value;
      }
    }

    /// <summary>Field number for the "isIosApple" field.</summary>
    public const int IsIosAppleFieldNumber = 247;
    private bool isIosApple_;
    /// <summary>
    /// 第三方绑定：是否开启ios apple账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIosApple {
      get { return isIosApple_; }
      set {
        isIosApple_ = value;
      }
    }

    /// <summary>Field number for the "isIosFacebook" field.</summary>
    public const int IsIosFacebookFieldNumber = 248;
    private bool isIosFacebook_;
    /// <summary>
    /// 第三方绑定：是否开启ios fb账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIosFacebook {
      get { return isIosFacebook_; }
      set {
        isIosFacebook_ = value;
      }
    }

    /// <summary>Field number for the "isIosGoogle" field.</summary>
    public const int IsIosGoogleFieldNumber = 249;
    private bool isIosGoogle_;
    /// <summary>
    /// 第三方绑定：是否开启ios google账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsIosGoogle {
      get { return isIosGoogle_; }
      set {
        isIosGoogle_ = value;
      }
    }

    /// <summary>Field number for the "isNewOrderView" field.</summary>
    public const int IsNewOrderViewFieldNumber = 258;
    private bool isNewOrderView_;
    /// <summary>
    /// 是否启用新版订单视觉表现
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNewOrderView {
      get { return isNewOrderView_; }
      set {
        isNewOrderView_ = value;
      }
    }

    /// <summary>Field number for the "isOrderApiOnlyWhitelist" field.</summary>
    public const int IsOrderApiOnlyWhitelistFieldNumber = 226;
    private bool isOrderApiOnlyWhitelist_;
    /// <summary>
    /// 是否仅有白名单用户才能使用订单API内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOrderApiOnlyWhitelist {
      get { return isOrderApiOnlyWhitelist_; }
      set {
        isOrderApiOnlyWhitelist_ = value;
      }
    }

    /// <summary>Field number for the "islandChangeItemGold" field.</summary>
    public const int IslandChangeItemGoldFieldNumber = 121;
    private static readonly pb::FieldCodec<string> _repeated_islandChangeItemGold_codec
        = pb::FieldCodec.ForString(970);
    private readonly pbc::RepeatedField<string> islandChangeItemGold_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 换岛流程中棋盘棋子与金条的对应关系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> IslandChangeItemGold {
      get { return islandChangeItemGold_; }
    }

    /// <summary>Field number for the "itemScaleTestB" field.</summary>
    public const int ItemScaleTestBFieldNumber = 214;
    private static readonly pbc::MapField<int, int>.Codec _map_itemScaleTestB_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 1714);
    private readonly pbc::MapField<int, int> itemScaleTestB_ = new pbc::MapField<int, int>();
    /// <summary>
    /// [ab_info.9]B版棋盘上的棋子需要放大到这个比例（百分比）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> ItemScaleTestB {
      get { return itemScaleTestB_; }
    }

    /// <summary>Field number for the "luckyBoxCD" field.</summary>
    public const int LuckyBoxCDFieldNumber = 122;
    private static readonly pb::FieldCodec<int> _repeated_luckyBoxCD_codec
        = pb::FieldCodec.ForInt32(978);
    private readonly pbc::RepeatedField<int> luckyBoxCD_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 幸运礼盒cd范围(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LuckyBoxCD {
      get { return luckyBoxCD_; }
    }

    /// <summary>Field number for the "luckyBoxLimit" field.</summary>
    public const int LuckyBoxLimitFieldNumber = 123;
    private int luckyBoxLimit_;
    /// <summary>
    /// 幸运礼盒每日上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LuckyBoxLimit {
      get { return luckyBoxLimit_; }
      set {
        luckyBoxLimit_ = value;
      }
    }

    /// <summary>Field number for the "luckyBoxNum" field.</summary>
    public const int LuckyBoxNumFieldNumber = 124;
    private int luckyBoxNum_;
    /// <summary>
    /// 幸运礼盒同时显示的数量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LuckyBoxNum {
      get { return luckyBoxNum_; }
      set {
        luckyBoxNum_ = value;
      }
    }

    /// <summary>Field number for the "luckyWheelAdsCount" field.</summary>
    public const int LuckyWheelAdsCountFieldNumber = 125;
    private int luckyWheelAdsCount_;
    /// <summary>
    /// 幸运转盘广告数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LuckyWheelAdsCount {
      get { return luckyWheelAdsCount_; }
      set {
        luckyWheelAdsCount_ = value;
      }
    }

    /// <summary>Field number for the "luckyWheelFreeCount" field.</summary>
    public const int LuckyWheelFreeCountFieldNumber = 126;
    private int luckyWheelFreeCount_;
    /// <summary>
    /// 幸运转盘免费数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LuckyWheelFreeCount {
      get { return luckyWheelFreeCount_; }
      set {
        luckyWheelFreeCount_ = value;
      }
    }

    /// <summary>Field number for the "luckyWheelGemCost" field.</summary>
    public const int LuckyWheelGemCostFieldNumber = 127;
    private int luckyWheelGemCost_;
    /// <summary>
    /// 幸运转盘钻石耗费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LuckyWheelGemCost {
      get { return luckyWheelGemCost_; }
      set {
        luckyWheelGemCost_ = value;
      }
    }

    /// <summary>Field number for the "luckyWheelGemCount" field.</summary>
    public const int LuckyWheelGemCountFieldNumber = 128;
    private int luckyWheelGemCount_;
    /// <summary>
    /// 幸运转盘钻石数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LuckyWheelGemCount {
      get { return luckyWheelGemCount_; }
      set {
        luckyWheelGemCount_ = value;
      }
    }

    /// <summary>Field number for the "lvPopupCardAlbum" field.</summary>
    public const int LvPopupCardAlbumFieldNumber = 217;
    private int lvPopupCardAlbum_;
    /// <summary>
    /// 升级流程中的强弹等级（集卡预告）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LvPopupCardAlbum {
      get { return lvPopupCardAlbum_; }
      set {
        lvPopupCardAlbum_ = value;
      }
    }

    /// <summary>Field number for the "lvPopupCloseDialog" field.</summary>
    public const int LvPopupCloseDialogFieldNumber = 223;
    private int lvPopupCloseDialog_;
    /// <summary>
    /// 升级流程中的强弹等级（关闭对话提醒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LvPopupCloseDialog {
      get { return lvPopupCloseDialog_; }
      set {
        lvPopupCloseDialog_ = value;
      }
    }

    /// <summary>Field number for the "lvPopupDE" field.</summary>
    public const int LvPopupDEFieldNumber = 218;
    private int lvPopupDE_;
    /// <summary>
    /// 升级流程中的强弹等级（每日任务）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LvPopupDE {
      get { return lvPopupDE_; }
      set {
        lvPopupDE_ = value;
      }
    }

    /// <summary>Field number for the "lvPopupNewSession" field.</summary>
    public const int LvPopupNewSessionFieldNumber = 219;
    private int lvPopupNewSession_;
    /// <summary>
    /// 升级流程中的强弹等级（新手弹脸礼包）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LvPopupNewSession {
      get { return lvPopupNewSession_; }
      set {
        lvPopupNewSession_ = value;
      }
    }

    /// <summary>Field number for the "lvPopupNewSessionId" field.</summary>
    public const int LvPopupNewSessionIdFieldNumber = 220;
    private int lvPopupNewSessionId_;
    /// <summary>
    /// 升级流程中的强弹的EventTrigger.id（新手弹脸礼包）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LvPopupNewSessionId {
      get { return lvPopupNewSessionId_; }
      set {
        lvPopupNewSessionId_ = value;
      }
    }

    /// <summary>Field number for the "mailSystemMax" field.</summary>
    public const int MailSystemMaxFieldNumber = 129;
    private int mailSystemMax_;
    /// <summary>
    /// 邮件存储上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MailSystemMax {
      get { return mailSystemMax_; }
      set {
        mailSystemMax_ = value;
      }
    }

    /// <summary>Field number for the "mapBuildStartAim" field.</summary>
    public const int MapBuildStartAimFieldNumber = 202;
    private int mapBuildStartAim_;
    /// <summary>
    /// 返回meta按钮到多少级开始出现箭头
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapBuildStartAim {
      get { return mapBuildStartAim_; }
      set {
        mapBuildStartAim_ = value;
      }
    }

    /// <summary>Field number for the "mapBuildStopAim" field.</summary>
    public const int MapBuildStopAimFieldNumber = 200;
    private int mapBuildStopAim_;
    /// <summary>
    /// 返回meta按钮到多少级停止出现箭头
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapBuildStopAim {
      get { return mapBuildStopAim_; }
      set {
        mapBuildStopAim_ = value;
      }
    }

    /// <summary>Field number for the "marketRefresh" field.</summary>
    public const int MarketRefreshFieldNumber = 130;
    private int marketRefresh_;
    /// <summary>
    /// 商城第3个页签刷新间隔时间（秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarketRefresh {
      get { return marketRefresh_; }
      set {
        marketRefresh_ = value;
      }
    }

    /// <summary>Field number for the "marketRefreshNum" field.</summary>
    public const int MarketRefreshNumFieldNumber = 131;
    private int marketRefreshNum_;
    /// <summary>
    /// 商城订单随机商品列表换一换价格（固定为钻石）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarketRefreshNum {
      get { return marketRefreshNum_; }
      set {
        marketRefreshNum_ = value;
      }
    }

    /// <summary>Field number for the "marketUtcClock" field.</summary>
    public const int MarketUtcClockFieldNumber = 132;
    private int marketUtcClock_;
    /// <summary>
    /// 商城刷新的utc-0时间（北京18:00/纽约05:00）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarketUtcClock {
      get { return marketUtcClock_; }
      set {
        marketUtcClock_ = value;
      }
    }

    /// <summary>Field number for the "maxFameLevelToViewActivityFeed" field.</summary>
    public const int MaxFameLevelToViewActivityFeedFieldNumber = 133;
    private int maxFameLevelToViewActivityFeed_;
    /// <summary>
    /// 地位达到多少级可以看到活动feed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxFameLevelToViewActivityFeed {
      get { return maxFameLevelToViewActivityFeed_; }
      set {
        maxFameLevelToViewActivityFeed_ = value;
      }
    }

    /// <summary>Field number for the "maxPullFriendInfoNum" field.</summary>
    public const int MaxPullFriendInfoNumFieldNumber = 243;
    private int maxPullFriendInfoNum_;
    /// <summary>
    /// 一次最多向服务器拉取的好友信息数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPullFriendInfoNum {
      get { return maxPullFriendInfoNum_; }
      set {
        maxPullFriendInfoNum_ = value;
      }
    }

    /// <summary>Field number for the "maxToastId" field.</summary>
    public const int MaxToastIdFieldNumber = 273;
    private int maxToastId_;
    /// <summary>
    /// 链条中，最大等级的链条id需要使用maxToastId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxToastId {
      get { return maxToastId_; }
      set {
        maxToastId_ = value;
      }
    }

    /// <summary>Field number for the "maxToolCount" field.</summary>
    public const int MaxToolCountFieldNumber = 201;
    private int maxToolCount_;
    /// <summary>
    /// 工具箱从cost中筛选工具种类上限个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxToolCount {
      get { return maxToolCount_; }
      set {
        maxToolCount_ = value;
      }
    }

    /// <summary>Field number for the "mergeBonus" field.</summary>
    public const int MergeBonusFieldNumber = 134;
    private int mergeBonus_;
    /// <summary>
    /// 掉落的额外物品ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MergeBonus {
      get { return mergeBonus_; }
      set {
        mergeBonus_ = value;
      }
    }

    /// <summary>Field number for the "mergeBonusLevel" field.</summary>
    public const int MergeBonusLevelFieldNumber = 135;
    private int mergeBonusLevel_;
    /// <summary>
    /// 合成N级及以上物品掉落额外物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MergeBonusLevel {
      get { return mergeBonusLevel_; }
      set {
        mergeBonusLevel_ = value;
      }
    }

    /// <summary>Field number for the "mergeEnergyAutoMax" field.</summary>
    public const int MergeEnergyAutoMaxFieldNumber = 136;
    private int mergeEnergyAutoMax_;
    /// <summary>
    /// 合成能量最多加到多少
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MergeEnergyAutoMax {
      get { return mergeEnergyAutoMax_; }
      set {
        mergeEnergyAutoMax_ = value;
      }
    }

    /// <summary>Field number for the "mergeEnergyAutoSec" field.</summary>
    public const int MergeEnergyAutoSecFieldNumber = 137;
    private int mergeEnergyAutoSec_;
    /// <summary>
    /// 多少秒加一次合成能量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MergeEnergyAutoSec {
      get { return mergeEnergyAutoSec_; }
      set {
        mergeEnergyAutoSec_ = value;
      }
    }

    /// <summary>Field number for the "mergeEnergyPrice" field.</summary>
    public const int MergeEnergyPriceFieldNumber = 138;
    private static readonly pb::FieldCodec<int> _repeated_mergeEnergyPrice_codec
        = pb::FieldCodec.ForInt32(1106);
    private readonly pbc::RepeatedField<int> mergeEnergyPrice_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 能量加100点多少钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MergeEnergyPrice {
      get { return mergeEnergyPrice_; }
    }

    /// <summary>Field number for the "mergeRemindTriggerTime" field.</summary>
    public const int MergeRemindTriggerTimeFieldNumber = 225;
    private int mergeRemindTriggerTime_;
    /// <summary>
    /// 合成提醒触发等待时间（毫秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MergeRemindTriggerTime {
      get { return mergeRemindTriggerTime_; }
      set {
        mergeRemindTriggerTime_ = value;
      }
    }

    /// <summary>Field number for the "mergeTutorialInterval" field.</summary>
    public const int MergeTutorialIntervalFieldNumber = 198;
    private int mergeTutorialInterval_;
    /// <summary>
    /// 挂机弹出合成教学需要挂机多久（毫秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MergeTutorialInterval {
      get { return mergeTutorialInterval_; }
      set {
        mergeTutorialInterval_ = value;
      }
    }

    /// <summary>Field number for the "mergeTutorialStop" field.</summary>
    public const int MergeTutorialStopFieldNumber = 199;
    private int mergeTutorialStop_;
    /// <summary>
    /// 挂机弹出合成教学到多少级停止弹出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MergeTutorialStop {
      get { return mergeTutorialStop_; }
      set {
        mergeTutorialStop_ = value;
      }
    }

    /// <summary>Field number for the "mouthBaseColor" field.</summary>
    public const int MouthBaseColorFieldNumber = 139;
    private string mouthBaseColor_ = "";
    /// <summary>
    /// 嘴基础色(hsv). h:s:v
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MouthBaseColor {
      get { return mouthBaseColor_; }
      set {
        mouthBaseColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mysteryStoreCustomNum" field.</summary>
    public const int MysteryStoreCustomNumFieldNumber = 140;
    private int mysteryStoreCustomNum_;
    /// <summary>
    /// 商店定制格子数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MysteryStoreCustomNum {
      get { return mysteryStoreCustomNum_; }
      set {
        mysteryStoreCustomNum_ = value;
      }
    }

    /// <summary>Field number for the "mysteryStoreCustomRate" field.</summary>
    public const int MysteryStoreCustomRateFieldNumber = 141;
    private int mysteryStoreCustomRate_;
    /// <summary>
    /// 商店每个格子刷出定制物品的概率百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MysteryStoreCustomRate {
      get { return mysteryStoreCustomRate_; }
      set {
        mysteryStoreCustomRate_ = value;
      }
    }

    /// <summary>Field number for the "mysteryStoreRefreshPrice" field.</summary>
    public const int MysteryStoreRefreshPriceFieldNumber = 142;
    private int mysteryStoreRefreshPrice_;
    /// <summary>
    /// 神秘商店非首次手动刷新的钻石价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MysteryStoreRefreshPrice {
      get { return mysteryStoreRefreshPrice_; }
      set {
        mysteryStoreRefreshPrice_ = value;
      }
    }

    /// <summary>Field number for the "mysteryStoreRefreshTime" field.</summary>
    public const int MysteryStoreRefreshTimeFieldNumber = 143;
    private static readonly pb::FieldCodec<int> _repeated_mysteryStoreRefreshTime_codec
        = pb::FieldCodec.ForInt32(1146);
    private readonly pbc::RepeatedField<int> mysteryStoreRefreshTime_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 神秘商店刷新的utc时间(必须是小于24）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MysteryStoreRefreshTime {
      get { return mysteryStoreRefreshTime_; }
    }

    /// <summary>Field number for the "nameMax" field.</summary>
    public const int NameMaxFieldNumber = 144;
    private int nameMax_;
    /// <summary>
    /// 玩家或宠物昵称最大字符
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NameMax {
      get { return nameMax_; }
      set {
        nameMax_ = value;
      }
    }

    /// <summary>Field number for the "nameMin" field.</summary>
    public const int NameMinFieldNumber = 145;
    private int nameMin_;
    /// <summary>
    /// 玩家或宠物昵称最小字符
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NameMin {
      get { return nameMin_; }
      set {
        nameMin_ = value;
      }
    }

    /// <summary>Field number for the "newUserGrandPrizeInviteNum" field.</summary>
    public const int NewUserGrandPrizeInviteNumFieldNumber = 146;
    private int newUserGrandPrizeInviteNum_;
    /// <summary>
    /// 需要邀请几个人获得豪华大奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewUserGrandPrizeInviteNum {
      get { return newUserGrandPrizeInviteNum_; }
      set {
        newUserGrandPrizeInviteNum_ = value;
      }
    }

    /// <summary>Field number for the "newUserGrandPrizeReward" field.</summary>
    public const int NewUserGrandPrizeRewardFieldNumber = 147;
    private static readonly pbc::MapField<int, int>.Codec _map_newUserGrandPrizeReward_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 1178);
    private readonly pbc::MapField<int, int> newUserGrandPrizeReward_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 豪华大奖奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> NewUserGrandPrizeReward {
      get { return newUserGrandPrizeReward_; }
    }

    /// <summary>Field number for the "newUserInviteeMaxLevel" field.</summary>
    public const int NewUserInviteeMaxLevelFieldNumber = 148;
    private int newUserInviteeMaxLevel_;
    /// <summary>
    /// 接受邀请时的最大等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewUserInviteeMaxLevel {
      get { return newUserInviteeMaxLevel_; }
      set {
        newUserInviteeMaxLevel_ = value;
      }
    }

    /// <summary>Field number for the "newUserRewardForInvitee" field.</summary>
    public const int NewUserRewardForInviteeFieldNumber = 149;
    private static readonly pbc::MapField<int, int>.Codec _map_newUserRewardForInvitee_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 1194);
    private readonly pbc::MapField<int, int> newUserRewardForInvitee_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 受邀者的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> NewUserRewardForInvitee {
      get { return newUserRewardForInvitee_; }
    }

    /// <summary>Field number for the "newUserRewardForInvitor" field.</summary>
    public const int NewUserRewardForInvitorFieldNumber = 150;
    private static readonly pbc::MapField<int, int>.Codec _map_newUserRewardForInvitor_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 1202);
    private readonly pbc::MapField<int, int> newUserRewardForInvitor_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 邀请者的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> NewUserRewardForInvitor {
      get { return newUserRewardForInvitor_; }
    }

    /// <summary>Field number for the "newUserRewardLevel" field.</summary>
    public const int NewUserRewardLevelFieldNumber = 151;
    private int newUserRewardLevel_;
    /// <summary>
    /// 给予奖励的级别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewUserRewardLevel {
      get { return newUserRewardLevel_; }
      set {
        newUserRewardLevel_ = value;
      }
    }

    /// <summary>Field number for the "normalToastId" field.</summary>
    public const int NormalToastIdFieldNumber = 274;
    private int normalToastId_;
    /// <summary>
    /// 链条中，最大等级的链条id需要使用normalToastId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NormalToastId {
      get { return normalToastId_; }
      set {
        normalToastId_ = value;
      }
    }

    /// <summary>Field number for the "noticeCombackTime" field.</summary>
    public const int NoticeCombackTimeFieldNumber = 208;
    private int noticeCombackTime_;
    /// <summary>
    /// 定时推送 - 多长时间算作长时间不登入游戏（秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoticeCombackTime {
      get { return noticeCombackTime_; }
      set {
        noticeCombackTime_ = value;
      }
    }

    /// <summary>Field number for the "noticeEventValidTime" field.</summary>
    public const int NoticeEventValidTimeFieldNumber = 264;
    private int noticeEventValidTime_;
    /// <summary>
    /// 依据登录时刻创建x天内的推送实例（天）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoticeEventValidTime {
      get { return noticeEventValidTime_; }
      set {
        noticeEventValidTime_ = value;
      }
    }

    /// <summary>Field number for the "notifiPopupEventTheme" field.</summary>
    public const int NotifiPopupEventThemeFieldNumber = 221;
    private int notifiPopupEventTheme_;
    /// <summary>
    /// 推送提醒弹窗ID（EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NotifiPopupEventTheme {
      get { return notifiPopupEventTheme_; }
      set {
        notifiPopupEventTheme_ = value;
      }
    }

    /// <summary>Field number for the "notifiPopupShutdownLv" field.</summary>
    public const int NotifiPopupShutdownLvFieldNumber = 222;
    private int notifiPopupShutdownLv_;
    /// <summary>
    /// 推送提醒弹窗关闭等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NotifiPopupShutdownLv {
      get { return notifiPopupShutdownLv_; }
      set {
        notifiPopupShutdownLv_ = value;
      }
    }

    /// <summary>Field number for the "notificationEnergyBonus" field.</summary>
    public const int NotificationEnergyBonusFieldNumber = 152;
    private static readonly pb::FieldCodec<int> _repeated_notificationEnergyBonus_codec
        = pb::FieldCodec.ForInt32(1218);
    private readonly pbc::RepeatedField<int> notificationEnergyBonus_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 体力领取第几次推送
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NotificationEnergyBonus {
      get { return notificationEnergyBonus_; }
    }

    /// <summary>Field number for the "oldUserLetterDuration" field.</summary>
    public const int OldUserLetterDurationFieldNumber = 153;
    private int oldUserLetterDuration_;
    /// <summary>
    /// 给老用户的信显示时长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldUserLetterDuration {
      get { return oldUserLetterDuration_; }
      set {
        oldUserLetterDuration_ = value;
      }
    }

    /// <summary>Field number for the "orderApiLiveopsGrade" field.</summary>
    public const int OrderApiLiveopsGradeFieldNumber = 252;
    private int orderApiLiveopsGrade_;
    /// <summary>
    /// 订单API v2：接口需要关注的UserGrade.id，使用其value代表活动难度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderApiLiveopsGrade {
      get { return orderApiLiveopsGrade_; }
      set {
        orderApiLiveopsGrade_ = value;
      }
    }

    /// <summary>Field number for the "orderApiPastNum" field.</summary>
    public const int OrderApiPastNumFieldNumber = 251;
    private int orderApiPastNum_;
    /// <summary>
    /// 订单API v2：接口涉及的过去N个随机订单的付出难度与实际难度信息组数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderApiPastNum {
      get { return orderApiPastNum_; }
      set {
        orderApiPastNum_ = value;
      }
    }

    /// <summary>Field number for the "orderCtrlNum" field.</summary>
    public const int OrderCtrlNumFieldNumber = 234;
    private int orderCtrlNum_;
    /// <summary>
    /// 随机订单干预，历史记录中需要记录的受控订单数据数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderCtrlNum {
      get { return orderCtrlNum_; }
      set {
        orderCtrlNum_ = value;
      }
    }

    /// <summary>Field number for the "orderCtrlTooHigh" field.</summary>
    public const int OrderCtrlTooHighFieldNumber = 235;
    private int orderCtrlTooHigh_;
    /// <summary>
    /// 随机订单干预，认为投入率太高的阈值（百分数）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderCtrlTooHigh {
      get { return orderCtrlTooHigh_; }
      set {
        orderCtrlTooHigh_ = value;
      }
    }

    /// <summary>Field number for the "orderCtrlTooHighTarget" field.</summary>
    public const int OrderCtrlTooHighTargetFieldNumber = 237;
    private int orderCtrlTooHighTarget_;
    /// <summary>
    /// 随机订单干预，开始降低难度时的新阈值（百分数）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderCtrlTooHighTarget {
      get { return orderCtrlTooHighTarget_; }
      set {
        orderCtrlTooHighTarget_ = value;
      }
    }

    /// <summary>Field number for the "orderCtrlTooLow" field.</summary>
    public const int OrderCtrlTooLowFieldNumber = 236;
    private int orderCtrlTooLow_;
    /// <summary>
    /// 随机订单干预，认为投入率太低的阈值（百分数）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderCtrlTooLow {
      get { return orderCtrlTooLow_; }
      set {
        orderCtrlTooLow_ = value;
      }
    }

    /// <summary>Field number for the "orderCtrlTooLowTarget" field.</summary>
    public const int OrderCtrlTooLowTargetFieldNumber = 238;
    private int orderCtrlTooLowTarget_;
    /// <summary>
    /// 随机订单干预，开始提高难度时的新阈值（百分数）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderCtrlTooLowTarget {
      get { return orderCtrlTooLowTarget_; }
      set {
        orderCtrlTooLowTarget_ = value;
      }
    }

    /// <summary>Field number for the "orderEnterApiDelay" field.</summary>
    public const int OrderEnterApiDelayFieldNumber = 227;
    private int orderEnterApiDelay_;
    /// <summary>
    /// 订单进场等待API的额外延迟（毫秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderEnterApiDelay {
      get { return orderEnterApiDelay_; }
      set {
        orderEnterApiDelay_ = value;
      }
    }

    /// <summary>Field number for the "orderEnterDelay" field.</summary>
    public const int OrderEnterDelayFieldNumber = 196;
    private int orderEnterDelay_;
    /// <summary>
    /// 订单进场间隔（毫秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderEnterDelay {
      get { return orderEnterDelay_; }
      set {
        orderEnterDelay_ = value;
      }
    }

    /// <summary>Field number for the "orderLimitCount" field.</summary>
    public const int OrderLimitCountFieldNumber = 154;
    private int orderLimitCount_;
    /// <summary>
    /// 场上可出现的NPC上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderLimitCount {
      get { return orderLimitCount_; }
      set {
        orderLimitCount_ = value;
      }
    }

    /// <summary>Field number for the "packApiTimeout" field.</summary>
    public const int PackApiTimeoutFieldNumber = 253;
    private int packApiTimeout_;
    /// <summary>
    /// 礼包API：等待回调的超时时长（毫秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackApiTimeout {
      get { return packApiTimeout_; }
      set {
        packApiTimeout_ = value;
      }
    }

    /// <summary>Field number for the "petNPC" field.</summary>
    public const int PetNPCFieldNumber = 155;
    private int petNPC_;
    /// <summary>
    /// 宠物系统npc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PetNPC {
      get { return petNPC_; }
      set {
        petNPC_ = value;
      }
    }

    /// <summary>Field number for the "popupLimit" field.</summary>
    public const int PopupLimitFieldNumber = 205;
    private int popupLimit_;
    /// <summary>
    /// 每次登入最多弹几次弹脸
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PopupLimit {
      get { return popupLimit_; }
      set {
        popupLimit_ = value;
      }
    }

    /// <summary>Field number for the "popupRefresh" field.</summary>
    public const int PopupRefreshFieldNumber = 206;
    private int popupRefresh_;
    /// <summary>
    /// 每天弹脸次数刷新的UTC-0时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PopupRefresh {
      get { return popupRefresh_; }
      set {
        popupRefresh_ = value;
      }
    }

    /// <summary>Field number for the "postCardIParamIsland1" field.</summary>
    public const int PostCardIParamIsland1FieldNumber = 156;
    private static readonly pb::FieldCodec<float> _repeated_postCardIParamIsland1_codec
        = pb::FieldCodec.ForFloat(1250);
    private readonly pbc::RepeatedField<float> postCardIParamIsland1_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 岛1明信片掉落概率公式参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> PostCardIParamIsland1 {
      get { return postCardIParamIsland1_; }
    }

    /// <summary>Field number for the "postCardParam" field.</summary>
    public const int PostCardParamFieldNumber = 157;
    private static readonly pb::FieldCodec<float> _repeated_postCardParam_codec
        = pb::FieldCodec.ForFloat(1258);
    private readonly pbc::RepeatedField<float> postCardParam_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 明信片掉落概率公式参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> PostCardParam {
      get { return postCardParam_; }
    }

    /// <summary>Field number for the "postcardGiftOthersReward" field.</summary>
    public const int PostcardGiftOthersRewardFieldNumber = 158;
    private static readonly pb::FieldCodec<string> _repeated_postcardGiftOthersReward_codec
        = pb::FieldCodec.ForString(1266);
    private readonly pbc::RepeatedField<string> postcardGiftOthersReward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 赠与他人明信片时获得的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PostcardGiftOthersReward {
      get { return postcardGiftOthersReward_; }
    }

    /// <summary>Field number for the "postcardMinNum" field.</summary>
    public const int PostcardMinNumFieldNumber = 159;
    private int postcardMinNum_;
    /// <summary>
    /// 每日明信片保底合成数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PostcardMinNum {
      get { return postcardMinNum_; }
      set {
        postcardMinNum_ = value;
      }
    }

    /// <summary>Field number for the "pullFriendInfoWaitTime" field.</summary>
    public const int PullFriendInfoWaitTimeFieldNumber = 244;
    private int pullFriendInfoWaitTime_;
    /// <summary>
    /// 拉取好友信息的等待时间（秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PullFriendInfoWaitTime {
      get { return pullFriendInfoWaitTime_; }
      set {
        pullFriendInfoWaitTime_ = value;
      }
    }

    /// <summary>Field number for the "pushShopCD" field.</summary>
    public const int PushShopCDFieldNumber = 160;
    private static readonly pb::FieldCodec<int> _repeated_pushShopCD_codec
        = pb::FieldCodec.ForInt32(1282);
    private readonly pbc::RepeatedField<int> pushShopCD_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 推送商店的cd时间序列(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PushShopCD {
      get { return pushShopCD_; }
    }

    /// <summary>Field number for the "pushShopCDIce" field.</summary>
    public const int PushShopCDIceFieldNumber = 161;
    private static readonly pb::FieldCodec<int> _repeated_pushShopCDIce_codec
        = pb::FieldCodec.ForInt32(1290);
    private readonly pbc::RepeatedField<int> pushShopCDIce_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 推送破冰包的cd时间序列(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PushShopCDIce {
      get { return pushShopCDIce_; }
    }

    /// <summary>Field number for the "pushShopDuration" field.</summary>
    public const int PushShopDurationFieldNumber = 162;
    private int pushShopDuration_;
    /// <summary>
    /// 推送商店商品持续时间(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PushShopDuration {
      get { return pushShopDuration_; }
      set {
        pushShopDuration_ = value;
      }
    }

    /// <summary>Field number for the "pushShopMaxNum" field.</summary>
    public const int PushShopMaxNumFieldNumber = 163;
    private static readonly pbc::MapField<int, int>.Codec _map_pushShopMaxNum_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 1306);
    private readonly pbc::MapField<int, int> pushShopMaxNum_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 礼包商城最大显示数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> PushShopMaxNum {
      get { return pushShopMaxNum_; }
    }

    /// <summary>Field number for the "pushShopPopTimes" field.</summary>
    public const int PushShopPopTimesFieldNumber = 164;
    private static readonly pb::FieldCodec<int> _repeated_pushShopPopTimes_codec
        = pb::FieldCodec.ForInt32(1314);
    private readonly pbc::RepeatedField<int> pushShopPopTimes_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 礼包分别每日弹出次数 UTC，第一个是推送礼包，第二个是破冰包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PushShopPopTimes {
      get { return pushShopPopTimes_; }
    }

    /// <summary>Field number for the "rankBotOrderLimitNum" field.</summary>
    public const int RankBotOrderLimitNumFieldNumber = 165;
    private int rankBotOrderLimitNum_;
    /// <summary>
    /// 小排行榜中放入bot的时机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankBotOrderLimitNum {
      get { return rankBotOrderLimitNum_; }
      set {
        rankBotOrderLimitNum_ = value;
      }
    }

    /// <summary>Field number for the "rankCoinsParam" field.</summary>
    public const int RankCoinsParamFieldNumber = 166;
    private static readonly pb::FieldCodec<int> _repeated_rankCoinsParam_codec
        = pb::FieldCodec.ForInt32(1330);
    private readonly pbc::RepeatedField<int> rankCoinsParam_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 小排行榜最后的奖励金币公式参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RankCoinsParam {
      get { return rankCoinsParam_; }
    }

    /// <summary>Field number for the "rankCoinsParamNew" field.</summary>
    public const int RankCoinsParamNewFieldNumber = 167;
    private static readonly pb::FieldCodec<float> _repeated_rankCoinsParamNew_codec
        = pb::FieldCodec.ForFloat(1338);
    private readonly pbc::RepeatedField<float> rankCoinsParamNew_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 小排行榜最后的奖励金币公式参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> RankCoinsParamNew {
      get { return rankCoinsParamNew_; }
    }

    /// <summary>Field number for the "rankMemberNum" field.</summary>
    public const int RankMemberNumFieldNumber = 168;
    private int rankMemberNum_;
    /// <summary>
    /// 队伍人数上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankMemberNum {
      get { return rankMemberNum_; }
      set {
        rankMemberNum_ = value;
      }
    }

    /// <summary>Field number for the "rankOrderNum" field.</summary>
    public const int RankOrderNumFieldNumber = 169;
    private int rankOrderNum_;
    /// <summary>
    /// 每个小排行榜的目标数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankOrderNum {
      get { return rankOrderNum_; }
      set {
        rankOrderNum_ = value;
      }
    }

    /// <summary>Field number for the "rankingWhitelist" field.</summary>
    public const int RankingWhitelistFieldNumber = 261;
    private static readonly pb::FieldCodec<string> _repeated_rankingWhitelist_codec
        = pb::FieldCodec.ForString(2090);
    private readonly pbc::RepeatedField<string> rankingWhitelist_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 排行榜白名单（test用户可以上榜）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RankingWhitelist {
      get { return rankingWhitelist_; }
    }

    /// <summary>Field number for the "rateBuildingBase" field.</summary>
    public const int RateBuildingBaseFieldNumber = 207;
    private static readonly pb::FieldCodec<int> _repeated_rateBuildingBase_codec
        = pb::FieldCodec.ForInt32(1658);
    private readonly pbc::RepeatedField<int> rateBuildingBase_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 哪个BuildingBase全部建造完成之后，弹出评价引导界面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RateBuildingBase {
      get { return rateBuildingBase_; }
    }

    /// <summary>Field number for the "rateRedirectLv" field.</summary>
    public const int RateRedirectLvFieldNumber = 204;
    private int rateRedirectLv_;
    /// <summary>
    /// 哪个星级及以上，算作高分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RateRedirectLv {
      get { return rateRedirectLv_; }
      set {
        rateRedirectLv_ = value;
      }
    }

    /// <summary>Field number for the "rateTaskOpen" field.</summary>
    public const int RateTaskOpenFieldNumber = 170;
    private static readonly pb::FieldCodec<int> _repeated_rateTaskOpen_codec
        = pb::FieldCodec.ForInt32(1362);
    private readonly pbc::RepeatedField<int> rateTaskOpen_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 弹出评价窗口的task完成时机点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RateTaskOpen {
      get { return rateTaskOpen_; }
    }

    /// <summary>Field number for the "requireTypeADInit" field.</summary>
    public const int RequireTypeADInitFieldNumber = 228;
    private int requireTypeADInit_;
    /// <summary>
    /// 条件函数中，AD的初始值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireTypeADInit {
      get { return requireTypeADInit_; }
      set {
        requireTypeADInit_ = value;
      }
    }

    /// <summary>Field number for the "requireTypeLTInit" field.</summary>
    public const int RequireTypeLTInitFieldNumber = 229;
    private int requireTypeLTInit_;
    /// <summary>
    /// 条件函数中，LT的初始值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireTypeLTInit {
      get { return requireTypeLTInit_; }
      set {
        requireTypeLTInit_ = value;
      }
    }

    /// <summary>Field number for the "requireTypeUtcClock" field.</summary>
    public const int RequireTypeUtcClockFieldNumber = 230;
    private int requireTypeUtcClock_;
    /// <summary>
    /// 条件函数跨天界限的UTC-0时刻
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireTypeUtcClock {
      get { return requireTypeUtcClock_; }
      set {
        requireTypeUtcClock_ = value;
      }
    }

    /// <summary>Field number for the "restartTime" field.</summary>
    public const int RestartTimeFieldNumber = 254;
    private int restartTime_;
    /// <summary>
    /// 控制重新进入游戏需要loading的时间阈值（秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RestartTime {
      get { return restartTime_; }
      set {
        restartTime_ = value;
      }
    }

    /// <summary>Field number for the "serverTimeCheckRange" field.</summary>
    public const int ServerTimeCheckRangeFieldNumber = 259;
    private int serverTimeCheckRange_;
    /// <summary>
    /// 与服务器校验时间时的容错范围（正负）（秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerTimeCheckRange {
      get { return serverTimeCheckRange_; }
      set {
        serverTimeCheckRange_ = value;
      }
    }

    /// <summary>Field number for the "settingFBFollowGem" field.</summary>
    public const int SettingFBFollowGemFieldNumber = 171;
    private int settingFBFollowGem_;
    /// <summary>
    /// 跳转游戏社群奖励的钻石数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SettingFBFollowGem {
      get { return settingFBFollowGem_; }
      set {
        settingFBFollowGem_ = value;
      }
    }

    /// <summary>Field number for the "settingHelpshiftWebsite" field.</summary>
    public const int SettingHelpshiftWebsiteFieldNumber = 172;
    private string settingHelpshiftWebsite_ = "";
    /// <summary>
    /// 跳转helpshift的网页链接
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SettingHelpshiftWebsite {
      get { return settingHelpshiftWebsite_; }
      set {
        settingHelpshiftWebsite_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skinBaseColor" field.</summary>
    public const int SkinBaseColorFieldNumber = 173;
    private string skinBaseColor_ = "";
    /// <summary>
    /// 肤色基础色(hsv). h:s:v
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkinBaseColor {
      get { return skinBaseColor_; }
      set {
        skinBaseColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spdGemTips" field.</summary>
    public const int SpdGemTipsFieldNumber = 271;
    private int spdGemTips_;
    /// <summary>
    /// 弹出二次确认弹板的钻石花费阈值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpdGemTips {
      get { return spdGemTips_; }
      set {
        spdGemTips_ = value;
      }
    }

    /// <summary>Field number for the "spdUpDivide" field.</summary>
    public const int SpdUpDivideFieldNumber = 190;
    private static readonly pb::FieldCodec<int> _repeated_spdUpDivide_codec
        = pb::FieldCodec.ForInt32(1522);
    private readonly pbc::RepeatedField<int> spdUpDivide_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 钻石加速时间分割线（秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SpdUpDivide {
      get { return spdUpDivide_; }
    }

    /// <summary>Field number for the "spdUpParam" field.</summary>
    public const int SpdUpParamFieldNumber = 191;
    private static readonly pb::FieldCodec<int> _repeated_spdUpParam_codec
        = pb::FieldCodec.ForInt32(1530);
    private readonly pbc::RepeatedField<int> spdUpParam_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 钻石加速分割区间价格（秒/钻）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SpdUpParam {
      get { return spdUpParam_; }
    }

    /// <summary>Field number for the "specialStudentCdInterval" field.</summary>
    public const int SpecialStudentCdIntervalFieldNumber = 174;
    private int specialStudentCdInterval_;
    /// <summary>
    /// 特殊背景学生的冷却间隔，单位秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialStudentCdInterval {
      get { return specialStudentCdInterval_; }
      set {
        specialStudentCdInterval_ = value;
      }
    }

    /// <summary>Field number for the "studentAnchorPointAmount" field.</summary>
    public const int StudentAnchorPointAmountFieldNumber = 175;
    private static readonly pb::FieldCodec<int> _repeated_studentAnchorPointAmount_codec
        = pb::FieldCodec.ForInt32(1402);
    private readonly pbc::RepeatedField<int> studentAnchorPointAmount_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 学生运动轨迹选取的锚点数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StudentAnchorPointAmount {
      get { return studentAnchorPointAmount_; }
    }

    /// <summary>Field number for the "studentGroupTotal" field.</summary>
    public const int StudentGroupTotalFieldNumber = 176;
    private static readonly pb::FieldCodec<int> _repeated_studentGroupTotal_codec
        = pb::FieldCodec.ForInt32(1410);
    private readonly pbc::RepeatedField<int> studentGroupTotal_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 每批产生的学生数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StudentGroupTotal {
      get { return studentGroupTotal_; }
    }

    /// <summary>Field number for the "studentShowInterval" field.</summary>
    public const int StudentShowIntervalFieldNumber = 177;
    private static readonly pb::FieldCodec<int> _repeated_studentShowInterval_codec
        = pb::FieldCodec.ForInt32(1418);
    private readonly pbc::RepeatedField<int> studentShowInterval_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 背景学生产生的间隔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StudentShowInterval {
      get { return studentShowInterval_; }
    }

    /// <summary>Field number for the "sunRankMemberNum" field.</summary>
    public const int SunRankMemberNumFieldNumber = 178;
    private int sunRankMemberNum_;
    /// <summary>
    /// 太阳排行榜的人数上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SunRankMemberNum {
      get { return sunRankMemberNum_; }
      set {
        sunRankMemberNum_ = value;
      }
    }

    /// <summary>Field number for the "sunRankStopNewTime" field.</summary>
    public const int SunRankStopNewTimeFieldNumber = 179;
    private int sunRankStopNewTime_;
    /// <summary>
    /// 太阳排行榜停止加入新人的时间（小时）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SunRankStopNewTime {
      get { return sunRankStopNewTime_; }
      set {
        sunRankStopNewTime_ = value;
      }
    }

    /// <summary>Field number for the "sunRankTime" field.</summary>
    public const int SunRankTimeFieldNumber = 180;
    private int sunRankTime_;
    /// <summary>
    /// 太阳排行榜的完整时间（小时）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SunRankTime {
      get { return sunRankTime_; }
      set {
        sunRankTime_ = value;
      }
    }

    /// <summary>Field number for the "surveyAdsPos" field.</summary>
    public const int SurveyAdsPosFieldNumber = 181;
    private static readonly pb::FieldCodec<int> _repeated_surveyAdsPos_codec
        = pb::FieldCodec.ForInt32(1450);
    private readonly pbc::RepeatedField<int> surveyAdsPos_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 哪几个广告位置是调查问卷
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SurveyAdsPos {
      get { return surveyAdsPos_; }
    }

    /// <summary>Field number for the "tapSourceTips" field.</summary>
    public const int TapSourceTipsFieldNumber = 231;
    private static readonly pbc::MapField<int, int>.Codec _map_tapSourceTips_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 1850);
    private readonly pbc::MapField<int, int> tapSourceTips_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 需要显示tips的tapSource（留存体力箱专属）（ObjBasic.id:tips内显示的数量）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> TapSourceTips {
      get { return tapSourceTips_; }
    }

    /// <summary>Field number for the "taskDailyFinalChest" field.</summary>
    public const int TaskDailyFinalChestFieldNumber = 182;
    private string taskDailyFinalChest_ = "";
    /// <summary>
    /// 每日任务最终奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskDailyFinalChest {
      get { return taskDailyFinalChest_; }
      set {
        taskDailyFinalChest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskDailyHardRate" field.</summary>
    public const int TaskDailyHardRateFieldNumber = 183;
    private int taskDailyHardRate_;
    /// <summary>
    /// 困难订单随出的概率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskDailyHardRate {
      get { return taskDailyHardRate_; }
      set {
        taskDailyHardRate_ = value;
      }
    }

    /// <summary>Field number for the "taskDailyTotalNum" field.</summary>
    public const int TaskDailyTotalNumFieldNumber = 184;
    private int taskDailyTotalNum_;
    /// <summary>
    /// 每日任务总订单数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskDailyTotalNum {
      get { return taskDailyTotalNum_; }
      set {
        taskDailyTotalNum_ = value;
      }
    }

    /// <summary>Field number for the "taskPlotTime" field.</summary>
    public const int TaskPlotTimeFieldNumber = 185;
    private static readonly pb::FieldCodec<int> _repeated_taskPlotTime_codec
        = pb::FieldCodec.ForInt32(1482);
    private readonly pbc::RepeatedField<int> taskPlotTime_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 任务tips出现的时间间隔区间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TaskPlotTime {
      get { return taskPlotTime_; }
    }

    /// <summary>Field number for the "updateRemindPopupId" field.</summary>
    public const int UpdateRemindPopupIdFieldNumber = 267;
    private int updateRemindPopupId_;
    /// <summary>
    /// 更新提醒弹窗popupId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpdateRemindPopupId {
      get { return updateRemindPopupId_; }
      set {
        updateRemindPopupId_ = value;
      }
    }

    /// <summary>Field number for the "userRecordMaxDay" field.</summary>
    public const int UserRecordMaxDayFieldNumber = 212;
    private int userRecordMaxDay_;
    /// <summary>
    /// 用户数据记录的最大天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserRecordMaxDay {
      get { return userRecordMaxDay_; }
      set {
        userRecordMaxDay_ = value;
      }
    }

    /// <summary>Field number for the "userRecordRefreshUtc" field.</summary>
    public const int UserRecordRefreshUtcFieldNumber = 213;
    private int userRecordRefreshUtc_;
    /// <summary>
    /// 用户数据记录和标签刷新的UTC-0时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserRecordRefreshUtc {
      get { return userRecordRefreshUtc_; }
      set {
        userRecordRefreshUtc_ = value;
      }
    }

    /// <summary>Field number for the "userRecordWeekday" field.</summary>
    public const int UserRecordWeekdayFieldNumber = 216;
    private int userRecordWeekday_;
    /// <summary>
    /// 用户数据记录和标签刷新在星期几算作跨周
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserRecordWeekday {
      get { return userRecordWeekday_; }
      set {
        userRecordWeekday_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 186;
    private int version_;
    /// <summary>
    /// 配置版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "wallPaperDisplay" field.</summary>
    public const int WallPaperDisplayFieldNumber = 187;
    private string wallPaperDisplay_ = "";
    /// <summary>
    /// 墙纸默认展示模型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WallPaperDisplay {
      get { return wallPaperDisplay_; }
      set {
        wallPaperDisplay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "webshopAddress" field.</summary>
    public const int WebshopAddressFieldNumber = 275;
    private string webshopAddress_ = "";
    /// <summary>
    /// WebShop地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WebshopAddress {
      get { return webshopAddress_; }
      set {
        webshopAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "webshopShowPayment" field.</summary>
    public const int WebshopShowPaymentFieldNumber = 276;
    private int webshopShowPayment_;
    /// <summary>
    /// WebShop开启所需充值美金，约定≥参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WebshopShowPayment {
      get { return webshopShowPayment_; }
      set {
        webshopShowPayment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Global);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Global other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityConsumeNum != other.ActivityConsumeNum) return false;
      if (ActivityMaxNum != other.ActivityMaxNum) return false;
      if (AnnualSummaryDeadline != other.AnnualSummaryDeadline) return false;
      if (BpGroupRankingHide != other.BpGroupRankingHide) return false;
      if (BpRankingFriendHide != other.BpRankingFriendHide) return false;
      if (BpRankingHide != other.BpRankingHide) return false;
      if (BpRankingWorldHide != other.BpRankingWorldHide) return false;
      if (Bpiconovertip1 != other.Bpiconovertip1) return false;
      if (Bpiconovertip2 != other.Bpiconovertip2) return false;
      if (CardShopRedRefreshUtc != other.CardShopRedRefreshUtc) return false;
      if (ClientHttpContinue != other.ClientHttpContinue) return false;
      if (ClientHttpTimeout != other.ClientHttpTimeout) return false;
      if (DropProbability != other.DropProbability) return false;
      if (EventRoleShowAmount != other.EventRoleShowAmount) return false;
      if (EventRoleShowLimitation != other.EventRoleShowLimitation) return false;
      if (FBCommunityWebsite != other.FBCommunityWebsite) return false;
      if (GroupRankingHide != other.GroupRankingHide) return false;
      if (GuildAnnouncementLimit != other.GuildAnnouncementLimit) return false;
      if (GuildApplyCd != other.GuildApplyCd) return false;
      if (GuildApplyExpireDay != other.GuildApplyExpireDay) return false;
      if (GuildApplyLimit != other.GuildApplyLimit) return false;
      if (GuildCreatePrice != other.GuildCreatePrice) return false;
      if (GuildJoinCd != other.GuildJoinCd) return false;
      if (GuildKickoutLimitation != other.GuildKickoutLimitation) return false;
      if (GuildLeaderInactionDuration != other.GuildLeaderInactionDuration) return false;
      if (GuildListNum != other.GuildListNum) return false;
      if (GuildMemberNum != other.GuildMemberNum) return false;
      if (GuildModifyNamePrice != other.GuildModifyNamePrice) return false;
      if(!guildNameInvalidChar_.Equals(other.guildNameInvalidChar_)) return false;
      if (GuildNameLenMax != other.GuildNameLenMax) return false;
      if (GuildNameLenMin != other.GuildNameLenMin) return false;
      if (GuildRefreshInterval != other.GuildRefreshInterval) return false;
      if (HobbitsName != other.HobbitsName) return false;
      if (HobbitsName2 != other.HobbitsName2) return false;
      if (LightLoadingInterval != other.LightLoadingInterval) return false;
      if(!loadingImage_.Equals(other.loadingImage_)) return false;
      if (MiniGameShareImgUrl != other.MiniGameShareImgUrl) return false;
      if (NoNetQuitTime != other.NoNetQuitTime) return false;
      if (NoticeFetchIntervalSec != other.NoticeFetchIntervalSec) return false;
      if(!noticeShowIntervalMinMaxSec_.Equals(other.noticeShowIntervalMinMaxSec_)) return false;
      if (NoticeTimeoutSec != other.NoticeTimeoutSec) return false;
      if (NotificationApplicationLevel != other.NotificationApplicationLevel) return false;
      if (NotificationPopLimit != other.NotificationPopLimit) return false;
      if (PacketDelateDays != other.PacketDelateDays) return false;
      if (PioneerIdx != other.PioneerIdx) return false;
      if (PrivacyPolicy != other.PrivacyPolicy) return false;
      if (RankingAnnounceDuration != other.RankingAnnounceDuration) return false;
      if (RankingAreaHide != other.RankingAreaHide) return false;
      if (RankingAreaHideInfo != other.RankingAreaHideInfo) return false;
      if (RankingAreaShowLimitation != other.RankingAreaShowLimitation) return false;
      if (RankingHide != other.RankingHide) return false;
      if (RankingLevelAreaHideInfo != other.RankingLevelAreaHideInfo) return false;
      if (RankingLevelAreaShowLimitaion != other.RankingLevelAreaShowLimitaion) return false;
      if (RankingLevelHideInfo != other.RankingLevelHideInfo) return false;
      if (RankingLevelShowLimitaion != other.RankingLevelShowLimitaion) return false;
      if (RankingLevelWorldHideInfo != other.RankingLevelWorldHideInfo) return false;
      if (RankingLevelWorldShowLimitaion != other.RankingLevelWorldShowLimitaion) return false;
      if (RankingWorldHide != other.RankingWorldHide) return false;
      if (RankingWorldHideInfo != other.RankingWorldHideInfo) return false;
      if(!rankingWorldNormalAvatar_.Equals(other.rankingWorldNormalAvatar_)) return false;
      if (RankingWorldShowLimitaion != other.RankingWorldShowLimitaion) return false;
      if(!rankingWorldTopAvatar_.Equals(other.rankingWorldTopAvatar_)) return false;
      if (RetentionPackRefreshUtc != other.RetentionPackRefreshUtc) return false;
      if(!shopRefreshTime_.Equals(other.shopRefreshTime_)) return false;
      if (SignCoinPrize != other.SignCoinPrize) return false;
      if (SignEnergyLimitPrize != other.SignEnergyLimitPrize) return false;
      if (TermsOfService != other.TermsOfService) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrackSpeedup, other.TrackSpeedup)) return false;
      if (UnlockEventRoleShow != other.UnlockEventRoleShow) return false;
      if (UserAvatarCount != other.UserAvatarCount) return false;
      if (UserTzOffset != other.UserTzOffset) return false;
      if (WechatIOSDisablePayVersion != other.WechatIOSDisablePayVersion) return false;
      if(!yDSeq_.Equals(other.yDSeq_)) return false;
      if (!AbInfoAttributeDivide.Equals(other.AbInfoAttributeDivide)) return false;
      if (ActivityCoolDown != other.ActivityCoolDown) return false;
      if(!adIdAndroid_.Equals(other.adIdAndroid_)) return false;
      if(!adIdAndroidAdmobAsia_.Equals(other.adIdAndroidAdmobAsia_)) return false;
      if(!adIdIos_.Equals(other.adIdIos_)) return false;
      if(!adIdIosAdmobAsia_.Equals(other.adIdIosAdmobAsia_)) return false;
      if (AncCdTime != other.AncCdTime) return false;
      if(!ancNightStopTime_.Equals(other.ancNightStopTime_)) return false;
      if (AncSessionLimit != other.AncSessionLimit) return false;
      if (AutoFingerTriggerTime != other.AutoFingerTriggerTime) return false;
      if (BindSocialGem != other.BindSocialGem) return false;
      if (BoardClearGem != other.BoardClearGem) return false;
      if(!boardColors_.Equals(other.boardColors_)) return false;
      if (BoostLevel != other.BoostLevel) return false;
      if (BoostLevel4X != other.BoostLevel4X) return false;
      if (BoostRate != other.BoostRate) return false;
      if (BoostRate4X != other.BoostRate4X) return false;
      if(!botColor_.Equals(other.botColor_)) return false;
      if (BotFirstRankLevel != other.BotFirstRankLevel) return false;
      if (BoxPossibleOffset != other.BoxPossibleOffset) return false;
      if (BpTaskRefresh != other.BpTaskRefresh) return false;
      if (BubbleAdId != other.BubbleAdId) return false;
      if (!BubbleBonus.Equals(other.BubbleBonus)) return false;
      if (BubbleBonusProb != other.BubbleBonusProb) return false;
      if (BubbleDeadItem != other.BubbleDeadItem) return false;
      if(!bubbleDeadWeight_.Equals(other.bubbleDeadWeight_)) return false;
      if (BubbleExpired != other.BubbleExpired) return false;
      if (BubbleGuideItemId != other.BubbleGuideItemId) return false;
      if(!bubbleLevelDiffParam_.Equals(other.bubbleLevelDiffParam_)) return false;
      if (BubbleMaxNum != other.BubbleMaxNum) return false;
      if (BuddyApplyLimitNum != other.BuddyApplyLimitNum) return false;
      if (BuddyApplyLimitTime != other.BuddyApplyLimitTime) return false;
      if (BuddyEnergyDailyLimit != other.BuddyEnergyDailyLimit) return false;
      if (BuddyEnergyEachSent != other.BuddyEnergyEachSent) return false;
      if (BuddyVisitExtraReward != other.BuddyVisitExtraReward) return false;
      if (BuddyVisitLimit != other.BuddyVisitLimit) return false;
      if(!buddyVisitReward_.Equals(other.buddyVisitReward_)) return false;
      if (CardTradeGroupLink != other.CardTradeGroupLink) return false;
      if (DailyOrderReward != other.DailyOrderReward) return false;
      if (!DailyTaskNums.Equals(other.DailyTaskNums)) return false;
      if (DeRefreshUtc != other.DeRefreshUtc) return false;
      if (DecoShopRefreshGem != other.DecoShopRefreshGem) return false;
      if (DecoShopRefreshInterval != other.DecoShopRefreshInterval) return false;
      if(!defaultHome_.Equals(other.defaultHome_)) return false;
      if(!defaultRolePart_.Equals(other.defaultRolePart_)) return false;
      if (DemRefreshWeekday != other.DemRefreshWeekday) return false;
      if (DetectiveUnlockLevel != other.DetectiveUnlockLevel) return false;
      if (DiffApiTimeout != other.DiffApiTimeout) return false;
      if (ExitNewUser != other.ExitNewUser) return false;
      if (EyeBaseColor != other.EyeBaseColor) return false;
      if (FishBoardRepeatNum != other.FishBoardRepeatNum) return false;
      if (FloorDecoDisplay != other.FloorDecoDisplay) return false;
      if (!FreeBubbleCount.Equals(other.FreeBubbleCount)) return false;
      if(!freeEnergyClaimCost_.Equals(other.freeEnergyClaimCost_)) return false;
      if(!freeEnergyClaimNum_.Equals(other.freeEnergyClaimNum_)) return false;
      if (!FreeEnergyClaimTime.Equals(other.FreeEnergyClaimTime)) return false;
      if (!FreeEnergyNotification.Equals(other.FreeEnergyNotification)) return false;
      if (FreeRechargeTimes != other.FreeRechargeTimes) return false;
      if(!freeRolePart_.Equals(other.freeRolePart_)) return false;
      if (FreeSpeedUpTimes != other.FreeSpeedUpTimes) return false;
      if (FriendLimit != other.FriendLimit) return false;
      if (FriendOpinionFriendship != other.FriendOpinionFriendship) return false;
      if(!frozenItemDeadWeight_.Equals(other.frozenItemDeadWeight_)) return false;
      if (GalleryFingerLv != other.GalleryFingerLv) return false;
      if (GiftAutoRollingTime != other.GiftAutoRollingTime) return false;
      if (GiftBoxStopShaking != other.GiftBoxStopShaking) return false;
      if (GiveCardNum != other.GiveCardNum) return false;
      if (GiveCardRefreshUtc != other.GiveCardRefreshUtc) return false;
      if (GuideMusic != other.GuideMusic) return false;
      if (HairBaseColor != other.HairBaseColor) return false;
      if (InitIdleCoin != other.InitIdleCoin) return false;
      if (InventoryInitCap != other.InventoryInitCap) return false;
      if (InventoryProducerExtraGrid != other.InventoryProducerExtraGrid) return false;
      if (InviteGemRewardNum != other.InviteGemRewardNum) return false;
      if (InvitedGemRewardNum != other.InvitedGemRewardNum) return false;
      if (IsAndFacebook != other.IsAndFacebook) return false;
      if (IsAndGoogle != other.IsAndGoogle) return false;
      if (IsFaq != other.IsFaq) return false;
      if (IsInAppReview != other.IsInAppReview) return false;
      if (IsIosApple != other.IsIosApple) return false;
      if (IsIosFacebook != other.IsIosFacebook) return false;
      if (IsIosGoogle != other.IsIosGoogle) return false;
      if (IsNewOrderView != other.IsNewOrderView) return false;
      if (IsOrderApiOnlyWhitelist != other.IsOrderApiOnlyWhitelist) return false;
      if(!islandChangeItemGold_.Equals(other.islandChangeItemGold_)) return false;
      if (!ItemScaleTestB.Equals(other.ItemScaleTestB)) return false;
      if(!luckyBoxCD_.Equals(other.luckyBoxCD_)) return false;
      if (LuckyBoxLimit != other.LuckyBoxLimit) return false;
      if (LuckyBoxNum != other.LuckyBoxNum) return false;
      if (LuckyWheelAdsCount != other.LuckyWheelAdsCount) return false;
      if (LuckyWheelFreeCount != other.LuckyWheelFreeCount) return false;
      if (LuckyWheelGemCost != other.LuckyWheelGemCost) return false;
      if (LuckyWheelGemCount != other.LuckyWheelGemCount) return false;
      if (LvPopupCardAlbum != other.LvPopupCardAlbum) return false;
      if (LvPopupCloseDialog != other.LvPopupCloseDialog) return false;
      if (LvPopupDE != other.LvPopupDE) return false;
      if (LvPopupNewSession != other.LvPopupNewSession) return false;
      if (LvPopupNewSessionId != other.LvPopupNewSessionId) return false;
      if (MailSystemMax != other.MailSystemMax) return false;
      if (MapBuildStartAim != other.MapBuildStartAim) return false;
      if (MapBuildStopAim != other.MapBuildStopAim) return false;
      if (MarketRefresh != other.MarketRefresh) return false;
      if (MarketRefreshNum != other.MarketRefreshNum) return false;
      if (MarketUtcClock != other.MarketUtcClock) return false;
      if (MaxFameLevelToViewActivityFeed != other.MaxFameLevelToViewActivityFeed) return false;
      if (MaxPullFriendInfoNum != other.MaxPullFriendInfoNum) return false;
      if (MaxToastId != other.MaxToastId) return false;
      if (MaxToolCount != other.MaxToolCount) return false;
      if (MergeBonus != other.MergeBonus) return false;
      if (MergeBonusLevel != other.MergeBonusLevel) return false;
      if (MergeEnergyAutoMax != other.MergeEnergyAutoMax) return false;
      if (MergeEnergyAutoSec != other.MergeEnergyAutoSec) return false;
      if(!mergeEnergyPrice_.Equals(other.mergeEnergyPrice_)) return false;
      if (MergeRemindTriggerTime != other.MergeRemindTriggerTime) return false;
      if (MergeTutorialInterval != other.MergeTutorialInterval) return false;
      if (MergeTutorialStop != other.MergeTutorialStop) return false;
      if (MouthBaseColor != other.MouthBaseColor) return false;
      if (MysteryStoreCustomNum != other.MysteryStoreCustomNum) return false;
      if (MysteryStoreCustomRate != other.MysteryStoreCustomRate) return false;
      if (MysteryStoreRefreshPrice != other.MysteryStoreRefreshPrice) return false;
      if(!mysteryStoreRefreshTime_.Equals(other.mysteryStoreRefreshTime_)) return false;
      if (NameMax != other.NameMax) return false;
      if (NameMin != other.NameMin) return false;
      if (NewUserGrandPrizeInviteNum != other.NewUserGrandPrizeInviteNum) return false;
      if (!NewUserGrandPrizeReward.Equals(other.NewUserGrandPrizeReward)) return false;
      if (NewUserInviteeMaxLevel != other.NewUserInviteeMaxLevel) return false;
      if (!NewUserRewardForInvitee.Equals(other.NewUserRewardForInvitee)) return false;
      if (!NewUserRewardForInvitor.Equals(other.NewUserRewardForInvitor)) return false;
      if (NewUserRewardLevel != other.NewUserRewardLevel) return false;
      if (NormalToastId != other.NormalToastId) return false;
      if (NoticeCombackTime != other.NoticeCombackTime) return false;
      if (NoticeEventValidTime != other.NoticeEventValidTime) return false;
      if (NotifiPopupEventTheme != other.NotifiPopupEventTheme) return false;
      if (NotifiPopupShutdownLv != other.NotifiPopupShutdownLv) return false;
      if(!notificationEnergyBonus_.Equals(other.notificationEnergyBonus_)) return false;
      if (OldUserLetterDuration != other.OldUserLetterDuration) return false;
      if (OrderApiLiveopsGrade != other.OrderApiLiveopsGrade) return false;
      if (OrderApiPastNum != other.OrderApiPastNum) return false;
      if (OrderCtrlNum != other.OrderCtrlNum) return false;
      if (OrderCtrlTooHigh != other.OrderCtrlTooHigh) return false;
      if (OrderCtrlTooHighTarget != other.OrderCtrlTooHighTarget) return false;
      if (OrderCtrlTooLow != other.OrderCtrlTooLow) return false;
      if (OrderCtrlTooLowTarget != other.OrderCtrlTooLowTarget) return false;
      if (OrderEnterApiDelay != other.OrderEnterApiDelay) return false;
      if (OrderEnterDelay != other.OrderEnterDelay) return false;
      if (OrderLimitCount != other.OrderLimitCount) return false;
      if (PackApiTimeout != other.PackApiTimeout) return false;
      if (PetNPC != other.PetNPC) return false;
      if (PopupLimit != other.PopupLimit) return false;
      if (PopupRefresh != other.PopupRefresh) return false;
      if(!postCardIParamIsland1_.Equals(other.postCardIParamIsland1_)) return false;
      if(!postCardParam_.Equals(other.postCardParam_)) return false;
      if(!postcardGiftOthersReward_.Equals(other.postcardGiftOthersReward_)) return false;
      if (PostcardMinNum != other.PostcardMinNum) return false;
      if (PullFriendInfoWaitTime != other.PullFriendInfoWaitTime) return false;
      if(!pushShopCD_.Equals(other.pushShopCD_)) return false;
      if(!pushShopCDIce_.Equals(other.pushShopCDIce_)) return false;
      if (PushShopDuration != other.PushShopDuration) return false;
      if (!PushShopMaxNum.Equals(other.PushShopMaxNum)) return false;
      if(!pushShopPopTimes_.Equals(other.pushShopPopTimes_)) return false;
      if (RankBotOrderLimitNum != other.RankBotOrderLimitNum) return false;
      if(!rankCoinsParam_.Equals(other.rankCoinsParam_)) return false;
      if(!rankCoinsParamNew_.Equals(other.rankCoinsParamNew_)) return false;
      if (RankMemberNum != other.RankMemberNum) return false;
      if (RankOrderNum != other.RankOrderNum) return false;
      if(!rankingWhitelist_.Equals(other.rankingWhitelist_)) return false;
      if(!rateBuildingBase_.Equals(other.rateBuildingBase_)) return false;
      if (RateRedirectLv != other.RateRedirectLv) return false;
      if(!rateTaskOpen_.Equals(other.rateTaskOpen_)) return false;
      if (RequireTypeADInit != other.RequireTypeADInit) return false;
      if (RequireTypeLTInit != other.RequireTypeLTInit) return false;
      if (RequireTypeUtcClock != other.RequireTypeUtcClock) return false;
      if (RestartTime != other.RestartTime) return false;
      if (ServerTimeCheckRange != other.ServerTimeCheckRange) return false;
      if (SettingFBFollowGem != other.SettingFBFollowGem) return false;
      if (SettingHelpshiftWebsite != other.SettingHelpshiftWebsite) return false;
      if (SkinBaseColor != other.SkinBaseColor) return false;
      if (SpdGemTips != other.SpdGemTips) return false;
      if(!spdUpDivide_.Equals(other.spdUpDivide_)) return false;
      if(!spdUpParam_.Equals(other.spdUpParam_)) return false;
      if (SpecialStudentCdInterval != other.SpecialStudentCdInterval) return false;
      if(!studentAnchorPointAmount_.Equals(other.studentAnchorPointAmount_)) return false;
      if(!studentGroupTotal_.Equals(other.studentGroupTotal_)) return false;
      if(!studentShowInterval_.Equals(other.studentShowInterval_)) return false;
      if (SunRankMemberNum != other.SunRankMemberNum) return false;
      if (SunRankStopNewTime != other.SunRankStopNewTime) return false;
      if (SunRankTime != other.SunRankTime) return false;
      if(!surveyAdsPos_.Equals(other.surveyAdsPos_)) return false;
      if (!TapSourceTips.Equals(other.TapSourceTips)) return false;
      if (TaskDailyFinalChest != other.TaskDailyFinalChest) return false;
      if (TaskDailyHardRate != other.TaskDailyHardRate) return false;
      if (TaskDailyTotalNum != other.TaskDailyTotalNum) return false;
      if(!taskPlotTime_.Equals(other.taskPlotTime_)) return false;
      if (UpdateRemindPopupId != other.UpdateRemindPopupId) return false;
      if (UserRecordMaxDay != other.UserRecordMaxDay) return false;
      if (UserRecordRefreshUtc != other.UserRecordRefreshUtc) return false;
      if (UserRecordWeekday != other.UserRecordWeekday) return false;
      if (Version != other.Version) return false;
      if (WallPaperDisplay != other.WallPaperDisplay) return false;
      if (WebshopAddress != other.WebshopAddress) return false;
      if (WebshopShowPayment != other.WebshopShowPayment) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityConsumeNum != 0) hash ^= ActivityConsumeNum.GetHashCode();
      if (ActivityMaxNum != 0) hash ^= ActivityMaxNum.GetHashCode();
      if (AnnualSummaryDeadline != 0L) hash ^= AnnualSummaryDeadline.GetHashCode();
      if (BpGroupRankingHide != false) hash ^= BpGroupRankingHide.GetHashCode();
      if (BpRankingFriendHide != false) hash ^= BpRankingFriendHide.GetHashCode();
      if (BpRankingHide != false) hash ^= BpRankingHide.GetHashCode();
      if (BpRankingWorldHide != false) hash ^= BpRankingWorldHide.GetHashCode();
      if (Bpiconovertip1 != 0) hash ^= Bpiconovertip1.GetHashCode();
      if (Bpiconovertip2 != 0) hash ^= Bpiconovertip2.GetHashCode();
      if (CardShopRedRefreshUtc != 0) hash ^= CardShopRedRefreshUtc.GetHashCode();
      if (ClientHttpContinue != false) hash ^= ClientHttpContinue.GetHashCode();
      if (ClientHttpTimeout != 0) hash ^= ClientHttpTimeout.GetHashCode();
      if (DropProbability.Length != 0) hash ^= DropProbability.GetHashCode();
      if (EventRoleShowAmount != 0) hash ^= EventRoleShowAmount.GetHashCode();
      if (EventRoleShowLimitation != 0) hash ^= EventRoleShowLimitation.GetHashCode();
      if (FBCommunityWebsite.Length != 0) hash ^= FBCommunityWebsite.GetHashCode();
      if (GroupRankingHide != false) hash ^= GroupRankingHide.GetHashCode();
      if (GuildAnnouncementLimit != 0) hash ^= GuildAnnouncementLimit.GetHashCode();
      if (GuildApplyCd != 0) hash ^= GuildApplyCd.GetHashCode();
      if (GuildApplyExpireDay != 0) hash ^= GuildApplyExpireDay.GetHashCode();
      if (GuildApplyLimit != 0) hash ^= GuildApplyLimit.GetHashCode();
      if (GuildCreatePrice != 0) hash ^= GuildCreatePrice.GetHashCode();
      if (GuildJoinCd != 0) hash ^= GuildJoinCd.GetHashCode();
      if (GuildKickoutLimitation != 0) hash ^= GuildKickoutLimitation.GetHashCode();
      if (GuildLeaderInactionDuration != 0) hash ^= GuildLeaderInactionDuration.GetHashCode();
      if (GuildListNum != 0) hash ^= GuildListNum.GetHashCode();
      if (GuildMemberNum != 0) hash ^= GuildMemberNum.GetHashCode();
      if (GuildModifyNamePrice != 0) hash ^= GuildModifyNamePrice.GetHashCode();
      hash ^= guildNameInvalidChar_.GetHashCode();
      if (GuildNameLenMax != 0) hash ^= GuildNameLenMax.GetHashCode();
      if (GuildNameLenMin != 0) hash ^= GuildNameLenMin.GetHashCode();
      if (GuildRefreshInterval != 0L) hash ^= GuildRefreshInterval.GetHashCode();
      if (HobbitsName != 0) hash ^= HobbitsName.GetHashCode();
      if (HobbitsName2 != 0) hash ^= HobbitsName2.GetHashCode();
      if (LightLoadingInterval != 0) hash ^= LightLoadingInterval.GetHashCode();
      hash ^= loadingImage_.GetHashCode();
      if (MiniGameShareImgUrl.Length != 0) hash ^= MiniGameShareImgUrl.GetHashCode();
      if (NoNetQuitTime != 0) hash ^= NoNetQuitTime.GetHashCode();
      if (NoticeFetchIntervalSec != 0) hash ^= NoticeFetchIntervalSec.GetHashCode();
      hash ^= noticeShowIntervalMinMaxSec_.GetHashCode();
      if (NoticeTimeoutSec != 0) hash ^= NoticeTimeoutSec.GetHashCode();
      if (NotificationApplicationLevel != 0) hash ^= NotificationApplicationLevel.GetHashCode();
      if (NotificationPopLimit != 0) hash ^= NotificationPopLimit.GetHashCode();
      if (PacketDelateDays != 0) hash ^= PacketDelateDays.GetHashCode();
      if (PioneerIdx != 0) hash ^= PioneerIdx.GetHashCode();
      if (PrivacyPolicy.Length != 0) hash ^= PrivacyPolicy.GetHashCode();
      if (RankingAnnounceDuration != 0) hash ^= RankingAnnounceDuration.GetHashCode();
      if (RankingAreaHide != false) hash ^= RankingAreaHide.GetHashCode();
      if (RankingAreaHideInfo != 0) hash ^= RankingAreaHideInfo.GetHashCode();
      if (RankingAreaShowLimitation != 0) hash ^= RankingAreaShowLimitation.GetHashCode();
      if (RankingHide != false) hash ^= RankingHide.GetHashCode();
      if (RankingLevelAreaHideInfo != 0) hash ^= RankingLevelAreaHideInfo.GetHashCode();
      if (RankingLevelAreaShowLimitaion != 0) hash ^= RankingLevelAreaShowLimitaion.GetHashCode();
      if (RankingLevelHideInfo != 0) hash ^= RankingLevelHideInfo.GetHashCode();
      if (RankingLevelShowLimitaion != 0) hash ^= RankingLevelShowLimitaion.GetHashCode();
      if (RankingLevelWorldHideInfo != 0) hash ^= RankingLevelWorldHideInfo.GetHashCode();
      if (RankingLevelWorldShowLimitaion != 0) hash ^= RankingLevelWorldShowLimitaion.GetHashCode();
      if (RankingWorldHide != false) hash ^= RankingWorldHide.GetHashCode();
      if (RankingWorldHideInfo != 0) hash ^= RankingWorldHideInfo.GetHashCode();
      hash ^= rankingWorldNormalAvatar_.GetHashCode();
      if (RankingWorldShowLimitaion != 0) hash ^= RankingWorldShowLimitaion.GetHashCode();
      hash ^= rankingWorldTopAvatar_.GetHashCode();
      if (RetentionPackRefreshUtc != 0) hash ^= RetentionPackRefreshUtc.GetHashCode();
      hash ^= shopRefreshTime_.GetHashCode();
      if (SignCoinPrize != 0) hash ^= SignCoinPrize.GetHashCode();
      if (SignEnergyLimitPrize != 0) hash ^= SignEnergyLimitPrize.GetHashCode();
      if (TermsOfService.Length != 0) hash ^= TermsOfService.GetHashCode();
      if (TrackSpeedup != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrackSpeedup);
      if (UnlockEventRoleShow != 0) hash ^= UnlockEventRoleShow.GetHashCode();
      if (UserAvatarCount != 0) hash ^= UserAvatarCount.GetHashCode();
      if (UserTzOffset != 0) hash ^= UserTzOffset.GetHashCode();
      if (WechatIOSDisablePayVersion.Length != 0) hash ^= WechatIOSDisablePayVersion.GetHashCode();
      hash ^= yDSeq_.GetHashCode();
      hash ^= AbInfoAttributeDivide.GetHashCode();
      if (ActivityCoolDown != 0) hash ^= ActivityCoolDown.GetHashCode();
      hash ^= adIdAndroid_.GetHashCode();
      hash ^= adIdAndroidAdmobAsia_.GetHashCode();
      hash ^= adIdIos_.GetHashCode();
      hash ^= adIdIosAdmobAsia_.GetHashCode();
      if (AncCdTime != 0) hash ^= AncCdTime.GetHashCode();
      hash ^= ancNightStopTime_.GetHashCode();
      if (AncSessionLimit != 0) hash ^= AncSessionLimit.GetHashCode();
      if (AutoFingerTriggerTime != 0) hash ^= AutoFingerTriggerTime.GetHashCode();
      if (BindSocialGem != 0) hash ^= BindSocialGem.GetHashCode();
      if (BoardClearGem != 0) hash ^= BoardClearGem.GetHashCode();
      hash ^= boardColors_.GetHashCode();
      if (BoostLevel != 0) hash ^= BoostLevel.GetHashCode();
      if (BoostLevel4X != 0) hash ^= BoostLevel4X.GetHashCode();
      if (BoostRate != 0) hash ^= BoostRate.GetHashCode();
      if (BoostRate4X != 0) hash ^= BoostRate4X.GetHashCode();
      hash ^= botColor_.GetHashCode();
      if (BotFirstRankLevel != 0) hash ^= BotFirstRankLevel.GetHashCode();
      if (BoxPossibleOffset != 0) hash ^= BoxPossibleOffset.GetHashCode();
      if (BpTaskRefresh != 0) hash ^= BpTaskRefresh.GetHashCode();
      if (BubbleAdId != 0) hash ^= BubbleAdId.GetHashCode();
      hash ^= BubbleBonus.GetHashCode();
      if (BubbleBonusProb != 0) hash ^= BubbleBonusProb.GetHashCode();
      if (BubbleDeadItem != 0) hash ^= BubbleDeadItem.GetHashCode();
      hash ^= bubbleDeadWeight_.GetHashCode();
      if (BubbleExpired != 0) hash ^= BubbleExpired.GetHashCode();
      if (BubbleGuideItemId != 0) hash ^= BubbleGuideItemId.GetHashCode();
      hash ^= bubbleLevelDiffParam_.GetHashCode();
      if (BubbleMaxNum != 0) hash ^= BubbleMaxNum.GetHashCode();
      if (BuddyApplyLimitNum != 0) hash ^= BuddyApplyLimitNum.GetHashCode();
      if (BuddyApplyLimitTime != 0) hash ^= BuddyApplyLimitTime.GetHashCode();
      if (BuddyEnergyDailyLimit != 0) hash ^= BuddyEnergyDailyLimit.GetHashCode();
      if (BuddyEnergyEachSent != 0) hash ^= BuddyEnergyEachSent.GetHashCode();
      if (BuddyVisitExtraReward != 0) hash ^= BuddyVisitExtraReward.GetHashCode();
      if (BuddyVisitLimit != 0) hash ^= BuddyVisitLimit.GetHashCode();
      hash ^= buddyVisitReward_.GetHashCode();
      if (CardTradeGroupLink.Length != 0) hash ^= CardTradeGroupLink.GetHashCode();
      if (DailyOrderReward != 0) hash ^= DailyOrderReward.GetHashCode();
      hash ^= DailyTaskNums.GetHashCode();
      if (DeRefreshUtc != 0) hash ^= DeRefreshUtc.GetHashCode();
      if (DecoShopRefreshGem != 0) hash ^= DecoShopRefreshGem.GetHashCode();
      if (DecoShopRefreshInterval != 0) hash ^= DecoShopRefreshInterval.GetHashCode();
      hash ^= defaultHome_.GetHashCode();
      hash ^= defaultRolePart_.GetHashCode();
      if (DemRefreshWeekday != 0) hash ^= DemRefreshWeekday.GetHashCode();
      if (DetectiveUnlockLevel != 0) hash ^= DetectiveUnlockLevel.GetHashCode();
      if (DiffApiTimeout != 0) hash ^= DiffApiTimeout.GetHashCode();
      if (ExitNewUser != 0) hash ^= ExitNewUser.GetHashCode();
      if (EyeBaseColor.Length != 0) hash ^= EyeBaseColor.GetHashCode();
      if (FishBoardRepeatNum != 0) hash ^= FishBoardRepeatNum.GetHashCode();
      if (FloorDecoDisplay.Length != 0) hash ^= FloorDecoDisplay.GetHashCode();
      hash ^= FreeBubbleCount.GetHashCode();
      hash ^= freeEnergyClaimCost_.GetHashCode();
      hash ^= freeEnergyClaimNum_.GetHashCode();
      hash ^= FreeEnergyClaimTime.GetHashCode();
      hash ^= FreeEnergyNotification.GetHashCode();
      if (FreeRechargeTimes != 0) hash ^= FreeRechargeTimes.GetHashCode();
      hash ^= freeRolePart_.GetHashCode();
      if (FreeSpeedUpTimes != 0) hash ^= FreeSpeedUpTimes.GetHashCode();
      if (FriendLimit != 0) hash ^= FriendLimit.GetHashCode();
      if (FriendOpinionFriendship != 0) hash ^= FriendOpinionFriendship.GetHashCode();
      hash ^= frozenItemDeadWeight_.GetHashCode();
      if (GalleryFingerLv != 0) hash ^= GalleryFingerLv.GetHashCode();
      if (GiftAutoRollingTime != 0) hash ^= GiftAutoRollingTime.GetHashCode();
      if (GiftBoxStopShaking != 0) hash ^= GiftBoxStopShaking.GetHashCode();
      if (GiveCardNum != 0) hash ^= GiveCardNum.GetHashCode();
      if (GiveCardRefreshUtc != 0) hash ^= GiveCardRefreshUtc.GetHashCode();
      if (GuideMusic.Length != 0) hash ^= GuideMusic.GetHashCode();
      if (HairBaseColor.Length != 0) hash ^= HairBaseColor.GetHashCode();
      if (InitIdleCoin.Length != 0) hash ^= InitIdleCoin.GetHashCode();
      if (InventoryInitCap != 0) hash ^= InventoryInitCap.GetHashCode();
      if (InventoryProducerExtraGrid != 0) hash ^= InventoryProducerExtraGrid.GetHashCode();
      if (InviteGemRewardNum != 0) hash ^= InviteGemRewardNum.GetHashCode();
      if (InvitedGemRewardNum != 0) hash ^= InvitedGemRewardNum.GetHashCode();
      if (IsAndFacebook != false) hash ^= IsAndFacebook.GetHashCode();
      if (IsAndGoogle != false) hash ^= IsAndGoogle.GetHashCode();
      if (IsFaq != false) hash ^= IsFaq.GetHashCode();
      if (IsInAppReview != false) hash ^= IsInAppReview.GetHashCode();
      if (IsIosApple != false) hash ^= IsIosApple.GetHashCode();
      if (IsIosFacebook != false) hash ^= IsIosFacebook.GetHashCode();
      if (IsIosGoogle != false) hash ^= IsIosGoogle.GetHashCode();
      if (IsNewOrderView != false) hash ^= IsNewOrderView.GetHashCode();
      if (IsOrderApiOnlyWhitelist != false) hash ^= IsOrderApiOnlyWhitelist.GetHashCode();
      hash ^= islandChangeItemGold_.GetHashCode();
      hash ^= ItemScaleTestB.GetHashCode();
      hash ^= luckyBoxCD_.GetHashCode();
      if (LuckyBoxLimit != 0) hash ^= LuckyBoxLimit.GetHashCode();
      if (LuckyBoxNum != 0) hash ^= LuckyBoxNum.GetHashCode();
      if (LuckyWheelAdsCount != 0) hash ^= LuckyWheelAdsCount.GetHashCode();
      if (LuckyWheelFreeCount != 0) hash ^= LuckyWheelFreeCount.GetHashCode();
      if (LuckyWheelGemCost != 0) hash ^= LuckyWheelGemCost.GetHashCode();
      if (LuckyWheelGemCount != 0) hash ^= LuckyWheelGemCount.GetHashCode();
      if (LvPopupCardAlbum != 0) hash ^= LvPopupCardAlbum.GetHashCode();
      if (LvPopupCloseDialog != 0) hash ^= LvPopupCloseDialog.GetHashCode();
      if (LvPopupDE != 0) hash ^= LvPopupDE.GetHashCode();
      if (LvPopupNewSession != 0) hash ^= LvPopupNewSession.GetHashCode();
      if (LvPopupNewSessionId != 0) hash ^= LvPopupNewSessionId.GetHashCode();
      if (MailSystemMax != 0) hash ^= MailSystemMax.GetHashCode();
      if (MapBuildStartAim != 0) hash ^= MapBuildStartAim.GetHashCode();
      if (MapBuildStopAim != 0) hash ^= MapBuildStopAim.GetHashCode();
      if (MarketRefresh != 0) hash ^= MarketRefresh.GetHashCode();
      if (MarketRefreshNum != 0) hash ^= MarketRefreshNum.GetHashCode();
      if (MarketUtcClock != 0) hash ^= MarketUtcClock.GetHashCode();
      if (MaxFameLevelToViewActivityFeed != 0) hash ^= MaxFameLevelToViewActivityFeed.GetHashCode();
      if (MaxPullFriendInfoNum != 0) hash ^= MaxPullFriendInfoNum.GetHashCode();
      if (MaxToastId != 0) hash ^= MaxToastId.GetHashCode();
      if (MaxToolCount != 0) hash ^= MaxToolCount.GetHashCode();
      if (MergeBonus != 0) hash ^= MergeBonus.GetHashCode();
      if (MergeBonusLevel != 0) hash ^= MergeBonusLevel.GetHashCode();
      if (MergeEnergyAutoMax != 0) hash ^= MergeEnergyAutoMax.GetHashCode();
      if (MergeEnergyAutoSec != 0) hash ^= MergeEnergyAutoSec.GetHashCode();
      hash ^= mergeEnergyPrice_.GetHashCode();
      if (MergeRemindTriggerTime != 0) hash ^= MergeRemindTriggerTime.GetHashCode();
      if (MergeTutorialInterval != 0) hash ^= MergeTutorialInterval.GetHashCode();
      if (MergeTutorialStop != 0) hash ^= MergeTutorialStop.GetHashCode();
      if (MouthBaseColor.Length != 0) hash ^= MouthBaseColor.GetHashCode();
      if (MysteryStoreCustomNum != 0) hash ^= MysteryStoreCustomNum.GetHashCode();
      if (MysteryStoreCustomRate != 0) hash ^= MysteryStoreCustomRate.GetHashCode();
      if (MysteryStoreRefreshPrice != 0) hash ^= MysteryStoreRefreshPrice.GetHashCode();
      hash ^= mysteryStoreRefreshTime_.GetHashCode();
      if (NameMax != 0) hash ^= NameMax.GetHashCode();
      if (NameMin != 0) hash ^= NameMin.GetHashCode();
      if (NewUserGrandPrizeInviteNum != 0) hash ^= NewUserGrandPrizeInviteNum.GetHashCode();
      hash ^= NewUserGrandPrizeReward.GetHashCode();
      if (NewUserInviteeMaxLevel != 0) hash ^= NewUserInviteeMaxLevel.GetHashCode();
      hash ^= NewUserRewardForInvitee.GetHashCode();
      hash ^= NewUserRewardForInvitor.GetHashCode();
      if (NewUserRewardLevel != 0) hash ^= NewUserRewardLevel.GetHashCode();
      if (NormalToastId != 0) hash ^= NormalToastId.GetHashCode();
      if (NoticeCombackTime != 0) hash ^= NoticeCombackTime.GetHashCode();
      if (NoticeEventValidTime != 0) hash ^= NoticeEventValidTime.GetHashCode();
      if (NotifiPopupEventTheme != 0) hash ^= NotifiPopupEventTheme.GetHashCode();
      if (NotifiPopupShutdownLv != 0) hash ^= NotifiPopupShutdownLv.GetHashCode();
      hash ^= notificationEnergyBonus_.GetHashCode();
      if (OldUserLetterDuration != 0) hash ^= OldUserLetterDuration.GetHashCode();
      if (OrderApiLiveopsGrade != 0) hash ^= OrderApiLiveopsGrade.GetHashCode();
      if (OrderApiPastNum != 0) hash ^= OrderApiPastNum.GetHashCode();
      if (OrderCtrlNum != 0) hash ^= OrderCtrlNum.GetHashCode();
      if (OrderCtrlTooHigh != 0) hash ^= OrderCtrlTooHigh.GetHashCode();
      if (OrderCtrlTooHighTarget != 0) hash ^= OrderCtrlTooHighTarget.GetHashCode();
      if (OrderCtrlTooLow != 0) hash ^= OrderCtrlTooLow.GetHashCode();
      if (OrderCtrlTooLowTarget != 0) hash ^= OrderCtrlTooLowTarget.GetHashCode();
      if (OrderEnterApiDelay != 0) hash ^= OrderEnterApiDelay.GetHashCode();
      if (OrderEnterDelay != 0) hash ^= OrderEnterDelay.GetHashCode();
      if (OrderLimitCount != 0) hash ^= OrderLimitCount.GetHashCode();
      if (PackApiTimeout != 0) hash ^= PackApiTimeout.GetHashCode();
      if (PetNPC != 0) hash ^= PetNPC.GetHashCode();
      if (PopupLimit != 0) hash ^= PopupLimit.GetHashCode();
      if (PopupRefresh != 0) hash ^= PopupRefresh.GetHashCode();
      hash ^= postCardIParamIsland1_.GetHashCode();
      hash ^= postCardParam_.GetHashCode();
      hash ^= postcardGiftOthersReward_.GetHashCode();
      if (PostcardMinNum != 0) hash ^= PostcardMinNum.GetHashCode();
      if (PullFriendInfoWaitTime != 0) hash ^= PullFriendInfoWaitTime.GetHashCode();
      hash ^= pushShopCD_.GetHashCode();
      hash ^= pushShopCDIce_.GetHashCode();
      if (PushShopDuration != 0) hash ^= PushShopDuration.GetHashCode();
      hash ^= PushShopMaxNum.GetHashCode();
      hash ^= pushShopPopTimes_.GetHashCode();
      if (RankBotOrderLimitNum != 0) hash ^= RankBotOrderLimitNum.GetHashCode();
      hash ^= rankCoinsParam_.GetHashCode();
      hash ^= rankCoinsParamNew_.GetHashCode();
      if (RankMemberNum != 0) hash ^= RankMemberNum.GetHashCode();
      if (RankOrderNum != 0) hash ^= RankOrderNum.GetHashCode();
      hash ^= rankingWhitelist_.GetHashCode();
      hash ^= rateBuildingBase_.GetHashCode();
      if (RateRedirectLv != 0) hash ^= RateRedirectLv.GetHashCode();
      hash ^= rateTaskOpen_.GetHashCode();
      if (RequireTypeADInit != 0) hash ^= RequireTypeADInit.GetHashCode();
      if (RequireTypeLTInit != 0) hash ^= RequireTypeLTInit.GetHashCode();
      if (RequireTypeUtcClock != 0) hash ^= RequireTypeUtcClock.GetHashCode();
      if (RestartTime != 0) hash ^= RestartTime.GetHashCode();
      if (ServerTimeCheckRange != 0) hash ^= ServerTimeCheckRange.GetHashCode();
      if (SettingFBFollowGem != 0) hash ^= SettingFBFollowGem.GetHashCode();
      if (SettingHelpshiftWebsite.Length != 0) hash ^= SettingHelpshiftWebsite.GetHashCode();
      if (SkinBaseColor.Length != 0) hash ^= SkinBaseColor.GetHashCode();
      if (SpdGemTips != 0) hash ^= SpdGemTips.GetHashCode();
      hash ^= spdUpDivide_.GetHashCode();
      hash ^= spdUpParam_.GetHashCode();
      if (SpecialStudentCdInterval != 0) hash ^= SpecialStudentCdInterval.GetHashCode();
      hash ^= studentAnchorPointAmount_.GetHashCode();
      hash ^= studentGroupTotal_.GetHashCode();
      hash ^= studentShowInterval_.GetHashCode();
      if (SunRankMemberNum != 0) hash ^= SunRankMemberNum.GetHashCode();
      if (SunRankStopNewTime != 0) hash ^= SunRankStopNewTime.GetHashCode();
      if (SunRankTime != 0) hash ^= SunRankTime.GetHashCode();
      hash ^= surveyAdsPos_.GetHashCode();
      hash ^= TapSourceTips.GetHashCode();
      if (TaskDailyFinalChest.Length != 0) hash ^= TaskDailyFinalChest.GetHashCode();
      if (TaskDailyHardRate != 0) hash ^= TaskDailyHardRate.GetHashCode();
      if (TaskDailyTotalNum != 0) hash ^= TaskDailyTotalNum.GetHashCode();
      hash ^= taskPlotTime_.GetHashCode();
      if (UpdateRemindPopupId != 0) hash ^= UpdateRemindPopupId.GetHashCode();
      if (UserRecordMaxDay != 0) hash ^= UserRecordMaxDay.GetHashCode();
      if (UserRecordRefreshUtc != 0) hash ^= UserRecordRefreshUtc.GetHashCode();
      if (UserRecordWeekday != 0) hash ^= UserRecordWeekday.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (WallPaperDisplay.Length != 0) hash ^= WallPaperDisplay.GetHashCode();
      if (WebshopAddress.Length != 0) hash ^= WebshopAddress.GetHashCode();
      if (WebshopShowPayment != 0) hash ^= WebshopShowPayment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ActivityConsumeNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityConsumeNum);
      }
      if (ActivityMaxNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActivityMaxNum);
      }
      if (AnnualSummaryDeadline != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AnnualSummaryDeadline);
      }
      if (BpGroupRankingHide != false) {
        output.WriteRawTag(32);
        output.WriteBool(BpGroupRankingHide);
      }
      if (BpRankingFriendHide != false) {
        output.WriteRawTag(40);
        output.WriteBool(BpRankingFriendHide);
      }
      if (BpRankingHide != false) {
        output.WriteRawTag(48);
        output.WriteBool(BpRankingHide);
      }
      if (BpRankingWorldHide != false) {
        output.WriteRawTag(56);
        output.WriteBool(BpRankingWorldHide);
      }
      if (Bpiconovertip1 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Bpiconovertip1);
      }
      if (Bpiconovertip2 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Bpiconovertip2);
      }
      if (ClientHttpContinue != false) {
        output.WriteRawTag(80);
        output.WriteBool(ClientHttpContinue);
      }
      if (ClientHttpTimeout != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ClientHttpTimeout);
      }
      if (EventRoleShowAmount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(EventRoleShowAmount);
      }
      if (EventRoleShowLimitation != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(EventRoleShowLimitation);
      }
      if (FBCommunityWebsite.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(FBCommunityWebsite);
      }
      if (GroupRankingHide != false) {
        output.WriteRawTag(120);
        output.WriteBool(GroupRankingHide);
      }
      if (GuildAnnouncementLimit != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(GuildAnnouncementLimit);
      }
      if (GuildApplyCd != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(GuildApplyCd);
      }
      if (GuildApplyExpireDay != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(GuildApplyExpireDay);
      }
      if (GuildApplyLimit != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(GuildApplyLimit);
      }
      if (GuildCreatePrice != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(GuildCreatePrice);
      }
      if (GuildJoinCd != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(GuildJoinCd);
      }
      if (GuildKickoutLimitation != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(GuildKickoutLimitation);
      }
      if (GuildLeaderInactionDuration != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(GuildLeaderInactionDuration);
      }
      if (GuildListNum != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(GuildListNum);
      }
      if (GuildMemberNum != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(GuildMemberNum);
      }
      if (GuildModifyNamePrice != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(GuildModifyNamePrice);
      }
      guildNameInvalidChar_.WriteTo(output, _repeated_guildNameInvalidChar_codec);
      if (GuildNameLenMax != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(GuildNameLenMax);
      }
      if (GuildNameLenMin != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(GuildNameLenMin);
      }
      if (GuildRefreshInterval != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(GuildRefreshInterval);
      }
      if (HobbitsName != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(HobbitsName);
      }
      if (HobbitsName2 != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(HobbitsName2);
      }
      if (LightLoadingInterval != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(LightLoadingInterval);
      }
      if (MiniGameShareImgUrl.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(MiniGameShareImgUrl);
      }
      if (NoNetQuitTime != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(NoNetQuitTime);
      }
      if (NoticeFetchIntervalSec != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(NoticeFetchIntervalSec);
      }
      noticeShowIntervalMinMaxSec_.WriteTo(output, _repeated_noticeShowIntervalMinMaxSec_codec);
      if (NoticeTimeoutSec != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(NoticeTimeoutSec);
      }
      if (PacketDelateDays != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(PacketDelateDays);
      }
      if (PioneerIdx != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(PioneerIdx);
      }
      if (PrivacyPolicy.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(PrivacyPolicy);
      }
      if (RankingAnnounceDuration != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(RankingAnnounceDuration);
      }
      if (RankingAreaHide != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(RankingAreaHide);
      }
      if (RankingAreaHideInfo != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(RankingAreaHideInfo);
      }
      if (RankingAreaShowLimitation != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(RankingAreaShowLimitation);
      }
      if (RankingHide != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(RankingHide);
      }
      if (RankingLevelAreaHideInfo != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(RankingLevelAreaHideInfo);
      }
      if (RankingLevelAreaShowLimitaion != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(RankingLevelAreaShowLimitaion);
      }
      if (RankingLevelHideInfo != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(RankingLevelHideInfo);
      }
      if (RankingLevelShowLimitaion != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(RankingLevelShowLimitaion);
      }
      if (RankingLevelWorldHideInfo != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(RankingLevelWorldHideInfo);
      }
      if (RankingLevelWorldShowLimitaion != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(RankingLevelWorldShowLimitaion);
      }
      if (RankingWorldHide != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(RankingWorldHide);
      }
      if (RankingWorldHideInfo != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(RankingWorldHideInfo);
      }
      rankingWorldNormalAvatar_.WriteTo(output, _repeated_rankingWorldNormalAvatar_codec);
      if (RankingWorldShowLimitaion != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(RankingWorldShowLimitaion);
      }
      rankingWorldTopAvatar_.WriteTo(output, _repeated_rankingWorldTopAvatar_codec);
      shopRefreshTime_.WriteTo(output, _repeated_shopRefreshTime_codec);
      if (SignCoinPrize != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(SignCoinPrize);
      }
      if (SignEnergyLimitPrize != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(SignEnergyLimitPrize);
      }
      if (TermsOfService.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(TermsOfService);
      }
      if (TrackSpeedup != 0F) {
        output.WriteRawTag(245, 3);
        output.WriteFloat(TrackSpeedup);
      }
      if (UnlockEventRoleShow != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(UnlockEventRoleShow);
      }
      if (UserAvatarCount != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(UserAvatarCount);
      }
      if (UserTzOffset != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(UserTzOffset);
      }
      if (WechatIOSDisablePayVersion.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteString(WechatIOSDisablePayVersion);
      }
      yDSeq_.WriteTo(output, _repeated_yDSeq_codec);
      if (ActivityCoolDown != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(ActivityCoolDown);
      }
      adIdAndroid_.WriteTo(output, _repeated_adIdAndroid_codec);
      adIdAndroidAdmobAsia_.WriteTo(output, _repeated_adIdAndroidAdmobAsia_codec);
      adIdIos_.WriteTo(output, _repeated_adIdIos_codec);
      adIdIosAdmobAsia_.WriteTo(output, _repeated_adIdIosAdmobAsia_codec);
      if (AncCdTime != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(AncCdTime);
      }
      ancNightStopTime_.WriteTo(output, _repeated_ancNightStopTime_codec);
      if (AncSessionLimit != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(AncSessionLimit);
      }
      if (BindSocialGem != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(BindSocialGem);
      }
      if (BoardClearGem != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(BoardClearGem);
      }
      boardColors_.WriteTo(output, _repeated_boardColors_codec);
      botColor_.WriteTo(output, _repeated_botColor_codec);
      if (BotFirstRankLevel != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(BotFirstRankLevel);
      }
      bubbleBonus_.WriteTo(output, _map_bubbleBonus_codec);
      if (BubbleBonusProb != 0) {
        output.WriteRawTag(144, 5);
        output.WriteInt32(BubbleBonusProb);
      }
      if (BubbleDeadItem != 0) {
        output.WriteRawTag(152, 5);
        output.WriteInt32(BubbleDeadItem);
      }
      bubbleDeadWeight_.WriteTo(output, _repeated_bubbleDeadWeight_codec);
      if (BubbleGuideItemId != 0) {
        output.WriteRawTag(168, 5);
        output.WriteInt32(BubbleGuideItemId);
      }
      bubbleLevelDiffParam_.WriteTo(output, _repeated_bubbleLevelDiffParam_codec);
      if (BuddyApplyLimitNum != 0) {
        output.WriteRawTag(184, 5);
        output.WriteInt32(BuddyApplyLimitNum);
      }
      if (BuddyApplyLimitTime != 0) {
        output.WriteRawTag(192, 5);
        output.WriteInt32(BuddyApplyLimitTime);
      }
      if (BuddyEnergyDailyLimit != 0) {
        output.WriteRawTag(200, 5);
        output.WriteInt32(BuddyEnergyDailyLimit);
      }
      if (BuddyEnergyEachSent != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(BuddyEnergyEachSent);
      }
      if (BuddyVisitExtraReward != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(BuddyVisitExtraReward);
      }
      if (BuddyVisitLimit != 0) {
        output.WriteRawTag(224, 5);
        output.WriteInt32(BuddyVisitLimit);
      }
      buddyVisitReward_.WriteTo(output, _repeated_buddyVisitReward_codec);
      if (DailyOrderReward != 0) {
        output.WriteRawTag(240, 5);
        output.WriteInt32(DailyOrderReward);
      }
      dailyTaskNums_.WriteTo(output, _map_dailyTaskNums_codec);
      if (DecoShopRefreshGem != 0) {
        output.WriteRawTag(128, 6);
        output.WriteInt32(DecoShopRefreshGem);
      }
      if (DecoShopRefreshInterval != 0) {
        output.WriteRawTag(136, 6);
        output.WriteInt32(DecoShopRefreshInterval);
      }
      defaultHome_.WriteTo(output, _repeated_defaultHome_codec);
      defaultRolePart_.WriteTo(output, _repeated_defaultRolePart_codec);
      if (DetectiveUnlockLevel != 0) {
        output.WriteRawTag(160, 6);
        output.WriteInt32(DetectiveUnlockLevel);
      }
      if (EyeBaseColor.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(EyeBaseColor);
      }
      if (FloorDecoDisplay.Length != 0) {
        output.WriteRawTag(178, 6);
        output.WriteString(FloorDecoDisplay);
      }
      freeEnergyClaimCost_.WriteTo(output, _repeated_freeEnergyClaimCost_codec);
      freeEnergyClaimNum_.WriteTo(output, _repeated_freeEnergyClaimNum_codec);
      freeEnergyClaimTime_.WriteTo(output, _map_freeEnergyClaimTime_codec);
      freeEnergyNotification_.WriteTo(output, _map_freeEnergyNotification_codec);
      if (FreeRechargeTimes != 0) {
        output.WriteRawTag(216, 6);
        output.WriteInt32(FreeRechargeTimes);
      }
      freeRolePart_.WriteTo(output, _repeated_freeRolePart_codec);
      if (FreeSpeedUpTimes != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(FreeSpeedUpTimes);
      }
      if (FriendLimit != 0) {
        output.WriteRawTag(240, 6);
        output.WriteInt32(FriendLimit);
      }
      if (FriendOpinionFriendship != 0) {
        output.WriteRawTag(248, 6);
        output.WriteInt32(FriendOpinionFriendship);
      }
      if (GiftAutoRollingTime != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(GiftAutoRollingTime);
      }
      if (GuideMusic.Length != 0) {
        output.WriteRawTag(138, 7);
        output.WriteString(GuideMusic);
      }
      if (HairBaseColor.Length != 0) {
        output.WriteRawTag(146, 7);
        output.WriteString(HairBaseColor);
      }
      if (InitIdleCoin.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(InitIdleCoin);
      }
      if (InventoryInitCap != 0) {
        output.WriteRawTag(160, 7);
        output.WriteInt32(InventoryInitCap);
      }
      if (InventoryProducerExtraGrid != 0) {
        output.WriteRawTag(168, 7);
        output.WriteInt32(InventoryProducerExtraGrid);
      }
      if (InviteGemRewardNum != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(InviteGemRewardNum);
      }
      if (InvitedGemRewardNum != 0) {
        output.WriteRawTag(184, 7);
        output.WriteInt32(InvitedGemRewardNum);
      }
      if (IsInAppReview != false) {
        output.WriteRawTag(192, 7);
        output.WriteBool(IsInAppReview);
      }
      islandChangeItemGold_.WriteTo(output, _repeated_islandChangeItemGold_codec);
      luckyBoxCD_.WriteTo(output, _repeated_luckyBoxCD_codec);
      if (LuckyBoxLimit != 0) {
        output.WriteRawTag(216, 7);
        output.WriteInt32(LuckyBoxLimit);
      }
      if (LuckyBoxNum != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(LuckyBoxNum);
      }
      if (LuckyWheelAdsCount != 0) {
        output.WriteRawTag(232, 7);
        output.WriteInt32(LuckyWheelAdsCount);
      }
      if (LuckyWheelFreeCount != 0) {
        output.WriteRawTag(240, 7);
        output.WriteInt32(LuckyWheelFreeCount);
      }
      if (LuckyWheelGemCost != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(LuckyWheelGemCost);
      }
      if (LuckyWheelGemCount != 0) {
        output.WriteRawTag(128, 8);
        output.WriteInt32(LuckyWheelGemCount);
      }
      if (MailSystemMax != 0) {
        output.WriteRawTag(136, 8);
        output.WriteInt32(MailSystemMax);
      }
      if (MarketRefresh != 0) {
        output.WriteRawTag(144, 8);
        output.WriteInt32(MarketRefresh);
      }
      if (MarketRefreshNum != 0) {
        output.WriteRawTag(152, 8);
        output.WriteInt32(MarketRefreshNum);
      }
      if (MarketUtcClock != 0) {
        output.WriteRawTag(160, 8);
        output.WriteInt32(MarketUtcClock);
      }
      if (MaxFameLevelToViewActivityFeed != 0) {
        output.WriteRawTag(168, 8);
        output.WriteInt32(MaxFameLevelToViewActivityFeed);
      }
      if (MergeBonus != 0) {
        output.WriteRawTag(176, 8);
        output.WriteInt32(MergeBonus);
      }
      if (MergeBonusLevel != 0) {
        output.WriteRawTag(184, 8);
        output.WriteInt32(MergeBonusLevel);
      }
      if (MergeEnergyAutoMax != 0) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(MergeEnergyAutoMax);
      }
      if (MergeEnergyAutoSec != 0) {
        output.WriteRawTag(200, 8);
        output.WriteInt32(MergeEnergyAutoSec);
      }
      mergeEnergyPrice_.WriteTo(output, _repeated_mergeEnergyPrice_codec);
      if (MouthBaseColor.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(MouthBaseColor);
      }
      if (MysteryStoreCustomNum != 0) {
        output.WriteRawTag(224, 8);
        output.WriteInt32(MysteryStoreCustomNum);
      }
      if (MysteryStoreCustomRate != 0) {
        output.WriteRawTag(232, 8);
        output.WriteInt32(MysteryStoreCustomRate);
      }
      if (MysteryStoreRefreshPrice != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(MysteryStoreRefreshPrice);
      }
      mysteryStoreRefreshTime_.WriteTo(output, _repeated_mysteryStoreRefreshTime_codec);
      if (NameMax != 0) {
        output.WriteRawTag(128, 9);
        output.WriteInt32(NameMax);
      }
      if (NameMin != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(NameMin);
      }
      if (NewUserGrandPrizeInviteNum != 0) {
        output.WriteRawTag(144, 9);
        output.WriteInt32(NewUserGrandPrizeInviteNum);
      }
      newUserGrandPrizeReward_.WriteTo(output, _map_newUserGrandPrizeReward_codec);
      if (NewUserInviteeMaxLevel != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(NewUserInviteeMaxLevel);
      }
      newUserRewardForInvitee_.WriteTo(output, _map_newUserRewardForInvitee_codec);
      newUserRewardForInvitor_.WriteTo(output, _map_newUserRewardForInvitor_codec);
      if (NewUserRewardLevel != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(NewUserRewardLevel);
      }
      notificationEnergyBonus_.WriteTo(output, _repeated_notificationEnergyBonus_codec);
      if (OldUserLetterDuration != 0) {
        output.WriteRawTag(200, 9);
        output.WriteInt32(OldUserLetterDuration);
      }
      if (OrderLimitCount != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(OrderLimitCount);
      }
      if (PetNPC != 0) {
        output.WriteRawTag(216, 9);
        output.WriteInt32(PetNPC);
      }
      postCardIParamIsland1_.WriteTo(output, _repeated_postCardIParamIsland1_codec);
      postCardParam_.WriteTo(output, _repeated_postCardParam_codec);
      postcardGiftOthersReward_.WriteTo(output, _repeated_postcardGiftOthersReward_codec);
      if (PostcardMinNum != 0) {
        output.WriteRawTag(248, 9);
        output.WriteInt32(PostcardMinNum);
      }
      pushShopCD_.WriteTo(output, _repeated_pushShopCD_codec);
      pushShopCDIce_.WriteTo(output, _repeated_pushShopCDIce_codec);
      if (PushShopDuration != 0) {
        output.WriteRawTag(144, 10);
        output.WriteInt32(PushShopDuration);
      }
      pushShopMaxNum_.WriteTo(output, _map_pushShopMaxNum_codec);
      pushShopPopTimes_.WriteTo(output, _repeated_pushShopPopTimes_codec);
      if (RankBotOrderLimitNum != 0) {
        output.WriteRawTag(168, 10);
        output.WriteInt32(RankBotOrderLimitNum);
      }
      rankCoinsParam_.WriteTo(output, _repeated_rankCoinsParam_codec);
      rankCoinsParamNew_.WriteTo(output, _repeated_rankCoinsParamNew_codec);
      if (RankMemberNum != 0) {
        output.WriteRawTag(192, 10);
        output.WriteInt32(RankMemberNum);
      }
      if (RankOrderNum != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(RankOrderNum);
      }
      rateTaskOpen_.WriteTo(output, _repeated_rateTaskOpen_codec);
      if (SettingFBFollowGem != 0) {
        output.WriteRawTag(216, 10);
        output.WriteInt32(SettingFBFollowGem);
      }
      if (SettingHelpshiftWebsite.Length != 0) {
        output.WriteRawTag(226, 10);
        output.WriteString(SettingHelpshiftWebsite);
      }
      if (SkinBaseColor.Length != 0) {
        output.WriteRawTag(234, 10);
        output.WriteString(SkinBaseColor);
      }
      if (SpecialStudentCdInterval != 0) {
        output.WriteRawTag(240, 10);
        output.WriteInt32(SpecialStudentCdInterval);
      }
      studentAnchorPointAmount_.WriteTo(output, _repeated_studentAnchorPointAmount_codec);
      studentGroupTotal_.WriteTo(output, _repeated_studentGroupTotal_codec);
      studentShowInterval_.WriteTo(output, _repeated_studentShowInterval_codec);
      if (SunRankMemberNum != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(SunRankMemberNum);
      }
      if (SunRankStopNewTime != 0) {
        output.WriteRawTag(152, 11);
        output.WriteInt32(SunRankStopNewTime);
      }
      if (SunRankTime != 0) {
        output.WriteRawTag(160, 11);
        output.WriteInt32(SunRankTime);
      }
      surveyAdsPos_.WriteTo(output, _repeated_surveyAdsPos_codec);
      if (TaskDailyFinalChest.Length != 0) {
        output.WriteRawTag(178, 11);
        output.WriteString(TaskDailyFinalChest);
      }
      if (TaskDailyHardRate != 0) {
        output.WriteRawTag(184, 11);
        output.WriteInt32(TaskDailyHardRate);
      }
      if (TaskDailyTotalNum != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(TaskDailyTotalNum);
      }
      taskPlotTime_.WriteTo(output, _repeated_taskPlotTime_codec);
      if (Version != 0) {
        output.WriteRawTag(208, 11);
        output.WriteInt32(Version);
      }
      if (WallPaperDisplay.Length != 0) {
        output.WriteRawTag(218, 11);
        output.WriteString(WallPaperDisplay);
      }
      if (DeRefreshUtc != 0) {
        output.WriteRawTag(224, 11);
        output.WriteInt32(DeRefreshUtc);
      }
      if (DemRefreshWeekday != 0) {
        output.WriteRawTag(232, 11);
        output.WriteInt32(DemRefreshWeekday);
      }
      spdUpDivide_.WriteTo(output, _repeated_spdUpDivide_codec);
      spdUpParam_.WriteTo(output, _repeated_spdUpParam_codec);
      if (BubbleExpired != 0) {
        output.WriteRawTag(128, 12);
        output.WriteInt32(BubbleExpired);
      }
      if (BubbleMaxNum != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(BubbleMaxNum);
      }
      if (BubbleAdId != 0) {
        output.WriteRawTag(144, 12);
        output.WriteInt32(BubbleAdId);
      }
      if (GalleryFingerLv != 0) {
        output.WriteRawTag(152, 12);
        output.WriteInt32(GalleryFingerLv);
      }
      if (OrderEnterDelay != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(OrderEnterDelay);
      }
      if (GiftBoxStopShaking != 0) {
        output.WriteRawTag(168, 12);
        output.WriteInt32(GiftBoxStopShaking);
      }
      if (MergeTutorialInterval != 0) {
        output.WriteRawTag(176, 12);
        output.WriteInt32(MergeTutorialInterval);
      }
      if (MergeTutorialStop != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(MergeTutorialStop);
      }
      if (MapBuildStopAim != 0) {
        output.WriteRawTag(192, 12);
        output.WriteInt32(MapBuildStopAim);
      }
      if (MaxToolCount != 0) {
        output.WriteRawTag(200, 12);
        output.WriteInt32(MaxToolCount);
      }
      if (MapBuildStartAim != 0) {
        output.WriteRawTag(208, 12);
        output.WriteInt32(MapBuildStartAim);
      }
      if (RateRedirectLv != 0) {
        output.WriteRawTag(224, 12);
        output.WriteInt32(RateRedirectLv);
      }
      if (PopupLimit != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(PopupLimit);
      }
      if (PopupRefresh != 0) {
        output.WriteRawTag(240, 12);
        output.WriteInt32(PopupRefresh);
      }
      rateBuildingBase_.WriteTo(output, _repeated_rateBuildingBase_codec);
      if (NoticeCombackTime != 0) {
        output.WriteRawTag(128, 13);
        output.WriteInt32(NoticeCombackTime);
      }
      if (BoostLevel != 0) {
        output.WriteRawTag(136, 13);
        output.WriteInt32(BoostLevel);
      }
      if (BoostRate != 0) {
        output.WriteRawTag(144, 13);
        output.WriteInt32(BoostRate);
      }
      freeBubbleCount_.WriteTo(output, _map_freeBubbleCount_codec);
      if (UserRecordMaxDay != 0) {
        output.WriteRawTag(160, 13);
        output.WriteInt32(UserRecordMaxDay);
      }
      if (UserRecordRefreshUtc != 0) {
        output.WriteRawTag(168, 13);
        output.WriteInt32(UserRecordRefreshUtc);
      }
      itemScaleTestB_.WriteTo(output, _map_itemScaleTestB_codec);
      if (ExitNewUser != 0) {
        output.WriteRawTag(184, 13);
        output.WriteInt32(ExitNewUser);
      }
      if (UserRecordWeekday != 0) {
        output.WriteRawTag(192, 13);
        output.WriteInt32(UserRecordWeekday);
      }
      if (LvPopupCardAlbum != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(LvPopupCardAlbum);
      }
      if (LvPopupDE != 0) {
        output.WriteRawTag(208, 13);
        output.WriteInt32(LvPopupDE);
      }
      if (LvPopupNewSession != 0) {
        output.WriteRawTag(216, 13);
        output.WriteInt32(LvPopupNewSession);
      }
      if (LvPopupNewSessionId != 0) {
        output.WriteRawTag(224, 13);
        output.WriteInt32(LvPopupNewSessionId);
      }
      if (NotifiPopupEventTheme != 0) {
        output.WriteRawTag(232, 13);
        output.WriteInt32(NotifiPopupEventTheme);
      }
      if (NotifiPopupShutdownLv != 0) {
        output.WriteRawTag(240, 13);
        output.WriteInt32(NotifiPopupShutdownLv);
      }
      if (LvPopupCloseDialog != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(LvPopupCloseDialog);
      }
      if (AutoFingerTriggerTime != 0) {
        output.WriteRawTag(128, 14);
        output.WriteInt32(AutoFingerTriggerTime);
      }
      if (MergeRemindTriggerTime != 0) {
        output.WriteRawTag(136, 14);
        output.WriteInt32(MergeRemindTriggerTime);
      }
      if (IsOrderApiOnlyWhitelist != false) {
        output.WriteRawTag(144, 14);
        output.WriteBool(IsOrderApiOnlyWhitelist);
      }
      if (OrderEnterApiDelay != 0) {
        output.WriteRawTag(152, 14);
        output.WriteInt32(OrderEnterApiDelay);
      }
      if (RequireTypeADInit != 0) {
        output.WriteRawTag(160, 14);
        output.WriteInt32(RequireTypeADInit);
      }
      if (RequireTypeLTInit != 0) {
        output.WriteRawTag(168, 14);
        output.WriteInt32(RequireTypeLTInit);
      }
      if (RequireTypeUtcClock != 0) {
        output.WriteRawTag(176, 14);
        output.WriteInt32(RequireTypeUtcClock);
      }
      tapSourceTips_.WriteTo(output, _map_tapSourceTips_codec);
      if (BoxPossibleOffset != 0) {
        output.WriteRawTag(192, 14);
        output.WriteInt32(BoxPossibleOffset);
      }
      if (RetentionPackRefreshUtc != 0) {
        output.WriteRawTag(200, 14);
        output.WriteInt32(RetentionPackRefreshUtc);
      }
      if (OrderCtrlNum != 0) {
        output.WriteRawTag(208, 14);
        output.WriteInt32(OrderCtrlNum);
      }
      if (OrderCtrlTooHigh != 0) {
        output.WriteRawTag(216, 14);
        output.WriteInt32(OrderCtrlTooHigh);
      }
      if (OrderCtrlTooLow != 0) {
        output.WriteRawTag(224, 14);
        output.WriteInt32(OrderCtrlTooLow);
      }
      if (OrderCtrlTooHighTarget != 0) {
        output.WriteRawTag(232, 14);
        output.WriteInt32(OrderCtrlTooHighTarget);
      }
      if (OrderCtrlTooLowTarget != 0) {
        output.WriteRawTag(240, 14);
        output.WriteInt32(OrderCtrlTooLowTarget);
      }
      if (IsFaq != false) {
        output.WriteRawTag(248, 14);
        output.WriteBool(IsFaq);
      }
      if (CardTradeGroupLink.Length != 0) {
        output.WriteRawTag(130, 15);
        output.WriteString(CardTradeGroupLink);
      }
      if (GiveCardNum != 0) {
        output.WriteRawTag(136, 15);
        output.WriteInt32(GiveCardNum);
      }
      if (GiveCardRefreshUtc != 0) {
        output.WriteRawTag(144, 15);
        output.WriteInt32(GiveCardRefreshUtc);
      }
      if (MaxPullFriendInfoNum != 0) {
        output.WriteRawTag(152, 15);
        output.WriteInt32(MaxPullFriendInfoNum);
      }
      if (PullFriendInfoWaitTime != 0) {
        output.WriteRawTag(160, 15);
        output.WriteInt32(PullFriendInfoWaitTime);
      }
      if (IsAndFacebook != false) {
        output.WriteRawTag(168, 15);
        output.WriteBool(IsAndFacebook);
      }
      if (IsAndGoogle != false) {
        output.WriteRawTag(176, 15);
        output.WriteBool(IsAndGoogle);
      }
      if (IsIosApple != false) {
        output.WriteRawTag(184, 15);
        output.WriteBool(IsIosApple);
      }
      if (IsIosFacebook != false) {
        output.WriteRawTag(192, 15);
        output.WriteBool(IsIosFacebook);
      }
      if (IsIosGoogle != false) {
        output.WriteRawTag(200, 15);
        output.WriteBool(IsIosGoogle);
      }
      if (OrderApiPastNum != 0) {
        output.WriteRawTag(216, 15);
        output.WriteInt32(OrderApiPastNum);
      }
      if (OrderApiLiveopsGrade != 0) {
        output.WriteRawTag(224, 15);
        output.WriteInt32(OrderApiLiveopsGrade);
      }
      if (PackApiTimeout != 0) {
        output.WriteRawTag(232, 15);
        output.WriteInt32(PackApiTimeout);
      }
      if (RestartTime != 0) {
        output.WriteRawTag(240, 15);
        output.WriteInt32(RestartTime);
      }
      if (BoostLevel4X != 0) {
        output.WriteRawTag(248, 15);
        output.WriteInt32(BoostLevel4X);
      }
      if (BoostRate4X != 0) {
        output.WriteRawTag(128, 16);
        output.WriteInt32(BoostRate4X);
      }
      if (CardShopRedRefreshUtc != 0) {
        output.WriteRawTag(136, 16);
        output.WriteInt32(CardShopRedRefreshUtc);
      }
      if (IsNewOrderView != false) {
        output.WriteRawTag(144, 16);
        output.WriteBool(IsNewOrderView);
      }
      if (ServerTimeCheckRange != 0) {
        output.WriteRawTag(152, 16);
        output.WriteInt32(ServerTimeCheckRange);
      }
      if (FishBoardRepeatNum != 0) {
        output.WriteRawTag(160, 16);
        output.WriteInt32(FishBoardRepeatNum);
      }
      rankingWhitelist_.WriteTo(output, _repeated_rankingWhitelist_codec);
      abInfoAttributeDivide_.WriteTo(output, _map_abInfoAttributeDivide_codec);
      if (DiffApiTimeout != 0) {
        output.WriteRawTag(184, 16);
        output.WriteInt32(DiffApiTimeout);
      }
      if (NoticeEventValidTime != 0) {
        output.WriteRawTag(192, 16);
        output.WriteInt32(NoticeEventValidTime);
      }
      if (NotificationPopLimit != 0) {
        output.WriteRawTag(200, 16);
        output.WriteInt32(NotificationPopLimit);
      }
      if (NotificationApplicationLevel != 0) {
        output.WriteRawTag(208, 16);
        output.WriteInt32(NotificationApplicationLevel);
      }
      if (UpdateRemindPopupId != 0) {
        output.WriteRawTag(216, 16);
        output.WriteInt32(UpdateRemindPopupId);
      }
      loadingImage_.WriteTo(output, _repeated_loadingImage_codec);
      if (BpTaskRefresh != 0) {
        output.WriteRawTag(232, 16);
        output.WriteInt32(BpTaskRefresh);
      }
      if (DropProbability.Length != 0) {
        output.WriteRawTag(242, 16);
        output.WriteString(DropProbability);
      }
      if (SpdGemTips != 0) {
        output.WriteRawTag(248, 16);
        output.WriteInt32(SpdGemTips);
      }
      frozenItemDeadWeight_.WriteTo(output, _repeated_frozenItemDeadWeight_codec);
      if (MaxToastId != 0) {
        output.WriteRawTag(136, 17);
        output.WriteInt32(MaxToastId);
      }
      if (NormalToastId != 0) {
        output.WriteRawTag(144, 17);
        output.WriteInt32(NormalToastId);
      }
      if (WebshopAddress.Length != 0) {
        output.WriteRawTag(154, 17);
        output.WriteString(WebshopAddress);
      }
      if (WebshopShowPayment != 0) {
        output.WriteRawTag(160, 17);
        output.WriteInt32(WebshopShowPayment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ActivityConsumeNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityConsumeNum);
      }
      if (ActivityMaxNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActivityMaxNum);
      }
      if (AnnualSummaryDeadline != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AnnualSummaryDeadline);
      }
      if (BpGroupRankingHide != false) {
        output.WriteRawTag(32);
        output.WriteBool(BpGroupRankingHide);
      }
      if (BpRankingFriendHide != false) {
        output.WriteRawTag(40);
        output.WriteBool(BpRankingFriendHide);
      }
      if (BpRankingHide != false) {
        output.WriteRawTag(48);
        output.WriteBool(BpRankingHide);
      }
      if (BpRankingWorldHide != false) {
        output.WriteRawTag(56);
        output.WriteBool(BpRankingWorldHide);
      }
      if (Bpiconovertip1 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Bpiconovertip1);
      }
      if (Bpiconovertip2 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Bpiconovertip2);
      }
      if (ClientHttpContinue != false) {
        output.WriteRawTag(80);
        output.WriteBool(ClientHttpContinue);
      }
      if (ClientHttpTimeout != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ClientHttpTimeout);
      }
      if (EventRoleShowAmount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(EventRoleShowAmount);
      }
      if (EventRoleShowLimitation != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(EventRoleShowLimitation);
      }
      if (FBCommunityWebsite.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(FBCommunityWebsite);
      }
      if (GroupRankingHide != false) {
        output.WriteRawTag(120);
        output.WriteBool(GroupRankingHide);
      }
      if (GuildAnnouncementLimit != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(GuildAnnouncementLimit);
      }
      if (GuildApplyCd != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(GuildApplyCd);
      }
      if (GuildApplyExpireDay != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(GuildApplyExpireDay);
      }
      if (GuildApplyLimit != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(GuildApplyLimit);
      }
      if (GuildCreatePrice != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(GuildCreatePrice);
      }
      if (GuildJoinCd != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(GuildJoinCd);
      }
      if (GuildKickoutLimitation != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(GuildKickoutLimitation);
      }
      if (GuildLeaderInactionDuration != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(GuildLeaderInactionDuration);
      }
      if (GuildListNum != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(GuildListNum);
      }
      if (GuildMemberNum != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(GuildMemberNum);
      }
      if (GuildModifyNamePrice != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(GuildModifyNamePrice);
      }
      guildNameInvalidChar_.WriteTo(ref output, _repeated_guildNameInvalidChar_codec);
      if (GuildNameLenMax != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(GuildNameLenMax);
      }
      if (GuildNameLenMin != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(GuildNameLenMin);
      }
      if (GuildRefreshInterval != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(GuildRefreshInterval);
      }
      if (HobbitsName != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(HobbitsName);
      }
      if (HobbitsName2 != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(HobbitsName2);
      }
      if (LightLoadingInterval != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(LightLoadingInterval);
      }
      if (MiniGameShareImgUrl.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(MiniGameShareImgUrl);
      }
      if (NoNetQuitTime != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(NoNetQuitTime);
      }
      if (NoticeFetchIntervalSec != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(NoticeFetchIntervalSec);
      }
      noticeShowIntervalMinMaxSec_.WriteTo(ref output, _repeated_noticeShowIntervalMinMaxSec_codec);
      if (NoticeTimeoutSec != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(NoticeTimeoutSec);
      }
      if (PacketDelateDays != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(PacketDelateDays);
      }
      if (PioneerIdx != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(PioneerIdx);
      }
      if (PrivacyPolicy.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(PrivacyPolicy);
      }
      if (RankingAnnounceDuration != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(RankingAnnounceDuration);
      }
      if (RankingAreaHide != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(RankingAreaHide);
      }
      if (RankingAreaHideInfo != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(RankingAreaHideInfo);
      }
      if (RankingAreaShowLimitation != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(RankingAreaShowLimitation);
      }
      if (RankingHide != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(RankingHide);
      }
      if (RankingLevelAreaHideInfo != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(RankingLevelAreaHideInfo);
      }
      if (RankingLevelAreaShowLimitaion != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(RankingLevelAreaShowLimitaion);
      }
      if (RankingLevelHideInfo != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(RankingLevelHideInfo);
      }
      if (RankingLevelShowLimitaion != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(RankingLevelShowLimitaion);
      }
      if (RankingLevelWorldHideInfo != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(RankingLevelWorldHideInfo);
      }
      if (RankingLevelWorldShowLimitaion != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(RankingLevelWorldShowLimitaion);
      }
      if (RankingWorldHide != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(RankingWorldHide);
      }
      if (RankingWorldHideInfo != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(RankingWorldHideInfo);
      }
      rankingWorldNormalAvatar_.WriteTo(ref output, _repeated_rankingWorldNormalAvatar_codec);
      if (RankingWorldShowLimitaion != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(RankingWorldShowLimitaion);
      }
      rankingWorldTopAvatar_.WriteTo(ref output, _repeated_rankingWorldTopAvatar_codec);
      shopRefreshTime_.WriteTo(ref output, _repeated_shopRefreshTime_codec);
      if (SignCoinPrize != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(SignCoinPrize);
      }
      if (SignEnergyLimitPrize != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(SignEnergyLimitPrize);
      }
      if (TermsOfService.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(TermsOfService);
      }
      if (TrackSpeedup != 0F) {
        output.WriteRawTag(245, 3);
        output.WriteFloat(TrackSpeedup);
      }
      if (UnlockEventRoleShow != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(UnlockEventRoleShow);
      }
      if (UserAvatarCount != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(UserAvatarCount);
      }
      if (UserTzOffset != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(UserTzOffset);
      }
      if (WechatIOSDisablePayVersion.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteString(WechatIOSDisablePayVersion);
      }
      yDSeq_.WriteTo(ref output, _repeated_yDSeq_codec);
      if (ActivityCoolDown != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(ActivityCoolDown);
      }
      adIdAndroid_.WriteTo(ref output, _repeated_adIdAndroid_codec);
      adIdAndroidAdmobAsia_.WriteTo(ref output, _repeated_adIdAndroidAdmobAsia_codec);
      adIdIos_.WriteTo(ref output, _repeated_adIdIos_codec);
      adIdIosAdmobAsia_.WriteTo(ref output, _repeated_adIdIosAdmobAsia_codec);
      if (AncCdTime != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(AncCdTime);
      }
      ancNightStopTime_.WriteTo(ref output, _repeated_ancNightStopTime_codec);
      if (AncSessionLimit != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(AncSessionLimit);
      }
      if (BindSocialGem != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(BindSocialGem);
      }
      if (BoardClearGem != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(BoardClearGem);
      }
      boardColors_.WriteTo(ref output, _repeated_boardColors_codec);
      botColor_.WriteTo(ref output, _repeated_botColor_codec);
      if (BotFirstRankLevel != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(BotFirstRankLevel);
      }
      bubbleBonus_.WriteTo(ref output, _map_bubbleBonus_codec);
      if (BubbleBonusProb != 0) {
        output.WriteRawTag(144, 5);
        output.WriteInt32(BubbleBonusProb);
      }
      if (BubbleDeadItem != 0) {
        output.WriteRawTag(152, 5);
        output.WriteInt32(BubbleDeadItem);
      }
      bubbleDeadWeight_.WriteTo(ref output, _repeated_bubbleDeadWeight_codec);
      if (BubbleGuideItemId != 0) {
        output.WriteRawTag(168, 5);
        output.WriteInt32(BubbleGuideItemId);
      }
      bubbleLevelDiffParam_.WriteTo(ref output, _repeated_bubbleLevelDiffParam_codec);
      if (BuddyApplyLimitNum != 0) {
        output.WriteRawTag(184, 5);
        output.WriteInt32(BuddyApplyLimitNum);
      }
      if (BuddyApplyLimitTime != 0) {
        output.WriteRawTag(192, 5);
        output.WriteInt32(BuddyApplyLimitTime);
      }
      if (BuddyEnergyDailyLimit != 0) {
        output.WriteRawTag(200, 5);
        output.WriteInt32(BuddyEnergyDailyLimit);
      }
      if (BuddyEnergyEachSent != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(BuddyEnergyEachSent);
      }
      if (BuddyVisitExtraReward != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(BuddyVisitExtraReward);
      }
      if (BuddyVisitLimit != 0) {
        output.WriteRawTag(224, 5);
        output.WriteInt32(BuddyVisitLimit);
      }
      buddyVisitReward_.WriteTo(ref output, _repeated_buddyVisitReward_codec);
      if (DailyOrderReward != 0) {
        output.WriteRawTag(240, 5);
        output.WriteInt32(DailyOrderReward);
      }
      dailyTaskNums_.WriteTo(ref output, _map_dailyTaskNums_codec);
      if (DecoShopRefreshGem != 0) {
        output.WriteRawTag(128, 6);
        output.WriteInt32(DecoShopRefreshGem);
      }
      if (DecoShopRefreshInterval != 0) {
        output.WriteRawTag(136, 6);
        output.WriteInt32(DecoShopRefreshInterval);
      }
      defaultHome_.WriteTo(ref output, _repeated_defaultHome_codec);
      defaultRolePart_.WriteTo(ref output, _repeated_defaultRolePart_codec);
      if (DetectiveUnlockLevel != 0) {
        output.WriteRawTag(160, 6);
        output.WriteInt32(DetectiveUnlockLevel);
      }
      if (EyeBaseColor.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(EyeBaseColor);
      }
      if (FloorDecoDisplay.Length != 0) {
        output.WriteRawTag(178, 6);
        output.WriteString(FloorDecoDisplay);
      }
      freeEnergyClaimCost_.WriteTo(ref output, _repeated_freeEnergyClaimCost_codec);
      freeEnergyClaimNum_.WriteTo(ref output, _repeated_freeEnergyClaimNum_codec);
      freeEnergyClaimTime_.WriteTo(ref output, _map_freeEnergyClaimTime_codec);
      freeEnergyNotification_.WriteTo(ref output, _map_freeEnergyNotification_codec);
      if (FreeRechargeTimes != 0) {
        output.WriteRawTag(216, 6);
        output.WriteInt32(FreeRechargeTimes);
      }
      freeRolePart_.WriteTo(ref output, _repeated_freeRolePart_codec);
      if (FreeSpeedUpTimes != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(FreeSpeedUpTimes);
      }
      if (FriendLimit != 0) {
        output.WriteRawTag(240, 6);
        output.WriteInt32(FriendLimit);
      }
      if (FriendOpinionFriendship != 0) {
        output.WriteRawTag(248, 6);
        output.WriteInt32(FriendOpinionFriendship);
      }
      if (GiftAutoRollingTime != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(GiftAutoRollingTime);
      }
      if (GuideMusic.Length != 0) {
        output.WriteRawTag(138, 7);
        output.WriteString(GuideMusic);
      }
      if (HairBaseColor.Length != 0) {
        output.WriteRawTag(146, 7);
        output.WriteString(HairBaseColor);
      }
      if (InitIdleCoin.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(InitIdleCoin);
      }
      if (InventoryInitCap != 0) {
        output.WriteRawTag(160, 7);
        output.WriteInt32(InventoryInitCap);
      }
      if (InventoryProducerExtraGrid != 0) {
        output.WriteRawTag(168, 7);
        output.WriteInt32(InventoryProducerExtraGrid);
      }
      if (InviteGemRewardNum != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(InviteGemRewardNum);
      }
      if (InvitedGemRewardNum != 0) {
        output.WriteRawTag(184, 7);
        output.WriteInt32(InvitedGemRewardNum);
      }
      if (IsInAppReview != false) {
        output.WriteRawTag(192, 7);
        output.WriteBool(IsInAppReview);
      }
      islandChangeItemGold_.WriteTo(ref output, _repeated_islandChangeItemGold_codec);
      luckyBoxCD_.WriteTo(ref output, _repeated_luckyBoxCD_codec);
      if (LuckyBoxLimit != 0) {
        output.WriteRawTag(216, 7);
        output.WriteInt32(LuckyBoxLimit);
      }
      if (LuckyBoxNum != 0) {
        output.WriteRawTag(224, 7);
        output.WriteInt32(LuckyBoxNum);
      }
      if (LuckyWheelAdsCount != 0) {
        output.WriteRawTag(232, 7);
        output.WriteInt32(LuckyWheelAdsCount);
      }
      if (LuckyWheelFreeCount != 0) {
        output.WriteRawTag(240, 7);
        output.WriteInt32(LuckyWheelFreeCount);
      }
      if (LuckyWheelGemCost != 0) {
        output.WriteRawTag(248, 7);
        output.WriteInt32(LuckyWheelGemCost);
      }
      if (LuckyWheelGemCount != 0) {
        output.WriteRawTag(128, 8);
        output.WriteInt32(LuckyWheelGemCount);
      }
      if (MailSystemMax != 0) {
        output.WriteRawTag(136, 8);
        output.WriteInt32(MailSystemMax);
      }
      if (MarketRefresh != 0) {
        output.WriteRawTag(144, 8);
        output.WriteInt32(MarketRefresh);
      }
      if (MarketRefreshNum != 0) {
        output.WriteRawTag(152, 8);
        output.WriteInt32(MarketRefreshNum);
      }
      if (MarketUtcClock != 0) {
        output.WriteRawTag(160, 8);
        output.WriteInt32(MarketUtcClock);
      }
      if (MaxFameLevelToViewActivityFeed != 0) {
        output.WriteRawTag(168, 8);
        output.WriteInt32(MaxFameLevelToViewActivityFeed);
      }
      if (MergeBonus != 0) {
        output.WriteRawTag(176, 8);
        output.WriteInt32(MergeBonus);
      }
      if (MergeBonusLevel != 0) {
        output.WriteRawTag(184, 8);
        output.WriteInt32(MergeBonusLevel);
      }
      if (MergeEnergyAutoMax != 0) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(MergeEnergyAutoMax);
      }
      if (MergeEnergyAutoSec != 0) {
        output.WriteRawTag(200, 8);
        output.WriteInt32(MergeEnergyAutoSec);
      }
      mergeEnergyPrice_.WriteTo(ref output, _repeated_mergeEnergyPrice_codec);
      if (MouthBaseColor.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(MouthBaseColor);
      }
      if (MysteryStoreCustomNum != 0) {
        output.WriteRawTag(224, 8);
        output.WriteInt32(MysteryStoreCustomNum);
      }
      if (MysteryStoreCustomRate != 0) {
        output.WriteRawTag(232, 8);
        output.WriteInt32(MysteryStoreCustomRate);
      }
      if (MysteryStoreRefreshPrice != 0) {
        output.WriteRawTag(240, 8);
        output.WriteInt32(MysteryStoreRefreshPrice);
      }
      mysteryStoreRefreshTime_.WriteTo(ref output, _repeated_mysteryStoreRefreshTime_codec);
      if (NameMax != 0) {
        output.WriteRawTag(128, 9);
        output.WriteInt32(NameMax);
      }
      if (NameMin != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(NameMin);
      }
      if (NewUserGrandPrizeInviteNum != 0) {
        output.WriteRawTag(144, 9);
        output.WriteInt32(NewUserGrandPrizeInviteNum);
      }
      newUserGrandPrizeReward_.WriteTo(ref output, _map_newUserGrandPrizeReward_codec);
      if (NewUserInviteeMaxLevel != 0) {
        output.WriteRawTag(160, 9);
        output.WriteInt32(NewUserInviteeMaxLevel);
      }
      newUserRewardForInvitee_.WriteTo(ref output, _map_newUserRewardForInvitee_codec);
      newUserRewardForInvitor_.WriteTo(ref output, _map_newUserRewardForInvitor_codec);
      if (NewUserRewardLevel != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(NewUserRewardLevel);
      }
      notificationEnergyBonus_.WriteTo(ref output, _repeated_notificationEnergyBonus_codec);
      if (OldUserLetterDuration != 0) {
        output.WriteRawTag(200, 9);
        output.WriteInt32(OldUserLetterDuration);
      }
      if (OrderLimitCount != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(OrderLimitCount);
      }
      if (PetNPC != 0) {
        output.WriteRawTag(216, 9);
        output.WriteInt32(PetNPC);
      }
      postCardIParamIsland1_.WriteTo(ref output, _repeated_postCardIParamIsland1_codec);
      postCardParam_.WriteTo(ref output, _repeated_postCardParam_codec);
      postcardGiftOthersReward_.WriteTo(ref output, _repeated_postcardGiftOthersReward_codec);
      if (PostcardMinNum != 0) {
        output.WriteRawTag(248, 9);
        output.WriteInt32(PostcardMinNum);
      }
      pushShopCD_.WriteTo(ref output, _repeated_pushShopCD_codec);
      pushShopCDIce_.WriteTo(ref output, _repeated_pushShopCDIce_codec);
      if (PushShopDuration != 0) {
        output.WriteRawTag(144, 10);
        output.WriteInt32(PushShopDuration);
      }
      pushShopMaxNum_.WriteTo(ref output, _map_pushShopMaxNum_codec);
      pushShopPopTimes_.WriteTo(ref output, _repeated_pushShopPopTimes_codec);
      if (RankBotOrderLimitNum != 0) {
        output.WriteRawTag(168, 10);
        output.WriteInt32(RankBotOrderLimitNum);
      }
      rankCoinsParam_.WriteTo(ref output, _repeated_rankCoinsParam_codec);
      rankCoinsParamNew_.WriteTo(ref output, _repeated_rankCoinsParamNew_codec);
      if (RankMemberNum != 0) {
        output.WriteRawTag(192, 10);
        output.WriteInt32(RankMemberNum);
      }
      if (RankOrderNum != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(RankOrderNum);
      }
      rateTaskOpen_.WriteTo(ref output, _repeated_rateTaskOpen_codec);
      if (SettingFBFollowGem != 0) {
        output.WriteRawTag(216, 10);
        output.WriteInt32(SettingFBFollowGem);
      }
      if (SettingHelpshiftWebsite.Length != 0) {
        output.WriteRawTag(226, 10);
        output.WriteString(SettingHelpshiftWebsite);
      }
      if (SkinBaseColor.Length != 0) {
        output.WriteRawTag(234, 10);
        output.WriteString(SkinBaseColor);
      }
      if (SpecialStudentCdInterval != 0) {
        output.WriteRawTag(240, 10);
        output.WriteInt32(SpecialStudentCdInterval);
      }
      studentAnchorPointAmount_.WriteTo(ref output, _repeated_studentAnchorPointAmount_codec);
      studentGroupTotal_.WriteTo(ref output, _repeated_studentGroupTotal_codec);
      studentShowInterval_.WriteTo(ref output, _repeated_studentShowInterval_codec);
      if (SunRankMemberNum != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(SunRankMemberNum);
      }
      if (SunRankStopNewTime != 0) {
        output.WriteRawTag(152, 11);
        output.WriteInt32(SunRankStopNewTime);
      }
      if (SunRankTime != 0) {
        output.WriteRawTag(160, 11);
        output.WriteInt32(SunRankTime);
      }
      surveyAdsPos_.WriteTo(ref output, _repeated_surveyAdsPos_codec);
      if (TaskDailyFinalChest.Length != 0) {
        output.WriteRawTag(178, 11);
        output.WriteString(TaskDailyFinalChest);
      }
      if (TaskDailyHardRate != 0) {
        output.WriteRawTag(184, 11);
        output.WriteInt32(TaskDailyHardRate);
      }
      if (TaskDailyTotalNum != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(TaskDailyTotalNum);
      }
      taskPlotTime_.WriteTo(ref output, _repeated_taskPlotTime_codec);
      if (Version != 0) {
        output.WriteRawTag(208, 11);
        output.WriteInt32(Version);
      }
      if (WallPaperDisplay.Length != 0) {
        output.WriteRawTag(218, 11);
        output.WriteString(WallPaperDisplay);
      }
      if (DeRefreshUtc != 0) {
        output.WriteRawTag(224, 11);
        output.WriteInt32(DeRefreshUtc);
      }
      if (DemRefreshWeekday != 0) {
        output.WriteRawTag(232, 11);
        output.WriteInt32(DemRefreshWeekday);
      }
      spdUpDivide_.WriteTo(ref output, _repeated_spdUpDivide_codec);
      spdUpParam_.WriteTo(ref output, _repeated_spdUpParam_codec);
      if (BubbleExpired != 0) {
        output.WriteRawTag(128, 12);
        output.WriteInt32(BubbleExpired);
      }
      if (BubbleMaxNum != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(BubbleMaxNum);
      }
      if (BubbleAdId != 0) {
        output.WriteRawTag(144, 12);
        output.WriteInt32(BubbleAdId);
      }
      if (GalleryFingerLv != 0) {
        output.WriteRawTag(152, 12);
        output.WriteInt32(GalleryFingerLv);
      }
      if (OrderEnterDelay != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(OrderEnterDelay);
      }
      if (GiftBoxStopShaking != 0) {
        output.WriteRawTag(168, 12);
        output.WriteInt32(GiftBoxStopShaking);
      }
      if (MergeTutorialInterval != 0) {
        output.WriteRawTag(176, 12);
        output.WriteInt32(MergeTutorialInterval);
      }
      if (MergeTutorialStop != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(MergeTutorialStop);
      }
      if (MapBuildStopAim != 0) {
        output.WriteRawTag(192, 12);
        output.WriteInt32(MapBuildStopAim);
      }
      if (MaxToolCount != 0) {
        output.WriteRawTag(200, 12);
        output.WriteInt32(MaxToolCount);
      }
      if (MapBuildStartAim != 0) {
        output.WriteRawTag(208, 12);
        output.WriteInt32(MapBuildStartAim);
      }
      if (RateRedirectLv != 0) {
        output.WriteRawTag(224, 12);
        output.WriteInt32(RateRedirectLv);
      }
      if (PopupLimit != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(PopupLimit);
      }
      if (PopupRefresh != 0) {
        output.WriteRawTag(240, 12);
        output.WriteInt32(PopupRefresh);
      }
      rateBuildingBase_.WriteTo(ref output, _repeated_rateBuildingBase_codec);
      if (NoticeCombackTime != 0) {
        output.WriteRawTag(128, 13);
        output.WriteInt32(NoticeCombackTime);
      }
      if (BoostLevel != 0) {
        output.WriteRawTag(136, 13);
        output.WriteInt32(BoostLevel);
      }
      if (BoostRate != 0) {
        output.WriteRawTag(144, 13);
        output.WriteInt32(BoostRate);
      }
      freeBubbleCount_.WriteTo(ref output, _map_freeBubbleCount_codec);
      if (UserRecordMaxDay != 0) {
        output.WriteRawTag(160, 13);
        output.WriteInt32(UserRecordMaxDay);
      }
      if (UserRecordRefreshUtc != 0) {
        output.WriteRawTag(168, 13);
        output.WriteInt32(UserRecordRefreshUtc);
      }
      itemScaleTestB_.WriteTo(ref output, _map_itemScaleTestB_codec);
      if (ExitNewUser != 0) {
        output.WriteRawTag(184, 13);
        output.WriteInt32(ExitNewUser);
      }
      if (UserRecordWeekday != 0) {
        output.WriteRawTag(192, 13);
        output.WriteInt32(UserRecordWeekday);
      }
      if (LvPopupCardAlbum != 0) {
        output.WriteRawTag(200, 13);
        output.WriteInt32(LvPopupCardAlbum);
      }
      if (LvPopupDE != 0) {
        output.WriteRawTag(208, 13);
        output.WriteInt32(LvPopupDE);
      }
      if (LvPopupNewSession != 0) {
        output.WriteRawTag(216, 13);
        output.WriteInt32(LvPopupNewSession);
      }
      if (LvPopupNewSessionId != 0) {
        output.WriteRawTag(224, 13);
        output.WriteInt32(LvPopupNewSessionId);
      }
      if (NotifiPopupEventTheme != 0) {
        output.WriteRawTag(232, 13);
        output.WriteInt32(NotifiPopupEventTheme);
      }
      if (NotifiPopupShutdownLv != 0) {
        output.WriteRawTag(240, 13);
        output.WriteInt32(NotifiPopupShutdownLv);
      }
      if (LvPopupCloseDialog != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(LvPopupCloseDialog);
      }
      if (AutoFingerTriggerTime != 0) {
        output.WriteRawTag(128, 14);
        output.WriteInt32(AutoFingerTriggerTime);
      }
      if (MergeRemindTriggerTime != 0) {
        output.WriteRawTag(136, 14);
        output.WriteInt32(MergeRemindTriggerTime);
      }
      if (IsOrderApiOnlyWhitelist != false) {
        output.WriteRawTag(144, 14);
        output.WriteBool(IsOrderApiOnlyWhitelist);
      }
      if (OrderEnterApiDelay != 0) {
        output.WriteRawTag(152, 14);
        output.WriteInt32(OrderEnterApiDelay);
      }
      if (RequireTypeADInit != 0) {
        output.WriteRawTag(160, 14);
        output.WriteInt32(RequireTypeADInit);
      }
      if (RequireTypeLTInit != 0) {
        output.WriteRawTag(168, 14);
        output.WriteInt32(RequireTypeLTInit);
      }
      if (RequireTypeUtcClock != 0) {
        output.WriteRawTag(176, 14);
        output.WriteInt32(RequireTypeUtcClock);
      }
      tapSourceTips_.WriteTo(ref output, _map_tapSourceTips_codec);
      if (BoxPossibleOffset != 0) {
        output.WriteRawTag(192, 14);
        output.WriteInt32(BoxPossibleOffset);
      }
      if (RetentionPackRefreshUtc != 0) {
        output.WriteRawTag(200, 14);
        output.WriteInt32(RetentionPackRefreshUtc);
      }
      if (OrderCtrlNum != 0) {
        output.WriteRawTag(208, 14);
        output.WriteInt32(OrderCtrlNum);
      }
      if (OrderCtrlTooHigh != 0) {
        output.WriteRawTag(216, 14);
        output.WriteInt32(OrderCtrlTooHigh);
      }
      if (OrderCtrlTooLow != 0) {
        output.WriteRawTag(224, 14);
        output.WriteInt32(OrderCtrlTooLow);
      }
      if (OrderCtrlTooHighTarget != 0) {
        output.WriteRawTag(232, 14);
        output.WriteInt32(OrderCtrlTooHighTarget);
      }
      if (OrderCtrlTooLowTarget != 0) {
        output.WriteRawTag(240, 14);
        output.WriteInt32(OrderCtrlTooLowTarget);
      }
      if (IsFaq != false) {
        output.WriteRawTag(248, 14);
        output.WriteBool(IsFaq);
      }
      if (CardTradeGroupLink.Length != 0) {
        output.WriteRawTag(130, 15);
        output.WriteString(CardTradeGroupLink);
      }
      if (GiveCardNum != 0) {
        output.WriteRawTag(136, 15);
        output.WriteInt32(GiveCardNum);
      }
      if (GiveCardRefreshUtc != 0) {
        output.WriteRawTag(144, 15);
        output.WriteInt32(GiveCardRefreshUtc);
      }
      if (MaxPullFriendInfoNum != 0) {
        output.WriteRawTag(152, 15);
        output.WriteInt32(MaxPullFriendInfoNum);
      }
      if (PullFriendInfoWaitTime != 0) {
        output.WriteRawTag(160, 15);
        output.WriteInt32(PullFriendInfoWaitTime);
      }
      if (IsAndFacebook != false) {
        output.WriteRawTag(168, 15);
        output.WriteBool(IsAndFacebook);
      }
      if (IsAndGoogle != false) {
        output.WriteRawTag(176, 15);
        output.WriteBool(IsAndGoogle);
      }
      if (IsIosApple != false) {
        output.WriteRawTag(184, 15);
        output.WriteBool(IsIosApple);
      }
      if (IsIosFacebook != false) {
        output.WriteRawTag(192, 15);
        output.WriteBool(IsIosFacebook);
      }
      if (IsIosGoogle != false) {
        output.WriteRawTag(200, 15);
        output.WriteBool(IsIosGoogle);
      }
      if (OrderApiPastNum != 0) {
        output.WriteRawTag(216, 15);
        output.WriteInt32(OrderApiPastNum);
      }
      if (OrderApiLiveopsGrade != 0) {
        output.WriteRawTag(224, 15);
        output.WriteInt32(OrderApiLiveopsGrade);
      }
      if (PackApiTimeout != 0) {
        output.WriteRawTag(232, 15);
        output.WriteInt32(PackApiTimeout);
      }
      if (RestartTime != 0) {
        output.WriteRawTag(240, 15);
        output.WriteInt32(RestartTime);
      }
      if (BoostLevel4X != 0) {
        output.WriteRawTag(248, 15);
        output.WriteInt32(BoostLevel4X);
      }
      if (BoostRate4X != 0) {
        output.WriteRawTag(128, 16);
        output.WriteInt32(BoostRate4X);
      }
      if (CardShopRedRefreshUtc != 0) {
        output.WriteRawTag(136, 16);
        output.WriteInt32(CardShopRedRefreshUtc);
      }
      if (IsNewOrderView != false) {
        output.WriteRawTag(144, 16);
        output.WriteBool(IsNewOrderView);
      }
      if (ServerTimeCheckRange != 0) {
        output.WriteRawTag(152, 16);
        output.WriteInt32(ServerTimeCheckRange);
      }
      if (FishBoardRepeatNum != 0) {
        output.WriteRawTag(160, 16);
        output.WriteInt32(FishBoardRepeatNum);
      }
      rankingWhitelist_.WriteTo(ref output, _repeated_rankingWhitelist_codec);
      abInfoAttributeDivide_.WriteTo(ref output, _map_abInfoAttributeDivide_codec);
      if (DiffApiTimeout != 0) {
        output.WriteRawTag(184, 16);
        output.WriteInt32(DiffApiTimeout);
      }
      if (NoticeEventValidTime != 0) {
        output.WriteRawTag(192, 16);
        output.WriteInt32(NoticeEventValidTime);
      }
      if (NotificationPopLimit != 0) {
        output.WriteRawTag(200, 16);
        output.WriteInt32(NotificationPopLimit);
      }
      if (NotificationApplicationLevel != 0) {
        output.WriteRawTag(208, 16);
        output.WriteInt32(NotificationApplicationLevel);
      }
      if (UpdateRemindPopupId != 0) {
        output.WriteRawTag(216, 16);
        output.WriteInt32(UpdateRemindPopupId);
      }
      loadingImage_.WriteTo(ref output, _repeated_loadingImage_codec);
      if (BpTaskRefresh != 0) {
        output.WriteRawTag(232, 16);
        output.WriteInt32(BpTaskRefresh);
      }
      if (DropProbability.Length != 0) {
        output.WriteRawTag(242, 16);
        output.WriteString(DropProbability);
      }
      if (SpdGemTips != 0) {
        output.WriteRawTag(248, 16);
        output.WriteInt32(SpdGemTips);
      }
      frozenItemDeadWeight_.WriteTo(ref output, _repeated_frozenItemDeadWeight_codec);
      if (MaxToastId != 0) {
        output.WriteRawTag(136, 17);
        output.WriteInt32(MaxToastId);
      }
      if (NormalToastId != 0) {
        output.WriteRawTag(144, 17);
        output.WriteInt32(NormalToastId);
      }
      if (WebshopAddress.Length != 0) {
        output.WriteRawTag(154, 17);
        output.WriteString(WebshopAddress);
      }
      if (WebshopShowPayment != 0) {
        output.WriteRawTag(160, 17);
        output.WriteInt32(WebshopShowPayment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityConsumeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityConsumeNum);
      }
      if (ActivityMaxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityMaxNum);
      }
      if (AnnualSummaryDeadline != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AnnualSummaryDeadline);
      }
      if (BpGroupRankingHide != false) {
        size += 1 + 1;
      }
      if (BpRankingFriendHide != false) {
        size += 1 + 1;
      }
      if (BpRankingHide != false) {
        size += 1 + 1;
      }
      if (BpRankingWorldHide != false) {
        size += 1 + 1;
      }
      if (Bpiconovertip1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bpiconovertip1);
      }
      if (Bpiconovertip2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bpiconovertip2);
      }
      if (CardShopRedRefreshUtc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CardShopRedRefreshUtc);
      }
      if (ClientHttpContinue != false) {
        size += 1 + 1;
      }
      if (ClientHttpTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientHttpTimeout);
      }
      if (DropProbability.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DropProbability);
      }
      if (EventRoleShowAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventRoleShowAmount);
      }
      if (EventRoleShowLimitation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventRoleShowLimitation);
      }
      if (FBCommunityWebsite.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FBCommunityWebsite);
      }
      if (GroupRankingHide != false) {
        size += 1 + 1;
      }
      if (GuildAnnouncementLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildAnnouncementLimit);
      }
      if (GuildApplyCd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildApplyCd);
      }
      if (GuildApplyExpireDay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildApplyExpireDay);
      }
      if (GuildApplyLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildApplyLimit);
      }
      if (GuildCreatePrice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildCreatePrice);
      }
      if (GuildJoinCd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildJoinCd);
      }
      if (GuildKickoutLimitation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildKickoutLimitation);
      }
      if (GuildLeaderInactionDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildLeaderInactionDuration);
      }
      if (GuildListNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildListNum);
      }
      if (GuildMemberNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildMemberNum);
      }
      if (GuildModifyNamePrice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildModifyNamePrice);
      }
      size += guildNameInvalidChar_.CalculateSize(_repeated_guildNameInvalidChar_codec);
      if (GuildNameLenMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildNameLenMax);
      }
      if (GuildNameLenMin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildNameLenMin);
      }
      if (GuildRefreshInterval != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GuildRefreshInterval);
      }
      if (HobbitsName != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HobbitsName);
      }
      if (HobbitsName2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HobbitsName2);
      }
      if (LightLoadingInterval != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LightLoadingInterval);
      }
      size += loadingImage_.CalculateSize(_repeated_loadingImage_codec);
      if (MiniGameShareImgUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MiniGameShareImgUrl);
      }
      if (NoNetQuitTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NoNetQuitTime);
      }
      if (NoticeFetchIntervalSec != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NoticeFetchIntervalSec);
      }
      size += noticeShowIntervalMinMaxSec_.CalculateSize(_repeated_noticeShowIntervalMinMaxSec_codec);
      if (NoticeTimeoutSec != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NoticeTimeoutSec);
      }
      if (NotificationApplicationLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NotificationApplicationLevel);
      }
      if (NotificationPopLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NotificationPopLimit);
      }
      if (PacketDelateDays != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PacketDelateDays);
      }
      if (PioneerIdx != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PioneerIdx);
      }
      if (PrivacyPolicy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PrivacyPolicy);
      }
      if (RankingAnnounceDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankingAnnounceDuration);
      }
      if (RankingAreaHide != false) {
        size += 2 + 1;
      }
      if (RankingAreaHideInfo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankingAreaHideInfo);
      }
      if (RankingAreaShowLimitation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankingAreaShowLimitation);
      }
      if (RankingHide != false) {
        size += 2 + 1;
      }
      if (RankingLevelAreaHideInfo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankingLevelAreaHideInfo);
      }
      if (RankingLevelAreaShowLimitaion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankingLevelAreaShowLimitaion);
      }
      if (RankingLevelHideInfo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankingLevelHideInfo);
      }
      if (RankingLevelShowLimitaion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankingLevelShowLimitaion);
      }
      if (RankingLevelWorldHideInfo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankingLevelWorldHideInfo);
      }
      if (RankingLevelWorldShowLimitaion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankingLevelWorldShowLimitaion);
      }
      if (RankingWorldHide != false) {
        size += 2 + 1;
      }
      if (RankingWorldHideInfo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankingWorldHideInfo);
      }
      size += rankingWorldNormalAvatar_.CalculateSize(_repeated_rankingWorldNormalAvatar_codec);
      if (RankingWorldShowLimitaion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankingWorldShowLimitaion);
      }
      size += rankingWorldTopAvatar_.CalculateSize(_repeated_rankingWorldTopAvatar_codec);
      if (RetentionPackRefreshUtc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RetentionPackRefreshUtc);
      }
      size += shopRefreshTime_.CalculateSize(_repeated_shopRefreshTime_codec);
      if (SignCoinPrize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SignCoinPrize);
      }
      if (SignEnergyLimitPrize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SignEnergyLimitPrize);
      }
      if (TermsOfService.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TermsOfService);
      }
      if (TrackSpeedup != 0F) {
        size += 2 + 4;
      }
      if (UnlockEventRoleShow != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnlockEventRoleShow);
      }
      if (UserAvatarCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UserAvatarCount);
      }
      if (UserTzOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UserTzOffset);
      }
      if (WechatIOSDisablePayVersion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WechatIOSDisablePayVersion);
      }
      size += yDSeq_.CalculateSize(_repeated_yDSeq_codec);
      size += abInfoAttributeDivide_.CalculateSize(_map_abInfoAttributeDivide_codec);
      if (ActivityCoolDown != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActivityCoolDown);
      }
      size += adIdAndroid_.CalculateSize(_repeated_adIdAndroid_codec);
      size += adIdAndroidAdmobAsia_.CalculateSize(_repeated_adIdAndroidAdmobAsia_codec);
      size += adIdIos_.CalculateSize(_repeated_adIdIos_codec);
      size += adIdIosAdmobAsia_.CalculateSize(_repeated_adIdIosAdmobAsia_codec);
      if (AncCdTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AncCdTime);
      }
      size += ancNightStopTime_.CalculateSize(_repeated_ancNightStopTime_codec);
      if (AncSessionLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AncSessionLimit);
      }
      if (AutoFingerTriggerTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AutoFingerTriggerTime);
      }
      if (BindSocialGem != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BindSocialGem);
      }
      if (BoardClearGem != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoardClearGem);
      }
      size += boardColors_.CalculateSize(_repeated_boardColors_codec);
      if (BoostLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoostLevel);
      }
      if (BoostLevel4X != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoostLevel4X);
      }
      if (BoostRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoostRate);
      }
      if (BoostRate4X != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoostRate4X);
      }
      size += botColor_.CalculateSize(_repeated_botColor_codec);
      if (BotFirstRankLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BotFirstRankLevel);
      }
      if (BoxPossibleOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoxPossibleOffset);
      }
      if (BpTaskRefresh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BpTaskRefresh);
      }
      if (BubbleAdId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BubbleAdId);
      }
      size += bubbleBonus_.CalculateSize(_map_bubbleBonus_codec);
      if (BubbleBonusProb != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BubbleBonusProb);
      }
      if (BubbleDeadItem != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BubbleDeadItem);
      }
      size += bubbleDeadWeight_.CalculateSize(_repeated_bubbleDeadWeight_codec);
      if (BubbleExpired != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BubbleExpired);
      }
      if (BubbleGuideItemId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BubbleGuideItemId);
      }
      size += bubbleLevelDiffParam_.CalculateSize(_repeated_bubbleLevelDiffParam_codec);
      if (BubbleMaxNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BubbleMaxNum);
      }
      if (BuddyApplyLimitNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuddyApplyLimitNum);
      }
      if (BuddyApplyLimitTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuddyApplyLimitTime);
      }
      if (BuddyEnergyDailyLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuddyEnergyDailyLimit);
      }
      if (BuddyEnergyEachSent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuddyEnergyEachSent);
      }
      if (BuddyVisitExtraReward != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuddyVisitExtraReward);
      }
      if (BuddyVisitLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuddyVisitLimit);
      }
      size += buddyVisitReward_.CalculateSize(_repeated_buddyVisitReward_codec);
      if (CardTradeGroupLink.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CardTradeGroupLink);
      }
      if (DailyOrderReward != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DailyOrderReward);
      }
      size += dailyTaskNums_.CalculateSize(_map_dailyTaskNums_codec);
      if (DeRefreshUtc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeRefreshUtc);
      }
      if (DecoShopRefreshGem != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DecoShopRefreshGem);
      }
      if (DecoShopRefreshInterval != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DecoShopRefreshInterval);
      }
      size += defaultHome_.CalculateSize(_repeated_defaultHome_codec);
      size += defaultRolePart_.CalculateSize(_repeated_defaultRolePart_codec);
      if (DemRefreshWeekday != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DemRefreshWeekday);
      }
      if (DetectiveUnlockLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DetectiveUnlockLevel);
      }
      if (DiffApiTimeout != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DiffApiTimeout);
      }
      if (ExitNewUser != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExitNewUser);
      }
      if (EyeBaseColor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EyeBaseColor);
      }
      if (FishBoardRepeatNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FishBoardRepeatNum);
      }
      if (FloorDecoDisplay.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FloorDecoDisplay);
      }
      size += freeBubbleCount_.CalculateSize(_map_freeBubbleCount_codec);
      size += freeEnergyClaimCost_.CalculateSize(_repeated_freeEnergyClaimCost_codec);
      size += freeEnergyClaimNum_.CalculateSize(_repeated_freeEnergyClaimNum_codec);
      size += freeEnergyClaimTime_.CalculateSize(_map_freeEnergyClaimTime_codec);
      size += freeEnergyNotification_.CalculateSize(_map_freeEnergyNotification_codec);
      if (FreeRechargeTimes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FreeRechargeTimes);
      }
      size += freeRolePart_.CalculateSize(_repeated_freeRolePart_codec);
      if (FreeSpeedUpTimes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FreeSpeedUpTimes);
      }
      if (FriendLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FriendLimit);
      }
      if (FriendOpinionFriendship != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FriendOpinionFriendship);
      }
      size += frozenItemDeadWeight_.CalculateSize(_repeated_frozenItemDeadWeight_codec);
      if (GalleryFingerLv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GalleryFingerLv);
      }
      if (GiftAutoRollingTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GiftAutoRollingTime);
      }
      if (GiftBoxStopShaking != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GiftBoxStopShaking);
      }
      if (GiveCardNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GiveCardNum);
      }
      if (GiveCardRefreshUtc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GiveCardRefreshUtc);
      }
      if (GuideMusic.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GuideMusic);
      }
      if (HairBaseColor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HairBaseColor);
      }
      if (InitIdleCoin.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InitIdleCoin);
      }
      if (InventoryInitCap != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InventoryInitCap);
      }
      if (InventoryProducerExtraGrid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InventoryProducerExtraGrid);
      }
      if (InviteGemRewardNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InviteGemRewardNum);
      }
      if (InvitedGemRewardNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InvitedGemRewardNum);
      }
      if (IsAndFacebook != false) {
        size += 2 + 1;
      }
      if (IsAndGoogle != false) {
        size += 2 + 1;
      }
      if (IsFaq != false) {
        size += 2 + 1;
      }
      if (IsInAppReview != false) {
        size += 2 + 1;
      }
      if (IsIosApple != false) {
        size += 2 + 1;
      }
      if (IsIosFacebook != false) {
        size += 2 + 1;
      }
      if (IsIosGoogle != false) {
        size += 2 + 1;
      }
      if (IsNewOrderView != false) {
        size += 2 + 1;
      }
      if (IsOrderApiOnlyWhitelist != false) {
        size += 2 + 1;
      }
      size += islandChangeItemGold_.CalculateSize(_repeated_islandChangeItemGold_codec);
      size += itemScaleTestB_.CalculateSize(_map_itemScaleTestB_codec);
      size += luckyBoxCD_.CalculateSize(_repeated_luckyBoxCD_codec);
      if (LuckyBoxLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LuckyBoxLimit);
      }
      if (LuckyBoxNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LuckyBoxNum);
      }
      if (LuckyWheelAdsCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LuckyWheelAdsCount);
      }
      if (LuckyWheelFreeCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LuckyWheelFreeCount);
      }
      if (LuckyWheelGemCost != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LuckyWheelGemCost);
      }
      if (LuckyWheelGemCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LuckyWheelGemCount);
      }
      if (LvPopupCardAlbum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LvPopupCardAlbum);
      }
      if (LvPopupCloseDialog != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LvPopupCloseDialog);
      }
      if (LvPopupDE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LvPopupDE);
      }
      if (LvPopupNewSession != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LvPopupNewSession);
      }
      if (LvPopupNewSessionId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LvPopupNewSessionId);
      }
      if (MailSystemMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MailSystemMax);
      }
      if (MapBuildStartAim != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MapBuildStartAim);
      }
      if (MapBuildStopAim != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MapBuildStopAim);
      }
      if (MarketRefresh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MarketRefresh);
      }
      if (MarketRefreshNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MarketRefreshNum);
      }
      if (MarketUtcClock != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MarketUtcClock);
      }
      if (MaxFameLevelToViewActivityFeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxFameLevelToViewActivityFeed);
      }
      if (MaxPullFriendInfoNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxPullFriendInfoNum);
      }
      if (MaxToastId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxToastId);
      }
      if (MaxToolCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxToolCount);
      }
      if (MergeBonus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MergeBonus);
      }
      if (MergeBonusLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MergeBonusLevel);
      }
      if (MergeEnergyAutoMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MergeEnergyAutoMax);
      }
      if (MergeEnergyAutoSec != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MergeEnergyAutoSec);
      }
      size += mergeEnergyPrice_.CalculateSize(_repeated_mergeEnergyPrice_codec);
      if (MergeRemindTriggerTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MergeRemindTriggerTime);
      }
      if (MergeTutorialInterval != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MergeTutorialInterval);
      }
      if (MergeTutorialStop != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MergeTutorialStop);
      }
      if (MouthBaseColor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MouthBaseColor);
      }
      if (MysteryStoreCustomNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MysteryStoreCustomNum);
      }
      if (MysteryStoreCustomRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MysteryStoreCustomRate);
      }
      if (MysteryStoreRefreshPrice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MysteryStoreRefreshPrice);
      }
      size += mysteryStoreRefreshTime_.CalculateSize(_repeated_mysteryStoreRefreshTime_codec);
      if (NameMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NameMax);
      }
      if (NameMin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NameMin);
      }
      if (NewUserGrandPrizeInviteNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewUserGrandPrizeInviteNum);
      }
      size += newUserGrandPrizeReward_.CalculateSize(_map_newUserGrandPrizeReward_codec);
      if (NewUserInviteeMaxLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewUserInviteeMaxLevel);
      }
      size += newUserRewardForInvitee_.CalculateSize(_map_newUserRewardForInvitee_codec);
      size += newUserRewardForInvitor_.CalculateSize(_map_newUserRewardForInvitor_codec);
      if (NewUserRewardLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewUserRewardLevel);
      }
      if (NormalToastId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NormalToastId);
      }
      if (NoticeCombackTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NoticeCombackTime);
      }
      if (NoticeEventValidTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NoticeEventValidTime);
      }
      if (NotifiPopupEventTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NotifiPopupEventTheme);
      }
      if (NotifiPopupShutdownLv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NotifiPopupShutdownLv);
      }
      size += notificationEnergyBonus_.CalculateSize(_repeated_notificationEnergyBonus_codec);
      if (OldUserLetterDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OldUserLetterDuration);
      }
      if (OrderApiLiveopsGrade != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderApiLiveopsGrade);
      }
      if (OrderApiPastNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderApiPastNum);
      }
      if (OrderCtrlNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderCtrlNum);
      }
      if (OrderCtrlTooHigh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderCtrlTooHigh);
      }
      if (OrderCtrlTooHighTarget != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderCtrlTooHighTarget);
      }
      if (OrderCtrlTooLow != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderCtrlTooLow);
      }
      if (OrderCtrlTooLowTarget != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderCtrlTooLowTarget);
      }
      if (OrderEnterApiDelay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderEnterApiDelay);
      }
      if (OrderEnterDelay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderEnterDelay);
      }
      if (OrderLimitCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderLimitCount);
      }
      if (PackApiTimeout != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PackApiTimeout);
      }
      if (PetNPC != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PetNPC);
      }
      if (PopupLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PopupLimit);
      }
      if (PopupRefresh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PopupRefresh);
      }
      size += postCardIParamIsland1_.CalculateSize(_repeated_postCardIParamIsland1_codec);
      size += postCardParam_.CalculateSize(_repeated_postCardParam_codec);
      size += postcardGiftOthersReward_.CalculateSize(_repeated_postcardGiftOthersReward_codec);
      if (PostcardMinNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PostcardMinNum);
      }
      if (PullFriendInfoWaitTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PullFriendInfoWaitTime);
      }
      size += pushShopCD_.CalculateSize(_repeated_pushShopCD_codec);
      size += pushShopCDIce_.CalculateSize(_repeated_pushShopCDIce_codec);
      if (PushShopDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PushShopDuration);
      }
      size += pushShopMaxNum_.CalculateSize(_map_pushShopMaxNum_codec);
      size += pushShopPopTimes_.CalculateSize(_repeated_pushShopPopTimes_codec);
      if (RankBotOrderLimitNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankBotOrderLimitNum);
      }
      size += rankCoinsParam_.CalculateSize(_repeated_rankCoinsParam_codec);
      size += rankCoinsParamNew_.CalculateSize(_repeated_rankCoinsParamNew_codec);
      if (RankMemberNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankMemberNum);
      }
      if (RankOrderNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankOrderNum);
      }
      size += rankingWhitelist_.CalculateSize(_repeated_rankingWhitelist_codec);
      size += rateBuildingBase_.CalculateSize(_repeated_rateBuildingBase_codec);
      if (RateRedirectLv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RateRedirectLv);
      }
      size += rateTaskOpen_.CalculateSize(_repeated_rateTaskOpen_codec);
      if (RequireTypeADInit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequireTypeADInit);
      }
      if (RequireTypeLTInit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequireTypeLTInit);
      }
      if (RequireTypeUtcClock != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequireTypeUtcClock);
      }
      if (RestartTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RestartTime);
      }
      if (ServerTimeCheckRange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ServerTimeCheckRange);
      }
      if (SettingFBFollowGem != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SettingFBFollowGem);
      }
      if (SettingHelpshiftWebsite.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SettingHelpshiftWebsite);
      }
      if (SkinBaseColor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkinBaseColor);
      }
      if (SpdGemTips != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpdGemTips);
      }
      size += spdUpDivide_.CalculateSize(_repeated_spdUpDivide_codec);
      size += spdUpParam_.CalculateSize(_repeated_spdUpParam_codec);
      if (SpecialStudentCdInterval != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpecialStudentCdInterval);
      }
      size += studentAnchorPointAmount_.CalculateSize(_repeated_studentAnchorPointAmount_codec);
      size += studentGroupTotal_.CalculateSize(_repeated_studentGroupTotal_codec);
      size += studentShowInterval_.CalculateSize(_repeated_studentShowInterval_codec);
      if (SunRankMemberNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SunRankMemberNum);
      }
      if (SunRankStopNewTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SunRankStopNewTime);
      }
      if (SunRankTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SunRankTime);
      }
      size += surveyAdsPos_.CalculateSize(_repeated_surveyAdsPos_codec);
      size += tapSourceTips_.CalculateSize(_map_tapSourceTips_codec);
      if (TaskDailyFinalChest.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TaskDailyFinalChest);
      }
      if (TaskDailyHardRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TaskDailyHardRate);
      }
      if (TaskDailyTotalNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TaskDailyTotalNum);
      }
      size += taskPlotTime_.CalculateSize(_repeated_taskPlotTime_codec);
      if (UpdateRemindPopupId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UpdateRemindPopupId);
      }
      if (UserRecordMaxDay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UserRecordMaxDay);
      }
      if (UserRecordRefreshUtc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UserRecordRefreshUtc);
      }
      if (UserRecordWeekday != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UserRecordWeekday);
      }
      if (Version != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (WallPaperDisplay.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WallPaperDisplay);
      }
      if (WebshopAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WebshopAddress);
      }
      if (WebshopShowPayment != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WebshopShowPayment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Global other) {
      if (other == null) {
        return;
      }
      if (other.ActivityConsumeNum != 0) {
        ActivityConsumeNum = other.ActivityConsumeNum;
      }
      if (other.ActivityMaxNum != 0) {
        ActivityMaxNum = other.ActivityMaxNum;
      }
      if (other.AnnualSummaryDeadline != 0L) {
        AnnualSummaryDeadline = other.AnnualSummaryDeadline;
      }
      if (other.BpGroupRankingHide != false) {
        BpGroupRankingHide = other.BpGroupRankingHide;
      }
      if (other.BpRankingFriendHide != false) {
        BpRankingFriendHide = other.BpRankingFriendHide;
      }
      if (other.BpRankingHide != false) {
        BpRankingHide = other.BpRankingHide;
      }
      if (other.BpRankingWorldHide != false) {
        BpRankingWorldHide = other.BpRankingWorldHide;
      }
      if (other.Bpiconovertip1 != 0) {
        Bpiconovertip1 = other.Bpiconovertip1;
      }
      if (other.Bpiconovertip2 != 0) {
        Bpiconovertip2 = other.Bpiconovertip2;
      }
      if (other.CardShopRedRefreshUtc != 0) {
        CardShopRedRefreshUtc = other.CardShopRedRefreshUtc;
      }
      if (other.ClientHttpContinue != false) {
        ClientHttpContinue = other.ClientHttpContinue;
      }
      if (other.ClientHttpTimeout != 0) {
        ClientHttpTimeout = other.ClientHttpTimeout;
      }
      if (other.DropProbability.Length != 0) {
        DropProbability = other.DropProbability;
      }
      if (other.EventRoleShowAmount != 0) {
        EventRoleShowAmount = other.EventRoleShowAmount;
      }
      if (other.EventRoleShowLimitation != 0) {
        EventRoleShowLimitation = other.EventRoleShowLimitation;
      }
      if (other.FBCommunityWebsite.Length != 0) {
        FBCommunityWebsite = other.FBCommunityWebsite;
      }
      if (other.GroupRankingHide != false) {
        GroupRankingHide = other.GroupRankingHide;
      }
      if (other.GuildAnnouncementLimit != 0) {
        GuildAnnouncementLimit = other.GuildAnnouncementLimit;
      }
      if (other.GuildApplyCd != 0) {
        GuildApplyCd = other.GuildApplyCd;
      }
      if (other.GuildApplyExpireDay != 0) {
        GuildApplyExpireDay = other.GuildApplyExpireDay;
      }
      if (other.GuildApplyLimit != 0) {
        GuildApplyLimit = other.GuildApplyLimit;
      }
      if (other.GuildCreatePrice != 0) {
        GuildCreatePrice = other.GuildCreatePrice;
      }
      if (other.GuildJoinCd != 0) {
        GuildJoinCd = other.GuildJoinCd;
      }
      if (other.GuildKickoutLimitation != 0) {
        GuildKickoutLimitation = other.GuildKickoutLimitation;
      }
      if (other.GuildLeaderInactionDuration != 0) {
        GuildLeaderInactionDuration = other.GuildLeaderInactionDuration;
      }
      if (other.GuildListNum != 0) {
        GuildListNum = other.GuildListNum;
      }
      if (other.GuildMemberNum != 0) {
        GuildMemberNum = other.GuildMemberNum;
      }
      if (other.GuildModifyNamePrice != 0) {
        GuildModifyNamePrice = other.GuildModifyNamePrice;
      }
      guildNameInvalidChar_.Add(other.guildNameInvalidChar_);
      if (other.GuildNameLenMax != 0) {
        GuildNameLenMax = other.GuildNameLenMax;
      }
      if (other.GuildNameLenMin != 0) {
        GuildNameLenMin = other.GuildNameLenMin;
      }
      if (other.GuildRefreshInterval != 0L) {
        GuildRefreshInterval = other.GuildRefreshInterval;
      }
      if (other.HobbitsName != 0) {
        HobbitsName = other.HobbitsName;
      }
      if (other.HobbitsName2 != 0) {
        HobbitsName2 = other.HobbitsName2;
      }
      if (other.LightLoadingInterval != 0) {
        LightLoadingInterval = other.LightLoadingInterval;
      }
      loadingImage_.Add(other.loadingImage_);
      if (other.MiniGameShareImgUrl.Length != 0) {
        MiniGameShareImgUrl = other.MiniGameShareImgUrl;
      }
      if (other.NoNetQuitTime != 0) {
        NoNetQuitTime = other.NoNetQuitTime;
      }
      if (other.NoticeFetchIntervalSec != 0) {
        NoticeFetchIntervalSec = other.NoticeFetchIntervalSec;
      }
      noticeShowIntervalMinMaxSec_.Add(other.noticeShowIntervalMinMaxSec_);
      if (other.NoticeTimeoutSec != 0) {
        NoticeTimeoutSec = other.NoticeTimeoutSec;
      }
      if (other.NotificationApplicationLevel != 0) {
        NotificationApplicationLevel = other.NotificationApplicationLevel;
      }
      if (other.NotificationPopLimit != 0) {
        NotificationPopLimit = other.NotificationPopLimit;
      }
      if (other.PacketDelateDays != 0) {
        PacketDelateDays = other.PacketDelateDays;
      }
      if (other.PioneerIdx != 0) {
        PioneerIdx = other.PioneerIdx;
      }
      if (other.PrivacyPolicy.Length != 0) {
        PrivacyPolicy = other.PrivacyPolicy;
      }
      if (other.RankingAnnounceDuration != 0) {
        RankingAnnounceDuration = other.RankingAnnounceDuration;
      }
      if (other.RankingAreaHide != false) {
        RankingAreaHide = other.RankingAreaHide;
      }
      if (other.RankingAreaHideInfo != 0) {
        RankingAreaHideInfo = other.RankingAreaHideInfo;
      }
      if (other.RankingAreaShowLimitation != 0) {
        RankingAreaShowLimitation = other.RankingAreaShowLimitation;
      }
      if (other.RankingHide != false) {
        RankingHide = other.RankingHide;
      }
      if (other.RankingLevelAreaHideInfo != 0) {
        RankingLevelAreaHideInfo = other.RankingLevelAreaHideInfo;
      }
      if (other.RankingLevelAreaShowLimitaion != 0) {
        RankingLevelAreaShowLimitaion = other.RankingLevelAreaShowLimitaion;
      }
      if (other.RankingLevelHideInfo != 0) {
        RankingLevelHideInfo = other.RankingLevelHideInfo;
      }
      if (other.RankingLevelShowLimitaion != 0) {
        RankingLevelShowLimitaion = other.RankingLevelShowLimitaion;
      }
      if (other.RankingLevelWorldHideInfo != 0) {
        RankingLevelWorldHideInfo = other.RankingLevelWorldHideInfo;
      }
      if (other.RankingLevelWorldShowLimitaion != 0) {
        RankingLevelWorldShowLimitaion = other.RankingLevelWorldShowLimitaion;
      }
      if (other.RankingWorldHide != false) {
        RankingWorldHide = other.RankingWorldHide;
      }
      if (other.RankingWorldHideInfo != 0) {
        RankingWorldHideInfo = other.RankingWorldHideInfo;
      }
      rankingWorldNormalAvatar_.Add(other.rankingWorldNormalAvatar_);
      if (other.RankingWorldShowLimitaion != 0) {
        RankingWorldShowLimitaion = other.RankingWorldShowLimitaion;
      }
      rankingWorldTopAvatar_.Add(other.rankingWorldTopAvatar_);
      if (other.RetentionPackRefreshUtc != 0) {
        RetentionPackRefreshUtc = other.RetentionPackRefreshUtc;
      }
      shopRefreshTime_.Add(other.shopRefreshTime_);
      if (other.SignCoinPrize != 0) {
        SignCoinPrize = other.SignCoinPrize;
      }
      if (other.SignEnergyLimitPrize != 0) {
        SignEnergyLimitPrize = other.SignEnergyLimitPrize;
      }
      if (other.TermsOfService.Length != 0) {
        TermsOfService = other.TermsOfService;
      }
      if (other.TrackSpeedup != 0F) {
        TrackSpeedup = other.TrackSpeedup;
      }
      if (other.UnlockEventRoleShow != 0) {
        UnlockEventRoleShow = other.UnlockEventRoleShow;
      }
      if (other.UserAvatarCount != 0) {
        UserAvatarCount = other.UserAvatarCount;
      }
      if (other.UserTzOffset != 0) {
        UserTzOffset = other.UserTzOffset;
      }
      if (other.WechatIOSDisablePayVersion.Length != 0) {
        WechatIOSDisablePayVersion = other.WechatIOSDisablePayVersion;
      }
      yDSeq_.Add(other.yDSeq_);
      abInfoAttributeDivide_.Add(other.abInfoAttributeDivide_);
      if (other.ActivityCoolDown != 0) {
        ActivityCoolDown = other.ActivityCoolDown;
      }
      adIdAndroid_.Add(other.adIdAndroid_);
      adIdAndroidAdmobAsia_.Add(other.adIdAndroidAdmobAsia_);
      adIdIos_.Add(other.adIdIos_);
      adIdIosAdmobAsia_.Add(other.adIdIosAdmobAsia_);
      if (other.AncCdTime != 0) {
        AncCdTime = other.AncCdTime;
      }
      ancNightStopTime_.Add(other.ancNightStopTime_);
      if (other.AncSessionLimit != 0) {
        AncSessionLimit = other.AncSessionLimit;
      }
      if (other.AutoFingerTriggerTime != 0) {
        AutoFingerTriggerTime = other.AutoFingerTriggerTime;
      }
      if (other.BindSocialGem != 0) {
        BindSocialGem = other.BindSocialGem;
      }
      if (other.BoardClearGem != 0) {
        BoardClearGem = other.BoardClearGem;
      }
      boardColors_.Add(other.boardColors_);
      if (other.BoostLevel != 0) {
        BoostLevel = other.BoostLevel;
      }
      if (other.BoostLevel4X != 0) {
        BoostLevel4X = other.BoostLevel4X;
      }
      if (other.BoostRate != 0) {
        BoostRate = other.BoostRate;
      }
      if (other.BoostRate4X != 0) {
        BoostRate4X = other.BoostRate4X;
      }
      botColor_.Add(other.botColor_);
      if (other.BotFirstRankLevel != 0) {
        BotFirstRankLevel = other.BotFirstRankLevel;
      }
      if (other.BoxPossibleOffset != 0) {
        BoxPossibleOffset = other.BoxPossibleOffset;
      }
      if (other.BpTaskRefresh != 0) {
        BpTaskRefresh = other.BpTaskRefresh;
      }
      if (other.BubbleAdId != 0) {
        BubbleAdId = other.BubbleAdId;
      }
      bubbleBonus_.Add(other.bubbleBonus_);
      if (other.BubbleBonusProb != 0) {
        BubbleBonusProb = other.BubbleBonusProb;
      }
      if (other.BubbleDeadItem != 0) {
        BubbleDeadItem = other.BubbleDeadItem;
      }
      bubbleDeadWeight_.Add(other.bubbleDeadWeight_);
      if (other.BubbleExpired != 0) {
        BubbleExpired = other.BubbleExpired;
      }
      if (other.BubbleGuideItemId != 0) {
        BubbleGuideItemId = other.BubbleGuideItemId;
      }
      bubbleLevelDiffParam_.Add(other.bubbleLevelDiffParam_);
      if (other.BubbleMaxNum != 0) {
        BubbleMaxNum = other.BubbleMaxNum;
      }
      if (other.BuddyApplyLimitNum != 0) {
        BuddyApplyLimitNum = other.BuddyApplyLimitNum;
      }
      if (other.BuddyApplyLimitTime != 0) {
        BuddyApplyLimitTime = other.BuddyApplyLimitTime;
      }
      if (other.BuddyEnergyDailyLimit != 0) {
        BuddyEnergyDailyLimit = other.BuddyEnergyDailyLimit;
      }
      if (other.BuddyEnergyEachSent != 0) {
        BuddyEnergyEachSent = other.BuddyEnergyEachSent;
      }
      if (other.BuddyVisitExtraReward != 0) {
        BuddyVisitExtraReward = other.BuddyVisitExtraReward;
      }
      if (other.BuddyVisitLimit != 0) {
        BuddyVisitLimit = other.BuddyVisitLimit;
      }
      buddyVisitReward_.Add(other.buddyVisitReward_);
      if (other.CardTradeGroupLink.Length != 0) {
        CardTradeGroupLink = other.CardTradeGroupLink;
      }
      if (other.DailyOrderReward != 0) {
        DailyOrderReward = other.DailyOrderReward;
      }
      dailyTaskNums_.Add(other.dailyTaskNums_);
      if (other.DeRefreshUtc != 0) {
        DeRefreshUtc = other.DeRefreshUtc;
      }
      if (other.DecoShopRefreshGem != 0) {
        DecoShopRefreshGem = other.DecoShopRefreshGem;
      }
      if (other.DecoShopRefreshInterval != 0) {
        DecoShopRefreshInterval = other.DecoShopRefreshInterval;
      }
      defaultHome_.Add(other.defaultHome_);
      defaultRolePart_.Add(other.defaultRolePart_);
      if (other.DemRefreshWeekday != 0) {
        DemRefreshWeekday = other.DemRefreshWeekday;
      }
      if (other.DetectiveUnlockLevel != 0) {
        DetectiveUnlockLevel = other.DetectiveUnlockLevel;
      }
      if (other.DiffApiTimeout != 0) {
        DiffApiTimeout = other.DiffApiTimeout;
      }
      if (other.ExitNewUser != 0) {
        ExitNewUser = other.ExitNewUser;
      }
      if (other.EyeBaseColor.Length != 0) {
        EyeBaseColor = other.EyeBaseColor;
      }
      if (other.FishBoardRepeatNum != 0) {
        FishBoardRepeatNum = other.FishBoardRepeatNum;
      }
      if (other.FloorDecoDisplay.Length != 0) {
        FloorDecoDisplay = other.FloorDecoDisplay;
      }
      freeBubbleCount_.Add(other.freeBubbleCount_);
      freeEnergyClaimCost_.Add(other.freeEnergyClaimCost_);
      freeEnergyClaimNum_.Add(other.freeEnergyClaimNum_);
      freeEnergyClaimTime_.Add(other.freeEnergyClaimTime_);
      freeEnergyNotification_.Add(other.freeEnergyNotification_);
      if (other.FreeRechargeTimes != 0) {
        FreeRechargeTimes = other.FreeRechargeTimes;
      }
      freeRolePart_.Add(other.freeRolePart_);
      if (other.FreeSpeedUpTimes != 0) {
        FreeSpeedUpTimes = other.FreeSpeedUpTimes;
      }
      if (other.FriendLimit != 0) {
        FriendLimit = other.FriendLimit;
      }
      if (other.FriendOpinionFriendship != 0) {
        FriendOpinionFriendship = other.FriendOpinionFriendship;
      }
      frozenItemDeadWeight_.Add(other.frozenItemDeadWeight_);
      if (other.GalleryFingerLv != 0) {
        GalleryFingerLv = other.GalleryFingerLv;
      }
      if (other.GiftAutoRollingTime != 0) {
        GiftAutoRollingTime = other.GiftAutoRollingTime;
      }
      if (other.GiftBoxStopShaking != 0) {
        GiftBoxStopShaking = other.GiftBoxStopShaking;
      }
      if (other.GiveCardNum != 0) {
        GiveCardNum = other.GiveCardNum;
      }
      if (other.GiveCardRefreshUtc != 0) {
        GiveCardRefreshUtc = other.GiveCardRefreshUtc;
      }
      if (other.GuideMusic.Length != 0) {
        GuideMusic = other.GuideMusic;
      }
      if (other.HairBaseColor.Length != 0) {
        HairBaseColor = other.HairBaseColor;
      }
      if (other.InitIdleCoin.Length != 0) {
        InitIdleCoin = other.InitIdleCoin;
      }
      if (other.InventoryInitCap != 0) {
        InventoryInitCap = other.InventoryInitCap;
      }
      if (other.InventoryProducerExtraGrid != 0) {
        InventoryProducerExtraGrid = other.InventoryProducerExtraGrid;
      }
      if (other.InviteGemRewardNum != 0) {
        InviteGemRewardNum = other.InviteGemRewardNum;
      }
      if (other.InvitedGemRewardNum != 0) {
        InvitedGemRewardNum = other.InvitedGemRewardNum;
      }
      if (other.IsAndFacebook != false) {
        IsAndFacebook = other.IsAndFacebook;
      }
      if (other.IsAndGoogle != false) {
        IsAndGoogle = other.IsAndGoogle;
      }
      if (other.IsFaq != false) {
        IsFaq = other.IsFaq;
      }
      if (other.IsInAppReview != false) {
        IsInAppReview = other.IsInAppReview;
      }
      if (other.IsIosApple != false) {
        IsIosApple = other.IsIosApple;
      }
      if (other.IsIosFacebook != false) {
        IsIosFacebook = other.IsIosFacebook;
      }
      if (other.IsIosGoogle != false) {
        IsIosGoogle = other.IsIosGoogle;
      }
      if (other.IsNewOrderView != false) {
        IsNewOrderView = other.IsNewOrderView;
      }
      if (other.IsOrderApiOnlyWhitelist != false) {
        IsOrderApiOnlyWhitelist = other.IsOrderApiOnlyWhitelist;
      }
      islandChangeItemGold_.Add(other.islandChangeItemGold_);
      itemScaleTestB_.Add(other.itemScaleTestB_);
      luckyBoxCD_.Add(other.luckyBoxCD_);
      if (other.LuckyBoxLimit != 0) {
        LuckyBoxLimit = other.LuckyBoxLimit;
      }
      if (other.LuckyBoxNum != 0) {
        LuckyBoxNum = other.LuckyBoxNum;
      }
      if (other.LuckyWheelAdsCount != 0) {
        LuckyWheelAdsCount = other.LuckyWheelAdsCount;
      }
      if (other.LuckyWheelFreeCount != 0) {
        LuckyWheelFreeCount = other.LuckyWheelFreeCount;
      }
      if (other.LuckyWheelGemCost != 0) {
        LuckyWheelGemCost = other.LuckyWheelGemCost;
      }
      if (other.LuckyWheelGemCount != 0) {
        LuckyWheelGemCount = other.LuckyWheelGemCount;
      }
      if (other.LvPopupCardAlbum != 0) {
        LvPopupCardAlbum = other.LvPopupCardAlbum;
      }
      if (other.LvPopupCloseDialog != 0) {
        LvPopupCloseDialog = other.LvPopupCloseDialog;
      }
      if (other.LvPopupDE != 0) {
        LvPopupDE = other.LvPopupDE;
      }
      if (other.LvPopupNewSession != 0) {
        LvPopupNewSession = other.LvPopupNewSession;
      }
      if (other.LvPopupNewSessionId != 0) {
        LvPopupNewSessionId = other.LvPopupNewSessionId;
      }
      if (other.MailSystemMax != 0) {
        MailSystemMax = other.MailSystemMax;
      }
      if (other.MapBuildStartAim != 0) {
        MapBuildStartAim = other.MapBuildStartAim;
      }
      if (other.MapBuildStopAim != 0) {
        MapBuildStopAim = other.MapBuildStopAim;
      }
      if (other.MarketRefresh != 0) {
        MarketRefresh = other.MarketRefresh;
      }
      if (other.MarketRefreshNum != 0) {
        MarketRefreshNum = other.MarketRefreshNum;
      }
      if (other.MarketUtcClock != 0) {
        MarketUtcClock = other.MarketUtcClock;
      }
      if (other.MaxFameLevelToViewActivityFeed != 0) {
        MaxFameLevelToViewActivityFeed = other.MaxFameLevelToViewActivityFeed;
      }
      if (other.MaxPullFriendInfoNum != 0) {
        MaxPullFriendInfoNum = other.MaxPullFriendInfoNum;
      }
      if (other.MaxToastId != 0) {
        MaxToastId = other.MaxToastId;
      }
      if (other.MaxToolCount != 0) {
        MaxToolCount = other.MaxToolCount;
      }
      if (other.MergeBonus != 0) {
        MergeBonus = other.MergeBonus;
      }
      if (other.MergeBonusLevel != 0) {
        MergeBonusLevel = other.MergeBonusLevel;
      }
      if (other.MergeEnergyAutoMax != 0) {
        MergeEnergyAutoMax = other.MergeEnergyAutoMax;
      }
      if (other.MergeEnergyAutoSec != 0) {
        MergeEnergyAutoSec = other.MergeEnergyAutoSec;
      }
      mergeEnergyPrice_.Add(other.mergeEnergyPrice_);
      if (other.MergeRemindTriggerTime != 0) {
        MergeRemindTriggerTime = other.MergeRemindTriggerTime;
      }
      if (other.MergeTutorialInterval != 0) {
        MergeTutorialInterval = other.MergeTutorialInterval;
      }
      if (other.MergeTutorialStop != 0) {
        MergeTutorialStop = other.MergeTutorialStop;
      }
      if (other.MouthBaseColor.Length != 0) {
        MouthBaseColor = other.MouthBaseColor;
      }
      if (other.MysteryStoreCustomNum != 0) {
        MysteryStoreCustomNum = other.MysteryStoreCustomNum;
      }
      if (other.MysteryStoreCustomRate != 0) {
        MysteryStoreCustomRate = other.MysteryStoreCustomRate;
      }
      if (other.MysteryStoreRefreshPrice != 0) {
        MysteryStoreRefreshPrice = other.MysteryStoreRefreshPrice;
      }
      mysteryStoreRefreshTime_.Add(other.mysteryStoreRefreshTime_);
      if (other.NameMax != 0) {
        NameMax = other.NameMax;
      }
      if (other.NameMin != 0) {
        NameMin = other.NameMin;
      }
      if (other.NewUserGrandPrizeInviteNum != 0) {
        NewUserGrandPrizeInviteNum = other.NewUserGrandPrizeInviteNum;
      }
      newUserGrandPrizeReward_.Add(other.newUserGrandPrizeReward_);
      if (other.NewUserInviteeMaxLevel != 0) {
        NewUserInviteeMaxLevel = other.NewUserInviteeMaxLevel;
      }
      newUserRewardForInvitee_.Add(other.newUserRewardForInvitee_);
      newUserRewardForInvitor_.Add(other.newUserRewardForInvitor_);
      if (other.NewUserRewardLevel != 0) {
        NewUserRewardLevel = other.NewUserRewardLevel;
      }
      if (other.NormalToastId != 0) {
        NormalToastId = other.NormalToastId;
      }
      if (other.NoticeCombackTime != 0) {
        NoticeCombackTime = other.NoticeCombackTime;
      }
      if (other.NoticeEventValidTime != 0) {
        NoticeEventValidTime = other.NoticeEventValidTime;
      }
      if (other.NotifiPopupEventTheme != 0) {
        NotifiPopupEventTheme = other.NotifiPopupEventTheme;
      }
      if (other.NotifiPopupShutdownLv != 0) {
        NotifiPopupShutdownLv = other.NotifiPopupShutdownLv;
      }
      notificationEnergyBonus_.Add(other.notificationEnergyBonus_);
      if (other.OldUserLetterDuration != 0) {
        OldUserLetterDuration = other.OldUserLetterDuration;
      }
      if (other.OrderApiLiveopsGrade != 0) {
        OrderApiLiveopsGrade = other.OrderApiLiveopsGrade;
      }
      if (other.OrderApiPastNum != 0) {
        OrderApiPastNum = other.OrderApiPastNum;
      }
      if (other.OrderCtrlNum != 0) {
        OrderCtrlNum = other.OrderCtrlNum;
      }
      if (other.OrderCtrlTooHigh != 0) {
        OrderCtrlTooHigh = other.OrderCtrlTooHigh;
      }
      if (other.OrderCtrlTooHighTarget != 0) {
        OrderCtrlTooHighTarget = other.OrderCtrlTooHighTarget;
      }
      if (other.OrderCtrlTooLow != 0) {
        OrderCtrlTooLow = other.OrderCtrlTooLow;
      }
      if (other.OrderCtrlTooLowTarget != 0) {
        OrderCtrlTooLowTarget = other.OrderCtrlTooLowTarget;
      }
      if (other.OrderEnterApiDelay != 0) {
        OrderEnterApiDelay = other.OrderEnterApiDelay;
      }
      if (other.OrderEnterDelay != 0) {
        OrderEnterDelay = other.OrderEnterDelay;
      }
      if (other.OrderLimitCount != 0) {
        OrderLimitCount = other.OrderLimitCount;
      }
      if (other.PackApiTimeout != 0) {
        PackApiTimeout = other.PackApiTimeout;
      }
      if (other.PetNPC != 0) {
        PetNPC = other.PetNPC;
      }
      if (other.PopupLimit != 0) {
        PopupLimit = other.PopupLimit;
      }
      if (other.PopupRefresh != 0) {
        PopupRefresh = other.PopupRefresh;
      }
      postCardIParamIsland1_.Add(other.postCardIParamIsland1_);
      postCardParam_.Add(other.postCardParam_);
      postcardGiftOthersReward_.Add(other.postcardGiftOthersReward_);
      if (other.PostcardMinNum != 0) {
        PostcardMinNum = other.PostcardMinNum;
      }
      if (other.PullFriendInfoWaitTime != 0) {
        PullFriendInfoWaitTime = other.PullFriendInfoWaitTime;
      }
      pushShopCD_.Add(other.pushShopCD_);
      pushShopCDIce_.Add(other.pushShopCDIce_);
      if (other.PushShopDuration != 0) {
        PushShopDuration = other.PushShopDuration;
      }
      pushShopMaxNum_.Add(other.pushShopMaxNum_);
      pushShopPopTimes_.Add(other.pushShopPopTimes_);
      if (other.RankBotOrderLimitNum != 0) {
        RankBotOrderLimitNum = other.RankBotOrderLimitNum;
      }
      rankCoinsParam_.Add(other.rankCoinsParam_);
      rankCoinsParamNew_.Add(other.rankCoinsParamNew_);
      if (other.RankMemberNum != 0) {
        RankMemberNum = other.RankMemberNum;
      }
      if (other.RankOrderNum != 0) {
        RankOrderNum = other.RankOrderNum;
      }
      rankingWhitelist_.Add(other.rankingWhitelist_);
      rateBuildingBase_.Add(other.rateBuildingBase_);
      if (other.RateRedirectLv != 0) {
        RateRedirectLv = other.RateRedirectLv;
      }
      rateTaskOpen_.Add(other.rateTaskOpen_);
      if (other.RequireTypeADInit != 0) {
        RequireTypeADInit = other.RequireTypeADInit;
      }
      if (other.RequireTypeLTInit != 0) {
        RequireTypeLTInit = other.RequireTypeLTInit;
      }
      if (other.RequireTypeUtcClock != 0) {
        RequireTypeUtcClock = other.RequireTypeUtcClock;
      }
      if (other.RestartTime != 0) {
        RestartTime = other.RestartTime;
      }
      if (other.ServerTimeCheckRange != 0) {
        ServerTimeCheckRange = other.ServerTimeCheckRange;
      }
      if (other.SettingFBFollowGem != 0) {
        SettingFBFollowGem = other.SettingFBFollowGem;
      }
      if (other.SettingHelpshiftWebsite.Length != 0) {
        SettingHelpshiftWebsite = other.SettingHelpshiftWebsite;
      }
      if (other.SkinBaseColor.Length != 0) {
        SkinBaseColor = other.SkinBaseColor;
      }
      if (other.SpdGemTips != 0) {
        SpdGemTips = other.SpdGemTips;
      }
      spdUpDivide_.Add(other.spdUpDivide_);
      spdUpParam_.Add(other.spdUpParam_);
      if (other.SpecialStudentCdInterval != 0) {
        SpecialStudentCdInterval = other.SpecialStudentCdInterval;
      }
      studentAnchorPointAmount_.Add(other.studentAnchorPointAmount_);
      studentGroupTotal_.Add(other.studentGroupTotal_);
      studentShowInterval_.Add(other.studentShowInterval_);
      if (other.SunRankMemberNum != 0) {
        SunRankMemberNum = other.SunRankMemberNum;
      }
      if (other.SunRankStopNewTime != 0) {
        SunRankStopNewTime = other.SunRankStopNewTime;
      }
      if (other.SunRankTime != 0) {
        SunRankTime = other.SunRankTime;
      }
      surveyAdsPos_.Add(other.surveyAdsPos_);
      tapSourceTips_.Add(other.tapSourceTips_);
      if (other.TaskDailyFinalChest.Length != 0) {
        TaskDailyFinalChest = other.TaskDailyFinalChest;
      }
      if (other.TaskDailyHardRate != 0) {
        TaskDailyHardRate = other.TaskDailyHardRate;
      }
      if (other.TaskDailyTotalNum != 0) {
        TaskDailyTotalNum = other.TaskDailyTotalNum;
      }
      taskPlotTime_.Add(other.taskPlotTime_);
      if (other.UpdateRemindPopupId != 0) {
        UpdateRemindPopupId = other.UpdateRemindPopupId;
      }
      if (other.UserRecordMaxDay != 0) {
        UserRecordMaxDay = other.UserRecordMaxDay;
      }
      if (other.UserRecordRefreshUtc != 0) {
        UserRecordRefreshUtc = other.UserRecordRefreshUtc;
      }
      if (other.UserRecordWeekday != 0) {
        UserRecordWeekday = other.UserRecordWeekday;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.WallPaperDisplay.Length != 0) {
        WallPaperDisplay = other.WallPaperDisplay;
      }
      if (other.WebshopAddress.Length != 0) {
        WebshopAddress = other.WebshopAddress;
      }
      if (other.WebshopShowPayment != 0) {
        WebshopShowPayment = other.WebshopShowPayment;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActivityConsumeNum = input.ReadInt32();
            break;
          }
          case 16: {
            ActivityMaxNum = input.ReadInt32();
            break;
          }
          case 24: {
            AnnualSummaryDeadline = input.ReadInt64();
            break;
          }
          case 32: {
            BpGroupRankingHide = input.ReadBool();
            break;
          }
          case 40: {
            BpRankingFriendHide = input.ReadBool();
            break;
          }
          case 48: {
            BpRankingHide = input.ReadBool();
            break;
          }
          case 56: {
            BpRankingWorldHide = input.ReadBool();
            break;
          }
          case 64: {
            Bpiconovertip1 = input.ReadInt32();
            break;
          }
          case 72: {
            Bpiconovertip2 = input.ReadInt32();
            break;
          }
          case 80: {
            ClientHttpContinue = input.ReadBool();
            break;
          }
          case 88: {
            ClientHttpTimeout = input.ReadInt32();
            break;
          }
          case 96: {
            EventRoleShowAmount = input.ReadInt32();
            break;
          }
          case 104: {
            EventRoleShowLimitation = input.ReadInt32();
            break;
          }
          case 114: {
            FBCommunityWebsite = input.ReadString();
            break;
          }
          case 120: {
            GroupRankingHide = input.ReadBool();
            break;
          }
          case 128: {
            GuildAnnouncementLimit = input.ReadInt32();
            break;
          }
          case 136: {
            GuildApplyCd = input.ReadInt32();
            break;
          }
          case 144: {
            GuildApplyExpireDay = input.ReadInt32();
            break;
          }
          case 152: {
            GuildApplyLimit = input.ReadInt32();
            break;
          }
          case 160: {
            GuildCreatePrice = input.ReadInt32();
            break;
          }
          case 168: {
            GuildJoinCd = input.ReadInt32();
            break;
          }
          case 176: {
            GuildKickoutLimitation = input.ReadInt32();
            break;
          }
          case 184: {
            GuildLeaderInactionDuration = input.ReadInt32();
            break;
          }
          case 192: {
            GuildListNum = input.ReadInt32();
            break;
          }
          case 200: {
            GuildMemberNum = input.ReadInt32();
            break;
          }
          case 208: {
            GuildModifyNamePrice = input.ReadInt32();
            break;
          }
          case 218: {
            guildNameInvalidChar_.AddEntriesFrom(input, _repeated_guildNameInvalidChar_codec);
            break;
          }
          case 224: {
            GuildNameLenMax = input.ReadInt32();
            break;
          }
          case 232: {
            GuildNameLenMin = input.ReadInt32();
            break;
          }
          case 240: {
            GuildRefreshInterval = input.ReadInt64();
            break;
          }
          case 248: {
            HobbitsName = input.ReadInt32();
            break;
          }
          case 256: {
            HobbitsName2 = input.ReadInt32();
            break;
          }
          case 264: {
            LightLoadingInterval = input.ReadInt32();
            break;
          }
          case 274: {
            MiniGameShareImgUrl = input.ReadString();
            break;
          }
          case 280: {
            NoNetQuitTime = input.ReadInt32();
            break;
          }
          case 288: {
            NoticeFetchIntervalSec = input.ReadInt32();
            break;
          }
          case 298:
          case 296: {
            noticeShowIntervalMinMaxSec_.AddEntriesFrom(input, _repeated_noticeShowIntervalMinMaxSec_codec);
            break;
          }
          case 304: {
            NoticeTimeoutSec = input.ReadInt32();
            break;
          }
          case 312: {
            PacketDelateDays = input.ReadInt32();
            break;
          }
          case 320: {
            PioneerIdx = input.ReadInt32();
            break;
          }
          case 330: {
            PrivacyPolicy = input.ReadString();
            break;
          }
          case 336: {
            RankingAnnounceDuration = input.ReadInt32();
            break;
          }
          case 344: {
            RankingAreaHide = input.ReadBool();
            break;
          }
          case 352: {
            RankingAreaHideInfo = input.ReadInt32();
            break;
          }
          case 360: {
            RankingAreaShowLimitation = input.ReadInt32();
            break;
          }
          case 368: {
            RankingHide = input.ReadBool();
            break;
          }
          case 376: {
            RankingLevelAreaHideInfo = input.ReadInt32();
            break;
          }
          case 384: {
            RankingLevelAreaShowLimitaion = input.ReadInt32();
            break;
          }
          case 392: {
            RankingLevelHideInfo = input.ReadInt32();
            break;
          }
          case 400: {
            RankingLevelShowLimitaion = input.ReadInt32();
            break;
          }
          case 408: {
            RankingLevelWorldHideInfo = input.ReadInt32();
            break;
          }
          case 416: {
            RankingLevelWorldShowLimitaion = input.ReadInt32();
            break;
          }
          case 424: {
            RankingWorldHide = input.ReadBool();
            break;
          }
          case 432: {
            RankingWorldHideInfo = input.ReadInt32();
            break;
          }
          case 442:
          case 440: {
            rankingWorldNormalAvatar_.AddEntriesFrom(input, _repeated_rankingWorldNormalAvatar_codec);
            break;
          }
          case 448: {
            RankingWorldShowLimitaion = input.ReadInt32();
            break;
          }
          case 458:
          case 456: {
            rankingWorldTopAvatar_.AddEntriesFrom(input, _repeated_rankingWorldTopAvatar_codec);
            break;
          }
          case 466:
          case 464: {
            shopRefreshTime_.AddEntriesFrom(input, _repeated_shopRefreshTime_codec);
            break;
          }
          case 472: {
            SignCoinPrize = input.ReadInt32();
            break;
          }
          case 480: {
            SignEnergyLimitPrize = input.ReadInt32();
            break;
          }
          case 490: {
            TermsOfService = input.ReadString();
            break;
          }
          case 501: {
            TrackSpeedup = input.ReadFloat();
            break;
          }
          case 504: {
            UnlockEventRoleShow = input.ReadInt32();
            break;
          }
          case 512: {
            UserAvatarCount = input.ReadInt32();
            break;
          }
          case 520: {
            UserTzOffset = input.ReadInt32();
            break;
          }
          case 530: {
            WechatIOSDisablePayVersion = input.ReadString();
            break;
          }
          case 538:
          case 536: {
            yDSeq_.AddEntriesFrom(input, _repeated_yDSeq_codec);
            break;
          }
          case 544: {
            ActivityCoolDown = input.ReadInt32();
            break;
          }
          case 554: {
            adIdAndroid_.AddEntriesFrom(input, _repeated_adIdAndroid_codec);
            break;
          }
          case 562: {
            adIdAndroidAdmobAsia_.AddEntriesFrom(input, _repeated_adIdAndroidAdmobAsia_codec);
            break;
          }
          case 570: {
            adIdIos_.AddEntriesFrom(input, _repeated_adIdIos_codec);
            break;
          }
          case 578: {
            adIdIosAdmobAsia_.AddEntriesFrom(input, _repeated_adIdIosAdmobAsia_codec);
            break;
          }
          case 584: {
            AncCdTime = input.ReadInt32();
            break;
          }
          case 594:
          case 592: {
            ancNightStopTime_.AddEntriesFrom(input, _repeated_ancNightStopTime_codec);
            break;
          }
          case 600: {
            AncSessionLimit = input.ReadInt32();
            break;
          }
          case 608: {
            BindSocialGem = input.ReadInt32();
            break;
          }
          case 616: {
            BoardClearGem = input.ReadInt32();
            break;
          }
          case 626: {
            boardColors_.AddEntriesFrom(input, _repeated_boardColors_codec);
            break;
          }
          case 634:
          case 632: {
            botColor_.AddEntriesFrom(input, _repeated_botColor_codec);
            break;
          }
          case 640: {
            BotFirstRankLevel = input.ReadInt32();
            break;
          }
          case 650: {
            bubbleBonus_.AddEntriesFrom(input, _map_bubbleBonus_codec);
            break;
          }
          case 656: {
            BubbleBonusProb = input.ReadInt32();
            break;
          }
          case 664: {
            BubbleDeadItem = input.ReadInt32();
            break;
          }
          case 674: {
            bubbleDeadWeight_.AddEntriesFrom(input, _repeated_bubbleDeadWeight_codec);
            break;
          }
          case 680: {
            BubbleGuideItemId = input.ReadInt32();
            break;
          }
          case 690:
          case 693: {
            bubbleLevelDiffParam_.AddEntriesFrom(input, _repeated_bubbleLevelDiffParam_codec);
            break;
          }
          case 696: {
            BuddyApplyLimitNum = input.ReadInt32();
            break;
          }
          case 704: {
            BuddyApplyLimitTime = input.ReadInt32();
            break;
          }
          case 712: {
            BuddyEnergyDailyLimit = input.ReadInt32();
            break;
          }
          case 720: {
            BuddyEnergyEachSent = input.ReadInt32();
            break;
          }
          case 728: {
            BuddyVisitExtraReward = input.ReadInt32();
            break;
          }
          case 736: {
            BuddyVisitLimit = input.ReadInt32();
            break;
          }
          case 746: {
            buddyVisitReward_.AddEntriesFrom(input, _repeated_buddyVisitReward_codec);
            break;
          }
          case 752: {
            DailyOrderReward = input.ReadInt32();
            break;
          }
          case 762: {
            dailyTaskNums_.AddEntriesFrom(input, _map_dailyTaskNums_codec);
            break;
          }
          case 768: {
            DecoShopRefreshGem = input.ReadInt32();
            break;
          }
          case 776: {
            DecoShopRefreshInterval = input.ReadInt32();
            break;
          }
          case 786:
          case 784: {
            defaultHome_.AddEntriesFrom(input, _repeated_defaultHome_codec);
            break;
          }
          case 794:
          case 792: {
            defaultRolePart_.AddEntriesFrom(input, _repeated_defaultRolePart_codec);
            break;
          }
          case 800: {
            DetectiveUnlockLevel = input.ReadInt32();
            break;
          }
          case 810: {
            EyeBaseColor = input.ReadString();
            break;
          }
          case 818: {
            FloorDecoDisplay = input.ReadString();
            break;
          }
          case 826:
          case 824: {
            freeEnergyClaimCost_.AddEntriesFrom(input, _repeated_freeEnergyClaimCost_codec);
            break;
          }
          case 834:
          case 832: {
            freeEnergyClaimNum_.AddEntriesFrom(input, _repeated_freeEnergyClaimNum_codec);
            break;
          }
          case 842: {
            freeEnergyClaimTime_.AddEntriesFrom(input, _map_freeEnergyClaimTime_codec);
            break;
          }
          case 850: {
            freeEnergyNotification_.AddEntriesFrom(input, _map_freeEnergyNotification_codec);
            break;
          }
          case 856: {
            FreeRechargeTimes = input.ReadInt32();
            break;
          }
          case 866:
          case 864: {
            freeRolePart_.AddEntriesFrom(input, _repeated_freeRolePart_codec);
            break;
          }
          case 872: {
            FreeSpeedUpTimes = input.ReadInt32();
            break;
          }
          case 880: {
            FriendLimit = input.ReadInt32();
            break;
          }
          case 888: {
            FriendOpinionFriendship = input.ReadInt32();
            break;
          }
          case 896: {
            GiftAutoRollingTime = input.ReadInt32();
            break;
          }
          case 906: {
            GuideMusic = input.ReadString();
            break;
          }
          case 914: {
            HairBaseColor = input.ReadString();
            break;
          }
          case 922: {
            InitIdleCoin = input.ReadString();
            break;
          }
          case 928: {
            InventoryInitCap = input.ReadInt32();
            break;
          }
          case 936: {
            InventoryProducerExtraGrid = input.ReadInt32();
            break;
          }
          case 944: {
            InviteGemRewardNum = input.ReadInt32();
            break;
          }
          case 952: {
            InvitedGemRewardNum = input.ReadInt32();
            break;
          }
          case 960: {
            IsInAppReview = input.ReadBool();
            break;
          }
          case 970: {
            islandChangeItemGold_.AddEntriesFrom(input, _repeated_islandChangeItemGold_codec);
            break;
          }
          case 978:
          case 976: {
            luckyBoxCD_.AddEntriesFrom(input, _repeated_luckyBoxCD_codec);
            break;
          }
          case 984: {
            LuckyBoxLimit = input.ReadInt32();
            break;
          }
          case 992: {
            LuckyBoxNum = input.ReadInt32();
            break;
          }
          case 1000: {
            LuckyWheelAdsCount = input.ReadInt32();
            break;
          }
          case 1008: {
            LuckyWheelFreeCount = input.ReadInt32();
            break;
          }
          case 1016: {
            LuckyWheelGemCost = input.ReadInt32();
            break;
          }
          case 1024: {
            LuckyWheelGemCount = input.ReadInt32();
            break;
          }
          case 1032: {
            MailSystemMax = input.ReadInt32();
            break;
          }
          case 1040: {
            MarketRefresh = input.ReadInt32();
            break;
          }
          case 1048: {
            MarketRefreshNum = input.ReadInt32();
            break;
          }
          case 1056: {
            MarketUtcClock = input.ReadInt32();
            break;
          }
          case 1064: {
            MaxFameLevelToViewActivityFeed = input.ReadInt32();
            break;
          }
          case 1072: {
            MergeBonus = input.ReadInt32();
            break;
          }
          case 1080: {
            MergeBonusLevel = input.ReadInt32();
            break;
          }
          case 1088: {
            MergeEnergyAutoMax = input.ReadInt32();
            break;
          }
          case 1096: {
            MergeEnergyAutoSec = input.ReadInt32();
            break;
          }
          case 1106:
          case 1104: {
            mergeEnergyPrice_.AddEntriesFrom(input, _repeated_mergeEnergyPrice_codec);
            break;
          }
          case 1114: {
            MouthBaseColor = input.ReadString();
            break;
          }
          case 1120: {
            MysteryStoreCustomNum = input.ReadInt32();
            break;
          }
          case 1128: {
            MysteryStoreCustomRate = input.ReadInt32();
            break;
          }
          case 1136: {
            MysteryStoreRefreshPrice = input.ReadInt32();
            break;
          }
          case 1146:
          case 1144: {
            mysteryStoreRefreshTime_.AddEntriesFrom(input, _repeated_mysteryStoreRefreshTime_codec);
            break;
          }
          case 1152: {
            NameMax = input.ReadInt32();
            break;
          }
          case 1160: {
            NameMin = input.ReadInt32();
            break;
          }
          case 1168: {
            NewUserGrandPrizeInviteNum = input.ReadInt32();
            break;
          }
          case 1178: {
            newUserGrandPrizeReward_.AddEntriesFrom(input, _map_newUserGrandPrizeReward_codec);
            break;
          }
          case 1184: {
            NewUserInviteeMaxLevel = input.ReadInt32();
            break;
          }
          case 1194: {
            newUserRewardForInvitee_.AddEntriesFrom(input, _map_newUserRewardForInvitee_codec);
            break;
          }
          case 1202: {
            newUserRewardForInvitor_.AddEntriesFrom(input, _map_newUserRewardForInvitor_codec);
            break;
          }
          case 1208: {
            NewUserRewardLevel = input.ReadInt32();
            break;
          }
          case 1218:
          case 1216: {
            notificationEnergyBonus_.AddEntriesFrom(input, _repeated_notificationEnergyBonus_codec);
            break;
          }
          case 1224: {
            OldUserLetterDuration = input.ReadInt32();
            break;
          }
          case 1232: {
            OrderLimitCount = input.ReadInt32();
            break;
          }
          case 1240: {
            PetNPC = input.ReadInt32();
            break;
          }
          case 1250:
          case 1253: {
            postCardIParamIsland1_.AddEntriesFrom(input, _repeated_postCardIParamIsland1_codec);
            break;
          }
          case 1258:
          case 1261: {
            postCardParam_.AddEntriesFrom(input, _repeated_postCardParam_codec);
            break;
          }
          case 1266: {
            postcardGiftOthersReward_.AddEntriesFrom(input, _repeated_postcardGiftOthersReward_codec);
            break;
          }
          case 1272: {
            PostcardMinNum = input.ReadInt32();
            break;
          }
          case 1282:
          case 1280: {
            pushShopCD_.AddEntriesFrom(input, _repeated_pushShopCD_codec);
            break;
          }
          case 1290:
          case 1288: {
            pushShopCDIce_.AddEntriesFrom(input, _repeated_pushShopCDIce_codec);
            break;
          }
          case 1296: {
            PushShopDuration = input.ReadInt32();
            break;
          }
          case 1306: {
            pushShopMaxNum_.AddEntriesFrom(input, _map_pushShopMaxNum_codec);
            break;
          }
          case 1314:
          case 1312: {
            pushShopPopTimes_.AddEntriesFrom(input, _repeated_pushShopPopTimes_codec);
            break;
          }
          case 1320: {
            RankBotOrderLimitNum = input.ReadInt32();
            break;
          }
          case 1330:
          case 1328: {
            rankCoinsParam_.AddEntriesFrom(input, _repeated_rankCoinsParam_codec);
            break;
          }
          case 1338:
          case 1341: {
            rankCoinsParamNew_.AddEntriesFrom(input, _repeated_rankCoinsParamNew_codec);
            break;
          }
          case 1344: {
            RankMemberNum = input.ReadInt32();
            break;
          }
          case 1352: {
            RankOrderNum = input.ReadInt32();
            break;
          }
          case 1362:
          case 1360: {
            rateTaskOpen_.AddEntriesFrom(input, _repeated_rateTaskOpen_codec);
            break;
          }
          case 1368: {
            SettingFBFollowGem = input.ReadInt32();
            break;
          }
          case 1378: {
            SettingHelpshiftWebsite = input.ReadString();
            break;
          }
          case 1386: {
            SkinBaseColor = input.ReadString();
            break;
          }
          case 1392: {
            SpecialStudentCdInterval = input.ReadInt32();
            break;
          }
          case 1402:
          case 1400: {
            studentAnchorPointAmount_.AddEntriesFrom(input, _repeated_studentAnchorPointAmount_codec);
            break;
          }
          case 1410:
          case 1408: {
            studentGroupTotal_.AddEntriesFrom(input, _repeated_studentGroupTotal_codec);
            break;
          }
          case 1418:
          case 1416: {
            studentShowInterval_.AddEntriesFrom(input, _repeated_studentShowInterval_codec);
            break;
          }
          case 1424: {
            SunRankMemberNum = input.ReadInt32();
            break;
          }
          case 1432: {
            SunRankStopNewTime = input.ReadInt32();
            break;
          }
          case 1440: {
            SunRankTime = input.ReadInt32();
            break;
          }
          case 1450:
          case 1448: {
            surveyAdsPos_.AddEntriesFrom(input, _repeated_surveyAdsPos_codec);
            break;
          }
          case 1458: {
            TaskDailyFinalChest = input.ReadString();
            break;
          }
          case 1464: {
            TaskDailyHardRate = input.ReadInt32();
            break;
          }
          case 1472: {
            TaskDailyTotalNum = input.ReadInt32();
            break;
          }
          case 1482:
          case 1480: {
            taskPlotTime_.AddEntriesFrom(input, _repeated_taskPlotTime_codec);
            break;
          }
          case 1488: {
            Version = input.ReadInt32();
            break;
          }
          case 1498: {
            WallPaperDisplay = input.ReadString();
            break;
          }
          case 1504: {
            DeRefreshUtc = input.ReadInt32();
            break;
          }
          case 1512: {
            DemRefreshWeekday = input.ReadInt32();
            break;
          }
          case 1522:
          case 1520: {
            spdUpDivide_.AddEntriesFrom(input, _repeated_spdUpDivide_codec);
            break;
          }
          case 1530:
          case 1528: {
            spdUpParam_.AddEntriesFrom(input, _repeated_spdUpParam_codec);
            break;
          }
          case 1536: {
            BubbleExpired = input.ReadInt32();
            break;
          }
          case 1544: {
            BubbleMaxNum = input.ReadInt32();
            break;
          }
          case 1552: {
            BubbleAdId = input.ReadInt32();
            break;
          }
          case 1560: {
            GalleryFingerLv = input.ReadInt32();
            break;
          }
          case 1568: {
            OrderEnterDelay = input.ReadInt32();
            break;
          }
          case 1576: {
            GiftBoxStopShaking = input.ReadInt32();
            break;
          }
          case 1584: {
            MergeTutorialInterval = input.ReadInt32();
            break;
          }
          case 1592: {
            MergeTutorialStop = input.ReadInt32();
            break;
          }
          case 1600: {
            MapBuildStopAim = input.ReadInt32();
            break;
          }
          case 1608: {
            MaxToolCount = input.ReadInt32();
            break;
          }
          case 1616: {
            MapBuildStartAim = input.ReadInt32();
            break;
          }
          case 1632: {
            RateRedirectLv = input.ReadInt32();
            break;
          }
          case 1640: {
            PopupLimit = input.ReadInt32();
            break;
          }
          case 1648: {
            PopupRefresh = input.ReadInt32();
            break;
          }
          case 1658:
          case 1656: {
            rateBuildingBase_.AddEntriesFrom(input, _repeated_rateBuildingBase_codec);
            break;
          }
          case 1664: {
            NoticeCombackTime = input.ReadInt32();
            break;
          }
          case 1672: {
            BoostLevel = input.ReadInt32();
            break;
          }
          case 1680: {
            BoostRate = input.ReadInt32();
            break;
          }
          case 1690: {
            freeBubbleCount_.AddEntriesFrom(input, _map_freeBubbleCount_codec);
            break;
          }
          case 1696: {
            UserRecordMaxDay = input.ReadInt32();
            break;
          }
          case 1704: {
            UserRecordRefreshUtc = input.ReadInt32();
            break;
          }
          case 1714: {
            itemScaleTestB_.AddEntriesFrom(input, _map_itemScaleTestB_codec);
            break;
          }
          case 1720: {
            ExitNewUser = input.ReadInt32();
            break;
          }
          case 1728: {
            UserRecordWeekday = input.ReadInt32();
            break;
          }
          case 1736: {
            LvPopupCardAlbum = input.ReadInt32();
            break;
          }
          case 1744: {
            LvPopupDE = input.ReadInt32();
            break;
          }
          case 1752: {
            LvPopupNewSession = input.ReadInt32();
            break;
          }
          case 1760: {
            LvPopupNewSessionId = input.ReadInt32();
            break;
          }
          case 1768: {
            NotifiPopupEventTheme = input.ReadInt32();
            break;
          }
          case 1776: {
            NotifiPopupShutdownLv = input.ReadInt32();
            break;
          }
          case 1784: {
            LvPopupCloseDialog = input.ReadInt32();
            break;
          }
          case 1792: {
            AutoFingerTriggerTime = input.ReadInt32();
            break;
          }
          case 1800: {
            MergeRemindTriggerTime = input.ReadInt32();
            break;
          }
          case 1808: {
            IsOrderApiOnlyWhitelist = input.ReadBool();
            break;
          }
          case 1816: {
            OrderEnterApiDelay = input.ReadInt32();
            break;
          }
          case 1824: {
            RequireTypeADInit = input.ReadInt32();
            break;
          }
          case 1832: {
            RequireTypeLTInit = input.ReadInt32();
            break;
          }
          case 1840: {
            RequireTypeUtcClock = input.ReadInt32();
            break;
          }
          case 1850: {
            tapSourceTips_.AddEntriesFrom(input, _map_tapSourceTips_codec);
            break;
          }
          case 1856: {
            BoxPossibleOffset = input.ReadInt32();
            break;
          }
          case 1864: {
            RetentionPackRefreshUtc = input.ReadInt32();
            break;
          }
          case 1872: {
            OrderCtrlNum = input.ReadInt32();
            break;
          }
          case 1880: {
            OrderCtrlTooHigh = input.ReadInt32();
            break;
          }
          case 1888: {
            OrderCtrlTooLow = input.ReadInt32();
            break;
          }
          case 1896: {
            OrderCtrlTooHighTarget = input.ReadInt32();
            break;
          }
          case 1904: {
            OrderCtrlTooLowTarget = input.ReadInt32();
            break;
          }
          case 1912: {
            IsFaq = input.ReadBool();
            break;
          }
          case 1922: {
            CardTradeGroupLink = input.ReadString();
            break;
          }
          case 1928: {
            GiveCardNum = input.ReadInt32();
            break;
          }
          case 1936: {
            GiveCardRefreshUtc = input.ReadInt32();
            break;
          }
          case 1944: {
            MaxPullFriendInfoNum = input.ReadInt32();
            break;
          }
          case 1952: {
            PullFriendInfoWaitTime = input.ReadInt32();
            break;
          }
          case 1960: {
            IsAndFacebook = input.ReadBool();
            break;
          }
          case 1968: {
            IsAndGoogle = input.ReadBool();
            break;
          }
          case 1976: {
            IsIosApple = input.ReadBool();
            break;
          }
          case 1984: {
            IsIosFacebook = input.ReadBool();
            break;
          }
          case 1992: {
            IsIosGoogle = input.ReadBool();
            break;
          }
          case 2008: {
            OrderApiPastNum = input.ReadInt32();
            break;
          }
          case 2016: {
            OrderApiLiveopsGrade = input.ReadInt32();
            break;
          }
          case 2024: {
            PackApiTimeout = input.ReadInt32();
            break;
          }
          case 2032: {
            RestartTime = input.ReadInt32();
            break;
          }
          case 2040: {
            BoostLevel4X = input.ReadInt32();
            break;
          }
          case 2048: {
            BoostRate4X = input.ReadInt32();
            break;
          }
          case 2056: {
            CardShopRedRefreshUtc = input.ReadInt32();
            break;
          }
          case 2064: {
            IsNewOrderView = input.ReadBool();
            break;
          }
          case 2072: {
            ServerTimeCheckRange = input.ReadInt32();
            break;
          }
          case 2080: {
            FishBoardRepeatNum = input.ReadInt32();
            break;
          }
          case 2090: {
            rankingWhitelist_.AddEntriesFrom(input, _repeated_rankingWhitelist_codec);
            break;
          }
          case 2098: {
            abInfoAttributeDivide_.AddEntriesFrom(input, _map_abInfoAttributeDivide_codec);
            break;
          }
          case 2104: {
            DiffApiTimeout = input.ReadInt32();
            break;
          }
          case 2112: {
            NoticeEventValidTime = input.ReadInt32();
            break;
          }
          case 2120: {
            NotificationPopLimit = input.ReadInt32();
            break;
          }
          case 2128: {
            NotificationApplicationLevel = input.ReadInt32();
            break;
          }
          case 2136: {
            UpdateRemindPopupId = input.ReadInt32();
            break;
          }
          case 2146: {
            loadingImage_.AddEntriesFrom(input, _repeated_loadingImage_codec);
            break;
          }
          case 2152: {
            BpTaskRefresh = input.ReadInt32();
            break;
          }
          case 2162: {
            DropProbability = input.ReadString();
            break;
          }
          case 2168: {
            SpdGemTips = input.ReadInt32();
            break;
          }
          case 2178: {
            frozenItemDeadWeight_.AddEntriesFrom(input, _repeated_frozenItemDeadWeight_codec);
            break;
          }
          case 2184: {
            MaxToastId = input.ReadInt32();
            break;
          }
          case 2192: {
            NormalToastId = input.ReadInt32();
            break;
          }
          case 2202: {
            WebshopAddress = input.ReadString();
            break;
          }
          case 2208: {
            WebshopShowPayment = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ActivityConsumeNum = input.ReadInt32();
            break;
          }
          case 16: {
            ActivityMaxNum = input.ReadInt32();
            break;
          }
          case 24: {
            AnnualSummaryDeadline = input.ReadInt64();
            break;
          }
          case 32: {
            BpGroupRankingHide = input.ReadBool();
            break;
          }
          case 40: {
            BpRankingFriendHide = input.ReadBool();
            break;
          }
          case 48: {
            BpRankingHide = input.ReadBool();
            break;
          }
          case 56: {
            BpRankingWorldHide = input.ReadBool();
            break;
          }
          case 64: {
            Bpiconovertip1 = input.ReadInt32();
            break;
          }
          case 72: {
            Bpiconovertip2 = input.ReadInt32();
            break;
          }
          case 80: {
            ClientHttpContinue = input.ReadBool();
            break;
          }
          case 88: {
            ClientHttpTimeout = input.ReadInt32();
            break;
          }
          case 96: {
            EventRoleShowAmount = input.ReadInt32();
            break;
          }
          case 104: {
            EventRoleShowLimitation = input.ReadInt32();
            break;
          }
          case 114: {
            FBCommunityWebsite = input.ReadString();
            break;
          }
          case 120: {
            GroupRankingHide = input.ReadBool();
            break;
          }
          case 128: {
            GuildAnnouncementLimit = input.ReadInt32();
            break;
          }
          case 136: {
            GuildApplyCd = input.ReadInt32();
            break;
          }
          case 144: {
            GuildApplyExpireDay = input.ReadInt32();
            break;
          }
          case 152: {
            GuildApplyLimit = input.ReadInt32();
            break;
          }
          case 160: {
            GuildCreatePrice = input.ReadInt32();
            break;
          }
          case 168: {
            GuildJoinCd = input.ReadInt32();
            break;
          }
          case 176: {
            GuildKickoutLimitation = input.ReadInt32();
            break;
          }
          case 184: {
            GuildLeaderInactionDuration = input.ReadInt32();
            break;
          }
          case 192: {
            GuildListNum = input.ReadInt32();
            break;
          }
          case 200: {
            GuildMemberNum = input.ReadInt32();
            break;
          }
          case 208: {
            GuildModifyNamePrice = input.ReadInt32();
            break;
          }
          case 218: {
            guildNameInvalidChar_.AddEntriesFrom(ref input, _repeated_guildNameInvalidChar_codec);
            break;
          }
          case 224: {
            GuildNameLenMax = input.ReadInt32();
            break;
          }
          case 232: {
            GuildNameLenMin = input.ReadInt32();
            break;
          }
          case 240: {
            GuildRefreshInterval = input.ReadInt64();
            break;
          }
          case 248: {
            HobbitsName = input.ReadInt32();
            break;
          }
          case 256: {
            HobbitsName2 = input.ReadInt32();
            break;
          }
          case 264: {
            LightLoadingInterval = input.ReadInt32();
            break;
          }
          case 274: {
            MiniGameShareImgUrl = input.ReadString();
            break;
          }
          case 280: {
            NoNetQuitTime = input.ReadInt32();
            break;
          }
          case 288: {
            NoticeFetchIntervalSec = input.ReadInt32();
            break;
          }
          case 298:
          case 296: {
            noticeShowIntervalMinMaxSec_.AddEntriesFrom(ref input, _repeated_noticeShowIntervalMinMaxSec_codec);
            break;
          }
          case 304: {
            NoticeTimeoutSec = input.ReadInt32();
            break;
          }
          case 312: {
            PacketDelateDays = input.ReadInt32();
            break;
          }
          case 320: {
            PioneerIdx = input.ReadInt32();
            break;
          }
          case 330: {
            PrivacyPolicy = input.ReadString();
            break;
          }
          case 336: {
            RankingAnnounceDuration = input.ReadInt32();
            break;
          }
          case 344: {
            RankingAreaHide = input.ReadBool();
            break;
          }
          case 352: {
            RankingAreaHideInfo = input.ReadInt32();
            break;
          }
          case 360: {
            RankingAreaShowLimitation = input.ReadInt32();
            break;
          }
          case 368: {
            RankingHide = input.ReadBool();
            break;
          }
          case 376: {
            RankingLevelAreaHideInfo = input.ReadInt32();
            break;
          }
          case 384: {
            RankingLevelAreaShowLimitaion = input.ReadInt32();
            break;
          }
          case 392: {
            RankingLevelHideInfo = input.ReadInt32();
            break;
          }
          case 400: {
            RankingLevelShowLimitaion = input.ReadInt32();
            break;
          }
          case 408: {
            RankingLevelWorldHideInfo = input.ReadInt32();
            break;
          }
          case 416: {
            RankingLevelWorldShowLimitaion = input.ReadInt32();
            break;
          }
          case 424: {
            RankingWorldHide = input.ReadBool();
            break;
          }
          case 432: {
            RankingWorldHideInfo = input.ReadInt32();
            break;
          }
          case 442:
          case 440: {
            rankingWorldNormalAvatar_.AddEntriesFrom(ref input, _repeated_rankingWorldNormalAvatar_codec);
            break;
          }
          case 448: {
            RankingWorldShowLimitaion = input.ReadInt32();
            break;
          }
          case 458:
          case 456: {
            rankingWorldTopAvatar_.AddEntriesFrom(ref input, _repeated_rankingWorldTopAvatar_codec);
            break;
          }
          case 466:
          case 464: {
            shopRefreshTime_.AddEntriesFrom(ref input, _repeated_shopRefreshTime_codec);
            break;
          }
          case 472: {
            SignCoinPrize = input.ReadInt32();
            break;
          }
          case 480: {
            SignEnergyLimitPrize = input.ReadInt32();
            break;
          }
          case 490: {
            TermsOfService = input.ReadString();
            break;
          }
          case 501: {
            TrackSpeedup = input.ReadFloat();
            break;
          }
          case 504: {
            UnlockEventRoleShow = input.ReadInt32();
            break;
          }
          case 512: {
            UserAvatarCount = input.ReadInt32();
            break;
          }
          case 520: {
            UserTzOffset = input.ReadInt32();
            break;
          }
          case 530: {
            WechatIOSDisablePayVersion = input.ReadString();
            break;
          }
          case 538:
          case 536: {
            yDSeq_.AddEntriesFrom(ref input, _repeated_yDSeq_codec);
            break;
          }
          case 544: {
            ActivityCoolDown = input.ReadInt32();
            break;
          }
          case 554: {
            adIdAndroid_.AddEntriesFrom(ref input, _repeated_adIdAndroid_codec);
            break;
          }
          case 562: {
            adIdAndroidAdmobAsia_.AddEntriesFrom(ref input, _repeated_adIdAndroidAdmobAsia_codec);
            break;
          }
          case 570: {
            adIdIos_.AddEntriesFrom(ref input, _repeated_adIdIos_codec);
            break;
          }
          case 578: {
            adIdIosAdmobAsia_.AddEntriesFrom(ref input, _repeated_adIdIosAdmobAsia_codec);
            break;
          }
          case 584: {
            AncCdTime = input.ReadInt32();
            break;
          }
          case 594:
          case 592: {
            ancNightStopTime_.AddEntriesFrom(ref input, _repeated_ancNightStopTime_codec);
            break;
          }
          case 600: {
            AncSessionLimit = input.ReadInt32();
            break;
          }
          case 608: {
            BindSocialGem = input.ReadInt32();
            break;
          }
          case 616: {
            BoardClearGem = input.ReadInt32();
            break;
          }
          case 626: {
            boardColors_.AddEntriesFrom(ref input, _repeated_boardColors_codec);
            break;
          }
          case 634:
          case 632: {
            botColor_.AddEntriesFrom(ref input, _repeated_botColor_codec);
            break;
          }
          case 640: {
            BotFirstRankLevel = input.ReadInt32();
            break;
          }
          case 650: {
            bubbleBonus_.AddEntriesFrom(ref input, _map_bubbleBonus_codec);
            break;
          }
          case 656: {
            BubbleBonusProb = input.ReadInt32();
            break;
          }
          case 664: {
            BubbleDeadItem = input.ReadInt32();
            break;
          }
          case 674: {
            bubbleDeadWeight_.AddEntriesFrom(ref input, _repeated_bubbleDeadWeight_codec);
            break;
          }
          case 680: {
            BubbleGuideItemId = input.ReadInt32();
            break;
          }
          case 690:
          case 693: {
            bubbleLevelDiffParam_.AddEntriesFrom(ref input, _repeated_bubbleLevelDiffParam_codec);
            break;
          }
          case 696: {
            BuddyApplyLimitNum = input.ReadInt32();
            break;
          }
          case 704: {
            BuddyApplyLimitTime = input.ReadInt32();
            break;
          }
          case 712: {
            BuddyEnergyDailyLimit = input.ReadInt32();
            break;
          }
          case 720: {
            BuddyEnergyEachSent = input.ReadInt32();
            break;
          }
          case 728: {
            BuddyVisitExtraReward = input.ReadInt32();
            break;
          }
          case 736: {
            BuddyVisitLimit = input.ReadInt32();
            break;
          }
          case 746: {
            buddyVisitReward_.AddEntriesFrom(ref input, _repeated_buddyVisitReward_codec);
            break;
          }
          case 752: {
            DailyOrderReward = input.ReadInt32();
            break;
          }
          case 762: {
            dailyTaskNums_.AddEntriesFrom(ref input, _map_dailyTaskNums_codec);
            break;
          }
          case 768: {
            DecoShopRefreshGem = input.ReadInt32();
            break;
          }
          case 776: {
            DecoShopRefreshInterval = input.ReadInt32();
            break;
          }
          case 786:
          case 784: {
            defaultHome_.AddEntriesFrom(ref input, _repeated_defaultHome_codec);
            break;
          }
          case 794:
          case 792: {
            defaultRolePart_.AddEntriesFrom(ref input, _repeated_defaultRolePart_codec);
            break;
          }
          case 800: {
            DetectiveUnlockLevel = input.ReadInt32();
            break;
          }
          case 810: {
            EyeBaseColor = input.ReadString();
            break;
          }
          case 818: {
            FloorDecoDisplay = input.ReadString();
            break;
          }
          case 826:
          case 824: {
            freeEnergyClaimCost_.AddEntriesFrom(ref input, _repeated_freeEnergyClaimCost_codec);
            break;
          }
          case 834:
          case 832: {
            freeEnergyClaimNum_.AddEntriesFrom(ref input, _repeated_freeEnergyClaimNum_codec);
            break;
          }
          case 842: {
            freeEnergyClaimTime_.AddEntriesFrom(ref input, _map_freeEnergyClaimTime_codec);
            break;
          }
          case 850: {
            freeEnergyNotification_.AddEntriesFrom(ref input, _map_freeEnergyNotification_codec);
            break;
          }
          case 856: {
            FreeRechargeTimes = input.ReadInt32();
            break;
          }
          case 866:
          case 864: {
            freeRolePart_.AddEntriesFrom(ref input, _repeated_freeRolePart_codec);
            break;
          }
          case 872: {
            FreeSpeedUpTimes = input.ReadInt32();
            break;
          }
          case 880: {
            FriendLimit = input.ReadInt32();
            break;
          }
          case 888: {
            FriendOpinionFriendship = input.ReadInt32();
            break;
          }
          case 896: {
            GiftAutoRollingTime = input.ReadInt32();
            break;
          }
          case 906: {
            GuideMusic = input.ReadString();
            break;
          }
          case 914: {
            HairBaseColor = input.ReadString();
            break;
          }
          case 922: {
            InitIdleCoin = input.ReadString();
            break;
          }
          case 928: {
            InventoryInitCap = input.ReadInt32();
            break;
          }
          case 936: {
            InventoryProducerExtraGrid = input.ReadInt32();
            break;
          }
          case 944: {
            InviteGemRewardNum = input.ReadInt32();
            break;
          }
          case 952: {
            InvitedGemRewardNum = input.ReadInt32();
            break;
          }
          case 960: {
            IsInAppReview = input.ReadBool();
            break;
          }
          case 970: {
            islandChangeItemGold_.AddEntriesFrom(ref input, _repeated_islandChangeItemGold_codec);
            break;
          }
          case 978:
          case 976: {
            luckyBoxCD_.AddEntriesFrom(ref input, _repeated_luckyBoxCD_codec);
            break;
          }
          case 984: {
            LuckyBoxLimit = input.ReadInt32();
            break;
          }
          case 992: {
            LuckyBoxNum = input.ReadInt32();
            break;
          }
          case 1000: {
            LuckyWheelAdsCount = input.ReadInt32();
            break;
          }
          case 1008: {
            LuckyWheelFreeCount = input.ReadInt32();
            break;
          }
          case 1016: {
            LuckyWheelGemCost = input.ReadInt32();
            break;
          }
          case 1024: {
            LuckyWheelGemCount = input.ReadInt32();
            break;
          }
          case 1032: {
            MailSystemMax = input.ReadInt32();
            break;
          }
          case 1040: {
            MarketRefresh = input.ReadInt32();
            break;
          }
          case 1048: {
            MarketRefreshNum = input.ReadInt32();
            break;
          }
          case 1056: {
            MarketUtcClock = input.ReadInt32();
            break;
          }
          case 1064: {
            MaxFameLevelToViewActivityFeed = input.ReadInt32();
            break;
          }
          case 1072: {
            MergeBonus = input.ReadInt32();
            break;
          }
          case 1080: {
            MergeBonusLevel = input.ReadInt32();
            break;
          }
          case 1088: {
            MergeEnergyAutoMax = input.ReadInt32();
            break;
          }
          case 1096: {
            MergeEnergyAutoSec = input.ReadInt32();
            break;
          }
          case 1106:
          case 1104: {
            mergeEnergyPrice_.AddEntriesFrom(ref input, _repeated_mergeEnergyPrice_codec);
            break;
          }
          case 1114: {
            MouthBaseColor = input.ReadString();
            break;
          }
          case 1120: {
            MysteryStoreCustomNum = input.ReadInt32();
            break;
          }
          case 1128: {
            MysteryStoreCustomRate = input.ReadInt32();
            break;
          }
          case 1136: {
            MysteryStoreRefreshPrice = input.ReadInt32();
            break;
          }
          case 1146:
          case 1144: {
            mysteryStoreRefreshTime_.AddEntriesFrom(ref input, _repeated_mysteryStoreRefreshTime_codec);
            break;
          }
          case 1152: {
            NameMax = input.ReadInt32();
            break;
          }
          case 1160: {
            NameMin = input.ReadInt32();
            break;
          }
          case 1168: {
            NewUserGrandPrizeInviteNum = input.ReadInt32();
            break;
          }
          case 1178: {
            newUserGrandPrizeReward_.AddEntriesFrom(ref input, _map_newUserGrandPrizeReward_codec);
            break;
          }
          case 1184: {
            NewUserInviteeMaxLevel = input.ReadInt32();
            break;
          }
          case 1194: {
            newUserRewardForInvitee_.AddEntriesFrom(ref input, _map_newUserRewardForInvitee_codec);
            break;
          }
          case 1202: {
            newUserRewardForInvitor_.AddEntriesFrom(ref input, _map_newUserRewardForInvitor_codec);
            break;
          }
          case 1208: {
            NewUserRewardLevel = input.ReadInt32();
            break;
          }
          case 1218:
          case 1216: {
            notificationEnergyBonus_.AddEntriesFrom(ref input, _repeated_notificationEnergyBonus_codec);
            break;
          }
          case 1224: {
            OldUserLetterDuration = input.ReadInt32();
            break;
          }
          case 1232: {
            OrderLimitCount = input.ReadInt32();
            break;
          }
          case 1240: {
            PetNPC = input.ReadInt32();
            break;
          }
          case 1250:
          case 1253: {
            postCardIParamIsland1_.AddEntriesFrom(ref input, _repeated_postCardIParamIsland1_codec);
            break;
          }
          case 1258:
          case 1261: {
            postCardParam_.AddEntriesFrom(ref input, _repeated_postCardParam_codec);
            break;
          }
          case 1266: {
            postcardGiftOthersReward_.AddEntriesFrom(ref input, _repeated_postcardGiftOthersReward_codec);
            break;
          }
          case 1272: {
            PostcardMinNum = input.ReadInt32();
            break;
          }
          case 1282:
          case 1280: {
            pushShopCD_.AddEntriesFrom(ref input, _repeated_pushShopCD_codec);
            break;
          }
          case 1290:
          case 1288: {
            pushShopCDIce_.AddEntriesFrom(ref input, _repeated_pushShopCDIce_codec);
            break;
          }
          case 1296: {
            PushShopDuration = input.ReadInt32();
            break;
          }
          case 1306: {
            pushShopMaxNum_.AddEntriesFrom(ref input, _map_pushShopMaxNum_codec);
            break;
          }
          case 1314:
          case 1312: {
            pushShopPopTimes_.AddEntriesFrom(ref input, _repeated_pushShopPopTimes_codec);
            break;
          }
          case 1320: {
            RankBotOrderLimitNum = input.ReadInt32();
            break;
          }
          case 1330:
          case 1328: {
            rankCoinsParam_.AddEntriesFrom(ref input, _repeated_rankCoinsParam_codec);
            break;
          }
          case 1338:
          case 1341: {
            rankCoinsParamNew_.AddEntriesFrom(ref input, _repeated_rankCoinsParamNew_codec);
            break;
          }
          case 1344: {
            RankMemberNum = input.ReadInt32();
            break;
          }
          case 1352: {
            RankOrderNum = input.ReadInt32();
            break;
          }
          case 1362:
          case 1360: {
            rateTaskOpen_.AddEntriesFrom(ref input, _repeated_rateTaskOpen_codec);
            break;
          }
          case 1368: {
            SettingFBFollowGem = input.ReadInt32();
            break;
          }
          case 1378: {
            SettingHelpshiftWebsite = input.ReadString();
            break;
          }
          case 1386: {
            SkinBaseColor = input.ReadString();
            break;
          }
          case 1392: {
            SpecialStudentCdInterval = input.ReadInt32();
            break;
          }
          case 1402:
          case 1400: {
            studentAnchorPointAmount_.AddEntriesFrom(ref input, _repeated_studentAnchorPointAmount_codec);
            break;
          }
          case 1410:
          case 1408: {
            studentGroupTotal_.AddEntriesFrom(ref input, _repeated_studentGroupTotal_codec);
            break;
          }
          case 1418:
          case 1416: {
            studentShowInterval_.AddEntriesFrom(ref input, _repeated_studentShowInterval_codec);
            break;
          }
          case 1424: {
            SunRankMemberNum = input.ReadInt32();
            break;
          }
          case 1432: {
            SunRankStopNewTime = input.ReadInt32();
            break;
          }
          case 1440: {
            SunRankTime = input.ReadInt32();
            break;
          }
          case 1450:
          case 1448: {
            surveyAdsPos_.AddEntriesFrom(ref input, _repeated_surveyAdsPos_codec);
            break;
          }
          case 1458: {
            TaskDailyFinalChest = input.ReadString();
            break;
          }
          case 1464: {
            TaskDailyHardRate = input.ReadInt32();
            break;
          }
          case 1472: {
            TaskDailyTotalNum = input.ReadInt32();
            break;
          }
          case 1482:
          case 1480: {
            taskPlotTime_.AddEntriesFrom(ref input, _repeated_taskPlotTime_codec);
            break;
          }
          case 1488: {
            Version = input.ReadInt32();
            break;
          }
          case 1498: {
            WallPaperDisplay = input.ReadString();
            break;
          }
          case 1504: {
            DeRefreshUtc = input.ReadInt32();
            break;
          }
          case 1512: {
            DemRefreshWeekday = input.ReadInt32();
            break;
          }
          case 1522:
          case 1520: {
            spdUpDivide_.AddEntriesFrom(ref input, _repeated_spdUpDivide_codec);
            break;
          }
          case 1530:
          case 1528: {
            spdUpParam_.AddEntriesFrom(ref input, _repeated_spdUpParam_codec);
            break;
          }
          case 1536: {
            BubbleExpired = input.ReadInt32();
            break;
          }
          case 1544: {
            BubbleMaxNum = input.ReadInt32();
            break;
          }
          case 1552: {
            BubbleAdId = input.ReadInt32();
            break;
          }
          case 1560: {
            GalleryFingerLv = input.ReadInt32();
            break;
          }
          case 1568: {
            OrderEnterDelay = input.ReadInt32();
            break;
          }
          case 1576: {
            GiftBoxStopShaking = input.ReadInt32();
            break;
          }
          case 1584: {
            MergeTutorialInterval = input.ReadInt32();
            break;
          }
          case 1592: {
            MergeTutorialStop = input.ReadInt32();
            break;
          }
          case 1600: {
            MapBuildStopAim = input.ReadInt32();
            break;
          }
          case 1608: {
            MaxToolCount = input.ReadInt32();
            break;
          }
          case 1616: {
            MapBuildStartAim = input.ReadInt32();
            break;
          }
          case 1632: {
            RateRedirectLv = input.ReadInt32();
            break;
          }
          case 1640: {
            PopupLimit = input.ReadInt32();
            break;
          }
          case 1648: {
            PopupRefresh = input.ReadInt32();
            break;
          }
          case 1658:
          case 1656: {
            rateBuildingBase_.AddEntriesFrom(ref input, _repeated_rateBuildingBase_codec);
            break;
          }
          case 1664: {
            NoticeCombackTime = input.ReadInt32();
            break;
          }
          case 1672: {
            BoostLevel = input.ReadInt32();
            break;
          }
          case 1680: {
            BoostRate = input.ReadInt32();
            break;
          }
          case 1690: {
            freeBubbleCount_.AddEntriesFrom(ref input, _map_freeBubbleCount_codec);
            break;
          }
          case 1696: {
            UserRecordMaxDay = input.ReadInt32();
            break;
          }
          case 1704: {
            UserRecordRefreshUtc = input.ReadInt32();
            break;
          }
          case 1714: {
            itemScaleTestB_.AddEntriesFrom(ref input, _map_itemScaleTestB_codec);
            break;
          }
          case 1720: {
            ExitNewUser = input.ReadInt32();
            break;
          }
          case 1728: {
            UserRecordWeekday = input.ReadInt32();
            break;
          }
          case 1736: {
            LvPopupCardAlbum = input.ReadInt32();
            break;
          }
          case 1744: {
            LvPopupDE = input.ReadInt32();
            break;
          }
          case 1752: {
            LvPopupNewSession = input.ReadInt32();
            break;
          }
          case 1760: {
            LvPopupNewSessionId = input.ReadInt32();
            break;
          }
          case 1768: {
            NotifiPopupEventTheme = input.ReadInt32();
            break;
          }
          case 1776: {
            NotifiPopupShutdownLv = input.ReadInt32();
            break;
          }
          case 1784: {
            LvPopupCloseDialog = input.ReadInt32();
            break;
          }
          case 1792: {
            AutoFingerTriggerTime = input.ReadInt32();
            break;
          }
          case 1800: {
            MergeRemindTriggerTime = input.ReadInt32();
            break;
          }
          case 1808: {
            IsOrderApiOnlyWhitelist = input.ReadBool();
            break;
          }
          case 1816: {
            OrderEnterApiDelay = input.ReadInt32();
            break;
          }
          case 1824: {
            RequireTypeADInit = input.ReadInt32();
            break;
          }
          case 1832: {
            RequireTypeLTInit = input.ReadInt32();
            break;
          }
          case 1840: {
            RequireTypeUtcClock = input.ReadInt32();
            break;
          }
          case 1850: {
            tapSourceTips_.AddEntriesFrom(ref input, _map_tapSourceTips_codec);
            break;
          }
          case 1856: {
            BoxPossibleOffset = input.ReadInt32();
            break;
          }
          case 1864: {
            RetentionPackRefreshUtc = input.ReadInt32();
            break;
          }
          case 1872: {
            OrderCtrlNum = input.ReadInt32();
            break;
          }
          case 1880: {
            OrderCtrlTooHigh = input.ReadInt32();
            break;
          }
          case 1888: {
            OrderCtrlTooLow = input.ReadInt32();
            break;
          }
          case 1896: {
            OrderCtrlTooHighTarget = input.ReadInt32();
            break;
          }
          case 1904: {
            OrderCtrlTooLowTarget = input.ReadInt32();
            break;
          }
          case 1912: {
            IsFaq = input.ReadBool();
            break;
          }
          case 1922: {
            CardTradeGroupLink = input.ReadString();
            break;
          }
          case 1928: {
            GiveCardNum = input.ReadInt32();
            break;
          }
          case 1936: {
            GiveCardRefreshUtc = input.ReadInt32();
            break;
          }
          case 1944: {
            MaxPullFriendInfoNum = input.ReadInt32();
            break;
          }
          case 1952: {
            PullFriendInfoWaitTime = input.ReadInt32();
            break;
          }
          case 1960: {
            IsAndFacebook = input.ReadBool();
            break;
          }
          case 1968: {
            IsAndGoogle = input.ReadBool();
            break;
          }
          case 1976: {
            IsIosApple = input.ReadBool();
            break;
          }
          case 1984: {
            IsIosFacebook = input.ReadBool();
            break;
          }
          case 1992: {
            IsIosGoogle = input.ReadBool();
            break;
          }
          case 2008: {
            OrderApiPastNum = input.ReadInt32();
            break;
          }
          case 2016: {
            OrderApiLiveopsGrade = input.ReadInt32();
            break;
          }
          case 2024: {
            PackApiTimeout = input.ReadInt32();
            break;
          }
          case 2032: {
            RestartTime = input.ReadInt32();
            break;
          }
          case 2040: {
            BoostLevel4X = input.ReadInt32();
            break;
          }
          case 2048: {
            BoostRate4X = input.ReadInt32();
            break;
          }
          case 2056: {
            CardShopRedRefreshUtc = input.ReadInt32();
            break;
          }
          case 2064: {
            IsNewOrderView = input.ReadBool();
            break;
          }
          case 2072: {
            ServerTimeCheckRange = input.ReadInt32();
            break;
          }
          case 2080: {
            FishBoardRepeatNum = input.ReadInt32();
            break;
          }
          case 2090: {
            rankingWhitelist_.AddEntriesFrom(ref input, _repeated_rankingWhitelist_codec);
            break;
          }
          case 2098: {
            abInfoAttributeDivide_.AddEntriesFrom(ref input, _map_abInfoAttributeDivide_codec);
            break;
          }
          case 2104: {
            DiffApiTimeout = input.ReadInt32();
            break;
          }
          case 2112: {
            NoticeEventValidTime = input.ReadInt32();
            break;
          }
          case 2120: {
            NotificationPopLimit = input.ReadInt32();
            break;
          }
          case 2128: {
            NotificationApplicationLevel = input.ReadInt32();
            break;
          }
          case 2136: {
            UpdateRemindPopupId = input.ReadInt32();
            break;
          }
          case 2146: {
            loadingImage_.AddEntriesFrom(ref input, _repeated_loadingImage_codec);
            break;
          }
          case 2152: {
            BpTaskRefresh = input.ReadInt32();
            break;
          }
          case 2162: {
            DropProbability = input.ReadString();
            break;
          }
          case 2168: {
            SpdGemTips = input.ReadInt32();
            break;
          }
          case 2178: {
            frozenItemDeadWeight_.AddEntriesFrom(ref input, _repeated_frozenItemDeadWeight_codec);
            break;
          }
          case 2184: {
            MaxToastId = input.ReadInt32();
            break;
          }
          case 2192: {
            NormalToastId = input.ReadInt32();
            break;
          }
          case 2202: {
            WebshopAddress = input.ReadString();
            break;
          }
          case 2208: {
            WebshopShowPayment = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GlobalSliceABValue : pb::IMessage<GlobalSliceABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GlobalSliceABValue> _parser = new pb::MessageParser<GlobalSliceABValue>(() => new GlobalSliceABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalSliceABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.GlobalConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalSliceABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalSliceABValue(GlobalSliceABValue other) : this() {
      globalSlice_ = other.globalSlice_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalSliceABValue Clone() {
      return new GlobalSliceABValue(this);
    }

    /// <summary>Field number for the "GlobalSlice" field.</summary>
    public const int GlobalSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.Global> _repeated_globalSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.Global.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.Global> globalSlice_ = new pbc::RepeatedField<global::fat.rawdata.Global>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.Global> GlobalSlice {
      get { return globalSlice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalSliceABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalSliceABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!globalSlice_.Equals(other.globalSlice_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= globalSlice_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      globalSlice_.WriteTo(output, _repeated_globalSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      globalSlice_.WriteTo(ref output, _repeated_globalSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += globalSlice_.CalculateSize(_repeated_globalSlice_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalSliceABValue other) {
      if (other == null) {
        return;
      }
      globalSlice_.Add(other.globalSlice_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            globalSlice_.AddEntriesFrom(input, _repeated_globalSlice_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            globalSlice_.AddEntriesFrom(ref input, _repeated_globalSlice_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GlobalConf : pb::IMessage<GlobalConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GlobalConf> _parser = new pb::MessageParser<GlobalConf>(() => new GlobalConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.GlobalConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalConf(GlobalConf other) : this() {
      globalSlice_ = other.globalSlice_.Clone();
      globalSliceAB_ = other.globalSliceAB_.Clone();
      globalSliceABPatch_ = other.globalSliceABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalConf Clone() {
      return new GlobalConf(this);
    }

    /// <summary>Field number for the "GlobalSlice" field.</summary>
    public const int GlobalSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.Global> _repeated_globalSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.Global.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.Global> globalSlice_ = new pbc::RepeatedField<global::fat.rawdata.Global>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.Global> GlobalSlice {
      get { return globalSlice_; }
    }

    /// <summary>Field number for the "GlobalSliceAB" field.</summary>
    public const int GlobalSliceABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.GlobalSliceABValue>.Codec _map_globalSliceAB_codec
        = new pbc::MapField<string, global::fat.rawdata.GlobalSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.GlobalSliceABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.GlobalSliceABValue> globalSliceAB_ = new pbc::MapField<string, global::fat.rawdata.GlobalSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.GlobalSliceABValue> GlobalSliceAB {
      get { return globalSliceAB_; }
    }

    /// <summary>Field number for the "GlobalSliceABPatch" field.</summary>
    public const int GlobalSliceABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.GlobalSliceABValue>.Codec _map_globalSliceABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.GlobalSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.GlobalSliceABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.GlobalSliceABValue> globalSliceABPatch_ = new pbc::MapField<string, global::fat.rawdata.GlobalSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.GlobalSliceABValue> GlobalSliceABPatch {
      get { return globalSliceABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!globalSlice_.Equals(other.globalSlice_)) return false;
      if (!GlobalSliceAB.Equals(other.GlobalSliceAB)) return false;
      if (!GlobalSliceABPatch.Equals(other.GlobalSliceABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= globalSlice_.GetHashCode();
      hash ^= GlobalSliceAB.GetHashCode();
      hash ^= GlobalSliceABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      globalSlice_.WriteTo(output, _repeated_globalSlice_codec);
      globalSliceAB_.WriteTo(output, _map_globalSliceAB_codec);
      globalSliceABPatch_.WriteTo(output, _map_globalSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      globalSlice_.WriteTo(ref output, _repeated_globalSlice_codec);
      globalSliceAB_.WriteTo(ref output, _map_globalSliceAB_codec);
      globalSliceABPatch_.WriteTo(ref output, _map_globalSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += globalSlice_.CalculateSize(_repeated_globalSlice_codec);
      size += globalSliceAB_.CalculateSize(_map_globalSliceAB_codec);
      size += globalSliceABPatch_.CalculateSize(_map_globalSliceABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalConf other) {
      if (other == null) {
        return;
      }
      globalSlice_.Add(other.globalSlice_);
      globalSliceAB_.Add(other.globalSliceAB_);
      globalSliceABPatch_.Add(other.globalSliceABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            globalSlice_.AddEntriesFrom(input, _repeated_globalSlice_codec);
            break;
          }
          case 18: {
            globalSliceAB_.AddEntriesFrom(input, _map_globalSliceAB_codec);
            break;
          }
          case 26: {
            globalSliceABPatch_.AddEntriesFrom(input, _map_globalSliceABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            globalSlice_.AddEntriesFrom(ref input, _repeated_globalSlice_codec);
            break;
          }
          case 18: {
            globalSliceAB_.AddEntriesFrom(ref input, _map_globalSliceAB_codec);
            break;
          }
          case 26: {
            globalSliceABPatch_.AddEntriesFrom(ref input, _map_globalSliceABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
