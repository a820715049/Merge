// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/MultiRankConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/MultiRankConf.proto</summary>
  public static partial class MultiRankConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/MultiRankConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MultiRankConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtyYXdkYXRhL011bHRpUmFua0NvbmYucHJvdG8SB3Jhd2RhdGEi7gIKCU11",
            "bHRpUmFuaxIKCgJpZBgBIAEoBRIPCgdib2FyZElkGAIgASgFEhUKDWV2ZW50",
            "RHVyYXRpb24YAyABKAUSGwoTZXZlbnRFbmRSZXdhcmRUaGVtZRgEIAEoBRIV",
            "Cg1ldmVudEVuZFRoZW1lGAUgASgFEhIKCmV2ZW50R3JvdXAYBiABKAUSFgoO",
            "ZXZlbnRIZWxwVGhlbWUYByABKAUSFgoOZXZlbnRNYWluVGhlbWUYCCABKAUS",
            "GwoTZXZlbnRNaWxlc3RvbmVUaGVtZRgJIAEoBRIXCg9ldmVudFN0YXJ0VGhl",
            "bWUYCiABKAUSEgoKZXh0cmFTY29yZRgLIAEoBRIXCg9tdWx0aXBsaWVyQW5p",
            "bWUYESADKAkSFQoNbXVsdGlwbGllckR1chgMIAMoBRIVCg1tdWx0aXBsaWVy",
            "U2VxGA0gAygFEhUKDW11bHRpcGxpZXJTZngYECADKAkSDQoFdG9rZW4YDiAB",
            "KAUipAEKE011bHRpUmFua01hcEFCVmFsdWUSRAoMTXVsdGlSYW5rTWFwGAEg",
            "AygLMi4ucmF3ZGF0YS5NdWx0aVJhbmtNYXBBQlZhbHVlLk11bHRpUmFua01h",
            "cEVudHJ5GkcKEU11bHRpUmFua01hcEVudHJ5EgsKA2tleRgBIAEoBRIhCgV2",
            "YWx1ZRgCIAEoCzISLnJhd2RhdGEuTXVsdGlSYW5rOgI4ASLZAwoNTXVsdGlS",
            "YW5rQ29uZhI+CgxNdWx0aVJhbmtNYXAYASADKAsyKC5yYXdkYXRhLk11bHRp",
            "UmFua0NvbmYuTXVsdGlSYW5rTWFwRW50cnkSQgoOTXVsdGlSYW5rTWFwQUIY",
            "AiADKAsyKi5yYXdkYXRhLk11bHRpUmFua0NvbmYuTXVsdGlSYW5rTWFwQUJF",
            "bnRyeRJMChNNdWx0aVJhbmtNYXBBQlBhdGNoGAMgAygLMi8ucmF3ZGF0YS5N",
            "dWx0aVJhbmtDb25mLk11bHRpUmFua01hcEFCUGF0Y2hFbnRyeRpHChFNdWx0",
            "aVJhbmtNYXBFbnRyeRILCgNrZXkYASABKAUSIQoFdmFsdWUYAiABKAsyEi5y",
            "YXdkYXRhLk11bHRpUmFuazoCOAEaUwoTTXVsdGlSYW5rTWFwQUJFbnRyeRIL",
            "CgNrZXkYASABKAkSKwoFdmFsdWUYAiABKAsyHC5yYXdkYXRhLk11bHRpUmFu",
            "a01hcEFCVmFsdWU6AjgBGlgKGE11bHRpUmFua01hcEFCUGF0Y2hFbnRyeRIL",
            "CgNrZXkYASABKAkSKwoFdmFsdWUYAiABKAsyHC5yYXdkYXRhLk11bHRpUmFu",
            "a01hcEFCVmFsdWU6AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25m",
            "L2dlbi9nb2xhbmcvcmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MultiRank), global::fat.rawdata.MultiRank.Parser, new[]{ "Id", "BoardId", "EventDuration", "EventEndRewardTheme", "EventEndTheme", "EventGroup", "EventHelpTheme", "EventMainTheme", "EventMilestoneTheme", "EventStartTheme", "ExtraScore", "MultiplierAnime", "MultiplierDur", "MultiplierSeq", "MultiplierSfx", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MultiRankMapABValue), global::fat.rawdata.MultiRankMapABValue.Parser, new[]{ "MultiRankMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MultiRankConf), global::fat.rawdata.MultiRankConf.Parser, new[]{ "MultiRankMap", "MultiRankMapAB", "MultiRankMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="MultiRank",table="MultiRankMap",table_wrapper="MultiRankConf",map="true",map_key_type="int32",data="MultiRankConf")
  /// annotation@ab(table_ab="MultiRankMapAB",table_ab_patch="MultiRankMapABPatch",table_ab_value="MultiRankMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@MultiRank(id="id")
  /// </summary>
  public sealed partial class MultiRank : pb::IMessage<MultiRank>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MultiRank> _parser = new pb::MessageParser<MultiRank>(() => new MultiRank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MultiRankConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRank(MultiRank other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      eventDuration_ = other.eventDuration_;
      eventEndRewardTheme_ = other.eventEndRewardTheme_;
      eventEndTheme_ = other.eventEndTheme_;
      eventGroup_ = other.eventGroup_;
      eventHelpTheme_ = other.eventHelpTheme_;
      eventMainTheme_ = other.eventMainTheme_;
      eventMilestoneTheme_ = other.eventMilestoneTheme_;
      eventStartTheme_ = other.eventStartTheme_;
      extraScore_ = other.extraScore_;
      multiplierAnime_ = other.multiplierAnime_.Clone();
      multiplierDur_ = other.multiplierDur_.Clone();
      multiplierSeq_ = other.multiplierSeq_.Clone();
      multiplierSfx_ = other.multiplierSfx_.Clone();
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRank Clone() {
      return new MultiRank(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动模板id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 适用棋盘
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "eventDuration" field.</summary>
    public const int EventDurationFieldNumber = 3;
    private int eventDuration_;
    /// <summary>
    /// 活动持续时间（秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventDuration {
      get { return eventDuration_; }
      set {
        eventDuration_ = value;
      }
    }

    /// <summary>Field number for the "eventEndRewardTheme" field.</summary>
    public const int EventEndRewardThemeFieldNumber = 4;
    private int eventEndRewardTheme_;
    /// <summary>
    /// 活动结束领奖弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventEndRewardTheme {
      get { return eventEndRewardTheme_; }
      set {
        eventEndRewardTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventEndTheme" field.</summary>
    public const int EventEndThemeFieldNumber = 5;
    private int eventEndTheme_;
    /// <summary>
    /// 活动结束弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventEndTheme {
      get { return eventEndTheme_; }
      set {
        eventEndTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventGroup" field.</summary>
    public const int EventGroupFieldNumber = 6;
    private int eventGroup_;
    /// <summary>
    /// 活动用户分层
    /// （GradeIndexMapping.id）
    /// （MultiplierRankingDetail.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventGroup {
      get { return eventGroup_; }
      set {
        eventGroup_ = value;
      }
    }

    /// <summary>Field number for the "eventHelpTheme" field.</summary>
    public const int EventHelpThemeFieldNumber = 7;
    private int eventHelpTheme_;
    /// <summary>
    /// 活动帮助弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventHelpTheme {
      get { return eventHelpTheme_; }
      set {
        eventHelpTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventMainTheme" field.</summary>
    public const int EventMainThemeFieldNumber = 8;
    private int eventMainTheme_;
    /// <summary>
    /// 活动主界面弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventMainTheme {
      get { return eventMainTheme_; }
      set {
        eventMainTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventMilestoneTheme" field.</summary>
    public const int EventMilestoneThemeFieldNumber = 9;
    private int eventMilestoneTheme_;
    /// <summary>
    /// 活动里程碑弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventMilestoneTheme {
      get { return eventMilestoneTheme_; }
      set {
        eventMilestoneTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventStartTheme" field.</summary>
    public const int EventStartThemeFieldNumber = 10;
    private int eventStartTheme_;
    /// <summary>
    /// 活动开启弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventStartTheme {
      get { return eventStartTheme_; }
      set {
        eventStartTheme_ = value;
      }
    }

    /// <summary>Field number for the "extraScore" field.</summary>
    public const int ExtraScoreFieldNumber = 11;
    private int extraScore_;
    /// <summary>
    /// 活动积分模板
    /// （EventExtraScore.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraScore {
      get { return extraScore_; }
      set {
        extraScore_ = value;
      }
    }

    /// <summary>Field number for the "multiplierAnime" field.</summary>
    public const int MultiplierAnimeFieldNumber = 17;
    private static readonly pb::FieldCodec<string> _repeated_multiplierAnime_codec
        = pb::FieldCodec.ForString(138);
    private readonly pbc::RepeatedField<string> multiplierAnime_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 活动主页仪表盘小熊猫动画
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MultiplierAnime {
      get { return multiplierAnime_; }
    }

    /// <summary>Field number for the "multiplierDur" field.</summary>
    public const int MultiplierDurFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_multiplierDur_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> multiplierDur_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 积分倍率持续时间
    /// （备注：额外多配置3s，覆盖因动画播放冻结的时间）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MultiplierDur {
      get { return multiplierDur_; }
    }

    /// <summary>Field number for the "multiplierSeq" field.</summary>
    public const int MultiplierSeqFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_multiplierSeq_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> multiplierSeq_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 积分倍数序列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MultiplierSeq {
      get { return multiplierSeq_; }
    }

    /// <summary>Field number for the "multiplierSfx" field.</summary>
    public const int MultiplierSfxFieldNumber = 16;
    private static readonly pb::FieldCodec<string> _repeated_multiplierSfx_codec
        = pb::FieldCodec.ForString(130);
    private readonly pbc::RepeatedField<string> multiplierSfx_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 活动主页仪表盘小熊猫拖尾特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MultiplierSfx {
      get { return multiplierSfx_; }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 14;
    private int token_;
    /// <summary>
    /// 里程碑所需货币ID
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiRank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiRank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (EventDuration != other.EventDuration) return false;
      if (EventEndRewardTheme != other.EventEndRewardTheme) return false;
      if (EventEndTheme != other.EventEndTheme) return false;
      if (EventGroup != other.EventGroup) return false;
      if (EventHelpTheme != other.EventHelpTheme) return false;
      if (EventMainTheme != other.EventMainTheme) return false;
      if (EventMilestoneTheme != other.EventMilestoneTheme) return false;
      if (EventStartTheme != other.EventStartTheme) return false;
      if (ExtraScore != other.ExtraScore) return false;
      if(!multiplierAnime_.Equals(other.multiplierAnime_)) return false;
      if(!multiplierDur_.Equals(other.multiplierDur_)) return false;
      if(!multiplierSeq_.Equals(other.multiplierSeq_)) return false;
      if(!multiplierSfx_.Equals(other.multiplierSfx_)) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (EventDuration != 0) hash ^= EventDuration.GetHashCode();
      if (EventEndRewardTheme != 0) hash ^= EventEndRewardTheme.GetHashCode();
      if (EventEndTheme != 0) hash ^= EventEndTheme.GetHashCode();
      if (EventGroup != 0) hash ^= EventGroup.GetHashCode();
      if (EventHelpTheme != 0) hash ^= EventHelpTheme.GetHashCode();
      if (EventMainTheme != 0) hash ^= EventMainTheme.GetHashCode();
      if (EventMilestoneTheme != 0) hash ^= EventMilestoneTheme.GetHashCode();
      if (EventStartTheme != 0) hash ^= EventStartTheme.GetHashCode();
      if (ExtraScore != 0) hash ^= ExtraScore.GetHashCode();
      hash ^= multiplierAnime_.GetHashCode();
      hash ^= multiplierDur_.GetHashCode();
      hash ^= multiplierSeq_.GetHashCode();
      hash ^= multiplierSfx_.GetHashCode();
      if (Token != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (EventDuration != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventDuration);
      }
      if (EventEndRewardTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventEndRewardTheme);
      }
      if (EventEndTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EventEndTheme);
      }
      if (EventGroup != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EventGroup);
      }
      if (EventHelpTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EventHelpTheme);
      }
      if (EventMainTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EventMainTheme);
      }
      if (EventMilestoneTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EventMilestoneTheme);
      }
      if (EventStartTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EventStartTheme);
      }
      if (ExtraScore != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ExtraScore);
      }
      multiplierDur_.WriteTo(output, _repeated_multiplierDur_codec);
      multiplierSeq_.WriteTo(output, _repeated_multiplierSeq_codec);
      if (Token != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Token);
      }
      multiplierSfx_.WriteTo(output, _repeated_multiplierSfx_codec);
      multiplierAnime_.WriteTo(output, _repeated_multiplierAnime_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (EventDuration != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventDuration);
      }
      if (EventEndRewardTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventEndRewardTheme);
      }
      if (EventEndTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EventEndTheme);
      }
      if (EventGroup != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EventGroup);
      }
      if (EventHelpTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EventHelpTheme);
      }
      if (EventMainTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EventMainTheme);
      }
      if (EventMilestoneTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EventMilestoneTheme);
      }
      if (EventStartTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EventStartTheme);
      }
      if (ExtraScore != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ExtraScore);
      }
      multiplierDur_.WriteTo(ref output, _repeated_multiplierDur_codec);
      multiplierSeq_.WriteTo(ref output, _repeated_multiplierSeq_codec);
      if (Token != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Token);
      }
      multiplierSfx_.WriteTo(ref output, _repeated_multiplierSfx_codec);
      multiplierAnime_.WriteTo(ref output, _repeated_multiplierAnime_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (EventDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventDuration);
      }
      if (EventEndRewardTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventEndRewardTheme);
      }
      if (EventEndTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventEndTheme);
      }
      if (EventGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventGroup);
      }
      if (EventHelpTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventHelpTheme);
      }
      if (EventMainTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventMainTheme);
      }
      if (EventMilestoneTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventMilestoneTheme);
      }
      if (EventStartTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventStartTheme);
      }
      if (ExtraScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraScore);
      }
      size += multiplierAnime_.CalculateSize(_repeated_multiplierAnime_codec);
      size += multiplierDur_.CalculateSize(_repeated_multiplierDur_codec);
      size += multiplierSeq_.CalculateSize(_repeated_multiplierSeq_codec);
      size += multiplierSfx_.CalculateSize(_repeated_multiplierSfx_codec);
      if (Token != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiRank other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.EventDuration != 0) {
        EventDuration = other.EventDuration;
      }
      if (other.EventEndRewardTheme != 0) {
        EventEndRewardTheme = other.EventEndRewardTheme;
      }
      if (other.EventEndTheme != 0) {
        EventEndTheme = other.EventEndTheme;
      }
      if (other.EventGroup != 0) {
        EventGroup = other.EventGroup;
      }
      if (other.EventHelpTheme != 0) {
        EventHelpTheme = other.EventHelpTheme;
      }
      if (other.EventMainTheme != 0) {
        EventMainTheme = other.EventMainTheme;
      }
      if (other.EventMilestoneTheme != 0) {
        EventMilestoneTheme = other.EventMilestoneTheme;
      }
      if (other.EventStartTheme != 0) {
        EventStartTheme = other.EventStartTheme;
      }
      if (other.ExtraScore != 0) {
        ExtraScore = other.ExtraScore;
      }
      multiplierAnime_.Add(other.multiplierAnime_);
      multiplierDur_.Add(other.multiplierDur_);
      multiplierSeq_.Add(other.multiplierSeq_);
      multiplierSfx_.Add(other.multiplierSfx_);
      if (other.Token != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            EventDuration = input.ReadInt32();
            break;
          }
          case 32: {
            EventEndRewardTheme = input.ReadInt32();
            break;
          }
          case 40: {
            EventEndTheme = input.ReadInt32();
            break;
          }
          case 48: {
            EventGroup = input.ReadInt32();
            break;
          }
          case 56: {
            EventHelpTheme = input.ReadInt32();
            break;
          }
          case 64: {
            EventMainTheme = input.ReadInt32();
            break;
          }
          case 72: {
            EventMilestoneTheme = input.ReadInt32();
            break;
          }
          case 80: {
            EventStartTheme = input.ReadInt32();
            break;
          }
          case 88: {
            ExtraScore = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            multiplierDur_.AddEntriesFrom(input, _repeated_multiplierDur_codec);
            break;
          }
          case 106:
          case 104: {
            multiplierSeq_.AddEntriesFrom(input, _repeated_multiplierSeq_codec);
            break;
          }
          case 112: {
            Token = input.ReadInt32();
            break;
          }
          case 130: {
            multiplierSfx_.AddEntriesFrom(input, _repeated_multiplierSfx_codec);
            break;
          }
          case 138: {
            multiplierAnime_.AddEntriesFrom(input, _repeated_multiplierAnime_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            EventDuration = input.ReadInt32();
            break;
          }
          case 32: {
            EventEndRewardTheme = input.ReadInt32();
            break;
          }
          case 40: {
            EventEndTheme = input.ReadInt32();
            break;
          }
          case 48: {
            EventGroup = input.ReadInt32();
            break;
          }
          case 56: {
            EventHelpTheme = input.ReadInt32();
            break;
          }
          case 64: {
            EventMainTheme = input.ReadInt32();
            break;
          }
          case 72: {
            EventMilestoneTheme = input.ReadInt32();
            break;
          }
          case 80: {
            EventStartTheme = input.ReadInt32();
            break;
          }
          case 88: {
            ExtraScore = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            multiplierDur_.AddEntriesFrom(ref input, _repeated_multiplierDur_codec);
            break;
          }
          case 106:
          case 104: {
            multiplierSeq_.AddEntriesFrom(ref input, _repeated_multiplierSeq_codec);
            break;
          }
          case 112: {
            Token = input.ReadInt32();
            break;
          }
          case 130: {
            multiplierSfx_.AddEntriesFrom(ref input, _repeated_multiplierSfx_codec);
            break;
          }
          case 138: {
            multiplierAnime_.AddEntriesFrom(ref input, _repeated_multiplierAnime_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MultiRankMapABValue : pb::IMessage<MultiRankMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MultiRankMapABValue> _parser = new pb::MessageParser<MultiRankMapABValue>(() => new MultiRankMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiRankMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MultiRankConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRankMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRankMapABValue(MultiRankMapABValue other) : this() {
      multiRankMap_ = other.multiRankMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRankMapABValue Clone() {
      return new MultiRankMapABValue(this);
    }

    /// <summary>Field number for the "MultiRankMap" field.</summary>
    public const int MultiRankMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MultiRank>.Codec _map_multiRankMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MultiRank>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MultiRank.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MultiRank> multiRankMap_ = new pbc::MapField<int, global::fat.rawdata.MultiRank>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MultiRank> MultiRankMap {
      get { return multiRankMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiRankMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiRankMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MultiRankMap.Equals(other.MultiRankMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MultiRankMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      multiRankMap_.WriteTo(output, _map_multiRankMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      multiRankMap_.WriteTo(ref output, _map_multiRankMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += multiRankMap_.CalculateSize(_map_multiRankMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiRankMapABValue other) {
      if (other == null) {
        return;
      }
      multiRankMap_.Add(other.multiRankMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            multiRankMap_.AddEntriesFrom(input, _map_multiRankMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            multiRankMap_.AddEntriesFrom(ref input, _map_multiRankMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MultiRankConf : pb::IMessage<MultiRankConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MultiRankConf> _parser = new pb::MessageParser<MultiRankConf>(() => new MultiRankConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiRankConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MultiRankConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRankConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRankConf(MultiRankConf other) : this() {
      multiRankMap_ = other.multiRankMap_.Clone();
      multiRankMapAB_ = other.multiRankMapAB_.Clone();
      multiRankMapABPatch_ = other.multiRankMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRankConf Clone() {
      return new MultiRankConf(this);
    }

    /// <summary>Field number for the "MultiRankMap" field.</summary>
    public const int MultiRankMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MultiRank>.Codec _map_multiRankMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MultiRank>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MultiRank.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MultiRank> multiRankMap_ = new pbc::MapField<int, global::fat.rawdata.MultiRank>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MultiRank> MultiRankMap {
      get { return multiRankMap_; }
    }

    /// <summary>Field number for the "MultiRankMapAB" field.</summary>
    public const int MultiRankMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.MultiRankMapABValue>.Codec _map_multiRankMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.MultiRankMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MultiRankMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.MultiRankMapABValue> multiRankMapAB_ = new pbc::MapField<string, global::fat.rawdata.MultiRankMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MultiRankMapABValue> MultiRankMapAB {
      get { return multiRankMapAB_; }
    }

    /// <summary>Field number for the "MultiRankMapABPatch" field.</summary>
    public const int MultiRankMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.MultiRankMapABValue>.Codec _map_multiRankMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.MultiRankMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MultiRankMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.MultiRankMapABValue> multiRankMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.MultiRankMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MultiRankMapABValue> MultiRankMapABPatch {
      get { return multiRankMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiRankConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiRankConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MultiRankMap.Equals(other.MultiRankMap)) return false;
      if (!MultiRankMapAB.Equals(other.MultiRankMapAB)) return false;
      if (!MultiRankMapABPatch.Equals(other.MultiRankMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MultiRankMap.GetHashCode();
      hash ^= MultiRankMapAB.GetHashCode();
      hash ^= MultiRankMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      multiRankMap_.WriteTo(output, _map_multiRankMap_codec);
      multiRankMapAB_.WriteTo(output, _map_multiRankMapAB_codec);
      multiRankMapABPatch_.WriteTo(output, _map_multiRankMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      multiRankMap_.WriteTo(ref output, _map_multiRankMap_codec);
      multiRankMapAB_.WriteTo(ref output, _map_multiRankMapAB_codec);
      multiRankMapABPatch_.WriteTo(ref output, _map_multiRankMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += multiRankMap_.CalculateSize(_map_multiRankMap_codec);
      size += multiRankMapAB_.CalculateSize(_map_multiRankMapAB_codec);
      size += multiRankMapABPatch_.CalculateSize(_map_multiRankMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiRankConf other) {
      if (other == null) {
        return;
      }
      multiRankMap_.Add(other.multiRankMap_);
      multiRankMapAB_.Add(other.multiRankMapAB_);
      multiRankMapABPatch_.Add(other.multiRankMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            multiRankMap_.AddEntriesFrom(input, _map_multiRankMap_codec);
            break;
          }
          case 18: {
            multiRankMapAB_.AddEntriesFrom(input, _map_multiRankMapAB_codec);
            break;
          }
          case 26: {
            multiRankMapABPatch_.AddEntriesFrom(input, _map_multiRankMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            multiRankMap_.AddEntriesFrom(ref input, _map_multiRankMap_codec);
            break;
          }
          case 18: {
            multiRankMapAB_.AddEntriesFrom(ref input, _map_multiRankMapAB_codec);
            break;
          }
          case 26: {
            multiRankMapABPatch_.AddEntriesFrom(ref input, _map_multiRankMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
