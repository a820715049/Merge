// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventFishConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventFishConf.proto</summary>
  public static partial class EventFishConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventFishConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventFishConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtyYXdkYXRhL0V2ZW50RmlzaENvbmYucHJvdG8SB3Jhd2RhdGEiuQIKCUV2",
            "ZW50RmlzaBIKCgJpZBgBIAEoBRISCgpib2FyZFRoZW1lGAIgASgFEg0KBWNo",
            "ZWNrGBAgAygFEgwKBGNvc3QYAyABKAUSEAoIZW5kVGhlbWUYBCABKAUSEwoL",
            "ZXhwaXJlUG9wdXAYBSABKAUSGgoSZmlzaENvbGxlY3RlZFRoZW1lGBEgASgF",
            "EhUKDWZpc2hSZXBlYXROdW0YBiABKAUSDwoHZmlzaFJvZBgLIAEoBRIUCgxm",
            "aXNoVGlwVGhlbWUYEiABKAUSDwoHZ3JhZGVJZBgHIAEoBRIUCgxsb2FkaW5n",
            "VGhlbWUYDiABKAUSDAoEbmFtZRgIIAEoCRIUCgxuZXdGaXNoVGhlbWUYEyAB",
            "KAUSEgoKc3RhcnRUaGVtZRgJIAEoBRIPCgd0b2tlbklkGAogASgFIqQBChNF",
            "dmVudEZpc2hNYXBBQlZhbHVlEkQKDEV2ZW50RmlzaE1hcBgBIAMoCzIuLnJh",
            "d2RhdGEuRXZlbnRGaXNoTWFwQUJWYWx1ZS5FdmVudEZpc2hNYXBFbnRyeRpH",
            "ChFFdmVudEZpc2hNYXBFbnRyeRILCgNrZXkYASABKAUSIQoFdmFsdWUYAiAB",
            "KAsyEi5yYXdkYXRhLkV2ZW50RmlzaDoCOAEi2QMKDUV2ZW50RmlzaENvbmYS",
            "PgoMRXZlbnRGaXNoTWFwGAEgAygLMigucmF3ZGF0YS5FdmVudEZpc2hDb25m",
            "LkV2ZW50RmlzaE1hcEVudHJ5EkIKDkV2ZW50RmlzaE1hcEFCGAIgAygLMiou",
            "cmF3ZGF0YS5FdmVudEZpc2hDb25mLkV2ZW50RmlzaE1hcEFCRW50cnkSTAoT",
            "RXZlbnRGaXNoTWFwQUJQYXRjaBgDIAMoCzIvLnJhd2RhdGEuRXZlbnRGaXNo",
            "Q29uZi5FdmVudEZpc2hNYXBBQlBhdGNoRW50cnkaRwoRRXZlbnRGaXNoTWFw",
            "RW50cnkSCwoDa2V5GAEgASgFEiEKBXZhbHVlGAIgASgLMhIucmF3ZGF0YS5F",
            "dmVudEZpc2g6AjgBGlMKE0V2ZW50RmlzaE1hcEFCRW50cnkSCwoDa2V5GAEg",
            "ASgJEisKBXZhbHVlGAIgASgLMhwucmF3ZGF0YS5FdmVudEZpc2hNYXBBQlZh",
            "bHVlOgI4ARpYChhFdmVudEZpc2hNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEg",
            "ASgJEisKBXZhbHVlGAIgASgLMhwucmF3ZGF0YS5FdmVudEZpc2hNYXBBQlZh",
            "bHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29s",
            "YW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventFish), global::fat.rawdata.EventFish.Parser, new[]{ "Id", "BoardTheme", "Check", "Cost", "EndTheme", "ExpirePopup", "FishCollectedTheme", "FishRepeatNum", "FishRod", "FishTipTheme", "GradeId", "LoadingTheme", "Name", "NewFishTheme", "StartTheme", "TokenId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventFishMapABValue), global::fat.rawdata.EventFishMapABValue.Parser, new[]{ "EventFishMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventFishConf), global::fat.rawdata.EventFishConf.Parser, new[]{ "EventFishMap", "EventFishMapAB", "EventFishMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventFish",table="EventFishMap",table_wrapper="EventFishConf",map="true",map_key_type="int32",data="EventFishConf")
  /// annotation@ab(table_ab="EventFishMapAB",table_ab_patch="EventFishMapABPatch",table_ab_value="EventFishMapABValue",ab_patch="true")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventFish(id="id")
  /// </summary>
  public sealed partial class EventFish : pb::IMessage<EventFish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFish> _parser = new pb::MessageParser<EventFish>(() => new EventFish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventFishConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFish(EventFish other) : this() {
      id_ = other.id_;
      boardTheme_ = other.boardTheme_;
      check_ = other.check_.Clone();
      cost_ = other.cost_;
      endTheme_ = other.endTheme_;
      expirePopup_ = other.expirePopup_;
      fishCollectedTheme_ = other.fishCollectedTheme_;
      fishRepeatNum_ = other.fishRepeatNum_;
      fishRod_ = other.fishRod_;
      fishTipTheme_ = other.fishTipTheme_;
      gradeId_ = other.gradeId_;
      loadingTheme_ = other.loadingTheme_;
      name_ = other.name_;
      newFishTheme_ = other.newFishTheme_;
      startTheme_ = other.startTheme_;
      tokenId_ = other.tokenId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFish Clone() {
      return new EventFish(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardTheme" field.</summary>
    public const int BoardThemeFieldNumber = 2;
    private int boardTheme_;
    /// <summary>
    /// 棋盘
    /// 主界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardTheme {
      get { return boardTheme_; }
      set {
        boardTheme_ = value;
      }
    }

    /// <summary>Field number for the "check" field.</summary>
    public const int CheckFieldNumber = 16;
    private static readonly pb::FieldCodec<int> _repeated_check_codec
        = pb::FieldCodec.ForInt32(130);
    private readonly pbc::RepeatedField<int> check_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// play按钮显示检测
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Check {
      get { return check_; }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 3;
    private int cost_;
    /// <summary>
    /// 消耗内容
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 4;
    private int endTheme_;
    /// <summary>
    /// 结束
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "expirePopup" field.</summary>
    public const int ExpirePopupFieldNumber = 5;
    private int expirePopup_;
    /// <summary>
    /// 补领
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpirePopup {
      get { return expirePopup_; }
      set {
        expirePopup_ = value;
      }
    }

    /// <summary>Field number for the "fishCollectedTheme" field.</summary>
    public const int FishCollectedThemeFieldNumber = 17;
    private int fishCollectedTheme_;
    /// <summary>
    /// 集齐鱼
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishCollectedTheme {
      get { return fishCollectedTheme_; }
      set {
        fishCollectedTheme_ = value;
      }
    }

    /// <summary>Field number for the "fishRepeatNum" field.</summary>
    public const int FishRepeatNumFieldNumber = 6;
    private int fishRepeatNum_;
    /// <summary>
    /// 重复获得鱼X次后，不再掉落该鱼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishRepeatNum {
      get { return fishRepeatNum_; }
      set {
        fishRepeatNum_ = value;
      }
    }

    /// <summary>Field number for the "fishRod" field.</summary>
    public const int FishRodFieldNumber = 11;
    private int fishRod_;
    /// <summary>
    /// 最高级鱼竿id
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishRod {
      get { return fishRod_; }
      set {
        fishRod_ = value;
      }
    }

    /// <summary>Field number for the "fishTipTheme" field.</summary>
    public const int FishTipThemeFieldNumber = 18;
    private int fishTipTheme_;
    /// <summary>
    /// 鱼图鉴tip
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishTipTheme {
      get { return fishTipTheme_; }
      set {
        fishTipTheme_ = value;
      }
    }

    /// <summary>Field number for the "gradeId" field.</summary>
    public const int GradeIdFieldNumber = 7;
    private int gradeId_;
    /// <summary>
    /// 分层后id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeId {
      get { return gradeId_; }
      set {
        gradeId_ = value;
      }
    }

    /// <summary>Field number for the "loadingTheme" field.</summary>
    public const int LoadingThemeFieldNumber = 14;
    private int loadingTheme_;
    /// <summary>
    /// loading
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoadingTheme {
      get { return loadingTheme_; }
      set {
        loadingTheme_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 8;
    private string name_ = "";
    /// <summary>
    /// 活动名字key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "newFishTheme" field.</summary>
    public const int NewFishThemeFieldNumber = 19;
    private int newFishTheme_;
    /// <summary>
    /// 获得鱼
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewFishTheme {
      get { return newFishTheme_; }
      set {
        newFishTheme_ = value;
      }
    }

    /// <summary>Field number for the "startTheme" field.</summary>
    public const int StartThemeFieldNumber = 9;
    private int startTheme_;
    /// <summary>
    /// 开启
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTheme {
      get { return startTheme_; }
      set {
        startTheme_ = value;
      }
    }

    /// <summary>Field number for the "tokenId" field.</summary>
    public const int TokenIdFieldNumber = 10;
    private int tokenId_;
    /// <summary>
    /// 里程碑星星
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TokenId {
      get { return tokenId_; }
      set {
        tokenId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardTheme != other.BoardTheme) return false;
      if(!check_.Equals(other.check_)) return false;
      if (Cost != other.Cost) return false;
      if (EndTheme != other.EndTheme) return false;
      if (ExpirePopup != other.ExpirePopup) return false;
      if (FishCollectedTheme != other.FishCollectedTheme) return false;
      if (FishRepeatNum != other.FishRepeatNum) return false;
      if (FishRod != other.FishRod) return false;
      if (FishTipTheme != other.FishTipTheme) return false;
      if (GradeId != other.GradeId) return false;
      if (LoadingTheme != other.LoadingTheme) return false;
      if (Name != other.Name) return false;
      if (NewFishTheme != other.NewFishTheme) return false;
      if (StartTheme != other.StartTheme) return false;
      if (TokenId != other.TokenId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardTheme != 0) hash ^= BoardTheme.GetHashCode();
      hash ^= check_.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      if (ExpirePopup != 0) hash ^= ExpirePopup.GetHashCode();
      if (FishCollectedTheme != 0) hash ^= FishCollectedTheme.GetHashCode();
      if (FishRepeatNum != 0) hash ^= FishRepeatNum.GetHashCode();
      if (FishRod != 0) hash ^= FishRod.GetHashCode();
      if (FishTipTheme != 0) hash ^= FishTipTheme.GetHashCode();
      if (GradeId != 0) hash ^= GradeId.GetHashCode();
      if (LoadingTheme != 0) hash ^= LoadingTheme.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NewFishTheme != 0) hash ^= NewFishTheme.GetHashCode();
      if (StartTheme != 0) hash ^= StartTheme.GetHashCode();
      if (TokenId != 0) hash ^= TokenId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardTheme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardTheme);
      }
      if (Cost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cost);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTheme);
      }
      if (ExpirePopup != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ExpirePopup);
      }
      if (FishRepeatNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FishRepeatNum);
      }
      if (GradeId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GradeId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StartTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TokenId);
      }
      if (FishRod != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FishRod);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(LoadingTheme);
      }
      check_.WriteTo(output, _repeated_check_codec);
      if (FishCollectedTheme != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(FishCollectedTheme);
      }
      if (FishTipTheme != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(FishTipTheme);
      }
      if (NewFishTheme != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(NewFishTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardTheme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardTheme);
      }
      if (Cost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cost);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTheme);
      }
      if (ExpirePopup != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ExpirePopup);
      }
      if (FishRepeatNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FishRepeatNum);
      }
      if (GradeId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GradeId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StartTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TokenId);
      }
      if (FishRod != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FishRod);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(LoadingTheme);
      }
      check_.WriteTo(ref output, _repeated_check_codec);
      if (FishCollectedTheme != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(FishCollectedTheme);
      }
      if (FishTipTheme != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(FishTipTheme);
      }
      if (NewFishTheme != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(NewFishTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardTheme);
      }
      size += check_.CalculateSize(_repeated_check_codec);
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (EndTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      if (ExpirePopup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpirePopup);
      }
      if (FishCollectedTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FishCollectedTheme);
      }
      if (FishRepeatNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishRepeatNum);
      }
      if (FishRod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishRod);
      }
      if (FishTipTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FishTipTheme);
      }
      if (GradeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeId);
      }
      if (LoadingTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoadingTheme);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NewFishTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewFishTheme);
      }
      if (StartTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTheme);
      }
      if (TokenId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TokenId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFish other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardTheme != 0) {
        BoardTheme = other.BoardTheme;
      }
      check_.Add(other.check_);
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      if (other.ExpirePopup != 0) {
        ExpirePopup = other.ExpirePopup;
      }
      if (other.FishCollectedTheme != 0) {
        FishCollectedTheme = other.FishCollectedTheme;
      }
      if (other.FishRepeatNum != 0) {
        FishRepeatNum = other.FishRepeatNum;
      }
      if (other.FishRod != 0) {
        FishRod = other.FishRod;
      }
      if (other.FishTipTheme != 0) {
        FishTipTheme = other.FishTipTheme;
      }
      if (other.GradeId != 0) {
        GradeId = other.GradeId;
      }
      if (other.LoadingTheme != 0) {
        LoadingTheme = other.LoadingTheme;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NewFishTheme != 0) {
        NewFishTheme = other.NewFishTheme;
      }
      if (other.StartTheme != 0) {
        StartTheme = other.StartTheme;
      }
      if (other.TokenId != 0) {
        TokenId = other.TokenId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardTheme = input.ReadInt32();
            break;
          }
          case 24: {
            Cost = input.ReadInt32();
            break;
          }
          case 32: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 40: {
            ExpirePopup = input.ReadInt32();
            break;
          }
          case 48: {
            FishRepeatNum = input.ReadInt32();
            break;
          }
          case 56: {
            GradeId = input.ReadInt32();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 72: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 80: {
            TokenId = input.ReadInt32();
            break;
          }
          case 88: {
            FishRod = input.ReadInt32();
            break;
          }
          case 112: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 130:
          case 128: {
            check_.AddEntriesFrom(input, _repeated_check_codec);
            break;
          }
          case 136: {
            FishCollectedTheme = input.ReadInt32();
            break;
          }
          case 144: {
            FishTipTheme = input.ReadInt32();
            break;
          }
          case 152: {
            NewFishTheme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardTheme = input.ReadInt32();
            break;
          }
          case 24: {
            Cost = input.ReadInt32();
            break;
          }
          case 32: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 40: {
            ExpirePopup = input.ReadInt32();
            break;
          }
          case 48: {
            FishRepeatNum = input.ReadInt32();
            break;
          }
          case 56: {
            GradeId = input.ReadInt32();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 72: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 80: {
            TokenId = input.ReadInt32();
            break;
          }
          case 88: {
            FishRod = input.ReadInt32();
            break;
          }
          case 112: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 130:
          case 128: {
            check_.AddEntriesFrom(ref input, _repeated_check_codec);
            break;
          }
          case 136: {
            FishCollectedTheme = input.ReadInt32();
            break;
          }
          case 144: {
            FishTipTheme = input.ReadInt32();
            break;
          }
          case 152: {
            NewFishTheme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventFishMapABValue : pb::IMessage<EventFishMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFishMapABValue> _parser = new pb::MessageParser<EventFishMapABValue>(() => new EventFishMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFishMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventFishConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFishMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFishMapABValue(EventFishMapABValue other) : this() {
      eventFishMap_ = other.eventFishMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFishMapABValue Clone() {
      return new EventFishMapABValue(this);
    }

    /// <summary>Field number for the "EventFishMap" field.</summary>
    public const int EventFishMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventFish>.Codec _map_eventFishMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventFish>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFish.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventFish> eventFishMap_ = new pbc::MapField<int, global::fat.rawdata.EventFish>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventFish> EventFishMap {
      get { return eventFishMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFishMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFishMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventFishMap.Equals(other.EventFishMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventFishMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventFishMap_.WriteTo(output, _map_eventFishMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventFishMap_.WriteTo(ref output, _map_eventFishMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventFishMap_.CalculateSize(_map_eventFishMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFishMapABValue other) {
      if (other == null) {
        return;
      }
      eventFishMap_.Add(other.eventFishMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventFishMap_.AddEntriesFrom(input, _map_eventFishMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventFishMap_.AddEntriesFrom(ref input, _map_eventFishMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventFishConf : pb::IMessage<EventFishConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFishConf> _parser = new pb::MessageParser<EventFishConf>(() => new EventFishConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFishConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventFishConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFishConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFishConf(EventFishConf other) : this() {
      eventFishMap_ = other.eventFishMap_.Clone();
      eventFishMapAB_ = other.eventFishMapAB_.Clone();
      eventFishMapABPatch_ = other.eventFishMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFishConf Clone() {
      return new EventFishConf(this);
    }

    /// <summary>Field number for the "EventFishMap" field.</summary>
    public const int EventFishMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventFish>.Codec _map_eventFishMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventFish>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFish.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventFish> eventFishMap_ = new pbc::MapField<int, global::fat.rawdata.EventFish>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventFish> EventFishMap {
      get { return eventFishMap_; }
    }

    /// <summary>Field number for the "EventFishMapAB" field.</summary>
    public const int EventFishMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventFishMapABValue>.Codec _map_eventFishMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventFishMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFishMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventFishMapABValue> eventFishMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventFishMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventFishMapABValue> EventFishMapAB {
      get { return eventFishMapAB_; }
    }

    /// <summary>Field number for the "EventFishMapABPatch" field.</summary>
    public const int EventFishMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventFishMapABValue>.Codec _map_eventFishMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventFishMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFishMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventFishMapABValue> eventFishMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventFishMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventFishMapABValue> EventFishMapABPatch {
      get { return eventFishMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFishConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFishConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventFishMap.Equals(other.EventFishMap)) return false;
      if (!EventFishMapAB.Equals(other.EventFishMapAB)) return false;
      if (!EventFishMapABPatch.Equals(other.EventFishMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventFishMap.GetHashCode();
      hash ^= EventFishMapAB.GetHashCode();
      hash ^= EventFishMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventFishMap_.WriteTo(output, _map_eventFishMap_codec);
      eventFishMapAB_.WriteTo(output, _map_eventFishMapAB_codec);
      eventFishMapABPatch_.WriteTo(output, _map_eventFishMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventFishMap_.WriteTo(ref output, _map_eventFishMap_codec);
      eventFishMapAB_.WriteTo(ref output, _map_eventFishMapAB_codec);
      eventFishMapABPatch_.WriteTo(ref output, _map_eventFishMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventFishMap_.CalculateSize(_map_eventFishMap_codec);
      size += eventFishMapAB_.CalculateSize(_map_eventFishMapAB_codec);
      size += eventFishMapABPatch_.CalculateSize(_map_eventFishMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFishConf other) {
      if (other == null) {
        return;
      }
      eventFishMap_.Add(other.eventFishMap_);
      eventFishMapAB_.Add(other.eventFishMapAB_);
      eventFishMapABPatch_.Add(other.eventFishMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventFishMap_.AddEntriesFrom(input, _map_eventFishMap_codec);
            break;
          }
          case 18: {
            eventFishMapAB_.AddEntriesFrom(input, _map_eventFishMapAB_codec);
            break;
          }
          case 26: {
            eventFishMapABPatch_.AddEntriesFrom(input, _map_eventFishMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventFishMap_.AddEntriesFrom(ref input, _map_eventFishMap_codec);
            break;
          }
          case 18: {
            eventFishMapAB_.AddEntriesFrom(ref input, _map_eventFishMapAB_codec);
            break;
          }
          case 26: {
            eventFishMapABPatch_.AddEntriesFrom(ref input, _map_eventFishMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
