// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/GemThreeForOneConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/GemThreeForOneConf.proto</summary>
  public static partial class GemThreeForOneConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/GemThreeForOneConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GemThreeForOneConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiByYXdkYXRhL0dlbVRocmVlRm9yT25lQ29uZi5wcm90bxIHcmF3ZGF0YSKw",
            "AQoOR2VtVGhyZWVGb3JPbmUSCgoCaWQYASABKAUSEAoIZHVyYXRpb24YBSAB",
            "KAUSEgoKZXZlbnRUaGVtZRgDIAEoBRIWCg5tYXJrZXRCdXlUaW1lcxgKIAEo",
            "BRIUCgxwYWNrT25lR3JwSWQYBiABKAUSFgoOcGFja1RocmVlR3JwSWQYByAB",
            "KAUSFAoMcGFja1R3b0dycElkGAggASgFEhAKCHBheXRpbWVzGAkgASgFIsIB",
            "ChhHZW1UaHJlZUZvck9uZU1hcEFCVmFsdWUSUwoRR2VtVGhyZWVGb3JPbmVN",
            "YXAYASADKAsyOC5yYXdkYXRhLkdlbVRocmVlRm9yT25lTWFwQUJWYWx1ZS5H",
            "ZW1UaHJlZUZvck9uZU1hcEVudHJ5GlEKFkdlbVRocmVlRm9yT25lTWFwRW50",
            "cnkSCwoDa2V5GAEgASgFEiYKBXZhbHVlGAIgASgLMhcucmF3ZGF0YS5HZW1U",
            "aHJlZUZvck9uZToCOAEiqQQKEkdlbVRocmVlRm9yT25lQ29uZhJNChFHZW1U",
            "aHJlZUZvck9uZU1hcBgBIAMoCzIyLnJhd2RhdGEuR2VtVGhyZWVGb3JPbmVD",
            "b25mLkdlbVRocmVlRm9yT25lTWFwRW50cnkSUQoTR2VtVGhyZWVGb3JPbmVN",
            "YXBBQhgCIAMoCzI0LnJhd2RhdGEuR2VtVGhyZWVGb3JPbmVDb25mLkdlbVRo",
            "cmVlRm9yT25lTWFwQUJFbnRyeRJbChhHZW1UaHJlZUZvck9uZU1hcEFCUGF0",
            "Y2gYAyADKAsyOS5yYXdkYXRhLkdlbVRocmVlRm9yT25lQ29uZi5HZW1UaHJl",
            "ZUZvck9uZU1hcEFCUGF0Y2hFbnRyeRpRChZHZW1UaHJlZUZvck9uZU1hcEVu",
            "dHJ5EgsKA2tleRgBIAEoBRImCgV2YWx1ZRgCIAEoCzIXLnJhd2RhdGEuR2Vt",
            "VGhyZWVGb3JPbmU6AjgBGl0KGEdlbVRocmVlRm9yT25lTWFwQUJFbnRyeRIL",
            "CgNrZXkYASABKAkSMAoFdmFsdWUYAiABKAsyIS5yYXdkYXRhLkdlbVRocmVl",
            "Rm9yT25lTWFwQUJWYWx1ZToCOAEaYgodR2VtVGhyZWVGb3JPbmVNYXBBQlBh",
            "dGNoRW50cnkSCwoDa2V5GAEgASgJEjAKBXZhbHVlGAIgASgLMiEucmF3ZGF0",
            "YS5HZW1UaHJlZUZvck9uZU1hcEFCVmFsdWU6AjgBQj1aLWdpdGxhYi5mdW5w",
            "bHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3ZGF0YaoCC2ZhdC5yYXdk",
            "YXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.GemThreeForOne), global::fat.rawdata.GemThreeForOne.Parser, new[]{ "Id", "Duration", "EventTheme", "MarketBuyTimes", "PackOneGrpId", "PackThreeGrpId", "PackTwoGrpId", "Paytimes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.GemThreeForOneMapABValue), global::fat.rawdata.GemThreeForOneMapABValue.Parser, new[]{ "GemThreeForOneMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.GemThreeForOneConf), global::fat.rawdata.GemThreeForOneConf.Parser, new[]{ "GemThreeForOneMap", "GemThreeForOneMapAB", "GemThreeForOneMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="GemThreeForOne",table="GemThreeForOneMap",table_wrapper="GemThreeForOneConf",map="true",map_key_type="int32",data="GemThreeForOneConf")
  /// annotation@ab(table_ab="GemThreeForOneMapAB",table_ab_patch="GemThreeForOneMapABPatch",table_ab_value="GemThreeForOneMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@GemThreeForOne(id="id")
  /// </summary>
  public sealed partial class GemThreeForOne : pb::IMessage<GemThreeForOne>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GemThreeForOne> _parser = new pb::MessageParser<GemThreeForOne>(() => new GemThreeForOne());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GemThreeForOne> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.GemThreeForOneConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemThreeForOne() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemThreeForOne(GemThreeForOne other) : this() {
      id_ = other.id_;
      duration_ = other.duration_;
      eventTheme_ = other.eventTheme_;
      marketBuyTimes_ = other.marketBuyTimes_;
      packOneGrpId_ = other.packOneGrpId_;
      packThreeGrpId_ = other.packThreeGrpId_;
      packTwoGrpId_ = other.packTwoGrpId_;
      paytimes_ = other.paytimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemThreeForOne Clone() {
      return new GemThreeForOne(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 详情ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 5;
    private int duration_;
    /// <summary>
    /// 礼包显示出来后持续时间(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 3;
    private int eventTheme_;
    /// <summary>
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "marketBuyTimes" field.</summary>
    public const int MarketBuyTimesFieldNumber = 10;
    private int marketBuyTimes_;
    /// <summary>
    /// 无体力时商店购买体力的次数
    /// 配N, 则代表购买N次后满足条件触发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarketBuyTimes {
      get { return marketBuyTimes_; }
      set {
        marketBuyTimes_ = value;
      }
    }

    /// <summary>Field number for the "packOneGrpId" field.</summary>
    public const int PackOneGrpIdFieldNumber = 6;
    private int packOneGrpId_;
    /// <summary>
    /// 内购商品ID
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （CurrencyPack.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackOneGrpId {
      get { return packOneGrpId_; }
      set {
        packOneGrpId_ = value;
      }
    }

    /// <summary>Field number for the "packThreeGrpId" field.</summary>
    public const int PackThreeGrpIdFieldNumber = 7;
    private int packThreeGrpId_;
    /// <summary>
    /// 内购商品ID
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （CurrencyPack.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackThreeGrpId {
      get { return packThreeGrpId_; }
      set {
        packThreeGrpId_ = value;
      }
    }

    /// <summary>Field number for the "packTwoGrpId" field.</summary>
    public const int PackTwoGrpIdFieldNumber = 8;
    private int packTwoGrpId_;
    /// <summary>
    /// 内购商品ID
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （CurrencyPack.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackTwoGrpId {
      get { return packTwoGrpId_; }
      set {
        packTwoGrpId_ = value;
      }
    }

    /// <summary>Field number for the "paytimes" field.</summary>
    public const int PaytimesFieldNumber = 9;
    private int paytimes_;
    /// <summary>
    /// 礼包限购次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Paytimes {
      get { return paytimes_; }
      set {
        paytimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GemThreeForOne);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GemThreeForOne other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Duration != other.Duration) return false;
      if (EventTheme != other.EventTheme) return false;
      if (MarketBuyTimes != other.MarketBuyTimes) return false;
      if (PackOneGrpId != other.PackOneGrpId) return false;
      if (PackThreeGrpId != other.PackThreeGrpId) return false;
      if (PackTwoGrpId != other.PackTwoGrpId) return false;
      if (Paytimes != other.Paytimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (MarketBuyTimes != 0) hash ^= MarketBuyTimes.GetHashCode();
      if (PackOneGrpId != 0) hash ^= PackOneGrpId.GetHashCode();
      if (PackThreeGrpId != 0) hash ^= PackThreeGrpId.GetHashCode();
      if (PackTwoGrpId != 0) hash ^= PackTwoGrpId.GetHashCode();
      if (Paytimes != 0) hash ^= Paytimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventTheme);
      }
      if (Duration != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Duration);
      }
      if (PackOneGrpId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PackOneGrpId);
      }
      if (PackThreeGrpId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PackThreeGrpId);
      }
      if (PackTwoGrpId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PackTwoGrpId);
      }
      if (Paytimes != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Paytimes);
      }
      if (MarketBuyTimes != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MarketBuyTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventTheme);
      }
      if (Duration != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Duration);
      }
      if (PackOneGrpId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PackOneGrpId);
      }
      if (PackThreeGrpId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PackThreeGrpId);
      }
      if (PackTwoGrpId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PackTwoGrpId);
      }
      if (Paytimes != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Paytimes);
      }
      if (MarketBuyTimes != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MarketBuyTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (MarketBuyTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MarketBuyTimes);
      }
      if (PackOneGrpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackOneGrpId);
      }
      if (PackThreeGrpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackThreeGrpId);
      }
      if (PackTwoGrpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackTwoGrpId);
      }
      if (Paytimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Paytimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GemThreeForOne other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.MarketBuyTimes != 0) {
        MarketBuyTimes = other.MarketBuyTimes;
      }
      if (other.PackOneGrpId != 0) {
        PackOneGrpId = other.PackOneGrpId;
      }
      if (other.PackThreeGrpId != 0) {
        PackThreeGrpId = other.PackThreeGrpId;
      }
      if (other.PackTwoGrpId != 0) {
        PackTwoGrpId = other.PackTwoGrpId;
      }
      if (other.Paytimes != 0) {
        Paytimes = other.Paytimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 40: {
            Duration = input.ReadInt32();
            break;
          }
          case 48: {
            PackOneGrpId = input.ReadInt32();
            break;
          }
          case 56: {
            PackThreeGrpId = input.ReadInt32();
            break;
          }
          case 64: {
            PackTwoGrpId = input.ReadInt32();
            break;
          }
          case 72: {
            Paytimes = input.ReadInt32();
            break;
          }
          case 80: {
            MarketBuyTimes = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 40: {
            Duration = input.ReadInt32();
            break;
          }
          case 48: {
            PackOneGrpId = input.ReadInt32();
            break;
          }
          case 56: {
            PackThreeGrpId = input.ReadInt32();
            break;
          }
          case 64: {
            PackTwoGrpId = input.ReadInt32();
            break;
          }
          case 72: {
            Paytimes = input.ReadInt32();
            break;
          }
          case 80: {
            MarketBuyTimes = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GemThreeForOneMapABValue : pb::IMessage<GemThreeForOneMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GemThreeForOneMapABValue> _parser = new pb::MessageParser<GemThreeForOneMapABValue>(() => new GemThreeForOneMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GemThreeForOneMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.GemThreeForOneConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemThreeForOneMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemThreeForOneMapABValue(GemThreeForOneMapABValue other) : this() {
      gemThreeForOneMap_ = other.gemThreeForOneMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemThreeForOneMapABValue Clone() {
      return new GemThreeForOneMapABValue(this);
    }

    /// <summary>Field number for the "GemThreeForOneMap" field.</summary>
    public const int GemThreeForOneMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.GemThreeForOne>.Codec _map_gemThreeForOneMap_codec
        = new pbc::MapField<int, global::fat.rawdata.GemThreeForOne>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.GemThreeForOne.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.GemThreeForOne> gemThreeForOneMap_ = new pbc::MapField<int, global::fat.rawdata.GemThreeForOne>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.GemThreeForOne> GemThreeForOneMap {
      get { return gemThreeForOneMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GemThreeForOneMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GemThreeForOneMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!GemThreeForOneMap.Equals(other.GemThreeForOneMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= GemThreeForOneMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gemThreeForOneMap_.WriteTo(output, _map_gemThreeForOneMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gemThreeForOneMap_.WriteTo(ref output, _map_gemThreeForOneMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gemThreeForOneMap_.CalculateSize(_map_gemThreeForOneMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GemThreeForOneMapABValue other) {
      if (other == null) {
        return;
      }
      gemThreeForOneMap_.Add(other.gemThreeForOneMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gemThreeForOneMap_.AddEntriesFrom(input, _map_gemThreeForOneMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gemThreeForOneMap_.AddEntriesFrom(ref input, _map_gemThreeForOneMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GemThreeForOneConf : pb::IMessage<GemThreeForOneConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GemThreeForOneConf> _parser = new pb::MessageParser<GemThreeForOneConf>(() => new GemThreeForOneConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GemThreeForOneConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.GemThreeForOneConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemThreeForOneConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemThreeForOneConf(GemThreeForOneConf other) : this() {
      gemThreeForOneMap_ = other.gemThreeForOneMap_.Clone();
      gemThreeForOneMapAB_ = other.gemThreeForOneMapAB_.Clone();
      gemThreeForOneMapABPatch_ = other.gemThreeForOneMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemThreeForOneConf Clone() {
      return new GemThreeForOneConf(this);
    }

    /// <summary>Field number for the "GemThreeForOneMap" field.</summary>
    public const int GemThreeForOneMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.GemThreeForOne>.Codec _map_gemThreeForOneMap_codec
        = new pbc::MapField<int, global::fat.rawdata.GemThreeForOne>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.GemThreeForOne.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.GemThreeForOne> gemThreeForOneMap_ = new pbc::MapField<int, global::fat.rawdata.GemThreeForOne>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.GemThreeForOne> GemThreeForOneMap {
      get { return gemThreeForOneMap_; }
    }

    /// <summary>Field number for the "GemThreeForOneMapAB" field.</summary>
    public const int GemThreeForOneMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.GemThreeForOneMapABValue>.Codec _map_gemThreeForOneMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.GemThreeForOneMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.GemThreeForOneMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.GemThreeForOneMapABValue> gemThreeForOneMapAB_ = new pbc::MapField<string, global::fat.rawdata.GemThreeForOneMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.GemThreeForOneMapABValue> GemThreeForOneMapAB {
      get { return gemThreeForOneMapAB_; }
    }

    /// <summary>Field number for the "GemThreeForOneMapABPatch" field.</summary>
    public const int GemThreeForOneMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.GemThreeForOneMapABValue>.Codec _map_gemThreeForOneMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.GemThreeForOneMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.GemThreeForOneMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.GemThreeForOneMapABValue> gemThreeForOneMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.GemThreeForOneMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.GemThreeForOneMapABValue> GemThreeForOneMapABPatch {
      get { return gemThreeForOneMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GemThreeForOneConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GemThreeForOneConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!GemThreeForOneMap.Equals(other.GemThreeForOneMap)) return false;
      if (!GemThreeForOneMapAB.Equals(other.GemThreeForOneMapAB)) return false;
      if (!GemThreeForOneMapABPatch.Equals(other.GemThreeForOneMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= GemThreeForOneMap.GetHashCode();
      hash ^= GemThreeForOneMapAB.GetHashCode();
      hash ^= GemThreeForOneMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gemThreeForOneMap_.WriteTo(output, _map_gemThreeForOneMap_codec);
      gemThreeForOneMapAB_.WriteTo(output, _map_gemThreeForOneMapAB_codec);
      gemThreeForOneMapABPatch_.WriteTo(output, _map_gemThreeForOneMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gemThreeForOneMap_.WriteTo(ref output, _map_gemThreeForOneMap_codec);
      gemThreeForOneMapAB_.WriteTo(ref output, _map_gemThreeForOneMapAB_codec);
      gemThreeForOneMapABPatch_.WriteTo(ref output, _map_gemThreeForOneMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gemThreeForOneMap_.CalculateSize(_map_gemThreeForOneMap_codec);
      size += gemThreeForOneMapAB_.CalculateSize(_map_gemThreeForOneMapAB_codec);
      size += gemThreeForOneMapABPatch_.CalculateSize(_map_gemThreeForOneMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GemThreeForOneConf other) {
      if (other == null) {
        return;
      }
      gemThreeForOneMap_.Add(other.gemThreeForOneMap_);
      gemThreeForOneMapAB_.Add(other.gemThreeForOneMapAB_);
      gemThreeForOneMapABPatch_.Add(other.gemThreeForOneMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gemThreeForOneMap_.AddEntriesFrom(input, _map_gemThreeForOneMap_codec);
            break;
          }
          case 18: {
            gemThreeForOneMapAB_.AddEntriesFrom(input, _map_gemThreeForOneMapAB_codec);
            break;
          }
          case 26: {
            gemThreeForOneMapABPatch_.AddEntriesFrom(input, _map_gemThreeForOneMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gemThreeForOneMap_.AddEntriesFrom(ref input, _map_gemThreeForOneMap_codec);
            break;
          }
          case 18: {
            gemThreeForOneMapAB_.AddEntriesFrom(ref input, _map_gemThreeForOneMapAB_codec);
            break;
          }
          case 26: {
            gemThreeForOneMapABPatch_.AddEntriesFrom(ref input, _map_gemThreeForOneMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
