// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/ComMergeTapSourceConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/ComMergeTapSourceConf.proto</summary>
  public static partial class ComMergeTapSourceConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/ComMergeTapSourceConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ComMergeTapSourceConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNyYXdkYXRhL0NvbU1lcmdlVGFwU291cmNlQ29uZi5wcm90bxIHcmF3ZGF0",
            "YSLdBgoRQ29tTWVyZ2VUYXBTb3VyY2USFQoNY29uZmlnVmVyc2lvbhgBIAEo",
            "BRIKCgJpZBgCIAEoBRIOCgZfdGFnc18YAyADKAkSDgoGY29zdElkGBcgAygF",
            "EhAKCGRlYWRJdGVtGAQgASgFEjgKB2RpZUludG8YGSADKAsyJy5yYXdkYXRh",
            "LkNvbU1lcmdlVGFwU291cmNlLkRpZUludG9FbnRyeRISCgplbmVyZ3lDb3N0",
            "GAUgASgFEhcKD2ZpcnN0T3V0cHV0VGltZRgGIAEoBRIOCgZmcm96ZW4YByAB",
            "KAgSEwoLaXNCb29zdEl0ZW0YHCABKAgSEwoLaXNCb29zdGFibGUYGCABKAgS",
            "FgoOaXNDYXRlZ3JveUluZm8YICABKAgSEwoLaXNGaWxsQ2xlYXIYFSABKAgS",
            "EgoKaXNKdW1wYWJsZRgaIAEoCBIWCg5pc1NraXBEaWVBbmltZRgUIAEoCBIS",
            "CgpsaW1pdENvdW50GAggASgFEjoKCG1heFRvYXN0GBsgAygLMigucmF3ZGF0",
            "YS5Db21NZXJnZVRhcFNvdXJjZS5NYXhUb2FzdEVudHJ5EhQKDG1heFRvYXN0",
            "X25ldxgfIAMoBRITCgtvdXRwdXRDb3VudBgJIAEoBRISCgpvdXRwdXRUaW1l",
            "GAogASgFEhQKDG91dHB1dHNGaXhlZBgMIAMoBRIYChBvdXRwdXRzRml4ZWRU",
            "aW1lGA0gAygFEkIKDG91dHB1dHNUb2FzdBgWIAMoCzIsLnJhd2RhdGEuQ29t",
            "TWVyZ2VUYXBTb3VyY2UuT3V0cHV0c1RvYXN0RW50cnkSEwoLcmV2aXZlQ291",
            "bnQYDyABKAUSEgoKcmV2aXZlVGltZRgQIAEoBRIQCghzcGF3blNmeBgRIAEo",
            "CRIRCglzcGVlZENvc3QYEiABKAUSEgoKc3RhZ2VDb3VudBgTIAEoBRouCgxE",
            "aWVJbnRvRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ARov",
            "Cg1NYXhUb2FzdEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToC",
            "OAEaMwoRT3V0cHV0c1RvYXN0RW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVl",
            "GAIgASgFOgI4ASLUAQobQ29tTWVyZ2VUYXBTb3VyY2VNYXBBQlZhbHVlElwK",
            "FENvbU1lcmdlVGFwU291cmNlTWFwGAEgAygLMj4ucmF3ZGF0YS5Db21NZXJn",
            "ZVRhcFNvdXJjZU1hcEFCVmFsdWUuQ29tTWVyZ2VUYXBTb3VyY2VNYXBFbnRy",
            "eRpXChlDb21NZXJnZVRhcFNvdXJjZU1hcEVudHJ5EgsKA2tleRgBIAEoCRIp",
            "CgV2YWx1ZRgCIAEoCzIaLnJhd2RhdGEuQ29tTWVyZ2VUYXBTb3VyY2U6AjgB",
            "ItkEChVDb21NZXJnZVRhcFNvdXJjZUNvbmYSVgoUQ29tTWVyZ2VUYXBTb3Vy",
            "Y2VNYXAYASADKAsyOC5yYXdkYXRhLkNvbU1lcmdlVGFwU291cmNlQ29uZi5D",
            "b21NZXJnZVRhcFNvdXJjZU1hcEVudHJ5EloKFkNvbU1lcmdlVGFwU291cmNl",
            "TWFwQUIYAiADKAsyOi5yYXdkYXRhLkNvbU1lcmdlVGFwU291cmNlQ29uZi5D",
            "b21NZXJnZVRhcFNvdXJjZU1hcEFCRW50cnkSZAobQ29tTWVyZ2VUYXBTb3Vy",
            "Y2VNYXBBQlBhdGNoGAMgAygLMj8ucmF3ZGF0YS5Db21NZXJnZVRhcFNvdXJj",
            "ZUNvbmYuQ29tTWVyZ2VUYXBTb3VyY2VNYXBBQlBhdGNoRW50cnkaVwoZQ29t",
            "TWVyZ2VUYXBTb3VyY2VNYXBFbnRyeRILCgNrZXkYASABKAkSKQoFdmFsdWUY",
            "AiABKAsyGi5yYXdkYXRhLkNvbU1lcmdlVGFwU291cmNlOgI4ARpjChtDb21N",
            "ZXJnZVRhcFNvdXJjZU1hcEFCRW50cnkSCwoDa2V5GAEgASgJEjMKBXZhbHVl",
            "GAIgASgLMiQucmF3ZGF0YS5Db21NZXJnZVRhcFNvdXJjZU1hcEFCVmFsdWU6",
            "AjgBGmgKIENvbU1lcmdlVGFwU291cmNlTWFwQUJQYXRjaEVudHJ5EgsKA2tl",
            "eRgBIAEoCRIzCgV2YWx1ZRgCIAEoCzIkLnJhd2RhdGEuQ29tTWVyZ2VUYXBT",
            "b3VyY2VNYXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQv",
            "Y29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ComMergeTapSource), global::fat.rawdata.ComMergeTapSource.Parser, new[]{ "ConfigVersion", "Id", "Tags", "CostId", "DeadItem", "DieInto", "EnergyCost", "FirstOutputTime", "Frozen", "IsBoostItem", "IsBoostable", "IsCategroyInfo", "IsFillClear", "IsJumpable", "IsSkipDieAnime", "LimitCount", "MaxToast", "MaxToastNew", "OutputCount", "OutputTime", "OutputsFixed", "OutputsFixedTime", "OutputsToast", "ReviveCount", "ReviveTime", "SpawnSfx", "SpeedCost", "StageCount" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ComMergeTapSourceMapABValue), global::fat.rawdata.ComMergeTapSourceMapABValue.Parser, new[]{ "ComMergeTapSourceMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ComMergeTapSourceConf), global::fat.rawdata.ComMergeTapSourceConf.Parser, new[]{ "ComMergeTapSourceMap", "ComMergeTapSourceMapAB", "ComMergeTapSourceMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="ComMergeTapSource",table="ComMergeTapSourceMap",table_wrapper="ComMergeTapSourceConf",map="true",map_key_type="string",data="ComMergeTapSourceConf")
  /// annotation@ab(table_ab="ComMergeTapSourceMapAB",table_ab_patch="ComMergeTapSourceMapABPatch",table_ab_value="ComMergeTapSourceMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@ComMergeTapSource(id="id,configVersion")
  /// </summary>
  public sealed partial class ComMergeTapSource : pb::IMessage<ComMergeTapSource>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComMergeTapSource> _parser = new pb::MessageParser<ComMergeTapSource>(() => new ComMergeTapSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComMergeTapSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ComMergeTapSourceConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeTapSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeTapSource(ComMergeTapSource other) : this() {
      configVersion_ = other.configVersion_;
      id_ = other.id_;
      Tags_ = other.Tags_.Clone();
      costId_ = other.costId_.Clone();
      deadItem_ = other.deadItem_;
      dieInto_ = other.dieInto_.Clone();
      energyCost_ = other.energyCost_;
      firstOutputTime_ = other.firstOutputTime_;
      frozen_ = other.frozen_;
      isBoostItem_ = other.isBoostItem_;
      isBoostable_ = other.isBoostable_;
      isCategroyInfo_ = other.isCategroyInfo_;
      isFillClear_ = other.isFillClear_;
      isJumpable_ = other.isJumpable_;
      isSkipDieAnime_ = other.isSkipDieAnime_;
      limitCount_ = other.limitCount_;
      maxToast_ = other.maxToast_.Clone();
      maxToastNew_ = other.maxToastNew_.Clone();
      outputCount_ = other.outputCount_;
      outputTime_ = other.outputTime_;
      outputsFixed_ = other.outputsFixed_.Clone();
      outputsFixedTime_ = other.outputsFixedTime_.Clone();
      outputsToast_ = other.outputsToast_.Clone();
      reviveCount_ = other.reviveCount_;
      reviveTime_ = other.reviveTime_;
      spawnSfx_ = other.spawnSfx_;
      speedCost_ = other.speedCost_;
      stageCount_ = other.stageCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeTapSource Clone() {
      return new ComMergeTapSource(this);
    }

    /// <summary>Field number for the "configVersion" field.</summary>
    public const int ConfigVersionFieldNumber = 1;
    private int configVersion_;
    /// <summary>
    /// 最低版本号
    /// （包含）
    /// annotation@field_configVersion(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigVersion {
      get { return configVersion_; }
      set {
        configVersion_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    /// 合成物品id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "_tags_" field.</summary>
    public const int TagsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_Tags_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> Tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 版本标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return Tags_; }
    }

    /// <summary>Field number for the "costId" field.</summary>
    public const int CostIdFieldNumber = 23;
    private static readonly pb::FieldCodec<int> _repeated_costId_codec
        = pb::FieldCodec.ForInt32(186);
    private readonly pbc::RepeatedField<int> costId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 消耗信息
    /// （MergeTapCost.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CostId {
      get { return costId_; }
    }

    /// <summary>Field number for the "deadItem" field.</summary>
    public const int DeadItemFieldNumber = 4;
    private int deadItem_;
    /// <summary>
    /// 死亡以后
    /// 变成什么
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeadItem {
      get { return deadItem_; }
      set {
        deadItem_ = value;
      }
    }

    /// <summary>Field number for the "dieInto" field.</summary>
    public const int DieIntoFieldNumber = 25;
    private static readonly pbc::MapField<int, int>.Codec _map_dieInto_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 202);
    private readonly pbc::MapField<int, int> dieInto_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 死后随机变成
    /// {ObjBasic.id:权重}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> DieInto {
      get { return dieInto_; }
    }

    /// <summary>Field number for the "energyCost" field.</summary>
    public const int EnergyCostFieldNumber = 5;
    private int energyCost_;
    /// <summary>
    /// 出一次东西
    /// 花费的能量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnergyCost {
      get { return energyCost_; }
      set {
        energyCost_ = value;
      }
    }

    /// <summary>Field number for the "firstOutputTime" field.</summary>
    public const int FirstOutputTimeFieldNumber = 6;
    private int firstOutputTime_;
    /// <summary>
    /// 首次产出
    /// 等待时间
    /// （秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstOutputTime {
      get { return firstOutputTime_; }
      set {
        firstOutputTime_ = value;
      }
    }

    /// <summary>Field number for the "frozen" field.</summary>
    public const int FrozenFieldNumber = 7;
    private bool frozen_;
    /// <summary>
    /// 是否产出
    /// 蜘蛛网物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Frozen {
      get { return frozen_; }
      set {
        frozen_ = value;
      }
    }

    /// <summary>Field number for the "isBoostItem" field.</summary>
    public const int IsBoostItemFieldNumber = 28;
    private bool isBoostItem_;
    /// <summary>
    /// 是否能够使用
    /// 能量道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBoostItem {
      get { return isBoostItem_; }
      set {
        isBoostItem_ = value;
      }
    }

    /// <summary>Field number for the "isBoostable" field.</summary>
    public const int IsBoostableFieldNumber = 24;
    private bool isBoostable_;
    /// <summary>
    /// 是否能够开启
    /// 加倍消耗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBoostable {
      get { return isBoostable_; }
      set {
        isBoostable_ = value;
      }
    }

    /// <summary>Field number for the "isCategroyInfo" field.</summary>
    public const int IsCategroyInfoFieldNumber = 32;
    private bool isCategroyInfo_;
    /// <summary>
    /// 是否不显示数量角标提示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCategroyInfo {
      get { return isCategroyInfo_; }
      set {
        isCategroyInfo_ = value;
      }
    }

    /// <summary>Field number for the "isFillClear" field.</summary>
    public const int IsFillClearFieldNumber = 21;
    private bool isFillClear_;
    /// <summary>
    /// 是否在库存为0时
    /// 才开始走CD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFillClear {
      get { return isFillClear_; }
      set {
        isFillClear_ = value;
      }
    }

    /// <summary>Field number for the "isJumpable" field.</summary>
    public const int IsJumpableFieldNumber = 26;
    private bool isJumpable_;
    /// <summary>
    /// 是否享受
    /// 跳过冷却
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsJumpable {
      get { return isJumpable_; }
      set {
        isJumpable_ = value;
      }
    }

    /// <summary>Field number for the "isSkipDieAnime" field.</summary>
    public const int IsSkipDieAnimeFieldNumber = 20;
    private bool isSkipDieAnime_;
    /// <summary>
    /// 死亡时自身是否跳过缩放动画
    /// deadItem出现时是否跳过缩放动画
    /// 如果为FALSE，会同时有音效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkipDieAnime {
      get { return isSkipDieAnime_; }
      set {
        isSkipDieAnime_ = value;
      }
    }

    /// <summary>Field number for the "limitCount" field.</summary>
    public const int LimitCountFieldNumber = 8;
    private int limitCount_;
    /// <summary>
    /// 最大
    /// 数量限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitCount {
      get { return limitCount_; }
      set {
        limitCount_ = value;
      }
    }

    /// <summary>Field number for the "maxToast" field.</summary>
    public const int MaxToastFieldNumber = 27;
    private static readonly pbc::MapField<int, int>.Codec _map_maxToast_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 218);
    private readonly pbc::MapField<int, int> maxToast_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 4倍状态下掉落Max的棋子
    /// （id是4倍掉落棋子的id）
    /// ObjBasic.id:Toast.id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> MaxToast {
      get { return maxToast_; }
    }

    /// <summary>Field number for the "maxToast_new" field.</summary>
    public const int MaxToastNewFieldNumber = 31;
    private static readonly pb::FieldCodec<int> _repeated_maxToastNew_codec
        = pb::FieldCodec.ForInt32(250);
    private readonly pbc::RepeatedField<int> maxToastNew_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 1倍状态下掉落Max的棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MaxToastNew {
      get { return maxToastNew_; }
    }

    /// <summary>Field number for the "outputCount" field.</summary>
    public const int OutputCountFieldNumber = 9;
    private int outputCount_;
    /// <summary>
    /// 每次产出
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutputCount {
      get { return outputCount_; }
      set {
        outputCount_ = value;
      }
    }

    /// <summary>Field number for the "outputTime" field.</summary>
    public const int OutputTimeFieldNumber = 10;
    private int outputTime_;
    /// <summary>
    /// 每个产出
    /// 等待时间
    /// （秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutputTime {
      get { return outputTime_; }
      set {
        outputTime_ = value;
      }
    }

    /// <summary>Field number for the "outputsFixed" field.</summary>
    public const int OutputsFixedFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_outputsFixed_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> outputsFixed_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 保底产出
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> OutputsFixed {
      get { return outputsFixed_; }
    }

    /// <summary>Field number for the "outputsFixedTime" field.</summary>
    public const int OutputsFixedTimeFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_outputsFixedTime_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> outputsFixedTime_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 保底次数
    /// {多少次,产几个}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> OutputsFixedTime {
      get { return outputsFixedTime_; }
    }

    /// <summary>Field number for the "outputsToast" field.</summary>
    public const int OutputsToastFieldNumber = 22;
    private static readonly pbc::MapField<int, int>.Codec _map_outputsToast_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 178);
    private readonly pbc::MapField<int, int> outputsToast_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 掉落时的鼓励toast
    /// {ObjBasic.id:toastValue,ObjBasic.id:toastValue}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> OutputsToast {
      get { return outputsToast_; }
    }

    /// <summary>Field number for the "reviveCount" field.</summary>
    public const int ReviveCountFieldNumber = 15;
    private int reviveCount_;
    /// <summary>
    /// 每次重生
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReviveCount {
      get { return reviveCount_; }
      set {
        reviveCount_ = value;
      }
    }

    /// <summary>Field number for the "reviveTime" field.</summary>
    public const int ReviveTimeFieldNumber = 16;
    private int reviveTime_;
    /// <summary>
    /// 产出全部用完后
    /// 恢复的重生时间
    /// （秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReviveTime {
      get { return reviveTime_; }
      set {
        reviveTime_ = value;
      }
    }

    /// <summary>Field number for the "spawnSfx" field.</summary>
    public const int SpawnSfxFieldNumber = 17;
    private string spawnSfx_ = "";
    /// <summary>
    /// 产出音效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpawnSfx {
      get { return spawnSfx_; }
      set {
        spawnSfx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "speedCost" field.</summary>
    public const int SpeedCostFieldNumber = 18;
    private int speedCost_;
    /// <summary>
    /// 消除CD
    /// 需要钻石
    /// （废弃）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedCost {
      get { return speedCost_; }
      set {
        speedCost_ = value;
      }
    }

    /// <summary>Field number for the "stageCount" field.</summary>
    public const int StageCountFieldNumber = 19;
    private int stageCount_;
    /// <summary>
    /// 总数量
    /// （留空无限）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageCount {
      get { return stageCount_; }
      set {
        stageCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComMergeTapSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComMergeTapSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigVersion != other.ConfigVersion) return false;
      if (Id != other.Id) return false;
      if(!Tags_.Equals(other.Tags_)) return false;
      if(!costId_.Equals(other.costId_)) return false;
      if (DeadItem != other.DeadItem) return false;
      if (!DieInto.Equals(other.DieInto)) return false;
      if (EnergyCost != other.EnergyCost) return false;
      if (FirstOutputTime != other.FirstOutputTime) return false;
      if (Frozen != other.Frozen) return false;
      if (IsBoostItem != other.IsBoostItem) return false;
      if (IsBoostable != other.IsBoostable) return false;
      if (IsCategroyInfo != other.IsCategroyInfo) return false;
      if (IsFillClear != other.IsFillClear) return false;
      if (IsJumpable != other.IsJumpable) return false;
      if (IsSkipDieAnime != other.IsSkipDieAnime) return false;
      if (LimitCount != other.LimitCount) return false;
      if (!MaxToast.Equals(other.MaxToast)) return false;
      if(!maxToastNew_.Equals(other.maxToastNew_)) return false;
      if (OutputCount != other.OutputCount) return false;
      if (OutputTime != other.OutputTime) return false;
      if(!outputsFixed_.Equals(other.outputsFixed_)) return false;
      if(!outputsFixedTime_.Equals(other.outputsFixedTime_)) return false;
      if (!OutputsToast.Equals(other.OutputsToast)) return false;
      if (ReviveCount != other.ReviveCount) return false;
      if (ReviveTime != other.ReviveTime) return false;
      if (SpawnSfx != other.SpawnSfx) return false;
      if (SpeedCost != other.SpeedCost) return false;
      if (StageCount != other.StageCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigVersion != 0) hash ^= ConfigVersion.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= Tags_.GetHashCode();
      hash ^= costId_.GetHashCode();
      if (DeadItem != 0) hash ^= DeadItem.GetHashCode();
      hash ^= DieInto.GetHashCode();
      if (EnergyCost != 0) hash ^= EnergyCost.GetHashCode();
      if (FirstOutputTime != 0) hash ^= FirstOutputTime.GetHashCode();
      if (Frozen != false) hash ^= Frozen.GetHashCode();
      if (IsBoostItem != false) hash ^= IsBoostItem.GetHashCode();
      if (IsBoostable != false) hash ^= IsBoostable.GetHashCode();
      if (IsCategroyInfo != false) hash ^= IsCategroyInfo.GetHashCode();
      if (IsFillClear != false) hash ^= IsFillClear.GetHashCode();
      if (IsJumpable != false) hash ^= IsJumpable.GetHashCode();
      if (IsSkipDieAnime != false) hash ^= IsSkipDieAnime.GetHashCode();
      if (LimitCount != 0) hash ^= LimitCount.GetHashCode();
      hash ^= MaxToast.GetHashCode();
      hash ^= maxToastNew_.GetHashCode();
      if (OutputCount != 0) hash ^= OutputCount.GetHashCode();
      if (OutputTime != 0) hash ^= OutputTime.GetHashCode();
      hash ^= outputsFixed_.GetHashCode();
      hash ^= outputsFixedTime_.GetHashCode();
      hash ^= OutputsToast.GetHashCode();
      if (ReviveCount != 0) hash ^= ReviveCount.GetHashCode();
      if (ReviveTime != 0) hash ^= ReviveTime.GetHashCode();
      if (SpawnSfx.Length != 0) hash ^= SpawnSfx.GetHashCode();
      if (SpeedCost != 0) hash ^= SpeedCost.GetHashCode();
      if (StageCount != 0) hash ^= StageCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ConfigVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigVersion);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      Tags_.WriteTo(output, _repeated_Tags_codec);
      if (DeadItem != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DeadItem);
      }
      if (EnergyCost != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EnergyCost);
      }
      if (FirstOutputTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FirstOutputTime);
      }
      if (Frozen != false) {
        output.WriteRawTag(56);
        output.WriteBool(Frozen);
      }
      if (LimitCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LimitCount);
      }
      if (OutputCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(OutputCount);
      }
      if (OutputTime != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(OutputTime);
      }
      outputsFixed_.WriteTo(output, _repeated_outputsFixed_codec);
      outputsFixedTime_.WriteTo(output, _repeated_outputsFixedTime_codec);
      if (ReviveCount != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ReviveCount);
      }
      if (ReviveTime != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ReviveTime);
      }
      if (SpawnSfx.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(SpawnSfx);
      }
      if (SpeedCost != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(SpeedCost);
      }
      if (StageCount != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(StageCount);
      }
      if (IsSkipDieAnime != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsSkipDieAnime);
      }
      if (IsFillClear != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsFillClear);
      }
      outputsToast_.WriteTo(output, _map_outputsToast_codec);
      costId_.WriteTo(output, _repeated_costId_codec);
      if (IsBoostable != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsBoostable);
      }
      dieInto_.WriteTo(output, _map_dieInto_codec);
      if (IsJumpable != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsJumpable);
      }
      maxToast_.WriteTo(output, _map_maxToast_codec);
      if (IsBoostItem != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(IsBoostItem);
      }
      maxToastNew_.WriteTo(output, _repeated_maxToastNew_codec);
      if (IsCategroyInfo != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(IsCategroyInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ConfigVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigVersion);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      Tags_.WriteTo(ref output, _repeated_Tags_codec);
      if (DeadItem != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DeadItem);
      }
      if (EnergyCost != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EnergyCost);
      }
      if (FirstOutputTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FirstOutputTime);
      }
      if (Frozen != false) {
        output.WriteRawTag(56);
        output.WriteBool(Frozen);
      }
      if (LimitCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LimitCount);
      }
      if (OutputCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(OutputCount);
      }
      if (OutputTime != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(OutputTime);
      }
      outputsFixed_.WriteTo(ref output, _repeated_outputsFixed_codec);
      outputsFixedTime_.WriteTo(ref output, _repeated_outputsFixedTime_codec);
      if (ReviveCount != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ReviveCount);
      }
      if (ReviveTime != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ReviveTime);
      }
      if (SpawnSfx.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(SpawnSfx);
      }
      if (SpeedCost != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(SpeedCost);
      }
      if (StageCount != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(StageCount);
      }
      if (IsSkipDieAnime != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsSkipDieAnime);
      }
      if (IsFillClear != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsFillClear);
      }
      outputsToast_.WriteTo(ref output, _map_outputsToast_codec);
      costId_.WriteTo(ref output, _repeated_costId_codec);
      if (IsBoostable != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsBoostable);
      }
      dieInto_.WriteTo(ref output, _map_dieInto_codec);
      if (IsJumpable != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsJumpable);
      }
      maxToast_.WriteTo(ref output, _map_maxToast_codec);
      if (IsBoostItem != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(IsBoostItem);
      }
      maxToastNew_.WriteTo(ref output, _repeated_maxToastNew_codec);
      if (IsCategroyInfo != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(IsCategroyInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigVersion);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += Tags_.CalculateSize(_repeated_Tags_codec);
      size += costId_.CalculateSize(_repeated_costId_codec);
      if (DeadItem != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeadItem);
      }
      size += dieInto_.CalculateSize(_map_dieInto_codec);
      if (EnergyCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnergyCost);
      }
      if (FirstOutputTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstOutputTime);
      }
      if (Frozen != false) {
        size += 1 + 1;
      }
      if (IsBoostItem != false) {
        size += 2 + 1;
      }
      if (IsBoostable != false) {
        size += 2 + 1;
      }
      if (IsCategroyInfo != false) {
        size += 2 + 1;
      }
      if (IsFillClear != false) {
        size += 2 + 1;
      }
      if (IsJumpable != false) {
        size += 2 + 1;
      }
      if (IsSkipDieAnime != false) {
        size += 2 + 1;
      }
      if (LimitCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitCount);
      }
      size += maxToast_.CalculateSize(_map_maxToast_codec);
      size += maxToastNew_.CalculateSize(_repeated_maxToastNew_codec);
      if (OutputCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputCount);
      }
      if (OutputTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputTime);
      }
      size += outputsFixed_.CalculateSize(_repeated_outputsFixed_codec);
      size += outputsFixedTime_.CalculateSize(_repeated_outputsFixedTime_codec);
      size += outputsToast_.CalculateSize(_map_outputsToast_codec);
      if (ReviveCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReviveCount);
      }
      if (ReviveTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReviveTime);
      }
      if (SpawnSfx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpawnSfx);
      }
      if (SpeedCost != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpeedCost);
      }
      if (StageCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StageCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComMergeTapSource other) {
      if (other == null) {
        return;
      }
      if (other.ConfigVersion != 0) {
        ConfigVersion = other.ConfigVersion;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      Tags_.Add(other.Tags_);
      costId_.Add(other.costId_);
      if (other.DeadItem != 0) {
        DeadItem = other.DeadItem;
      }
      dieInto_.Add(other.dieInto_);
      if (other.EnergyCost != 0) {
        EnergyCost = other.EnergyCost;
      }
      if (other.FirstOutputTime != 0) {
        FirstOutputTime = other.FirstOutputTime;
      }
      if (other.Frozen != false) {
        Frozen = other.Frozen;
      }
      if (other.IsBoostItem != false) {
        IsBoostItem = other.IsBoostItem;
      }
      if (other.IsBoostable != false) {
        IsBoostable = other.IsBoostable;
      }
      if (other.IsCategroyInfo != false) {
        IsCategroyInfo = other.IsCategroyInfo;
      }
      if (other.IsFillClear != false) {
        IsFillClear = other.IsFillClear;
      }
      if (other.IsJumpable != false) {
        IsJumpable = other.IsJumpable;
      }
      if (other.IsSkipDieAnime != false) {
        IsSkipDieAnime = other.IsSkipDieAnime;
      }
      if (other.LimitCount != 0) {
        LimitCount = other.LimitCount;
      }
      maxToast_.Add(other.maxToast_);
      maxToastNew_.Add(other.maxToastNew_);
      if (other.OutputCount != 0) {
        OutputCount = other.OutputCount;
      }
      if (other.OutputTime != 0) {
        OutputTime = other.OutputTime;
      }
      outputsFixed_.Add(other.outputsFixed_);
      outputsFixedTime_.Add(other.outputsFixedTime_);
      outputsToast_.Add(other.outputsToast_);
      if (other.ReviveCount != 0) {
        ReviveCount = other.ReviveCount;
      }
      if (other.ReviveTime != 0) {
        ReviveTime = other.ReviveTime;
      }
      if (other.SpawnSfx.Length != 0) {
        SpawnSfx = other.SpawnSfx;
      }
      if (other.SpeedCost != 0) {
        SpeedCost = other.SpeedCost;
      }
      if (other.StageCount != 0) {
        StageCount = other.StageCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConfigVersion = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            Tags_.AddEntriesFrom(input, _repeated_Tags_codec);
            break;
          }
          case 32: {
            DeadItem = input.ReadInt32();
            break;
          }
          case 40: {
            EnergyCost = input.ReadInt32();
            break;
          }
          case 48: {
            FirstOutputTime = input.ReadInt32();
            break;
          }
          case 56: {
            Frozen = input.ReadBool();
            break;
          }
          case 64: {
            LimitCount = input.ReadInt32();
            break;
          }
          case 72: {
            OutputCount = input.ReadInt32();
            break;
          }
          case 80: {
            OutputTime = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            outputsFixed_.AddEntriesFrom(input, _repeated_outputsFixed_codec);
            break;
          }
          case 106:
          case 104: {
            outputsFixedTime_.AddEntriesFrom(input, _repeated_outputsFixedTime_codec);
            break;
          }
          case 120: {
            ReviveCount = input.ReadInt32();
            break;
          }
          case 128: {
            ReviveTime = input.ReadInt32();
            break;
          }
          case 138: {
            SpawnSfx = input.ReadString();
            break;
          }
          case 144: {
            SpeedCost = input.ReadInt32();
            break;
          }
          case 152: {
            StageCount = input.ReadInt32();
            break;
          }
          case 160: {
            IsSkipDieAnime = input.ReadBool();
            break;
          }
          case 168: {
            IsFillClear = input.ReadBool();
            break;
          }
          case 178: {
            outputsToast_.AddEntriesFrom(input, _map_outputsToast_codec);
            break;
          }
          case 186:
          case 184: {
            costId_.AddEntriesFrom(input, _repeated_costId_codec);
            break;
          }
          case 192: {
            IsBoostable = input.ReadBool();
            break;
          }
          case 202: {
            dieInto_.AddEntriesFrom(input, _map_dieInto_codec);
            break;
          }
          case 208: {
            IsJumpable = input.ReadBool();
            break;
          }
          case 218: {
            maxToast_.AddEntriesFrom(input, _map_maxToast_codec);
            break;
          }
          case 224: {
            IsBoostItem = input.ReadBool();
            break;
          }
          case 250:
          case 248: {
            maxToastNew_.AddEntriesFrom(input, _repeated_maxToastNew_codec);
            break;
          }
          case 256: {
            IsCategroyInfo = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ConfigVersion = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            Tags_.AddEntriesFrom(ref input, _repeated_Tags_codec);
            break;
          }
          case 32: {
            DeadItem = input.ReadInt32();
            break;
          }
          case 40: {
            EnergyCost = input.ReadInt32();
            break;
          }
          case 48: {
            FirstOutputTime = input.ReadInt32();
            break;
          }
          case 56: {
            Frozen = input.ReadBool();
            break;
          }
          case 64: {
            LimitCount = input.ReadInt32();
            break;
          }
          case 72: {
            OutputCount = input.ReadInt32();
            break;
          }
          case 80: {
            OutputTime = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            outputsFixed_.AddEntriesFrom(ref input, _repeated_outputsFixed_codec);
            break;
          }
          case 106:
          case 104: {
            outputsFixedTime_.AddEntriesFrom(ref input, _repeated_outputsFixedTime_codec);
            break;
          }
          case 120: {
            ReviveCount = input.ReadInt32();
            break;
          }
          case 128: {
            ReviveTime = input.ReadInt32();
            break;
          }
          case 138: {
            SpawnSfx = input.ReadString();
            break;
          }
          case 144: {
            SpeedCost = input.ReadInt32();
            break;
          }
          case 152: {
            StageCount = input.ReadInt32();
            break;
          }
          case 160: {
            IsSkipDieAnime = input.ReadBool();
            break;
          }
          case 168: {
            IsFillClear = input.ReadBool();
            break;
          }
          case 178: {
            outputsToast_.AddEntriesFrom(ref input, _map_outputsToast_codec);
            break;
          }
          case 186:
          case 184: {
            costId_.AddEntriesFrom(ref input, _repeated_costId_codec);
            break;
          }
          case 192: {
            IsBoostable = input.ReadBool();
            break;
          }
          case 202: {
            dieInto_.AddEntriesFrom(ref input, _map_dieInto_codec);
            break;
          }
          case 208: {
            IsJumpable = input.ReadBool();
            break;
          }
          case 218: {
            maxToast_.AddEntriesFrom(ref input, _map_maxToast_codec);
            break;
          }
          case 224: {
            IsBoostItem = input.ReadBool();
            break;
          }
          case 250:
          case 248: {
            maxToastNew_.AddEntriesFrom(ref input, _repeated_maxToastNew_codec);
            break;
          }
          case 256: {
            IsCategroyInfo = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComMergeTapSourceMapABValue : pb::IMessage<ComMergeTapSourceMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComMergeTapSourceMapABValue> _parser = new pb::MessageParser<ComMergeTapSourceMapABValue>(() => new ComMergeTapSourceMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComMergeTapSourceMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ComMergeTapSourceConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeTapSourceMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeTapSourceMapABValue(ComMergeTapSourceMapABValue other) : this() {
      comMergeTapSourceMap_ = other.comMergeTapSourceMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeTapSourceMapABValue Clone() {
      return new ComMergeTapSourceMapABValue(this);
    }

    /// <summary>Field number for the "ComMergeTapSourceMap" field.</summary>
    public const int ComMergeTapSourceMapFieldNumber = 1;
    private static readonly pbc::MapField<string, global::fat.rawdata.ComMergeTapSource>.Codec _map_comMergeTapSourceMap_codec
        = new pbc::MapField<string, global::fat.rawdata.ComMergeTapSource>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ComMergeTapSource.Parser), 10);
    private readonly pbc::MapField<string, global::fat.rawdata.ComMergeTapSource> comMergeTapSourceMap_ = new pbc::MapField<string, global::fat.rawdata.ComMergeTapSource>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ComMergeTapSource> ComMergeTapSourceMap {
      get { return comMergeTapSourceMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComMergeTapSourceMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComMergeTapSourceMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ComMergeTapSourceMap.Equals(other.ComMergeTapSourceMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ComMergeTapSourceMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      comMergeTapSourceMap_.WriteTo(output, _map_comMergeTapSourceMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      comMergeTapSourceMap_.WriteTo(ref output, _map_comMergeTapSourceMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += comMergeTapSourceMap_.CalculateSize(_map_comMergeTapSourceMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComMergeTapSourceMapABValue other) {
      if (other == null) {
        return;
      }
      comMergeTapSourceMap_.Add(other.comMergeTapSourceMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            comMergeTapSourceMap_.AddEntriesFrom(input, _map_comMergeTapSourceMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            comMergeTapSourceMap_.AddEntriesFrom(ref input, _map_comMergeTapSourceMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComMergeTapSourceConf : pb::IMessage<ComMergeTapSourceConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComMergeTapSourceConf> _parser = new pb::MessageParser<ComMergeTapSourceConf>(() => new ComMergeTapSourceConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComMergeTapSourceConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ComMergeTapSourceConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeTapSourceConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeTapSourceConf(ComMergeTapSourceConf other) : this() {
      comMergeTapSourceMap_ = other.comMergeTapSourceMap_.Clone();
      comMergeTapSourceMapAB_ = other.comMergeTapSourceMapAB_.Clone();
      comMergeTapSourceMapABPatch_ = other.comMergeTapSourceMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeTapSourceConf Clone() {
      return new ComMergeTapSourceConf(this);
    }

    /// <summary>Field number for the "ComMergeTapSourceMap" field.</summary>
    public const int ComMergeTapSourceMapFieldNumber = 1;
    private static readonly pbc::MapField<string, global::fat.rawdata.ComMergeTapSource>.Codec _map_comMergeTapSourceMap_codec
        = new pbc::MapField<string, global::fat.rawdata.ComMergeTapSource>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ComMergeTapSource.Parser), 10);
    private readonly pbc::MapField<string, global::fat.rawdata.ComMergeTapSource> comMergeTapSourceMap_ = new pbc::MapField<string, global::fat.rawdata.ComMergeTapSource>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ComMergeTapSource> ComMergeTapSourceMap {
      get { return comMergeTapSourceMap_; }
    }

    /// <summary>Field number for the "ComMergeTapSourceMapAB" field.</summary>
    public const int ComMergeTapSourceMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.ComMergeTapSourceMapABValue>.Codec _map_comMergeTapSourceMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.ComMergeTapSourceMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ComMergeTapSourceMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.ComMergeTapSourceMapABValue> comMergeTapSourceMapAB_ = new pbc::MapField<string, global::fat.rawdata.ComMergeTapSourceMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ComMergeTapSourceMapABValue> ComMergeTapSourceMapAB {
      get { return comMergeTapSourceMapAB_; }
    }

    /// <summary>Field number for the "ComMergeTapSourceMapABPatch" field.</summary>
    public const int ComMergeTapSourceMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.ComMergeTapSourceMapABValue>.Codec _map_comMergeTapSourceMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.ComMergeTapSourceMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ComMergeTapSourceMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.ComMergeTapSourceMapABValue> comMergeTapSourceMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.ComMergeTapSourceMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ComMergeTapSourceMapABValue> ComMergeTapSourceMapABPatch {
      get { return comMergeTapSourceMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComMergeTapSourceConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComMergeTapSourceConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ComMergeTapSourceMap.Equals(other.ComMergeTapSourceMap)) return false;
      if (!ComMergeTapSourceMapAB.Equals(other.ComMergeTapSourceMapAB)) return false;
      if (!ComMergeTapSourceMapABPatch.Equals(other.ComMergeTapSourceMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ComMergeTapSourceMap.GetHashCode();
      hash ^= ComMergeTapSourceMapAB.GetHashCode();
      hash ^= ComMergeTapSourceMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      comMergeTapSourceMap_.WriteTo(output, _map_comMergeTapSourceMap_codec);
      comMergeTapSourceMapAB_.WriteTo(output, _map_comMergeTapSourceMapAB_codec);
      comMergeTapSourceMapABPatch_.WriteTo(output, _map_comMergeTapSourceMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      comMergeTapSourceMap_.WriteTo(ref output, _map_comMergeTapSourceMap_codec);
      comMergeTapSourceMapAB_.WriteTo(ref output, _map_comMergeTapSourceMapAB_codec);
      comMergeTapSourceMapABPatch_.WriteTo(ref output, _map_comMergeTapSourceMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += comMergeTapSourceMap_.CalculateSize(_map_comMergeTapSourceMap_codec);
      size += comMergeTapSourceMapAB_.CalculateSize(_map_comMergeTapSourceMapAB_codec);
      size += comMergeTapSourceMapABPatch_.CalculateSize(_map_comMergeTapSourceMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComMergeTapSourceConf other) {
      if (other == null) {
        return;
      }
      comMergeTapSourceMap_.Add(other.comMergeTapSourceMap_);
      comMergeTapSourceMapAB_.Add(other.comMergeTapSourceMapAB_);
      comMergeTapSourceMapABPatch_.Add(other.comMergeTapSourceMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            comMergeTapSourceMap_.AddEntriesFrom(input, _map_comMergeTapSourceMap_codec);
            break;
          }
          case 18: {
            comMergeTapSourceMapAB_.AddEntriesFrom(input, _map_comMergeTapSourceMapAB_codec);
            break;
          }
          case 26: {
            comMergeTapSourceMapABPatch_.AddEntriesFrom(input, _map_comMergeTapSourceMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            comMergeTapSourceMap_.AddEntriesFrom(ref input, _map_comMergeTapSourceMap_codec);
            break;
          }
          case 18: {
            comMergeTapSourceMapAB_.AddEntriesFrom(ref input, _map_comMergeTapSourceMapAB_codec);
            break;
          }
          case 26: {
            comMergeTapSourceMapABPatch_.AddEntriesFrom(ref input, _map_comMergeTapSourceMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
