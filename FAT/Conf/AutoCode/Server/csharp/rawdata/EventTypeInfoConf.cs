// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventTypeInfoConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventTypeInfoConf.proto</summary>
  public static partial class EventTypeInfoConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventTypeInfoConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventTypeInfoConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9yYXdkYXRhL0V2ZW50VHlwZUluZm9Db25mLnByb3RvEgdyYXdkYXRhGhdy",
            "YXdkYXRhL0V2ZW50VHlwZS5wcm90byLnAQoNRXZlbnRUeXBlSW5mbxIWCg5i",
            "b2FyZEVudFdlaWdodBgJIAEoBRIYChBldmVudFRpbWVSZXF1aXJlGAQgASgJ",
            "EiUKCWV2ZW50VHlwZRgBIAEoDjISLnJhd2RhdGEuRXZlbnRUeXBlEhYKDmlz",
            "QWN0aXZlRm9yTmV3GAMgASgIEhQKDGlzR3JhZGVMaW1pdBgCIAEoCBIYChBp",
            "c0xpbWl0U2luZ2xlRGF5GAUgASgIEgsKA2tleRgHIAEoBRIQCghsaW1pdE51",
            "bRgGIAEoBRIWCg5yZXNoaXBtZW50VHlwZRgIIAEoBSJPChlFdmVudFR5cGVJ",
            "bmZvU2xpY2VBQlZhbHVlEjIKEkV2ZW50VHlwZUluZm9TbGljZRgBIAMoCzIW",
            "LnJhd2RhdGEuRXZlbnRUeXBlSW5mbyLAAwoRRXZlbnRUeXBlSW5mb0NvbmYS",
            "MgoSRXZlbnRUeXBlSW5mb1NsaWNlGAEgAygLMhYucmF3ZGF0YS5FdmVudFR5",
            "cGVJbmZvElIKFEV2ZW50VHlwZUluZm9TbGljZUFCGAIgAygLMjQucmF3ZGF0",
            "YS5FdmVudFR5cGVJbmZvQ29uZi5FdmVudFR5cGVJbmZvU2xpY2VBQkVudHJ5",
            "ElwKGUV2ZW50VHlwZUluZm9TbGljZUFCUGF0Y2gYAyADKAsyOS5yYXdkYXRh",
            "LkV2ZW50VHlwZUluZm9Db25mLkV2ZW50VHlwZUluZm9TbGljZUFCUGF0Y2hF",
            "bnRyeRpfChlFdmVudFR5cGVJbmZvU2xpY2VBQkVudHJ5EgsKA2tleRgBIAEo",
            "CRIxCgV2YWx1ZRgCIAEoCzIiLnJhd2RhdGEuRXZlbnRUeXBlSW5mb1NsaWNl",
            "QUJWYWx1ZToCOAEaZAoeRXZlbnRUeXBlSW5mb1NsaWNlQUJQYXRjaEVudHJ5",
            "EgsKA2tleRgBIAEoCRIxCgV2YWx1ZRgCIAEoCzIiLnJhd2RhdGEuRXZlbnRU",
            "eXBlSW5mb1NsaWNlQUJWYWx1ZToCOAFCPVotZ2l0bGFiLmZ1bnBsdXMuaW8v",
            "ZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdkYXRhqgILZmF0LnJhd2RhdGFiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.rawdata.EventTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTypeInfo), global::fat.rawdata.EventTypeInfo.Parser, new[]{ "BoardEntWeight", "EventTimeRequire", "EventType", "IsActiveForNew", "IsGradeLimit", "IsLimitSingleDay", "Key", "LimitNum", "ReshipmentType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTypeInfoSliceABValue), global::fat.rawdata.EventTypeInfoSliceABValue.Parser, new[]{ "EventTypeInfoSlice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTypeInfoConf), global::fat.rawdata.EventTypeInfoConf.Parser, new[]{ "EventTypeInfoSlice", "EventTypeInfoSliceAB", "EventTypeInfoSliceABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventTypeInfo",table="EventTypeInfoSlice",table_wrapper="EventTypeInfoConf",map="false",map_key_type="",data="EventTypeInfoConf")
  /// annotation@ab(table_ab="EventTypeInfoSliceAB",table_ab_patch="EventTypeInfoSliceABPatch",table_ab_value="EventTypeInfoSliceABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// </summary>
  public sealed partial class EventTypeInfo : pb::IMessage<EventTypeInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTypeInfo> _parser = new pb::MessageParser<EventTypeInfo>(() => new EventTypeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTypeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventTypeInfoConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTypeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTypeInfo(EventTypeInfo other) : this() {
      boardEntWeight_ = other.boardEntWeight_;
      eventTimeRequire_ = other.eventTimeRequire_;
      eventType_ = other.eventType_;
      isActiveForNew_ = other.isActiveForNew_;
      isGradeLimit_ = other.isGradeLimit_;
      isLimitSingleDay_ = other.isLimitSingleDay_;
      key_ = other.key_;
      limitNum_ = other.limitNum_;
      reshipmentType_ = other.reshipmentType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTypeInfo Clone() {
      return new EventTypeInfo(this);
    }

    /// <summary>Field number for the "boardEntWeight" field.</summary>
    public const int BoardEntWeightFieldNumber = 9;
    private int boardEntWeight_;
    /// <summary>
    /// 棋盘入口权重
    /// （越大越靠左）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardEntWeight {
      get { return boardEntWeight_; }
      set {
        boardEntWeight_ = value;
      }
    }

    /// <summary>Field number for the "eventTimeRequire" field.</summary>
    public const int EventTimeRequireFieldNumber = 4;
    private string eventTimeRequire_ = "";
    /// <summary>
    /// 触发条件函数表达式
    /// （配置方式见文档）
    /// 注意：仅用于限制是否能被EventTime触发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventTimeRequire {
      get { return eventTimeRequire_; }
      set {
        eventTimeRequire_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::fat.rawdata.EventType eventType_ = global::fat.rawdata.EventType.Default;
    /// <summary>
    /// 活动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.rawdata.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "isActiveForNew" field.</summary>
    public const int IsActiveForNewFieldNumber = 3;
    private bool isActiveForNew_;
    /// <summary>
    /// 是否能在新手期内
    /// 触发这类活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActiveForNew {
      get { return isActiveForNew_; }
      set {
        isActiveForNew_ = value;
      }
    }

    /// <summary>Field number for the "isGradeLimit" field.</summary>
    public const int IsGradeLimitFieldNumber = 2;
    private bool isGradeLimit_;
    /// <summary>
    /// 是否在档位信息更新之后
    /// 才刷新活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGradeLimit {
      get { return isGradeLimit_; }
      set {
        isGradeLimit_ = value;
      }
    }

    /// <summary>Field number for the "isLimitSingleDay" field.</summary>
    public const int IsLimitSingleDayFieldNumber = 5;
    private bool isLimitSingleDay_;
    /// <summary>
    /// 是否在单日内
    /// 只能触发1个活动实例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLimitSingleDay {
      get { return isLimitSingleDay_; }
      set {
        isLimitSingleDay_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 7;
    private int key_;
    /// <summary>
    /// key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "limitNum" field.</summary>
    public const int LimitNumFieldNumber = 6;
    private int limitNum_;
    /// <summary>
    /// 同时可以触发的
    /// 活动实例数量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitNum {
      get { return limitNum_; }
      set {
        limitNum_ = value;
      }
    }

    /// <summary>Field number for the "reshipmentType" field.</summary>
    public const int ReshipmentTypeFieldNumber = 8;
    private int reshipmentType_;
    /// <summary>
    /// 补单弹窗模版
    /// （只对礼包生效）
    /// （ReshipmentType.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReshipmentType {
      get { return reshipmentType_; }
      set {
        reshipmentType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTypeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTypeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoardEntWeight != other.BoardEntWeight) return false;
      if (EventTimeRequire != other.EventTimeRequire) return false;
      if (EventType != other.EventType) return false;
      if (IsActiveForNew != other.IsActiveForNew) return false;
      if (IsGradeLimit != other.IsGradeLimit) return false;
      if (IsLimitSingleDay != other.IsLimitSingleDay) return false;
      if (Key != other.Key) return false;
      if (LimitNum != other.LimitNum) return false;
      if (ReshipmentType != other.ReshipmentType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BoardEntWeight != 0) hash ^= BoardEntWeight.GetHashCode();
      if (EventTimeRequire.Length != 0) hash ^= EventTimeRequire.GetHashCode();
      if (EventType != global::fat.rawdata.EventType.Default) hash ^= EventType.GetHashCode();
      if (IsActiveForNew != false) hash ^= IsActiveForNew.GetHashCode();
      if (IsGradeLimit != false) hash ^= IsGradeLimit.GetHashCode();
      if (IsLimitSingleDay != false) hash ^= IsLimitSingleDay.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (LimitNum != 0) hash ^= LimitNum.GetHashCode();
      if (ReshipmentType != 0) hash ^= ReshipmentType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EventType != global::fat.rawdata.EventType.Default) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (IsGradeLimit != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsGradeLimit);
      }
      if (IsActiveForNew != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsActiveForNew);
      }
      if (EventTimeRequire.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EventTimeRequire);
      }
      if (IsLimitSingleDay != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsLimitSingleDay);
      }
      if (LimitNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LimitNum);
      }
      if (Key != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Key);
      }
      if (ReshipmentType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ReshipmentType);
      }
      if (BoardEntWeight != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BoardEntWeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EventType != global::fat.rawdata.EventType.Default) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (IsGradeLimit != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsGradeLimit);
      }
      if (IsActiveForNew != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsActiveForNew);
      }
      if (EventTimeRequire.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EventTimeRequire);
      }
      if (IsLimitSingleDay != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsLimitSingleDay);
      }
      if (LimitNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LimitNum);
      }
      if (Key != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Key);
      }
      if (ReshipmentType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ReshipmentType);
      }
      if (BoardEntWeight != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BoardEntWeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoardEntWeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardEntWeight);
      }
      if (EventTimeRequire.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventTimeRequire);
      }
      if (EventType != global::fat.rawdata.EventType.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (IsActiveForNew != false) {
        size += 1 + 1;
      }
      if (IsGradeLimit != false) {
        size += 1 + 1;
      }
      if (IsLimitSingleDay != false) {
        size += 1 + 1;
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (LimitNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitNum);
      }
      if (ReshipmentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReshipmentType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTypeInfo other) {
      if (other == null) {
        return;
      }
      if (other.BoardEntWeight != 0) {
        BoardEntWeight = other.BoardEntWeight;
      }
      if (other.EventTimeRequire.Length != 0) {
        EventTimeRequire = other.EventTimeRequire;
      }
      if (other.EventType != global::fat.rawdata.EventType.Default) {
        EventType = other.EventType;
      }
      if (other.IsActiveForNew != false) {
        IsActiveForNew = other.IsActiveForNew;
      }
      if (other.IsGradeLimit != false) {
        IsGradeLimit = other.IsGradeLimit;
      }
      if (other.IsLimitSingleDay != false) {
        IsLimitSingleDay = other.IsLimitSingleDay;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.LimitNum != 0) {
        LimitNum = other.LimitNum;
      }
      if (other.ReshipmentType != 0) {
        ReshipmentType = other.ReshipmentType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventType = (global::fat.rawdata.EventType) input.ReadEnum();
            break;
          }
          case 16: {
            IsGradeLimit = input.ReadBool();
            break;
          }
          case 24: {
            IsActiveForNew = input.ReadBool();
            break;
          }
          case 34: {
            EventTimeRequire = input.ReadString();
            break;
          }
          case 40: {
            IsLimitSingleDay = input.ReadBool();
            break;
          }
          case 48: {
            LimitNum = input.ReadInt32();
            break;
          }
          case 56: {
            Key = input.ReadInt32();
            break;
          }
          case 64: {
            ReshipmentType = input.ReadInt32();
            break;
          }
          case 72: {
            BoardEntWeight = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EventType = (global::fat.rawdata.EventType) input.ReadEnum();
            break;
          }
          case 16: {
            IsGradeLimit = input.ReadBool();
            break;
          }
          case 24: {
            IsActiveForNew = input.ReadBool();
            break;
          }
          case 34: {
            EventTimeRequire = input.ReadString();
            break;
          }
          case 40: {
            IsLimitSingleDay = input.ReadBool();
            break;
          }
          case 48: {
            LimitNum = input.ReadInt32();
            break;
          }
          case 56: {
            Key = input.ReadInt32();
            break;
          }
          case 64: {
            ReshipmentType = input.ReadInt32();
            break;
          }
          case 72: {
            BoardEntWeight = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventTypeInfoSliceABValue : pb::IMessage<EventTypeInfoSliceABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTypeInfoSliceABValue> _parser = new pb::MessageParser<EventTypeInfoSliceABValue>(() => new EventTypeInfoSliceABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTypeInfoSliceABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventTypeInfoConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTypeInfoSliceABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTypeInfoSliceABValue(EventTypeInfoSliceABValue other) : this() {
      eventTypeInfoSlice_ = other.eventTypeInfoSlice_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTypeInfoSliceABValue Clone() {
      return new EventTypeInfoSliceABValue(this);
    }

    /// <summary>Field number for the "EventTypeInfoSlice" field.</summary>
    public const int EventTypeInfoSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.EventTypeInfo> _repeated_eventTypeInfoSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.EventTypeInfo.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.EventTypeInfo> eventTypeInfoSlice_ = new pbc::RepeatedField<global::fat.rawdata.EventTypeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.EventTypeInfo> EventTypeInfoSlice {
      get { return eventTypeInfoSlice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTypeInfoSliceABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTypeInfoSliceABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!eventTypeInfoSlice_.Equals(other.eventTypeInfoSlice_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= eventTypeInfoSlice_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventTypeInfoSlice_.WriteTo(output, _repeated_eventTypeInfoSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventTypeInfoSlice_.WriteTo(ref output, _repeated_eventTypeInfoSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventTypeInfoSlice_.CalculateSize(_repeated_eventTypeInfoSlice_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTypeInfoSliceABValue other) {
      if (other == null) {
        return;
      }
      eventTypeInfoSlice_.Add(other.eventTypeInfoSlice_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventTypeInfoSlice_.AddEntriesFrom(input, _repeated_eventTypeInfoSlice_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventTypeInfoSlice_.AddEntriesFrom(ref input, _repeated_eventTypeInfoSlice_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventTypeInfoConf : pb::IMessage<EventTypeInfoConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTypeInfoConf> _parser = new pb::MessageParser<EventTypeInfoConf>(() => new EventTypeInfoConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTypeInfoConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventTypeInfoConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTypeInfoConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTypeInfoConf(EventTypeInfoConf other) : this() {
      eventTypeInfoSlice_ = other.eventTypeInfoSlice_.Clone();
      eventTypeInfoSliceAB_ = other.eventTypeInfoSliceAB_.Clone();
      eventTypeInfoSliceABPatch_ = other.eventTypeInfoSliceABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTypeInfoConf Clone() {
      return new EventTypeInfoConf(this);
    }

    /// <summary>Field number for the "EventTypeInfoSlice" field.</summary>
    public const int EventTypeInfoSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.EventTypeInfo> _repeated_eventTypeInfoSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.EventTypeInfo.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.EventTypeInfo> eventTypeInfoSlice_ = new pbc::RepeatedField<global::fat.rawdata.EventTypeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.EventTypeInfo> EventTypeInfoSlice {
      get { return eventTypeInfoSlice_; }
    }

    /// <summary>Field number for the "EventTypeInfoSliceAB" field.</summary>
    public const int EventTypeInfoSliceABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventTypeInfoSliceABValue>.Codec _map_eventTypeInfoSliceAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventTypeInfoSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTypeInfoSliceABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventTypeInfoSliceABValue> eventTypeInfoSliceAB_ = new pbc::MapField<string, global::fat.rawdata.EventTypeInfoSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventTypeInfoSliceABValue> EventTypeInfoSliceAB {
      get { return eventTypeInfoSliceAB_; }
    }

    /// <summary>Field number for the "EventTypeInfoSliceABPatch" field.</summary>
    public const int EventTypeInfoSliceABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventTypeInfoSliceABValue>.Codec _map_eventTypeInfoSliceABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventTypeInfoSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTypeInfoSliceABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventTypeInfoSliceABValue> eventTypeInfoSliceABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventTypeInfoSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventTypeInfoSliceABValue> EventTypeInfoSliceABPatch {
      get { return eventTypeInfoSliceABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTypeInfoConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTypeInfoConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!eventTypeInfoSlice_.Equals(other.eventTypeInfoSlice_)) return false;
      if (!EventTypeInfoSliceAB.Equals(other.EventTypeInfoSliceAB)) return false;
      if (!EventTypeInfoSliceABPatch.Equals(other.EventTypeInfoSliceABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= eventTypeInfoSlice_.GetHashCode();
      hash ^= EventTypeInfoSliceAB.GetHashCode();
      hash ^= EventTypeInfoSliceABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventTypeInfoSlice_.WriteTo(output, _repeated_eventTypeInfoSlice_codec);
      eventTypeInfoSliceAB_.WriteTo(output, _map_eventTypeInfoSliceAB_codec);
      eventTypeInfoSliceABPatch_.WriteTo(output, _map_eventTypeInfoSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventTypeInfoSlice_.WriteTo(ref output, _repeated_eventTypeInfoSlice_codec);
      eventTypeInfoSliceAB_.WriteTo(ref output, _map_eventTypeInfoSliceAB_codec);
      eventTypeInfoSliceABPatch_.WriteTo(ref output, _map_eventTypeInfoSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventTypeInfoSlice_.CalculateSize(_repeated_eventTypeInfoSlice_codec);
      size += eventTypeInfoSliceAB_.CalculateSize(_map_eventTypeInfoSliceAB_codec);
      size += eventTypeInfoSliceABPatch_.CalculateSize(_map_eventTypeInfoSliceABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTypeInfoConf other) {
      if (other == null) {
        return;
      }
      eventTypeInfoSlice_.Add(other.eventTypeInfoSlice_);
      eventTypeInfoSliceAB_.Add(other.eventTypeInfoSliceAB_);
      eventTypeInfoSliceABPatch_.Add(other.eventTypeInfoSliceABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventTypeInfoSlice_.AddEntriesFrom(input, _repeated_eventTypeInfoSlice_codec);
            break;
          }
          case 18: {
            eventTypeInfoSliceAB_.AddEntriesFrom(input, _map_eventTypeInfoSliceAB_codec);
            break;
          }
          case 26: {
            eventTypeInfoSliceABPatch_.AddEntriesFrom(input, _map_eventTypeInfoSliceABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventTypeInfoSlice_.AddEntriesFrom(ref input, _repeated_eventTypeInfoSlice_codec);
            break;
          }
          case 18: {
            eventTypeInfoSliceAB_.AddEntriesFrom(ref input, _map_eventTypeInfoSliceAB_codec);
            break;
          }
          case 26: {
            eventTypeInfoSliceABPatch_.AddEntriesFrom(ref input, _map_eventTypeInfoSliceABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
