// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/DailyEventListConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/DailyEventListConf.proto</summary>
  public static partial class DailyEventListConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/DailyEventListConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DailyEventListConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiByYXdkYXRhL0RhaWx5RXZlbnRMaXN0Q29uZi5wcm90bxIHcmF3ZGF0YSL6",
            "AgoORGFpbHlFdmVudExpc3QSCgoCaWQYASABKAUSEwoLYWN0aXZlTGV2ZWwY",
            "AiABKAUSFQoNYWN0aXZlUmVxdWlyZRgLIAEoCRIVCg1hY3RpdmVXZWVrZGF5",
            "GAMgASgFEhIKCmJvdHRvbVRpcHMYDiABKAkSEgoKZXZlbnRUaGVtZRgJIAEo",
            "BRI7CgpleHBpcmVJdGVtGAcgAygLMicucmF3ZGF0YS5EYWlseUV2ZW50TGlz",
            "dC5FeHBpcmVJdGVtRW50cnkSFgoOaW5jbHVkZUdyb3VwSWQYBCADKAUSFAoM",
            "aW5jbHVkZUdycElkGAogASgFEhQKDGlzRm9yTmV3VXNlchgIIAEoCBITCgtu",
            "b3RpY2VUaGVtZRgMIAEoBRIVCg1zaHV0ZG93bkxldmVsGAUgASgFEhEKCXRh",
            "c2tUaGVtZRgNIAEoBRoxCg9FeHBpcmVJdGVtRW50cnkSCwoDa2V5GAEgASgF",
            "Eg0KBXZhbHVlGAIgASgFOgI4ASLCAQoYRGFpbHlFdmVudExpc3RNYXBBQlZh",
            "bHVlElMKEURhaWx5RXZlbnRMaXN0TWFwGAEgAygLMjgucmF3ZGF0YS5EYWls",
            "eUV2ZW50TGlzdE1hcEFCVmFsdWUuRGFpbHlFdmVudExpc3RNYXBFbnRyeRpR",
            "ChZEYWlseUV2ZW50TGlzdE1hcEVudHJ5EgsKA2tleRgBIAEoBRImCgV2YWx1",
            "ZRgCIAEoCzIXLnJhd2RhdGEuRGFpbHlFdmVudExpc3Q6AjgBIqkEChJEYWls",
            "eUV2ZW50TGlzdENvbmYSTQoRRGFpbHlFdmVudExpc3RNYXAYASADKAsyMi5y",
            "YXdkYXRhLkRhaWx5RXZlbnRMaXN0Q29uZi5EYWlseUV2ZW50TGlzdE1hcEVu",
            "dHJ5ElEKE0RhaWx5RXZlbnRMaXN0TWFwQUIYAiADKAsyNC5yYXdkYXRhLkRh",
            "aWx5RXZlbnRMaXN0Q29uZi5EYWlseUV2ZW50TGlzdE1hcEFCRW50cnkSWwoY",
            "RGFpbHlFdmVudExpc3RNYXBBQlBhdGNoGAMgAygLMjkucmF3ZGF0YS5EYWls",
            "eUV2ZW50TGlzdENvbmYuRGFpbHlFdmVudExpc3RNYXBBQlBhdGNoRW50cnka",
            "UQoWRGFpbHlFdmVudExpc3RNYXBFbnRyeRILCgNrZXkYASABKAUSJgoFdmFs",
            "dWUYAiABKAsyFy5yYXdkYXRhLkRhaWx5RXZlbnRMaXN0OgI4ARpdChhEYWls",
            "eUV2ZW50TGlzdE1hcEFCRW50cnkSCwoDa2V5GAEgASgJEjAKBXZhbHVlGAIg",
            "ASgLMiEucmF3ZGF0YS5EYWlseUV2ZW50TGlzdE1hcEFCVmFsdWU6AjgBGmIK",
            "HURhaWx5RXZlbnRMaXN0TWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIw",
            "CgV2YWx1ZRgCIAEoCzIhLnJhd2RhdGEuRGFpbHlFdmVudExpc3RNYXBBQlZh",
            "bHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29s",
            "YW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.DailyEventList), global::fat.rawdata.DailyEventList.Parser, new[]{ "Id", "ActiveLevel", "ActiveRequire", "ActiveWeekday", "BottomTips", "EventTheme", "ExpireItem", "IncludeGroupId", "IncludeGrpId", "IsForNewUser", "NoticeTheme", "ShutdownLevel", "TaskTheme" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.DailyEventListMapABValue), global::fat.rawdata.DailyEventListMapABValue.Parser, new[]{ "DailyEventListMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.DailyEventListConf), global::fat.rawdata.DailyEventListConf.Parser, new[]{ "DailyEventListMap", "DailyEventListMapAB", "DailyEventListMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="DailyEventList",table="DailyEventListMap",table_wrapper="DailyEventListConf",map="true",map_key_type="int32",data="DailyEventListConf")
  /// annotation@ab(table_ab="DailyEventListMapAB",table_ab_patch="DailyEventListMapABPatch",table_ab_value="DailyEventListMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@DailyEventList(id="id")
  /// </summary>
  public sealed partial class DailyEventList : pb::IMessage<DailyEventList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DailyEventList> _parser = new pb::MessageParser<DailyEventList>(() => new DailyEventList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyEventList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.DailyEventListConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventList(DailyEventList other) : this() {
      id_ = other.id_;
      activeLevel_ = other.activeLevel_;
      activeRequire_ = other.activeRequire_;
      activeWeekday_ = other.activeWeekday_;
      bottomTips_ = other.bottomTips_;
      eventTheme_ = other.eventTheme_;
      expireItem_ = other.expireItem_.Clone();
      includeGroupId_ = other.includeGroupId_.Clone();
      includeGrpId_ = other.includeGrpId_;
      isForNewUser_ = other.isForNewUser_;
      noticeTheme_ = other.noticeTheme_;
      shutdownLevel_ = other.shutdownLevel_;
      taskTheme_ = other.taskTheme_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventList Clone() {
      return new DailyEventList(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 每日任务列表ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "activeLevel" field.</summary>
    public const int ActiveLevelFieldNumber = 2;
    private int activeLevel_;
    /// <summary>
    /// 激活等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveLevel {
      get { return activeLevel_; }
      set {
        activeLevel_ = value;
      }
    }

    /// <summary>Field number for the "activeRequire" field.</summary>
    public const int ActiveRequireFieldNumber = 11;
    private string activeRequire_ = "";
    /// <summary>
    /// 生效条件
    /// （条件函数表达式）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActiveRequire {
      get { return activeRequire_; }
      set {
        activeRequire_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "activeWeekday" field.</summary>
    public const int ActiveWeekdayFieldNumber = 3;
    private int activeWeekday_;
    /// <summary>
    /// 星期几激活
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveWeekday {
      get { return activeWeekday_; }
      set {
        activeWeekday_ = value;
      }
    }

    /// <summary>Field number for the "bottomTips" field.</summary>
    public const int BottomTipsFieldNumber = 14;
    private string bottomTips_ = "";
    /// <summary>
    /// 每日任务下方的七天任务提示文案
    /// 配空时不显示文案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BottomTips {
      get { return bottomTips_; }
      set {
        bottomTips_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 9;
    private int eventTheme_;
    /// <summary>
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "expireItem" field.</summary>
    public const int ExpireItemFieldNumber = 7;
    private static readonly pbc::MapField<int, int>.Codec _map_expireItem_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 58);
    private readonly pbc::MapField<int, int> expireItem_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 活动结束时删除棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> ExpireItem {
      get { return expireItem_; }
    }

    /// <summary>Field number for the "includeGroupId" field.</summary>
    public const int IncludeGroupIdFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_includeGroupId_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> includeGroupId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 包含任务组
    /// （DailyEventGroup.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IncludeGroupId {
      get { return includeGroupId_; }
    }

    /// <summary>Field number for the "includeGrpId" field.</summary>
    public const int IncludeGrpIdFieldNumber = 10;
    private int includeGrpId_;
    /// <summary>
    /// 包含任务组
    /// （GradeIndexMapping.id）
    /// （DEGroup.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IncludeGrpId {
      get { return includeGrpId_; }
      set {
        includeGrpId_ = value;
      }
    }

    /// <summary>Field number for the "isForNewUser" field.</summary>
    public const int IsForNewUserFieldNumber = 8;
    private bool isForNewUser_;
    /// <summary>
    /// TRUE == 仅面向新手期用户
    /// FALSE == 仅面向非新手期用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForNewUser {
      get { return isForNewUser_; }
      set {
        isForNewUser_ = value;
      }
    }

    /// <summary>Field number for the "noticeTheme" field.</summary>
    public const int NoticeThemeFieldNumber = 12;
    private int noticeTheme_;
    /// <summary>
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoticeTheme {
      get { return noticeTheme_; }
      set {
        noticeTheme_ = value;
      }
    }

    /// <summary>Field number for the "shutdownLevel" field.</summary>
    public const int ShutdownLevelFieldNumber = 5;
    private int shutdownLevel_;
    /// <summary>
    /// 关闭等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShutdownLevel {
      get { return shutdownLevel_; }
      set {
        shutdownLevel_ = value;
      }
    }

    /// <summary>Field number for the "taskTheme" field.</summary>
    public const int TaskThemeFieldNumber = 13;
    private int taskTheme_;
    /// <summary>
    /// 任务弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskTheme {
      get { return taskTheme_; }
      set {
        taskTheme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyEventList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyEventList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ActiveLevel != other.ActiveLevel) return false;
      if (ActiveRequire != other.ActiveRequire) return false;
      if (ActiveWeekday != other.ActiveWeekday) return false;
      if (BottomTips != other.BottomTips) return false;
      if (EventTheme != other.EventTheme) return false;
      if (!ExpireItem.Equals(other.ExpireItem)) return false;
      if(!includeGroupId_.Equals(other.includeGroupId_)) return false;
      if (IncludeGrpId != other.IncludeGrpId) return false;
      if (IsForNewUser != other.IsForNewUser) return false;
      if (NoticeTheme != other.NoticeTheme) return false;
      if (ShutdownLevel != other.ShutdownLevel) return false;
      if (TaskTheme != other.TaskTheme) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ActiveLevel != 0) hash ^= ActiveLevel.GetHashCode();
      if (ActiveRequire.Length != 0) hash ^= ActiveRequire.GetHashCode();
      if (ActiveWeekday != 0) hash ^= ActiveWeekday.GetHashCode();
      if (BottomTips.Length != 0) hash ^= BottomTips.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      hash ^= ExpireItem.GetHashCode();
      hash ^= includeGroupId_.GetHashCode();
      if (IncludeGrpId != 0) hash ^= IncludeGrpId.GetHashCode();
      if (IsForNewUser != false) hash ^= IsForNewUser.GetHashCode();
      if (NoticeTheme != 0) hash ^= NoticeTheme.GetHashCode();
      if (ShutdownLevel != 0) hash ^= ShutdownLevel.GetHashCode();
      if (TaskTheme != 0) hash ^= TaskTheme.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ActiveLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActiveLevel);
      }
      if (ActiveWeekday != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActiveWeekday);
      }
      includeGroupId_.WriteTo(output, _repeated_includeGroupId_codec);
      if (ShutdownLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ShutdownLevel);
      }
      expireItem_.WriteTo(output, _map_expireItem_codec);
      if (IsForNewUser != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsForNewUser);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EventTheme);
      }
      if (IncludeGrpId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(IncludeGrpId);
      }
      if (ActiveRequire.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ActiveRequire);
      }
      if (NoticeTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(NoticeTheme);
      }
      if (TaskTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TaskTheme);
      }
      if (BottomTips.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(BottomTips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ActiveLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActiveLevel);
      }
      if (ActiveWeekday != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActiveWeekday);
      }
      includeGroupId_.WriteTo(ref output, _repeated_includeGroupId_codec);
      if (ShutdownLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ShutdownLevel);
      }
      expireItem_.WriteTo(ref output, _map_expireItem_codec);
      if (IsForNewUser != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsForNewUser);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EventTheme);
      }
      if (IncludeGrpId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(IncludeGrpId);
      }
      if (ActiveRequire.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ActiveRequire);
      }
      if (NoticeTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(NoticeTheme);
      }
      if (TaskTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TaskTheme);
      }
      if (BottomTips.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(BottomTips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ActiveLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveLevel);
      }
      if (ActiveRequire.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActiveRequire);
      }
      if (ActiveWeekday != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveWeekday);
      }
      if (BottomTips.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BottomTips);
      }
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      size += expireItem_.CalculateSize(_map_expireItem_codec);
      size += includeGroupId_.CalculateSize(_repeated_includeGroupId_codec);
      if (IncludeGrpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IncludeGrpId);
      }
      if (IsForNewUser != false) {
        size += 1 + 1;
      }
      if (NoticeTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NoticeTheme);
      }
      if (ShutdownLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShutdownLevel);
      }
      if (TaskTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskTheme);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyEventList other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ActiveLevel != 0) {
        ActiveLevel = other.ActiveLevel;
      }
      if (other.ActiveRequire.Length != 0) {
        ActiveRequire = other.ActiveRequire;
      }
      if (other.ActiveWeekday != 0) {
        ActiveWeekday = other.ActiveWeekday;
      }
      if (other.BottomTips.Length != 0) {
        BottomTips = other.BottomTips;
      }
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      expireItem_.Add(other.expireItem_);
      includeGroupId_.Add(other.includeGroupId_);
      if (other.IncludeGrpId != 0) {
        IncludeGrpId = other.IncludeGrpId;
      }
      if (other.IsForNewUser != false) {
        IsForNewUser = other.IsForNewUser;
      }
      if (other.NoticeTheme != 0) {
        NoticeTheme = other.NoticeTheme;
      }
      if (other.ShutdownLevel != 0) {
        ShutdownLevel = other.ShutdownLevel;
      }
      if (other.TaskTheme != 0) {
        TaskTheme = other.TaskTheme;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ActiveLevel = input.ReadInt32();
            break;
          }
          case 24: {
            ActiveWeekday = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            includeGroupId_.AddEntriesFrom(input, _repeated_includeGroupId_codec);
            break;
          }
          case 40: {
            ShutdownLevel = input.ReadInt32();
            break;
          }
          case 58: {
            expireItem_.AddEntriesFrom(input, _map_expireItem_codec);
            break;
          }
          case 64: {
            IsForNewUser = input.ReadBool();
            break;
          }
          case 72: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 80: {
            IncludeGrpId = input.ReadInt32();
            break;
          }
          case 90: {
            ActiveRequire = input.ReadString();
            break;
          }
          case 96: {
            NoticeTheme = input.ReadInt32();
            break;
          }
          case 104: {
            TaskTheme = input.ReadInt32();
            break;
          }
          case 114: {
            BottomTips = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ActiveLevel = input.ReadInt32();
            break;
          }
          case 24: {
            ActiveWeekday = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            includeGroupId_.AddEntriesFrom(ref input, _repeated_includeGroupId_codec);
            break;
          }
          case 40: {
            ShutdownLevel = input.ReadInt32();
            break;
          }
          case 58: {
            expireItem_.AddEntriesFrom(ref input, _map_expireItem_codec);
            break;
          }
          case 64: {
            IsForNewUser = input.ReadBool();
            break;
          }
          case 72: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 80: {
            IncludeGrpId = input.ReadInt32();
            break;
          }
          case 90: {
            ActiveRequire = input.ReadString();
            break;
          }
          case 96: {
            NoticeTheme = input.ReadInt32();
            break;
          }
          case 104: {
            TaskTheme = input.ReadInt32();
            break;
          }
          case 114: {
            BottomTips = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DailyEventListMapABValue : pb::IMessage<DailyEventListMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DailyEventListMapABValue> _parser = new pb::MessageParser<DailyEventListMapABValue>(() => new DailyEventListMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyEventListMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.DailyEventListConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventListMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventListMapABValue(DailyEventListMapABValue other) : this() {
      dailyEventListMap_ = other.dailyEventListMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventListMapABValue Clone() {
      return new DailyEventListMapABValue(this);
    }

    /// <summary>Field number for the "DailyEventListMap" field.</summary>
    public const int DailyEventListMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.DailyEventList>.Codec _map_dailyEventListMap_codec
        = new pbc::MapField<int, global::fat.rawdata.DailyEventList>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.DailyEventList.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.DailyEventList> dailyEventListMap_ = new pbc::MapField<int, global::fat.rawdata.DailyEventList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.DailyEventList> DailyEventListMap {
      get { return dailyEventListMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyEventListMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyEventListMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!DailyEventListMap.Equals(other.DailyEventListMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= DailyEventListMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dailyEventListMap_.WriteTo(output, _map_dailyEventListMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dailyEventListMap_.WriteTo(ref output, _map_dailyEventListMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dailyEventListMap_.CalculateSize(_map_dailyEventListMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyEventListMapABValue other) {
      if (other == null) {
        return;
      }
      dailyEventListMap_.Add(other.dailyEventListMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dailyEventListMap_.AddEntriesFrom(input, _map_dailyEventListMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dailyEventListMap_.AddEntriesFrom(ref input, _map_dailyEventListMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DailyEventListConf : pb::IMessage<DailyEventListConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DailyEventListConf> _parser = new pb::MessageParser<DailyEventListConf>(() => new DailyEventListConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyEventListConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.DailyEventListConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventListConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventListConf(DailyEventListConf other) : this() {
      dailyEventListMap_ = other.dailyEventListMap_.Clone();
      dailyEventListMapAB_ = other.dailyEventListMapAB_.Clone();
      dailyEventListMapABPatch_ = other.dailyEventListMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyEventListConf Clone() {
      return new DailyEventListConf(this);
    }

    /// <summary>Field number for the "DailyEventListMap" field.</summary>
    public const int DailyEventListMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.DailyEventList>.Codec _map_dailyEventListMap_codec
        = new pbc::MapField<int, global::fat.rawdata.DailyEventList>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.DailyEventList.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.DailyEventList> dailyEventListMap_ = new pbc::MapField<int, global::fat.rawdata.DailyEventList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.DailyEventList> DailyEventListMap {
      get { return dailyEventListMap_; }
    }

    /// <summary>Field number for the "DailyEventListMapAB" field.</summary>
    public const int DailyEventListMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.DailyEventListMapABValue>.Codec _map_dailyEventListMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.DailyEventListMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.DailyEventListMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.DailyEventListMapABValue> dailyEventListMapAB_ = new pbc::MapField<string, global::fat.rawdata.DailyEventListMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.DailyEventListMapABValue> DailyEventListMapAB {
      get { return dailyEventListMapAB_; }
    }

    /// <summary>Field number for the "DailyEventListMapABPatch" field.</summary>
    public const int DailyEventListMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.DailyEventListMapABValue>.Codec _map_dailyEventListMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.DailyEventListMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.DailyEventListMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.DailyEventListMapABValue> dailyEventListMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.DailyEventListMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.DailyEventListMapABValue> DailyEventListMapABPatch {
      get { return dailyEventListMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyEventListConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyEventListConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!DailyEventListMap.Equals(other.DailyEventListMap)) return false;
      if (!DailyEventListMapAB.Equals(other.DailyEventListMapAB)) return false;
      if (!DailyEventListMapABPatch.Equals(other.DailyEventListMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= DailyEventListMap.GetHashCode();
      hash ^= DailyEventListMapAB.GetHashCode();
      hash ^= DailyEventListMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dailyEventListMap_.WriteTo(output, _map_dailyEventListMap_codec);
      dailyEventListMapAB_.WriteTo(output, _map_dailyEventListMapAB_codec);
      dailyEventListMapABPatch_.WriteTo(output, _map_dailyEventListMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dailyEventListMap_.WriteTo(ref output, _map_dailyEventListMap_codec);
      dailyEventListMapAB_.WriteTo(ref output, _map_dailyEventListMapAB_codec);
      dailyEventListMapABPatch_.WriteTo(ref output, _map_dailyEventListMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dailyEventListMap_.CalculateSize(_map_dailyEventListMap_codec);
      size += dailyEventListMapAB_.CalculateSize(_map_dailyEventListMapAB_codec);
      size += dailyEventListMapABPatch_.CalculateSize(_map_dailyEventListMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyEventListConf other) {
      if (other == null) {
        return;
      }
      dailyEventListMap_.Add(other.dailyEventListMap_);
      dailyEventListMapAB_.Add(other.dailyEventListMapAB_);
      dailyEventListMapABPatch_.Add(other.dailyEventListMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dailyEventListMap_.AddEntriesFrom(input, _map_dailyEventListMap_codec);
            break;
          }
          case 18: {
            dailyEventListMapAB_.AddEntriesFrom(input, _map_dailyEventListMapAB_codec);
            break;
          }
          case 26: {
            dailyEventListMapABPatch_.AddEntriesFrom(input, _map_dailyEventListMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dailyEventListMap_.AddEntriesFrom(ref input, _map_dailyEventListMap_codec);
            break;
          }
          case 18: {
            dailyEventListMapAB_.AddEntriesFrom(ref input, _map_dailyEventListMapAB_codec);
            break;
          }
          case 26: {
            dailyEventListMapABPatch_.AddEntriesFrom(ref input, _map_dailyEventListMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
