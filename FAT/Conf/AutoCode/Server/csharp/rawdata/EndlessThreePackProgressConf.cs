// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EndlessThreePackProgressConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EndlessThreePackProgressConf.proto</summary>
  public static partial class EndlessThreePackProgressConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EndlessThreePackProgressConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EndlessThreePackProgressConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CipyYXdkYXRhL0VuZGxlc3NUaHJlZVBhY2tQcm9ncmVzc0NvbmYucHJvdG8S",
            "B3Jhd2RhdGEiVAoYRW5kbGVzc1RocmVlUGFja1Byb2dyZXNzEgoKAmlkGAEg",
            "ASgFEhQKDHByb2dyZXNzTm9kZRgCIAMoBRIWCg5wcm9ncmVzc1Jld2FyZBgD",
            "IAMoCSL+AQoiRW5kbGVzc1RocmVlUGFja1Byb2dyZXNzTWFwQUJWYWx1ZRJx",
            "ChtFbmRsZXNzVGhyZWVQYWNrUHJvZ3Jlc3NNYXAYASADKAsyTC5yYXdkYXRh",
            "LkVuZGxlc3NUaHJlZVBhY2tQcm9ncmVzc01hcEFCVmFsdWUuRW5kbGVzc1Ro",
            "cmVlUGFja1Byb2dyZXNzTWFwRW50cnkaZQogRW5kbGVzc1RocmVlUGFja1By",
            "b2dyZXNzTWFwRW50cnkSCwoDa2V5GAEgASgFEjAKBXZhbHVlGAIgASgLMiEu",
            "cmF3ZGF0YS5FbmRsZXNzVGhyZWVQYWNrUHJvZ3Jlc3M6AjgBIskFChxFbmRs",
            "ZXNzVGhyZWVQYWNrUHJvZ3Jlc3NDb25mEmsKG0VuZGxlc3NUaHJlZVBhY2tQ",
            "cm9ncmVzc01hcBgBIAMoCzJGLnJhd2RhdGEuRW5kbGVzc1RocmVlUGFja1By",
            "b2dyZXNzQ29uZi5FbmRsZXNzVGhyZWVQYWNrUHJvZ3Jlc3NNYXBFbnRyeRJv",
            "Ch1FbmRsZXNzVGhyZWVQYWNrUHJvZ3Jlc3NNYXBBQhgCIAMoCzJILnJhd2Rh",
            "dGEuRW5kbGVzc1RocmVlUGFja1Byb2dyZXNzQ29uZi5FbmRsZXNzVGhyZWVQ",
            "YWNrUHJvZ3Jlc3NNYXBBQkVudHJ5EnkKIkVuZGxlc3NUaHJlZVBhY2tQcm9n",
            "cmVzc01hcEFCUGF0Y2gYAyADKAsyTS5yYXdkYXRhLkVuZGxlc3NUaHJlZVBh",
            "Y2tQcm9ncmVzc0NvbmYuRW5kbGVzc1RocmVlUGFja1Byb2dyZXNzTWFwQUJQ",
            "YXRjaEVudHJ5GmUKIEVuZGxlc3NUaHJlZVBhY2tQcm9ncmVzc01hcEVudHJ5",
            "EgsKA2tleRgBIAEoBRIwCgV2YWx1ZRgCIAEoCzIhLnJhd2RhdGEuRW5kbGVz",
            "c1RocmVlUGFja1Byb2dyZXNzOgI4ARpxCiJFbmRsZXNzVGhyZWVQYWNrUHJv",
            "Z3Jlc3NNYXBBQkVudHJ5EgsKA2tleRgBIAEoCRI6CgV2YWx1ZRgCIAEoCzIr",
            "LnJhd2RhdGEuRW5kbGVzc1RocmVlUGFja1Byb2dyZXNzTWFwQUJWYWx1ZToC",
            "OAEadgonRW5kbGVzc1RocmVlUGFja1Byb2dyZXNzTWFwQUJQYXRjaEVudHJ5",
            "EgsKA2tleRgBIAEoCRI6CgV2YWx1ZRgCIAEoCzIrLnJhd2RhdGEuRW5kbGVz",
            "c1RocmVlUGFja1Byb2dyZXNzTWFwQUJWYWx1ZToCOAFCPVotZ2l0bGFiLmZ1",
            "bnBsdXMuaW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdkYXRhqgILZmF0LnJh",
            "d2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EndlessThreePackProgress), global::fat.rawdata.EndlessThreePackProgress.Parser, new[]{ "Id", "ProgressNode", "ProgressReward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EndlessThreePackProgressMapABValue), global::fat.rawdata.EndlessThreePackProgressMapABValue.Parser, new[]{ "EndlessThreePackProgressMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EndlessThreePackProgressConf), global::fat.rawdata.EndlessThreePackProgressConf.Parser, new[]{ "EndlessThreePackProgressMap", "EndlessThreePackProgressMapAB", "EndlessThreePackProgressMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EndlessThreePackProgress",table="EndlessThreePackProgressMap",table_wrapper="EndlessThreePackProgressConf",map="true",map_key_type="int32",data="EndlessThreePackProgressConf")
  /// annotation@ab(table_ab="EndlessThreePackProgressMapAB",table_ab_patch="EndlessThreePackProgressMapABPatch",table_ab_value="EndlessThreePackProgressMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EndlessThreePackProgress(id="id")
  /// </summary>
  public sealed partial class EndlessThreePackProgress : pb::IMessage<EndlessThreePackProgress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EndlessThreePackProgress> _parser = new pb::MessageParser<EndlessThreePackProgress>(() => new EndlessThreePackProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndlessThreePackProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EndlessThreePackProgressConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePackProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePackProgress(EndlessThreePackProgress other) : this() {
      id_ = other.id_;
      progressNode_ = other.progressNode_.Clone();
      progressReward_ = other.progressReward_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePackProgress Clone() {
      return new EndlessThreePackProgress(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 进度条配置id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "progressNode" field.</summary>
    public const int ProgressNodeFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_progressNode_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> progressNode_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 各奖励节点所需token数量
    /// （位数即总节点数）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ProgressNode {
      get { return progressNode_; }
    }

    /// <summary>Field number for the "progressReward" field.</summary>
    public const int ProgressRewardFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_progressReward_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> progressReward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 各节点具体奖励
    /// （奖励id:数量,...）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ProgressReward {
      get { return progressReward_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndlessThreePackProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndlessThreePackProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!progressNode_.Equals(other.progressNode_)) return false;
      if(!progressReward_.Equals(other.progressReward_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= progressNode_.GetHashCode();
      hash ^= progressReward_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      progressNode_.WriteTo(output, _repeated_progressNode_codec);
      progressReward_.WriteTo(output, _repeated_progressReward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      progressNode_.WriteTo(ref output, _repeated_progressNode_codec);
      progressReward_.WriteTo(ref output, _repeated_progressReward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += progressNode_.CalculateSize(_repeated_progressNode_codec);
      size += progressReward_.CalculateSize(_repeated_progressReward_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndlessThreePackProgress other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      progressNode_.Add(other.progressNode_);
      progressReward_.Add(other.progressReward_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            progressNode_.AddEntriesFrom(input, _repeated_progressNode_codec);
            break;
          }
          case 26: {
            progressReward_.AddEntriesFrom(input, _repeated_progressReward_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            progressNode_.AddEntriesFrom(ref input, _repeated_progressNode_codec);
            break;
          }
          case 26: {
            progressReward_.AddEntriesFrom(ref input, _repeated_progressReward_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EndlessThreePackProgressMapABValue : pb::IMessage<EndlessThreePackProgressMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EndlessThreePackProgressMapABValue> _parser = new pb::MessageParser<EndlessThreePackProgressMapABValue>(() => new EndlessThreePackProgressMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndlessThreePackProgressMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EndlessThreePackProgressConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePackProgressMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePackProgressMapABValue(EndlessThreePackProgressMapABValue other) : this() {
      endlessThreePackProgressMap_ = other.endlessThreePackProgressMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePackProgressMapABValue Clone() {
      return new EndlessThreePackProgressMapABValue(this);
    }

    /// <summary>Field number for the "EndlessThreePackProgressMap" field.</summary>
    public const int EndlessThreePackProgressMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EndlessThreePackProgress>.Codec _map_endlessThreePackProgressMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EndlessThreePackProgress>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EndlessThreePackProgress.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EndlessThreePackProgress> endlessThreePackProgressMap_ = new pbc::MapField<int, global::fat.rawdata.EndlessThreePackProgress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EndlessThreePackProgress> EndlessThreePackProgressMap {
      get { return endlessThreePackProgressMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndlessThreePackProgressMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndlessThreePackProgressMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EndlessThreePackProgressMap.Equals(other.EndlessThreePackProgressMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EndlessThreePackProgressMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      endlessThreePackProgressMap_.WriteTo(output, _map_endlessThreePackProgressMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      endlessThreePackProgressMap_.WriteTo(ref output, _map_endlessThreePackProgressMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += endlessThreePackProgressMap_.CalculateSize(_map_endlessThreePackProgressMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndlessThreePackProgressMapABValue other) {
      if (other == null) {
        return;
      }
      endlessThreePackProgressMap_.Add(other.endlessThreePackProgressMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            endlessThreePackProgressMap_.AddEntriesFrom(input, _map_endlessThreePackProgressMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            endlessThreePackProgressMap_.AddEntriesFrom(ref input, _map_endlessThreePackProgressMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EndlessThreePackProgressConf : pb::IMessage<EndlessThreePackProgressConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EndlessThreePackProgressConf> _parser = new pb::MessageParser<EndlessThreePackProgressConf>(() => new EndlessThreePackProgressConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndlessThreePackProgressConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EndlessThreePackProgressConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePackProgressConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePackProgressConf(EndlessThreePackProgressConf other) : this() {
      endlessThreePackProgressMap_ = other.endlessThreePackProgressMap_.Clone();
      endlessThreePackProgressMapAB_ = other.endlessThreePackProgressMapAB_.Clone();
      endlessThreePackProgressMapABPatch_ = other.endlessThreePackProgressMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePackProgressConf Clone() {
      return new EndlessThreePackProgressConf(this);
    }

    /// <summary>Field number for the "EndlessThreePackProgressMap" field.</summary>
    public const int EndlessThreePackProgressMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EndlessThreePackProgress>.Codec _map_endlessThreePackProgressMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EndlessThreePackProgress>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EndlessThreePackProgress.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EndlessThreePackProgress> endlessThreePackProgressMap_ = new pbc::MapField<int, global::fat.rawdata.EndlessThreePackProgress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EndlessThreePackProgress> EndlessThreePackProgressMap {
      get { return endlessThreePackProgressMap_; }
    }

    /// <summary>Field number for the "EndlessThreePackProgressMapAB" field.</summary>
    public const int EndlessThreePackProgressMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EndlessThreePackProgressMapABValue>.Codec _map_endlessThreePackProgressMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EndlessThreePackProgressMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EndlessThreePackProgressMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EndlessThreePackProgressMapABValue> endlessThreePackProgressMapAB_ = new pbc::MapField<string, global::fat.rawdata.EndlessThreePackProgressMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EndlessThreePackProgressMapABValue> EndlessThreePackProgressMapAB {
      get { return endlessThreePackProgressMapAB_; }
    }

    /// <summary>Field number for the "EndlessThreePackProgressMapABPatch" field.</summary>
    public const int EndlessThreePackProgressMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EndlessThreePackProgressMapABValue>.Codec _map_endlessThreePackProgressMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EndlessThreePackProgressMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EndlessThreePackProgressMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EndlessThreePackProgressMapABValue> endlessThreePackProgressMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EndlessThreePackProgressMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EndlessThreePackProgressMapABValue> EndlessThreePackProgressMapABPatch {
      get { return endlessThreePackProgressMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndlessThreePackProgressConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndlessThreePackProgressConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EndlessThreePackProgressMap.Equals(other.EndlessThreePackProgressMap)) return false;
      if (!EndlessThreePackProgressMapAB.Equals(other.EndlessThreePackProgressMapAB)) return false;
      if (!EndlessThreePackProgressMapABPatch.Equals(other.EndlessThreePackProgressMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EndlessThreePackProgressMap.GetHashCode();
      hash ^= EndlessThreePackProgressMapAB.GetHashCode();
      hash ^= EndlessThreePackProgressMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      endlessThreePackProgressMap_.WriteTo(output, _map_endlessThreePackProgressMap_codec);
      endlessThreePackProgressMapAB_.WriteTo(output, _map_endlessThreePackProgressMapAB_codec);
      endlessThreePackProgressMapABPatch_.WriteTo(output, _map_endlessThreePackProgressMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      endlessThreePackProgressMap_.WriteTo(ref output, _map_endlessThreePackProgressMap_codec);
      endlessThreePackProgressMapAB_.WriteTo(ref output, _map_endlessThreePackProgressMapAB_codec);
      endlessThreePackProgressMapABPatch_.WriteTo(ref output, _map_endlessThreePackProgressMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += endlessThreePackProgressMap_.CalculateSize(_map_endlessThreePackProgressMap_codec);
      size += endlessThreePackProgressMapAB_.CalculateSize(_map_endlessThreePackProgressMapAB_codec);
      size += endlessThreePackProgressMapABPatch_.CalculateSize(_map_endlessThreePackProgressMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndlessThreePackProgressConf other) {
      if (other == null) {
        return;
      }
      endlessThreePackProgressMap_.Add(other.endlessThreePackProgressMap_);
      endlessThreePackProgressMapAB_.Add(other.endlessThreePackProgressMapAB_);
      endlessThreePackProgressMapABPatch_.Add(other.endlessThreePackProgressMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            endlessThreePackProgressMap_.AddEntriesFrom(input, _map_endlessThreePackProgressMap_codec);
            break;
          }
          case 18: {
            endlessThreePackProgressMapAB_.AddEntriesFrom(input, _map_endlessThreePackProgressMapAB_codec);
            break;
          }
          case 26: {
            endlessThreePackProgressMapABPatch_.AddEntriesFrom(input, _map_endlessThreePackProgressMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            endlessThreePackProgressMap_.AddEntriesFrom(ref input, _map_endlessThreePackProgressMap_codec);
            break;
          }
          case 18: {
            endlessThreePackProgressMapAB_.AddEntriesFrom(ref input, _map_endlessThreePackProgressMapAB_codec);
            break;
          }
          case 26: {
            endlessThreePackProgressMapABPatch_.AddEntriesFrom(ref input, _map_endlessThreePackProgressMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
