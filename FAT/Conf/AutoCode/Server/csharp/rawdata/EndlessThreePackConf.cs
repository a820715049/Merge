// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EndlessThreePackConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EndlessThreePackConf.proto</summary>
  public static partial class EndlessThreePackConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EndlessThreePackConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EndlessThreePackConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJyYXdkYXRhL0VuZGxlc3NUaHJlZVBhY2tDb25mLnByb3RvEgdyYXdkYXRh",
            "IpEBChBFbmRsZXNzVGhyZWVQYWNrEgoKAmlkGAEgASgFEhAKCGN5Y2xlTnVt",
            "GAIgASgFEhAKCGRldGFpbGlkGAMgAygFEhIKCmV2ZW50VGhlbWUYBCABKAUS",
            "EAoIcHJvZ3Jlc3MYBiABKAUSFgoOc3RhcnRMb29wUGtnSWQYBSABKAUSDwoH",
            "dG9rZW5JZBgHIAEoBSLOAQoaRW5kbGVzc1RocmVlUGFja01hcEFCVmFsdWUS",
            "WQoTRW5kbGVzc1RocmVlUGFja01hcBgBIAMoCzI8LnJhd2RhdGEuRW5kbGVz",
            "c1RocmVlUGFja01hcEFCVmFsdWUuRW5kbGVzc1RocmVlUGFja01hcEVudHJ5",
            "GlUKGEVuZGxlc3NUaHJlZVBhY2tNYXBFbnRyeRILCgNrZXkYASABKAUSKAoF",
            "dmFsdWUYAiABKAsyGS5yYXdkYXRhLkVuZGxlc3NUaHJlZVBhY2s6AjgBIskE",
            "ChRFbmRsZXNzVGhyZWVQYWNrQ29uZhJTChNFbmRsZXNzVGhyZWVQYWNrTWFw",
            "GAEgAygLMjYucmF3ZGF0YS5FbmRsZXNzVGhyZWVQYWNrQ29uZi5FbmRsZXNz",
            "VGhyZWVQYWNrTWFwRW50cnkSVwoVRW5kbGVzc1RocmVlUGFja01hcEFCGAIg",
            "AygLMjgucmF3ZGF0YS5FbmRsZXNzVGhyZWVQYWNrQ29uZi5FbmRsZXNzVGhy",
            "ZWVQYWNrTWFwQUJFbnRyeRJhChpFbmRsZXNzVGhyZWVQYWNrTWFwQUJQYXRj",
            "aBgDIAMoCzI9LnJhd2RhdGEuRW5kbGVzc1RocmVlUGFja0NvbmYuRW5kbGVz",
            "c1RocmVlUGFja01hcEFCUGF0Y2hFbnRyeRpVChhFbmRsZXNzVGhyZWVQYWNr",
            "TWFwRW50cnkSCwoDa2V5GAEgASgFEigKBXZhbHVlGAIgASgLMhkucmF3ZGF0",
            "YS5FbmRsZXNzVGhyZWVQYWNrOgI4ARphChpFbmRsZXNzVGhyZWVQYWNrTWFw",
            "QUJFbnRyeRILCgNrZXkYASABKAkSMgoFdmFsdWUYAiABKAsyIy5yYXdkYXRh",
            "LkVuZGxlc3NUaHJlZVBhY2tNYXBBQlZhbHVlOgI4ARpmCh9FbmRsZXNzVGhy",
            "ZWVQYWNrTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIyCgV2YWx1ZRgC",
            "IAEoCzIjLnJhd2RhdGEuRW5kbGVzc1RocmVlUGFja01hcEFCVmFsdWU6AjgB",
            "Qj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3",
            "ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EndlessThreePack), global::fat.rawdata.EndlessThreePack.Parser, new[]{ "Id", "CycleNum", "Detailid", "EventTheme", "Progress", "StartLoopPkgId", "TokenId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EndlessThreePackMapABValue), global::fat.rawdata.EndlessThreePackMapABValue.Parser, new[]{ "EndlessThreePackMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EndlessThreePackConf), global::fat.rawdata.EndlessThreePackConf.Parser, new[]{ "EndlessThreePackMap", "EndlessThreePackMapAB", "EndlessThreePackMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EndlessThreePack",table="EndlessThreePackMap",table_wrapper="EndlessThreePackConf",map="true",map_key_type="int32",data="EndlessThreePackConf")
  /// annotation@ab(table_ab="EndlessThreePackMapAB",table_ab_patch="EndlessThreePackMapABPatch",table_ab_value="EndlessThreePackMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EndlessThreePack(id="id")
  /// </summary>
  public sealed partial class EndlessThreePack : pb::IMessage<EndlessThreePack>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EndlessThreePack> _parser = new pb::MessageParser<EndlessThreePack>(() => new EndlessThreePack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndlessThreePack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EndlessThreePackConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePack(EndlessThreePack other) : this() {
      id_ = other.id_;
      cycleNum_ = other.cycleNum_;
      detailid_ = other.detailid_.Clone();
      eventTheme_ = other.eventTheme_;
      progress_ = other.progress_;
      startLoopPkgId_ = other.startLoopPkgId_;
      tokenId_ = other.tokenId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePack Clone() {
      return new EndlessThreePack(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 模板ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cycleNum" field.</summary>
    public const int CycleNumFieldNumber = 2;
    private int cycleNum_;
    /// <summary>
    /// 循环次数=目标循环-1
    /// 配-1的时候认为是无限循环
    /// 不配(程序认为是配0)的时候 是只有一轮
    /// 配N, N大于0时 是有1+N轮
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CycleNum {
      get { return cycleNum_; }
      set {
        cycleNum_ = value;
      }
    }

    /// <summary>Field number for the "detailid" field.</summary>
    public const int DetailidFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_detailid_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> detailid_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 礼包详情id(填写顺序决定出现顺序)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Detailid {
      get { return detailid_; }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 4;
    private int eventTheme_;
    /// <summary>
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 6;
    private int progress_;
    /// <summary>
    /// 进度条详情
    /// (受档位组控制)
    /// （GradeIndexMapping.id）
    /// （EndlessThreeProgress.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "startLoopPkgId" field.</summary>
    public const int StartLoopPkgIdFieldNumber = 5;
    private int startLoopPkgId_;
    /// <summary>
    /// 从哪个礼包开始循环
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartLoopPkgId {
      get { return startLoopPkgId_; }
      set {
        startLoopPkgId_ = value;
      }
    }

    /// <summary>Field number for the "tokenId" field.</summary>
    public const int TokenIdFieldNumber = 7;
    private int tokenId_;
    /// <summary>
    /// 进度值id
    /// （进度条版本）
    /// (ObjToken.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TokenId {
      get { return tokenId_; }
      set {
        tokenId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndlessThreePack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndlessThreePack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CycleNum != other.CycleNum) return false;
      if(!detailid_.Equals(other.detailid_)) return false;
      if (EventTheme != other.EventTheme) return false;
      if (Progress != other.Progress) return false;
      if (StartLoopPkgId != other.StartLoopPkgId) return false;
      if (TokenId != other.TokenId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (CycleNum != 0) hash ^= CycleNum.GetHashCode();
      hash ^= detailid_.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (Progress != 0) hash ^= Progress.GetHashCode();
      if (StartLoopPkgId != 0) hash ^= StartLoopPkgId.GetHashCode();
      if (TokenId != 0) hash ^= TokenId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CycleNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CycleNum);
      }
      detailid_.WriteTo(output, _repeated_detailid_codec);
      if (EventTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventTheme);
      }
      if (StartLoopPkgId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(StartLoopPkgId);
      }
      if (Progress != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Progress);
      }
      if (TokenId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TokenId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CycleNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CycleNum);
      }
      detailid_.WriteTo(ref output, _repeated_detailid_codec);
      if (EventTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventTheme);
      }
      if (StartLoopPkgId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(StartLoopPkgId);
      }
      if (Progress != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Progress);
      }
      if (TokenId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TokenId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (CycleNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CycleNum);
      }
      size += detailid_.CalculateSize(_repeated_detailid_codec);
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      if (StartLoopPkgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartLoopPkgId);
      }
      if (TokenId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TokenId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndlessThreePack other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.CycleNum != 0) {
        CycleNum = other.CycleNum;
      }
      detailid_.Add(other.detailid_);
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      if (other.StartLoopPkgId != 0) {
        StartLoopPkgId = other.StartLoopPkgId;
      }
      if (other.TokenId != 0) {
        TokenId = other.TokenId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            CycleNum = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            detailid_.AddEntriesFrom(input, _repeated_detailid_codec);
            break;
          }
          case 32: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 40: {
            StartLoopPkgId = input.ReadInt32();
            break;
          }
          case 48: {
            Progress = input.ReadInt32();
            break;
          }
          case 56: {
            TokenId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            CycleNum = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            detailid_.AddEntriesFrom(ref input, _repeated_detailid_codec);
            break;
          }
          case 32: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 40: {
            StartLoopPkgId = input.ReadInt32();
            break;
          }
          case 48: {
            Progress = input.ReadInt32();
            break;
          }
          case 56: {
            TokenId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EndlessThreePackMapABValue : pb::IMessage<EndlessThreePackMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EndlessThreePackMapABValue> _parser = new pb::MessageParser<EndlessThreePackMapABValue>(() => new EndlessThreePackMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndlessThreePackMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EndlessThreePackConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePackMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePackMapABValue(EndlessThreePackMapABValue other) : this() {
      endlessThreePackMap_ = other.endlessThreePackMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePackMapABValue Clone() {
      return new EndlessThreePackMapABValue(this);
    }

    /// <summary>Field number for the "EndlessThreePackMap" field.</summary>
    public const int EndlessThreePackMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EndlessThreePack>.Codec _map_endlessThreePackMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EndlessThreePack>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EndlessThreePack.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EndlessThreePack> endlessThreePackMap_ = new pbc::MapField<int, global::fat.rawdata.EndlessThreePack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EndlessThreePack> EndlessThreePackMap {
      get { return endlessThreePackMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndlessThreePackMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndlessThreePackMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EndlessThreePackMap.Equals(other.EndlessThreePackMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EndlessThreePackMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      endlessThreePackMap_.WriteTo(output, _map_endlessThreePackMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      endlessThreePackMap_.WriteTo(ref output, _map_endlessThreePackMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += endlessThreePackMap_.CalculateSize(_map_endlessThreePackMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndlessThreePackMapABValue other) {
      if (other == null) {
        return;
      }
      endlessThreePackMap_.Add(other.endlessThreePackMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            endlessThreePackMap_.AddEntriesFrom(input, _map_endlessThreePackMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            endlessThreePackMap_.AddEntriesFrom(ref input, _map_endlessThreePackMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EndlessThreePackConf : pb::IMessage<EndlessThreePackConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EndlessThreePackConf> _parser = new pb::MessageParser<EndlessThreePackConf>(() => new EndlessThreePackConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndlessThreePackConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EndlessThreePackConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePackConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePackConf(EndlessThreePackConf other) : this() {
      endlessThreePackMap_ = other.endlessThreePackMap_.Clone();
      endlessThreePackMapAB_ = other.endlessThreePackMapAB_.Clone();
      endlessThreePackMapABPatch_ = other.endlessThreePackMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EndlessThreePackConf Clone() {
      return new EndlessThreePackConf(this);
    }

    /// <summary>Field number for the "EndlessThreePackMap" field.</summary>
    public const int EndlessThreePackMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EndlessThreePack>.Codec _map_endlessThreePackMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EndlessThreePack>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EndlessThreePack.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EndlessThreePack> endlessThreePackMap_ = new pbc::MapField<int, global::fat.rawdata.EndlessThreePack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EndlessThreePack> EndlessThreePackMap {
      get { return endlessThreePackMap_; }
    }

    /// <summary>Field number for the "EndlessThreePackMapAB" field.</summary>
    public const int EndlessThreePackMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EndlessThreePackMapABValue>.Codec _map_endlessThreePackMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EndlessThreePackMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EndlessThreePackMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EndlessThreePackMapABValue> endlessThreePackMapAB_ = new pbc::MapField<string, global::fat.rawdata.EndlessThreePackMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EndlessThreePackMapABValue> EndlessThreePackMapAB {
      get { return endlessThreePackMapAB_; }
    }

    /// <summary>Field number for the "EndlessThreePackMapABPatch" field.</summary>
    public const int EndlessThreePackMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EndlessThreePackMapABValue>.Codec _map_endlessThreePackMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EndlessThreePackMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EndlessThreePackMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EndlessThreePackMapABValue> endlessThreePackMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EndlessThreePackMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EndlessThreePackMapABValue> EndlessThreePackMapABPatch {
      get { return endlessThreePackMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EndlessThreePackConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EndlessThreePackConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EndlessThreePackMap.Equals(other.EndlessThreePackMap)) return false;
      if (!EndlessThreePackMapAB.Equals(other.EndlessThreePackMapAB)) return false;
      if (!EndlessThreePackMapABPatch.Equals(other.EndlessThreePackMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EndlessThreePackMap.GetHashCode();
      hash ^= EndlessThreePackMapAB.GetHashCode();
      hash ^= EndlessThreePackMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      endlessThreePackMap_.WriteTo(output, _map_endlessThreePackMap_codec);
      endlessThreePackMapAB_.WriteTo(output, _map_endlessThreePackMapAB_codec);
      endlessThreePackMapABPatch_.WriteTo(output, _map_endlessThreePackMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      endlessThreePackMap_.WriteTo(ref output, _map_endlessThreePackMap_codec);
      endlessThreePackMapAB_.WriteTo(ref output, _map_endlessThreePackMapAB_codec);
      endlessThreePackMapABPatch_.WriteTo(ref output, _map_endlessThreePackMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += endlessThreePackMap_.CalculateSize(_map_endlessThreePackMap_codec);
      size += endlessThreePackMapAB_.CalculateSize(_map_endlessThreePackMapAB_codec);
      size += endlessThreePackMapABPatch_.CalculateSize(_map_endlessThreePackMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EndlessThreePackConf other) {
      if (other == null) {
        return;
      }
      endlessThreePackMap_.Add(other.endlessThreePackMap_);
      endlessThreePackMapAB_.Add(other.endlessThreePackMapAB_);
      endlessThreePackMapABPatch_.Add(other.endlessThreePackMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            endlessThreePackMap_.AddEntriesFrom(input, _map_endlessThreePackMap_codec);
            break;
          }
          case 18: {
            endlessThreePackMapAB_.AddEntriesFrom(input, _map_endlessThreePackMapAB_codec);
            break;
          }
          case 26: {
            endlessThreePackMapABPatch_.AddEntriesFrom(input, _map_endlessThreePackMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            endlessThreePackMap_.AddEntriesFrom(ref input, _map_endlessThreePackMap_codec);
            break;
          }
          case 18: {
            endlessThreePackMapAB_.AddEntriesFrom(ref input, _map_endlessThreePackMapAB_codec);
            break;
          }
          case 26: {
            endlessThreePackMapABPatch_.AddEntriesFrom(ref input, _map_endlessThreePackMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
