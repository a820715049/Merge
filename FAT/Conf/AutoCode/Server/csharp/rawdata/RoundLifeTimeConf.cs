// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/RoundLifeTimeConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/RoundLifeTimeConf.proto</summary>
  public static partial class RoundLifeTimeConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/RoundLifeTimeConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoundLifeTimeConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9yYXdkYXRhL1JvdW5kTGlmZVRpbWVDb25mLnByb3RvEgdyYXdkYXRhIi8K",
            "DVJvdW5kTGlmZVRpbWUSDAoEZnJvbRgBIAEoBRIQCghsaWZlVGltZRgCIAEo",
            "BSJPChlSb3VuZExpZmVUaW1lU2xpY2VBQlZhbHVlEjIKElJvdW5kTGlmZVRp",
            "bWVTbGljZRgBIAMoCzIWLnJhd2RhdGEuUm91bmRMaWZlVGltZSLAAwoRUm91",
            "bmRMaWZlVGltZUNvbmYSMgoSUm91bmRMaWZlVGltZVNsaWNlGAEgAygLMhYu",
            "cmF3ZGF0YS5Sb3VuZExpZmVUaW1lElIKFFJvdW5kTGlmZVRpbWVTbGljZUFC",
            "GAIgAygLMjQucmF3ZGF0YS5Sb3VuZExpZmVUaW1lQ29uZi5Sb3VuZExpZmVU",
            "aW1lU2xpY2VBQkVudHJ5ElwKGVJvdW5kTGlmZVRpbWVTbGljZUFCUGF0Y2gY",
            "AyADKAsyOS5yYXdkYXRhLlJvdW5kTGlmZVRpbWVDb25mLlJvdW5kTGlmZVRp",
            "bWVTbGljZUFCUGF0Y2hFbnRyeRpfChlSb3VuZExpZmVUaW1lU2xpY2VBQkVu",
            "dHJ5EgsKA2tleRgBIAEoCRIxCgV2YWx1ZRgCIAEoCzIiLnJhd2RhdGEuUm91",
            "bmRMaWZlVGltZVNsaWNlQUJWYWx1ZToCOAEaZAoeUm91bmRMaWZlVGltZVNs",
            "aWNlQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIxCgV2YWx1ZRgCIAEoCzIi",
            "LnJhd2RhdGEuUm91bmRMaWZlVGltZVNsaWNlQUJWYWx1ZToCOAFCPVotZ2l0",
            "bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdkYXRhqgIL",
            "ZmF0LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.RoundLifeTime), global::fat.rawdata.RoundLifeTime.Parser, new[]{ "From", "LifeTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.RoundLifeTimeSliceABValue), global::fat.rawdata.RoundLifeTimeSliceABValue.Parser, new[]{ "RoundLifeTimeSlice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.RoundLifeTimeConf), global::fat.rawdata.RoundLifeTimeConf.Parser, new[]{ "RoundLifeTimeSlice", "RoundLifeTimeSliceAB", "RoundLifeTimeSliceABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="RoundLifeTime",table="RoundLifeTimeSlice",table_wrapper="RoundLifeTimeConf",map="false",map_key_type="",data="RoundLifeTimeConf")
  /// annotation@ab(table_ab="RoundLifeTimeSliceAB",table_ab_patch="RoundLifeTimeSliceABPatch",table_ab_value="RoundLifeTimeSliceABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// </summary>
  public sealed partial class RoundLifeTime : pb::IMessage<RoundLifeTime>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundLifeTime> _parser = new pb::MessageParser<RoundLifeTime>(() => new RoundLifeTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundLifeTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.RoundLifeTimeConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundLifeTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundLifeTime(RoundLifeTime other) : this() {
      from_ = other.from_;
      lifeTime_ = other.lifeTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundLifeTime Clone() {
      return new RoundLifeTime(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private int from_;
    /// <summary>
    /// 区间左侧值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "lifeTime" field.</summary>
    public const int LifeTimeFieldNumber = 2;
    private int lifeTime_;
    /// <summary>
    /// 最终生命周期限制时间
    /// （秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LifeTime {
      get { return lifeTime_; }
      set {
        lifeTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundLifeTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundLifeTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (LifeTime != other.LifeTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != 0) hash ^= From.GetHashCode();
      if (LifeTime != 0) hash ^= LifeTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (LifeTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LifeTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (LifeTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LifeTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
      }
      if (LifeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LifeTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundLifeTime other) {
      if (other == null) {
        return;
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.LifeTime != 0) {
        LifeTime = other.LifeTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            LifeTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            LifeTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoundLifeTimeSliceABValue : pb::IMessage<RoundLifeTimeSliceABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundLifeTimeSliceABValue> _parser = new pb::MessageParser<RoundLifeTimeSliceABValue>(() => new RoundLifeTimeSliceABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundLifeTimeSliceABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.RoundLifeTimeConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundLifeTimeSliceABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundLifeTimeSliceABValue(RoundLifeTimeSliceABValue other) : this() {
      roundLifeTimeSlice_ = other.roundLifeTimeSlice_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundLifeTimeSliceABValue Clone() {
      return new RoundLifeTimeSliceABValue(this);
    }

    /// <summary>Field number for the "RoundLifeTimeSlice" field.</summary>
    public const int RoundLifeTimeSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.RoundLifeTime> _repeated_roundLifeTimeSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.RoundLifeTime.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.RoundLifeTime> roundLifeTimeSlice_ = new pbc::RepeatedField<global::fat.rawdata.RoundLifeTime>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.RoundLifeTime> RoundLifeTimeSlice {
      get { return roundLifeTimeSlice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundLifeTimeSliceABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundLifeTimeSliceABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roundLifeTimeSlice_.Equals(other.roundLifeTimeSlice_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roundLifeTimeSlice_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      roundLifeTimeSlice_.WriteTo(output, _repeated_roundLifeTimeSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      roundLifeTimeSlice_.WriteTo(ref output, _repeated_roundLifeTimeSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roundLifeTimeSlice_.CalculateSize(_repeated_roundLifeTimeSlice_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundLifeTimeSliceABValue other) {
      if (other == null) {
        return;
      }
      roundLifeTimeSlice_.Add(other.roundLifeTimeSlice_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roundLifeTimeSlice_.AddEntriesFrom(input, _repeated_roundLifeTimeSlice_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            roundLifeTimeSlice_.AddEntriesFrom(ref input, _repeated_roundLifeTimeSlice_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoundLifeTimeConf : pb::IMessage<RoundLifeTimeConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundLifeTimeConf> _parser = new pb::MessageParser<RoundLifeTimeConf>(() => new RoundLifeTimeConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundLifeTimeConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.RoundLifeTimeConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundLifeTimeConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundLifeTimeConf(RoundLifeTimeConf other) : this() {
      roundLifeTimeSlice_ = other.roundLifeTimeSlice_.Clone();
      roundLifeTimeSliceAB_ = other.roundLifeTimeSliceAB_.Clone();
      roundLifeTimeSliceABPatch_ = other.roundLifeTimeSliceABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundLifeTimeConf Clone() {
      return new RoundLifeTimeConf(this);
    }

    /// <summary>Field number for the "RoundLifeTimeSlice" field.</summary>
    public const int RoundLifeTimeSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.RoundLifeTime> _repeated_roundLifeTimeSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.RoundLifeTime.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.RoundLifeTime> roundLifeTimeSlice_ = new pbc::RepeatedField<global::fat.rawdata.RoundLifeTime>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.RoundLifeTime> RoundLifeTimeSlice {
      get { return roundLifeTimeSlice_; }
    }

    /// <summary>Field number for the "RoundLifeTimeSliceAB" field.</summary>
    public const int RoundLifeTimeSliceABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.RoundLifeTimeSliceABValue>.Codec _map_roundLifeTimeSliceAB_codec
        = new pbc::MapField<string, global::fat.rawdata.RoundLifeTimeSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.RoundLifeTimeSliceABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.RoundLifeTimeSliceABValue> roundLifeTimeSliceAB_ = new pbc::MapField<string, global::fat.rawdata.RoundLifeTimeSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.RoundLifeTimeSliceABValue> RoundLifeTimeSliceAB {
      get { return roundLifeTimeSliceAB_; }
    }

    /// <summary>Field number for the "RoundLifeTimeSliceABPatch" field.</summary>
    public const int RoundLifeTimeSliceABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.RoundLifeTimeSliceABValue>.Codec _map_roundLifeTimeSliceABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.RoundLifeTimeSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.RoundLifeTimeSliceABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.RoundLifeTimeSliceABValue> roundLifeTimeSliceABPatch_ = new pbc::MapField<string, global::fat.rawdata.RoundLifeTimeSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.RoundLifeTimeSliceABValue> RoundLifeTimeSliceABPatch {
      get { return roundLifeTimeSliceABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundLifeTimeConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundLifeTimeConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roundLifeTimeSlice_.Equals(other.roundLifeTimeSlice_)) return false;
      if (!RoundLifeTimeSliceAB.Equals(other.RoundLifeTimeSliceAB)) return false;
      if (!RoundLifeTimeSliceABPatch.Equals(other.RoundLifeTimeSliceABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roundLifeTimeSlice_.GetHashCode();
      hash ^= RoundLifeTimeSliceAB.GetHashCode();
      hash ^= RoundLifeTimeSliceABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      roundLifeTimeSlice_.WriteTo(output, _repeated_roundLifeTimeSlice_codec);
      roundLifeTimeSliceAB_.WriteTo(output, _map_roundLifeTimeSliceAB_codec);
      roundLifeTimeSliceABPatch_.WriteTo(output, _map_roundLifeTimeSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      roundLifeTimeSlice_.WriteTo(ref output, _repeated_roundLifeTimeSlice_codec);
      roundLifeTimeSliceAB_.WriteTo(ref output, _map_roundLifeTimeSliceAB_codec);
      roundLifeTimeSliceABPatch_.WriteTo(ref output, _map_roundLifeTimeSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roundLifeTimeSlice_.CalculateSize(_repeated_roundLifeTimeSlice_codec);
      size += roundLifeTimeSliceAB_.CalculateSize(_map_roundLifeTimeSliceAB_codec);
      size += roundLifeTimeSliceABPatch_.CalculateSize(_map_roundLifeTimeSliceABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundLifeTimeConf other) {
      if (other == null) {
        return;
      }
      roundLifeTimeSlice_.Add(other.roundLifeTimeSlice_);
      roundLifeTimeSliceAB_.Add(other.roundLifeTimeSliceAB_);
      roundLifeTimeSliceABPatch_.Add(other.roundLifeTimeSliceABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roundLifeTimeSlice_.AddEntriesFrom(input, _repeated_roundLifeTimeSlice_codec);
            break;
          }
          case 18: {
            roundLifeTimeSliceAB_.AddEntriesFrom(input, _map_roundLifeTimeSliceAB_codec);
            break;
          }
          case 26: {
            roundLifeTimeSliceABPatch_.AddEntriesFrom(input, _map_roundLifeTimeSliceABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            roundLifeTimeSlice_.AddEntriesFrom(ref input, _repeated_roundLifeTimeSlice_codec);
            break;
          }
          case 18: {
            roundLifeTimeSliceAB_.AddEntriesFrom(ref input, _map_roundLifeTimeSliceAB_codec);
            break;
          }
          case 26: {
            roundLifeTimeSliceABPatch_.AddEntriesFrom(ref input, _map_roundLifeTimeSliceABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
