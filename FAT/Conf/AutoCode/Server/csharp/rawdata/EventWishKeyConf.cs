// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventWishKeyConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventWishKeyConf.proto</summary>
  public static partial class EventWishKeyConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventWishKeyConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventWishKeyConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5yYXdkYXRhL0V2ZW50V2lzaEtleUNvbmYucHJvdG8SB3Jhd2RhdGEiJwoM",
            "RXZlbnRXaXNoS2V5EgoKAmlkGAEgASgFEgsKA2tleRgCIAEoCSK2AQoWRXZl",
            "bnRXaXNoS2V5TWFwQUJWYWx1ZRJNCg9FdmVudFdpc2hLZXlNYXAYASADKAsy",
            "NC5yYXdkYXRhLkV2ZW50V2lzaEtleU1hcEFCVmFsdWUuRXZlbnRXaXNoS2V5",
            "TWFwRW50cnkaTQoURXZlbnRXaXNoS2V5TWFwRW50cnkSCwoDa2V5GAEgASgF",
            "EiQKBXZhbHVlGAIgASgLMhUucmF3ZGF0YS5FdmVudFdpc2hLZXk6AjgBIokE",
            "ChBFdmVudFdpc2hLZXlDb25mEkcKD0V2ZW50V2lzaEtleU1hcBgBIAMoCzIu",
            "LnJhd2RhdGEuRXZlbnRXaXNoS2V5Q29uZi5FdmVudFdpc2hLZXlNYXBFbnRy",
            "eRJLChFFdmVudFdpc2hLZXlNYXBBQhgCIAMoCzIwLnJhd2RhdGEuRXZlbnRX",
            "aXNoS2V5Q29uZi5FdmVudFdpc2hLZXlNYXBBQkVudHJ5ElUKFkV2ZW50V2lz",
            "aEtleU1hcEFCUGF0Y2gYAyADKAsyNS5yYXdkYXRhLkV2ZW50V2lzaEtleUNv",
            "bmYuRXZlbnRXaXNoS2V5TWFwQUJQYXRjaEVudHJ5Gk0KFEV2ZW50V2lzaEtl",
            "eU1hcEVudHJ5EgsKA2tleRgBIAEoBRIkCgV2YWx1ZRgCIAEoCzIVLnJhd2Rh",
            "dGEuRXZlbnRXaXNoS2V5OgI4ARpZChZFdmVudFdpc2hLZXlNYXBBQkVudHJ5",
            "EgsKA2tleRgBIAEoCRIuCgV2YWx1ZRgCIAEoCzIfLnJhd2RhdGEuRXZlbnRX",
            "aXNoS2V5TWFwQUJWYWx1ZToCOAEaXgobRXZlbnRXaXNoS2V5TWFwQUJQYXRj",
            "aEVudHJ5EgsKA2tleRgBIAEoCRIuCgV2YWx1ZRgCIAEoCzIfLnJhd2RhdGEu",
            "RXZlbnRXaXNoS2V5TWFwQUJWYWx1ZToCOAFCPVotZ2l0bGFiLmZ1bnBsdXMu",
            "aW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdkYXRhqgILZmF0LnJhd2RhdGFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventWishKey), global::fat.rawdata.EventWishKey.Parser, new[]{ "Id", "Key" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventWishKeyMapABValue), global::fat.rawdata.EventWishKeyMapABValue.Parser, new[]{ "EventWishKeyMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventWishKeyConf), global::fat.rawdata.EventWishKeyConf.Parser, new[]{ "EventWishKeyMap", "EventWishKeyMapAB", "EventWishKeyMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventWishKey",table="EventWishKeyMap",table_wrapper="EventWishKeyConf",map="true",map_key_type="int32",data="EventWishKeyConf")
  /// annotation@ab(table_ab="EventWishKeyMapAB",table_ab_patch="EventWishKeyMapABPatch",table_ab_value="EventWishKeyMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventWishKey(id="id")
  /// </summary>
  public sealed partial class EventWishKey : pb::IMessage<EventWishKey>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventWishKey> _parser = new pb::MessageParser<EventWishKey>(() => new EventWishKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventWishKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventWishKeyConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishKey(EventWishKey other) : this() {
      id_ = other.id_;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishKey Clone() {
      return new EventWishKey(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// 文本 key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventWishKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventWishKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventWishKey other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventWishKeyMapABValue : pb::IMessage<EventWishKeyMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventWishKeyMapABValue> _parser = new pb::MessageParser<EventWishKeyMapABValue>(() => new EventWishKeyMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventWishKeyMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventWishKeyConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishKeyMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishKeyMapABValue(EventWishKeyMapABValue other) : this() {
      eventWishKeyMap_ = other.eventWishKeyMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishKeyMapABValue Clone() {
      return new EventWishKeyMapABValue(this);
    }

    /// <summary>Field number for the "EventWishKeyMap" field.</summary>
    public const int EventWishKeyMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventWishKey>.Codec _map_eventWishKeyMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventWishKey>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventWishKey.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventWishKey> eventWishKeyMap_ = new pbc::MapField<int, global::fat.rawdata.EventWishKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventWishKey> EventWishKeyMap {
      get { return eventWishKeyMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventWishKeyMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventWishKeyMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventWishKeyMap.Equals(other.EventWishKeyMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventWishKeyMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventWishKeyMap_.WriteTo(output, _map_eventWishKeyMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventWishKeyMap_.WriteTo(ref output, _map_eventWishKeyMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventWishKeyMap_.CalculateSize(_map_eventWishKeyMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventWishKeyMapABValue other) {
      if (other == null) {
        return;
      }
      eventWishKeyMap_.Add(other.eventWishKeyMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventWishKeyMap_.AddEntriesFrom(input, _map_eventWishKeyMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventWishKeyMap_.AddEntriesFrom(ref input, _map_eventWishKeyMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventWishKeyConf : pb::IMessage<EventWishKeyConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventWishKeyConf> _parser = new pb::MessageParser<EventWishKeyConf>(() => new EventWishKeyConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventWishKeyConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventWishKeyConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishKeyConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishKeyConf(EventWishKeyConf other) : this() {
      eventWishKeyMap_ = other.eventWishKeyMap_.Clone();
      eventWishKeyMapAB_ = other.eventWishKeyMapAB_.Clone();
      eventWishKeyMapABPatch_ = other.eventWishKeyMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishKeyConf Clone() {
      return new EventWishKeyConf(this);
    }

    /// <summary>Field number for the "EventWishKeyMap" field.</summary>
    public const int EventWishKeyMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventWishKey>.Codec _map_eventWishKeyMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventWishKey>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventWishKey.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventWishKey> eventWishKeyMap_ = new pbc::MapField<int, global::fat.rawdata.EventWishKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventWishKey> EventWishKeyMap {
      get { return eventWishKeyMap_; }
    }

    /// <summary>Field number for the "EventWishKeyMapAB" field.</summary>
    public const int EventWishKeyMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventWishKeyMapABValue>.Codec _map_eventWishKeyMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventWishKeyMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventWishKeyMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventWishKeyMapABValue> eventWishKeyMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventWishKeyMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventWishKeyMapABValue> EventWishKeyMapAB {
      get { return eventWishKeyMapAB_; }
    }

    /// <summary>Field number for the "EventWishKeyMapABPatch" field.</summary>
    public const int EventWishKeyMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventWishKeyMapABValue>.Codec _map_eventWishKeyMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventWishKeyMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventWishKeyMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventWishKeyMapABValue> eventWishKeyMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventWishKeyMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventWishKeyMapABValue> EventWishKeyMapABPatch {
      get { return eventWishKeyMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventWishKeyConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventWishKeyConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventWishKeyMap.Equals(other.EventWishKeyMap)) return false;
      if (!EventWishKeyMapAB.Equals(other.EventWishKeyMapAB)) return false;
      if (!EventWishKeyMapABPatch.Equals(other.EventWishKeyMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventWishKeyMap.GetHashCode();
      hash ^= EventWishKeyMapAB.GetHashCode();
      hash ^= EventWishKeyMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventWishKeyMap_.WriteTo(output, _map_eventWishKeyMap_codec);
      eventWishKeyMapAB_.WriteTo(output, _map_eventWishKeyMapAB_codec);
      eventWishKeyMapABPatch_.WriteTo(output, _map_eventWishKeyMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventWishKeyMap_.WriteTo(ref output, _map_eventWishKeyMap_codec);
      eventWishKeyMapAB_.WriteTo(ref output, _map_eventWishKeyMapAB_codec);
      eventWishKeyMapABPatch_.WriteTo(ref output, _map_eventWishKeyMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventWishKeyMap_.CalculateSize(_map_eventWishKeyMap_codec);
      size += eventWishKeyMapAB_.CalculateSize(_map_eventWishKeyMapAB_codec);
      size += eventWishKeyMapABPatch_.CalculateSize(_map_eventWishKeyMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventWishKeyConf other) {
      if (other == null) {
        return;
      }
      eventWishKeyMap_.Add(other.eventWishKeyMap_);
      eventWishKeyMapAB_.Add(other.eventWishKeyMapAB_);
      eventWishKeyMapABPatch_.Add(other.eventWishKeyMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventWishKeyMap_.AddEntriesFrom(input, _map_eventWishKeyMap_codec);
            break;
          }
          case 18: {
            eventWishKeyMapAB_.AddEntriesFrom(input, _map_eventWishKeyMapAB_codec);
            break;
          }
          case 26: {
            eventWishKeyMapABPatch_.AddEntriesFrom(input, _map_eventWishKeyMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventWishKeyMap_.AddEntriesFrom(ref input, _map_eventWishKeyMap_codec);
            break;
          }
          case 18: {
            eventWishKeyMapAB_.AddEntriesFrom(ref input, _map_eventWishKeyMapAB_codec);
            break;
          }
          case 26: {
            eventWishKeyMapABPatch_.AddEntriesFrom(ref input, _map_eventWishKeyMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
