// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventThemeConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventThemeConf.proto</summary>
  public static partial class EventThemeConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventThemeConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventThemeConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxyYXdkYXRhL0V2ZW50VGhlbWVDb25mLnByb3RvEgdyYXdkYXRhIqADCgpF",
            "dmVudFRoZW1lEgoKAmlkGAEgASgFEjUKCWFzc2V0SW5mbxgCIAMoCzIiLnJh",
            "d2RhdGEuRXZlbnRUaGVtZS5Bc3NldEluZm9FbnRyeRISCgpiYXNlUHJlZmFi",
            "GAMgASgJEhIKCmVudHJhbmNlSWQYBCABKAUSFQoNZW50cmFuY2VJbWFnZRgF",
            "IAEoCRIPCgdwb3B1cElkGAYgASgFEjUKCXN0eWxlSW5mbxgHIAMoCzIiLnJh",
            "d2RhdGEuRXZlbnRUaGVtZS5TdHlsZUluZm9FbnRyeRIzCgh0ZXh0SW5mbxgI",
            "IAMoCzIhLnJhd2RhdGEuRXZlbnRUaGVtZS5UZXh0SW5mb0VudHJ5GjAKDkFz",
            "c2V0SW5mb0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEa",
            "MAoOU3R5bGVJbmZvRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJ",
            "OgI4ARovCg1UZXh0SW5mb0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoCToCOAEiqgEKFEV2ZW50VGhlbWVNYXBBQlZhbHVlEkcKDUV2ZW50VGhl",
            "bWVNYXAYASADKAsyMC5yYXdkYXRhLkV2ZW50VGhlbWVNYXBBQlZhbHVlLkV2",
            "ZW50VGhlbWVNYXBFbnRyeRpJChJFdmVudFRoZW1lTWFwRW50cnkSCwoDa2V5",
            "GAEgASgFEiIKBXZhbHVlGAIgASgLMhMucmF3ZGF0YS5FdmVudFRoZW1lOgI4",
            "ASLpAwoORXZlbnRUaGVtZUNvbmYSQQoNRXZlbnRUaGVtZU1hcBgBIAMoCzIq",
            "LnJhd2RhdGEuRXZlbnRUaGVtZUNvbmYuRXZlbnRUaGVtZU1hcEVudHJ5EkUK",
            "D0V2ZW50VGhlbWVNYXBBQhgCIAMoCzIsLnJhd2RhdGEuRXZlbnRUaGVtZUNv",
            "bmYuRXZlbnRUaGVtZU1hcEFCRW50cnkSTwoURXZlbnRUaGVtZU1hcEFCUGF0",
            "Y2gYAyADKAsyMS5yYXdkYXRhLkV2ZW50VGhlbWVDb25mLkV2ZW50VGhlbWVN",
            "YXBBQlBhdGNoRW50cnkaSQoSRXZlbnRUaGVtZU1hcEVudHJ5EgsKA2tleRgB",
            "IAEoBRIiCgV2YWx1ZRgCIAEoCzITLnJhd2RhdGEuRXZlbnRUaGVtZToCOAEa",
            "VQoURXZlbnRUaGVtZU1hcEFCRW50cnkSCwoDa2V5GAEgASgJEiwKBXZhbHVl",
            "GAIgASgLMh0ucmF3ZGF0YS5FdmVudFRoZW1lTWFwQUJWYWx1ZToCOAEaWgoZ",
            "RXZlbnRUaGVtZU1hcEFCUGF0Y2hFbnRyeRILCgNrZXkYASABKAkSLAoFdmFs",
            "dWUYAiABKAsyHS5yYXdkYXRhLkV2ZW50VGhlbWVNYXBBQlZhbHVlOgI4AUI9",
            "Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2Rh",
            "dGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTheme), global::fat.rawdata.EventTheme.Parser, new[]{ "Id", "AssetInfo", "BasePrefab", "EntranceId", "EntranceImage", "PopupId", "StyleInfo", "TextInfo" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventThemeMapABValue), global::fat.rawdata.EventThemeMapABValue.Parser, new[]{ "EventThemeMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventThemeConf), global::fat.rawdata.EventThemeConf.Parser, new[]{ "EventThemeMap", "EventThemeMapAB", "EventThemeMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventTheme",table="EventThemeMap",table_wrapper="EventThemeConf",map="true",map_key_type="int32",data="EventThemeConf")
  /// annotation@ab(table_ab="EventThemeMapAB",table_ab_patch="EventThemeMapABPatch",table_ab_value="EventThemeMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventTheme(id="id")
  /// </summary>
  public sealed partial class EventTheme : pb::IMessage<EventTheme>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTheme> _parser = new pb::MessageParser<EventTheme>(() => new EventTheme());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTheme> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventThemeConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTheme() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTheme(EventTheme other) : this() {
      id_ = other.id_;
      assetInfo_ = other.assetInfo_.Clone();
      basePrefab_ = other.basePrefab_;
      entranceId_ = other.entranceId_;
      entranceImage_ = other.entranceImage_;
      popupId_ = other.popupId_;
      styleInfo_ = other.styleInfo_.Clone();
      textInfo_ = other.textInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTheme Clone() {
      return new EventTheme(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动界面模板ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "assetInfo" field.</summary>
    public const int AssetInfoFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_assetInfo_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> assetInfo_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Asset更换配置
    /// （约定名称:asset）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> AssetInfo {
      get { return assetInfo_; }
    }

    /// <summary>Field number for the "basePrefab" field.</summary>
    public const int BasePrefabFieldNumber = 3;
    private string basePrefab_ = "";
    /// <summary>
    /// 基础预设
    /// （Asset）
    /// 如果不需要更换，就留空
    /// 由功能决定默认值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasePrefab {
      get { return basePrefab_; }
      set {
        basePrefab_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entranceId" field.</summary>
    public const int EntranceIdFieldNumber = 4;
    private int entranceId_;
    /// <summary>
    /// 入口ID
    /// （逻辑信息）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntranceId {
      get { return entranceId_; }
      set {
        entranceId_ = value;
      }
    }

    /// <summary>Field number for the "entranceImage" field.</summary>
    public const int EntranceImageFieldNumber = 5;
    private string entranceImage_ = "";
    /// <summary>
    /// 入口图标
    /// （Asset）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntranceImage {
      get { return entranceImage_; }
      set {
        entranceImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "popupId" field.</summary>
    public const int PopupIdFieldNumber = 6;
    private int popupId_;
    /// <summary>
    /// 弹脸信息ID
    /// （逻辑信息）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PopupId {
      get { return popupId_; }
      set {
        popupId_ = value;
      }
    }

    /// <summary>Field number for the "styleInfo" field.</summary>
    public const int StyleInfoFieldNumber = 7;
    private static readonly pbc::MapField<string, string>.Codec _map_styleInfo_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 58);
    private readonly pbc::MapField<string, string> styleInfo_ = new pbc::MapField<string, string>();
    /// <summary>
    /// 字体更换配置
    /// （约定名称:字体序号）
    /// 与textInfo数量一致
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> StyleInfo {
      get { return styleInfo_; }
    }

    /// <summary>Field number for the "textInfo" field.</summary>
    public const int TextInfoFieldNumber = 8;
    private static readonly pbc::MapField<string, string>.Codec _map_textInfo_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 66);
    private readonly pbc::MapField<string, string> textInfo_ = new pbc::MapField<string, string>();
    /// <summary>
    /// 文本更换配置
    /// （约定名称:多语言ID）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> TextInfo {
      get { return textInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTheme);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTheme other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!AssetInfo.Equals(other.AssetInfo)) return false;
      if (BasePrefab != other.BasePrefab) return false;
      if (EntranceId != other.EntranceId) return false;
      if (EntranceImage != other.EntranceImage) return false;
      if (PopupId != other.PopupId) return false;
      if (!StyleInfo.Equals(other.StyleInfo)) return false;
      if (!TextInfo.Equals(other.TextInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= AssetInfo.GetHashCode();
      if (BasePrefab.Length != 0) hash ^= BasePrefab.GetHashCode();
      if (EntranceId != 0) hash ^= EntranceId.GetHashCode();
      if (EntranceImage.Length != 0) hash ^= EntranceImage.GetHashCode();
      if (PopupId != 0) hash ^= PopupId.GetHashCode();
      hash ^= StyleInfo.GetHashCode();
      hash ^= TextInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      assetInfo_.WriteTo(output, _map_assetInfo_codec);
      if (BasePrefab.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BasePrefab);
      }
      if (EntranceId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EntranceId);
      }
      if (EntranceImage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EntranceImage);
      }
      if (PopupId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PopupId);
      }
      styleInfo_.WriteTo(output, _map_styleInfo_codec);
      textInfo_.WriteTo(output, _map_textInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      assetInfo_.WriteTo(ref output, _map_assetInfo_codec);
      if (BasePrefab.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BasePrefab);
      }
      if (EntranceId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EntranceId);
      }
      if (EntranceImage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EntranceImage);
      }
      if (PopupId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PopupId);
      }
      styleInfo_.WriteTo(ref output, _map_styleInfo_codec);
      textInfo_.WriteTo(ref output, _map_textInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += assetInfo_.CalculateSize(_map_assetInfo_codec);
      if (BasePrefab.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasePrefab);
      }
      if (EntranceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntranceId);
      }
      if (EntranceImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntranceImage);
      }
      if (PopupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PopupId);
      }
      size += styleInfo_.CalculateSize(_map_styleInfo_codec);
      size += textInfo_.CalculateSize(_map_textInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTheme other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      assetInfo_.Add(other.assetInfo_);
      if (other.BasePrefab.Length != 0) {
        BasePrefab = other.BasePrefab;
      }
      if (other.EntranceId != 0) {
        EntranceId = other.EntranceId;
      }
      if (other.EntranceImage.Length != 0) {
        EntranceImage = other.EntranceImage;
      }
      if (other.PopupId != 0) {
        PopupId = other.PopupId;
      }
      styleInfo_.Add(other.styleInfo_);
      textInfo_.Add(other.textInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            assetInfo_.AddEntriesFrom(input, _map_assetInfo_codec);
            break;
          }
          case 26: {
            BasePrefab = input.ReadString();
            break;
          }
          case 32: {
            EntranceId = input.ReadInt32();
            break;
          }
          case 42: {
            EntranceImage = input.ReadString();
            break;
          }
          case 48: {
            PopupId = input.ReadInt32();
            break;
          }
          case 58: {
            styleInfo_.AddEntriesFrom(input, _map_styleInfo_codec);
            break;
          }
          case 66: {
            textInfo_.AddEntriesFrom(input, _map_textInfo_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            assetInfo_.AddEntriesFrom(ref input, _map_assetInfo_codec);
            break;
          }
          case 26: {
            BasePrefab = input.ReadString();
            break;
          }
          case 32: {
            EntranceId = input.ReadInt32();
            break;
          }
          case 42: {
            EntranceImage = input.ReadString();
            break;
          }
          case 48: {
            PopupId = input.ReadInt32();
            break;
          }
          case 58: {
            styleInfo_.AddEntriesFrom(ref input, _map_styleInfo_codec);
            break;
          }
          case 66: {
            textInfo_.AddEntriesFrom(ref input, _map_textInfo_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventThemeMapABValue : pb::IMessage<EventThemeMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventThemeMapABValue> _parser = new pb::MessageParser<EventThemeMapABValue>(() => new EventThemeMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventThemeMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventThemeConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventThemeMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventThemeMapABValue(EventThemeMapABValue other) : this() {
      eventThemeMap_ = other.eventThemeMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventThemeMapABValue Clone() {
      return new EventThemeMapABValue(this);
    }

    /// <summary>Field number for the "EventThemeMap" field.</summary>
    public const int EventThemeMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventTheme>.Codec _map_eventThemeMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventTheme>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTheme.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventTheme> eventThemeMap_ = new pbc::MapField<int, global::fat.rawdata.EventTheme>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventTheme> EventThemeMap {
      get { return eventThemeMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventThemeMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventThemeMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventThemeMap.Equals(other.EventThemeMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventThemeMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventThemeMap_.WriteTo(output, _map_eventThemeMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventThemeMap_.WriteTo(ref output, _map_eventThemeMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventThemeMap_.CalculateSize(_map_eventThemeMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventThemeMapABValue other) {
      if (other == null) {
        return;
      }
      eventThemeMap_.Add(other.eventThemeMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventThemeMap_.AddEntriesFrom(input, _map_eventThemeMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventThemeMap_.AddEntriesFrom(ref input, _map_eventThemeMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventThemeConf : pb::IMessage<EventThemeConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventThemeConf> _parser = new pb::MessageParser<EventThemeConf>(() => new EventThemeConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventThemeConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventThemeConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventThemeConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventThemeConf(EventThemeConf other) : this() {
      eventThemeMap_ = other.eventThemeMap_.Clone();
      eventThemeMapAB_ = other.eventThemeMapAB_.Clone();
      eventThemeMapABPatch_ = other.eventThemeMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventThemeConf Clone() {
      return new EventThemeConf(this);
    }

    /// <summary>Field number for the "EventThemeMap" field.</summary>
    public const int EventThemeMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventTheme>.Codec _map_eventThemeMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventTheme>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTheme.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventTheme> eventThemeMap_ = new pbc::MapField<int, global::fat.rawdata.EventTheme>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventTheme> EventThemeMap {
      get { return eventThemeMap_; }
    }

    /// <summary>Field number for the "EventThemeMapAB" field.</summary>
    public const int EventThemeMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventThemeMapABValue>.Codec _map_eventThemeMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventThemeMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventThemeMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventThemeMapABValue> eventThemeMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventThemeMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventThemeMapABValue> EventThemeMapAB {
      get { return eventThemeMapAB_; }
    }

    /// <summary>Field number for the "EventThemeMapABPatch" field.</summary>
    public const int EventThemeMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventThemeMapABValue>.Codec _map_eventThemeMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventThemeMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventThemeMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventThemeMapABValue> eventThemeMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventThemeMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventThemeMapABValue> EventThemeMapABPatch {
      get { return eventThemeMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventThemeConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventThemeConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventThemeMap.Equals(other.EventThemeMap)) return false;
      if (!EventThemeMapAB.Equals(other.EventThemeMapAB)) return false;
      if (!EventThemeMapABPatch.Equals(other.EventThemeMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventThemeMap.GetHashCode();
      hash ^= EventThemeMapAB.GetHashCode();
      hash ^= EventThemeMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventThemeMap_.WriteTo(output, _map_eventThemeMap_codec);
      eventThemeMapAB_.WriteTo(output, _map_eventThemeMapAB_codec);
      eventThemeMapABPatch_.WriteTo(output, _map_eventThemeMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventThemeMap_.WriteTo(ref output, _map_eventThemeMap_codec);
      eventThemeMapAB_.WriteTo(ref output, _map_eventThemeMapAB_codec);
      eventThemeMapABPatch_.WriteTo(ref output, _map_eventThemeMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventThemeMap_.CalculateSize(_map_eventThemeMap_codec);
      size += eventThemeMapAB_.CalculateSize(_map_eventThemeMapAB_codec);
      size += eventThemeMapABPatch_.CalculateSize(_map_eventThemeMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventThemeConf other) {
      if (other == null) {
        return;
      }
      eventThemeMap_.Add(other.eventThemeMap_);
      eventThemeMapAB_.Add(other.eventThemeMapAB_);
      eventThemeMapABPatch_.Add(other.eventThemeMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventThemeMap_.AddEntriesFrom(input, _map_eventThemeMap_codec);
            break;
          }
          case 18: {
            eventThemeMapAB_.AddEntriesFrom(input, _map_eventThemeMapAB_codec);
            break;
          }
          case 26: {
            eventThemeMapABPatch_.AddEntriesFrom(input, _map_eventThemeMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventThemeMap_.AddEntriesFrom(ref input, _map_eventThemeMap_codec);
            break;
          }
          case 18: {
            eventThemeMapAB_.AddEntriesFrom(ref input, _map_eventThemeMapAB_codec);
            break;
          }
          case 26: {
            eventThemeMapABPatch_.AddEntriesFrom(ref input, _map_eventThemeMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
