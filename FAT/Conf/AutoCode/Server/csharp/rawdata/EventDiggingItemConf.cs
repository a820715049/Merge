// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventDiggingItemConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventDiggingItemConf.proto</summary>
  public static partial class EventDiggingItemConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventDiggingItemConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventDiggingItemConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJyYXdkYXRhL0V2ZW50RGlnZ2luZ0l0ZW1Db25mLnByb3RvEgdyYXdkYXRh",
            "ItABChBFdmVudERpZ2dpbmdJdGVtEgoKAmlkGAEgASgFEg8KB0ltZ1R1cm4Y",
            "AiABKAUSDwoHSW1nWm9vbRgDIAEoAhIQCghib29tVHlwZRgNIAEoBRIPCgdj",
            "b2xTaXplGAQgASgFEg8KB2RhcmtJbWcYBSABKAkSEgoKZGFya0ltZ0JpZxgL",
            "IAEoCRITCgtkYXJrSW1nVHVybhgGIAEoBRINCgVpbWFnZRgIIAEoCRIRCgls",
            "ZXZlbHR1cm4YCSABKAUSDwoHcm93U2l6ZRgKIAEoBSLOAQoaRXZlbnREaWdn",
            "aW5nSXRlbU1hcEFCVmFsdWUSWQoTRXZlbnREaWdnaW5nSXRlbU1hcBgBIAMo",
            "CzI8LnJhd2RhdGEuRXZlbnREaWdnaW5nSXRlbU1hcEFCVmFsdWUuRXZlbnRE",
            "aWdnaW5nSXRlbU1hcEVudHJ5GlUKGEV2ZW50RGlnZ2luZ0l0ZW1NYXBFbnRy",
            "eRILCgNrZXkYASABKAUSKAoFdmFsdWUYAiABKAsyGS5yYXdkYXRhLkV2ZW50",
            "RGlnZ2luZ0l0ZW06AjgBIskEChRFdmVudERpZ2dpbmdJdGVtQ29uZhJTChNF",
            "dmVudERpZ2dpbmdJdGVtTWFwGAEgAygLMjYucmF3ZGF0YS5FdmVudERpZ2dp",
            "bmdJdGVtQ29uZi5FdmVudERpZ2dpbmdJdGVtTWFwRW50cnkSVwoVRXZlbnRE",
            "aWdnaW5nSXRlbU1hcEFCGAIgAygLMjgucmF3ZGF0YS5FdmVudERpZ2dpbmdJ",
            "dGVtQ29uZi5FdmVudERpZ2dpbmdJdGVtTWFwQUJFbnRyeRJhChpFdmVudERp",
            "Z2dpbmdJdGVtTWFwQUJQYXRjaBgDIAMoCzI9LnJhd2RhdGEuRXZlbnREaWdn",
            "aW5nSXRlbUNvbmYuRXZlbnREaWdnaW5nSXRlbU1hcEFCUGF0Y2hFbnRyeRpV",
            "ChhFdmVudERpZ2dpbmdJdGVtTWFwRW50cnkSCwoDa2V5GAEgASgFEigKBXZh",
            "bHVlGAIgASgLMhkucmF3ZGF0YS5FdmVudERpZ2dpbmdJdGVtOgI4ARphChpF",
            "dmVudERpZ2dpbmdJdGVtTWFwQUJFbnRyeRILCgNrZXkYASABKAkSMgoFdmFs",
            "dWUYAiABKAsyIy5yYXdkYXRhLkV2ZW50RGlnZ2luZ0l0ZW1NYXBBQlZhbHVl",
            "OgI4ARpmCh9FdmVudERpZ2dpbmdJdGVtTWFwQUJQYXRjaEVudHJ5EgsKA2tl",
            "eRgBIAEoCRIyCgV2YWx1ZRgCIAEoCzIjLnJhd2RhdGEuRXZlbnREaWdnaW5n",
            "SXRlbU1hcEFCVmFsdWU6AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9j",
            "b25mL2dlbi9nb2xhbmcvcmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventDiggingItem), global::fat.rawdata.EventDiggingItem.Parser, new[]{ "Id", "ImgTurn", "ImgZoom", "BoomType", "ColSize", "DarkImg", "DarkImgBig", "DarkImgTurn", "Image", "Levelturn", "RowSize" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventDiggingItemMapABValue), global::fat.rawdata.EventDiggingItemMapABValue.Parser, new[]{ "EventDiggingItemMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventDiggingItemConf), global::fat.rawdata.EventDiggingItemConf.Parser, new[]{ "EventDiggingItemMap", "EventDiggingItemMapAB", "EventDiggingItemMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventDiggingItem",table="EventDiggingItemMap",table_wrapper="EventDiggingItemConf",map="true",map_key_type="int32",data="EventDiggingItemConf")
  /// annotation@ab(table_ab="EventDiggingItemMapAB",table_ab_patch="EventDiggingItemMapABPatch",table_ab_value="EventDiggingItemMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventDiggingItem(id="id")
  /// </summary>
  public sealed partial class EventDiggingItem : pb::IMessage<EventDiggingItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventDiggingItem> _parser = new pb::MessageParser<EventDiggingItem>(() => new EventDiggingItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventDiggingItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventDiggingItemConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDiggingItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDiggingItem(EventDiggingItem other) : this() {
      id_ = other.id_;
      imgTurn_ = other.imgTurn_;
      imgZoom_ = other.imgZoom_;
      boomType_ = other.boomType_;
      colSize_ = other.colSize_;
      darkImg_ = other.darkImg_;
      darkImgBig_ = other.darkImgBig_;
      darkImgTurn_ = other.darkImgTurn_;
      image_ = other.image_;
      levelturn_ = other.levelturn_;
      rowSize_ = other.rowSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDiggingItem Clone() {
      return new EventDiggingItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 物品ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ImgTurn" field.</summary>
    public const int ImgTurnFieldNumber = 2;
    private int imgTurn_;
    /// <summary>
    /// 收集面板icon旋转角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImgTurn {
      get { return imgTurn_; }
      set {
        imgTurn_ = value;
      }
    }

    /// <summary>Field number for the "ImgZoom" field.</summary>
    public const int ImgZoomFieldNumber = 3;
    private float imgZoom_;
    /// <summary>
    /// 收集面板icon缩放
    /// （为空=1）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ImgZoom {
      get { return imgZoom_; }
      set {
        imgZoom_ = value;
      }
    }

    /// <summary>Field number for the "boomType" field.</summary>
    public const int BoomTypeFieldNumber = 13;
    private int boomType_;
    /// <summary>
    /// 爆炸方向（空-非爆炸物）
    /// 1-横向、 2-纵向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoomType {
      get { return boomType_; }
      set {
        boomType_ = value;
      }
    }

    /// <summary>Field number for the "colSize" field.</summary>
    public const int ColSizeFieldNumber = 4;
    private int colSize_;
    /// <summary>
    /// 横向占几个格子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColSize {
      get { return colSize_; }
      set {
        colSize_ = value;
      }
    }

    /// <summary>Field number for the "darkImg" field.</summary>
    public const int DarkImgFieldNumber = 5;
    private string darkImg_ = "";
    /// <summary>
    /// 收集面板阴影图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DarkImg {
      get { return darkImg_; }
      set {
        darkImg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "darkImgBig" field.</summary>
    public const int DarkImgBigFieldNumber = 11;
    private string darkImgBig_ = "";
    /// <summary>
    /// 棋盘阴影图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DarkImgBig {
      get { return darkImgBig_; }
      set {
        darkImgBig_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "darkImgTurn" field.</summary>
    public const int DarkImgTurnFieldNumber = 6;
    private int darkImgTurn_;
    /// <summary>
    /// 阴影图图旋转角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DarkImgTurn {
      get { return darkImgTurn_; }
      set {
        darkImgTurn_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 8;
    private string image_ = "";
    /// <summary>
    /// 物品彩色图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "levelturn" field.</summary>
    public const int LevelturnFieldNumber = 9;
    private int levelturn_;
    /// <summary>
    /// 关卡旋转角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Levelturn {
      get { return levelturn_; }
      set {
        levelturn_ = value;
      }
    }

    /// <summary>Field number for the "rowSize" field.</summary>
    public const int RowSizeFieldNumber = 10;
    private int rowSize_;
    /// <summary>
    /// 纵向占几个格子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RowSize {
      get { return rowSize_; }
      set {
        rowSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventDiggingItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventDiggingItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ImgTurn != other.ImgTurn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ImgZoom, other.ImgZoom)) return false;
      if (BoomType != other.BoomType) return false;
      if (ColSize != other.ColSize) return false;
      if (DarkImg != other.DarkImg) return false;
      if (DarkImgBig != other.DarkImgBig) return false;
      if (DarkImgTurn != other.DarkImgTurn) return false;
      if (Image != other.Image) return false;
      if (Levelturn != other.Levelturn) return false;
      if (RowSize != other.RowSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ImgTurn != 0) hash ^= ImgTurn.GetHashCode();
      if (ImgZoom != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ImgZoom);
      if (BoomType != 0) hash ^= BoomType.GetHashCode();
      if (ColSize != 0) hash ^= ColSize.GetHashCode();
      if (DarkImg.Length != 0) hash ^= DarkImg.GetHashCode();
      if (DarkImgBig.Length != 0) hash ^= DarkImgBig.GetHashCode();
      if (DarkImgTurn != 0) hash ^= DarkImgTurn.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (Levelturn != 0) hash ^= Levelturn.GetHashCode();
      if (RowSize != 0) hash ^= RowSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ImgTurn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ImgTurn);
      }
      if (ImgZoom != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ImgZoom);
      }
      if (ColSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ColSize);
      }
      if (DarkImg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DarkImg);
      }
      if (DarkImgTurn != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DarkImgTurn);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Image);
      }
      if (Levelturn != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Levelturn);
      }
      if (RowSize != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RowSize);
      }
      if (DarkImgBig.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DarkImgBig);
      }
      if (BoomType != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(BoomType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ImgTurn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ImgTurn);
      }
      if (ImgZoom != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ImgZoom);
      }
      if (ColSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ColSize);
      }
      if (DarkImg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DarkImg);
      }
      if (DarkImgTurn != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DarkImgTurn);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Image);
      }
      if (Levelturn != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Levelturn);
      }
      if (RowSize != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RowSize);
      }
      if (DarkImgBig.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DarkImgBig);
      }
      if (BoomType != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(BoomType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ImgTurn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImgTurn);
      }
      if (ImgZoom != 0F) {
        size += 1 + 4;
      }
      if (BoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoomType);
      }
      if (ColSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColSize);
      }
      if (DarkImg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DarkImg);
      }
      if (DarkImgBig.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DarkImgBig);
      }
      if (DarkImgTurn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DarkImgTurn);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      if (Levelturn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Levelturn);
      }
      if (RowSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RowSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventDiggingItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ImgTurn != 0) {
        ImgTurn = other.ImgTurn;
      }
      if (other.ImgZoom != 0F) {
        ImgZoom = other.ImgZoom;
      }
      if (other.BoomType != 0) {
        BoomType = other.BoomType;
      }
      if (other.ColSize != 0) {
        ColSize = other.ColSize;
      }
      if (other.DarkImg.Length != 0) {
        DarkImg = other.DarkImg;
      }
      if (other.DarkImgBig.Length != 0) {
        DarkImgBig = other.DarkImgBig;
      }
      if (other.DarkImgTurn != 0) {
        DarkImgTurn = other.DarkImgTurn;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      if (other.Levelturn != 0) {
        Levelturn = other.Levelturn;
      }
      if (other.RowSize != 0) {
        RowSize = other.RowSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ImgTurn = input.ReadInt32();
            break;
          }
          case 29: {
            ImgZoom = input.ReadFloat();
            break;
          }
          case 32: {
            ColSize = input.ReadInt32();
            break;
          }
          case 42: {
            DarkImg = input.ReadString();
            break;
          }
          case 48: {
            DarkImgTurn = input.ReadInt32();
            break;
          }
          case 66: {
            Image = input.ReadString();
            break;
          }
          case 72: {
            Levelturn = input.ReadInt32();
            break;
          }
          case 80: {
            RowSize = input.ReadInt32();
            break;
          }
          case 90: {
            DarkImgBig = input.ReadString();
            break;
          }
          case 104: {
            BoomType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ImgTurn = input.ReadInt32();
            break;
          }
          case 29: {
            ImgZoom = input.ReadFloat();
            break;
          }
          case 32: {
            ColSize = input.ReadInt32();
            break;
          }
          case 42: {
            DarkImg = input.ReadString();
            break;
          }
          case 48: {
            DarkImgTurn = input.ReadInt32();
            break;
          }
          case 66: {
            Image = input.ReadString();
            break;
          }
          case 72: {
            Levelturn = input.ReadInt32();
            break;
          }
          case 80: {
            RowSize = input.ReadInt32();
            break;
          }
          case 90: {
            DarkImgBig = input.ReadString();
            break;
          }
          case 104: {
            BoomType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventDiggingItemMapABValue : pb::IMessage<EventDiggingItemMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventDiggingItemMapABValue> _parser = new pb::MessageParser<EventDiggingItemMapABValue>(() => new EventDiggingItemMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventDiggingItemMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventDiggingItemConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDiggingItemMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDiggingItemMapABValue(EventDiggingItemMapABValue other) : this() {
      eventDiggingItemMap_ = other.eventDiggingItemMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDiggingItemMapABValue Clone() {
      return new EventDiggingItemMapABValue(this);
    }

    /// <summary>Field number for the "EventDiggingItemMap" field.</summary>
    public const int EventDiggingItemMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventDiggingItem>.Codec _map_eventDiggingItemMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventDiggingItem>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventDiggingItem.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventDiggingItem> eventDiggingItemMap_ = new pbc::MapField<int, global::fat.rawdata.EventDiggingItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventDiggingItem> EventDiggingItemMap {
      get { return eventDiggingItemMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventDiggingItemMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventDiggingItemMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventDiggingItemMap.Equals(other.EventDiggingItemMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventDiggingItemMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventDiggingItemMap_.WriteTo(output, _map_eventDiggingItemMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventDiggingItemMap_.WriteTo(ref output, _map_eventDiggingItemMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventDiggingItemMap_.CalculateSize(_map_eventDiggingItemMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventDiggingItemMapABValue other) {
      if (other == null) {
        return;
      }
      eventDiggingItemMap_.Add(other.eventDiggingItemMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventDiggingItemMap_.AddEntriesFrom(input, _map_eventDiggingItemMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventDiggingItemMap_.AddEntriesFrom(ref input, _map_eventDiggingItemMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventDiggingItemConf : pb::IMessage<EventDiggingItemConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventDiggingItemConf> _parser = new pb::MessageParser<EventDiggingItemConf>(() => new EventDiggingItemConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventDiggingItemConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventDiggingItemConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDiggingItemConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDiggingItemConf(EventDiggingItemConf other) : this() {
      eventDiggingItemMap_ = other.eventDiggingItemMap_.Clone();
      eventDiggingItemMapAB_ = other.eventDiggingItemMapAB_.Clone();
      eventDiggingItemMapABPatch_ = other.eventDiggingItemMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDiggingItemConf Clone() {
      return new EventDiggingItemConf(this);
    }

    /// <summary>Field number for the "EventDiggingItemMap" field.</summary>
    public const int EventDiggingItemMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventDiggingItem>.Codec _map_eventDiggingItemMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventDiggingItem>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventDiggingItem.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventDiggingItem> eventDiggingItemMap_ = new pbc::MapField<int, global::fat.rawdata.EventDiggingItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventDiggingItem> EventDiggingItemMap {
      get { return eventDiggingItemMap_; }
    }

    /// <summary>Field number for the "EventDiggingItemMapAB" field.</summary>
    public const int EventDiggingItemMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventDiggingItemMapABValue>.Codec _map_eventDiggingItemMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventDiggingItemMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventDiggingItemMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventDiggingItemMapABValue> eventDiggingItemMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventDiggingItemMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventDiggingItemMapABValue> EventDiggingItemMapAB {
      get { return eventDiggingItemMapAB_; }
    }

    /// <summary>Field number for the "EventDiggingItemMapABPatch" field.</summary>
    public const int EventDiggingItemMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventDiggingItemMapABValue>.Codec _map_eventDiggingItemMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventDiggingItemMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventDiggingItemMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventDiggingItemMapABValue> eventDiggingItemMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventDiggingItemMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventDiggingItemMapABValue> EventDiggingItemMapABPatch {
      get { return eventDiggingItemMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventDiggingItemConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventDiggingItemConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventDiggingItemMap.Equals(other.EventDiggingItemMap)) return false;
      if (!EventDiggingItemMapAB.Equals(other.EventDiggingItemMapAB)) return false;
      if (!EventDiggingItemMapABPatch.Equals(other.EventDiggingItemMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventDiggingItemMap.GetHashCode();
      hash ^= EventDiggingItemMapAB.GetHashCode();
      hash ^= EventDiggingItemMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventDiggingItemMap_.WriteTo(output, _map_eventDiggingItemMap_codec);
      eventDiggingItemMapAB_.WriteTo(output, _map_eventDiggingItemMapAB_codec);
      eventDiggingItemMapABPatch_.WriteTo(output, _map_eventDiggingItemMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventDiggingItemMap_.WriteTo(ref output, _map_eventDiggingItemMap_codec);
      eventDiggingItemMapAB_.WriteTo(ref output, _map_eventDiggingItemMapAB_codec);
      eventDiggingItemMapABPatch_.WriteTo(ref output, _map_eventDiggingItemMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventDiggingItemMap_.CalculateSize(_map_eventDiggingItemMap_codec);
      size += eventDiggingItemMapAB_.CalculateSize(_map_eventDiggingItemMapAB_codec);
      size += eventDiggingItemMapABPatch_.CalculateSize(_map_eventDiggingItemMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventDiggingItemConf other) {
      if (other == null) {
        return;
      }
      eventDiggingItemMap_.Add(other.eventDiggingItemMap_);
      eventDiggingItemMapAB_.Add(other.eventDiggingItemMapAB_);
      eventDiggingItemMapABPatch_.Add(other.eventDiggingItemMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventDiggingItemMap_.AddEntriesFrom(input, _map_eventDiggingItemMap_codec);
            break;
          }
          case 18: {
            eventDiggingItemMapAB_.AddEntriesFrom(input, _map_eventDiggingItemMapAB_codec);
            break;
          }
          case 26: {
            eventDiggingItemMapABPatch_.AddEntriesFrom(input, _map_eventDiggingItemMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventDiggingItemMap_.AddEntriesFrom(ref input, _map_eventDiggingItemMap_codec);
            break;
          }
          case 18: {
            eventDiggingItemMapAB_.AddEntriesFrom(ref input, _map_eventDiggingItemMapAB_codec);
            break;
          }
          case 26: {
            eventDiggingItemMapABPatch_.AddEntriesFrom(ref input, _map_eventDiggingItemMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
