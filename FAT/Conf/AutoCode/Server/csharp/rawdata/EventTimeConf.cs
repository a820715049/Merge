// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventTimeConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventTimeConf.proto</summary>
  public static partial class EventTimeConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventTimeConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventTimeConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtyYXdkYXRhL0V2ZW50VGltZUNvbmYucHJvdG8SB3Jhd2RhdGEaF3Jhd2Rh",
            "dGEvRXZlbnRUeXBlLnByb3RvIosBCglFdmVudFRpbWUSCgoCaWQYASABKAUS",
            "EgoKRXZlbnRQYXJhbRgCIAEoBRIlCglFdmVudFR5cGUYAyABKA4yEi5yYXdk",
            "YXRhLkV2ZW50VHlwZRIPCgdlbmRUaW1lGAQgASgDEhMKC25vdGljZUdyb3Vw",
            "GAYgAygFEhEKCXN0YXJ0VGltZRgFIAEoAyKkAQoTRXZlbnRUaW1lTWFwQUJW",
            "YWx1ZRJECgxFdmVudFRpbWVNYXAYASADKAsyLi5yYXdkYXRhLkV2ZW50VGlt",
            "ZU1hcEFCVmFsdWUuRXZlbnRUaW1lTWFwRW50cnkaRwoRRXZlbnRUaW1lTWFw",
            "RW50cnkSCwoDa2V5GAEgASgFEiEKBXZhbHVlGAIgASgLMhIucmF3ZGF0YS5F",
            "dmVudFRpbWU6AjgBItkDCg1FdmVudFRpbWVDb25mEj4KDEV2ZW50VGltZU1h",
            "cBgBIAMoCzIoLnJhd2RhdGEuRXZlbnRUaW1lQ29uZi5FdmVudFRpbWVNYXBF",
            "bnRyeRJCCg5FdmVudFRpbWVNYXBBQhgCIAMoCzIqLnJhd2RhdGEuRXZlbnRU",
            "aW1lQ29uZi5FdmVudFRpbWVNYXBBQkVudHJ5EkwKE0V2ZW50VGltZU1hcEFC",
            "UGF0Y2gYAyADKAsyLy5yYXdkYXRhLkV2ZW50VGltZUNvbmYuRXZlbnRUaW1l",
            "TWFwQUJQYXRjaEVudHJ5GkcKEUV2ZW50VGltZU1hcEVudHJ5EgsKA2tleRgB",
            "IAEoBRIhCgV2YWx1ZRgCIAEoCzISLnJhd2RhdGEuRXZlbnRUaW1lOgI4ARpT",
            "ChNFdmVudFRpbWVNYXBBQkVudHJ5EgsKA2tleRgBIAEoCRIrCgV2YWx1ZRgC",
            "IAEoCzIcLnJhd2RhdGEuRXZlbnRUaW1lTWFwQUJWYWx1ZToCOAEaWAoYRXZl",
            "bnRUaW1lTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIrCgV2YWx1ZRgC",
            "IAEoCzIcLnJhd2RhdGEuRXZlbnRUaW1lTWFwQUJWYWx1ZToCOAFCPVotZ2l0",
            "bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdkYXRhqgIL",
            "ZmF0LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.rawdata.EventTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTime), global::fat.rawdata.EventTime.Parser, new[]{ "Id", "EventParam", "EventType", "EndTime", "NoticeGroup", "StartTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTimeMapABValue), global::fat.rawdata.EventTimeMapABValue.Parser, new[]{ "EventTimeMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTimeConf), global::fat.rawdata.EventTimeConf.Parser, new[]{ "EventTimeMap", "EventTimeMapAB", "EventTimeMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventTime",table="EventTimeMap",table_wrapper="EventTimeConf",map="true",map_key_type="int32",data="EventTimeConf")
  /// annotation@ab(table_ab="EventTimeMapAB",table_ab_patch="EventTimeMapABPatch",table_ab_value="EventTimeMapABValue",ab_patch="true")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventTime(id="id")
  /// </summary>
  public sealed partial class EventTime : pb::IMessage<EventTime>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTime> _parser = new pb::MessageParser<EventTime>(() => new EventTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventTimeConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTime(EventTime other) : this() {
      id_ = other.id_;
      eventParam_ = other.eventParam_;
      eventType_ = other.eventType_;
      endTime_ = other.endTime_;
      noticeGroup_ = other.noticeGroup_.Clone();
      startTime_ = other.startTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTime Clone() {
      return new EventTime(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "EventParam" field.</summary>
    public const int EventParamFieldNumber = 2;
    private int eventParam_;
    /// <summary>
    /// EventType
    /// 对应表格里的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventParam {
      get { return eventParam_; }
      set {
        eventParam_ = value;
      }
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 3;
    private global::fat.rawdata.EventType eventType_ = global::fat.rawdata.EventType.Default;
    /// <summary>
    /// EventType类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.rawdata.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private long endTime_;
    /// <summary>
    /// 结束时间(UTC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "noticeGroup" field.</summary>
    public const int NoticeGroupFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_noticeGroup_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> noticeGroup_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// NoticeEvent.id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NoticeGroup {
      get { return noticeGroup_; }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private long startTime_;
    /// <summary>
    /// 开始时间(UTC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (EventParam != other.EventParam) return false;
      if (EventType != other.EventType) return false;
      if (EndTime != other.EndTime) return false;
      if(!noticeGroup_.Equals(other.noticeGroup_)) return false;
      if (StartTime != other.StartTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (EventParam != 0) hash ^= EventParam.GetHashCode();
      if (EventType != global::fat.rawdata.EventType.Default) hash ^= EventType.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      hash ^= noticeGroup_.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (EventParam != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EventParam);
      }
      if (EventType != global::fat.rawdata.EventType.Default) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EventType);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartTime);
      }
      noticeGroup_.WriteTo(output, _repeated_noticeGroup_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (EventParam != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EventParam);
      }
      if (EventType != global::fat.rawdata.EventType.Default) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EventType);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartTime);
      }
      noticeGroup_.WriteTo(ref output, _repeated_noticeGroup_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (EventParam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventParam);
      }
      if (EventType != global::fat.rawdata.EventType.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      size += noticeGroup_.CalculateSize(_repeated_noticeGroup_codec);
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTime other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.EventParam != 0) {
        EventParam = other.EventParam;
      }
      if (other.EventType != global::fat.rawdata.EventType.Default) {
        EventType = other.EventType;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      noticeGroup_.Add(other.noticeGroup_);
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            EventParam = input.ReadInt32();
            break;
          }
          case 24: {
            EventType = (global::fat.rawdata.EventType) input.ReadEnum();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
          case 40: {
            StartTime = input.ReadInt64();
            break;
          }
          case 50:
          case 48: {
            noticeGroup_.AddEntriesFrom(input, _repeated_noticeGroup_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            EventParam = input.ReadInt32();
            break;
          }
          case 24: {
            EventType = (global::fat.rawdata.EventType) input.ReadEnum();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
          case 40: {
            StartTime = input.ReadInt64();
            break;
          }
          case 50:
          case 48: {
            noticeGroup_.AddEntriesFrom(ref input, _repeated_noticeGroup_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventTimeMapABValue : pb::IMessage<EventTimeMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTimeMapABValue> _parser = new pb::MessageParser<EventTimeMapABValue>(() => new EventTimeMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTimeMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventTimeConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTimeMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTimeMapABValue(EventTimeMapABValue other) : this() {
      eventTimeMap_ = other.eventTimeMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTimeMapABValue Clone() {
      return new EventTimeMapABValue(this);
    }

    /// <summary>Field number for the "EventTimeMap" field.</summary>
    public const int EventTimeMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventTime>.Codec _map_eventTimeMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventTime>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTime.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventTime> eventTimeMap_ = new pbc::MapField<int, global::fat.rawdata.EventTime>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventTime> EventTimeMap {
      get { return eventTimeMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTimeMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTimeMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventTimeMap.Equals(other.EventTimeMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventTimeMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventTimeMap_.WriteTo(output, _map_eventTimeMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventTimeMap_.WriteTo(ref output, _map_eventTimeMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventTimeMap_.CalculateSize(_map_eventTimeMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTimeMapABValue other) {
      if (other == null) {
        return;
      }
      eventTimeMap_.Add(other.eventTimeMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventTimeMap_.AddEntriesFrom(input, _map_eventTimeMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventTimeMap_.AddEntriesFrom(ref input, _map_eventTimeMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventTimeConf : pb::IMessage<EventTimeConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTimeConf> _parser = new pb::MessageParser<EventTimeConf>(() => new EventTimeConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTimeConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventTimeConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTimeConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTimeConf(EventTimeConf other) : this() {
      eventTimeMap_ = other.eventTimeMap_.Clone();
      eventTimeMapAB_ = other.eventTimeMapAB_.Clone();
      eventTimeMapABPatch_ = other.eventTimeMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTimeConf Clone() {
      return new EventTimeConf(this);
    }

    /// <summary>Field number for the "EventTimeMap" field.</summary>
    public const int EventTimeMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventTime>.Codec _map_eventTimeMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventTime>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTime.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventTime> eventTimeMap_ = new pbc::MapField<int, global::fat.rawdata.EventTime>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventTime> EventTimeMap {
      get { return eventTimeMap_; }
    }

    /// <summary>Field number for the "EventTimeMapAB" field.</summary>
    public const int EventTimeMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventTimeMapABValue>.Codec _map_eventTimeMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventTimeMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTimeMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventTimeMapABValue> eventTimeMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventTimeMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventTimeMapABValue> EventTimeMapAB {
      get { return eventTimeMapAB_; }
    }

    /// <summary>Field number for the "EventTimeMapABPatch" field.</summary>
    public const int EventTimeMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventTimeMapABValue>.Codec _map_eventTimeMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventTimeMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTimeMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventTimeMapABValue> eventTimeMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventTimeMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventTimeMapABValue> EventTimeMapABPatch {
      get { return eventTimeMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTimeConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTimeConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventTimeMap.Equals(other.EventTimeMap)) return false;
      if (!EventTimeMapAB.Equals(other.EventTimeMapAB)) return false;
      if (!EventTimeMapABPatch.Equals(other.EventTimeMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventTimeMap.GetHashCode();
      hash ^= EventTimeMapAB.GetHashCode();
      hash ^= EventTimeMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventTimeMap_.WriteTo(output, _map_eventTimeMap_codec);
      eventTimeMapAB_.WriteTo(output, _map_eventTimeMapAB_codec);
      eventTimeMapABPatch_.WriteTo(output, _map_eventTimeMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventTimeMap_.WriteTo(ref output, _map_eventTimeMap_codec);
      eventTimeMapAB_.WriteTo(ref output, _map_eventTimeMapAB_codec);
      eventTimeMapABPatch_.WriteTo(ref output, _map_eventTimeMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventTimeMap_.CalculateSize(_map_eventTimeMap_codec);
      size += eventTimeMapAB_.CalculateSize(_map_eventTimeMapAB_codec);
      size += eventTimeMapABPatch_.CalculateSize(_map_eventTimeMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTimeConf other) {
      if (other == null) {
        return;
      }
      eventTimeMap_.Add(other.eventTimeMap_);
      eventTimeMapAB_.Add(other.eventTimeMapAB_);
      eventTimeMapABPatch_.Add(other.eventTimeMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventTimeMap_.AddEntriesFrom(input, _map_eventTimeMap_codec);
            break;
          }
          case 18: {
            eventTimeMapAB_.AddEntriesFrom(input, _map_eventTimeMapAB_codec);
            break;
          }
          case 26: {
            eventTimeMapABPatch_.AddEntriesFrom(input, _map_eventTimeMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventTimeMap_.AddEntriesFrom(ref input, _map_eventTimeMap_codec);
            break;
          }
          case 18: {
            eventTimeMapAB_.AddEntriesFrom(ref input, _map_eventTimeMapAB_codec);
            break;
          }
          case 26: {
            eventTimeMapABPatch_.AddEntriesFrom(ref input, _map_eventTimeMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
