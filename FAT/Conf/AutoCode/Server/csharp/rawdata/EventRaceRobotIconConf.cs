// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventRaceRobotIconConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventRaceRobotIconConf.proto</summary>
  public static partial class EventRaceRobotIconConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventRaceRobotIconConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventRaceRobotIconConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRyYXdkYXRhL0V2ZW50UmFjZVJvYm90SWNvbkNvbmYucHJvdG8SB3Jhd2Rh",
            "dGEiLgoSRXZlbnRSYWNlUm9ib3RJY29uEgoKAmlkGAEgASgFEgwKBGljb24Y",
            "AiABKAki2gEKHEV2ZW50UmFjZVJvYm90SWNvbk1hcEFCVmFsdWUSXwoVRXZl",
            "bnRSYWNlUm9ib3RJY29uTWFwGAEgAygLMkAucmF3ZGF0YS5FdmVudFJhY2VS",
            "b2JvdEljb25NYXBBQlZhbHVlLkV2ZW50UmFjZVJvYm90SWNvbk1hcEVudHJ5",
            "GlkKGkV2ZW50UmFjZVJvYm90SWNvbk1hcEVudHJ5EgsKA2tleRgBIAEoBRIq",
            "CgV2YWx1ZRgCIAEoCzIbLnJhd2RhdGEuRXZlbnRSYWNlUm9ib3RJY29uOgI4",
            "ASLpBAoWRXZlbnRSYWNlUm9ib3RJY29uQ29uZhJZChVFdmVudFJhY2VSb2Jv",
            "dEljb25NYXAYASADKAsyOi5yYXdkYXRhLkV2ZW50UmFjZVJvYm90SWNvbkNv",
            "bmYuRXZlbnRSYWNlUm9ib3RJY29uTWFwRW50cnkSXQoXRXZlbnRSYWNlUm9i",
            "b3RJY29uTWFwQUIYAiADKAsyPC5yYXdkYXRhLkV2ZW50UmFjZVJvYm90SWNv",
            "bkNvbmYuRXZlbnRSYWNlUm9ib3RJY29uTWFwQUJFbnRyeRJnChxFdmVudFJh",
            "Y2VSb2JvdEljb25NYXBBQlBhdGNoGAMgAygLMkEucmF3ZGF0YS5FdmVudFJh",
            "Y2VSb2JvdEljb25Db25mLkV2ZW50UmFjZVJvYm90SWNvbk1hcEFCUGF0Y2hF",
            "bnRyeRpZChpFdmVudFJhY2VSb2JvdEljb25NYXBFbnRyeRILCgNrZXkYASAB",
            "KAUSKgoFdmFsdWUYAiABKAsyGy5yYXdkYXRhLkV2ZW50UmFjZVJvYm90SWNv",
            "bjoCOAEaZQocRXZlbnRSYWNlUm9ib3RJY29uTWFwQUJFbnRyeRILCgNrZXkY",
            "ASABKAkSNAoFdmFsdWUYAiABKAsyJS5yYXdkYXRhLkV2ZW50UmFjZVJvYm90",
            "SWNvbk1hcEFCVmFsdWU6AjgBGmoKIUV2ZW50UmFjZVJvYm90SWNvbk1hcEFC",
            "UGF0Y2hFbnRyeRILCgNrZXkYASABKAkSNAoFdmFsdWUYAiABKAsyJS5yYXdk",
            "YXRhLkV2ZW50UmFjZVJvYm90SWNvbk1hcEFCVmFsdWU6AjgBQj1aLWdpdGxh",
            "Yi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3ZGF0YaoCC2Zh",
            "dC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventRaceRobotIcon), global::fat.rawdata.EventRaceRobotIcon.Parser, new[]{ "Id", "Icon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventRaceRobotIconMapABValue), global::fat.rawdata.EventRaceRobotIconMapABValue.Parser, new[]{ "EventRaceRobotIconMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventRaceRobotIconConf), global::fat.rawdata.EventRaceRobotIconConf.Parser, new[]{ "EventRaceRobotIconMap", "EventRaceRobotIconMapAB", "EventRaceRobotIconMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventRaceRobotIcon",table="EventRaceRobotIconMap",table_wrapper="EventRaceRobotIconConf",map="true",map_key_type="int32",data="EventRaceRobotIconConf")
  /// annotation@ab(table_ab="EventRaceRobotIconMapAB",table_ab_patch="EventRaceRobotIconMapABPatch",table_ab_value="EventRaceRobotIconMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventRaceRobotIcon(id="id")
  /// </summary>
  public sealed partial class EventRaceRobotIcon : pb::IMessage<EventRaceRobotIcon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventRaceRobotIcon> _parser = new pb::MessageParser<EventRaceRobotIcon>(() => new EventRaceRobotIcon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRaceRobotIcon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventRaceRobotIconConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRobotIcon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRobotIcon(EventRaceRobotIcon other) : this() {
      id_ = other.id_;
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRobotIcon Clone() {
      return new EventRaceRobotIcon(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 2;
    private string icon_ = "";
    /// <summary>
    /// 小图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRaceRobotIcon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRaceRobotIcon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Icon != other.Icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRaceRobotIcon other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventRaceRobotIconMapABValue : pb::IMessage<EventRaceRobotIconMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventRaceRobotIconMapABValue> _parser = new pb::MessageParser<EventRaceRobotIconMapABValue>(() => new EventRaceRobotIconMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRaceRobotIconMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventRaceRobotIconConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRobotIconMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRobotIconMapABValue(EventRaceRobotIconMapABValue other) : this() {
      eventRaceRobotIconMap_ = other.eventRaceRobotIconMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRobotIconMapABValue Clone() {
      return new EventRaceRobotIconMapABValue(this);
    }

    /// <summary>Field number for the "EventRaceRobotIconMap" field.</summary>
    public const int EventRaceRobotIconMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventRaceRobotIcon>.Codec _map_eventRaceRobotIconMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventRaceRobotIcon>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRaceRobotIcon.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventRaceRobotIcon> eventRaceRobotIconMap_ = new pbc::MapField<int, global::fat.rawdata.EventRaceRobotIcon>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventRaceRobotIcon> EventRaceRobotIconMap {
      get { return eventRaceRobotIconMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRaceRobotIconMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRaceRobotIconMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventRaceRobotIconMap.Equals(other.EventRaceRobotIconMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventRaceRobotIconMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventRaceRobotIconMap_.WriteTo(output, _map_eventRaceRobotIconMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventRaceRobotIconMap_.WriteTo(ref output, _map_eventRaceRobotIconMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventRaceRobotIconMap_.CalculateSize(_map_eventRaceRobotIconMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRaceRobotIconMapABValue other) {
      if (other == null) {
        return;
      }
      eventRaceRobotIconMap_.Add(other.eventRaceRobotIconMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventRaceRobotIconMap_.AddEntriesFrom(input, _map_eventRaceRobotIconMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventRaceRobotIconMap_.AddEntriesFrom(ref input, _map_eventRaceRobotIconMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventRaceRobotIconConf : pb::IMessage<EventRaceRobotIconConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventRaceRobotIconConf> _parser = new pb::MessageParser<EventRaceRobotIconConf>(() => new EventRaceRobotIconConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRaceRobotIconConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventRaceRobotIconConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRobotIconConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRobotIconConf(EventRaceRobotIconConf other) : this() {
      eventRaceRobotIconMap_ = other.eventRaceRobotIconMap_.Clone();
      eventRaceRobotIconMapAB_ = other.eventRaceRobotIconMapAB_.Clone();
      eventRaceRobotIconMapABPatch_ = other.eventRaceRobotIconMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRobotIconConf Clone() {
      return new EventRaceRobotIconConf(this);
    }

    /// <summary>Field number for the "EventRaceRobotIconMap" field.</summary>
    public const int EventRaceRobotIconMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventRaceRobotIcon>.Codec _map_eventRaceRobotIconMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventRaceRobotIcon>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRaceRobotIcon.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventRaceRobotIcon> eventRaceRobotIconMap_ = new pbc::MapField<int, global::fat.rawdata.EventRaceRobotIcon>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventRaceRobotIcon> EventRaceRobotIconMap {
      get { return eventRaceRobotIconMap_; }
    }

    /// <summary>Field number for the "EventRaceRobotIconMapAB" field.</summary>
    public const int EventRaceRobotIconMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventRaceRobotIconMapABValue>.Codec _map_eventRaceRobotIconMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventRaceRobotIconMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRaceRobotIconMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventRaceRobotIconMapABValue> eventRaceRobotIconMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventRaceRobotIconMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventRaceRobotIconMapABValue> EventRaceRobotIconMapAB {
      get { return eventRaceRobotIconMapAB_; }
    }

    /// <summary>Field number for the "EventRaceRobotIconMapABPatch" field.</summary>
    public const int EventRaceRobotIconMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventRaceRobotIconMapABValue>.Codec _map_eventRaceRobotIconMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventRaceRobotIconMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRaceRobotIconMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventRaceRobotIconMapABValue> eventRaceRobotIconMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventRaceRobotIconMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventRaceRobotIconMapABValue> EventRaceRobotIconMapABPatch {
      get { return eventRaceRobotIconMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRaceRobotIconConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRaceRobotIconConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventRaceRobotIconMap.Equals(other.EventRaceRobotIconMap)) return false;
      if (!EventRaceRobotIconMapAB.Equals(other.EventRaceRobotIconMapAB)) return false;
      if (!EventRaceRobotIconMapABPatch.Equals(other.EventRaceRobotIconMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventRaceRobotIconMap.GetHashCode();
      hash ^= EventRaceRobotIconMapAB.GetHashCode();
      hash ^= EventRaceRobotIconMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventRaceRobotIconMap_.WriteTo(output, _map_eventRaceRobotIconMap_codec);
      eventRaceRobotIconMapAB_.WriteTo(output, _map_eventRaceRobotIconMapAB_codec);
      eventRaceRobotIconMapABPatch_.WriteTo(output, _map_eventRaceRobotIconMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventRaceRobotIconMap_.WriteTo(ref output, _map_eventRaceRobotIconMap_codec);
      eventRaceRobotIconMapAB_.WriteTo(ref output, _map_eventRaceRobotIconMapAB_codec);
      eventRaceRobotIconMapABPatch_.WriteTo(ref output, _map_eventRaceRobotIconMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventRaceRobotIconMap_.CalculateSize(_map_eventRaceRobotIconMap_codec);
      size += eventRaceRobotIconMapAB_.CalculateSize(_map_eventRaceRobotIconMapAB_codec);
      size += eventRaceRobotIconMapABPatch_.CalculateSize(_map_eventRaceRobotIconMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRaceRobotIconConf other) {
      if (other == null) {
        return;
      }
      eventRaceRobotIconMap_.Add(other.eventRaceRobotIconMap_);
      eventRaceRobotIconMapAB_.Add(other.eventRaceRobotIconMapAB_);
      eventRaceRobotIconMapABPatch_.Add(other.eventRaceRobotIconMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventRaceRobotIconMap_.AddEntriesFrom(input, _map_eventRaceRobotIconMap_codec);
            break;
          }
          case 18: {
            eventRaceRobotIconMapAB_.AddEntriesFrom(input, _map_eventRaceRobotIconMapAB_codec);
            break;
          }
          case 26: {
            eventRaceRobotIconMapABPatch_.AddEntriesFrom(input, _map_eventRaceRobotIconMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventRaceRobotIconMap_.AddEntriesFrom(ref input, _map_eventRaceRobotIconMap_codec);
            break;
          }
          case 18: {
            eventRaceRobotIconMapAB_.AddEntriesFrom(ref input, _map_eventRaceRobotIconMapAB_codec);
            break;
          }
          case 26: {
            eventRaceRobotIconMapABPatch_.AddEntriesFrom(ref input, _map_eventRaceRobotIconMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
