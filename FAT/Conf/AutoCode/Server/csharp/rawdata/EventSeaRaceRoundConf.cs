// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventSeaRaceRoundConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventSeaRaceRoundConf.proto</summary>
  public static partial class EventSeaRaceRoundConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventSeaRaceRoundConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventSeaRaceRoundConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNyYXdkYXRhL0V2ZW50U2VhUmFjZVJvdW5kQ29uZi5wcm90bxIHcmF3ZGF0",
            "YSJVChFFdmVudFNlYVJhY2VSb3VuZBIKCgJpZBgBIAEoBRIPCgdyb2JvdElk",
            "GAIgAygFEhMKC3JvdW5kUmV3YXJkGAMgAygFEg4KBnRhcmdldBgEIAEoCSLU",
            "AQobRXZlbnRTZWFSYWNlUm91bmRNYXBBQlZhbHVlElwKFEV2ZW50U2VhUmFj",
            "ZVJvdW5kTWFwGAEgAygLMj4ucmF3ZGF0YS5FdmVudFNlYVJhY2VSb3VuZE1h",
            "cEFCVmFsdWUuRXZlbnRTZWFSYWNlUm91bmRNYXBFbnRyeRpXChlFdmVudFNl",
            "YVJhY2VSb3VuZE1hcEVudHJ5EgsKA2tleRgBIAEoBRIpCgV2YWx1ZRgCIAEo",
            "CzIaLnJhd2RhdGEuRXZlbnRTZWFSYWNlUm91bmQ6AjgBItkEChVFdmVudFNl",
            "YVJhY2VSb3VuZENvbmYSVgoURXZlbnRTZWFSYWNlUm91bmRNYXAYASADKAsy",
            "OC5yYXdkYXRhLkV2ZW50U2VhUmFjZVJvdW5kQ29uZi5FdmVudFNlYVJhY2VS",
            "b3VuZE1hcEVudHJ5EloKFkV2ZW50U2VhUmFjZVJvdW5kTWFwQUIYAiADKAsy",
            "Oi5yYXdkYXRhLkV2ZW50U2VhUmFjZVJvdW5kQ29uZi5FdmVudFNlYVJhY2VS",
            "b3VuZE1hcEFCRW50cnkSZAobRXZlbnRTZWFSYWNlUm91bmRNYXBBQlBhdGNo",
            "GAMgAygLMj8ucmF3ZGF0YS5FdmVudFNlYVJhY2VSb3VuZENvbmYuRXZlbnRT",
            "ZWFSYWNlUm91bmRNYXBBQlBhdGNoRW50cnkaVwoZRXZlbnRTZWFSYWNlUm91",
            "bmRNYXBFbnRyeRILCgNrZXkYASABKAUSKQoFdmFsdWUYAiABKAsyGi5yYXdk",
            "YXRhLkV2ZW50U2VhUmFjZVJvdW5kOgI4ARpjChtFdmVudFNlYVJhY2VSb3Vu",
            "ZE1hcEFCRW50cnkSCwoDa2V5GAEgASgJEjMKBXZhbHVlGAIgASgLMiQucmF3",
            "ZGF0YS5FdmVudFNlYVJhY2VSb3VuZE1hcEFCVmFsdWU6AjgBGmgKIEV2ZW50",
            "U2VhUmFjZVJvdW5kTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIzCgV2",
            "YWx1ZRgCIAEoCzIkLnJhd2RhdGEuRXZlbnRTZWFSYWNlUm91bmRNYXBBQlZh",
            "bHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29s",
            "YW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventSeaRaceRound), global::fat.rawdata.EventSeaRaceRound.Parser, new[]{ "Id", "RobotId", "RoundReward", "Target" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventSeaRaceRoundMapABValue), global::fat.rawdata.EventSeaRaceRoundMapABValue.Parser, new[]{ "EventSeaRaceRoundMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventSeaRaceRoundConf), global::fat.rawdata.EventSeaRaceRoundConf.Parser, new[]{ "EventSeaRaceRoundMap", "EventSeaRaceRoundMapAB", "EventSeaRaceRoundMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventSeaRaceRound",table="EventSeaRaceRoundMap",table_wrapper="EventSeaRaceRoundConf",map="true",map_key_type="int32",data="EventSeaRaceRoundConf")
  /// annotation@ab(table_ab="EventSeaRaceRoundMapAB",table_ab_patch="EventSeaRaceRoundMapABPatch",table_ab_value="EventSeaRaceRoundMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventSeaRaceRound(id="id")
  /// </summary>
  public sealed partial class EventSeaRaceRound : pb::IMessage<EventSeaRaceRound>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventSeaRaceRound> _parser = new pb::MessageParser<EventSeaRaceRound>(() => new EventSeaRaceRound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSeaRaceRound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventSeaRaceRoundConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceRound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceRound(EventSeaRaceRound other) : this() {
      id_ = other.id_;
      robotId_ = other.robotId_.Clone();
      roundReward_ = other.roundReward_.Clone();
      target_ = other.target_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceRound Clone() {
      return new EventSeaRaceRound(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 回合id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "robotId" field.</summary>
    public const int RobotIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_robotId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> robotId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 机器人id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RobotId {
      get { return robotId_; }
    }

    /// <summary>Field number for the "roundReward" field.</summary>
    public const int RoundRewardFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_roundReward_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> roundReward_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 回合奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RoundReward {
      get { return roundReward_; }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 4;
    private string target_ = "";
    /// <summary>
    /// 任务目标数量
    /// 约定配置方式为：{数量:计算方式}；
    /// 参数2计算方式规则如下：
    /// 0 = 数量
    /// 3 = 数量*（等级系数/100），RoundCoin取整）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Target {
      get { return target_; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSeaRaceRound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSeaRaceRound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!robotId_.Equals(other.robotId_)) return false;
      if(!roundReward_.Equals(other.roundReward_)) return false;
      if (Target != other.Target) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= robotId_.GetHashCode();
      hash ^= roundReward_.GetHashCode();
      if (Target.Length != 0) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      robotId_.WriteTo(output, _repeated_robotId_codec);
      roundReward_.WriteTo(output, _repeated_roundReward_codec);
      if (Target.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      robotId_.WriteTo(ref output, _repeated_robotId_codec);
      roundReward_.WriteTo(ref output, _repeated_roundReward_codec);
      if (Target.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += robotId_.CalculateSize(_repeated_robotId_codec);
      size += roundReward_.CalculateSize(_repeated_roundReward_codec);
      if (Target.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSeaRaceRound other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      robotId_.Add(other.robotId_);
      roundReward_.Add(other.roundReward_);
      if (other.Target.Length != 0) {
        Target = other.Target;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            robotId_.AddEntriesFrom(input, _repeated_robotId_codec);
            break;
          }
          case 26:
          case 24: {
            roundReward_.AddEntriesFrom(input, _repeated_roundReward_codec);
            break;
          }
          case 34: {
            Target = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            robotId_.AddEntriesFrom(ref input, _repeated_robotId_codec);
            break;
          }
          case 26:
          case 24: {
            roundReward_.AddEntriesFrom(ref input, _repeated_roundReward_codec);
            break;
          }
          case 34: {
            Target = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventSeaRaceRoundMapABValue : pb::IMessage<EventSeaRaceRoundMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventSeaRaceRoundMapABValue> _parser = new pb::MessageParser<EventSeaRaceRoundMapABValue>(() => new EventSeaRaceRoundMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSeaRaceRoundMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventSeaRaceRoundConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceRoundMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceRoundMapABValue(EventSeaRaceRoundMapABValue other) : this() {
      eventSeaRaceRoundMap_ = other.eventSeaRaceRoundMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceRoundMapABValue Clone() {
      return new EventSeaRaceRoundMapABValue(this);
    }

    /// <summary>Field number for the "EventSeaRaceRoundMap" field.</summary>
    public const int EventSeaRaceRoundMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventSeaRaceRound>.Codec _map_eventSeaRaceRoundMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventSeaRaceRound>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRaceRound.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventSeaRaceRound> eventSeaRaceRoundMap_ = new pbc::MapField<int, global::fat.rawdata.EventSeaRaceRound>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventSeaRaceRound> EventSeaRaceRoundMap {
      get { return eventSeaRaceRoundMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSeaRaceRoundMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSeaRaceRoundMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventSeaRaceRoundMap.Equals(other.EventSeaRaceRoundMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventSeaRaceRoundMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventSeaRaceRoundMap_.WriteTo(output, _map_eventSeaRaceRoundMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventSeaRaceRoundMap_.WriteTo(ref output, _map_eventSeaRaceRoundMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventSeaRaceRoundMap_.CalculateSize(_map_eventSeaRaceRoundMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSeaRaceRoundMapABValue other) {
      if (other == null) {
        return;
      }
      eventSeaRaceRoundMap_.Add(other.eventSeaRaceRoundMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventSeaRaceRoundMap_.AddEntriesFrom(input, _map_eventSeaRaceRoundMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventSeaRaceRoundMap_.AddEntriesFrom(ref input, _map_eventSeaRaceRoundMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventSeaRaceRoundConf : pb::IMessage<EventSeaRaceRoundConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventSeaRaceRoundConf> _parser = new pb::MessageParser<EventSeaRaceRoundConf>(() => new EventSeaRaceRoundConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSeaRaceRoundConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventSeaRaceRoundConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceRoundConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceRoundConf(EventSeaRaceRoundConf other) : this() {
      eventSeaRaceRoundMap_ = other.eventSeaRaceRoundMap_.Clone();
      eventSeaRaceRoundMapAB_ = other.eventSeaRaceRoundMapAB_.Clone();
      eventSeaRaceRoundMapABPatch_ = other.eventSeaRaceRoundMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceRoundConf Clone() {
      return new EventSeaRaceRoundConf(this);
    }

    /// <summary>Field number for the "EventSeaRaceRoundMap" field.</summary>
    public const int EventSeaRaceRoundMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventSeaRaceRound>.Codec _map_eventSeaRaceRoundMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventSeaRaceRound>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRaceRound.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventSeaRaceRound> eventSeaRaceRoundMap_ = new pbc::MapField<int, global::fat.rawdata.EventSeaRaceRound>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventSeaRaceRound> EventSeaRaceRoundMap {
      get { return eventSeaRaceRoundMap_; }
    }

    /// <summary>Field number for the "EventSeaRaceRoundMapAB" field.</summary>
    public const int EventSeaRaceRoundMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceRoundMapABValue>.Codec _map_eventSeaRaceRoundMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceRoundMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRaceRoundMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceRoundMapABValue> eventSeaRaceRoundMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceRoundMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventSeaRaceRoundMapABValue> EventSeaRaceRoundMapAB {
      get { return eventSeaRaceRoundMapAB_; }
    }

    /// <summary>Field number for the "EventSeaRaceRoundMapABPatch" field.</summary>
    public const int EventSeaRaceRoundMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceRoundMapABValue>.Codec _map_eventSeaRaceRoundMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceRoundMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRaceRoundMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceRoundMapABValue> eventSeaRaceRoundMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceRoundMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventSeaRaceRoundMapABValue> EventSeaRaceRoundMapABPatch {
      get { return eventSeaRaceRoundMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSeaRaceRoundConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSeaRaceRoundConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventSeaRaceRoundMap.Equals(other.EventSeaRaceRoundMap)) return false;
      if (!EventSeaRaceRoundMapAB.Equals(other.EventSeaRaceRoundMapAB)) return false;
      if (!EventSeaRaceRoundMapABPatch.Equals(other.EventSeaRaceRoundMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventSeaRaceRoundMap.GetHashCode();
      hash ^= EventSeaRaceRoundMapAB.GetHashCode();
      hash ^= EventSeaRaceRoundMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventSeaRaceRoundMap_.WriteTo(output, _map_eventSeaRaceRoundMap_codec);
      eventSeaRaceRoundMapAB_.WriteTo(output, _map_eventSeaRaceRoundMapAB_codec);
      eventSeaRaceRoundMapABPatch_.WriteTo(output, _map_eventSeaRaceRoundMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventSeaRaceRoundMap_.WriteTo(ref output, _map_eventSeaRaceRoundMap_codec);
      eventSeaRaceRoundMapAB_.WriteTo(ref output, _map_eventSeaRaceRoundMapAB_codec);
      eventSeaRaceRoundMapABPatch_.WriteTo(ref output, _map_eventSeaRaceRoundMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventSeaRaceRoundMap_.CalculateSize(_map_eventSeaRaceRoundMap_codec);
      size += eventSeaRaceRoundMapAB_.CalculateSize(_map_eventSeaRaceRoundMapAB_codec);
      size += eventSeaRaceRoundMapABPatch_.CalculateSize(_map_eventSeaRaceRoundMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSeaRaceRoundConf other) {
      if (other == null) {
        return;
      }
      eventSeaRaceRoundMap_.Add(other.eventSeaRaceRoundMap_);
      eventSeaRaceRoundMapAB_.Add(other.eventSeaRaceRoundMapAB_);
      eventSeaRaceRoundMapABPatch_.Add(other.eventSeaRaceRoundMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventSeaRaceRoundMap_.AddEntriesFrom(input, _map_eventSeaRaceRoundMap_codec);
            break;
          }
          case 18: {
            eventSeaRaceRoundMapAB_.AddEntriesFrom(input, _map_eventSeaRaceRoundMapAB_codec);
            break;
          }
          case 26: {
            eventSeaRaceRoundMapABPatch_.AddEntriesFrom(input, _map_eventSeaRaceRoundMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventSeaRaceRoundMap_.AddEntriesFrom(ref input, _map_eventSeaRaceRoundMap_codec);
            break;
          }
          case 18: {
            eventSeaRaceRoundMapAB_.AddEntriesFrom(ref input, _map_eventSeaRaceRoundMapAB_codec);
            break;
          }
          case 26: {
            eventSeaRaceRoundMapABPatch_.AddEntriesFrom(ref input, _map_eventSeaRaceRoundMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
