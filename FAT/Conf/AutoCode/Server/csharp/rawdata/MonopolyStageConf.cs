// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/MonopolyStageConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/MonopolyStageConf.proto</summary>
  public static partial class MonopolyStageConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/MonopolyStageConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonopolyStageConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9yYXdkYXRhL01vbm9wb2x5U3RhZ2VDb25mLnByb3RvEgdyYXdkYXRhIroC",
            "Cg1Nb25vcG9seVN0YWdlEgoKAmlkGAEgASgFEhAKCGNvbENvdW50GAIgASgF",
            "EhEKCWRpY2VSb3V0ZRgDIAMoBRISCgppZkZpeFJvdXRlGAQgASgIEg8KB2tl",
            "eUdyaWQYBSADKAkSCwoDbGFwGAYgASgFEhEKCWxhcFJld2FyZBgHIAMoCRIW",
            "Cg5vdXRwdXRGaXhlZE9uZRgIIAEoCRISCgpvdXRwdXRzT25lGAkgAygJEhAK",
            "CHJvd0NvdW50GAogASgFEhMKC3N0YWdlUmV3YXJkGAsgAygJEhcKD3N0YWdl",
            "UmV3YXJkSWNvbhgMIAEoCRIbChNzdGFnZVJld2FyZEljb25EYXJrGA0gASgJ",
            "EhIKCnN0YWdlUm91dGUYDiADKAkSFgoOd2l0aG91dHB1dFRpbWUYDyADKAUi",
            "vAEKF01vbm9wb2x5U3RhZ2VNYXBBQlZhbHVlElAKEE1vbm9wb2x5U3RhZ2VN",
            "YXAYASADKAsyNi5yYXdkYXRhLk1vbm9wb2x5U3RhZ2VNYXBBQlZhbHVlLk1v",
            "bm9wb2x5U3RhZ2VNYXBFbnRyeRpPChVNb25vcG9seVN0YWdlTWFwRW50cnkS",
            "CwoDa2V5GAEgASgFEiUKBXZhbHVlGAIgASgLMhYucmF3ZGF0YS5Nb25vcG9s",
            "eVN0YWdlOgI4ASKZBAoRTW9ub3BvbHlTdGFnZUNvbmYSSgoQTW9ub3BvbHlT",
            "dGFnZU1hcBgBIAMoCzIwLnJhd2RhdGEuTW9ub3BvbHlTdGFnZUNvbmYuTW9u",
            "b3BvbHlTdGFnZU1hcEVudHJ5Ek4KEk1vbm9wb2x5U3RhZ2VNYXBBQhgCIAMo",
            "CzIyLnJhd2RhdGEuTW9ub3BvbHlTdGFnZUNvbmYuTW9ub3BvbHlTdGFnZU1h",
            "cEFCRW50cnkSWAoXTW9ub3BvbHlTdGFnZU1hcEFCUGF0Y2gYAyADKAsyNy5y",
            "YXdkYXRhLk1vbm9wb2x5U3RhZ2VDb25mLk1vbm9wb2x5U3RhZ2VNYXBBQlBh",
            "dGNoRW50cnkaTwoVTW9ub3BvbHlTdGFnZU1hcEVudHJ5EgsKA2tleRgBIAEo",
            "BRIlCgV2YWx1ZRgCIAEoCzIWLnJhd2RhdGEuTW9ub3BvbHlTdGFnZToCOAEa",
            "WwoXTW9ub3BvbHlTdGFnZU1hcEFCRW50cnkSCwoDa2V5GAEgASgJEi8KBXZh",
            "bHVlGAIgASgLMiAucmF3ZGF0YS5Nb25vcG9seVN0YWdlTWFwQUJWYWx1ZToC",
            "OAEaYAocTW9ub3BvbHlTdGFnZU1hcEFCUGF0Y2hFbnRyeRILCgNrZXkYASAB",
            "KAkSLwoFdmFsdWUYAiABKAsyIC5yYXdkYXRhLk1vbm9wb2x5U3RhZ2VNYXBB",
            "QlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4v",
            "Z29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MonopolyStage), global::fat.rawdata.MonopolyStage.Parser, new[]{ "Id", "ColCount", "DiceRoute", "IfFixRoute", "KeyGrid", "Lap", "LapReward", "OutputFixedOne", "OutputsOne", "RowCount", "StageReward", "StageRewardIcon", "StageRewardIconDark", "StageRoute", "WithoutputTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MonopolyStageMapABValue), global::fat.rawdata.MonopolyStageMapABValue.Parser, new[]{ "MonopolyStageMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MonopolyStageConf), global::fat.rawdata.MonopolyStageConf.Parser, new[]{ "MonopolyStageMap", "MonopolyStageMapAB", "MonopolyStageMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="MonopolyStage",table="MonopolyStageMap",table_wrapper="MonopolyStageConf",map="true",map_key_type="int32",data="MonopolyStageConf")
  /// annotation@ab(table_ab="MonopolyStageMapAB",table_ab_patch="MonopolyStageMapABPatch",table_ab_value="MonopolyStageMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@MonopolyStage(id="id")
  /// </summary>
  public sealed partial class MonopolyStage : pb::IMessage<MonopolyStage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonopolyStage> _parser = new pb::MessageParser<MonopolyStage>(() => new MonopolyStage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonopolyStage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MonopolyStageConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyStage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyStage(MonopolyStage other) : this() {
      id_ = other.id_;
      colCount_ = other.colCount_;
      diceRoute_ = other.diceRoute_.Clone();
      ifFixRoute_ = other.ifFixRoute_;
      keyGrid_ = other.keyGrid_.Clone();
      lap_ = other.lap_;
      lapReward_ = other.lapReward_.Clone();
      outputFixedOne_ = other.outputFixedOne_;
      outputsOne_ = other.outputsOne_.Clone();
      rowCount_ = other.rowCount_;
      stageReward_ = other.stageReward_.Clone();
      stageRewardIcon_ = other.stageRewardIcon_;
      stageRewardIconDark_ = other.stageRewardIconDark_;
      stageRoute_ = other.stageRoute_.Clone();
      withoutputTime_ = other.withoutputTime_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyStage Clone() {
      return new MonopolyStage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 关卡id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "colCount" field.</summary>
    public const int ColCountFieldNumber = 2;
    private int colCount_;
    /// <summary>
    /// 大富翁棋盘列数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColCount {
      get { return colCount_; }
      set {
        colCount_ = value;
      }
    }

    /// <summary>Field number for the "diceRoute" field.</summary>
    public const int DiceRouteFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_diceRoute_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> diceRoute_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 骰子点数集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DiceRoute {
      get { return diceRoute_; }
    }

    /// <summary>Field number for the "ifFixRoute" field.</summary>
    public const int IfFixRouteFieldNumber = 4;
    private bool ifFixRoute_;
    /// <summary>
    /// 是否固定路线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IfFixRoute {
      get { return ifFixRoute_; }
      set {
        ifFixRoute_ = value;
      }
    }

    /// <summary>Field number for the "keyGrid" field.</summary>
    public const int KeyGridFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_keyGrid_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> keyGrid_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 特殊格子
    /// （格子id:次数）
    /// （最多配置7个）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> KeyGrid {
      get { return keyGrid_; }
    }

    /// <summary>Field number for the "lap" field.</summary>
    public const int LapFieldNumber = 6;
    private int lap_;
    /// <summary>
    /// 关卡圈数
    /// （-1为循环关卡）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lap {
      get { return lap_; }
      set {
        lap_ = value;
      }
    }

    /// <summary>Field number for the "lapReward" field.</summary>
    public const int LapRewardFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_lapReward_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> lapReward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 圈数奖励
    /// （只有循环关可配置）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LapReward {
      get { return lapReward_; }
    }

    /// <summary>Field number for the "outputFixedOne" field.</summary>
    public const int OutputFixedOneFieldNumber = 8;
    private string outputFixedOne_ = "";
    /// <summary>
    /// 耗体1保底掉落
    /// （棋子id:数量）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OutputFixedOne {
      get { return outputFixedOne_; }
      set {
        outputFixedOne_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "outputsOne" field.</summary>
    public const int OutputsOneFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_outputsOne_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> outputsOne_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 耗体1活动棋子产出
    /// （棋子id:数量:权重）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> OutputsOne {
      get { return outputsOne_; }
    }

    /// <summary>Field number for the "rowCount" field.</summary>
    public const int RowCountFieldNumber = 10;
    private int rowCount_;
    /// <summary>
    /// 大富翁棋盘行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RowCount {
      get { return rowCount_; }
      set {
        rowCount_ = value;
      }
    }

    /// <summary>Field number for the "stageReward" field.</summary>
    public const int StageRewardFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_stageReward_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> stageReward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 关卡奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StageReward {
      get { return stageReward_; }
    }

    /// <summary>Field number for the "stageRewardIcon" field.</summary>
    public const int StageRewardIconFieldNumber = 12;
    private string stageRewardIcon_ = "";
    /// <summary>
    /// 关卡奖励宝箱icon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StageRewardIcon {
      get { return stageRewardIcon_; }
      set {
        stageRewardIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stageRewardIconDark" field.</summary>
    public const int StageRewardIconDarkFieldNumber = 13;
    private string stageRewardIconDark_ = "";
    /// <summary>
    /// 关卡奖励宝箱icon剪影
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StageRewardIconDark {
      get { return stageRewardIconDark_; }
      set {
        stageRewardIconDark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stageRoute" field.</summary>
    public const int StageRouteFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_stageRoute_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> stageRoute_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 大富翁棋盘盘面 第0列
    /// （MonopolyGrid.id）
    /// （格式：x:y:格子id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StageRoute {
      get { return stageRoute_; }
    }

    /// <summary>Field number for the "withoutputTime" field.</summary>
    public const int WithoutputTimeFieldNumber = 15;
    private static readonly pb::FieldCodec<int> _repeated_withoutputTime_codec
        = pb::FieldCodec.ForInt32(122);
    private readonly pbc::RepeatedField<int> withoutputTime_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 连续不掉落次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WithoutputTime {
      get { return withoutputTime_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonopolyStage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonopolyStage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ColCount != other.ColCount) return false;
      if(!diceRoute_.Equals(other.diceRoute_)) return false;
      if (IfFixRoute != other.IfFixRoute) return false;
      if(!keyGrid_.Equals(other.keyGrid_)) return false;
      if (Lap != other.Lap) return false;
      if(!lapReward_.Equals(other.lapReward_)) return false;
      if (OutputFixedOne != other.OutputFixedOne) return false;
      if(!outputsOne_.Equals(other.outputsOne_)) return false;
      if (RowCount != other.RowCount) return false;
      if(!stageReward_.Equals(other.stageReward_)) return false;
      if (StageRewardIcon != other.StageRewardIcon) return false;
      if (StageRewardIconDark != other.StageRewardIconDark) return false;
      if(!stageRoute_.Equals(other.stageRoute_)) return false;
      if(!withoutputTime_.Equals(other.withoutputTime_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ColCount != 0) hash ^= ColCount.GetHashCode();
      hash ^= diceRoute_.GetHashCode();
      if (IfFixRoute != false) hash ^= IfFixRoute.GetHashCode();
      hash ^= keyGrid_.GetHashCode();
      if (Lap != 0) hash ^= Lap.GetHashCode();
      hash ^= lapReward_.GetHashCode();
      if (OutputFixedOne.Length != 0) hash ^= OutputFixedOne.GetHashCode();
      hash ^= outputsOne_.GetHashCode();
      if (RowCount != 0) hash ^= RowCount.GetHashCode();
      hash ^= stageReward_.GetHashCode();
      if (StageRewardIcon.Length != 0) hash ^= StageRewardIcon.GetHashCode();
      if (StageRewardIconDark.Length != 0) hash ^= StageRewardIconDark.GetHashCode();
      hash ^= stageRoute_.GetHashCode();
      hash ^= withoutputTime_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ColCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ColCount);
      }
      diceRoute_.WriteTo(output, _repeated_diceRoute_codec);
      if (IfFixRoute != false) {
        output.WriteRawTag(32);
        output.WriteBool(IfFixRoute);
      }
      keyGrid_.WriteTo(output, _repeated_keyGrid_codec);
      if (Lap != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Lap);
      }
      lapReward_.WriteTo(output, _repeated_lapReward_codec);
      if (OutputFixedOne.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(OutputFixedOne);
      }
      outputsOne_.WriteTo(output, _repeated_outputsOne_codec);
      if (RowCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RowCount);
      }
      stageReward_.WriteTo(output, _repeated_stageReward_codec);
      if (StageRewardIcon.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(StageRewardIcon);
      }
      if (StageRewardIconDark.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(StageRewardIconDark);
      }
      stageRoute_.WriteTo(output, _repeated_stageRoute_codec);
      withoutputTime_.WriteTo(output, _repeated_withoutputTime_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ColCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ColCount);
      }
      diceRoute_.WriteTo(ref output, _repeated_diceRoute_codec);
      if (IfFixRoute != false) {
        output.WriteRawTag(32);
        output.WriteBool(IfFixRoute);
      }
      keyGrid_.WriteTo(ref output, _repeated_keyGrid_codec);
      if (Lap != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Lap);
      }
      lapReward_.WriteTo(ref output, _repeated_lapReward_codec);
      if (OutputFixedOne.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(OutputFixedOne);
      }
      outputsOne_.WriteTo(ref output, _repeated_outputsOne_codec);
      if (RowCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RowCount);
      }
      stageReward_.WriteTo(ref output, _repeated_stageReward_codec);
      if (StageRewardIcon.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(StageRewardIcon);
      }
      if (StageRewardIconDark.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(StageRewardIconDark);
      }
      stageRoute_.WriteTo(ref output, _repeated_stageRoute_codec);
      withoutputTime_.WriteTo(ref output, _repeated_withoutputTime_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ColCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColCount);
      }
      size += diceRoute_.CalculateSize(_repeated_diceRoute_codec);
      if (IfFixRoute != false) {
        size += 1 + 1;
      }
      size += keyGrid_.CalculateSize(_repeated_keyGrid_codec);
      if (Lap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lap);
      }
      size += lapReward_.CalculateSize(_repeated_lapReward_codec);
      if (OutputFixedOne.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OutputFixedOne);
      }
      size += outputsOne_.CalculateSize(_repeated_outputsOne_codec);
      if (RowCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RowCount);
      }
      size += stageReward_.CalculateSize(_repeated_stageReward_codec);
      if (StageRewardIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StageRewardIcon);
      }
      if (StageRewardIconDark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StageRewardIconDark);
      }
      size += stageRoute_.CalculateSize(_repeated_stageRoute_codec);
      size += withoutputTime_.CalculateSize(_repeated_withoutputTime_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonopolyStage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ColCount != 0) {
        ColCount = other.ColCount;
      }
      diceRoute_.Add(other.diceRoute_);
      if (other.IfFixRoute != false) {
        IfFixRoute = other.IfFixRoute;
      }
      keyGrid_.Add(other.keyGrid_);
      if (other.Lap != 0) {
        Lap = other.Lap;
      }
      lapReward_.Add(other.lapReward_);
      if (other.OutputFixedOne.Length != 0) {
        OutputFixedOne = other.OutputFixedOne;
      }
      outputsOne_.Add(other.outputsOne_);
      if (other.RowCount != 0) {
        RowCount = other.RowCount;
      }
      stageReward_.Add(other.stageReward_);
      if (other.StageRewardIcon.Length != 0) {
        StageRewardIcon = other.StageRewardIcon;
      }
      if (other.StageRewardIconDark.Length != 0) {
        StageRewardIconDark = other.StageRewardIconDark;
      }
      stageRoute_.Add(other.stageRoute_);
      withoutputTime_.Add(other.withoutputTime_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ColCount = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            diceRoute_.AddEntriesFrom(input, _repeated_diceRoute_codec);
            break;
          }
          case 32: {
            IfFixRoute = input.ReadBool();
            break;
          }
          case 42: {
            keyGrid_.AddEntriesFrom(input, _repeated_keyGrid_codec);
            break;
          }
          case 48: {
            Lap = input.ReadInt32();
            break;
          }
          case 58: {
            lapReward_.AddEntriesFrom(input, _repeated_lapReward_codec);
            break;
          }
          case 66: {
            OutputFixedOne = input.ReadString();
            break;
          }
          case 74: {
            outputsOne_.AddEntriesFrom(input, _repeated_outputsOne_codec);
            break;
          }
          case 80: {
            RowCount = input.ReadInt32();
            break;
          }
          case 90: {
            stageReward_.AddEntriesFrom(input, _repeated_stageReward_codec);
            break;
          }
          case 98: {
            StageRewardIcon = input.ReadString();
            break;
          }
          case 106: {
            StageRewardIconDark = input.ReadString();
            break;
          }
          case 114: {
            stageRoute_.AddEntriesFrom(input, _repeated_stageRoute_codec);
            break;
          }
          case 122:
          case 120: {
            withoutputTime_.AddEntriesFrom(input, _repeated_withoutputTime_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ColCount = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            diceRoute_.AddEntriesFrom(ref input, _repeated_diceRoute_codec);
            break;
          }
          case 32: {
            IfFixRoute = input.ReadBool();
            break;
          }
          case 42: {
            keyGrid_.AddEntriesFrom(ref input, _repeated_keyGrid_codec);
            break;
          }
          case 48: {
            Lap = input.ReadInt32();
            break;
          }
          case 58: {
            lapReward_.AddEntriesFrom(ref input, _repeated_lapReward_codec);
            break;
          }
          case 66: {
            OutputFixedOne = input.ReadString();
            break;
          }
          case 74: {
            outputsOne_.AddEntriesFrom(ref input, _repeated_outputsOne_codec);
            break;
          }
          case 80: {
            RowCount = input.ReadInt32();
            break;
          }
          case 90: {
            stageReward_.AddEntriesFrom(ref input, _repeated_stageReward_codec);
            break;
          }
          case 98: {
            StageRewardIcon = input.ReadString();
            break;
          }
          case 106: {
            StageRewardIconDark = input.ReadString();
            break;
          }
          case 114: {
            stageRoute_.AddEntriesFrom(ref input, _repeated_stageRoute_codec);
            break;
          }
          case 122:
          case 120: {
            withoutputTime_.AddEntriesFrom(ref input, _repeated_withoutputTime_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MonopolyStageMapABValue : pb::IMessage<MonopolyStageMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonopolyStageMapABValue> _parser = new pb::MessageParser<MonopolyStageMapABValue>(() => new MonopolyStageMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonopolyStageMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MonopolyStageConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyStageMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyStageMapABValue(MonopolyStageMapABValue other) : this() {
      monopolyStageMap_ = other.monopolyStageMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyStageMapABValue Clone() {
      return new MonopolyStageMapABValue(this);
    }

    /// <summary>Field number for the "MonopolyStageMap" field.</summary>
    public const int MonopolyStageMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MonopolyStage>.Codec _map_monopolyStageMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MonopolyStage>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyStage.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MonopolyStage> monopolyStageMap_ = new pbc::MapField<int, global::fat.rawdata.MonopolyStage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MonopolyStage> MonopolyStageMap {
      get { return monopolyStageMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonopolyStageMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonopolyStageMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MonopolyStageMap.Equals(other.MonopolyStageMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MonopolyStageMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      monopolyStageMap_.WriteTo(output, _map_monopolyStageMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      monopolyStageMap_.WriteTo(ref output, _map_monopolyStageMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monopolyStageMap_.CalculateSize(_map_monopolyStageMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonopolyStageMapABValue other) {
      if (other == null) {
        return;
      }
      monopolyStageMap_.Add(other.monopolyStageMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            monopolyStageMap_.AddEntriesFrom(input, _map_monopolyStageMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            monopolyStageMap_.AddEntriesFrom(ref input, _map_monopolyStageMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MonopolyStageConf : pb::IMessage<MonopolyStageConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonopolyStageConf> _parser = new pb::MessageParser<MonopolyStageConf>(() => new MonopolyStageConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonopolyStageConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MonopolyStageConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyStageConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyStageConf(MonopolyStageConf other) : this() {
      monopolyStageMap_ = other.monopolyStageMap_.Clone();
      monopolyStageMapAB_ = other.monopolyStageMapAB_.Clone();
      monopolyStageMapABPatch_ = other.monopolyStageMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyStageConf Clone() {
      return new MonopolyStageConf(this);
    }

    /// <summary>Field number for the "MonopolyStageMap" field.</summary>
    public const int MonopolyStageMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MonopolyStage>.Codec _map_monopolyStageMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MonopolyStage>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyStage.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MonopolyStage> monopolyStageMap_ = new pbc::MapField<int, global::fat.rawdata.MonopolyStage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MonopolyStage> MonopolyStageMap {
      get { return monopolyStageMap_; }
    }

    /// <summary>Field number for the "MonopolyStageMapAB" field.</summary>
    public const int MonopolyStageMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.MonopolyStageMapABValue>.Codec _map_monopolyStageMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.MonopolyStageMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyStageMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.MonopolyStageMapABValue> monopolyStageMapAB_ = new pbc::MapField<string, global::fat.rawdata.MonopolyStageMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MonopolyStageMapABValue> MonopolyStageMapAB {
      get { return monopolyStageMapAB_; }
    }

    /// <summary>Field number for the "MonopolyStageMapABPatch" field.</summary>
    public const int MonopolyStageMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.MonopolyStageMapABValue>.Codec _map_monopolyStageMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.MonopolyStageMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyStageMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.MonopolyStageMapABValue> monopolyStageMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.MonopolyStageMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MonopolyStageMapABValue> MonopolyStageMapABPatch {
      get { return monopolyStageMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonopolyStageConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonopolyStageConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MonopolyStageMap.Equals(other.MonopolyStageMap)) return false;
      if (!MonopolyStageMapAB.Equals(other.MonopolyStageMapAB)) return false;
      if (!MonopolyStageMapABPatch.Equals(other.MonopolyStageMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MonopolyStageMap.GetHashCode();
      hash ^= MonopolyStageMapAB.GetHashCode();
      hash ^= MonopolyStageMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      monopolyStageMap_.WriteTo(output, _map_monopolyStageMap_codec);
      monopolyStageMapAB_.WriteTo(output, _map_monopolyStageMapAB_codec);
      monopolyStageMapABPatch_.WriteTo(output, _map_monopolyStageMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      monopolyStageMap_.WriteTo(ref output, _map_monopolyStageMap_codec);
      monopolyStageMapAB_.WriteTo(ref output, _map_monopolyStageMapAB_codec);
      monopolyStageMapABPatch_.WriteTo(ref output, _map_monopolyStageMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monopolyStageMap_.CalculateSize(_map_monopolyStageMap_codec);
      size += monopolyStageMapAB_.CalculateSize(_map_monopolyStageMapAB_codec);
      size += monopolyStageMapABPatch_.CalculateSize(_map_monopolyStageMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonopolyStageConf other) {
      if (other == null) {
        return;
      }
      monopolyStageMap_.Add(other.monopolyStageMap_);
      monopolyStageMapAB_.Add(other.monopolyStageMapAB_);
      monopolyStageMapABPatch_.Add(other.monopolyStageMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            monopolyStageMap_.AddEntriesFrom(input, _map_monopolyStageMap_codec);
            break;
          }
          case 18: {
            monopolyStageMapAB_.AddEntriesFrom(input, _map_monopolyStageMapAB_codec);
            break;
          }
          case 26: {
            monopolyStageMapABPatch_.AddEntriesFrom(input, _map_monopolyStageMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            monopolyStageMap_.AddEntriesFrom(ref input, _map_monopolyStageMap_codec);
            break;
          }
          case 18: {
            monopolyStageMapAB_.AddEntriesFrom(ref input, _map_monopolyStageMapAB_codec);
            break;
          }
          case 26: {
            monopolyStageMapABPatch_.AddEntriesFrom(ref input, _map_monopolyStageMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
