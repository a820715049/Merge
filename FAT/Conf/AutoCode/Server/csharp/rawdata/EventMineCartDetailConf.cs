// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventMineCartDetailConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventMineCartDetailConf.proto</summary>
  public static partial class EventMineCartDetailConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventMineCartDetailConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventMineCartDetailConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVyYXdkYXRhL0V2ZW50TWluZUNhcnREZXRhaWxDb25mLnByb3RvEgdyYXdk",
            "YXRhIpoBChNFdmVudE1pbmVDYXJ0RGV0YWlsEgoKAmlkGAEgASgFEg8KB2Jv",
            "YXJkSWQYAiABKAUSEgoKY3ljbGVSb3VuZBgEIAEoBRIMCgRkaWZmGAYgASgF",
            "Eg4KBmRyb3BJZBgHIAMoBRIQCghmcmVlSXRlbRgIIAMoCRIRCglvcmRlckl0",
            "ZW0YCSADKAUSDwoHcm91bmRJZBgKIAMoBSLgAQodRXZlbnRNaW5lQ2FydERl",
            "dGFpbE1hcEFCVmFsdWUSYgoWRXZlbnRNaW5lQ2FydERldGFpbE1hcBgBIAMo",
            "CzJCLnJhd2RhdGEuRXZlbnRNaW5lQ2FydERldGFpbE1hcEFCVmFsdWUuRXZl",
            "bnRNaW5lQ2FydERldGFpbE1hcEVudHJ5GlsKG0V2ZW50TWluZUNhcnREZXRh",
            "aWxNYXBFbnRyeRILCgNrZXkYASABKAUSKwoFdmFsdWUYAiABKAsyHC5yYXdk",
            "YXRhLkV2ZW50TWluZUNhcnREZXRhaWw6AjgBIvkEChdFdmVudE1pbmVDYXJ0",
            "RGV0YWlsQ29uZhJcChZFdmVudE1pbmVDYXJ0RGV0YWlsTWFwGAEgAygLMjwu",
            "cmF3ZGF0YS5FdmVudE1pbmVDYXJ0RGV0YWlsQ29uZi5FdmVudE1pbmVDYXJ0",
            "RGV0YWlsTWFwRW50cnkSYAoYRXZlbnRNaW5lQ2FydERldGFpbE1hcEFCGAIg",
            "AygLMj4ucmF3ZGF0YS5FdmVudE1pbmVDYXJ0RGV0YWlsQ29uZi5FdmVudE1p",
            "bmVDYXJ0RGV0YWlsTWFwQUJFbnRyeRJqCh1FdmVudE1pbmVDYXJ0RGV0YWls",
            "TWFwQUJQYXRjaBgDIAMoCzJDLnJhd2RhdGEuRXZlbnRNaW5lQ2FydERldGFp",
            "bENvbmYuRXZlbnRNaW5lQ2FydERldGFpbE1hcEFCUGF0Y2hFbnRyeRpbChtF",
            "dmVudE1pbmVDYXJ0RGV0YWlsTWFwRW50cnkSCwoDa2V5GAEgASgFEisKBXZh",
            "bHVlGAIgASgLMhwucmF3ZGF0YS5FdmVudE1pbmVDYXJ0RGV0YWlsOgI4ARpn",
            "Ch1FdmVudE1pbmVDYXJ0RGV0YWlsTWFwQUJFbnRyeRILCgNrZXkYASABKAkS",
            "NQoFdmFsdWUYAiABKAsyJi5yYXdkYXRhLkV2ZW50TWluZUNhcnREZXRhaWxN",
            "YXBBQlZhbHVlOgI4ARpsCiJFdmVudE1pbmVDYXJ0RGV0YWlsTWFwQUJQYXRj",
            "aEVudHJ5EgsKA2tleRgBIAEoCRI1CgV2YWx1ZRgCIAEoCzImLnJhd2RhdGEu",
            "RXZlbnRNaW5lQ2FydERldGFpbE1hcEFCVmFsdWU6AjgBQj1aLWdpdGxhYi5m",
            "dW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3ZGF0YaoCC2ZhdC5y",
            "YXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMineCartDetail), global::fat.rawdata.EventMineCartDetail.Parser, new[]{ "Id", "BoardId", "CycleRound", "Diff", "DropId", "FreeItem", "OrderItem", "RoundId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMineCartDetailMapABValue), global::fat.rawdata.EventMineCartDetailMapABValue.Parser, new[]{ "EventMineCartDetailMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMineCartDetailConf), global::fat.rawdata.EventMineCartDetailConf.Parser, new[]{ "EventMineCartDetailMap", "EventMineCartDetailMapAB", "EventMineCartDetailMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventMineCartDetail",table="EventMineCartDetailMap",table_wrapper="EventMineCartDetailConf",map="true",map_key_type="int32",data="EventMineCartDetailConf")
  /// annotation@ab(table_ab="EventMineCartDetailMapAB",table_ab_patch="EventMineCartDetailMapABPatch",table_ab_value="EventMineCartDetailMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventMineCartDetail(id="id")
  /// </summary>
  public sealed partial class EventMineCartDetail : pb::IMessage<EventMineCartDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMineCartDetail> _parser = new pb::MessageParser<EventMineCartDetail>(() => new EventMineCartDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMineCartDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMineCartDetailConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartDetail(EventMineCartDetail other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      cycleRound_ = other.cycleRound_;
      diff_ = other.diff_;
      dropId_ = other.dropId_.Clone();
      freeItem_ = other.freeItem_.Clone();
      orderItem_ = other.orderItem_.Clone();
      roundId_ = other.roundId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartDetail Clone() {
      return new EventMineCartDetail(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动详情id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 棋盘id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "cycleRound" field.</summary>
    public const int CycleRoundFieldNumber = 4;
    private int cycleRound_;
    /// <summary>
    /// 指定循环回合id
    /// （EventMineCartRound.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CycleRound {
      get { return cycleRound_; }
      set {
        cycleRound_ = value;
      }
    }

    /// <summary>Field number for the "diff" field.</summary>
    public const int DiffFieldNumber = 6;
    private int diff_;
    /// <summary>
    /// 活动难度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diff {
      get { return diff_; }
      set {
        diff_ = value;
      }
    }

    /// <summary>Field number for the "dropId" field.</summary>
    public const int DropIdFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_dropId_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> dropId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 耗体掉落详情id
    /// (EventMineCartDrop.id)
    /// 与回合总数绑定，超过配置位数时循环使用最后一位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DropId {
      get { return dropId_; }
    }

    /// <summary>Field number for the "freeItem" field.</summary>
    public const int FreeItemFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_freeItem_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> freeItem_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 初始赠送棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FreeItem {
      get { return freeItem_; }
    }

    /// <summary>Field number for the "orderItem" field.</summary>
    public const int OrderItemFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_orderItem_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> orderItem_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 订单产棋子
    /// (EventMineCartOrderItem.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> OrderItem {
      get { return orderItem_; }
    }

    /// <summary>Field number for the "roundId" field.</summary>
    public const int RoundIdFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_roundId_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> roundId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 回合里程碑详情id
    /// （EventMineCartRound.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RoundId {
      get { return roundId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMineCartDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMineCartDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (CycleRound != other.CycleRound) return false;
      if (Diff != other.Diff) return false;
      if(!dropId_.Equals(other.dropId_)) return false;
      if(!freeItem_.Equals(other.freeItem_)) return false;
      if(!orderItem_.Equals(other.orderItem_)) return false;
      if(!roundId_.Equals(other.roundId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (CycleRound != 0) hash ^= CycleRound.GetHashCode();
      if (Diff != 0) hash ^= Diff.GetHashCode();
      hash ^= dropId_.GetHashCode();
      hash ^= freeItem_.GetHashCode();
      hash ^= orderItem_.GetHashCode();
      hash ^= roundId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (CycleRound != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CycleRound);
      }
      if (Diff != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Diff);
      }
      dropId_.WriteTo(output, _repeated_dropId_codec);
      freeItem_.WriteTo(output, _repeated_freeItem_codec);
      orderItem_.WriteTo(output, _repeated_orderItem_codec);
      roundId_.WriteTo(output, _repeated_roundId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (CycleRound != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CycleRound);
      }
      if (Diff != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Diff);
      }
      dropId_.WriteTo(ref output, _repeated_dropId_codec);
      freeItem_.WriteTo(ref output, _repeated_freeItem_codec);
      orderItem_.WriteTo(ref output, _repeated_orderItem_codec);
      roundId_.WriteTo(ref output, _repeated_roundId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (CycleRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CycleRound);
      }
      if (Diff != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diff);
      }
      size += dropId_.CalculateSize(_repeated_dropId_codec);
      size += freeItem_.CalculateSize(_repeated_freeItem_codec);
      size += orderItem_.CalculateSize(_repeated_orderItem_codec);
      size += roundId_.CalculateSize(_repeated_roundId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMineCartDetail other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.CycleRound != 0) {
        CycleRound = other.CycleRound;
      }
      if (other.Diff != 0) {
        Diff = other.Diff;
      }
      dropId_.Add(other.dropId_);
      freeItem_.Add(other.freeItem_);
      orderItem_.Add(other.orderItem_);
      roundId_.Add(other.roundId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 32: {
            CycleRound = input.ReadInt32();
            break;
          }
          case 48: {
            Diff = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            dropId_.AddEntriesFrom(input, _repeated_dropId_codec);
            break;
          }
          case 66: {
            freeItem_.AddEntriesFrom(input, _repeated_freeItem_codec);
            break;
          }
          case 74:
          case 72: {
            orderItem_.AddEntriesFrom(input, _repeated_orderItem_codec);
            break;
          }
          case 82:
          case 80: {
            roundId_.AddEntriesFrom(input, _repeated_roundId_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 32: {
            CycleRound = input.ReadInt32();
            break;
          }
          case 48: {
            Diff = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            dropId_.AddEntriesFrom(ref input, _repeated_dropId_codec);
            break;
          }
          case 66: {
            freeItem_.AddEntriesFrom(ref input, _repeated_freeItem_codec);
            break;
          }
          case 74:
          case 72: {
            orderItem_.AddEntriesFrom(ref input, _repeated_orderItem_codec);
            break;
          }
          case 82:
          case 80: {
            roundId_.AddEntriesFrom(ref input, _repeated_roundId_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMineCartDetailMapABValue : pb::IMessage<EventMineCartDetailMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMineCartDetailMapABValue> _parser = new pb::MessageParser<EventMineCartDetailMapABValue>(() => new EventMineCartDetailMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMineCartDetailMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMineCartDetailConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartDetailMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartDetailMapABValue(EventMineCartDetailMapABValue other) : this() {
      eventMineCartDetailMap_ = other.eventMineCartDetailMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartDetailMapABValue Clone() {
      return new EventMineCartDetailMapABValue(this);
    }

    /// <summary>Field number for the "EventMineCartDetailMap" field.</summary>
    public const int EventMineCartDetailMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMineCartDetail>.Codec _map_eventMineCartDetailMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMineCartDetail>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMineCartDetail.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMineCartDetail> eventMineCartDetailMap_ = new pbc::MapField<int, global::fat.rawdata.EventMineCartDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMineCartDetail> EventMineCartDetailMap {
      get { return eventMineCartDetailMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMineCartDetailMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMineCartDetailMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMineCartDetailMap.Equals(other.EventMineCartDetailMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMineCartDetailMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMineCartDetailMap_.WriteTo(output, _map_eventMineCartDetailMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMineCartDetailMap_.WriteTo(ref output, _map_eventMineCartDetailMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMineCartDetailMap_.CalculateSize(_map_eventMineCartDetailMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMineCartDetailMapABValue other) {
      if (other == null) {
        return;
      }
      eventMineCartDetailMap_.Add(other.eventMineCartDetailMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMineCartDetailMap_.AddEntriesFrom(input, _map_eventMineCartDetailMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMineCartDetailMap_.AddEntriesFrom(ref input, _map_eventMineCartDetailMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMineCartDetailConf : pb::IMessage<EventMineCartDetailConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMineCartDetailConf> _parser = new pb::MessageParser<EventMineCartDetailConf>(() => new EventMineCartDetailConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMineCartDetailConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMineCartDetailConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartDetailConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartDetailConf(EventMineCartDetailConf other) : this() {
      eventMineCartDetailMap_ = other.eventMineCartDetailMap_.Clone();
      eventMineCartDetailMapAB_ = other.eventMineCartDetailMapAB_.Clone();
      eventMineCartDetailMapABPatch_ = other.eventMineCartDetailMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineCartDetailConf Clone() {
      return new EventMineCartDetailConf(this);
    }

    /// <summary>Field number for the "EventMineCartDetailMap" field.</summary>
    public const int EventMineCartDetailMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMineCartDetail>.Codec _map_eventMineCartDetailMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMineCartDetail>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMineCartDetail.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMineCartDetail> eventMineCartDetailMap_ = new pbc::MapField<int, global::fat.rawdata.EventMineCartDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMineCartDetail> EventMineCartDetailMap {
      get { return eventMineCartDetailMap_; }
    }

    /// <summary>Field number for the "EventMineCartDetailMapAB" field.</summary>
    public const int EventMineCartDetailMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMineCartDetailMapABValue>.Codec _map_eventMineCartDetailMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMineCartDetailMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMineCartDetailMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMineCartDetailMapABValue> eventMineCartDetailMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventMineCartDetailMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMineCartDetailMapABValue> EventMineCartDetailMapAB {
      get { return eventMineCartDetailMapAB_; }
    }

    /// <summary>Field number for the "EventMineCartDetailMapABPatch" field.</summary>
    public const int EventMineCartDetailMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMineCartDetailMapABValue>.Codec _map_eventMineCartDetailMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMineCartDetailMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMineCartDetailMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMineCartDetailMapABValue> eventMineCartDetailMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventMineCartDetailMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMineCartDetailMapABValue> EventMineCartDetailMapABPatch {
      get { return eventMineCartDetailMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMineCartDetailConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMineCartDetailConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMineCartDetailMap.Equals(other.EventMineCartDetailMap)) return false;
      if (!EventMineCartDetailMapAB.Equals(other.EventMineCartDetailMapAB)) return false;
      if (!EventMineCartDetailMapABPatch.Equals(other.EventMineCartDetailMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMineCartDetailMap.GetHashCode();
      hash ^= EventMineCartDetailMapAB.GetHashCode();
      hash ^= EventMineCartDetailMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMineCartDetailMap_.WriteTo(output, _map_eventMineCartDetailMap_codec);
      eventMineCartDetailMapAB_.WriteTo(output, _map_eventMineCartDetailMapAB_codec);
      eventMineCartDetailMapABPatch_.WriteTo(output, _map_eventMineCartDetailMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMineCartDetailMap_.WriteTo(ref output, _map_eventMineCartDetailMap_codec);
      eventMineCartDetailMapAB_.WriteTo(ref output, _map_eventMineCartDetailMapAB_codec);
      eventMineCartDetailMapABPatch_.WriteTo(ref output, _map_eventMineCartDetailMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMineCartDetailMap_.CalculateSize(_map_eventMineCartDetailMap_codec);
      size += eventMineCartDetailMapAB_.CalculateSize(_map_eventMineCartDetailMapAB_codec);
      size += eventMineCartDetailMapABPatch_.CalculateSize(_map_eventMineCartDetailMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMineCartDetailConf other) {
      if (other == null) {
        return;
      }
      eventMineCartDetailMap_.Add(other.eventMineCartDetailMap_);
      eventMineCartDetailMapAB_.Add(other.eventMineCartDetailMapAB_);
      eventMineCartDetailMapABPatch_.Add(other.eventMineCartDetailMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMineCartDetailMap_.AddEntriesFrom(input, _map_eventMineCartDetailMap_codec);
            break;
          }
          case 18: {
            eventMineCartDetailMapAB_.AddEntriesFrom(input, _map_eventMineCartDetailMapAB_codec);
            break;
          }
          case 26: {
            eventMineCartDetailMapABPatch_.AddEntriesFrom(input, _map_eventMineCartDetailMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMineCartDetailMap_.AddEntriesFrom(ref input, _map_eventMineCartDetailMap_codec);
            break;
          }
          case 18: {
            eventMineCartDetailMapAB_.AddEntriesFrom(ref input, _map_eventMineCartDetailMapAB_codec);
            break;
          }
          case 26: {
            eventMineCartDetailMapABPatch_.AddEntriesFrom(ref input, _map_eventMineCartDetailMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
