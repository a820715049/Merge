// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/MiniGameSlideMergeItemConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/MiniGameSlideMergeItemConf.proto</summary>
  public static partial class MiniGameSlideMergeItemConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/MiniGameSlideMergeItemConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MiniGameSlideMergeItemConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CihyYXdkYXRhL01pbmlHYW1lU2xpZGVNZXJnZUl0ZW1Db25mLnByb3RvEgdy",
            "YXdkYXRhIqQBChZNaW5pR2FtZVNsaWRlTWVyZ2VJdGVtEgoKAmlkGAEgASgF",
            "Eg0KBWFzc2V0GAcgASgJEg0KBWNvbG9yGAggASgJEhIKCml0ZW1DZW50ZXIY",
            "AiABKAUSEQoJaXRlbUltYWdlGAMgASgJEhMKC2l0ZW1RdWFsaXR5GAQgASgF",
            "EhIKCml0ZW1SYWRpdXMYBSABKAUSEAoIaXRlbVNpemUYBiABKAUi8gEKIE1p",
            "bmlHYW1lU2xpZGVNZXJnZUl0ZW1NYXBBQlZhbHVlEmsKGU1pbmlHYW1lU2xp",
            "ZGVNZXJnZUl0ZW1NYXAYASADKAsySC5yYXdkYXRhLk1pbmlHYW1lU2xpZGVN",
            "ZXJnZUl0ZW1NYXBBQlZhbHVlLk1pbmlHYW1lU2xpZGVNZXJnZUl0ZW1NYXBF",
            "bnRyeRphCh5NaW5pR2FtZVNsaWRlTWVyZ2VJdGVtTWFwRW50cnkSCwoDa2V5",
            "GAEgASgFEi4KBXZhbHVlGAIgASgLMh8ucmF3ZGF0YS5NaW5pR2FtZVNsaWRl",
            "TWVyZ2VJdGVtOgI4ASKpBQoaTWluaUdhbWVTbGlkZU1lcmdlSXRlbUNvbmYS",
            "ZQoZTWluaUdhbWVTbGlkZU1lcmdlSXRlbU1hcBgBIAMoCzJCLnJhd2RhdGEu",
            "TWluaUdhbWVTbGlkZU1lcmdlSXRlbUNvbmYuTWluaUdhbWVTbGlkZU1lcmdl",
            "SXRlbU1hcEVudHJ5EmkKG01pbmlHYW1lU2xpZGVNZXJnZUl0ZW1NYXBBQhgC",
            "IAMoCzJELnJhd2RhdGEuTWluaUdhbWVTbGlkZU1lcmdlSXRlbUNvbmYuTWlu",
            "aUdhbWVTbGlkZU1lcmdlSXRlbU1hcEFCRW50cnkScwogTWluaUdhbWVTbGlk",
            "ZU1lcmdlSXRlbU1hcEFCUGF0Y2gYAyADKAsySS5yYXdkYXRhLk1pbmlHYW1l",
            "U2xpZGVNZXJnZUl0ZW1Db25mLk1pbmlHYW1lU2xpZGVNZXJnZUl0ZW1NYXBB",
            "QlBhdGNoRW50cnkaYQoeTWluaUdhbWVTbGlkZU1lcmdlSXRlbU1hcEVudHJ5",
            "EgsKA2tleRgBIAEoBRIuCgV2YWx1ZRgCIAEoCzIfLnJhd2RhdGEuTWluaUdh",
            "bWVTbGlkZU1lcmdlSXRlbToCOAEabQogTWluaUdhbWVTbGlkZU1lcmdlSXRl",
            "bU1hcEFCRW50cnkSCwoDa2V5GAEgASgJEjgKBXZhbHVlGAIgASgLMikucmF3",
            "ZGF0YS5NaW5pR2FtZVNsaWRlTWVyZ2VJdGVtTWFwQUJWYWx1ZToCOAEacgol",
            "TWluaUdhbWVTbGlkZU1lcmdlSXRlbU1hcEFCUGF0Y2hFbnRyeRILCgNrZXkY",
            "ASABKAkSOAoFdmFsdWUYAiABKAsyKS5yYXdkYXRhLk1pbmlHYW1lU2xpZGVN",
            "ZXJnZUl0ZW1NYXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9m",
            "YXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MiniGameSlideMergeItem), global::fat.rawdata.MiniGameSlideMergeItem.Parser, new[]{ "Id", "Asset", "Color", "ItemCenter", "ItemImage", "ItemQuality", "ItemRadius", "ItemSize" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MiniGameSlideMergeItemMapABValue), global::fat.rawdata.MiniGameSlideMergeItemMapABValue.Parser, new[]{ "MiniGameSlideMergeItemMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MiniGameSlideMergeItemConf), global::fat.rawdata.MiniGameSlideMergeItemConf.Parser, new[]{ "MiniGameSlideMergeItemMap", "MiniGameSlideMergeItemMapAB", "MiniGameSlideMergeItemMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="MiniGameSlideMergeItem",table="MiniGameSlideMergeItemMap",table_wrapper="MiniGameSlideMergeItemConf",map="true",map_key_type="int32",data="MiniGameSlideMergeItemConf")
  /// annotation@ab(table_ab="MiniGameSlideMergeItemMapAB",table_ab_patch="MiniGameSlideMergeItemMapABPatch",table_ab_value="MiniGameSlideMergeItemMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@MiniGameSlideMergeItem(id="id")
  /// </summary>
  public sealed partial class MiniGameSlideMergeItem : pb::IMessage<MiniGameSlideMergeItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameSlideMergeItem> _parser = new pb::MessageParser<MiniGameSlideMergeItem>(() => new MiniGameSlideMergeItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameSlideMergeItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MiniGameSlideMergeItemConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeItem(MiniGameSlideMergeItem other) : this() {
      id_ = other.id_;
      asset_ = other.asset_;
      color_ = other.color_;
      itemCenter_ = other.itemCenter_;
      itemImage_ = other.itemImage_;
      itemQuality_ = other.itemQuality_;
      itemRadius_ = other.itemRadius_;
      itemSize_ = other.itemSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeItem Clone() {
      return new MiniGameSlideMergeItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 棋子ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "asset" field.</summary>
    public const int AssetFieldNumber = 7;
    private string asset_ = "";
    /// <summary>
    /// 音效资源路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Asset {
      get { return asset_; }
      set {
        asset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 8;
    private string color_ = "";
    /// <summary>
    /// 合成特效颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "itemCenter" field.</summary>
    public const int ItemCenterFieldNumber = 2;
    private int itemCenter_;
    /// <summary>
    /// 圆心（百分比）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCenter {
      get { return itemCenter_; }
      set {
        itemCenter_ = value;
      }
    }

    /// <summary>Field number for the "itemImage" field.</summary>
    public const int ItemImageFieldNumber = 3;
    private string itemImage_ = "";
    /// <summary>
    /// 棋子图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemImage {
      get { return itemImage_; }
      set {
        itemImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "itemQuality" field.</summary>
    public const int ItemQualityFieldNumber = 4;
    private int itemQuality_;
    /// <summary>
    /// 棋子质量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemQuality {
      get { return itemQuality_; }
      set {
        itemQuality_ = value;
      }
    }

    /// <summary>Field number for the "itemRadius" field.</summary>
    public const int ItemRadiusFieldNumber = 5;
    private int itemRadius_;
    /// <summary>
    /// 半径（百分比）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemRadius {
      get { return itemRadius_; }
      set {
        itemRadius_ = value;
      }
    }

    /// <summary>Field number for the "itemSize" field.</summary>
    public const int ItemSizeFieldNumber = 6;
    private int itemSize_;
    /// <summary>
    /// 棋子尺寸
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemSize {
      get { return itemSize_; }
      set {
        itemSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameSlideMergeItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameSlideMergeItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Asset != other.Asset) return false;
      if (Color != other.Color) return false;
      if (ItemCenter != other.ItemCenter) return false;
      if (ItemImage != other.ItemImage) return false;
      if (ItemQuality != other.ItemQuality) return false;
      if (ItemRadius != other.ItemRadius) return false;
      if (ItemSize != other.ItemSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Asset.Length != 0) hash ^= Asset.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      if (ItemCenter != 0) hash ^= ItemCenter.GetHashCode();
      if (ItemImage.Length != 0) hash ^= ItemImage.GetHashCode();
      if (ItemQuality != 0) hash ^= ItemQuality.GetHashCode();
      if (ItemRadius != 0) hash ^= ItemRadius.GetHashCode();
      if (ItemSize != 0) hash ^= ItemSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ItemCenter != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemCenter);
      }
      if (ItemImage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ItemImage);
      }
      if (ItemQuality != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemQuality);
      }
      if (ItemRadius != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ItemRadius);
      }
      if (ItemSize != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ItemSize);
      }
      if (Asset.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Asset);
      }
      if (Color.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ItemCenter != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemCenter);
      }
      if (ItemImage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ItemImage);
      }
      if (ItemQuality != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemQuality);
      }
      if (ItemRadius != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ItemRadius);
      }
      if (ItemSize != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ItemSize);
      }
      if (Asset.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Asset);
      }
      if (Color.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Asset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Asset);
      }
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (ItemCenter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCenter);
      }
      if (ItemImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemImage);
      }
      if (ItemQuality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemQuality);
      }
      if (ItemRadius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemRadius);
      }
      if (ItemSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameSlideMergeItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Asset.Length != 0) {
        Asset = other.Asset;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
      if (other.ItemCenter != 0) {
        ItemCenter = other.ItemCenter;
      }
      if (other.ItemImage.Length != 0) {
        ItemImage = other.ItemImage;
      }
      if (other.ItemQuality != 0) {
        ItemQuality = other.ItemQuality;
      }
      if (other.ItemRadius != 0) {
        ItemRadius = other.ItemRadius;
      }
      if (other.ItemSize != 0) {
        ItemSize = other.ItemSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ItemCenter = input.ReadInt32();
            break;
          }
          case 26: {
            ItemImage = input.ReadString();
            break;
          }
          case 32: {
            ItemQuality = input.ReadInt32();
            break;
          }
          case 40: {
            ItemRadius = input.ReadInt32();
            break;
          }
          case 48: {
            ItemSize = input.ReadInt32();
            break;
          }
          case 58: {
            Asset = input.ReadString();
            break;
          }
          case 66: {
            Color = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ItemCenter = input.ReadInt32();
            break;
          }
          case 26: {
            ItemImage = input.ReadString();
            break;
          }
          case 32: {
            ItemQuality = input.ReadInt32();
            break;
          }
          case 40: {
            ItemRadius = input.ReadInt32();
            break;
          }
          case 48: {
            ItemSize = input.ReadInt32();
            break;
          }
          case 58: {
            Asset = input.ReadString();
            break;
          }
          case 66: {
            Color = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MiniGameSlideMergeItemMapABValue : pb::IMessage<MiniGameSlideMergeItemMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameSlideMergeItemMapABValue> _parser = new pb::MessageParser<MiniGameSlideMergeItemMapABValue>(() => new MiniGameSlideMergeItemMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameSlideMergeItemMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MiniGameSlideMergeItemConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeItemMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeItemMapABValue(MiniGameSlideMergeItemMapABValue other) : this() {
      miniGameSlideMergeItemMap_ = other.miniGameSlideMergeItemMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeItemMapABValue Clone() {
      return new MiniGameSlideMergeItemMapABValue(this);
    }

    /// <summary>Field number for the "MiniGameSlideMergeItemMap" field.</summary>
    public const int MiniGameSlideMergeItemMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeItem>.Codec _map_miniGameSlideMergeItemMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeItem>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSlideMergeItem.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeItem> miniGameSlideMergeItemMap_ = new pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeItem> MiniGameSlideMergeItemMap {
      get { return miniGameSlideMergeItemMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameSlideMergeItemMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameSlideMergeItemMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MiniGameSlideMergeItemMap.Equals(other.MiniGameSlideMergeItemMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MiniGameSlideMergeItemMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      miniGameSlideMergeItemMap_.WriteTo(output, _map_miniGameSlideMergeItemMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      miniGameSlideMergeItemMap_.WriteTo(ref output, _map_miniGameSlideMergeItemMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += miniGameSlideMergeItemMap_.CalculateSize(_map_miniGameSlideMergeItemMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameSlideMergeItemMapABValue other) {
      if (other == null) {
        return;
      }
      miniGameSlideMergeItemMap_.Add(other.miniGameSlideMergeItemMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            miniGameSlideMergeItemMap_.AddEntriesFrom(input, _map_miniGameSlideMergeItemMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            miniGameSlideMergeItemMap_.AddEntriesFrom(ref input, _map_miniGameSlideMergeItemMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MiniGameSlideMergeItemConf : pb::IMessage<MiniGameSlideMergeItemConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameSlideMergeItemConf> _parser = new pb::MessageParser<MiniGameSlideMergeItemConf>(() => new MiniGameSlideMergeItemConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameSlideMergeItemConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MiniGameSlideMergeItemConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeItemConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeItemConf(MiniGameSlideMergeItemConf other) : this() {
      miniGameSlideMergeItemMap_ = other.miniGameSlideMergeItemMap_.Clone();
      miniGameSlideMergeItemMapAB_ = other.miniGameSlideMergeItemMapAB_.Clone();
      miniGameSlideMergeItemMapABPatch_ = other.miniGameSlideMergeItemMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeItemConf Clone() {
      return new MiniGameSlideMergeItemConf(this);
    }

    /// <summary>Field number for the "MiniGameSlideMergeItemMap" field.</summary>
    public const int MiniGameSlideMergeItemMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeItem>.Codec _map_miniGameSlideMergeItemMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeItem>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSlideMergeItem.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeItem> miniGameSlideMergeItemMap_ = new pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeItem> MiniGameSlideMergeItemMap {
      get { return miniGameSlideMergeItemMap_; }
    }

    /// <summary>Field number for the "MiniGameSlideMergeItemMapAB" field.</summary>
    public const int MiniGameSlideMergeItemMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeItemMapABValue>.Codec _map_miniGameSlideMergeItemMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeItemMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSlideMergeItemMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeItemMapABValue> miniGameSlideMergeItemMapAB_ = new pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeItemMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeItemMapABValue> MiniGameSlideMergeItemMapAB {
      get { return miniGameSlideMergeItemMapAB_; }
    }

    /// <summary>Field number for the "MiniGameSlideMergeItemMapABPatch" field.</summary>
    public const int MiniGameSlideMergeItemMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeItemMapABValue>.Codec _map_miniGameSlideMergeItemMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeItemMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSlideMergeItemMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeItemMapABValue> miniGameSlideMergeItemMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeItemMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeItemMapABValue> MiniGameSlideMergeItemMapABPatch {
      get { return miniGameSlideMergeItemMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameSlideMergeItemConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameSlideMergeItemConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MiniGameSlideMergeItemMap.Equals(other.MiniGameSlideMergeItemMap)) return false;
      if (!MiniGameSlideMergeItemMapAB.Equals(other.MiniGameSlideMergeItemMapAB)) return false;
      if (!MiniGameSlideMergeItemMapABPatch.Equals(other.MiniGameSlideMergeItemMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MiniGameSlideMergeItemMap.GetHashCode();
      hash ^= MiniGameSlideMergeItemMapAB.GetHashCode();
      hash ^= MiniGameSlideMergeItemMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      miniGameSlideMergeItemMap_.WriteTo(output, _map_miniGameSlideMergeItemMap_codec);
      miniGameSlideMergeItemMapAB_.WriteTo(output, _map_miniGameSlideMergeItemMapAB_codec);
      miniGameSlideMergeItemMapABPatch_.WriteTo(output, _map_miniGameSlideMergeItemMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      miniGameSlideMergeItemMap_.WriteTo(ref output, _map_miniGameSlideMergeItemMap_codec);
      miniGameSlideMergeItemMapAB_.WriteTo(ref output, _map_miniGameSlideMergeItemMapAB_codec);
      miniGameSlideMergeItemMapABPatch_.WriteTo(ref output, _map_miniGameSlideMergeItemMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += miniGameSlideMergeItemMap_.CalculateSize(_map_miniGameSlideMergeItemMap_codec);
      size += miniGameSlideMergeItemMapAB_.CalculateSize(_map_miniGameSlideMergeItemMapAB_codec);
      size += miniGameSlideMergeItemMapABPatch_.CalculateSize(_map_miniGameSlideMergeItemMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameSlideMergeItemConf other) {
      if (other == null) {
        return;
      }
      miniGameSlideMergeItemMap_.Add(other.miniGameSlideMergeItemMap_);
      miniGameSlideMergeItemMapAB_.Add(other.miniGameSlideMergeItemMapAB_);
      miniGameSlideMergeItemMapABPatch_.Add(other.miniGameSlideMergeItemMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            miniGameSlideMergeItemMap_.AddEntriesFrom(input, _map_miniGameSlideMergeItemMap_codec);
            break;
          }
          case 18: {
            miniGameSlideMergeItemMapAB_.AddEntriesFrom(input, _map_miniGameSlideMergeItemMapAB_codec);
            break;
          }
          case 26: {
            miniGameSlideMergeItemMapABPatch_.AddEntriesFrom(input, _map_miniGameSlideMergeItemMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            miniGameSlideMergeItemMap_.AddEntriesFrom(ref input, _map_miniGameSlideMergeItemMap_codec);
            break;
          }
          case 18: {
            miniGameSlideMergeItemMapAB_.AddEntriesFrom(ref input, _map_miniGameSlideMergeItemMapAB_codec);
            break;
          }
          case 26: {
            miniGameSlideMergeItemMapABPatch_.AddEntriesFrom(ref input, _map_miniGameSlideMergeItemMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
