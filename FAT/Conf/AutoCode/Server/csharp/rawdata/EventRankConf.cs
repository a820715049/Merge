// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventRankConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventRankConf.proto</summary>
  public static partial class EventRankConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventRankConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventRankConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtyYXdkYXRhL0V2ZW50UmFua0NvbmYucHJvdG8SB3Jhd2RhdGEaF3Jhd2Rh",
            "dGEvRXZlbnRUeXBlLnByb3RvIrwDCglFdmVudFJhbmsSCgoCaWQYASABKAUS",
            "JQoJRXZlbnRUeXBlGBAgASgOMhIucmF3ZGF0YS5FdmVudFR5cGUSEgoKZGVs",
            "ZXRlVGltZRgDIAEoBRIQCghlbmRUaGVtZRgRIAEoBRISCgpldmVudFRoZW1l",
            "GAQgASgFEhEKCWhlbHBUaGVtZRgSIAEoBRIRCglpbmNsdWRlSWQYBSADKAUS",
            "FgoObWlsZXN0b25lVGhlbWUYEyABKAUSEwoLcmFua0FkZFRpbWUYBiABKAUS",
            "FAoMcmFua090aGVyTnVtGAcgASgFEhIKCnJhbmtQYXlOdW0YCCABKAUSFwoP",
            "cmFua1BheVN0YW5kYXJkGAkgASgFEhEKCXJhbmtUaGVtZRgKIAEoBRIbChNy",
            "YW5rVGltZVBheVN0YW5kYXJkGAsgASgFEhQKDHJhbmtUb3RhbE51bRgMIAEo",
            "BRITCgtyZWZyZXNoVGltZRgNIAEoBRIWCg5yZXF1aXJlU2NvcmVJZBgOIAEo",
            "BRIXCg9yZXF1aXJlU2NvcmVOdW0YFCADKAUSDgoGcmV3YXJkGBUgAygJEhAK",
            "CHNjb3JlTnVtGA8gASgFIqQBChNFdmVudFJhbmtNYXBBQlZhbHVlEkQKDEV2",
            "ZW50UmFua01hcBgBIAMoCzIuLnJhd2RhdGEuRXZlbnRSYW5rTWFwQUJWYWx1",
            "ZS5FdmVudFJhbmtNYXBFbnRyeRpHChFFdmVudFJhbmtNYXBFbnRyeRILCgNr",
            "ZXkYASABKAUSIQoFdmFsdWUYAiABKAsyEi5yYXdkYXRhLkV2ZW50UmFuazoC",
            "OAEi2QMKDUV2ZW50UmFua0NvbmYSPgoMRXZlbnRSYW5rTWFwGAEgAygLMigu",
            "cmF3ZGF0YS5FdmVudFJhbmtDb25mLkV2ZW50UmFua01hcEVudHJ5EkIKDkV2",
            "ZW50UmFua01hcEFCGAIgAygLMioucmF3ZGF0YS5FdmVudFJhbmtDb25mLkV2",
            "ZW50UmFua01hcEFCRW50cnkSTAoTRXZlbnRSYW5rTWFwQUJQYXRjaBgDIAMo",
            "CzIvLnJhd2RhdGEuRXZlbnRSYW5rQ29uZi5FdmVudFJhbmtNYXBBQlBhdGNo",
            "RW50cnkaRwoRRXZlbnRSYW5rTWFwRW50cnkSCwoDa2V5GAEgASgFEiEKBXZh",
            "bHVlGAIgASgLMhIucmF3ZGF0YS5FdmVudFJhbms6AjgBGlMKE0V2ZW50UmFu",
            "a01hcEFCRW50cnkSCwoDa2V5GAEgASgJEisKBXZhbHVlGAIgASgLMhwucmF3",
            "ZGF0YS5FdmVudFJhbmtNYXBBQlZhbHVlOgI4ARpYChhFdmVudFJhbmtNYXBB",
            "QlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEisKBXZhbHVlGAIgASgLMhwucmF3",
            "ZGF0YS5FdmVudFJhbmtNYXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1",
            "cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0",
            "YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.rawdata.EventTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventRank), global::fat.rawdata.EventRank.Parser, new[]{ "Id", "EventType", "DeleteTime", "EndTheme", "EventTheme", "HelpTheme", "IncludeId", "MilestoneTheme", "RankAddTime", "RankOtherNum", "RankPayNum", "RankPayStandard", "RankTheme", "RankTimePayStandard", "RankTotalNum", "RefreshTime", "RequireScoreId", "RequireScoreNum", "Reward", "ScoreNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventRankMapABValue), global::fat.rawdata.EventRankMapABValue.Parser, new[]{ "EventRankMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventRankConf), global::fat.rawdata.EventRankConf.Parser, new[]{ "EventRankMap", "EventRankMapAB", "EventRankMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventRank",table="EventRankMap",table_wrapper="EventRankConf",map="true",map_key_type="int32",data="EventRankConf")
  /// annotation@ab(table_ab="EventRankMapAB",table_ab_patch="EventRankMapABPatch",table_ab_value="EventRankMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventRank(id="id")
  /// </summary>
  public sealed partial class EventRank : pb::IMessage<EventRank>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventRank> _parser = new pb::MessageParser<EventRank>(() => new EventRank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventRankConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRank(EventRank other) : this() {
      id_ = other.id_;
      eventType_ = other.eventType_;
      deleteTime_ = other.deleteTime_;
      endTheme_ = other.endTheme_;
      eventTheme_ = other.eventTheme_;
      helpTheme_ = other.helpTheme_;
      includeId_ = other.includeId_.Clone();
      milestoneTheme_ = other.milestoneTheme_;
      rankAddTime_ = other.rankAddTime_;
      rankOtherNum_ = other.rankOtherNum_;
      rankPayNum_ = other.rankPayNum_;
      rankPayStandard_ = other.rankPayStandard_;
      rankTheme_ = other.rankTheme_;
      rankTimePayStandard_ = other.rankTimePayStandard_;
      rankTotalNum_ = other.rankTotalNum_;
      refreshTime_ = other.refreshTime_;
      requireScoreId_ = other.requireScoreId_;
      requireScoreNum_ = other.requireScoreNum_.Clone();
      reward_ = other.reward_.Clone();
      scoreNum_ = other.scoreNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRank Clone() {
      return new EventRank(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 16;
    private global::fat.rawdata.EventType eventType_ = global::fat.rawdata.EventType.Default;
    /// <summary>
    /// EventType类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.rawdata.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "deleteTime" field.</summary>
    public const int DeleteTimeFieldNumber = 3;
    private int deleteTime_;
    /// <summary>
    /// 排行榜数据清除
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeleteTime {
      get { return deleteTime_; }
      set {
        deleteTime_ = value;
      }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 17;
    private int endTheme_;
    /// <summary>
    /// 结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 4;
    private int eventTheme_;
    /// <summary>
    /// 开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "helpTheme" field.</summary>
    public const int HelpThemeFieldNumber = 18;
    private int helpTheme_;
    /// <summary>
    /// 玩法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpTheme {
      get { return helpTheme_; }
      set {
        helpTheme_ = value;
      }
    }

    /// <summary>Field number for the "includeId" field.</summary>
    public const int IncludeIdFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_includeId_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> includeId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 奖励组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IncludeId {
      get { return includeId_; }
    }

    /// <summary>Field number for the "milestoneTheme" field.</summary>
    public const int MilestoneThemeFieldNumber = 19;
    private int milestoneTheme_;
    /// <summary>
    /// 里程碑奖励界面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MilestoneTheme {
      get { return milestoneTheme_; }
      set {
        milestoneTheme_ = value;
      }
    }

    /// <summary>Field number for the "rankAddTime" field.</summary>
    public const int RankAddTimeFieldNumber = 6;
    private int rankAddTime_;
    /// <summary>
    /// 超过{0}秒目标未满填充
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankAddTime {
      get { return rankAddTime_; }
      set {
        rankAddTime_ = value;
      }
    }

    /// <summary>Field number for the "rankOtherNum" field.</summary>
    public const int RankOtherNumFieldNumber = 7;
    private int rankOtherNum_;
    /// <summary>
    /// 其他用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankOtherNum {
      get { return rankOtherNum_; }
      set {
        rankOtherNum_ = value;
      }
    }

    /// <summary>Field number for the "rankPayNum" field.</summary>
    public const int RankPayNumFieldNumber = 8;
    private int rankPayNum_;
    /// <summary>
    /// 目标用户人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankPayNum {
      get { return rankPayNum_; }
      set {
        rankPayNum_ = value;
      }
    }

    /// <summary>Field number for the "rankPayStandard" field.</summary>
    public const int RankPayStandardFieldNumber = 9;
    private int rankPayStandard_;
    /// <summary>
    /// 目标付费玩家
    /// 累计充值大于等于${1}（美分）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankPayStandard {
      get { return rankPayStandard_; }
      set {
        rankPayStandard_ = value;
      }
    }

    /// <summary>Field number for the "rankTheme" field.</summary>
    public const int RankThemeFieldNumber = 10;
    private int rankTheme_;
    /// <summary>
    /// 排行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankTheme {
      get { return rankTheme_; }
      set {
        rankTheme_ = value;
      }
    }

    /// <summary>Field number for the "rankTimePayStandard" field.</summary>
    public const int RankTimePayStandardFieldNumber = 11;
    private int rankTimePayStandard_;
    /// <summary>
    /// 目标付费玩家：{0}秒前
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankTimePayStandard {
      get { return rankTimePayStandard_; }
      set {
        rankTimePayStandard_ = value;
      }
    }

    /// <summary>Field number for the "rankTotalNum" field.</summary>
    public const int RankTotalNumFieldNumber = 12;
    private int rankTotalNum_;
    /// <summary>
    /// 榜单总人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankTotalNum {
      get { return rankTotalNum_; }
      set {
        rankTotalNum_ = value;
      }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 13;
    private int refreshTime_;
    /// <summary>
    /// 固定刷榜时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    /// <summary>Field number for the "requireScoreId" field.</summary>
    public const int RequireScoreIdFieldNumber = 14;
    private int requireScoreId_;
    /// <summary>
    /// 目标积分id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireScoreId {
      get { return requireScoreId_; }
      set {
        requireScoreId_ = value;
      }
    }

    /// <summary>Field number for the "requireScoreNum" field.</summary>
    public const int RequireScoreNumFieldNumber = 20;
    private static readonly pb::FieldCodec<int> _repeated_requireScoreNum_codec
        = pb::FieldCodec.ForInt32(162);
    private readonly pbc::RepeatedField<int> requireScoreNum_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 积分值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RequireScoreNum {
      get { return requireScoreNum_; }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 21;
    private static readonly pb::FieldCodec<string> _repeated_reward_codec
        = pb::FieldCodec.ForString(170);
    private readonly pbc::RepeatedField<string> reward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// item:num
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Reward {
      get { return reward_; }
    }

    /// <summary>Field number for the "scoreNum" field.</summary>
    public const int ScoreNumFieldNumber = 15;
    private int scoreNum_;
    /// <summary>
    /// 上榜门槛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScoreNum {
      get { return scoreNum_; }
      set {
        scoreNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (EventType != other.EventType) return false;
      if (DeleteTime != other.DeleteTime) return false;
      if (EndTheme != other.EndTheme) return false;
      if (EventTheme != other.EventTheme) return false;
      if (HelpTheme != other.HelpTheme) return false;
      if(!includeId_.Equals(other.includeId_)) return false;
      if (MilestoneTheme != other.MilestoneTheme) return false;
      if (RankAddTime != other.RankAddTime) return false;
      if (RankOtherNum != other.RankOtherNum) return false;
      if (RankPayNum != other.RankPayNum) return false;
      if (RankPayStandard != other.RankPayStandard) return false;
      if (RankTheme != other.RankTheme) return false;
      if (RankTimePayStandard != other.RankTimePayStandard) return false;
      if (RankTotalNum != other.RankTotalNum) return false;
      if (RefreshTime != other.RefreshTime) return false;
      if (RequireScoreId != other.RequireScoreId) return false;
      if(!requireScoreNum_.Equals(other.requireScoreNum_)) return false;
      if(!reward_.Equals(other.reward_)) return false;
      if (ScoreNum != other.ScoreNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (EventType != global::fat.rawdata.EventType.Default) hash ^= EventType.GetHashCode();
      if (DeleteTime != 0) hash ^= DeleteTime.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (HelpTheme != 0) hash ^= HelpTheme.GetHashCode();
      hash ^= includeId_.GetHashCode();
      if (MilestoneTheme != 0) hash ^= MilestoneTheme.GetHashCode();
      if (RankAddTime != 0) hash ^= RankAddTime.GetHashCode();
      if (RankOtherNum != 0) hash ^= RankOtherNum.GetHashCode();
      if (RankPayNum != 0) hash ^= RankPayNum.GetHashCode();
      if (RankPayStandard != 0) hash ^= RankPayStandard.GetHashCode();
      if (RankTheme != 0) hash ^= RankTheme.GetHashCode();
      if (RankTimePayStandard != 0) hash ^= RankTimePayStandard.GetHashCode();
      if (RankTotalNum != 0) hash ^= RankTotalNum.GetHashCode();
      if (RefreshTime != 0) hash ^= RefreshTime.GetHashCode();
      if (RequireScoreId != 0) hash ^= RequireScoreId.GetHashCode();
      hash ^= requireScoreNum_.GetHashCode();
      hash ^= reward_.GetHashCode();
      if (ScoreNum != 0) hash ^= ScoreNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (DeleteTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DeleteTime);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventTheme);
      }
      includeId_.WriteTo(output, _repeated_includeId_codec);
      if (RankAddTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RankAddTime);
      }
      if (RankOtherNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RankOtherNum);
      }
      if (RankPayNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RankPayNum);
      }
      if (RankPayStandard != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RankPayStandard);
      }
      if (RankTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RankTheme);
      }
      if (RankTimePayStandard != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RankTimePayStandard);
      }
      if (RankTotalNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RankTotalNum);
      }
      if (RefreshTime != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(RefreshTime);
      }
      if (RequireScoreId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RequireScoreId);
      }
      if (ScoreNum != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ScoreNum);
      }
      if (EventType != global::fat.rawdata.EventType.Default) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) EventType);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(EndTheme);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(HelpTheme);
      }
      if (MilestoneTheme != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(MilestoneTheme);
      }
      requireScoreNum_.WriteTo(output, _repeated_requireScoreNum_codec);
      reward_.WriteTo(output, _repeated_reward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (DeleteTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DeleteTime);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventTheme);
      }
      includeId_.WriteTo(ref output, _repeated_includeId_codec);
      if (RankAddTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RankAddTime);
      }
      if (RankOtherNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RankOtherNum);
      }
      if (RankPayNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RankPayNum);
      }
      if (RankPayStandard != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RankPayStandard);
      }
      if (RankTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RankTheme);
      }
      if (RankTimePayStandard != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RankTimePayStandard);
      }
      if (RankTotalNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RankTotalNum);
      }
      if (RefreshTime != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(RefreshTime);
      }
      if (RequireScoreId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RequireScoreId);
      }
      if (ScoreNum != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ScoreNum);
      }
      if (EventType != global::fat.rawdata.EventType.Default) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) EventType);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(EndTheme);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(HelpTheme);
      }
      if (MilestoneTheme != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(MilestoneTheme);
      }
      requireScoreNum_.WriteTo(ref output, _repeated_requireScoreNum_codec);
      reward_.WriteTo(ref output, _repeated_reward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (EventType != global::fat.rawdata.EventType.Default) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (DeleteTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeleteTime);
      }
      if (EndTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (HelpTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HelpTheme);
      }
      size += includeId_.CalculateSize(_repeated_includeId_codec);
      if (MilestoneTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MilestoneTheme);
      }
      if (RankAddTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankAddTime);
      }
      if (RankOtherNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankOtherNum);
      }
      if (RankPayNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankPayNum);
      }
      if (RankPayStandard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankPayStandard);
      }
      if (RankTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankTheme);
      }
      if (RankTimePayStandard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankTimePayStandard);
      }
      if (RankTotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankTotalNum);
      }
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshTime);
      }
      if (RequireScoreId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequireScoreId);
      }
      size += requireScoreNum_.CalculateSize(_repeated_requireScoreNum_codec);
      size += reward_.CalculateSize(_repeated_reward_codec);
      if (ScoreNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRank other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.EventType != global::fat.rawdata.EventType.Default) {
        EventType = other.EventType;
      }
      if (other.DeleteTime != 0) {
        DeleteTime = other.DeleteTime;
      }
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.HelpTheme != 0) {
        HelpTheme = other.HelpTheme;
      }
      includeId_.Add(other.includeId_);
      if (other.MilestoneTheme != 0) {
        MilestoneTheme = other.MilestoneTheme;
      }
      if (other.RankAddTime != 0) {
        RankAddTime = other.RankAddTime;
      }
      if (other.RankOtherNum != 0) {
        RankOtherNum = other.RankOtherNum;
      }
      if (other.RankPayNum != 0) {
        RankPayNum = other.RankPayNum;
      }
      if (other.RankPayStandard != 0) {
        RankPayStandard = other.RankPayStandard;
      }
      if (other.RankTheme != 0) {
        RankTheme = other.RankTheme;
      }
      if (other.RankTimePayStandard != 0) {
        RankTimePayStandard = other.RankTimePayStandard;
      }
      if (other.RankTotalNum != 0) {
        RankTotalNum = other.RankTotalNum;
      }
      if (other.RefreshTime != 0) {
        RefreshTime = other.RefreshTime;
      }
      if (other.RequireScoreId != 0) {
        RequireScoreId = other.RequireScoreId;
      }
      requireScoreNum_.Add(other.requireScoreNum_);
      reward_.Add(other.reward_);
      if (other.ScoreNum != 0) {
        ScoreNum = other.ScoreNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            DeleteTime = input.ReadInt32();
            break;
          }
          case 32: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            includeId_.AddEntriesFrom(input, _repeated_includeId_codec);
            break;
          }
          case 48: {
            RankAddTime = input.ReadInt32();
            break;
          }
          case 56: {
            RankOtherNum = input.ReadInt32();
            break;
          }
          case 64: {
            RankPayNum = input.ReadInt32();
            break;
          }
          case 72: {
            RankPayStandard = input.ReadInt32();
            break;
          }
          case 80: {
            RankTheme = input.ReadInt32();
            break;
          }
          case 88: {
            RankTimePayStandard = input.ReadInt32();
            break;
          }
          case 96: {
            RankTotalNum = input.ReadInt32();
            break;
          }
          case 104: {
            RefreshTime = input.ReadInt32();
            break;
          }
          case 112: {
            RequireScoreId = input.ReadInt32();
            break;
          }
          case 120: {
            ScoreNum = input.ReadInt32();
            break;
          }
          case 128: {
            EventType = (global::fat.rawdata.EventType) input.ReadEnum();
            break;
          }
          case 136: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 144: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 152: {
            MilestoneTheme = input.ReadInt32();
            break;
          }
          case 162:
          case 160: {
            requireScoreNum_.AddEntriesFrom(input, _repeated_requireScoreNum_codec);
            break;
          }
          case 170: {
            reward_.AddEntriesFrom(input, _repeated_reward_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            DeleteTime = input.ReadInt32();
            break;
          }
          case 32: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            includeId_.AddEntriesFrom(ref input, _repeated_includeId_codec);
            break;
          }
          case 48: {
            RankAddTime = input.ReadInt32();
            break;
          }
          case 56: {
            RankOtherNum = input.ReadInt32();
            break;
          }
          case 64: {
            RankPayNum = input.ReadInt32();
            break;
          }
          case 72: {
            RankPayStandard = input.ReadInt32();
            break;
          }
          case 80: {
            RankTheme = input.ReadInt32();
            break;
          }
          case 88: {
            RankTimePayStandard = input.ReadInt32();
            break;
          }
          case 96: {
            RankTotalNum = input.ReadInt32();
            break;
          }
          case 104: {
            RefreshTime = input.ReadInt32();
            break;
          }
          case 112: {
            RequireScoreId = input.ReadInt32();
            break;
          }
          case 120: {
            ScoreNum = input.ReadInt32();
            break;
          }
          case 128: {
            EventType = (global::fat.rawdata.EventType) input.ReadEnum();
            break;
          }
          case 136: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 144: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 152: {
            MilestoneTheme = input.ReadInt32();
            break;
          }
          case 162:
          case 160: {
            requireScoreNum_.AddEntriesFrom(ref input, _repeated_requireScoreNum_codec);
            break;
          }
          case 170: {
            reward_.AddEntriesFrom(ref input, _repeated_reward_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventRankMapABValue : pb::IMessage<EventRankMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventRankMapABValue> _parser = new pb::MessageParser<EventRankMapABValue>(() => new EventRankMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRankMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventRankConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRankMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRankMapABValue(EventRankMapABValue other) : this() {
      eventRankMap_ = other.eventRankMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRankMapABValue Clone() {
      return new EventRankMapABValue(this);
    }

    /// <summary>Field number for the "EventRankMap" field.</summary>
    public const int EventRankMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventRank>.Codec _map_eventRankMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventRank>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRank.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventRank> eventRankMap_ = new pbc::MapField<int, global::fat.rawdata.EventRank>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventRank> EventRankMap {
      get { return eventRankMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRankMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRankMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventRankMap.Equals(other.EventRankMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventRankMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventRankMap_.WriteTo(output, _map_eventRankMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventRankMap_.WriteTo(ref output, _map_eventRankMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventRankMap_.CalculateSize(_map_eventRankMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRankMapABValue other) {
      if (other == null) {
        return;
      }
      eventRankMap_.Add(other.eventRankMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventRankMap_.AddEntriesFrom(input, _map_eventRankMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventRankMap_.AddEntriesFrom(ref input, _map_eventRankMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventRankConf : pb::IMessage<EventRankConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventRankConf> _parser = new pb::MessageParser<EventRankConf>(() => new EventRankConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRankConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventRankConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRankConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRankConf(EventRankConf other) : this() {
      eventRankMap_ = other.eventRankMap_.Clone();
      eventRankMapAB_ = other.eventRankMapAB_.Clone();
      eventRankMapABPatch_ = other.eventRankMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRankConf Clone() {
      return new EventRankConf(this);
    }

    /// <summary>Field number for the "EventRankMap" field.</summary>
    public const int EventRankMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventRank>.Codec _map_eventRankMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventRank>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRank.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventRank> eventRankMap_ = new pbc::MapField<int, global::fat.rawdata.EventRank>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventRank> EventRankMap {
      get { return eventRankMap_; }
    }

    /// <summary>Field number for the "EventRankMapAB" field.</summary>
    public const int EventRankMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventRankMapABValue>.Codec _map_eventRankMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventRankMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRankMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventRankMapABValue> eventRankMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventRankMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventRankMapABValue> EventRankMapAB {
      get { return eventRankMapAB_; }
    }

    /// <summary>Field number for the "EventRankMapABPatch" field.</summary>
    public const int EventRankMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventRankMapABValue>.Codec _map_eventRankMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventRankMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRankMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventRankMapABValue> eventRankMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventRankMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventRankMapABValue> EventRankMapABPatch {
      get { return eventRankMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRankConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRankConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventRankMap.Equals(other.EventRankMap)) return false;
      if (!EventRankMapAB.Equals(other.EventRankMapAB)) return false;
      if (!EventRankMapABPatch.Equals(other.EventRankMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventRankMap.GetHashCode();
      hash ^= EventRankMapAB.GetHashCode();
      hash ^= EventRankMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventRankMap_.WriteTo(output, _map_eventRankMap_codec);
      eventRankMapAB_.WriteTo(output, _map_eventRankMapAB_codec);
      eventRankMapABPatch_.WriteTo(output, _map_eventRankMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventRankMap_.WriteTo(ref output, _map_eventRankMap_codec);
      eventRankMapAB_.WriteTo(ref output, _map_eventRankMapAB_codec);
      eventRankMapABPatch_.WriteTo(ref output, _map_eventRankMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventRankMap_.CalculateSize(_map_eventRankMap_codec);
      size += eventRankMapAB_.CalculateSize(_map_eventRankMapAB_codec);
      size += eventRankMapABPatch_.CalculateSize(_map_eventRankMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRankConf other) {
      if (other == null) {
        return;
      }
      eventRankMap_.Add(other.eventRankMap_);
      eventRankMapAB_.Add(other.eventRankMapAB_);
      eventRankMapABPatch_.Add(other.eventRankMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventRankMap_.AddEntriesFrom(input, _map_eventRankMap_codec);
            break;
          }
          case 18: {
            eventRankMapAB_.AddEntriesFrom(input, _map_eventRankMapAB_codec);
            break;
          }
          case 26: {
            eventRankMapABPatch_.AddEntriesFrom(input, _map_eventRankMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventRankMap_.AddEntriesFrom(ref input, _map_eventRankMap_codec);
            break;
          }
          case 18: {
            eventRankMapAB_.AddEntriesFrom(ref input, _map_eventRankMapAB_codec);
            break;
          }
          case 26: {
            eventRankMapABPatch_.AddEntriesFrom(ref input, _map_eventRankMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
