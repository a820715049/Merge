// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventSeaRaceDetailConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventSeaRaceDetailConf.proto</summary>
  public static partial class EventSeaRaceDetailConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventSeaRaceDetailConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventSeaRaceDetailConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRyYXdkYXRhL0V2ZW50U2VhUmFjZURldGFpbENvbmYucHJvdG8SB3Jhd2Rh",
            "dGEiiQEKEkV2ZW50U2VhUmFjZURldGFpbBIKCgJpZBgBIAEoBRIMCgRkaWZm",
            "GAIgASgFEhYKDmluY2x1ZGVSb3VuZElkGAMgAygFEhcKD21pbGVzdG9uZVJl",
            "d2FyZBgEIAMoBRIWCg5taWxlc3RvbmVTY29yZRgFIAMoBRIQCghzdGFnZU51",
            "bRgGIAEoBSLaAQocRXZlbnRTZWFSYWNlRGV0YWlsTWFwQUJWYWx1ZRJfChVF",
            "dmVudFNlYVJhY2VEZXRhaWxNYXAYASADKAsyQC5yYXdkYXRhLkV2ZW50U2Vh",
            "UmFjZURldGFpbE1hcEFCVmFsdWUuRXZlbnRTZWFSYWNlRGV0YWlsTWFwRW50",
            "cnkaWQoaRXZlbnRTZWFSYWNlRGV0YWlsTWFwRW50cnkSCwoDa2V5GAEgASgF",
            "EioKBXZhbHVlGAIgASgLMhsucmF3ZGF0YS5FdmVudFNlYVJhY2VEZXRhaWw6",
            "AjgBIukEChZFdmVudFNlYVJhY2VEZXRhaWxDb25mElkKFUV2ZW50U2VhUmFj",
            "ZURldGFpbE1hcBgBIAMoCzI6LnJhd2RhdGEuRXZlbnRTZWFSYWNlRGV0YWls",
            "Q29uZi5FdmVudFNlYVJhY2VEZXRhaWxNYXBFbnRyeRJdChdFdmVudFNlYVJh",
            "Y2VEZXRhaWxNYXBBQhgCIAMoCzI8LnJhd2RhdGEuRXZlbnRTZWFSYWNlRGV0",
            "YWlsQ29uZi5FdmVudFNlYVJhY2VEZXRhaWxNYXBBQkVudHJ5EmcKHEV2ZW50",
            "U2VhUmFjZURldGFpbE1hcEFCUGF0Y2gYAyADKAsyQS5yYXdkYXRhLkV2ZW50",
            "U2VhUmFjZURldGFpbENvbmYuRXZlbnRTZWFSYWNlRGV0YWlsTWFwQUJQYXRj",
            "aEVudHJ5GlkKGkV2ZW50U2VhUmFjZURldGFpbE1hcEVudHJ5EgsKA2tleRgB",
            "IAEoBRIqCgV2YWx1ZRgCIAEoCzIbLnJhd2RhdGEuRXZlbnRTZWFSYWNlRGV0",
            "YWlsOgI4ARplChxFdmVudFNlYVJhY2VEZXRhaWxNYXBBQkVudHJ5EgsKA2tl",
            "eRgBIAEoCRI0CgV2YWx1ZRgCIAEoCzIlLnJhd2RhdGEuRXZlbnRTZWFSYWNl",
            "RGV0YWlsTWFwQUJWYWx1ZToCOAEaagohRXZlbnRTZWFSYWNlRGV0YWlsTWFw",
            "QUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRI0CgV2YWx1ZRgCIAEoCzIlLnJh",
            "d2RhdGEuRXZlbnRTZWFSYWNlRGV0YWlsTWFwQUJWYWx1ZToCOAFCPVotZ2l0",
            "bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdkYXRhqgIL",
            "ZmF0LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventSeaRaceDetail), global::fat.rawdata.EventSeaRaceDetail.Parser, new[]{ "Id", "Diff", "IncludeRoundId", "MilestoneReward", "MilestoneScore", "StageNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventSeaRaceDetailMapABValue), global::fat.rawdata.EventSeaRaceDetailMapABValue.Parser, new[]{ "EventSeaRaceDetailMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventSeaRaceDetailConf), global::fat.rawdata.EventSeaRaceDetailConf.Parser, new[]{ "EventSeaRaceDetailMap", "EventSeaRaceDetailMapAB", "EventSeaRaceDetailMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventSeaRaceDetail",table="EventSeaRaceDetailMap",table_wrapper="EventSeaRaceDetailConf",map="true",map_key_type="int32",data="EventSeaRaceDetailConf")
  /// annotation@ab(table_ab="EventSeaRaceDetailMapAB",table_ab_patch="EventSeaRaceDetailMapABPatch",table_ab_value="EventSeaRaceDetailMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventSeaRaceDetail(id="id")
  /// </summary>
  public sealed partial class EventSeaRaceDetail : pb::IMessage<EventSeaRaceDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventSeaRaceDetail> _parser = new pb::MessageParser<EventSeaRaceDetail>(() => new EventSeaRaceDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSeaRaceDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventSeaRaceDetailConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceDetail(EventSeaRaceDetail other) : this() {
      id_ = other.id_;
      diff_ = other.diff_;
      includeRoundId_ = other.includeRoundId_.Clone();
      milestoneReward_ = other.milestoneReward_.Clone();
      milestoneScore_ = other.milestoneScore_.Clone();
      stageNum_ = other.stageNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceDetail Clone() {
      return new EventSeaRaceDetail(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动详情id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "diff" field.</summary>
    public const int DiffFieldNumber = 2;
    private int diff_;
    /// <summary>
    /// 活动难度
    /// （仅用做TGA）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diff {
      get { return diff_; }
      set {
        diff_ = value;
      }
    }

    /// <summary>Field number for the "includeRoundId" field.</summary>
    public const int IncludeRoundIdFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_includeRoundId_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> includeRoundId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 包含回合id
    /// （EventSeaRaceRound.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IncludeRoundId {
      get { return includeRoundId_; }
    }

    /// <summary>Field number for the "milestoneReward" field.</summary>
    public const int MilestoneRewardFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_milestoneReward_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> milestoneReward_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 里程碑奖励id
    /// （EventSeaMilestoneReward.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MilestoneReward {
      get { return milestoneReward_; }
    }

    /// <summary>Field number for the "milestoneScore" field.</summary>
    public const int MilestoneScoreFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_milestoneScore_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> milestoneScore_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 里程碑节点分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MilestoneScore {
      get { return milestoneScore_; }
    }

    /// <summary>Field number for the "stageNum" field.</summary>
    public const int StageNumFieldNumber = 6;
    private int stageNum_;
    /// <summary>
    /// 排行界面进度节点数量，用做显示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageNum {
      get { return stageNum_; }
      set {
        stageNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSeaRaceDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSeaRaceDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Diff != other.Diff) return false;
      if(!includeRoundId_.Equals(other.includeRoundId_)) return false;
      if(!milestoneReward_.Equals(other.milestoneReward_)) return false;
      if(!milestoneScore_.Equals(other.milestoneScore_)) return false;
      if (StageNum != other.StageNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Diff != 0) hash ^= Diff.GetHashCode();
      hash ^= includeRoundId_.GetHashCode();
      hash ^= milestoneReward_.GetHashCode();
      hash ^= milestoneScore_.GetHashCode();
      if (StageNum != 0) hash ^= StageNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Diff != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Diff);
      }
      includeRoundId_.WriteTo(output, _repeated_includeRoundId_codec);
      milestoneReward_.WriteTo(output, _repeated_milestoneReward_codec);
      milestoneScore_.WriteTo(output, _repeated_milestoneScore_codec);
      if (StageNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(StageNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Diff != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Diff);
      }
      includeRoundId_.WriteTo(ref output, _repeated_includeRoundId_codec);
      milestoneReward_.WriteTo(ref output, _repeated_milestoneReward_codec);
      milestoneScore_.WriteTo(ref output, _repeated_milestoneScore_codec);
      if (StageNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(StageNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Diff != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diff);
      }
      size += includeRoundId_.CalculateSize(_repeated_includeRoundId_codec);
      size += milestoneReward_.CalculateSize(_repeated_milestoneReward_codec);
      size += milestoneScore_.CalculateSize(_repeated_milestoneScore_codec);
      if (StageNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSeaRaceDetail other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Diff != 0) {
        Diff = other.Diff;
      }
      includeRoundId_.Add(other.includeRoundId_);
      milestoneReward_.Add(other.milestoneReward_);
      milestoneScore_.Add(other.milestoneScore_);
      if (other.StageNum != 0) {
        StageNum = other.StageNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Diff = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            includeRoundId_.AddEntriesFrom(input, _repeated_includeRoundId_codec);
            break;
          }
          case 34:
          case 32: {
            milestoneReward_.AddEntriesFrom(input, _repeated_milestoneReward_codec);
            break;
          }
          case 42:
          case 40: {
            milestoneScore_.AddEntriesFrom(input, _repeated_milestoneScore_codec);
            break;
          }
          case 48: {
            StageNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Diff = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            includeRoundId_.AddEntriesFrom(ref input, _repeated_includeRoundId_codec);
            break;
          }
          case 34:
          case 32: {
            milestoneReward_.AddEntriesFrom(ref input, _repeated_milestoneReward_codec);
            break;
          }
          case 42:
          case 40: {
            milestoneScore_.AddEntriesFrom(ref input, _repeated_milestoneScore_codec);
            break;
          }
          case 48: {
            StageNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventSeaRaceDetailMapABValue : pb::IMessage<EventSeaRaceDetailMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventSeaRaceDetailMapABValue> _parser = new pb::MessageParser<EventSeaRaceDetailMapABValue>(() => new EventSeaRaceDetailMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSeaRaceDetailMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventSeaRaceDetailConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceDetailMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceDetailMapABValue(EventSeaRaceDetailMapABValue other) : this() {
      eventSeaRaceDetailMap_ = other.eventSeaRaceDetailMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceDetailMapABValue Clone() {
      return new EventSeaRaceDetailMapABValue(this);
    }

    /// <summary>Field number for the "EventSeaRaceDetailMap" field.</summary>
    public const int EventSeaRaceDetailMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventSeaRaceDetail>.Codec _map_eventSeaRaceDetailMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventSeaRaceDetail>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRaceDetail.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventSeaRaceDetail> eventSeaRaceDetailMap_ = new pbc::MapField<int, global::fat.rawdata.EventSeaRaceDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventSeaRaceDetail> EventSeaRaceDetailMap {
      get { return eventSeaRaceDetailMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSeaRaceDetailMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSeaRaceDetailMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventSeaRaceDetailMap.Equals(other.EventSeaRaceDetailMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventSeaRaceDetailMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventSeaRaceDetailMap_.WriteTo(output, _map_eventSeaRaceDetailMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventSeaRaceDetailMap_.WriteTo(ref output, _map_eventSeaRaceDetailMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventSeaRaceDetailMap_.CalculateSize(_map_eventSeaRaceDetailMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSeaRaceDetailMapABValue other) {
      if (other == null) {
        return;
      }
      eventSeaRaceDetailMap_.Add(other.eventSeaRaceDetailMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventSeaRaceDetailMap_.AddEntriesFrom(input, _map_eventSeaRaceDetailMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventSeaRaceDetailMap_.AddEntriesFrom(ref input, _map_eventSeaRaceDetailMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventSeaRaceDetailConf : pb::IMessage<EventSeaRaceDetailConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventSeaRaceDetailConf> _parser = new pb::MessageParser<EventSeaRaceDetailConf>(() => new EventSeaRaceDetailConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSeaRaceDetailConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventSeaRaceDetailConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceDetailConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceDetailConf(EventSeaRaceDetailConf other) : this() {
      eventSeaRaceDetailMap_ = other.eventSeaRaceDetailMap_.Clone();
      eventSeaRaceDetailMapAB_ = other.eventSeaRaceDetailMapAB_.Clone();
      eventSeaRaceDetailMapABPatch_ = other.eventSeaRaceDetailMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceDetailConf Clone() {
      return new EventSeaRaceDetailConf(this);
    }

    /// <summary>Field number for the "EventSeaRaceDetailMap" field.</summary>
    public const int EventSeaRaceDetailMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventSeaRaceDetail>.Codec _map_eventSeaRaceDetailMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventSeaRaceDetail>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRaceDetail.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventSeaRaceDetail> eventSeaRaceDetailMap_ = new pbc::MapField<int, global::fat.rawdata.EventSeaRaceDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventSeaRaceDetail> EventSeaRaceDetailMap {
      get { return eventSeaRaceDetailMap_; }
    }

    /// <summary>Field number for the "EventSeaRaceDetailMapAB" field.</summary>
    public const int EventSeaRaceDetailMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceDetailMapABValue>.Codec _map_eventSeaRaceDetailMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceDetailMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRaceDetailMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceDetailMapABValue> eventSeaRaceDetailMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceDetailMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventSeaRaceDetailMapABValue> EventSeaRaceDetailMapAB {
      get { return eventSeaRaceDetailMapAB_; }
    }

    /// <summary>Field number for the "EventSeaRaceDetailMapABPatch" field.</summary>
    public const int EventSeaRaceDetailMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceDetailMapABValue>.Codec _map_eventSeaRaceDetailMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceDetailMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRaceDetailMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceDetailMapABValue> eventSeaRaceDetailMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceDetailMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventSeaRaceDetailMapABValue> EventSeaRaceDetailMapABPatch {
      get { return eventSeaRaceDetailMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSeaRaceDetailConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSeaRaceDetailConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventSeaRaceDetailMap.Equals(other.EventSeaRaceDetailMap)) return false;
      if (!EventSeaRaceDetailMapAB.Equals(other.EventSeaRaceDetailMapAB)) return false;
      if (!EventSeaRaceDetailMapABPatch.Equals(other.EventSeaRaceDetailMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventSeaRaceDetailMap.GetHashCode();
      hash ^= EventSeaRaceDetailMapAB.GetHashCode();
      hash ^= EventSeaRaceDetailMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventSeaRaceDetailMap_.WriteTo(output, _map_eventSeaRaceDetailMap_codec);
      eventSeaRaceDetailMapAB_.WriteTo(output, _map_eventSeaRaceDetailMapAB_codec);
      eventSeaRaceDetailMapABPatch_.WriteTo(output, _map_eventSeaRaceDetailMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventSeaRaceDetailMap_.WriteTo(ref output, _map_eventSeaRaceDetailMap_codec);
      eventSeaRaceDetailMapAB_.WriteTo(ref output, _map_eventSeaRaceDetailMapAB_codec);
      eventSeaRaceDetailMapABPatch_.WriteTo(ref output, _map_eventSeaRaceDetailMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventSeaRaceDetailMap_.CalculateSize(_map_eventSeaRaceDetailMap_codec);
      size += eventSeaRaceDetailMapAB_.CalculateSize(_map_eventSeaRaceDetailMapAB_codec);
      size += eventSeaRaceDetailMapABPatch_.CalculateSize(_map_eventSeaRaceDetailMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSeaRaceDetailConf other) {
      if (other == null) {
        return;
      }
      eventSeaRaceDetailMap_.Add(other.eventSeaRaceDetailMap_);
      eventSeaRaceDetailMapAB_.Add(other.eventSeaRaceDetailMapAB_);
      eventSeaRaceDetailMapABPatch_.Add(other.eventSeaRaceDetailMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventSeaRaceDetailMap_.AddEntriesFrom(input, _map_eventSeaRaceDetailMap_codec);
            break;
          }
          case 18: {
            eventSeaRaceDetailMapAB_.AddEntriesFrom(input, _map_eventSeaRaceDetailMapAB_codec);
            break;
          }
          case 26: {
            eventSeaRaceDetailMapABPatch_.AddEntriesFrom(input, _map_eventSeaRaceDetailMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventSeaRaceDetailMap_.AddEntriesFrom(ref input, _map_eventSeaRaceDetailMap_codec);
            break;
          }
          case 18: {
            eventSeaRaceDetailMapAB_.AddEntriesFrom(ref input, _map_eventSeaRaceDetailMapAB_codec);
            break;
          }
          case 26: {
            eventSeaRaceDetailMapABPatch_.AddEntriesFrom(ref input, _map_eventSeaRaceDetailMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
