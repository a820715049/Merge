// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/ComMergeMixSourceConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/ComMergeMixSourceConf.proto</summary>
  public static partial class ComMergeMixSourceConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/ComMergeMixSourceConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ComMergeMixSourceConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNyYXdkYXRhL0NvbU1lcmdlTWl4U291cmNlQ29uZi5wcm90bxIHcmF3ZGF0",
            "YSL3BAoRQ29tTWVyZ2VNaXhTb3VyY2USCgoCaWQYASABKAUSDgoGX3RhZ3Nf",
            "GAIgAygJEjgKB2RpZUludG8YAyADKAsyJy5yYXdkYXRhLkNvbU1lcmdlTWl4",
            "U291cmNlLkRpZUludG9FbnRyeRIXCg9maXJzdE91dHB1dFRpbWUYBCABKAUS",
            "EwoLaXNCb29zdGFibGUYBSABKAgSEwoLaXNGaWxsQ2xlYXIYBiABKAgSEgoK",
            "aXNKdW1wYWJsZRgHIAEoCBIWCg5pc1NraXBEaWVBbmltZRgIIAEoCBISCgps",
            "aW1pdENvdW50GAkgASgFEjoKCG1heFRvYXN0GAogAygLMigucmF3ZGF0YS5D",
            "b21NZXJnZU1peFNvdXJjZS5NYXhUb2FzdEVudHJ5Eg0KBW1peElkGAsgAygF",
            "EhMKC291dHB1dENvdW50GBAgASgFEhIKCm91dHB1dFRpbWUYESABKAUSQgoM",
            "b3V0cHV0c1RvYXN0GAwgAygLMiwucmF3ZGF0YS5Db21NZXJnZU1peFNvdXJj",
            "ZS5PdXRwdXRzVG9hc3RFbnRyeRITCgtyZXZpdmVDb3VudBgNIAEoBRISCgpy",
            "ZXZpdmVUaW1lGA4gASgFEhIKCnN0YWdlQ291bnQYDyABKAUaLgoMRGllSW50",
            "b0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEaLwoNTWF4",
            "VG9hc3RFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBGjMK",
            "EU91dHB1dHNUb2FzdEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEo",
            "BToCOAEi1AEKG0NvbU1lcmdlTWl4U291cmNlTWFwQUJWYWx1ZRJcChRDb21N",
            "ZXJnZU1peFNvdXJjZU1hcBgBIAMoCzI+LnJhd2RhdGEuQ29tTWVyZ2VNaXhT",
            "b3VyY2VNYXBBQlZhbHVlLkNvbU1lcmdlTWl4U291cmNlTWFwRW50cnkaVwoZ",
            "Q29tTWVyZ2VNaXhTb3VyY2VNYXBFbnRyeRILCgNrZXkYASABKAUSKQoFdmFs",
            "dWUYAiABKAsyGi5yYXdkYXRhLkNvbU1lcmdlTWl4U291cmNlOgI4ASLZBAoV",
            "Q29tTWVyZ2VNaXhTb3VyY2VDb25mElYKFENvbU1lcmdlTWl4U291cmNlTWFw",
            "GAEgAygLMjgucmF3ZGF0YS5Db21NZXJnZU1peFNvdXJjZUNvbmYuQ29tTWVy",
            "Z2VNaXhTb3VyY2VNYXBFbnRyeRJaChZDb21NZXJnZU1peFNvdXJjZU1hcEFC",
            "GAIgAygLMjoucmF3ZGF0YS5Db21NZXJnZU1peFNvdXJjZUNvbmYuQ29tTWVy",
            "Z2VNaXhTb3VyY2VNYXBBQkVudHJ5EmQKG0NvbU1lcmdlTWl4U291cmNlTWFw",
            "QUJQYXRjaBgDIAMoCzI/LnJhd2RhdGEuQ29tTWVyZ2VNaXhTb3VyY2VDb25m",
            "LkNvbU1lcmdlTWl4U291cmNlTWFwQUJQYXRjaEVudHJ5GlcKGUNvbU1lcmdl",
            "TWl4U291cmNlTWFwRW50cnkSCwoDa2V5GAEgASgFEikKBXZhbHVlGAIgASgL",
            "MhoucmF3ZGF0YS5Db21NZXJnZU1peFNvdXJjZToCOAEaYwobQ29tTWVyZ2VN",
            "aXhTb3VyY2VNYXBBQkVudHJ5EgsKA2tleRgBIAEoCRIzCgV2YWx1ZRgCIAEo",
            "CzIkLnJhd2RhdGEuQ29tTWVyZ2VNaXhTb3VyY2VNYXBBQlZhbHVlOgI4ARpo",
            "CiBDb21NZXJnZU1peFNvdXJjZU1hcEFCUGF0Y2hFbnRyeRILCgNrZXkYASAB",
            "KAkSMwoFdmFsdWUYAiABKAsyJC5yYXdkYXRhLkNvbU1lcmdlTWl4U291cmNl",
            "TWFwQUJWYWx1ZToCOAFCPVotZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYv",
            "Z2VuL2dvbGFuZy9yYXdkYXRhqgILZmF0LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ComMergeMixSource), global::fat.rawdata.ComMergeMixSource.Parser, new[]{ "Id", "Tags", "DieInto", "FirstOutputTime", "IsBoostable", "IsFillClear", "IsJumpable", "IsSkipDieAnime", "LimitCount", "MaxToast", "MixId", "OutputCount", "OutputTime", "OutputsToast", "ReviveCount", "ReviveTime", "StageCount" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ComMergeMixSourceMapABValue), global::fat.rawdata.ComMergeMixSourceMapABValue.Parser, new[]{ "ComMergeMixSourceMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ComMergeMixSourceConf), global::fat.rawdata.ComMergeMixSourceConf.Parser, new[]{ "ComMergeMixSourceMap", "ComMergeMixSourceMapAB", "ComMergeMixSourceMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="ComMergeMixSource",table="ComMergeMixSourceMap",table_wrapper="ComMergeMixSourceConf",map="true",map_key_type="int32",data="ComMergeMixSourceConf")
  /// annotation@ab(table_ab="ComMergeMixSourceMapAB",table_ab_patch="ComMergeMixSourceMapABPatch",table_ab_value="ComMergeMixSourceMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@ComMergeMixSource(id="id")
  /// </summary>
  public sealed partial class ComMergeMixSource : pb::IMessage<ComMergeMixSource>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComMergeMixSource> _parser = new pb::MessageParser<ComMergeMixSource>(() => new ComMergeMixSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComMergeMixSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ComMergeMixSourceConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeMixSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeMixSource(ComMergeMixSource other) : this() {
      id_ = other.id_;
      Tags_ = other.Tags_.Clone();
      dieInto_ = other.dieInto_.Clone();
      firstOutputTime_ = other.firstOutputTime_;
      isBoostable_ = other.isBoostable_;
      isFillClear_ = other.isFillClear_;
      isJumpable_ = other.isJumpable_;
      isSkipDieAnime_ = other.isSkipDieAnime_;
      limitCount_ = other.limitCount_;
      maxToast_ = other.maxToast_.Clone();
      mixId_ = other.mixId_.Clone();
      outputCount_ = other.outputCount_;
      outputTime_ = other.outputTime_;
      outputsToast_ = other.outputsToast_.Clone();
      reviveCount_ = other.reviveCount_;
      reviveTime_ = other.reviveTime_;
      stageCount_ = other.stageCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeMixSource Clone() {
      return new ComMergeMixSource(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 合成物品id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "_tags_" field.</summary>
    public const int TagsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_Tags_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> Tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 版本标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return Tags_; }
    }

    /// <summary>Field number for the "dieInto" field.</summary>
    public const int DieIntoFieldNumber = 3;
    private static readonly pbc::MapField<int, int>.Codec _map_dieInto_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 26);
    private readonly pbc::MapField<int, int> dieInto_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 死后随机变成
    /// {ObjBasic.id:权重}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> DieInto {
      get { return dieInto_; }
    }

    /// <summary>Field number for the "firstOutputTime" field.</summary>
    public const int FirstOutputTimeFieldNumber = 4;
    private int firstOutputTime_;
    /// <summary>
    /// 首次产出
    /// 等待时间
    /// （秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstOutputTime {
      get { return firstOutputTime_; }
      set {
        firstOutputTime_ = value;
      }
    }

    /// <summary>Field number for the "isBoostable" field.</summary>
    public const int IsBoostableFieldNumber = 5;
    private bool isBoostable_;
    /// <summary>
    /// 是否能够开启
    /// 加倍消耗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBoostable {
      get { return isBoostable_; }
      set {
        isBoostable_ = value;
      }
    }

    /// <summary>Field number for the "isFillClear" field.</summary>
    public const int IsFillClearFieldNumber = 6;
    private bool isFillClear_;
    /// <summary>
    /// 是否在库存为0时
    /// 才开始走CD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFillClear {
      get { return isFillClear_; }
      set {
        isFillClear_ = value;
      }
    }

    /// <summary>Field number for the "isJumpable" field.</summary>
    public const int IsJumpableFieldNumber = 7;
    private bool isJumpable_;
    /// <summary>
    /// 是否享受
    /// 跳过冷却
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsJumpable {
      get { return isJumpable_; }
      set {
        isJumpable_ = value;
      }
    }

    /// <summary>Field number for the "isSkipDieAnime" field.</summary>
    public const int IsSkipDieAnimeFieldNumber = 8;
    private bool isSkipDieAnime_;
    /// <summary>
    /// 死亡时自身是否跳过缩放动画
    /// deadItem出现时是否跳过缩放动画
    /// 如果为FALSE，会同时有音效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkipDieAnime {
      get { return isSkipDieAnime_; }
      set {
        isSkipDieAnime_ = value;
      }
    }

    /// <summary>Field number for the "limitCount" field.</summary>
    public const int LimitCountFieldNumber = 9;
    private int limitCount_;
    /// <summary>
    /// 最大
    /// 数量限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitCount {
      get { return limitCount_; }
      set {
        limitCount_ = value;
      }
    }

    /// <summary>Field number for the "maxToast" field.</summary>
    public const int MaxToastFieldNumber = 10;
    private static readonly pbc::MapField<int, int>.Codec _map_maxToast_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 82);
    private readonly pbc::MapField<int, int> maxToast_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 4倍状态下掉落Max的棋子
    /// （id是4倍掉落棋子的id）
    /// ObjBasic.id:Toast.id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> MaxToast {
      get { return maxToast_; }
    }

    /// <summary>Field number for the "mixId" field.</summary>
    public const int MixIdFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_mixId_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> mixId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 消耗组合
    /// （MergeMixCost.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MixId {
      get { return mixId_; }
    }

    /// <summary>Field number for the "outputCount" field.</summary>
    public const int OutputCountFieldNumber = 16;
    private int outputCount_;
    /// <summary>
    /// 每次产出
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutputCount {
      get { return outputCount_; }
      set {
        outputCount_ = value;
      }
    }

    /// <summary>Field number for the "outputTime" field.</summary>
    public const int OutputTimeFieldNumber = 17;
    private int outputTime_;
    /// <summary>
    /// 每个产出
    /// 等待时间
    /// （秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutputTime {
      get { return outputTime_; }
      set {
        outputTime_ = value;
      }
    }

    /// <summary>Field number for the "outputsToast" field.</summary>
    public const int OutputsToastFieldNumber = 12;
    private static readonly pbc::MapField<int, int>.Codec _map_outputsToast_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 98);
    private readonly pbc::MapField<int, int> outputsToast_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 掉落时的鼓励toast
    /// {ObjBasic.id:toastValue,ObjBasic.id:toastValue}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> OutputsToast {
      get { return outputsToast_; }
    }

    /// <summary>Field number for the "reviveCount" field.</summary>
    public const int ReviveCountFieldNumber = 13;
    private int reviveCount_;
    /// <summary>
    /// 每次重生
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReviveCount {
      get { return reviveCount_; }
      set {
        reviveCount_ = value;
      }
    }

    /// <summary>Field number for the "reviveTime" field.</summary>
    public const int ReviveTimeFieldNumber = 14;
    private int reviveTime_;
    /// <summary>
    /// 产出全部用完后
    /// 恢复的重生时间
    /// （秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReviveTime {
      get { return reviveTime_; }
      set {
        reviveTime_ = value;
      }
    }

    /// <summary>Field number for the "stageCount" field.</summary>
    public const int StageCountFieldNumber = 15;
    private int stageCount_;
    /// <summary>
    /// 总数量
    /// （留空无限）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageCount {
      get { return stageCount_; }
      set {
        stageCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComMergeMixSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComMergeMixSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!Tags_.Equals(other.Tags_)) return false;
      if (!DieInto.Equals(other.DieInto)) return false;
      if (FirstOutputTime != other.FirstOutputTime) return false;
      if (IsBoostable != other.IsBoostable) return false;
      if (IsFillClear != other.IsFillClear) return false;
      if (IsJumpable != other.IsJumpable) return false;
      if (IsSkipDieAnime != other.IsSkipDieAnime) return false;
      if (LimitCount != other.LimitCount) return false;
      if (!MaxToast.Equals(other.MaxToast)) return false;
      if(!mixId_.Equals(other.mixId_)) return false;
      if (OutputCount != other.OutputCount) return false;
      if (OutputTime != other.OutputTime) return false;
      if (!OutputsToast.Equals(other.OutputsToast)) return false;
      if (ReviveCount != other.ReviveCount) return false;
      if (ReviveTime != other.ReviveTime) return false;
      if (StageCount != other.StageCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= Tags_.GetHashCode();
      hash ^= DieInto.GetHashCode();
      if (FirstOutputTime != 0) hash ^= FirstOutputTime.GetHashCode();
      if (IsBoostable != false) hash ^= IsBoostable.GetHashCode();
      if (IsFillClear != false) hash ^= IsFillClear.GetHashCode();
      if (IsJumpable != false) hash ^= IsJumpable.GetHashCode();
      if (IsSkipDieAnime != false) hash ^= IsSkipDieAnime.GetHashCode();
      if (LimitCount != 0) hash ^= LimitCount.GetHashCode();
      hash ^= MaxToast.GetHashCode();
      hash ^= mixId_.GetHashCode();
      if (OutputCount != 0) hash ^= OutputCount.GetHashCode();
      if (OutputTime != 0) hash ^= OutputTime.GetHashCode();
      hash ^= OutputsToast.GetHashCode();
      if (ReviveCount != 0) hash ^= ReviveCount.GetHashCode();
      if (ReviveTime != 0) hash ^= ReviveTime.GetHashCode();
      if (StageCount != 0) hash ^= StageCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      Tags_.WriteTo(output, _repeated_Tags_codec);
      dieInto_.WriteTo(output, _map_dieInto_codec);
      if (FirstOutputTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FirstOutputTime);
      }
      if (IsBoostable != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsBoostable);
      }
      if (IsFillClear != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsFillClear);
      }
      if (IsJumpable != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsJumpable);
      }
      if (IsSkipDieAnime != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsSkipDieAnime);
      }
      if (LimitCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LimitCount);
      }
      maxToast_.WriteTo(output, _map_maxToast_codec);
      mixId_.WriteTo(output, _repeated_mixId_codec);
      outputsToast_.WriteTo(output, _map_outputsToast_codec);
      if (ReviveCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ReviveCount);
      }
      if (ReviveTime != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ReviveTime);
      }
      if (StageCount != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(StageCount);
      }
      if (OutputCount != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(OutputCount);
      }
      if (OutputTime != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(OutputTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      Tags_.WriteTo(ref output, _repeated_Tags_codec);
      dieInto_.WriteTo(ref output, _map_dieInto_codec);
      if (FirstOutputTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FirstOutputTime);
      }
      if (IsBoostable != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsBoostable);
      }
      if (IsFillClear != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsFillClear);
      }
      if (IsJumpable != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsJumpable);
      }
      if (IsSkipDieAnime != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsSkipDieAnime);
      }
      if (LimitCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LimitCount);
      }
      maxToast_.WriteTo(ref output, _map_maxToast_codec);
      mixId_.WriteTo(ref output, _repeated_mixId_codec);
      outputsToast_.WriteTo(ref output, _map_outputsToast_codec);
      if (ReviveCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ReviveCount);
      }
      if (ReviveTime != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ReviveTime);
      }
      if (StageCount != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(StageCount);
      }
      if (OutputCount != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(OutputCount);
      }
      if (OutputTime != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(OutputTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += Tags_.CalculateSize(_repeated_Tags_codec);
      size += dieInto_.CalculateSize(_map_dieInto_codec);
      if (FirstOutputTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstOutputTime);
      }
      if (IsBoostable != false) {
        size += 1 + 1;
      }
      if (IsFillClear != false) {
        size += 1 + 1;
      }
      if (IsJumpable != false) {
        size += 1 + 1;
      }
      if (IsSkipDieAnime != false) {
        size += 1 + 1;
      }
      if (LimitCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitCount);
      }
      size += maxToast_.CalculateSize(_map_maxToast_codec);
      size += mixId_.CalculateSize(_repeated_mixId_codec);
      if (OutputCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OutputCount);
      }
      if (OutputTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OutputTime);
      }
      size += outputsToast_.CalculateSize(_map_outputsToast_codec);
      if (ReviveCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReviveCount);
      }
      if (ReviveTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReviveTime);
      }
      if (StageCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComMergeMixSource other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      Tags_.Add(other.Tags_);
      dieInto_.Add(other.dieInto_);
      if (other.FirstOutputTime != 0) {
        FirstOutputTime = other.FirstOutputTime;
      }
      if (other.IsBoostable != false) {
        IsBoostable = other.IsBoostable;
      }
      if (other.IsFillClear != false) {
        IsFillClear = other.IsFillClear;
      }
      if (other.IsJumpable != false) {
        IsJumpable = other.IsJumpable;
      }
      if (other.IsSkipDieAnime != false) {
        IsSkipDieAnime = other.IsSkipDieAnime;
      }
      if (other.LimitCount != 0) {
        LimitCount = other.LimitCount;
      }
      maxToast_.Add(other.maxToast_);
      mixId_.Add(other.mixId_);
      if (other.OutputCount != 0) {
        OutputCount = other.OutputCount;
      }
      if (other.OutputTime != 0) {
        OutputTime = other.OutputTime;
      }
      outputsToast_.Add(other.outputsToast_);
      if (other.ReviveCount != 0) {
        ReviveCount = other.ReviveCount;
      }
      if (other.ReviveTime != 0) {
        ReviveTime = other.ReviveTime;
      }
      if (other.StageCount != 0) {
        StageCount = other.StageCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Tags_.AddEntriesFrom(input, _repeated_Tags_codec);
            break;
          }
          case 26: {
            dieInto_.AddEntriesFrom(input, _map_dieInto_codec);
            break;
          }
          case 32: {
            FirstOutputTime = input.ReadInt32();
            break;
          }
          case 40: {
            IsBoostable = input.ReadBool();
            break;
          }
          case 48: {
            IsFillClear = input.ReadBool();
            break;
          }
          case 56: {
            IsJumpable = input.ReadBool();
            break;
          }
          case 64: {
            IsSkipDieAnime = input.ReadBool();
            break;
          }
          case 72: {
            LimitCount = input.ReadInt32();
            break;
          }
          case 82: {
            maxToast_.AddEntriesFrom(input, _map_maxToast_codec);
            break;
          }
          case 90:
          case 88: {
            mixId_.AddEntriesFrom(input, _repeated_mixId_codec);
            break;
          }
          case 98: {
            outputsToast_.AddEntriesFrom(input, _map_outputsToast_codec);
            break;
          }
          case 104: {
            ReviveCount = input.ReadInt32();
            break;
          }
          case 112: {
            ReviveTime = input.ReadInt32();
            break;
          }
          case 120: {
            StageCount = input.ReadInt32();
            break;
          }
          case 128: {
            OutputCount = input.ReadInt32();
            break;
          }
          case 136: {
            OutputTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Tags_.AddEntriesFrom(ref input, _repeated_Tags_codec);
            break;
          }
          case 26: {
            dieInto_.AddEntriesFrom(ref input, _map_dieInto_codec);
            break;
          }
          case 32: {
            FirstOutputTime = input.ReadInt32();
            break;
          }
          case 40: {
            IsBoostable = input.ReadBool();
            break;
          }
          case 48: {
            IsFillClear = input.ReadBool();
            break;
          }
          case 56: {
            IsJumpable = input.ReadBool();
            break;
          }
          case 64: {
            IsSkipDieAnime = input.ReadBool();
            break;
          }
          case 72: {
            LimitCount = input.ReadInt32();
            break;
          }
          case 82: {
            maxToast_.AddEntriesFrom(ref input, _map_maxToast_codec);
            break;
          }
          case 90:
          case 88: {
            mixId_.AddEntriesFrom(ref input, _repeated_mixId_codec);
            break;
          }
          case 98: {
            outputsToast_.AddEntriesFrom(ref input, _map_outputsToast_codec);
            break;
          }
          case 104: {
            ReviveCount = input.ReadInt32();
            break;
          }
          case 112: {
            ReviveTime = input.ReadInt32();
            break;
          }
          case 120: {
            StageCount = input.ReadInt32();
            break;
          }
          case 128: {
            OutputCount = input.ReadInt32();
            break;
          }
          case 136: {
            OutputTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComMergeMixSourceMapABValue : pb::IMessage<ComMergeMixSourceMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComMergeMixSourceMapABValue> _parser = new pb::MessageParser<ComMergeMixSourceMapABValue>(() => new ComMergeMixSourceMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComMergeMixSourceMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ComMergeMixSourceConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeMixSourceMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeMixSourceMapABValue(ComMergeMixSourceMapABValue other) : this() {
      comMergeMixSourceMap_ = other.comMergeMixSourceMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeMixSourceMapABValue Clone() {
      return new ComMergeMixSourceMapABValue(this);
    }

    /// <summary>Field number for the "ComMergeMixSourceMap" field.</summary>
    public const int ComMergeMixSourceMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.ComMergeMixSource>.Codec _map_comMergeMixSourceMap_codec
        = new pbc::MapField<int, global::fat.rawdata.ComMergeMixSource>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ComMergeMixSource.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.ComMergeMixSource> comMergeMixSourceMap_ = new pbc::MapField<int, global::fat.rawdata.ComMergeMixSource>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.ComMergeMixSource> ComMergeMixSourceMap {
      get { return comMergeMixSourceMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComMergeMixSourceMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComMergeMixSourceMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ComMergeMixSourceMap.Equals(other.ComMergeMixSourceMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ComMergeMixSourceMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      comMergeMixSourceMap_.WriteTo(output, _map_comMergeMixSourceMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      comMergeMixSourceMap_.WriteTo(ref output, _map_comMergeMixSourceMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += comMergeMixSourceMap_.CalculateSize(_map_comMergeMixSourceMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComMergeMixSourceMapABValue other) {
      if (other == null) {
        return;
      }
      comMergeMixSourceMap_.Add(other.comMergeMixSourceMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            comMergeMixSourceMap_.AddEntriesFrom(input, _map_comMergeMixSourceMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            comMergeMixSourceMap_.AddEntriesFrom(ref input, _map_comMergeMixSourceMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComMergeMixSourceConf : pb::IMessage<ComMergeMixSourceConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComMergeMixSourceConf> _parser = new pb::MessageParser<ComMergeMixSourceConf>(() => new ComMergeMixSourceConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComMergeMixSourceConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ComMergeMixSourceConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeMixSourceConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeMixSourceConf(ComMergeMixSourceConf other) : this() {
      comMergeMixSourceMap_ = other.comMergeMixSourceMap_.Clone();
      comMergeMixSourceMapAB_ = other.comMergeMixSourceMapAB_.Clone();
      comMergeMixSourceMapABPatch_ = other.comMergeMixSourceMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMergeMixSourceConf Clone() {
      return new ComMergeMixSourceConf(this);
    }

    /// <summary>Field number for the "ComMergeMixSourceMap" field.</summary>
    public const int ComMergeMixSourceMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.ComMergeMixSource>.Codec _map_comMergeMixSourceMap_codec
        = new pbc::MapField<int, global::fat.rawdata.ComMergeMixSource>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ComMergeMixSource.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.ComMergeMixSource> comMergeMixSourceMap_ = new pbc::MapField<int, global::fat.rawdata.ComMergeMixSource>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.ComMergeMixSource> ComMergeMixSourceMap {
      get { return comMergeMixSourceMap_; }
    }

    /// <summary>Field number for the "ComMergeMixSourceMapAB" field.</summary>
    public const int ComMergeMixSourceMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.ComMergeMixSourceMapABValue>.Codec _map_comMergeMixSourceMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.ComMergeMixSourceMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ComMergeMixSourceMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.ComMergeMixSourceMapABValue> comMergeMixSourceMapAB_ = new pbc::MapField<string, global::fat.rawdata.ComMergeMixSourceMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ComMergeMixSourceMapABValue> ComMergeMixSourceMapAB {
      get { return comMergeMixSourceMapAB_; }
    }

    /// <summary>Field number for the "ComMergeMixSourceMapABPatch" field.</summary>
    public const int ComMergeMixSourceMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.ComMergeMixSourceMapABValue>.Codec _map_comMergeMixSourceMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.ComMergeMixSourceMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ComMergeMixSourceMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.ComMergeMixSourceMapABValue> comMergeMixSourceMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.ComMergeMixSourceMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ComMergeMixSourceMapABValue> ComMergeMixSourceMapABPatch {
      get { return comMergeMixSourceMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComMergeMixSourceConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComMergeMixSourceConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ComMergeMixSourceMap.Equals(other.ComMergeMixSourceMap)) return false;
      if (!ComMergeMixSourceMapAB.Equals(other.ComMergeMixSourceMapAB)) return false;
      if (!ComMergeMixSourceMapABPatch.Equals(other.ComMergeMixSourceMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ComMergeMixSourceMap.GetHashCode();
      hash ^= ComMergeMixSourceMapAB.GetHashCode();
      hash ^= ComMergeMixSourceMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      comMergeMixSourceMap_.WriteTo(output, _map_comMergeMixSourceMap_codec);
      comMergeMixSourceMapAB_.WriteTo(output, _map_comMergeMixSourceMapAB_codec);
      comMergeMixSourceMapABPatch_.WriteTo(output, _map_comMergeMixSourceMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      comMergeMixSourceMap_.WriteTo(ref output, _map_comMergeMixSourceMap_codec);
      comMergeMixSourceMapAB_.WriteTo(ref output, _map_comMergeMixSourceMapAB_codec);
      comMergeMixSourceMapABPatch_.WriteTo(ref output, _map_comMergeMixSourceMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += comMergeMixSourceMap_.CalculateSize(_map_comMergeMixSourceMap_codec);
      size += comMergeMixSourceMapAB_.CalculateSize(_map_comMergeMixSourceMapAB_codec);
      size += comMergeMixSourceMapABPatch_.CalculateSize(_map_comMergeMixSourceMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComMergeMixSourceConf other) {
      if (other == null) {
        return;
      }
      comMergeMixSourceMap_.Add(other.comMergeMixSourceMap_);
      comMergeMixSourceMapAB_.Add(other.comMergeMixSourceMapAB_);
      comMergeMixSourceMapABPatch_.Add(other.comMergeMixSourceMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            comMergeMixSourceMap_.AddEntriesFrom(input, _map_comMergeMixSourceMap_codec);
            break;
          }
          case 18: {
            comMergeMixSourceMapAB_.AddEntriesFrom(input, _map_comMergeMixSourceMapAB_codec);
            break;
          }
          case 26: {
            comMergeMixSourceMapABPatch_.AddEntriesFrom(input, _map_comMergeMixSourceMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            comMergeMixSourceMap_.AddEntriesFrom(ref input, _map_comMergeMixSourceMap_codec);
            break;
          }
          case 18: {
            comMergeMixSourceMapAB_.AddEntriesFrom(ref input, _map_comMergeMixSourceMapAB_codec);
            break;
          }
          case 26: {
            comMergeMixSourceMapABPatch_.AddEntriesFrom(ref input, _map_comMergeMixSourceMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
