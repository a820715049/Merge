// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/ObjRandomChestConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/ObjRandomChestConf.proto</summary>
  public static partial class ObjRandomChestConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/ObjRandomChestConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ObjRandomChestConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiByYXdkYXRhL09ialJhbmRvbUNoZXN0Q29uZi5wcm90bxIHcmF3ZGF0YSLq",
            "AQoOT2JqUmFuZG9tQ2hlc3QSCgoCaWQYASABKAUSEwoLZml4ZWRSZXdhcmQY",
            "BSADKAkSDAoEaW5mbxgDIAMoCRIUCgxpc0ZpeGVkRmlyc3QYBiABKAgSFAoM",
            "aXNTaG93UmVzdWx0GA0gASgIEhEKCWpva2VyUHJvYhgHIAEoBRIVCg1qb2tl",
            "clByb2JTaG93GAggASgFEhMKC2pva2VyUmV3YXJkGAkgASgFEhQKDHJhbmRv",
            "bVJld2FyZBgCIAMoBRIZChFzcGVjaWFsVGlwc1ByZWZhYhgMIAEoCRINCgVz",
            "cGluZRgEIAEoCSLCAQoYT2JqUmFuZG9tQ2hlc3RNYXBBQlZhbHVlElMKEU9i",
            "alJhbmRvbUNoZXN0TWFwGAEgAygLMjgucmF3ZGF0YS5PYmpSYW5kb21DaGVz",
            "dE1hcEFCVmFsdWUuT2JqUmFuZG9tQ2hlc3RNYXBFbnRyeRpRChZPYmpSYW5k",
            "b21DaGVzdE1hcEVudHJ5EgsKA2tleRgBIAEoBRImCgV2YWx1ZRgCIAEoCzIX",
            "LnJhd2RhdGEuT2JqUmFuZG9tQ2hlc3Q6AjgBIqkEChJPYmpSYW5kb21DaGVz",
            "dENvbmYSTQoRT2JqUmFuZG9tQ2hlc3RNYXAYASADKAsyMi5yYXdkYXRhLk9i",
            "alJhbmRvbUNoZXN0Q29uZi5PYmpSYW5kb21DaGVzdE1hcEVudHJ5ElEKE09i",
            "alJhbmRvbUNoZXN0TWFwQUIYAiADKAsyNC5yYXdkYXRhLk9ialJhbmRvbUNo",
            "ZXN0Q29uZi5PYmpSYW5kb21DaGVzdE1hcEFCRW50cnkSWwoYT2JqUmFuZG9t",
            "Q2hlc3RNYXBBQlBhdGNoGAMgAygLMjkucmF3ZGF0YS5PYmpSYW5kb21DaGVz",
            "dENvbmYuT2JqUmFuZG9tQ2hlc3RNYXBBQlBhdGNoRW50cnkaUQoWT2JqUmFu",
            "ZG9tQ2hlc3RNYXBFbnRyeRILCgNrZXkYASABKAUSJgoFdmFsdWUYAiABKAsy",
            "Fy5yYXdkYXRhLk9ialJhbmRvbUNoZXN0OgI4ARpdChhPYmpSYW5kb21DaGVz",
            "dE1hcEFCRW50cnkSCwoDa2V5GAEgASgJEjAKBXZhbHVlGAIgASgLMiEucmF3",
            "ZGF0YS5PYmpSYW5kb21DaGVzdE1hcEFCVmFsdWU6AjgBGmIKHU9ialJhbmRv",
            "bUNoZXN0TWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIwCgV2YWx1ZRgC",
            "IAEoCzIhLnJhd2RhdGEuT2JqUmFuZG9tQ2hlc3RNYXBBQlZhbHVlOgI4AUI9",
            "Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2Rh",
            "dGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ObjRandomChest), global::fat.rawdata.ObjRandomChest.Parser, new[]{ "Id", "FixedReward", "Info", "IsFixedFirst", "IsShowResult", "JokerProb", "JokerProbShow", "JokerReward", "RandomReward", "SpecialTipsPrefab", "Spine" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ObjRandomChestMapABValue), global::fat.rawdata.ObjRandomChestMapABValue.Parser, new[]{ "ObjRandomChestMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ObjRandomChestConf), global::fat.rawdata.ObjRandomChestConf.Parser, new[]{ "ObjRandomChestMap", "ObjRandomChestMapAB", "ObjRandomChestMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="ObjRandomChest",table="ObjRandomChestMap",table_wrapper="ObjRandomChestConf",map="true",map_key_type="int32",data="ObjRandomChestConf")
  /// annotation@ab(table_ab="ObjRandomChestMapAB",table_ab_patch="ObjRandomChestMapABPatch",table_ab_value="ObjRandomChestMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@ObjRandomChest(id="id")
  /// </summary>
  public sealed partial class ObjRandomChest : pb::IMessage<ObjRandomChest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjRandomChest> _parser = new pb::MessageParser<ObjRandomChest>(() => new ObjRandomChest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjRandomChest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ObjRandomChestConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjRandomChest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjRandomChest(ObjRandomChest other) : this() {
      id_ = other.id_;
      fixedReward_ = other.fixedReward_.Clone();
      info_ = other.info_.Clone();
      isFixedFirst_ = other.isFixedFirst_;
      isShowResult_ = other.isShowResult_;
      jokerProb_ = other.jokerProb_;
      jokerProbShow_ = other.jokerProbShow_;
      jokerReward_ = other.jokerReward_;
      randomReward_ = other.randomReward_.Clone();
      specialTipsPrefab_ = other.specialTipsPrefab_;
      spine_ = other.spine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjRandomChest Clone() {
      return new ObjRandomChest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 随机宝箱ID
    /// （ObjBasic.id）
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "fixedReward" field.</summary>
    public const int FixedRewardFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_fixedReward_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> fixedReward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 固定奖励
    /// （为空代表没有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FixedReward {
      get { return fixedReward_; }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_info_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> info_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 随机内容展示
    /// {ID,min,max:ID,min,max}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "isFixedFirst" field.</summary>
    public const int IsFixedFirstFieldNumber = 6;
    private bool isFixedFirst_;
    /// <summary>
    /// 固定奖励
    /// 靠前展示？
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFixedFirst {
      get { return isFixedFirst_; }
      set {
        isFixedFirst_ = value;
      }
    }

    /// <summary>Field number for the "isShowResult" field.</summary>
    public const int IsShowResultFieldNumber = 13;
    private bool isShowResult_;
    /// <summary>
    /// 是否显示宝箱打开的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShowResult {
      get { return isShowResult_; }
      set {
        isShowResult_ = value;
      }
    }

    /// <summary>Field number for the "jokerProb" field.</summary>
    public const int JokerProbFieldNumber = 7;
    private int jokerProb_;
    /// <summary>
    /// 实际的次数
    /// 1 out of 次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JokerProb {
      get { return jokerProb_; }
      set {
        jokerProb_ = value;
      }
    }

    /// <summary>Field number for the "jokerProbShow" field.</summary>
    public const int JokerProbShowFieldNumber = 8;
    private int jokerProbShow_;
    /// <summary>
    /// 展示的次数
    /// 1 out of 次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JokerProbShow {
      get { return jokerProbShow_; }
      set {
        jokerProbShow_ = value;
      }
    }

    /// <summary>Field number for the "jokerReward" field.</summary>
    public const int JokerRewardFieldNumber = 9;
    private int jokerReward_;
    /// <summary>
    /// 王牌卡奖励
    /// （ObjBasic.id）
    /// （必须是ObjCardJoker.id）
    /// （为空代表没有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JokerReward {
      get { return jokerReward_; }
      set {
        jokerReward_ = value;
      }
    }

    /// <summary>Field number for the "randomReward" field.</summary>
    public const int RandomRewardFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_randomReward_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> randomReward_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 随机奖励
    /// （RandomReward.id）
    /// （为空代表没有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RandomReward {
      get { return randomReward_; }
    }

    /// <summary>Field number for the "specialTipsPrefab" field.</summary>
    public const int SpecialTipsPrefabFieldNumber = 12;
    private string specialTipsPrefab_ = "";
    /// <summary>
    /// 随机宝箱info显示
    /// （不为空时显示特殊info）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpecialTipsPrefab {
      get { return specialTipsPrefab_; }
      set {
        specialTipsPrefab_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spine" field.</summary>
    public const int SpineFieldNumber = 4;
    private string spine_ = "";
    /// <summary>
    /// 随机宝箱Spine
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Spine {
      get { return spine_; }
      set {
        spine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjRandomChest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjRandomChest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!fixedReward_.Equals(other.fixedReward_)) return false;
      if(!info_.Equals(other.info_)) return false;
      if (IsFixedFirst != other.IsFixedFirst) return false;
      if (IsShowResult != other.IsShowResult) return false;
      if (JokerProb != other.JokerProb) return false;
      if (JokerProbShow != other.JokerProbShow) return false;
      if (JokerReward != other.JokerReward) return false;
      if(!randomReward_.Equals(other.randomReward_)) return false;
      if (SpecialTipsPrefab != other.SpecialTipsPrefab) return false;
      if (Spine != other.Spine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= fixedReward_.GetHashCode();
      hash ^= info_.GetHashCode();
      if (IsFixedFirst != false) hash ^= IsFixedFirst.GetHashCode();
      if (IsShowResult != false) hash ^= IsShowResult.GetHashCode();
      if (JokerProb != 0) hash ^= JokerProb.GetHashCode();
      if (JokerProbShow != 0) hash ^= JokerProbShow.GetHashCode();
      if (JokerReward != 0) hash ^= JokerReward.GetHashCode();
      hash ^= randomReward_.GetHashCode();
      if (SpecialTipsPrefab.Length != 0) hash ^= SpecialTipsPrefab.GetHashCode();
      if (Spine.Length != 0) hash ^= Spine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      randomReward_.WriteTo(output, _repeated_randomReward_codec);
      info_.WriteTo(output, _repeated_info_codec);
      if (Spine.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Spine);
      }
      fixedReward_.WriteTo(output, _repeated_fixedReward_codec);
      if (IsFixedFirst != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsFixedFirst);
      }
      if (JokerProb != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(JokerProb);
      }
      if (JokerProbShow != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(JokerProbShow);
      }
      if (JokerReward != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(JokerReward);
      }
      if (SpecialTipsPrefab.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(SpecialTipsPrefab);
      }
      if (IsShowResult != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsShowResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      randomReward_.WriteTo(ref output, _repeated_randomReward_codec);
      info_.WriteTo(ref output, _repeated_info_codec);
      if (Spine.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Spine);
      }
      fixedReward_.WriteTo(ref output, _repeated_fixedReward_codec);
      if (IsFixedFirst != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsFixedFirst);
      }
      if (JokerProb != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(JokerProb);
      }
      if (JokerProbShow != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(JokerProbShow);
      }
      if (JokerReward != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(JokerReward);
      }
      if (SpecialTipsPrefab.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(SpecialTipsPrefab);
      }
      if (IsShowResult != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsShowResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += fixedReward_.CalculateSize(_repeated_fixedReward_codec);
      size += info_.CalculateSize(_repeated_info_codec);
      if (IsFixedFirst != false) {
        size += 1 + 1;
      }
      if (IsShowResult != false) {
        size += 1 + 1;
      }
      if (JokerProb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JokerProb);
      }
      if (JokerProbShow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JokerProbShow);
      }
      if (JokerReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JokerReward);
      }
      size += randomReward_.CalculateSize(_repeated_randomReward_codec);
      if (SpecialTipsPrefab.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpecialTipsPrefab);
      }
      if (Spine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Spine);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjRandomChest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      fixedReward_.Add(other.fixedReward_);
      info_.Add(other.info_);
      if (other.IsFixedFirst != false) {
        IsFixedFirst = other.IsFixedFirst;
      }
      if (other.IsShowResult != false) {
        IsShowResult = other.IsShowResult;
      }
      if (other.JokerProb != 0) {
        JokerProb = other.JokerProb;
      }
      if (other.JokerProbShow != 0) {
        JokerProbShow = other.JokerProbShow;
      }
      if (other.JokerReward != 0) {
        JokerReward = other.JokerReward;
      }
      randomReward_.Add(other.randomReward_);
      if (other.SpecialTipsPrefab.Length != 0) {
        SpecialTipsPrefab = other.SpecialTipsPrefab;
      }
      if (other.Spine.Length != 0) {
        Spine = other.Spine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            randomReward_.AddEntriesFrom(input, _repeated_randomReward_codec);
            break;
          }
          case 26: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 34: {
            Spine = input.ReadString();
            break;
          }
          case 42: {
            fixedReward_.AddEntriesFrom(input, _repeated_fixedReward_codec);
            break;
          }
          case 48: {
            IsFixedFirst = input.ReadBool();
            break;
          }
          case 56: {
            JokerProb = input.ReadInt32();
            break;
          }
          case 64: {
            JokerProbShow = input.ReadInt32();
            break;
          }
          case 72: {
            JokerReward = input.ReadInt32();
            break;
          }
          case 98: {
            SpecialTipsPrefab = input.ReadString();
            break;
          }
          case 104: {
            IsShowResult = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            randomReward_.AddEntriesFrom(ref input, _repeated_randomReward_codec);
            break;
          }
          case 26: {
            info_.AddEntriesFrom(ref input, _repeated_info_codec);
            break;
          }
          case 34: {
            Spine = input.ReadString();
            break;
          }
          case 42: {
            fixedReward_.AddEntriesFrom(ref input, _repeated_fixedReward_codec);
            break;
          }
          case 48: {
            IsFixedFirst = input.ReadBool();
            break;
          }
          case 56: {
            JokerProb = input.ReadInt32();
            break;
          }
          case 64: {
            JokerProbShow = input.ReadInt32();
            break;
          }
          case 72: {
            JokerReward = input.ReadInt32();
            break;
          }
          case 98: {
            SpecialTipsPrefab = input.ReadString();
            break;
          }
          case 104: {
            IsShowResult = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjRandomChestMapABValue : pb::IMessage<ObjRandomChestMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjRandomChestMapABValue> _parser = new pb::MessageParser<ObjRandomChestMapABValue>(() => new ObjRandomChestMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjRandomChestMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ObjRandomChestConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjRandomChestMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjRandomChestMapABValue(ObjRandomChestMapABValue other) : this() {
      objRandomChestMap_ = other.objRandomChestMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjRandomChestMapABValue Clone() {
      return new ObjRandomChestMapABValue(this);
    }

    /// <summary>Field number for the "ObjRandomChestMap" field.</summary>
    public const int ObjRandomChestMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.ObjRandomChest>.Codec _map_objRandomChestMap_codec
        = new pbc::MapField<int, global::fat.rawdata.ObjRandomChest>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjRandomChest.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.ObjRandomChest> objRandomChestMap_ = new pbc::MapField<int, global::fat.rawdata.ObjRandomChest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.ObjRandomChest> ObjRandomChestMap {
      get { return objRandomChestMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjRandomChestMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjRandomChestMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ObjRandomChestMap.Equals(other.ObjRandomChestMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ObjRandomChestMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objRandomChestMap_.WriteTo(output, _map_objRandomChestMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objRandomChestMap_.WriteTo(ref output, _map_objRandomChestMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objRandomChestMap_.CalculateSize(_map_objRandomChestMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjRandomChestMapABValue other) {
      if (other == null) {
        return;
      }
      objRandomChestMap_.Add(other.objRandomChestMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objRandomChestMap_.AddEntriesFrom(input, _map_objRandomChestMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objRandomChestMap_.AddEntriesFrom(ref input, _map_objRandomChestMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjRandomChestConf : pb::IMessage<ObjRandomChestConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjRandomChestConf> _parser = new pb::MessageParser<ObjRandomChestConf>(() => new ObjRandomChestConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjRandomChestConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ObjRandomChestConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjRandomChestConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjRandomChestConf(ObjRandomChestConf other) : this() {
      objRandomChestMap_ = other.objRandomChestMap_.Clone();
      objRandomChestMapAB_ = other.objRandomChestMapAB_.Clone();
      objRandomChestMapABPatch_ = other.objRandomChestMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjRandomChestConf Clone() {
      return new ObjRandomChestConf(this);
    }

    /// <summary>Field number for the "ObjRandomChestMap" field.</summary>
    public const int ObjRandomChestMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.ObjRandomChest>.Codec _map_objRandomChestMap_codec
        = new pbc::MapField<int, global::fat.rawdata.ObjRandomChest>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjRandomChest.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.ObjRandomChest> objRandomChestMap_ = new pbc::MapField<int, global::fat.rawdata.ObjRandomChest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.ObjRandomChest> ObjRandomChestMap {
      get { return objRandomChestMap_; }
    }

    /// <summary>Field number for the "ObjRandomChestMapAB" field.</summary>
    public const int ObjRandomChestMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.ObjRandomChestMapABValue>.Codec _map_objRandomChestMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.ObjRandomChestMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjRandomChestMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.ObjRandomChestMapABValue> objRandomChestMapAB_ = new pbc::MapField<string, global::fat.rawdata.ObjRandomChestMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ObjRandomChestMapABValue> ObjRandomChestMapAB {
      get { return objRandomChestMapAB_; }
    }

    /// <summary>Field number for the "ObjRandomChestMapABPatch" field.</summary>
    public const int ObjRandomChestMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.ObjRandomChestMapABValue>.Codec _map_objRandomChestMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.ObjRandomChestMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjRandomChestMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.ObjRandomChestMapABValue> objRandomChestMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.ObjRandomChestMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ObjRandomChestMapABValue> ObjRandomChestMapABPatch {
      get { return objRandomChestMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjRandomChestConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjRandomChestConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ObjRandomChestMap.Equals(other.ObjRandomChestMap)) return false;
      if (!ObjRandomChestMapAB.Equals(other.ObjRandomChestMapAB)) return false;
      if (!ObjRandomChestMapABPatch.Equals(other.ObjRandomChestMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ObjRandomChestMap.GetHashCode();
      hash ^= ObjRandomChestMapAB.GetHashCode();
      hash ^= ObjRandomChestMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objRandomChestMap_.WriteTo(output, _map_objRandomChestMap_codec);
      objRandomChestMapAB_.WriteTo(output, _map_objRandomChestMapAB_codec);
      objRandomChestMapABPatch_.WriteTo(output, _map_objRandomChestMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objRandomChestMap_.WriteTo(ref output, _map_objRandomChestMap_codec);
      objRandomChestMapAB_.WriteTo(ref output, _map_objRandomChestMapAB_codec);
      objRandomChestMapABPatch_.WriteTo(ref output, _map_objRandomChestMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objRandomChestMap_.CalculateSize(_map_objRandomChestMap_codec);
      size += objRandomChestMapAB_.CalculateSize(_map_objRandomChestMapAB_codec);
      size += objRandomChestMapABPatch_.CalculateSize(_map_objRandomChestMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjRandomChestConf other) {
      if (other == null) {
        return;
      }
      objRandomChestMap_.Add(other.objRandomChestMap_);
      objRandomChestMapAB_.Add(other.objRandomChestMapAB_);
      objRandomChestMapABPatch_.Add(other.objRandomChestMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objRandomChestMap_.AddEntriesFrom(input, _map_objRandomChestMap_codec);
            break;
          }
          case 18: {
            objRandomChestMapAB_.AddEntriesFrom(input, _map_objRandomChestMapAB_codec);
            break;
          }
          case 26: {
            objRandomChestMapABPatch_.AddEntriesFrom(input, _map_objRandomChestMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objRandomChestMap_.AddEntriesFrom(ref input, _map_objRandomChestMap_codec);
            break;
          }
          case 18: {
            objRandomChestMapAB_.AddEntriesFrom(ref input, _map_objRandomChestMapAB_codec);
            break;
          }
          case 26: {
            objRandomChestMapABPatch_.AddEntriesFrom(ref input, _map_objRandomChestMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
