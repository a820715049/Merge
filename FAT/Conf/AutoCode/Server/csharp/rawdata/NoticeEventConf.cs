// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/NoticeEventConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/NoticeEventConf.proto</summary>
  public static partial class NoticeEventConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/NoticeEventConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NoticeEventConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1yYXdkYXRhL05vdGljZUV2ZW50Q29uZi5wcm90bxIHcmF3ZGF0YRoecmF3",
            "ZGF0YS9Ob3RpY2VUaW1pbmdUeXBlLnByb3RvIn0KC05vdGljZUV2ZW50EgoK",
            "AmlkGAEgASgFEg0KBWFzc2V0GAIgAygFEgwKBGlzT24YBSABKAgSMwoQbm90",
            "aWNlVGltaW5nVHlwZRgJIAEoDjIZLnJhd2RhdGEuTm90aWNlVGltaW5nVHlw",
            "ZRIQCgh0aW1lRGlmZhgHIAEoBSKwAQoVTm90aWNlRXZlbnRNYXBBQlZhbHVl",
            "EkoKDk5vdGljZUV2ZW50TWFwGAEgAygLMjIucmF3ZGF0YS5Ob3RpY2VFdmVu",
            "dE1hcEFCVmFsdWUuTm90aWNlRXZlbnRNYXBFbnRyeRpLChNOb3RpY2VFdmVu",
            "dE1hcEVudHJ5EgsKA2tleRgBIAEoBRIjCgV2YWx1ZRgCIAEoCzIULnJhd2Rh",
            "dGEuTm90aWNlRXZlbnQ6AjgBIvkDCg9Ob3RpY2VFdmVudENvbmYSRAoOTm90",
            "aWNlRXZlbnRNYXAYASADKAsyLC5yYXdkYXRhLk5vdGljZUV2ZW50Q29uZi5O",
            "b3RpY2VFdmVudE1hcEVudHJ5EkgKEE5vdGljZUV2ZW50TWFwQUIYAiADKAsy",
            "Li5yYXdkYXRhLk5vdGljZUV2ZW50Q29uZi5Ob3RpY2VFdmVudE1hcEFCRW50",
            "cnkSUgoVTm90aWNlRXZlbnRNYXBBQlBhdGNoGAMgAygLMjMucmF3ZGF0YS5O",
            "b3RpY2VFdmVudENvbmYuTm90aWNlRXZlbnRNYXBBQlBhdGNoRW50cnkaSwoT",
            "Tm90aWNlRXZlbnRNYXBFbnRyeRILCgNrZXkYASABKAUSIwoFdmFsdWUYAiAB",
            "KAsyFC5yYXdkYXRhLk5vdGljZUV2ZW50OgI4ARpXChVOb3RpY2VFdmVudE1h",
            "cEFCRW50cnkSCwoDa2V5GAEgASgJEi0KBXZhbHVlGAIgASgLMh4ucmF3ZGF0",
            "YS5Ob3RpY2VFdmVudE1hcEFCVmFsdWU6AjgBGlwKGk5vdGljZUV2ZW50TWFw",
            "QUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRItCgV2YWx1ZRgCIAEoCzIeLnJh",
            "d2RhdGEuTm90aWNlRXZlbnRNYXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVu",
            "cGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3",
            "ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.rawdata.NoticeTimingTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.NoticeEvent), global::fat.rawdata.NoticeEvent.Parser, new[]{ "Id", "Asset", "IsOn", "NoticeTimingType", "TimeDiff" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.NoticeEventMapABValue), global::fat.rawdata.NoticeEventMapABValue.Parser, new[]{ "NoticeEventMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.NoticeEventConf), global::fat.rawdata.NoticeEventConf.Parser, new[]{ "NoticeEventMap", "NoticeEventMapAB", "NoticeEventMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="NoticeEvent",table="NoticeEventMap",table_wrapper="NoticeEventConf",map="true",map_key_type="int32",data="NoticeEventConf")
  /// annotation@ab(table_ab="NoticeEventMapAB",table_ab_patch="NoticeEventMapABPatch",table_ab_value="NoticeEventMapABValue",ab_patch="true")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@NoticeEvent(id="id")
  /// </summary>
  public sealed partial class NoticeEvent : pb::IMessage<NoticeEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NoticeEvent> _parser = new pb::MessageParser<NoticeEvent>(() => new NoticeEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.NoticeEventConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeEvent(NoticeEvent other) : this() {
      id_ = other.id_;
      asset_ = other.asset_.Clone();
      isOn_ = other.isOn_;
      noticeTimingType_ = other.noticeTimingType_;
      timeDiff_ = other.timeDiff_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeEvent Clone() {
      return new NoticeEvent(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动推送实例
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "asset" field.</summary>
    public const int AssetFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_asset_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> asset_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 推送图文
    /// （AssetInfo.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Asset {
      get { return asset_; }
    }

    /// <summary>Field number for the "isOn" field.</summary>
    public const int IsOnFieldNumber = 5;
    private bool isOn_;
    /// <summary>
    /// 推送开关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOn {
      get { return isOn_; }
      set {
        isOn_ = value;
      }
    }

    /// <summary>Field number for the "noticeTimingType" field.</summary>
    public const int NoticeTimingTypeFieldNumber = 9;
    private global::fat.rawdata.NoticeTimingType noticeTimingType_ = global::fat.rawdata.NoticeTimingType.TimingTypeStart;
    /// <summary>
    /// 推送时机类型
    /// NoticeTimingType@enum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.rawdata.NoticeTimingType NoticeTimingType {
      get { return noticeTimingType_; }
      set {
        noticeTimingType_ = value;
      }
    }

    /// <summary>Field number for the "timeDiff" field.</summary>
    public const int TimeDiffFieldNumber = 7;
    private int timeDiff_;
    /// <summary>
    /// 开启/关闭前x秒推送
    /// 为空时=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeDiff {
      get { return timeDiff_; }
      set {
        timeDiff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!asset_.Equals(other.asset_)) return false;
      if (IsOn != other.IsOn) return false;
      if (NoticeTimingType != other.NoticeTimingType) return false;
      if (TimeDiff != other.TimeDiff) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= asset_.GetHashCode();
      if (IsOn != false) hash ^= IsOn.GetHashCode();
      if (NoticeTimingType != global::fat.rawdata.NoticeTimingType.TimingTypeStart) hash ^= NoticeTimingType.GetHashCode();
      if (TimeDiff != 0) hash ^= TimeDiff.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      asset_.WriteTo(output, _repeated_asset_codec);
      if (IsOn != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsOn);
      }
      if (TimeDiff != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TimeDiff);
      }
      if (NoticeTimingType != global::fat.rawdata.NoticeTimingType.TimingTypeStart) {
        output.WriteRawTag(72);
        output.WriteEnum((int) NoticeTimingType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      asset_.WriteTo(ref output, _repeated_asset_codec);
      if (IsOn != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsOn);
      }
      if (TimeDiff != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TimeDiff);
      }
      if (NoticeTimingType != global::fat.rawdata.NoticeTimingType.TimingTypeStart) {
        output.WriteRawTag(72);
        output.WriteEnum((int) NoticeTimingType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += asset_.CalculateSize(_repeated_asset_codec);
      if (IsOn != false) {
        size += 1 + 1;
      }
      if (NoticeTimingType != global::fat.rawdata.NoticeTimingType.TimingTypeStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NoticeTimingType);
      }
      if (TimeDiff != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeDiff);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeEvent other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      asset_.Add(other.asset_);
      if (other.IsOn != false) {
        IsOn = other.IsOn;
      }
      if (other.NoticeTimingType != global::fat.rawdata.NoticeTimingType.TimingTypeStart) {
        NoticeTimingType = other.NoticeTimingType;
      }
      if (other.TimeDiff != 0) {
        TimeDiff = other.TimeDiff;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            asset_.AddEntriesFrom(input, _repeated_asset_codec);
            break;
          }
          case 40: {
            IsOn = input.ReadBool();
            break;
          }
          case 56: {
            TimeDiff = input.ReadInt32();
            break;
          }
          case 72: {
            NoticeTimingType = (global::fat.rawdata.NoticeTimingType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            asset_.AddEntriesFrom(ref input, _repeated_asset_codec);
            break;
          }
          case 40: {
            IsOn = input.ReadBool();
            break;
          }
          case 56: {
            TimeDiff = input.ReadInt32();
            break;
          }
          case 72: {
            NoticeTimingType = (global::fat.rawdata.NoticeTimingType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NoticeEventMapABValue : pb::IMessage<NoticeEventMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NoticeEventMapABValue> _parser = new pb::MessageParser<NoticeEventMapABValue>(() => new NoticeEventMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeEventMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.NoticeEventConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeEventMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeEventMapABValue(NoticeEventMapABValue other) : this() {
      noticeEventMap_ = other.noticeEventMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeEventMapABValue Clone() {
      return new NoticeEventMapABValue(this);
    }

    /// <summary>Field number for the "NoticeEventMap" field.</summary>
    public const int NoticeEventMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.NoticeEvent>.Codec _map_noticeEventMap_codec
        = new pbc::MapField<int, global::fat.rawdata.NoticeEvent>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.NoticeEvent.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.NoticeEvent> noticeEventMap_ = new pbc::MapField<int, global::fat.rawdata.NoticeEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.NoticeEvent> NoticeEventMap {
      get { return noticeEventMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeEventMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeEventMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!NoticeEventMap.Equals(other.NoticeEventMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= NoticeEventMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      noticeEventMap_.WriteTo(output, _map_noticeEventMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      noticeEventMap_.WriteTo(ref output, _map_noticeEventMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += noticeEventMap_.CalculateSize(_map_noticeEventMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeEventMapABValue other) {
      if (other == null) {
        return;
      }
      noticeEventMap_.Add(other.noticeEventMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            noticeEventMap_.AddEntriesFrom(input, _map_noticeEventMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            noticeEventMap_.AddEntriesFrom(ref input, _map_noticeEventMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NoticeEventConf : pb::IMessage<NoticeEventConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NoticeEventConf> _parser = new pb::MessageParser<NoticeEventConf>(() => new NoticeEventConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeEventConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.NoticeEventConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeEventConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeEventConf(NoticeEventConf other) : this() {
      noticeEventMap_ = other.noticeEventMap_.Clone();
      noticeEventMapAB_ = other.noticeEventMapAB_.Clone();
      noticeEventMapABPatch_ = other.noticeEventMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeEventConf Clone() {
      return new NoticeEventConf(this);
    }

    /// <summary>Field number for the "NoticeEventMap" field.</summary>
    public const int NoticeEventMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.NoticeEvent>.Codec _map_noticeEventMap_codec
        = new pbc::MapField<int, global::fat.rawdata.NoticeEvent>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.NoticeEvent.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.NoticeEvent> noticeEventMap_ = new pbc::MapField<int, global::fat.rawdata.NoticeEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.NoticeEvent> NoticeEventMap {
      get { return noticeEventMap_; }
    }

    /// <summary>Field number for the "NoticeEventMapAB" field.</summary>
    public const int NoticeEventMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.NoticeEventMapABValue>.Codec _map_noticeEventMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.NoticeEventMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.NoticeEventMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.NoticeEventMapABValue> noticeEventMapAB_ = new pbc::MapField<string, global::fat.rawdata.NoticeEventMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.NoticeEventMapABValue> NoticeEventMapAB {
      get { return noticeEventMapAB_; }
    }

    /// <summary>Field number for the "NoticeEventMapABPatch" field.</summary>
    public const int NoticeEventMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.NoticeEventMapABValue>.Codec _map_noticeEventMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.NoticeEventMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.NoticeEventMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.NoticeEventMapABValue> noticeEventMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.NoticeEventMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.NoticeEventMapABValue> NoticeEventMapABPatch {
      get { return noticeEventMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeEventConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeEventConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!NoticeEventMap.Equals(other.NoticeEventMap)) return false;
      if (!NoticeEventMapAB.Equals(other.NoticeEventMapAB)) return false;
      if (!NoticeEventMapABPatch.Equals(other.NoticeEventMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= NoticeEventMap.GetHashCode();
      hash ^= NoticeEventMapAB.GetHashCode();
      hash ^= NoticeEventMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      noticeEventMap_.WriteTo(output, _map_noticeEventMap_codec);
      noticeEventMapAB_.WriteTo(output, _map_noticeEventMapAB_codec);
      noticeEventMapABPatch_.WriteTo(output, _map_noticeEventMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      noticeEventMap_.WriteTo(ref output, _map_noticeEventMap_codec);
      noticeEventMapAB_.WriteTo(ref output, _map_noticeEventMapAB_codec);
      noticeEventMapABPatch_.WriteTo(ref output, _map_noticeEventMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += noticeEventMap_.CalculateSize(_map_noticeEventMap_codec);
      size += noticeEventMapAB_.CalculateSize(_map_noticeEventMapAB_codec);
      size += noticeEventMapABPatch_.CalculateSize(_map_noticeEventMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeEventConf other) {
      if (other == null) {
        return;
      }
      noticeEventMap_.Add(other.noticeEventMap_);
      noticeEventMapAB_.Add(other.noticeEventMapAB_);
      noticeEventMapABPatch_.Add(other.noticeEventMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            noticeEventMap_.AddEntriesFrom(input, _map_noticeEventMap_codec);
            break;
          }
          case 18: {
            noticeEventMapAB_.AddEntriesFrom(input, _map_noticeEventMapAB_codec);
            break;
          }
          case 26: {
            noticeEventMapABPatch_.AddEntriesFrom(input, _map_noticeEventMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            noticeEventMap_.AddEntriesFrom(ref input, _map_noticeEventMap_codec);
            break;
          }
          case 18: {
            noticeEventMapAB_.AddEntriesFrom(ref input, _map_noticeEventMapAB_codec);
            break;
          }
          case 26: {
            noticeEventMapABPatch_.AddEntriesFrom(ref input, _map_noticeEventMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
