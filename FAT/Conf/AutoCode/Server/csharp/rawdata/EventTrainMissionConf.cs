// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventTrainMissionConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventTrainMissionConf.proto</summary>
  public static partial class EventTrainMissionConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventTrainMissionConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventTrainMissionConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNyYXdkYXRhL0V2ZW50VHJhaW5NaXNzaW9uQ29uZi5wcm90bxIHcmF3ZGF0",
            "YSLhAgoRRXZlbnRUcmFpbk1pc3Npb24SCgoCaWQYASABKAUSDQoFYm9hcmQY",
            "EyABKAUSDwoHYm9hcmRJZBgDIAEoBRITCgtjaG9vc2VUaGVtZRgFIAEoBRIS",
            "CgplbmRSZWN5Y2xlGAYgAygJEhAKCGVuZFRoZW1lGAcgASgFEg8KB2dyYWRl",
            "SWQYCCABKAUSEQoJaGVscFRoZW1lGAkgASgFEhEKCWlzT25Cb251cxgKIAEo",
            "CBISCgppc09uQnViYmxlGAsgASgIEhEKCWl0ZW1UaGVtZRgMIAEoBRIUCgxs",
            "b2FkaW5nVGhlbWUYFCABKAUSEQoJbWFpblRoZW1lGA0gASgFEgwKBG5hbWUY",
            "DiABKAkSFQoNbmV3Um91bmRUaGVtZRgPIAEoBRIUCgxwcmV2aWV3VGhlbWUY",
            "ECABKAUSEgoKc3RhcnRUaGVtZRgRIAEoBRIPCgdzdG9yYWdlGBIgASgFItQB",
            "ChtFdmVudFRyYWluTWlzc2lvbk1hcEFCVmFsdWUSXAoURXZlbnRUcmFpbk1p",
            "c3Npb25NYXAYASADKAsyPi5yYXdkYXRhLkV2ZW50VHJhaW5NaXNzaW9uTWFw",
            "QUJWYWx1ZS5FdmVudFRyYWluTWlzc2lvbk1hcEVudHJ5GlcKGUV2ZW50VHJh",
            "aW5NaXNzaW9uTWFwRW50cnkSCwoDa2V5GAEgASgFEikKBXZhbHVlGAIgASgL",
            "MhoucmF3ZGF0YS5FdmVudFRyYWluTWlzc2lvbjoCOAEi2QQKFUV2ZW50VHJh",
            "aW5NaXNzaW9uQ29uZhJWChRFdmVudFRyYWluTWlzc2lvbk1hcBgBIAMoCzI4",
            "LnJhd2RhdGEuRXZlbnRUcmFpbk1pc3Npb25Db25mLkV2ZW50VHJhaW5NaXNz",
            "aW9uTWFwRW50cnkSWgoWRXZlbnRUcmFpbk1pc3Npb25NYXBBQhgCIAMoCzI6",
            "LnJhd2RhdGEuRXZlbnRUcmFpbk1pc3Npb25Db25mLkV2ZW50VHJhaW5NaXNz",
            "aW9uTWFwQUJFbnRyeRJkChtFdmVudFRyYWluTWlzc2lvbk1hcEFCUGF0Y2gY",
            "AyADKAsyPy5yYXdkYXRhLkV2ZW50VHJhaW5NaXNzaW9uQ29uZi5FdmVudFRy",
            "YWluTWlzc2lvbk1hcEFCUGF0Y2hFbnRyeRpXChlFdmVudFRyYWluTWlzc2lv",
            "bk1hcEVudHJ5EgsKA2tleRgBIAEoBRIpCgV2YWx1ZRgCIAEoCzIaLnJhd2Rh",
            "dGEuRXZlbnRUcmFpbk1pc3Npb246AjgBGmMKG0V2ZW50VHJhaW5NaXNzaW9u",
            "TWFwQUJFbnRyeRILCgNrZXkYASABKAkSMwoFdmFsdWUYAiABKAsyJC5yYXdk",
            "YXRhLkV2ZW50VHJhaW5NaXNzaW9uTWFwQUJWYWx1ZToCOAEaaAogRXZlbnRU",
            "cmFpbk1pc3Npb25NYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEjMKBXZh",
            "bHVlGAIgASgLMiQucmF3ZGF0YS5FdmVudFRyYWluTWlzc2lvbk1hcEFCVmFs",
            "dWU6AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xh",
            "bmcvcmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTrainMission), global::fat.rawdata.EventTrainMission.Parser, new[]{ "Id", "Board", "BoardId", "ChooseTheme", "EndRecycle", "EndTheme", "GradeId", "HelpTheme", "IsOnBonus", "IsOnBubble", "ItemTheme", "LoadingTheme", "MainTheme", "Name", "NewRoundTheme", "PreviewTheme", "StartTheme", "Storage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTrainMissionMapABValue), global::fat.rawdata.EventTrainMissionMapABValue.Parser, new[]{ "EventTrainMissionMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTrainMissionConf), global::fat.rawdata.EventTrainMissionConf.Parser, new[]{ "EventTrainMissionMap", "EventTrainMissionMapAB", "EventTrainMissionMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventTrainMission",table="EventTrainMissionMap",table_wrapper="EventTrainMissionConf",map="true",map_key_type="int32",data="EventTrainMissionConf")
  /// annotation@ab(table_ab="EventTrainMissionMapAB",table_ab_patch="EventTrainMissionMapABPatch",table_ab_value="EventTrainMissionMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventTrainMission(id="id")
  /// </summary>
  public sealed partial class EventTrainMission : pb::IMessage<EventTrainMission>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTrainMission> _parser = new pb::MessageParser<EventTrainMission>(() => new EventTrainMission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTrainMission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventTrainMissionConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTrainMission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTrainMission(EventTrainMission other) : this() {
      id_ = other.id_;
      board_ = other.board_;
      boardId_ = other.boardId_;
      chooseTheme_ = other.chooseTheme_;
      endRecycle_ = other.endRecycle_.Clone();
      endTheme_ = other.endTheme_;
      gradeId_ = other.gradeId_;
      helpTheme_ = other.helpTheme_;
      isOnBonus_ = other.isOnBonus_;
      isOnBubble_ = other.isOnBubble_;
      itemTheme_ = other.itemTheme_;
      loadingTheme_ = other.loadingTheme_;
      mainTheme_ = other.mainTheme_;
      name_ = other.name_;
      newRoundTheme_ = other.newRoundTheme_;
      previewTheme_ = other.previewTheme_;
      startTheme_ = other.startTheme_;
      storage_ = other.storage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTrainMission Clone() {
      return new EventTrainMission(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "board" field.</summary>
    public const int BoardFieldNumber = 19;
    private int board_;
    /// <summary>
    /// 棋盘id
    /// MergeBoard.id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Board {
      get { return board_; }
      set {
        board_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 3;
    private int boardId_;
    /// <summary>
    /// 适用棋盘
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "chooseTheme" field.</summary>
    public const int ChooseThemeFieldNumber = 5;
    private int chooseTheme_;
    /// <summary>
    /// 选组界面
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChooseTheme {
      get { return chooseTheme_; }
      set {
        chooseTheme_ = value;
      }
    }

    /// <summary>Field number for the "endRecycle" field.</summary>
    public const int EndRecycleFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_endRecycle_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> endRecycle_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 活动结束回收棋子
    /// (≤难度值:奖励id:奖励数量,）
    /// 难度区间闭口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> EndRecycle {
      get { return endRecycle_; }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 7;
    private int endTheme_;
    /// <summary>
    /// 活动结束
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "gradeId" field.</summary>
    public const int GradeIdFieldNumber = 8;
    private int gradeId_;
    /// <summary>
    /// 关卡信息
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （EventTrainMissionDetail.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeId {
      get { return gradeId_; }
      set {
        gradeId_ = value;
      }
    }

    /// <summary>Field number for the "helpTheme" field.</summary>
    public const int HelpThemeFieldNumber = 9;
    private int helpTheme_;
    /// <summary>
    /// 玩法说明界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpTheme {
      get { return helpTheme_; }
      set {
        helpTheme_ = value;
      }
    }

    /// <summary>Field number for the "isOnBonus" field.</summary>
    public const int IsOnBonusFieldNumber = 10;
    private bool isOnBonus_;
    /// <summary>
    /// 开启mergeBonus
    /// (空=FALSE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnBonus {
      get { return isOnBonus_; }
      set {
        isOnBonus_ = value;
      }
    }

    /// <summary>Field number for the "isOnBubble" field.</summary>
    public const int IsOnBubbleFieldNumber = 11;
    private bool isOnBubble_;
    /// <summary>
    /// 开启合成气泡
    /// (空=FALSE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnBubble {
      get { return isOnBubble_; }
      set {
        isOnBubble_ = value;
      }
    }

    /// <summary>Field number for the "itemTheme" field.</summary>
    public const int ItemThemeFieldNumber = 12;
    private int itemTheme_;
    /// <summary>
    /// 提交棋子界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemTheme {
      get { return itemTheme_; }
      set {
        itemTheme_ = value;
      }
    }

    /// <summary>Field number for the "loadingTheme" field.</summary>
    public const int LoadingThemeFieldNumber = 20;
    private int loadingTheme_;
    /// <summary>
    /// loading
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoadingTheme {
      get { return loadingTheme_; }
      set {
        loadingTheme_ = value;
      }
    }

    /// <summary>Field number for the "mainTheme" field.</summary>
    public const int MainThemeFieldNumber = 13;
    private int mainTheme_;
    /// <summary>
    /// 玩法弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainTheme {
      get { return mainTheme_; }
      set {
        mainTheme_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 14;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "newRoundTheme" field.</summary>
    public const int NewRoundThemeFieldNumber = 15;
    private int newRoundTheme_;
    /// <summary>
    /// 新一轮弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewRoundTheme {
      get { return newRoundTheme_; }
      set {
        newRoundTheme_ = value;
      }
    }

    /// <summary>Field number for the "previewTheme" field.</summary>
    public const int PreviewThemeFieldNumber = 16;
    private int previewTheme_;
    /// <summary>
    /// 关卡预览界面
    /// 详情弹板
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PreviewTheme {
      get { return previewTheme_; }
      set {
        previewTheme_ = value;
      }
    }

    /// <summary>Field number for the "startTheme" field.</summary>
    public const int StartThemeFieldNumber = 17;
    private int startTheme_;
    /// <summary>
    /// 开启弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTheme {
      get { return startTheme_; }
      set {
        startTheme_ = value;
      }
    }

    /// <summary>Field number for the "storage" field.</summary>
    public const int StorageFieldNumber = 18;
    private int storage_;
    /// <summary>
    /// 仓库格子数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Storage {
      get { return storage_; }
      set {
        storage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTrainMission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTrainMission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Board != other.Board) return false;
      if (BoardId != other.BoardId) return false;
      if (ChooseTheme != other.ChooseTheme) return false;
      if(!endRecycle_.Equals(other.endRecycle_)) return false;
      if (EndTheme != other.EndTheme) return false;
      if (GradeId != other.GradeId) return false;
      if (HelpTheme != other.HelpTheme) return false;
      if (IsOnBonus != other.IsOnBonus) return false;
      if (IsOnBubble != other.IsOnBubble) return false;
      if (ItemTheme != other.ItemTheme) return false;
      if (LoadingTheme != other.LoadingTheme) return false;
      if (MainTheme != other.MainTheme) return false;
      if (Name != other.Name) return false;
      if (NewRoundTheme != other.NewRoundTheme) return false;
      if (PreviewTheme != other.PreviewTheme) return false;
      if (StartTheme != other.StartTheme) return false;
      if (Storage != other.Storage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Board != 0) hash ^= Board.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (ChooseTheme != 0) hash ^= ChooseTheme.GetHashCode();
      hash ^= endRecycle_.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      if (GradeId != 0) hash ^= GradeId.GetHashCode();
      if (HelpTheme != 0) hash ^= HelpTheme.GetHashCode();
      if (IsOnBonus != false) hash ^= IsOnBonus.GetHashCode();
      if (IsOnBubble != false) hash ^= IsOnBubble.GetHashCode();
      if (ItemTheme != 0) hash ^= ItemTheme.GetHashCode();
      if (LoadingTheme != 0) hash ^= LoadingTheme.GetHashCode();
      if (MainTheme != 0) hash ^= MainTheme.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NewRoundTheme != 0) hash ^= NewRoundTheme.GetHashCode();
      if (PreviewTheme != 0) hash ^= PreviewTheme.GetHashCode();
      if (StartTheme != 0) hash ^= StartTheme.GetHashCode();
      if (Storage != 0) hash ^= Storage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BoardId);
      }
      if (ChooseTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ChooseTheme);
      }
      endRecycle_.WriteTo(output, _repeated_endRecycle_codec);
      if (EndTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EndTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GradeId);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HelpTheme);
      }
      if (IsOnBonus != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsOnBonus);
      }
      if (IsOnBubble != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsOnBubble);
      }
      if (ItemTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ItemTheme);
      }
      if (MainTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MainTheme);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Name);
      }
      if (NewRoundTheme != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(NewRoundTheme);
      }
      if (PreviewTheme != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(PreviewTheme);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(StartTheme);
      }
      if (Storage != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Storage);
      }
      if (Board != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Board);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(LoadingTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BoardId);
      }
      if (ChooseTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ChooseTheme);
      }
      endRecycle_.WriteTo(ref output, _repeated_endRecycle_codec);
      if (EndTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EndTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GradeId);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HelpTheme);
      }
      if (IsOnBonus != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsOnBonus);
      }
      if (IsOnBubble != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsOnBubble);
      }
      if (ItemTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ItemTheme);
      }
      if (MainTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MainTheme);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Name);
      }
      if (NewRoundTheme != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(NewRoundTheme);
      }
      if (PreviewTheme != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(PreviewTheme);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(StartTheme);
      }
      if (Storage != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Storage);
      }
      if (Board != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Board);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(LoadingTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Board != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Board);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (ChooseTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChooseTheme);
      }
      size += endRecycle_.CalculateSize(_repeated_endRecycle_codec);
      if (EndTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      if (GradeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeId);
      }
      if (HelpTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HelpTheme);
      }
      if (IsOnBonus != false) {
        size += 1 + 1;
      }
      if (IsOnBubble != false) {
        size += 1 + 1;
      }
      if (ItemTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemTheme);
      }
      if (LoadingTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LoadingTheme);
      }
      if (MainTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainTheme);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NewRoundTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewRoundTheme);
      }
      if (PreviewTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PreviewTheme);
      }
      if (StartTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartTheme);
      }
      if (Storage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Storage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTrainMission other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Board != 0) {
        Board = other.Board;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.ChooseTheme != 0) {
        ChooseTheme = other.ChooseTheme;
      }
      endRecycle_.Add(other.endRecycle_);
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      if (other.GradeId != 0) {
        GradeId = other.GradeId;
      }
      if (other.HelpTheme != 0) {
        HelpTheme = other.HelpTheme;
      }
      if (other.IsOnBonus != false) {
        IsOnBonus = other.IsOnBonus;
      }
      if (other.IsOnBubble != false) {
        IsOnBubble = other.IsOnBubble;
      }
      if (other.ItemTheme != 0) {
        ItemTheme = other.ItemTheme;
      }
      if (other.LoadingTheme != 0) {
        LoadingTheme = other.LoadingTheme;
      }
      if (other.MainTheme != 0) {
        MainTheme = other.MainTheme;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NewRoundTheme != 0) {
        NewRoundTheme = other.NewRoundTheme;
      }
      if (other.PreviewTheme != 0) {
        PreviewTheme = other.PreviewTheme;
      }
      if (other.StartTheme != 0) {
        StartTheme = other.StartTheme;
      }
      if (other.Storage != 0) {
        Storage = other.Storage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            BoardId = input.ReadInt32();
            break;
          }
          case 40: {
            ChooseTheme = input.ReadInt32();
            break;
          }
          case 50: {
            endRecycle_.AddEntriesFrom(input, _repeated_endRecycle_codec);
            break;
          }
          case 56: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 64: {
            GradeId = input.ReadInt32();
            break;
          }
          case 72: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 80: {
            IsOnBonus = input.ReadBool();
            break;
          }
          case 88: {
            IsOnBubble = input.ReadBool();
            break;
          }
          case 96: {
            ItemTheme = input.ReadInt32();
            break;
          }
          case 104: {
            MainTheme = input.ReadInt32();
            break;
          }
          case 114: {
            Name = input.ReadString();
            break;
          }
          case 120: {
            NewRoundTheme = input.ReadInt32();
            break;
          }
          case 128: {
            PreviewTheme = input.ReadInt32();
            break;
          }
          case 136: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 144: {
            Storage = input.ReadInt32();
            break;
          }
          case 152: {
            Board = input.ReadInt32();
            break;
          }
          case 160: {
            LoadingTheme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            BoardId = input.ReadInt32();
            break;
          }
          case 40: {
            ChooseTheme = input.ReadInt32();
            break;
          }
          case 50: {
            endRecycle_.AddEntriesFrom(ref input, _repeated_endRecycle_codec);
            break;
          }
          case 56: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 64: {
            GradeId = input.ReadInt32();
            break;
          }
          case 72: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 80: {
            IsOnBonus = input.ReadBool();
            break;
          }
          case 88: {
            IsOnBubble = input.ReadBool();
            break;
          }
          case 96: {
            ItemTheme = input.ReadInt32();
            break;
          }
          case 104: {
            MainTheme = input.ReadInt32();
            break;
          }
          case 114: {
            Name = input.ReadString();
            break;
          }
          case 120: {
            NewRoundTheme = input.ReadInt32();
            break;
          }
          case 128: {
            PreviewTheme = input.ReadInt32();
            break;
          }
          case 136: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 144: {
            Storage = input.ReadInt32();
            break;
          }
          case 152: {
            Board = input.ReadInt32();
            break;
          }
          case 160: {
            LoadingTheme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventTrainMissionMapABValue : pb::IMessage<EventTrainMissionMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTrainMissionMapABValue> _parser = new pb::MessageParser<EventTrainMissionMapABValue>(() => new EventTrainMissionMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTrainMissionMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventTrainMissionConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTrainMissionMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTrainMissionMapABValue(EventTrainMissionMapABValue other) : this() {
      eventTrainMissionMap_ = other.eventTrainMissionMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTrainMissionMapABValue Clone() {
      return new EventTrainMissionMapABValue(this);
    }

    /// <summary>Field number for the "EventTrainMissionMap" field.</summary>
    public const int EventTrainMissionMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventTrainMission>.Codec _map_eventTrainMissionMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventTrainMission>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTrainMission.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventTrainMission> eventTrainMissionMap_ = new pbc::MapField<int, global::fat.rawdata.EventTrainMission>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventTrainMission> EventTrainMissionMap {
      get { return eventTrainMissionMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTrainMissionMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTrainMissionMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventTrainMissionMap.Equals(other.EventTrainMissionMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventTrainMissionMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventTrainMissionMap_.WriteTo(output, _map_eventTrainMissionMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventTrainMissionMap_.WriteTo(ref output, _map_eventTrainMissionMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventTrainMissionMap_.CalculateSize(_map_eventTrainMissionMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTrainMissionMapABValue other) {
      if (other == null) {
        return;
      }
      eventTrainMissionMap_.Add(other.eventTrainMissionMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventTrainMissionMap_.AddEntriesFrom(input, _map_eventTrainMissionMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventTrainMissionMap_.AddEntriesFrom(ref input, _map_eventTrainMissionMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventTrainMissionConf : pb::IMessage<EventTrainMissionConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTrainMissionConf> _parser = new pb::MessageParser<EventTrainMissionConf>(() => new EventTrainMissionConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTrainMissionConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventTrainMissionConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTrainMissionConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTrainMissionConf(EventTrainMissionConf other) : this() {
      eventTrainMissionMap_ = other.eventTrainMissionMap_.Clone();
      eventTrainMissionMapAB_ = other.eventTrainMissionMapAB_.Clone();
      eventTrainMissionMapABPatch_ = other.eventTrainMissionMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTrainMissionConf Clone() {
      return new EventTrainMissionConf(this);
    }

    /// <summary>Field number for the "EventTrainMissionMap" field.</summary>
    public const int EventTrainMissionMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventTrainMission>.Codec _map_eventTrainMissionMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventTrainMission>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTrainMission.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventTrainMission> eventTrainMissionMap_ = new pbc::MapField<int, global::fat.rawdata.EventTrainMission>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventTrainMission> EventTrainMissionMap {
      get { return eventTrainMissionMap_; }
    }

    /// <summary>Field number for the "EventTrainMissionMapAB" field.</summary>
    public const int EventTrainMissionMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventTrainMissionMapABValue>.Codec _map_eventTrainMissionMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventTrainMissionMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTrainMissionMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventTrainMissionMapABValue> eventTrainMissionMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventTrainMissionMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventTrainMissionMapABValue> EventTrainMissionMapAB {
      get { return eventTrainMissionMapAB_; }
    }

    /// <summary>Field number for the "EventTrainMissionMapABPatch" field.</summary>
    public const int EventTrainMissionMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventTrainMissionMapABValue>.Codec _map_eventTrainMissionMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventTrainMissionMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTrainMissionMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventTrainMissionMapABValue> eventTrainMissionMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventTrainMissionMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventTrainMissionMapABValue> EventTrainMissionMapABPatch {
      get { return eventTrainMissionMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTrainMissionConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTrainMissionConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventTrainMissionMap.Equals(other.EventTrainMissionMap)) return false;
      if (!EventTrainMissionMapAB.Equals(other.EventTrainMissionMapAB)) return false;
      if (!EventTrainMissionMapABPatch.Equals(other.EventTrainMissionMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventTrainMissionMap.GetHashCode();
      hash ^= EventTrainMissionMapAB.GetHashCode();
      hash ^= EventTrainMissionMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventTrainMissionMap_.WriteTo(output, _map_eventTrainMissionMap_codec);
      eventTrainMissionMapAB_.WriteTo(output, _map_eventTrainMissionMapAB_codec);
      eventTrainMissionMapABPatch_.WriteTo(output, _map_eventTrainMissionMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventTrainMissionMap_.WriteTo(ref output, _map_eventTrainMissionMap_codec);
      eventTrainMissionMapAB_.WriteTo(ref output, _map_eventTrainMissionMapAB_codec);
      eventTrainMissionMapABPatch_.WriteTo(ref output, _map_eventTrainMissionMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventTrainMissionMap_.CalculateSize(_map_eventTrainMissionMap_codec);
      size += eventTrainMissionMapAB_.CalculateSize(_map_eventTrainMissionMapAB_codec);
      size += eventTrainMissionMapABPatch_.CalculateSize(_map_eventTrainMissionMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTrainMissionConf other) {
      if (other == null) {
        return;
      }
      eventTrainMissionMap_.Add(other.eventTrainMissionMap_);
      eventTrainMissionMapAB_.Add(other.eventTrainMissionMapAB_);
      eventTrainMissionMapABPatch_.Add(other.eventTrainMissionMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventTrainMissionMap_.AddEntriesFrom(input, _map_eventTrainMissionMap_codec);
            break;
          }
          case 18: {
            eventTrainMissionMapAB_.AddEntriesFrom(input, _map_eventTrainMissionMapAB_codec);
            break;
          }
          case 26: {
            eventTrainMissionMapABPatch_.AddEntriesFrom(input, _map_eventTrainMissionMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventTrainMissionMap_.AddEntriesFrom(ref input, _map_eventTrainMissionMap_codec);
            break;
          }
          case 18: {
            eventTrainMissionMapAB_.AddEntriesFrom(ref input, _map_eventTrainMissionMapAB_codec);
            break;
          }
          case 26: {
            eventTrainMissionMapABPatch_.AddEntriesFrom(ref input, _map_eventTrainMissionMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
