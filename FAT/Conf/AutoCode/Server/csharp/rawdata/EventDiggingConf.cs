// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventDiggingConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventDiggingConf.proto</summary>
  public static partial class EventDiggingConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventDiggingConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventDiggingConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5yYXdkYXRhL0V2ZW50RGlnZ2luZ0NvbmYucHJvdG8SB3Jhd2RhdGEixgMK",
            "DEV2ZW50RGlnZ2luZxIKCgJpZBgBIAEoBRIPCgdib2FyZElkGAIgASgFEhAK",
            "CGJ1eVRoZW1lGAMgASgFEgwKBGNvc3QYBCABKAUSFAoMZGlnZ2luZ1RoZW1l",
            "GBEgASgFEjsKC2V4cGlyZVBvcHVwGAUgAygLMiYucmF3ZGF0YS5FdmVudERp",
            "Z2dpbmcuRXhwaXJlUG9wdXBFbnRyeRIUCgxmcmVlVG9rZW5OdW0YBiABKAUS",
            "DwoHZ3JhZGVJZBgHIAEoBRIVCg1oZWxwUGxheVRoZW1lGAggASgFEhQKDGxv",
            "YWRpbmdUaGVtZRgSIAEoBRIMCgRuYW1lGAkgASgJEhEKCXBhY2tHcnBJZBgK",
            "IAEoBRIRCglwYWNrVGltZXMYCyABKAUSFwoPcmVjb250aW51ZVRoZW1lGAwg",
            "ASgFEhYKDnJlcXVpcmVTY29yZUlkGA0gASgFEhQKDHJlc3RhcnRUaGVtZRgO",
            "IAEoBRISCgpzdGFydFRoZW1lGA8gASgFEg8KB3Rva2VuSWQYECABKAUaMgoQ",
            "RXhwaXJlUG9wdXBFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAk6",
            "AjgBIrYBChZFdmVudERpZ2dpbmdNYXBBQlZhbHVlEk0KD0V2ZW50RGlnZ2lu",
            "Z01hcBgBIAMoCzI0LnJhd2RhdGEuRXZlbnREaWdnaW5nTWFwQUJWYWx1ZS5F",
            "dmVudERpZ2dpbmdNYXBFbnRyeRpNChRFdmVudERpZ2dpbmdNYXBFbnRyeRIL",
            "CgNrZXkYASABKAUSJAoFdmFsdWUYAiABKAsyFS5yYXdkYXRhLkV2ZW50RGln",
            "Z2luZzoCOAEiiQQKEEV2ZW50RGlnZ2luZ0NvbmYSRwoPRXZlbnREaWdnaW5n",
            "TWFwGAEgAygLMi4ucmF3ZGF0YS5FdmVudERpZ2dpbmdDb25mLkV2ZW50RGln",
            "Z2luZ01hcEVudHJ5EksKEUV2ZW50RGlnZ2luZ01hcEFCGAIgAygLMjAucmF3",
            "ZGF0YS5FdmVudERpZ2dpbmdDb25mLkV2ZW50RGlnZ2luZ01hcEFCRW50cnkS",
            "VQoWRXZlbnREaWdnaW5nTWFwQUJQYXRjaBgDIAMoCzI1LnJhd2RhdGEuRXZl",
            "bnREaWdnaW5nQ29uZi5FdmVudERpZ2dpbmdNYXBBQlBhdGNoRW50cnkaTQoU",
            "RXZlbnREaWdnaW5nTWFwRW50cnkSCwoDa2V5GAEgASgFEiQKBXZhbHVlGAIg",
            "ASgLMhUucmF3ZGF0YS5FdmVudERpZ2dpbmc6AjgBGlkKFkV2ZW50RGlnZ2lu",
            "Z01hcEFCRW50cnkSCwoDa2V5GAEgASgJEi4KBXZhbHVlGAIgASgLMh8ucmF3",
            "ZGF0YS5FdmVudERpZ2dpbmdNYXBBQlZhbHVlOgI4ARpeChtFdmVudERpZ2dp",
            "bmdNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEi4KBXZhbHVlGAIgASgL",
            "Mh8ucmF3ZGF0YS5FdmVudERpZ2dpbmdNYXBBQlZhbHVlOgI4AUI9Wi1naXRs",
            "YWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtm",
            "YXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventDigging), global::fat.rawdata.EventDigging.Parser, new[]{ "Id", "BoardId", "BuyTheme", "Cost", "DiggingTheme", "ExpirePopup", "FreeTokenNum", "GradeId", "HelpPlayTheme", "LoadingTheme", "Name", "PackGrpId", "PackTimes", "RecontinueTheme", "RequireScoreId", "RestartTheme", "StartTheme", "TokenId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventDiggingMapABValue), global::fat.rawdata.EventDiggingMapABValue.Parser, new[]{ "EventDiggingMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventDiggingConf), global::fat.rawdata.EventDiggingConf.Parser, new[]{ "EventDiggingMap", "EventDiggingMapAB", "EventDiggingMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventDigging",table="EventDiggingMap",table_wrapper="EventDiggingConf",map="true",map_key_type="int32",data="EventDiggingConf")
  /// annotation@ab(table_ab="EventDiggingMapAB",table_ab_patch="EventDiggingMapABPatch",table_ab_value="EventDiggingMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventDigging(id="id")
  /// </summary>
  public sealed partial class EventDigging : pb::IMessage<EventDigging>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventDigging> _parser = new pb::MessageParser<EventDigging>(() => new EventDigging());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventDigging> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventDiggingConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDigging() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDigging(EventDigging other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      buyTheme_ = other.buyTheme_;
      cost_ = other.cost_;
      diggingTheme_ = other.diggingTheme_;
      expirePopup_ = other.expirePopup_.Clone();
      freeTokenNum_ = other.freeTokenNum_;
      gradeId_ = other.gradeId_;
      helpPlayTheme_ = other.helpPlayTheme_;
      loadingTheme_ = other.loadingTheme_;
      name_ = other.name_;
      packGrpId_ = other.packGrpId_;
      packTimes_ = other.packTimes_;
      recontinueTheme_ = other.recontinueTheme_;
      requireScoreId_ = other.requireScoreId_;
      restartTheme_ = other.restartTheme_;
      startTheme_ = other.startTheme_;
      tokenId_ = other.tokenId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDigging Clone() {
      return new EventDigging(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 适用棋盘
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "buyTheme" field.</summary>
    public const int BuyThemeFieldNumber = 3;
    private int buyTheme_;
    /// <summary>
    /// 购买铲子
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyTheme {
      get { return buyTheme_; }
      set {
        buyTheme_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 4;
    private int cost_;
    /// <summary>
    /// 消耗内容
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "diggingTheme" field.</summary>
    public const int DiggingThemeFieldNumber = 17;
    private int diggingTheme_;
    /// <summary>
    /// 活动主界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DiggingTheme {
      get { return diggingTheme_; }
      set {
        diggingTheme_ = value;
      }
    }

    /// <summary>Field number for the "expirePopup" field.</summary>
    public const int ExpirePopupFieldNumber = 5;
    private static readonly pbc::MapField<int, string>.Codec _map_expirePopup_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 42);
    private readonly pbc::MapField<int, string> expirePopup_ = new pbc::MapField<int, string>();
    /// <summary>
    /// 活动结束时
    /// 通过弹板的方式一次性删除棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> ExpirePopup {
      get { return expirePopup_; }
    }

    /// <summary>Field number for the "freeTokenNum" field.</summary>
    public const int FreeTokenNumFieldNumber = 6;
    private int freeTokenNum_;
    /// <summary>
    /// 初始铲子数量
    /// （为空=0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTokenNum {
      get { return freeTokenNum_; }
      set {
        freeTokenNum_ = value;
      }
    }

    /// <summary>Field number for the "gradeId" field.</summary>
    public const int GradeIdFieldNumber = 7;
    private int gradeId_;
    /// <summary>
    /// 关卡信息
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （EventDiggingDetail.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeId {
      get { return gradeId_; }
      set {
        gradeId_ = value;
      }
    }

    /// <summary>Field number for the "helpPlayTheme" field.</summary>
    public const int HelpPlayThemeFieldNumber = 8;
    private int helpPlayTheme_;
    /// <summary>
    /// 玩法弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpPlayTheme {
      get { return helpPlayTheme_; }
      set {
        helpPlayTheme_ = value;
      }
    }

    /// <summary>Field number for the "loadingTheme" field.</summary>
    public const int LoadingThemeFieldNumber = 18;
    private int loadingTheme_;
    /// <summary>
    /// loading界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoadingTheme {
      get { return loadingTheme_; }
      set {
        loadingTheme_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 9;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "packGrpId" field.</summary>
    public const int PackGrpIdFieldNumber = 10;
    private int packGrpId_;
    /// <summary>
    /// 内购商品ID
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （IAPPack.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackGrpId {
      get { return packGrpId_; }
      set {
        packGrpId_ = value;
      }
    }

    /// <summary>Field number for the "packTimes" field.</summary>
    public const int PackTimesFieldNumber = 11;
    private int packTimes_;
    /// <summary>
    /// 购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackTimes {
      get { return packTimes_; }
      set {
        packTimes_ = value;
      }
    }

    /// <summary>Field number for the "recontinueTheme" field.</summary>
    public const int RecontinueThemeFieldNumber = 12;
    private int recontinueTheme_;
    /// <summary>
    /// 回收清算
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecontinueTheme {
      get { return recontinueTheme_; }
      set {
        recontinueTheme_ = value;
      }
    }

    /// <summary>Field number for the "requireScoreId" field.</summary>
    public const int RequireScoreIdFieldNumber = 13;
    private int requireScoreId_;
    /// <summary>
    /// 积分ID
    /// （ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireScoreId {
      get { return requireScoreId_; }
      set {
        requireScoreId_ = value;
      }
    }

    /// <summary>Field number for the "restartTheme" field.</summary>
    public const int RestartThemeFieldNumber = 14;
    private int restartTheme_;
    /// <summary>
    /// 新一轮弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RestartTheme {
      get { return restartTheme_; }
      set {
        restartTheme_ = value;
      }
    }

    /// <summary>Field number for the "startTheme" field.</summary>
    public const int StartThemeFieldNumber = 15;
    private int startTheme_;
    /// <summary>
    /// 开启弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTheme {
      get { return startTheme_; }
      set {
        startTheme_ = value;
      }
    }

    /// <summary>Field number for the "tokenId" field.</summary>
    public const int TokenIdFieldNumber = 16;
    private int tokenId_;
    /// <summary>
    /// 挖掘道具ID
    /// （ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TokenId {
      get { return tokenId_; }
      set {
        tokenId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventDigging);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventDigging other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (BuyTheme != other.BuyTheme) return false;
      if (Cost != other.Cost) return false;
      if (DiggingTheme != other.DiggingTheme) return false;
      if (!ExpirePopup.Equals(other.ExpirePopup)) return false;
      if (FreeTokenNum != other.FreeTokenNum) return false;
      if (GradeId != other.GradeId) return false;
      if (HelpPlayTheme != other.HelpPlayTheme) return false;
      if (LoadingTheme != other.LoadingTheme) return false;
      if (Name != other.Name) return false;
      if (PackGrpId != other.PackGrpId) return false;
      if (PackTimes != other.PackTimes) return false;
      if (RecontinueTheme != other.RecontinueTheme) return false;
      if (RequireScoreId != other.RequireScoreId) return false;
      if (RestartTheme != other.RestartTheme) return false;
      if (StartTheme != other.StartTheme) return false;
      if (TokenId != other.TokenId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (BuyTheme != 0) hash ^= BuyTheme.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (DiggingTheme != 0) hash ^= DiggingTheme.GetHashCode();
      hash ^= ExpirePopup.GetHashCode();
      if (FreeTokenNum != 0) hash ^= FreeTokenNum.GetHashCode();
      if (GradeId != 0) hash ^= GradeId.GetHashCode();
      if (HelpPlayTheme != 0) hash ^= HelpPlayTheme.GetHashCode();
      if (LoadingTheme != 0) hash ^= LoadingTheme.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PackGrpId != 0) hash ^= PackGrpId.GetHashCode();
      if (PackTimes != 0) hash ^= PackTimes.GetHashCode();
      if (RecontinueTheme != 0) hash ^= RecontinueTheme.GetHashCode();
      if (RequireScoreId != 0) hash ^= RequireScoreId.GetHashCode();
      if (RestartTheme != 0) hash ^= RestartTheme.GetHashCode();
      if (StartTheme != 0) hash ^= StartTheme.GetHashCode();
      if (TokenId != 0) hash ^= TokenId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (BuyTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuyTheme);
      }
      if (Cost != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Cost);
      }
      expirePopup_.WriteTo(output, _map_expirePopup_codec);
      if (FreeTokenNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FreeTokenNum);
      }
      if (GradeId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GradeId);
      }
      if (HelpPlayTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HelpPlayTheme);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Name);
      }
      if (PackGrpId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PackGrpId);
      }
      if (PackTimes != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PackTimes);
      }
      if (RecontinueTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RecontinueTheme);
      }
      if (RequireScoreId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(RequireScoreId);
      }
      if (RestartTheme != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RestartTheme);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(StartTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(TokenId);
      }
      if (DiggingTheme != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(DiggingTheme);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(LoadingTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (BuyTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuyTheme);
      }
      if (Cost != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Cost);
      }
      expirePopup_.WriteTo(ref output, _map_expirePopup_codec);
      if (FreeTokenNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FreeTokenNum);
      }
      if (GradeId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GradeId);
      }
      if (HelpPlayTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HelpPlayTheme);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Name);
      }
      if (PackGrpId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PackGrpId);
      }
      if (PackTimes != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PackTimes);
      }
      if (RecontinueTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RecontinueTheme);
      }
      if (RequireScoreId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(RequireScoreId);
      }
      if (RestartTheme != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RestartTheme);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(StartTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(TokenId);
      }
      if (DiggingTheme != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(DiggingTheme);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(LoadingTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (BuyTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyTheme);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (DiggingTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DiggingTheme);
      }
      size += expirePopup_.CalculateSize(_map_expirePopup_codec);
      if (FreeTokenNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTokenNum);
      }
      if (GradeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeId);
      }
      if (HelpPlayTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HelpPlayTheme);
      }
      if (LoadingTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LoadingTheme);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PackGrpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackGrpId);
      }
      if (PackTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackTimes);
      }
      if (RecontinueTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecontinueTheme);
      }
      if (RequireScoreId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequireScoreId);
      }
      if (RestartTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RestartTheme);
      }
      if (StartTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTheme);
      }
      if (TokenId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TokenId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventDigging other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.BuyTheme != 0) {
        BuyTheme = other.BuyTheme;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.DiggingTheme != 0) {
        DiggingTheme = other.DiggingTheme;
      }
      expirePopup_.Add(other.expirePopup_);
      if (other.FreeTokenNum != 0) {
        FreeTokenNum = other.FreeTokenNum;
      }
      if (other.GradeId != 0) {
        GradeId = other.GradeId;
      }
      if (other.HelpPlayTheme != 0) {
        HelpPlayTheme = other.HelpPlayTheme;
      }
      if (other.LoadingTheme != 0) {
        LoadingTheme = other.LoadingTheme;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PackGrpId != 0) {
        PackGrpId = other.PackGrpId;
      }
      if (other.PackTimes != 0) {
        PackTimes = other.PackTimes;
      }
      if (other.RecontinueTheme != 0) {
        RecontinueTheme = other.RecontinueTheme;
      }
      if (other.RequireScoreId != 0) {
        RequireScoreId = other.RequireScoreId;
      }
      if (other.RestartTheme != 0) {
        RestartTheme = other.RestartTheme;
      }
      if (other.StartTheme != 0) {
        StartTheme = other.StartTheme;
      }
      if (other.TokenId != 0) {
        TokenId = other.TokenId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            BuyTheme = input.ReadInt32();
            break;
          }
          case 32: {
            Cost = input.ReadInt32();
            break;
          }
          case 42: {
            expirePopup_.AddEntriesFrom(input, _map_expirePopup_codec);
            break;
          }
          case 48: {
            FreeTokenNum = input.ReadInt32();
            break;
          }
          case 56: {
            GradeId = input.ReadInt32();
            break;
          }
          case 64: {
            HelpPlayTheme = input.ReadInt32();
            break;
          }
          case 74: {
            Name = input.ReadString();
            break;
          }
          case 80: {
            PackGrpId = input.ReadInt32();
            break;
          }
          case 88: {
            PackTimes = input.ReadInt32();
            break;
          }
          case 96: {
            RecontinueTheme = input.ReadInt32();
            break;
          }
          case 104: {
            RequireScoreId = input.ReadInt32();
            break;
          }
          case 112: {
            RestartTheme = input.ReadInt32();
            break;
          }
          case 120: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 128: {
            TokenId = input.ReadInt32();
            break;
          }
          case 136: {
            DiggingTheme = input.ReadInt32();
            break;
          }
          case 144: {
            LoadingTheme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            BuyTheme = input.ReadInt32();
            break;
          }
          case 32: {
            Cost = input.ReadInt32();
            break;
          }
          case 42: {
            expirePopup_.AddEntriesFrom(ref input, _map_expirePopup_codec);
            break;
          }
          case 48: {
            FreeTokenNum = input.ReadInt32();
            break;
          }
          case 56: {
            GradeId = input.ReadInt32();
            break;
          }
          case 64: {
            HelpPlayTheme = input.ReadInt32();
            break;
          }
          case 74: {
            Name = input.ReadString();
            break;
          }
          case 80: {
            PackGrpId = input.ReadInt32();
            break;
          }
          case 88: {
            PackTimes = input.ReadInt32();
            break;
          }
          case 96: {
            RecontinueTheme = input.ReadInt32();
            break;
          }
          case 104: {
            RequireScoreId = input.ReadInt32();
            break;
          }
          case 112: {
            RestartTheme = input.ReadInt32();
            break;
          }
          case 120: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 128: {
            TokenId = input.ReadInt32();
            break;
          }
          case 136: {
            DiggingTheme = input.ReadInt32();
            break;
          }
          case 144: {
            LoadingTheme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventDiggingMapABValue : pb::IMessage<EventDiggingMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventDiggingMapABValue> _parser = new pb::MessageParser<EventDiggingMapABValue>(() => new EventDiggingMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventDiggingMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventDiggingConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDiggingMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDiggingMapABValue(EventDiggingMapABValue other) : this() {
      eventDiggingMap_ = other.eventDiggingMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDiggingMapABValue Clone() {
      return new EventDiggingMapABValue(this);
    }

    /// <summary>Field number for the "EventDiggingMap" field.</summary>
    public const int EventDiggingMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventDigging>.Codec _map_eventDiggingMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventDigging>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventDigging.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventDigging> eventDiggingMap_ = new pbc::MapField<int, global::fat.rawdata.EventDigging>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventDigging> EventDiggingMap {
      get { return eventDiggingMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventDiggingMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventDiggingMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventDiggingMap.Equals(other.EventDiggingMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventDiggingMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventDiggingMap_.WriteTo(output, _map_eventDiggingMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventDiggingMap_.WriteTo(ref output, _map_eventDiggingMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventDiggingMap_.CalculateSize(_map_eventDiggingMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventDiggingMapABValue other) {
      if (other == null) {
        return;
      }
      eventDiggingMap_.Add(other.eventDiggingMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventDiggingMap_.AddEntriesFrom(input, _map_eventDiggingMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventDiggingMap_.AddEntriesFrom(ref input, _map_eventDiggingMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventDiggingConf : pb::IMessage<EventDiggingConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventDiggingConf> _parser = new pb::MessageParser<EventDiggingConf>(() => new EventDiggingConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventDiggingConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventDiggingConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDiggingConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDiggingConf(EventDiggingConf other) : this() {
      eventDiggingMap_ = other.eventDiggingMap_.Clone();
      eventDiggingMapAB_ = other.eventDiggingMapAB_.Clone();
      eventDiggingMapABPatch_ = other.eventDiggingMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDiggingConf Clone() {
      return new EventDiggingConf(this);
    }

    /// <summary>Field number for the "EventDiggingMap" field.</summary>
    public const int EventDiggingMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventDigging>.Codec _map_eventDiggingMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventDigging>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventDigging.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventDigging> eventDiggingMap_ = new pbc::MapField<int, global::fat.rawdata.EventDigging>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventDigging> EventDiggingMap {
      get { return eventDiggingMap_; }
    }

    /// <summary>Field number for the "EventDiggingMapAB" field.</summary>
    public const int EventDiggingMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventDiggingMapABValue>.Codec _map_eventDiggingMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventDiggingMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventDiggingMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventDiggingMapABValue> eventDiggingMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventDiggingMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventDiggingMapABValue> EventDiggingMapAB {
      get { return eventDiggingMapAB_; }
    }

    /// <summary>Field number for the "EventDiggingMapABPatch" field.</summary>
    public const int EventDiggingMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventDiggingMapABValue>.Codec _map_eventDiggingMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventDiggingMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventDiggingMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventDiggingMapABValue> eventDiggingMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventDiggingMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventDiggingMapABValue> EventDiggingMapABPatch {
      get { return eventDiggingMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventDiggingConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventDiggingConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventDiggingMap.Equals(other.EventDiggingMap)) return false;
      if (!EventDiggingMapAB.Equals(other.EventDiggingMapAB)) return false;
      if (!EventDiggingMapABPatch.Equals(other.EventDiggingMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventDiggingMap.GetHashCode();
      hash ^= EventDiggingMapAB.GetHashCode();
      hash ^= EventDiggingMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventDiggingMap_.WriteTo(output, _map_eventDiggingMap_codec);
      eventDiggingMapAB_.WriteTo(output, _map_eventDiggingMapAB_codec);
      eventDiggingMapABPatch_.WriteTo(output, _map_eventDiggingMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventDiggingMap_.WriteTo(ref output, _map_eventDiggingMap_codec);
      eventDiggingMapAB_.WriteTo(ref output, _map_eventDiggingMapAB_codec);
      eventDiggingMapABPatch_.WriteTo(ref output, _map_eventDiggingMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventDiggingMap_.CalculateSize(_map_eventDiggingMap_codec);
      size += eventDiggingMapAB_.CalculateSize(_map_eventDiggingMapAB_codec);
      size += eventDiggingMapABPatch_.CalculateSize(_map_eventDiggingMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventDiggingConf other) {
      if (other == null) {
        return;
      }
      eventDiggingMap_.Add(other.eventDiggingMap_);
      eventDiggingMapAB_.Add(other.eventDiggingMapAB_);
      eventDiggingMapABPatch_.Add(other.eventDiggingMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventDiggingMap_.AddEntriesFrom(input, _map_eventDiggingMap_codec);
            break;
          }
          case 18: {
            eventDiggingMapAB_.AddEntriesFrom(input, _map_eventDiggingMapAB_codec);
            break;
          }
          case 26: {
            eventDiggingMapABPatch_.AddEntriesFrom(input, _map_eventDiggingMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventDiggingMap_.AddEntriesFrom(ref input, _map_eventDiggingMap_codec);
            break;
          }
          case 18: {
            eventDiggingMapAB_.AddEntriesFrom(ref input, _map_eventDiggingMapAB_codec);
            break;
          }
          case 26: {
            eventDiggingMapABPatch_.AddEntriesFrom(ref input, _map_eventDiggingMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
