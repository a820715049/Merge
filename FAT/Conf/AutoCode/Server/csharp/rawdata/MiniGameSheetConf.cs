// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/MiniGameSheetConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/MiniGameSheetConf.proto</summary>
  public static partial class MiniGameSheetConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/MiniGameSheetConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MiniGameSheetConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9yYXdkYXRhL01pbmlHYW1lU2hlZXRDb25mLnByb3RvEgdyYXdkYXRhGhpy",
            "YXdkYXRhL01pbmlHYW1lVHlwZS5wcm90byKLAQoNTWluaUdhbWVTaGVldBIK",
            "CgJpZBgBIAEoBRIQCghpc0FjdGl2ZRgCIAEoCBIPCgdsZXZlbElkGAMgAygF",
            "EisKDG1pbmlHYW1lVHlwZRgEIAEoDjIVLnJhd2RhdGEuTWluaUdhbWVUeXBl",
            "EgwKBG5hbWUYBSABKAkSEAoIc2VxdWVuY2UYBiABKAUivAEKF01pbmlHYW1l",
            "U2hlZXRNYXBBQlZhbHVlElAKEE1pbmlHYW1lU2hlZXRNYXAYASADKAsyNi5y",
            "YXdkYXRhLk1pbmlHYW1lU2hlZXRNYXBBQlZhbHVlLk1pbmlHYW1lU2hlZXRN",
            "YXBFbnRyeRpPChVNaW5pR2FtZVNoZWV0TWFwRW50cnkSCwoDa2V5GAEgASgF",
            "EiUKBXZhbHVlGAIgASgLMhYucmF3ZGF0YS5NaW5pR2FtZVNoZWV0OgI4ASKZ",
            "BAoRTWluaUdhbWVTaGVldENvbmYSSgoQTWluaUdhbWVTaGVldE1hcBgBIAMo",
            "CzIwLnJhd2RhdGEuTWluaUdhbWVTaGVldENvbmYuTWluaUdhbWVTaGVldE1h",
            "cEVudHJ5Ek4KEk1pbmlHYW1lU2hlZXRNYXBBQhgCIAMoCzIyLnJhd2RhdGEu",
            "TWluaUdhbWVTaGVldENvbmYuTWluaUdhbWVTaGVldE1hcEFCRW50cnkSWAoX",
            "TWluaUdhbWVTaGVldE1hcEFCUGF0Y2gYAyADKAsyNy5yYXdkYXRhLk1pbmlH",
            "YW1lU2hlZXRDb25mLk1pbmlHYW1lU2hlZXRNYXBBQlBhdGNoRW50cnkaTwoV",
            "TWluaUdhbWVTaGVldE1hcEVudHJ5EgsKA2tleRgBIAEoBRIlCgV2YWx1ZRgC",
            "IAEoCzIWLnJhd2RhdGEuTWluaUdhbWVTaGVldDoCOAEaWwoXTWluaUdhbWVT",
            "aGVldE1hcEFCRW50cnkSCwoDa2V5GAEgASgJEi8KBXZhbHVlGAIgASgLMiAu",
            "cmF3ZGF0YS5NaW5pR2FtZVNoZWV0TWFwQUJWYWx1ZToCOAEaYAocTWluaUdh",
            "bWVTaGVldE1hcEFCUGF0Y2hFbnRyeRILCgNrZXkYASABKAkSLwoFdmFsdWUY",
            "AiABKAsyIC5yYXdkYXRhLk1pbmlHYW1lU2hlZXRNYXBBQlZhbHVlOgI4AUI9",
            "Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2Rh",
            "dGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.rawdata.MiniGameTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MiniGameSheet), global::fat.rawdata.MiniGameSheet.Parser, new[]{ "Id", "IsActive", "LevelId", "MiniGameType", "Name", "Sequence" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MiniGameSheetMapABValue), global::fat.rawdata.MiniGameSheetMapABValue.Parser, new[]{ "MiniGameSheetMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MiniGameSheetConf), global::fat.rawdata.MiniGameSheetConf.Parser, new[]{ "MiniGameSheetMap", "MiniGameSheetMapAB", "MiniGameSheetMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="MiniGameSheet",table="MiniGameSheetMap",table_wrapper="MiniGameSheetConf",map="true",map_key_type="int32",data="MiniGameSheetConf")
  /// annotation@ab(table_ab="MiniGameSheetMapAB",table_ab_patch="MiniGameSheetMapABPatch",table_ab_value="MiniGameSheetMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@MiniGameSheet(id="id")
  /// </summary>
  public sealed partial class MiniGameSheet : pb::IMessage<MiniGameSheet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameSheet> _parser = new pb::MessageParser<MiniGameSheet>(() => new MiniGameSheet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameSheet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MiniGameSheetConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSheet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSheet(MiniGameSheet other) : this() {
      id_ = other.id_;
      isActive_ = other.isActive_;
      levelId_ = other.levelId_.Clone();
      miniGameType_ = other.miniGameType_;
      name_ = other.name_;
      sequence_ = other.sequence_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSheet Clone() {
      return new MiniGameSheet(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 小游戏玩法ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "isActive" field.</summary>
    public const int IsActiveFieldNumber = 2;
    private bool isActive_;
    /// <summary>
    /// 是否可玩
    /// （显示小游戏关卡列表）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "levelId" field.</summary>
    public const int LevelIdFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_levelId_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> levelId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 关卡组
    /// 串珠子：MiniGameBeadsLevel.id
    /// 合成大西瓜：MiniGameSlideMergeLevel.id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LevelId {
      get { return levelId_; }
    }

    /// <summary>Field number for the "miniGameType" field.</summary>
    public const int MiniGameTypeFieldNumber = 4;
    private global::fat.rawdata.MiniGameType miniGameType_ = global::fat.rawdata.MiniGameType.Default;
    /// <summary>
    /// 小游戏类型
    /// (MiniGameType@enum.key)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.rawdata.MiniGameType MiniGameType {
      get { return miniGameType_; }
      set {
        miniGameType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    /// 小游戏名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 6;
    private int sequence_;
    /// <summary>
    /// 小游戏排序
    /// （越大越靠前）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameSheet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameSheet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IsActive != other.IsActive) return false;
      if(!levelId_.Equals(other.levelId_)) return false;
      if (MiniGameType != other.MiniGameType) return false;
      if (Name != other.Name) return false;
      if (Sequence != other.Sequence) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      hash ^= levelId_.GetHashCode();
      if (MiniGameType != global::fat.rawdata.MiniGameType.Default) hash ^= MiniGameType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (IsActive != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsActive);
      }
      levelId_.WriteTo(output, _repeated_levelId_codec);
      if (MiniGameType != global::fat.rawdata.MiniGameType.Default) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MiniGameType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Sequence != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sequence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (IsActive != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsActive);
      }
      levelId_.WriteTo(ref output, _repeated_levelId_codec);
      if (MiniGameType != global::fat.rawdata.MiniGameType.Default) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MiniGameType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Sequence != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sequence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (IsActive != false) {
        size += 1 + 1;
      }
      size += levelId_.CalculateSize(_repeated_levelId_codec);
      if (MiniGameType != global::fat.rawdata.MiniGameType.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MiniGameType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameSheet other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      levelId_.Add(other.levelId_);
      if (other.MiniGameType != global::fat.rawdata.MiniGameType.Default) {
        MiniGameType = other.MiniGameType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            IsActive = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            levelId_.AddEntriesFrom(input, _repeated_levelId_codec);
            break;
          }
          case 32: {
            MiniGameType = (global::fat.rawdata.MiniGameType) input.ReadEnum();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            Sequence = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            IsActive = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            levelId_.AddEntriesFrom(ref input, _repeated_levelId_codec);
            break;
          }
          case 32: {
            MiniGameType = (global::fat.rawdata.MiniGameType) input.ReadEnum();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            Sequence = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MiniGameSheetMapABValue : pb::IMessage<MiniGameSheetMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameSheetMapABValue> _parser = new pb::MessageParser<MiniGameSheetMapABValue>(() => new MiniGameSheetMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameSheetMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MiniGameSheetConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSheetMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSheetMapABValue(MiniGameSheetMapABValue other) : this() {
      miniGameSheetMap_ = other.miniGameSheetMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSheetMapABValue Clone() {
      return new MiniGameSheetMapABValue(this);
    }

    /// <summary>Field number for the "MiniGameSheetMap" field.</summary>
    public const int MiniGameSheetMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MiniGameSheet>.Codec _map_miniGameSheetMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MiniGameSheet>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSheet.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MiniGameSheet> miniGameSheetMap_ = new pbc::MapField<int, global::fat.rawdata.MiniGameSheet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MiniGameSheet> MiniGameSheetMap {
      get { return miniGameSheetMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameSheetMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameSheetMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MiniGameSheetMap.Equals(other.MiniGameSheetMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MiniGameSheetMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      miniGameSheetMap_.WriteTo(output, _map_miniGameSheetMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      miniGameSheetMap_.WriteTo(ref output, _map_miniGameSheetMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += miniGameSheetMap_.CalculateSize(_map_miniGameSheetMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameSheetMapABValue other) {
      if (other == null) {
        return;
      }
      miniGameSheetMap_.Add(other.miniGameSheetMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            miniGameSheetMap_.AddEntriesFrom(input, _map_miniGameSheetMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            miniGameSheetMap_.AddEntriesFrom(ref input, _map_miniGameSheetMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MiniGameSheetConf : pb::IMessage<MiniGameSheetConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameSheetConf> _parser = new pb::MessageParser<MiniGameSheetConf>(() => new MiniGameSheetConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameSheetConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MiniGameSheetConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSheetConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSheetConf(MiniGameSheetConf other) : this() {
      miniGameSheetMap_ = other.miniGameSheetMap_.Clone();
      miniGameSheetMapAB_ = other.miniGameSheetMapAB_.Clone();
      miniGameSheetMapABPatch_ = other.miniGameSheetMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSheetConf Clone() {
      return new MiniGameSheetConf(this);
    }

    /// <summary>Field number for the "MiniGameSheetMap" field.</summary>
    public const int MiniGameSheetMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MiniGameSheet>.Codec _map_miniGameSheetMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MiniGameSheet>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSheet.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MiniGameSheet> miniGameSheetMap_ = new pbc::MapField<int, global::fat.rawdata.MiniGameSheet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MiniGameSheet> MiniGameSheetMap {
      get { return miniGameSheetMap_; }
    }

    /// <summary>Field number for the "MiniGameSheetMapAB" field.</summary>
    public const int MiniGameSheetMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.MiniGameSheetMapABValue>.Codec _map_miniGameSheetMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.MiniGameSheetMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSheetMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.MiniGameSheetMapABValue> miniGameSheetMapAB_ = new pbc::MapField<string, global::fat.rawdata.MiniGameSheetMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MiniGameSheetMapABValue> MiniGameSheetMapAB {
      get { return miniGameSheetMapAB_; }
    }

    /// <summary>Field number for the "MiniGameSheetMapABPatch" field.</summary>
    public const int MiniGameSheetMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.MiniGameSheetMapABValue>.Codec _map_miniGameSheetMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.MiniGameSheetMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSheetMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.MiniGameSheetMapABValue> miniGameSheetMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.MiniGameSheetMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MiniGameSheetMapABValue> MiniGameSheetMapABPatch {
      get { return miniGameSheetMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameSheetConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameSheetConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MiniGameSheetMap.Equals(other.MiniGameSheetMap)) return false;
      if (!MiniGameSheetMapAB.Equals(other.MiniGameSheetMapAB)) return false;
      if (!MiniGameSheetMapABPatch.Equals(other.MiniGameSheetMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MiniGameSheetMap.GetHashCode();
      hash ^= MiniGameSheetMapAB.GetHashCode();
      hash ^= MiniGameSheetMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      miniGameSheetMap_.WriteTo(output, _map_miniGameSheetMap_codec);
      miniGameSheetMapAB_.WriteTo(output, _map_miniGameSheetMapAB_codec);
      miniGameSheetMapABPatch_.WriteTo(output, _map_miniGameSheetMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      miniGameSheetMap_.WriteTo(ref output, _map_miniGameSheetMap_codec);
      miniGameSheetMapAB_.WriteTo(ref output, _map_miniGameSheetMapAB_codec);
      miniGameSheetMapABPatch_.WriteTo(ref output, _map_miniGameSheetMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += miniGameSheetMap_.CalculateSize(_map_miniGameSheetMap_codec);
      size += miniGameSheetMapAB_.CalculateSize(_map_miniGameSheetMapAB_codec);
      size += miniGameSheetMapABPatch_.CalculateSize(_map_miniGameSheetMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameSheetConf other) {
      if (other == null) {
        return;
      }
      miniGameSheetMap_.Add(other.miniGameSheetMap_);
      miniGameSheetMapAB_.Add(other.miniGameSheetMapAB_);
      miniGameSheetMapABPatch_.Add(other.miniGameSheetMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            miniGameSheetMap_.AddEntriesFrom(input, _map_miniGameSheetMap_codec);
            break;
          }
          case 18: {
            miniGameSheetMapAB_.AddEntriesFrom(input, _map_miniGameSheetMapAB_codec);
            break;
          }
          case 26: {
            miniGameSheetMapABPatch_.AddEntriesFrom(input, _map_miniGameSheetMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            miniGameSheetMap_.AddEntriesFrom(ref input, _map_miniGameSheetMap_codec);
            break;
          }
          case 18: {
            miniGameSheetMapAB_.AddEntriesFrom(ref input, _map_miniGameSheetMapAB_codec);
            break;
          }
          case 26: {
            miniGameSheetMapABPatch_.AddEntriesFrom(ref input, _map_miniGameSheetMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
