// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/ObjMergeItemConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/ObjMergeItemConf.proto</summary>
  public static partial class ObjMergeItemConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/ObjMergeItemConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ObjMergeItemConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5yYXdkYXRhL09iak1lcmdlSXRlbUNvbmYucHJvdG8SB3Jhd2RhdGEijAUK",
            "DE9iak1lcmdlSXRlbRIVCg1jb25maWdWZXJzaW9uGAEgASgFEgoKAmlkGAIg",
            "ASgFEg4KBl90YWdzXxgDIAMoCRISCgpiaW5nb1ByaWNlGAQgASgFEg8KB2Jv",
            "YXJkSWQYBSABKAUSEAoIYnViYmxlQWQYGSABKAgSFgoOYnViYmxlRGlzY291",
            "bnQYBiABKAUSEwoLYnViYmxlUHJpY2UYByABKAUSEgoKYnViYmxlUHJvYhgI",
            "IAEoBRIYChBidWJibGVQcm9iQWRqdXN0GAkgASgCEgwKBGRlc2MYCiABKAkS",
            "EgoKZGlzcGxheVJlcxgLIAEoCRIUCgxpc0RlZ3JhZGFibGUYGyABKAgSEgoK",
            "aXNIaWRlUHJvZBgWIAEoCBITCgtpc0ltcG9ydGFudBgMIAEoCBITCgtpc0pv",
            "a2VyYWJsZRgaIAEoCBIRCglpc05vbmRyYWcYISABKAgSEQoJaXNQb3dlclVw",
            "GA0gASgIEhEKCWlzUmVjeWNsZRggIAEoCBIVCg1pc1NlbGxGb3JDb2luGB0g",
            "ASgIEg0KBWlzVG9wGA4gASgIEhMKC2lzVG9wRWZmZWN0GBggASgIEhIKCm1l",
            "cmdlQm9udXMYDyADKAUSEQoJbWVyZ2VHcmlkGBAgAygFEhIKCm1lcmdlU2Nv",
            "cmUYHCABKAUSDQoFcG9pbnQYESABKAUSEQoJcmVwbGFjZUlkGBcgASgFEg4K",
            "BnJld2FyZBgSIAEoCRIRCglzZWxlY3RTbmQYEyABKAkSDwoHc2VsbE51bRge",
            "IAEoBRIUCgxzZWxsUGxheWVyTHYYHyABKAUSEQoJc2VsbFByaWNlGBQgASgF",
            "EhMKC3VubG9ja1ByaWNlGBUgASgFIrYBChZPYmpNZXJnZUl0ZW1NYXBBQlZh",
            "bHVlEk0KD09iak1lcmdlSXRlbU1hcBgBIAMoCzI0LnJhd2RhdGEuT2JqTWVy",
            "Z2VJdGVtTWFwQUJWYWx1ZS5PYmpNZXJnZUl0ZW1NYXBFbnRyeRpNChRPYmpN",
            "ZXJnZUl0ZW1NYXBFbnRyeRILCgNrZXkYASABKAkSJAoFdmFsdWUYAiABKAsy",
            "FS5yYXdkYXRhLk9iak1lcmdlSXRlbToCOAEiiQQKEE9iak1lcmdlSXRlbUNv",
            "bmYSRwoPT2JqTWVyZ2VJdGVtTWFwGAEgAygLMi4ucmF3ZGF0YS5PYmpNZXJn",
            "ZUl0ZW1Db25mLk9iak1lcmdlSXRlbU1hcEVudHJ5EksKEU9iak1lcmdlSXRl",
            "bU1hcEFCGAIgAygLMjAucmF3ZGF0YS5PYmpNZXJnZUl0ZW1Db25mLk9iak1l",
            "cmdlSXRlbU1hcEFCRW50cnkSVQoWT2JqTWVyZ2VJdGVtTWFwQUJQYXRjaBgD",
            "IAMoCzI1LnJhd2RhdGEuT2JqTWVyZ2VJdGVtQ29uZi5PYmpNZXJnZUl0ZW1N",
            "YXBBQlBhdGNoRW50cnkaTQoUT2JqTWVyZ2VJdGVtTWFwRW50cnkSCwoDa2V5",
            "GAEgASgJEiQKBXZhbHVlGAIgASgLMhUucmF3ZGF0YS5PYmpNZXJnZUl0ZW06",
            "AjgBGlkKFk9iak1lcmdlSXRlbU1hcEFCRW50cnkSCwoDa2V5GAEgASgJEi4K",
            "BXZhbHVlGAIgASgLMh8ucmF3ZGF0YS5PYmpNZXJnZUl0ZW1NYXBBQlZhbHVl",
            "OgI4ARpeChtPYmpNZXJnZUl0ZW1NYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEg",
            "ASgJEi4KBXZhbHVlGAIgASgLMh8ucmF3ZGF0YS5PYmpNZXJnZUl0ZW1NYXBB",
            "QlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4v",
            "Z29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ObjMergeItem), global::fat.rawdata.ObjMergeItem.Parser, new[]{ "ConfigVersion", "Id", "Tags", "BingoPrice", "BoardId", "BubbleAd", "BubbleDiscount", "BubblePrice", "BubbleProb", "BubbleProbAdjust", "Desc", "DisplayRes", "IsDegradable", "IsHideProd", "IsImportant", "IsJokerable", "IsNondrag", "IsPowerUp", "IsRecycle", "IsSellForCoin", "IsTop", "IsTopEffect", "MergeBonus", "MergeGrid", "MergeScore", "Point", "ReplaceId", "Reward", "SelectSnd", "SellNum", "SellPlayerLv", "SellPrice", "UnlockPrice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ObjMergeItemMapABValue), global::fat.rawdata.ObjMergeItemMapABValue.Parser, new[]{ "ObjMergeItemMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ObjMergeItemConf), global::fat.rawdata.ObjMergeItemConf.Parser, new[]{ "ObjMergeItemMap", "ObjMergeItemMapAB", "ObjMergeItemMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="ObjMergeItem",table="ObjMergeItemMap",table_wrapper="ObjMergeItemConf",map="true",map_key_type="string",data="ObjMergeItemConf")
  /// annotation@ab(table_ab="ObjMergeItemMapAB",table_ab_patch="ObjMergeItemMapABPatch",table_ab_value="ObjMergeItemMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@ObjMergeItem(id="id,configVersion")
  /// </summary>
  public sealed partial class ObjMergeItem : pb::IMessage<ObjMergeItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjMergeItem> _parser = new pb::MessageParser<ObjMergeItem>(() => new ObjMergeItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjMergeItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ObjMergeItemConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjMergeItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjMergeItem(ObjMergeItem other) : this() {
      configVersion_ = other.configVersion_;
      id_ = other.id_;
      Tags_ = other.Tags_.Clone();
      bingoPrice_ = other.bingoPrice_;
      boardId_ = other.boardId_;
      bubbleAd_ = other.bubbleAd_;
      bubbleDiscount_ = other.bubbleDiscount_;
      bubblePrice_ = other.bubblePrice_;
      bubbleProb_ = other.bubbleProb_;
      bubbleProbAdjust_ = other.bubbleProbAdjust_;
      desc_ = other.desc_;
      displayRes_ = other.displayRes_;
      isDegradable_ = other.isDegradable_;
      isHideProd_ = other.isHideProd_;
      isImportant_ = other.isImportant_;
      isJokerable_ = other.isJokerable_;
      isNondrag_ = other.isNondrag_;
      isPowerUp_ = other.isPowerUp_;
      isRecycle_ = other.isRecycle_;
      isSellForCoin_ = other.isSellForCoin_;
      isTop_ = other.isTop_;
      isTopEffect_ = other.isTopEffect_;
      mergeBonus_ = other.mergeBonus_.Clone();
      mergeGrid_ = other.mergeGrid_.Clone();
      mergeScore_ = other.mergeScore_;
      point_ = other.point_;
      replaceId_ = other.replaceId_;
      reward_ = other.reward_;
      selectSnd_ = other.selectSnd_;
      sellNum_ = other.sellNum_;
      sellPlayerLv_ = other.sellPlayerLv_;
      sellPrice_ = other.sellPrice_;
      unlockPrice_ = other.unlockPrice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjMergeItem Clone() {
      return new ObjMergeItem(this);
    }

    /// <summary>Field number for the "configVersion" field.</summary>
    public const int ConfigVersionFieldNumber = 1;
    private int configVersion_;
    /// <summary>
    /// 最低版本号
    /// （包含）
    /// annotation@field_configVersion(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigVersion {
      get { return configVersion_; }
      set {
        configVersion_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    /// 物品ID
    /// （ObjBasic.id）
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "_tags_" field.</summary>
    public const int TagsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_Tags_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> Tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 版本标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return Tags_; }
    }

    /// <summary>Field number for the "bingoPrice" field.</summary>
    public const int BingoPriceFieldNumber = 4;
    private int bingoPrice_;
    /// <summary>
    /// Bingo活动价格
    /// （bingo工具箱钻石跳cd使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BingoPrice {
      get { return bingoPrice_; }
      set {
        bingoPrice_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 5;
    private int boardId_;
    /// <summary>
    /// 棋盘grp id
    /// （MergeBoardGrp.id）
    /// （获得时发往哪个棋盘）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "bubbleAd" field.</summary>
    public const int BubbleAdFieldNumber = 25;
    private bool bubbleAd_;
    /// <summary>
    /// 泡泡是否可以
    /// 观看广告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BubbleAd {
      get { return bubbleAd_; }
      set {
        bubbleAd_ = value;
      }
    }

    /// <summary>Field number for the "bubbleDiscount" field.</summary>
    public const int BubbleDiscountFieldNumber = 6;
    private int bubbleDiscount_;
    /// <summary>
    /// 泡泡折扣
    /// （废弃）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BubbleDiscount {
      get { return bubbleDiscount_; }
      set {
        bubbleDiscount_ = value;
      }
    }

    /// <summary>Field number for the "bubblePrice" field.</summary>
    public const int BubblePriceFieldNumber = 7;
    private int bubblePrice_;
    /// <summary>
    /// 戳破泡泡价格
    /// （钻石价格）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BubblePrice {
      get { return bubblePrice_; }
      set {
        bubblePrice_ = value;
      }
    }

    /// <summary>Field number for the "bubbleProb" field.</summary>
    public const int BubbleProbFieldNumber = 8;
    private int bubbleProb_;
    /// <summary>
    /// 泡泡概率
    /// （百分数）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BubbleProb {
      get { return bubbleProb_; }
      set {
        bubbleProb_ = value;
      }
    }

    /// <summary>Field number for the "bubbleProbAdjust" field.</summary>
    public const int BubbleProbAdjustFieldNumber = 9;
    private float bubbleProbAdjust_;
    /// <summary>
    /// 订单泡泡概率放大
    /// （废弃）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BubbleProbAdjust {
      get { return bubbleProbAdjust_; }
      set {
        bubbleProbAdjust_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 10;
    private string desc_ = "";
    /// <summary>
    /// 物品描述
    /// （多语言）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "displayRes" field.</summary>
    public const int DisplayResFieldNumber = 11;
    private string displayRes_ = "";
    /// <summary>
    /// 展示资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayRes {
      get { return displayRes_; }
      set {
        displayRes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isDegradable" field.</summary>
    public const int IsDegradableFieldNumber = 27;
    private bool isDegradable_;
    /// <summary>
    /// 是否可以
    /// 被分割器降级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDegradable {
      get { return isDegradable_; }
      set {
        isDegradable_ = value;
      }
    }

    /// <summary>Field number for the "isHideProd" field.</summary>
    public const int IsHideProdFieldNumber = 22;
    private bool isHideProd_;
    /// <summary>
    /// 来源与产出中
    /// 是否隐藏产出内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHideProd {
      get { return isHideProd_; }
      set {
        isHideProd_ = value;
      }
    }

    /// <summary>Field number for the "isImportant" field.</summary>
    public const int IsImportantFieldNumber = 12;
    private bool isImportant_;
    /// <summary>
    /// 是否在出售时确认
    /// （废弃）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsImportant {
      get { return isImportant_; }
      set {
        isImportant_ = value;
      }
    }

    /// <summary>Field number for the "isJokerable" field.</summary>
    public const int IsJokerableFieldNumber = 26;
    private bool isJokerable_;
    /// <summary>
    /// 是否可以
    /// 被万能卡升级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsJokerable {
      get { return isJokerable_; }
      set {
        isJokerable_ = value;
      }
    }

    /// <summary>Field number for the "isNondrag" field.</summary>
    public const int IsNondragFieldNumber = 33;
    private bool isNondrag_;
    /// <summary>
    /// 是否不可拖动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNondrag {
      get { return isNondrag_; }
      set {
        isNondrag_ = value;
      }
    }

    /// <summary>Field number for the "isPowerUp" field.</summary>
    public const int IsPowerUpFieldNumber = 13;
    private bool isPowerUp_;
    /// <summary>
    /// 是否为PowerUp物品
    /// （废弃）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPowerUp {
      get { return isPowerUp_; }
      set {
        isPowerUp_ = value;
      }
    }

    /// <summary>Field number for the "isRecycle" field.</summary>
    public const int IsRecycleFieldNumber = 32;
    private bool isRecycle_;
    /// <summary>
    /// 是否可以被心想事成回收
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRecycle {
      get { return isRecycle_; }
      set {
        isRecycle_ = value;
      }
    }

    /// <summary>Field number for the "isSellForCoin" field.</summary>
    public const int IsSellForCoinFieldNumber = 29;
    private bool isSellForCoin_;
    /// <summary>
    /// 出售获得的内容
    /// 是：获得的是金币(5)
    /// 否：获得的是体力(31)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSellForCoin {
      get { return isSellForCoin_; }
      set {
        isSellForCoin_ = value;
      }
    }

    /// <summary>Field number for the "isTop" field.</summary>
    public const int IsTopFieldNumber = 14;
    private bool isTop_;
    /// <summary>
    /// 出现在奖励箱时
    /// 是否置顶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTop {
      get { return isTop_; }
      set {
        isTop_ = value;
      }
    }

    /// <summary>Field number for the "isTopEffect" field.</summary>
    public const int IsTopEffectFieldNumber = 24;
    private bool isTopEffect_;
    /// <summary>
    /// 是否显示
    /// 顶级特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTopEffect {
      get { return isTopEffect_; }
      set {
        isTopEffect_ = value;
      }
    }

    /// <summary>Field number for the "mergeBonus" field.</summary>
    public const int MergeBonusFieldNumber = 15;
    private static readonly pb::FieldCodec<int> _repeated_mergeBonus_codec
        = pb::FieldCodec.ForInt32(122);
    private readonly pbc::RepeatedField<int> mergeBonus_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 合成额外奖励
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MergeBonus {
      get { return mergeBonus_; }
    }

    /// <summary>Field number for the "mergeGrid" field.</summary>
    public const int MergeGridFieldNumber = 16;
    private static readonly pb::FieldCodec<int> _repeated_mergeGrid_codec
        = pb::FieldCodec.ForInt32(130);
    private readonly pbc::RepeatedField<int> mergeGrid_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 生效的格子
    /// MergeGrid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MergeGrid {
      get { return mergeGrid_; }
    }

    /// <summary>Field number for the "mergeScore" field.</summary>
    public const int MergeScoreFieldNumber = 28;
    private int mergeScore_;
    /// <summary>
    /// 合成积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MergeScore {
      get { return mergeScore_; }
      set {
        mergeScore_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 17;
    private int point_;
    /// <summary>
    /// 积分值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "replaceId" field.</summary>
    public const int ReplaceIdFieldNumber = 23;
    private int replaceId_;
    /// <summary>
    /// 来源与产出中
    /// 用什么棋子替代查询
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplaceId {
      get { return replaceId_; }
      set {
        replaceId_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 18;
    private string reward_ = "";
    /// <summary>
    /// 图鉴功能奖励
    /// （通用奖励格式）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reward {
      get { return reward_; }
      set {
        reward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "selectSnd" field.</summary>
    public const int SelectSndFieldNumber = 19;
    private string selectSnd_ = "";
    /// <summary>
    /// 选择音效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SelectSnd {
      get { return selectSnd_; }
      set {
        selectSnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sellNum" field.</summary>
    public const int SellNumFieldNumber = 30;
    private int sellNum_;
    /// <summary>
    /// 获得的内容数量
    /// 数量为0，代表删除
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SellNum {
      get { return sellNum_; }
      set {
        sellNum_ = value;
      }
    }

    /// <summary>Field number for the "sellPlayerLv" field.</summary>
    public const int SellPlayerLvFieldNumber = 31;
    private int sellPlayerLv_;
    /// <summary>
    /// 出售所需
    /// 玩家等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SellPlayerLv {
      get { return sellPlayerLv_; }
      set {
        sellPlayerLv_ = value;
      }
    }

    /// <summary>Field number for the "sellPrice" field.</summary>
    public const int SellPriceFieldNumber = 20;
    private int sellPrice_;
    /// <summary>
    /// 出售价格
    /// 0 = 出售不给金币
    /// -1 = 不可出售
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SellPrice {
      get { return sellPrice_; }
      set {
        sellPrice_ = value;
      }
    }

    /// <summary>Field number for the "unlockPrice" field.</summary>
    public const int UnlockPriceFieldNumber = 21;
    private int unlockPrice_;
    /// <summary>
    /// 蜘蛛网解锁价格
    /// （废弃）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnlockPrice {
      get { return unlockPrice_; }
      set {
        unlockPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjMergeItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjMergeItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigVersion != other.ConfigVersion) return false;
      if (Id != other.Id) return false;
      if(!Tags_.Equals(other.Tags_)) return false;
      if (BingoPrice != other.BingoPrice) return false;
      if (BoardId != other.BoardId) return false;
      if (BubbleAd != other.BubbleAd) return false;
      if (BubbleDiscount != other.BubbleDiscount) return false;
      if (BubblePrice != other.BubblePrice) return false;
      if (BubbleProb != other.BubbleProb) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BubbleProbAdjust, other.BubbleProbAdjust)) return false;
      if (Desc != other.Desc) return false;
      if (DisplayRes != other.DisplayRes) return false;
      if (IsDegradable != other.IsDegradable) return false;
      if (IsHideProd != other.IsHideProd) return false;
      if (IsImportant != other.IsImportant) return false;
      if (IsJokerable != other.IsJokerable) return false;
      if (IsNondrag != other.IsNondrag) return false;
      if (IsPowerUp != other.IsPowerUp) return false;
      if (IsRecycle != other.IsRecycle) return false;
      if (IsSellForCoin != other.IsSellForCoin) return false;
      if (IsTop != other.IsTop) return false;
      if (IsTopEffect != other.IsTopEffect) return false;
      if(!mergeBonus_.Equals(other.mergeBonus_)) return false;
      if(!mergeGrid_.Equals(other.mergeGrid_)) return false;
      if (MergeScore != other.MergeScore) return false;
      if (Point != other.Point) return false;
      if (ReplaceId != other.ReplaceId) return false;
      if (Reward != other.Reward) return false;
      if (SelectSnd != other.SelectSnd) return false;
      if (SellNum != other.SellNum) return false;
      if (SellPlayerLv != other.SellPlayerLv) return false;
      if (SellPrice != other.SellPrice) return false;
      if (UnlockPrice != other.UnlockPrice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigVersion != 0) hash ^= ConfigVersion.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= Tags_.GetHashCode();
      if (BingoPrice != 0) hash ^= BingoPrice.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (BubbleAd != false) hash ^= BubbleAd.GetHashCode();
      if (BubbleDiscount != 0) hash ^= BubbleDiscount.GetHashCode();
      if (BubblePrice != 0) hash ^= BubblePrice.GetHashCode();
      if (BubbleProb != 0) hash ^= BubbleProb.GetHashCode();
      if (BubbleProbAdjust != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BubbleProbAdjust);
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (DisplayRes.Length != 0) hash ^= DisplayRes.GetHashCode();
      if (IsDegradable != false) hash ^= IsDegradable.GetHashCode();
      if (IsHideProd != false) hash ^= IsHideProd.GetHashCode();
      if (IsImportant != false) hash ^= IsImportant.GetHashCode();
      if (IsJokerable != false) hash ^= IsJokerable.GetHashCode();
      if (IsNondrag != false) hash ^= IsNondrag.GetHashCode();
      if (IsPowerUp != false) hash ^= IsPowerUp.GetHashCode();
      if (IsRecycle != false) hash ^= IsRecycle.GetHashCode();
      if (IsSellForCoin != false) hash ^= IsSellForCoin.GetHashCode();
      if (IsTop != false) hash ^= IsTop.GetHashCode();
      if (IsTopEffect != false) hash ^= IsTopEffect.GetHashCode();
      hash ^= mergeBonus_.GetHashCode();
      hash ^= mergeGrid_.GetHashCode();
      if (MergeScore != 0) hash ^= MergeScore.GetHashCode();
      if (Point != 0) hash ^= Point.GetHashCode();
      if (ReplaceId != 0) hash ^= ReplaceId.GetHashCode();
      if (Reward.Length != 0) hash ^= Reward.GetHashCode();
      if (SelectSnd.Length != 0) hash ^= SelectSnd.GetHashCode();
      if (SellNum != 0) hash ^= SellNum.GetHashCode();
      if (SellPlayerLv != 0) hash ^= SellPlayerLv.GetHashCode();
      if (SellPrice != 0) hash ^= SellPrice.GetHashCode();
      if (UnlockPrice != 0) hash ^= UnlockPrice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ConfigVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigVersion);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      Tags_.WriteTo(output, _repeated_Tags_codec);
      if (BingoPrice != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BingoPrice);
      }
      if (BoardId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BoardId);
      }
      if (BubbleDiscount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BubbleDiscount);
      }
      if (BubblePrice != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BubblePrice);
      }
      if (BubbleProb != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BubbleProb);
      }
      if (BubbleProbAdjust != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(BubbleProbAdjust);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Desc);
      }
      if (DisplayRes.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DisplayRes);
      }
      if (IsImportant != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsImportant);
      }
      if (IsPowerUp != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsPowerUp);
      }
      if (IsTop != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsTop);
      }
      mergeBonus_.WriteTo(output, _repeated_mergeBonus_codec);
      mergeGrid_.WriteTo(output, _repeated_mergeGrid_codec);
      if (Point != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Point);
      }
      if (Reward.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Reward);
      }
      if (SelectSnd.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(SelectSnd);
      }
      if (SellPrice != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SellPrice);
      }
      if (UnlockPrice != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(UnlockPrice);
      }
      if (IsHideProd != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsHideProd);
      }
      if (ReplaceId != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(ReplaceId);
      }
      if (IsTopEffect != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsTopEffect);
      }
      if (BubbleAd != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(BubbleAd);
      }
      if (IsJokerable != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsJokerable);
      }
      if (IsDegradable != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(IsDegradable);
      }
      if (MergeScore != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(MergeScore);
      }
      if (IsSellForCoin != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(IsSellForCoin);
      }
      if (SellNum != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(SellNum);
      }
      if (SellPlayerLv != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(SellPlayerLv);
      }
      if (IsRecycle != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(IsRecycle);
      }
      if (IsNondrag != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IsNondrag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ConfigVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigVersion);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      Tags_.WriteTo(ref output, _repeated_Tags_codec);
      if (BingoPrice != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BingoPrice);
      }
      if (BoardId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BoardId);
      }
      if (BubbleDiscount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BubbleDiscount);
      }
      if (BubblePrice != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BubblePrice);
      }
      if (BubbleProb != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BubbleProb);
      }
      if (BubbleProbAdjust != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(BubbleProbAdjust);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Desc);
      }
      if (DisplayRes.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DisplayRes);
      }
      if (IsImportant != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsImportant);
      }
      if (IsPowerUp != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsPowerUp);
      }
      if (IsTop != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsTop);
      }
      mergeBonus_.WriteTo(ref output, _repeated_mergeBonus_codec);
      mergeGrid_.WriteTo(ref output, _repeated_mergeGrid_codec);
      if (Point != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Point);
      }
      if (Reward.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Reward);
      }
      if (SelectSnd.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(SelectSnd);
      }
      if (SellPrice != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SellPrice);
      }
      if (UnlockPrice != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(UnlockPrice);
      }
      if (IsHideProd != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsHideProd);
      }
      if (ReplaceId != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(ReplaceId);
      }
      if (IsTopEffect != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsTopEffect);
      }
      if (BubbleAd != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(BubbleAd);
      }
      if (IsJokerable != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsJokerable);
      }
      if (IsDegradable != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(IsDegradable);
      }
      if (MergeScore != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(MergeScore);
      }
      if (IsSellForCoin != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(IsSellForCoin);
      }
      if (SellNum != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(SellNum);
      }
      if (SellPlayerLv != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(SellPlayerLv);
      }
      if (IsRecycle != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(IsRecycle);
      }
      if (IsNondrag != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IsNondrag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigVersion);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += Tags_.CalculateSize(_repeated_Tags_codec);
      if (BingoPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BingoPrice);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (BubbleAd != false) {
        size += 2 + 1;
      }
      if (BubbleDiscount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BubbleDiscount);
      }
      if (BubblePrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BubblePrice);
      }
      if (BubbleProb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BubbleProb);
      }
      if (BubbleProbAdjust != 0F) {
        size += 1 + 4;
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (DisplayRes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayRes);
      }
      if (IsDegradable != false) {
        size += 2 + 1;
      }
      if (IsHideProd != false) {
        size += 2 + 1;
      }
      if (IsImportant != false) {
        size += 1 + 1;
      }
      if (IsJokerable != false) {
        size += 2 + 1;
      }
      if (IsNondrag != false) {
        size += 2 + 1;
      }
      if (IsPowerUp != false) {
        size += 1 + 1;
      }
      if (IsRecycle != false) {
        size += 2 + 1;
      }
      if (IsSellForCoin != false) {
        size += 2 + 1;
      }
      if (IsTop != false) {
        size += 1 + 1;
      }
      if (IsTopEffect != false) {
        size += 2 + 1;
      }
      size += mergeBonus_.CalculateSize(_repeated_mergeBonus_codec);
      size += mergeGrid_.CalculateSize(_repeated_mergeGrid_codec);
      if (MergeScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MergeScore);
      }
      if (Point != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (ReplaceId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReplaceId);
      }
      if (Reward.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Reward);
      }
      if (SelectSnd.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SelectSnd);
      }
      if (SellNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SellNum);
      }
      if (SellPlayerLv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SellPlayerLv);
      }
      if (SellPrice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SellPrice);
      }
      if (UnlockPrice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnlockPrice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjMergeItem other) {
      if (other == null) {
        return;
      }
      if (other.ConfigVersion != 0) {
        ConfigVersion = other.ConfigVersion;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      Tags_.Add(other.Tags_);
      if (other.BingoPrice != 0) {
        BingoPrice = other.BingoPrice;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.BubbleAd != false) {
        BubbleAd = other.BubbleAd;
      }
      if (other.BubbleDiscount != 0) {
        BubbleDiscount = other.BubbleDiscount;
      }
      if (other.BubblePrice != 0) {
        BubblePrice = other.BubblePrice;
      }
      if (other.BubbleProb != 0) {
        BubbleProb = other.BubbleProb;
      }
      if (other.BubbleProbAdjust != 0F) {
        BubbleProbAdjust = other.BubbleProbAdjust;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.DisplayRes.Length != 0) {
        DisplayRes = other.DisplayRes;
      }
      if (other.IsDegradable != false) {
        IsDegradable = other.IsDegradable;
      }
      if (other.IsHideProd != false) {
        IsHideProd = other.IsHideProd;
      }
      if (other.IsImportant != false) {
        IsImportant = other.IsImportant;
      }
      if (other.IsJokerable != false) {
        IsJokerable = other.IsJokerable;
      }
      if (other.IsNondrag != false) {
        IsNondrag = other.IsNondrag;
      }
      if (other.IsPowerUp != false) {
        IsPowerUp = other.IsPowerUp;
      }
      if (other.IsRecycle != false) {
        IsRecycle = other.IsRecycle;
      }
      if (other.IsSellForCoin != false) {
        IsSellForCoin = other.IsSellForCoin;
      }
      if (other.IsTop != false) {
        IsTop = other.IsTop;
      }
      if (other.IsTopEffect != false) {
        IsTopEffect = other.IsTopEffect;
      }
      mergeBonus_.Add(other.mergeBonus_);
      mergeGrid_.Add(other.mergeGrid_);
      if (other.MergeScore != 0) {
        MergeScore = other.MergeScore;
      }
      if (other.Point != 0) {
        Point = other.Point;
      }
      if (other.ReplaceId != 0) {
        ReplaceId = other.ReplaceId;
      }
      if (other.Reward.Length != 0) {
        Reward = other.Reward;
      }
      if (other.SelectSnd.Length != 0) {
        SelectSnd = other.SelectSnd;
      }
      if (other.SellNum != 0) {
        SellNum = other.SellNum;
      }
      if (other.SellPlayerLv != 0) {
        SellPlayerLv = other.SellPlayerLv;
      }
      if (other.SellPrice != 0) {
        SellPrice = other.SellPrice;
      }
      if (other.UnlockPrice != 0) {
        UnlockPrice = other.UnlockPrice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConfigVersion = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            Tags_.AddEntriesFrom(input, _repeated_Tags_codec);
            break;
          }
          case 32: {
            BingoPrice = input.ReadInt32();
            break;
          }
          case 40: {
            BoardId = input.ReadInt32();
            break;
          }
          case 48: {
            BubbleDiscount = input.ReadInt32();
            break;
          }
          case 56: {
            BubblePrice = input.ReadInt32();
            break;
          }
          case 64: {
            BubbleProb = input.ReadInt32();
            break;
          }
          case 77: {
            BubbleProbAdjust = input.ReadFloat();
            break;
          }
          case 82: {
            Desc = input.ReadString();
            break;
          }
          case 90: {
            DisplayRes = input.ReadString();
            break;
          }
          case 96: {
            IsImportant = input.ReadBool();
            break;
          }
          case 104: {
            IsPowerUp = input.ReadBool();
            break;
          }
          case 112: {
            IsTop = input.ReadBool();
            break;
          }
          case 122:
          case 120: {
            mergeBonus_.AddEntriesFrom(input, _repeated_mergeBonus_codec);
            break;
          }
          case 130:
          case 128: {
            mergeGrid_.AddEntriesFrom(input, _repeated_mergeGrid_codec);
            break;
          }
          case 136: {
            Point = input.ReadInt32();
            break;
          }
          case 146: {
            Reward = input.ReadString();
            break;
          }
          case 154: {
            SelectSnd = input.ReadString();
            break;
          }
          case 160: {
            SellPrice = input.ReadInt32();
            break;
          }
          case 168: {
            UnlockPrice = input.ReadInt32();
            break;
          }
          case 176: {
            IsHideProd = input.ReadBool();
            break;
          }
          case 184: {
            ReplaceId = input.ReadInt32();
            break;
          }
          case 192: {
            IsTopEffect = input.ReadBool();
            break;
          }
          case 200: {
            BubbleAd = input.ReadBool();
            break;
          }
          case 208: {
            IsJokerable = input.ReadBool();
            break;
          }
          case 216: {
            IsDegradable = input.ReadBool();
            break;
          }
          case 224: {
            MergeScore = input.ReadInt32();
            break;
          }
          case 232: {
            IsSellForCoin = input.ReadBool();
            break;
          }
          case 240: {
            SellNum = input.ReadInt32();
            break;
          }
          case 248: {
            SellPlayerLv = input.ReadInt32();
            break;
          }
          case 256: {
            IsRecycle = input.ReadBool();
            break;
          }
          case 264: {
            IsNondrag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ConfigVersion = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            Tags_.AddEntriesFrom(ref input, _repeated_Tags_codec);
            break;
          }
          case 32: {
            BingoPrice = input.ReadInt32();
            break;
          }
          case 40: {
            BoardId = input.ReadInt32();
            break;
          }
          case 48: {
            BubbleDiscount = input.ReadInt32();
            break;
          }
          case 56: {
            BubblePrice = input.ReadInt32();
            break;
          }
          case 64: {
            BubbleProb = input.ReadInt32();
            break;
          }
          case 77: {
            BubbleProbAdjust = input.ReadFloat();
            break;
          }
          case 82: {
            Desc = input.ReadString();
            break;
          }
          case 90: {
            DisplayRes = input.ReadString();
            break;
          }
          case 96: {
            IsImportant = input.ReadBool();
            break;
          }
          case 104: {
            IsPowerUp = input.ReadBool();
            break;
          }
          case 112: {
            IsTop = input.ReadBool();
            break;
          }
          case 122:
          case 120: {
            mergeBonus_.AddEntriesFrom(ref input, _repeated_mergeBonus_codec);
            break;
          }
          case 130:
          case 128: {
            mergeGrid_.AddEntriesFrom(ref input, _repeated_mergeGrid_codec);
            break;
          }
          case 136: {
            Point = input.ReadInt32();
            break;
          }
          case 146: {
            Reward = input.ReadString();
            break;
          }
          case 154: {
            SelectSnd = input.ReadString();
            break;
          }
          case 160: {
            SellPrice = input.ReadInt32();
            break;
          }
          case 168: {
            UnlockPrice = input.ReadInt32();
            break;
          }
          case 176: {
            IsHideProd = input.ReadBool();
            break;
          }
          case 184: {
            ReplaceId = input.ReadInt32();
            break;
          }
          case 192: {
            IsTopEffect = input.ReadBool();
            break;
          }
          case 200: {
            BubbleAd = input.ReadBool();
            break;
          }
          case 208: {
            IsJokerable = input.ReadBool();
            break;
          }
          case 216: {
            IsDegradable = input.ReadBool();
            break;
          }
          case 224: {
            MergeScore = input.ReadInt32();
            break;
          }
          case 232: {
            IsSellForCoin = input.ReadBool();
            break;
          }
          case 240: {
            SellNum = input.ReadInt32();
            break;
          }
          case 248: {
            SellPlayerLv = input.ReadInt32();
            break;
          }
          case 256: {
            IsRecycle = input.ReadBool();
            break;
          }
          case 264: {
            IsNondrag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjMergeItemMapABValue : pb::IMessage<ObjMergeItemMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjMergeItemMapABValue> _parser = new pb::MessageParser<ObjMergeItemMapABValue>(() => new ObjMergeItemMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjMergeItemMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ObjMergeItemConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjMergeItemMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjMergeItemMapABValue(ObjMergeItemMapABValue other) : this() {
      objMergeItemMap_ = other.objMergeItemMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjMergeItemMapABValue Clone() {
      return new ObjMergeItemMapABValue(this);
    }

    /// <summary>Field number for the "ObjMergeItemMap" field.</summary>
    public const int ObjMergeItemMapFieldNumber = 1;
    private static readonly pbc::MapField<string, global::fat.rawdata.ObjMergeItem>.Codec _map_objMergeItemMap_codec
        = new pbc::MapField<string, global::fat.rawdata.ObjMergeItem>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjMergeItem.Parser), 10);
    private readonly pbc::MapField<string, global::fat.rawdata.ObjMergeItem> objMergeItemMap_ = new pbc::MapField<string, global::fat.rawdata.ObjMergeItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ObjMergeItem> ObjMergeItemMap {
      get { return objMergeItemMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjMergeItemMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjMergeItemMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ObjMergeItemMap.Equals(other.ObjMergeItemMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ObjMergeItemMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objMergeItemMap_.WriteTo(output, _map_objMergeItemMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objMergeItemMap_.WriteTo(ref output, _map_objMergeItemMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objMergeItemMap_.CalculateSize(_map_objMergeItemMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjMergeItemMapABValue other) {
      if (other == null) {
        return;
      }
      objMergeItemMap_.Add(other.objMergeItemMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objMergeItemMap_.AddEntriesFrom(input, _map_objMergeItemMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objMergeItemMap_.AddEntriesFrom(ref input, _map_objMergeItemMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjMergeItemConf : pb::IMessage<ObjMergeItemConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjMergeItemConf> _parser = new pb::MessageParser<ObjMergeItemConf>(() => new ObjMergeItemConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjMergeItemConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ObjMergeItemConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjMergeItemConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjMergeItemConf(ObjMergeItemConf other) : this() {
      objMergeItemMap_ = other.objMergeItemMap_.Clone();
      objMergeItemMapAB_ = other.objMergeItemMapAB_.Clone();
      objMergeItemMapABPatch_ = other.objMergeItemMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjMergeItemConf Clone() {
      return new ObjMergeItemConf(this);
    }

    /// <summary>Field number for the "ObjMergeItemMap" field.</summary>
    public const int ObjMergeItemMapFieldNumber = 1;
    private static readonly pbc::MapField<string, global::fat.rawdata.ObjMergeItem>.Codec _map_objMergeItemMap_codec
        = new pbc::MapField<string, global::fat.rawdata.ObjMergeItem>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjMergeItem.Parser), 10);
    private readonly pbc::MapField<string, global::fat.rawdata.ObjMergeItem> objMergeItemMap_ = new pbc::MapField<string, global::fat.rawdata.ObjMergeItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ObjMergeItem> ObjMergeItemMap {
      get { return objMergeItemMap_; }
    }

    /// <summary>Field number for the "ObjMergeItemMapAB" field.</summary>
    public const int ObjMergeItemMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.ObjMergeItemMapABValue>.Codec _map_objMergeItemMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.ObjMergeItemMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjMergeItemMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.ObjMergeItemMapABValue> objMergeItemMapAB_ = new pbc::MapField<string, global::fat.rawdata.ObjMergeItemMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ObjMergeItemMapABValue> ObjMergeItemMapAB {
      get { return objMergeItemMapAB_; }
    }

    /// <summary>Field number for the "ObjMergeItemMapABPatch" field.</summary>
    public const int ObjMergeItemMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.ObjMergeItemMapABValue>.Codec _map_objMergeItemMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.ObjMergeItemMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjMergeItemMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.ObjMergeItemMapABValue> objMergeItemMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.ObjMergeItemMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ObjMergeItemMapABValue> ObjMergeItemMapABPatch {
      get { return objMergeItemMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjMergeItemConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjMergeItemConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ObjMergeItemMap.Equals(other.ObjMergeItemMap)) return false;
      if (!ObjMergeItemMapAB.Equals(other.ObjMergeItemMapAB)) return false;
      if (!ObjMergeItemMapABPatch.Equals(other.ObjMergeItemMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ObjMergeItemMap.GetHashCode();
      hash ^= ObjMergeItemMapAB.GetHashCode();
      hash ^= ObjMergeItemMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objMergeItemMap_.WriteTo(output, _map_objMergeItemMap_codec);
      objMergeItemMapAB_.WriteTo(output, _map_objMergeItemMapAB_codec);
      objMergeItemMapABPatch_.WriteTo(output, _map_objMergeItemMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objMergeItemMap_.WriteTo(ref output, _map_objMergeItemMap_codec);
      objMergeItemMapAB_.WriteTo(ref output, _map_objMergeItemMapAB_codec);
      objMergeItemMapABPatch_.WriteTo(ref output, _map_objMergeItemMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objMergeItemMap_.CalculateSize(_map_objMergeItemMap_codec);
      size += objMergeItemMapAB_.CalculateSize(_map_objMergeItemMapAB_codec);
      size += objMergeItemMapABPatch_.CalculateSize(_map_objMergeItemMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjMergeItemConf other) {
      if (other == null) {
        return;
      }
      objMergeItemMap_.Add(other.objMergeItemMap_);
      objMergeItemMapAB_.Add(other.objMergeItemMapAB_);
      objMergeItemMapABPatch_.Add(other.objMergeItemMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objMergeItemMap_.AddEntriesFrom(input, _map_objMergeItemMap_codec);
            break;
          }
          case 18: {
            objMergeItemMapAB_.AddEntriesFrom(input, _map_objMergeItemMapAB_codec);
            break;
          }
          case 26: {
            objMergeItemMapABPatch_.AddEntriesFrom(input, _map_objMergeItemMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objMergeItemMap_.AddEntriesFrom(ref input, _map_objMergeItemMap_codec);
            break;
          }
          case 18: {
            objMergeItemMapAB_.AddEntriesFrom(ref input, _map_objMergeItemMapAB_codec);
            break;
          }
          case 26: {
            objMergeItemMapABPatch_.AddEntriesFrom(ref input, _map_objMergeItemMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
