// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/PachinkoMultipleConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/PachinkoMultipleConf.proto</summary>
  public static partial class PachinkoMultipleConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/PachinkoMultipleConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PachinkoMultipleConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJyYXdkYXRhL1BhY2hpbmtvTXVsdGlwbGVDb25mLnByb3RvEgdyYXdkYXRh",
            "IjAKEFBhY2hpbmtvTXVsdGlwbGUSCgoCaWQYASABKAUSEAoIbXVsdGlwbGUY",
            "AiABKAUizgEKGlBhY2hpbmtvTXVsdGlwbGVNYXBBQlZhbHVlElkKE1BhY2hp",
            "bmtvTXVsdGlwbGVNYXAYASADKAsyPC5yYXdkYXRhLlBhY2hpbmtvTXVsdGlw",
            "bGVNYXBBQlZhbHVlLlBhY2hpbmtvTXVsdGlwbGVNYXBFbnRyeRpVChhQYWNo",
            "aW5rb011bHRpcGxlTWFwRW50cnkSCwoDa2V5GAEgASgFEigKBXZhbHVlGAIg",
            "ASgLMhkucmF3ZGF0YS5QYWNoaW5rb011bHRpcGxlOgI4ASLJBAoUUGFjaGlu",
            "a29NdWx0aXBsZUNvbmYSUwoTUGFjaGlua29NdWx0aXBsZU1hcBgBIAMoCzI2",
            "LnJhd2RhdGEuUGFjaGlua29NdWx0aXBsZUNvbmYuUGFjaGlua29NdWx0aXBs",
            "ZU1hcEVudHJ5ElcKFVBhY2hpbmtvTXVsdGlwbGVNYXBBQhgCIAMoCzI4LnJh",
            "d2RhdGEuUGFjaGlua29NdWx0aXBsZUNvbmYuUGFjaGlua29NdWx0aXBsZU1h",
            "cEFCRW50cnkSYQoaUGFjaGlua29NdWx0aXBsZU1hcEFCUGF0Y2gYAyADKAsy",
            "PS5yYXdkYXRhLlBhY2hpbmtvTXVsdGlwbGVDb25mLlBhY2hpbmtvTXVsdGlw",
            "bGVNYXBBQlBhdGNoRW50cnkaVQoYUGFjaGlua29NdWx0aXBsZU1hcEVudHJ5",
            "EgsKA2tleRgBIAEoBRIoCgV2YWx1ZRgCIAEoCzIZLnJhd2RhdGEuUGFjaGlu",
            "a29NdWx0aXBsZToCOAEaYQoaUGFjaGlua29NdWx0aXBsZU1hcEFCRW50cnkS",
            "CwoDa2V5GAEgASgJEjIKBXZhbHVlGAIgASgLMiMucmF3ZGF0YS5QYWNoaW5r",
            "b011bHRpcGxlTWFwQUJWYWx1ZToCOAEaZgofUGFjaGlua29NdWx0aXBsZU1h",
            "cEFCUGF0Y2hFbnRyeRILCgNrZXkYASABKAkSMgoFdmFsdWUYAiABKAsyIy5y",
            "YXdkYXRhLlBhY2hpbmtvTXVsdGlwbGVNYXBBQlZhbHVlOgI4AUI9Wi1naXRs",
            "YWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtm",
            "YXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.PachinkoMultiple), global::fat.rawdata.PachinkoMultiple.Parser, new[]{ "Id", "Multiple" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.PachinkoMultipleMapABValue), global::fat.rawdata.PachinkoMultipleMapABValue.Parser, new[]{ "PachinkoMultipleMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.PachinkoMultipleConf), global::fat.rawdata.PachinkoMultipleConf.Parser, new[]{ "PachinkoMultipleMap", "PachinkoMultipleMapAB", "PachinkoMultipleMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="PachinkoMultiple",table="PachinkoMultipleMap",table_wrapper="PachinkoMultipleConf",map="true",map_key_type="int32",data="PachinkoMultipleConf")
  /// annotation@ab(table_ab="PachinkoMultipleMapAB",table_ab_patch="PachinkoMultipleMapABPatch",table_ab_value="PachinkoMultipleMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@PachinkoMultiple(id="id")
  /// </summary>
  public sealed partial class PachinkoMultiple : pb::IMessage<PachinkoMultiple>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PachinkoMultiple> _parser = new pb::MessageParser<PachinkoMultiple>(() => new PachinkoMultiple());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PachinkoMultiple> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.PachinkoMultipleConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PachinkoMultiple() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PachinkoMultiple(PachinkoMultiple other) : this() {
      id_ = other.id_;
      multiple_ = other.multiple_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PachinkoMultiple Clone() {
      return new PachinkoMultiple(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 倍数id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 2;
    private int multiple_;
    /// <summary>
    /// 倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PachinkoMultiple);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PachinkoMultiple other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Multiple != other.Multiple) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Multiple != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Multiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Multiple != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Multiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PachinkoMultiple other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Multiple = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Multiple = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PachinkoMultipleMapABValue : pb::IMessage<PachinkoMultipleMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PachinkoMultipleMapABValue> _parser = new pb::MessageParser<PachinkoMultipleMapABValue>(() => new PachinkoMultipleMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PachinkoMultipleMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.PachinkoMultipleConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PachinkoMultipleMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PachinkoMultipleMapABValue(PachinkoMultipleMapABValue other) : this() {
      pachinkoMultipleMap_ = other.pachinkoMultipleMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PachinkoMultipleMapABValue Clone() {
      return new PachinkoMultipleMapABValue(this);
    }

    /// <summary>Field number for the "PachinkoMultipleMap" field.</summary>
    public const int PachinkoMultipleMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.PachinkoMultiple>.Codec _map_pachinkoMultipleMap_codec
        = new pbc::MapField<int, global::fat.rawdata.PachinkoMultiple>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.PachinkoMultiple.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.PachinkoMultiple> pachinkoMultipleMap_ = new pbc::MapField<int, global::fat.rawdata.PachinkoMultiple>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.PachinkoMultiple> PachinkoMultipleMap {
      get { return pachinkoMultipleMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PachinkoMultipleMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PachinkoMultipleMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!PachinkoMultipleMap.Equals(other.PachinkoMultipleMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= PachinkoMultipleMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pachinkoMultipleMap_.WriteTo(output, _map_pachinkoMultipleMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pachinkoMultipleMap_.WriteTo(ref output, _map_pachinkoMultipleMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pachinkoMultipleMap_.CalculateSize(_map_pachinkoMultipleMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PachinkoMultipleMapABValue other) {
      if (other == null) {
        return;
      }
      pachinkoMultipleMap_.Add(other.pachinkoMultipleMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pachinkoMultipleMap_.AddEntriesFrom(input, _map_pachinkoMultipleMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            pachinkoMultipleMap_.AddEntriesFrom(ref input, _map_pachinkoMultipleMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PachinkoMultipleConf : pb::IMessage<PachinkoMultipleConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PachinkoMultipleConf> _parser = new pb::MessageParser<PachinkoMultipleConf>(() => new PachinkoMultipleConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PachinkoMultipleConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.PachinkoMultipleConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PachinkoMultipleConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PachinkoMultipleConf(PachinkoMultipleConf other) : this() {
      pachinkoMultipleMap_ = other.pachinkoMultipleMap_.Clone();
      pachinkoMultipleMapAB_ = other.pachinkoMultipleMapAB_.Clone();
      pachinkoMultipleMapABPatch_ = other.pachinkoMultipleMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PachinkoMultipleConf Clone() {
      return new PachinkoMultipleConf(this);
    }

    /// <summary>Field number for the "PachinkoMultipleMap" field.</summary>
    public const int PachinkoMultipleMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.PachinkoMultiple>.Codec _map_pachinkoMultipleMap_codec
        = new pbc::MapField<int, global::fat.rawdata.PachinkoMultiple>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.PachinkoMultiple.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.PachinkoMultiple> pachinkoMultipleMap_ = new pbc::MapField<int, global::fat.rawdata.PachinkoMultiple>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.PachinkoMultiple> PachinkoMultipleMap {
      get { return pachinkoMultipleMap_; }
    }

    /// <summary>Field number for the "PachinkoMultipleMapAB" field.</summary>
    public const int PachinkoMultipleMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.PachinkoMultipleMapABValue>.Codec _map_pachinkoMultipleMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.PachinkoMultipleMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.PachinkoMultipleMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.PachinkoMultipleMapABValue> pachinkoMultipleMapAB_ = new pbc::MapField<string, global::fat.rawdata.PachinkoMultipleMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.PachinkoMultipleMapABValue> PachinkoMultipleMapAB {
      get { return pachinkoMultipleMapAB_; }
    }

    /// <summary>Field number for the "PachinkoMultipleMapABPatch" field.</summary>
    public const int PachinkoMultipleMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.PachinkoMultipleMapABValue>.Codec _map_pachinkoMultipleMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.PachinkoMultipleMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.PachinkoMultipleMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.PachinkoMultipleMapABValue> pachinkoMultipleMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.PachinkoMultipleMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.PachinkoMultipleMapABValue> PachinkoMultipleMapABPatch {
      get { return pachinkoMultipleMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PachinkoMultipleConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PachinkoMultipleConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!PachinkoMultipleMap.Equals(other.PachinkoMultipleMap)) return false;
      if (!PachinkoMultipleMapAB.Equals(other.PachinkoMultipleMapAB)) return false;
      if (!PachinkoMultipleMapABPatch.Equals(other.PachinkoMultipleMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= PachinkoMultipleMap.GetHashCode();
      hash ^= PachinkoMultipleMapAB.GetHashCode();
      hash ^= PachinkoMultipleMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pachinkoMultipleMap_.WriteTo(output, _map_pachinkoMultipleMap_codec);
      pachinkoMultipleMapAB_.WriteTo(output, _map_pachinkoMultipleMapAB_codec);
      pachinkoMultipleMapABPatch_.WriteTo(output, _map_pachinkoMultipleMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pachinkoMultipleMap_.WriteTo(ref output, _map_pachinkoMultipleMap_codec);
      pachinkoMultipleMapAB_.WriteTo(ref output, _map_pachinkoMultipleMapAB_codec);
      pachinkoMultipleMapABPatch_.WriteTo(ref output, _map_pachinkoMultipleMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pachinkoMultipleMap_.CalculateSize(_map_pachinkoMultipleMap_codec);
      size += pachinkoMultipleMapAB_.CalculateSize(_map_pachinkoMultipleMapAB_codec);
      size += pachinkoMultipleMapABPatch_.CalculateSize(_map_pachinkoMultipleMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PachinkoMultipleConf other) {
      if (other == null) {
        return;
      }
      pachinkoMultipleMap_.Add(other.pachinkoMultipleMap_);
      pachinkoMultipleMapAB_.Add(other.pachinkoMultipleMapAB_);
      pachinkoMultipleMapABPatch_.Add(other.pachinkoMultipleMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pachinkoMultipleMap_.AddEntriesFrom(input, _map_pachinkoMultipleMap_codec);
            break;
          }
          case 18: {
            pachinkoMultipleMapAB_.AddEntriesFrom(input, _map_pachinkoMultipleMapAB_codec);
            break;
          }
          case 26: {
            pachinkoMultipleMapABPatch_.AddEntriesFrom(input, _map_pachinkoMultipleMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            pachinkoMultipleMap_.AddEntriesFrom(ref input, _map_pachinkoMultipleMap_codec);
            break;
          }
          case 18: {
            pachinkoMultipleMapAB_.AddEntriesFrom(ref input, _map_pachinkoMultipleMapAB_codec);
            break;
          }
          case 26: {
            pachinkoMultipleMapABPatch_.AddEntriesFrom(ref input, _map_pachinkoMultipleMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
