// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/CurrencyPackConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/CurrencyPackConf.proto</summary>
  public static partial class CurrencyPackConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/CurrencyPackConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CurrencyPackConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5yYXdkYXRhL0N1cnJlbmN5UGFja0NvbmYucHJvdG8SB3Jhd2RhdGEaFnJh",
            "d2RhdGEvQ29pblR5cGUucHJvdG8ilAEKDEN1cnJlbmN5UGFjaxIKCgJpZBgB",
            "IAEoBRIjCghDb2luVHlwZRgCIAEoDjIRLnJhd2RhdGEuQ29pblR5cGUSDgoG",
            "ZWZmZWN0GAMgASgFEg0KBXByaWNlGAQgASgFEg4KBnJld2FyZBgFIAMoCRIT",
            "CgtyZXdhcmRBbGJ1bRgGIAMoCRIPCgd0Z2FOYW1lGAcgASgJIrYBChZDdXJy",
            "ZW5jeVBhY2tNYXBBQlZhbHVlEk0KD0N1cnJlbmN5UGFja01hcBgBIAMoCzI0",
            "LnJhd2RhdGEuQ3VycmVuY3lQYWNrTWFwQUJWYWx1ZS5DdXJyZW5jeVBhY2tN",
            "YXBFbnRyeRpNChRDdXJyZW5jeVBhY2tNYXBFbnRyeRILCgNrZXkYASABKAUS",
            "JAoFdmFsdWUYAiABKAsyFS5yYXdkYXRhLkN1cnJlbmN5UGFjazoCOAEiiQQK",
            "EEN1cnJlbmN5UGFja0NvbmYSRwoPQ3VycmVuY3lQYWNrTWFwGAEgAygLMi4u",
            "cmF3ZGF0YS5DdXJyZW5jeVBhY2tDb25mLkN1cnJlbmN5UGFja01hcEVudHJ5",
            "EksKEUN1cnJlbmN5UGFja01hcEFCGAIgAygLMjAucmF3ZGF0YS5DdXJyZW5j",
            "eVBhY2tDb25mLkN1cnJlbmN5UGFja01hcEFCRW50cnkSVQoWQ3VycmVuY3lQ",
            "YWNrTWFwQUJQYXRjaBgDIAMoCzI1LnJhd2RhdGEuQ3VycmVuY3lQYWNrQ29u",
            "Zi5DdXJyZW5jeVBhY2tNYXBBQlBhdGNoRW50cnkaTQoUQ3VycmVuY3lQYWNr",
            "TWFwRW50cnkSCwoDa2V5GAEgASgFEiQKBXZhbHVlGAIgASgLMhUucmF3ZGF0",
            "YS5DdXJyZW5jeVBhY2s6AjgBGlkKFkN1cnJlbmN5UGFja01hcEFCRW50cnkS",
            "CwoDa2V5GAEgASgJEi4KBXZhbHVlGAIgASgLMh8ucmF3ZGF0YS5DdXJyZW5j",
            "eVBhY2tNYXBBQlZhbHVlOgI4ARpeChtDdXJyZW5jeVBhY2tNYXBBQlBhdGNo",
            "RW50cnkSCwoDa2V5GAEgASgJEi4KBXZhbHVlGAIgASgLMh8ucmF3ZGF0YS5D",
            "dXJyZW5jeVBhY2tNYXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5p",
            "by9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.rawdata.CoinTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.CurrencyPack), global::fat.rawdata.CurrencyPack.Parser, new[]{ "Id", "CoinType", "Effect", "Price", "Reward", "RewardAlbum", "TgaName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.CurrencyPackMapABValue), global::fat.rawdata.CurrencyPackMapABValue.Parser, new[]{ "CurrencyPackMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.CurrencyPackConf), global::fat.rawdata.CurrencyPackConf.Parser, new[]{ "CurrencyPackMap", "CurrencyPackMapAB", "CurrencyPackMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="CurrencyPack",table="CurrencyPackMap",table_wrapper="CurrencyPackConf",map="true",map_key_type="int32",data="CurrencyPackConf")
  /// annotation@ab(table_ab="CurrencyPackMapAB",table_ab_patch="CurrencyPackMapABPatch",table_ab_value="CurrencyPackMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@CurrencyPack(id="id")
  /// </summary>
  public sealed partial class CurrencyPack : pb::IMessage<CurrencyPack>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CurrencyPack> _parser = new pb::MessageParser<CurrencyPack>(() => new CurrencyPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencyPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.CurrencyPackConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPack(CurrencyPack other) : this() {
      id_ = other.id_;
      coinType_ = other.coinType_;
      effect_ = other.effect_;
      price_ = other.price_;
      reward_ = other.reward_.Clone();
      rewardAlbum_ = other.rewardAlbum_.Clone();
      tgaName_ = other.tgaName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPack Clone() {
      return new CurrencyPack(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 详情ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "CoinType" field.</summary>
    public const int CoinTypeFieldNumber = 2;
    private global::fat.rawdata.CoinType coinType_ = global::fat.rawdata.CoinType.NoneCoin;
    /// <summary>
    /// 价格类型
    /// IAPCoin
    /// Gem
    /// MergeCoin
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.rawdata.CoinType CoinType {
      get { return coinType_; }
      set {
        coinType_ = value;
      }
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int EffectFieldNumber = 3;
    private int effect_;
    /// <summary>
    /// 换算性价比
    /// （会被价格标签用到）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Effect {
      get { return effect_; }
      set {
        effect_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private int price_;
    /// <summary>
    /// 售价
    /// （价格类型为IAPCoin时IAPPack_id）
    /// （价格类型为Gem时代表花费钻石数量）
    /// （价格类型为MergeCoin时代表花费金币数量）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_reward_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> reward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 商品奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Reward {
      get { return reward_; }
    }

    /// <summary>Field number for the "rewardAlbum" field.</summary>
    public const int RewardAlbumFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_rewardAlbum_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> rewardAlbum_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 集卡期间商品奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RewardAlbum {
      get { return rewardAlbum_; }
    }

    /// <summary>Field number for the "tgaName" field.</summary>
    public const int TgaNameFieldNumber = 7;
    private string tgaName_ = "";
    /// <summary>
    /// TGA打点用内购项名称
    /// （游戏逻辑用不到）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TgaName {
      get { return tgaName_; }
      set {
        tgaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencyPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencyPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CoinType != other.CoinType) return false;
      if (Effect != other.Effect) return false;
      if (Price != other.Price) return false;
      if(!reward_.Equals(other.reward_)) return false;
      if(!rewardAlbum_.Equals(other.rewardAlbum_)) return false;
      if (TgaName != other.TgaName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (CoinType != global::fat.rawdata.CoinType.NoneCoin) hash ^= CoinType.GetHashCode();
      if (Effect != 0) hash ^= Effect.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      hash ^= reward_.GetHashCode();
      hash ^= rewardAlbum_.GetHashCode();
      if (TgaName.Length != 0) hash ^= TgaName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CoinType != global::fat.rawdata.CoinType.NoneCoin) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CoinType);
      }
      if (Effect != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Effect);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      reward_.WriteTo(output, _repeated_reward_codec);
      rewardAlbum_.WriteTo(output, _repeated_rewardAlbum_codec);
      if (TgaName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TgaName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CoinType != global::fat.rawdata.CoinType.NoneCoin) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CoinType);
      }
      if (Effect != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Effect);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      reward_.WriteTo(ref output, _repeated_reward_codec);
      rewardAlbum_.WriteTo(ref output, _repeated_rewardAlbum_codec);
      if (TgaName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TgaName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (CoinType != global::fat.rawdata.CoinType.NoneCoin) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CoinType);
      }
      if (Effect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Effect);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      size += reward_.CalculateSize(_repeated_reward_codec);
      size += rewardAlbum_.CalculateSize(_repeated_rewardAlbum_codec);
      if (TgaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TgaName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrencyPack other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.CoinType != global::fat.rawdata.CoinType.NoneCoin) {
        CoinType = other.CoinType;
      }
      if (other.Effect != 0) {
        Effect = other.Effect;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      reward_.Add(other.reward_);
      rewardAlbum_.Add(other.rewardAlbum_);
      if (other.TgaName.Length != 0) {
        TgaName = other.TgaName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            CoinType = (global::fat.rawdata.CoinType) input.ReadEnum();
            break;
          }
          case 24: {
            Effect = input.ReadInt32();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
          case 42: {
            reward_.AddEntriesFrom(input, _repeated_reward_codec);
            break;
          }
          case 50: {
            rewardAlbum_.AddEntriesFrom(input, _repeated_rewardAlbum_codec);
            break;
          }
          case 58: {
            TgaName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            CoinType = (global::fat.rawdata.CoinType) input.ReadEnum();
            break;
          }
          case 24: {
            Effect = input.ReadInt32();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
          case 42: {
            reward_.AddEntriesFrom(ref input, _repeated_reward_codec);
            break;
          }
          case 50: {
            rewardAlbum_.AddEntriesFrom(ref input, _repeated_rewardAlbum_codec);
            break;
          }
          case 58: {
            TgaName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CurrencyPackMapABValue : pb::IMessage<CurrencyPackMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CurrencyPackMapABValue> _parser = new pb::MessageParser<CurrencyPackMapABValue>(() => new CurrencyPackMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencyPackMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.CurrencyPackConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPackMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPackMapABValue(CurrencyPackMapABValue other) : this() {
      currencyPackMap_ = other.currencyPackMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPackMapABValue Clone() {
      return new CurrencyPackMapABValue(this);
    }

    /// <summary>Field number for the "CurrencyPackMap" field.</summary>
    public const int CurrencyPackMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.CurrencyPack>.Codec _map_currencyPackMap_codec
        = new pbc::MapField<int, global::fat.rawdata.CurrencyPack>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.CurrencyPack.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.CurrencyPack> currencyPackMap_ = new pbc::MapField<int, global::fat.rawdata.CurrencyPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.CurrencyPack> CurrencyPackMap {
      get { return currencyPackMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencyPackMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencyPackMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!CurrencyPackMap.Equals(other.CurrencyPackMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= CurrencyPackMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      currencyPackMap_.WriteTo(output, _map_currencyPackMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      currencyPackMap_.WriteTo(ref output, _map_currencyPackMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += currencyPackMap_.CalculateSize(_map_currencyPackMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrencyPackMapABValue other) {
      if (other == null) {
        return;
      }
      currencyPackMap_.Add(other.currencyPackMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            currencyPackMap_.AddEntriesFrom(input, _map_currencyPackMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            currencyPackMap_.AddEntriesFrom(ref input, _map_currencyPackMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CurrencyPackConf : pb::IMessage<CurrencyPackConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CurrencyPackConf> _parser = new pb::MessageParser<CurrencyPackConf>(() => new CurrencyPackConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencyPackConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.CurrencyPackConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPackConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPackConf(CurrencyPackConf other) : this() {
      currencyPackMap_ = other.currencyPackMap_.Clone();
      currencyPackMapAB_ = other.currencyPackMapAB_.Clone();
      currencyPackMapABPatch_ = other.currencyPackMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPackConf Clone() {
      return new CurrencyPackConf(this);
    }

    /// <summary>Field number for the "CurrencyPackMap" field.</summary>
    public const int CurrencyPackMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.CurrencyPack>.Codec _map_currencyPackMap_codec
        = new pbc::MapField<int, global::fat.rawdata.CurrencyPack>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.CurrencyPack.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.CurrencyPack> currencyPackMap_ = new pbc::MapField<int, global::fat.rawdata.CurrencyPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.CurrencyPack> CurrencyPackMap {
      get { return currencyPackMap_; }
    }

    /// <summary>Field number for the "CurrencyPackMapAB" field.</summary>
    public const int CurrencyPackMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.CurrencyPackMapABValue>.Codec _map_currencyPackMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.CurrencyPackMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.CurrencyPackMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.CurrencyPackMapABValue> currencyPackMapAB_ = new pbc::MapField<string, global::fat.rawdata.CurrencyPackMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.CurrencyPackMapABValue> CurrencyPackMapAB {
      get { return currencyPackMapAB_; }
    }

    /// <summary>Field number for the "CurrencyPackMapABPatch" field.</summary>
    public const int CurrencyPackMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.CurrencyPackMapABValue>.Codec _map_currencyPackMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.CurrencyPackMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.CurrencyPackMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.CurrencyPackMapABValue> currencyPackMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.CurrencyPackMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.CurrencyPackMapABValue> CurrencyPackMapABPatch {
      get { return currencyPackMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencyPackConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencyPackConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!CurrencyPackMap.Equals(other.CurrencyPackMap)) return false;
      if (!CurrencyPackMapAB.Equals(other.CurrencyPackMapAB)) return false;
      if (!CurrencyPackMapABPatch.Equals(other.CurrencyPackMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= CurrencyPackMap.GetHashCode();
      hash ^= CurrencyPackMapAB.GetHashCode();
      hash ^= CurrencyPackMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      currencyPackMap_.WriteTo(output, _map_currencyPackMap_codec);
      currencyPackMapAB_.WriteTo(output, _map_currencyPackMapAB_codec);
      currencyPackMapABPatch_.WriteTo(output, _map_currencyPackMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      currencyPackMap_.WriteTo(ref output, _map_currencyPackMap_codec);
      currencyPackMapAB_.WriteTo(ref output, _map_currencyPackMapAB_codec);
      currencyPackMapABPatch_.WriteTo(ref output, _map_currencyPackMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += currencyPackMap_.CalculateSize(_map_currencyPackMap_codec);
      size += currencyPackMapAB_.CalculateSize(_map_currencyPackMapAB_codec);
      size += currencyPackMapABPatch_.CalculateSize(_map_currencyPackMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrencyPackConf other) {
      if (other == null) {
        return;
      }
      currencyPackMap_.Add(other.currencyPackMap_);
      currencyPackMapAB_.Add(other.currencyPackMapAB_);
      currencyPackMapABPatch_.Add(other.currencyPackMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            currencyPackMap_.AddEntriesFrom(input, _map_currencyPackMap_codec);
            break;
          }
          case 18: {
            currencyPackMapAB_.AddEntriesFrom(input, _map_currencyPackMapAB_codec);
            break;
          }
          case 26: {
            currencyPackMapABPatch_.AddEntriesFrom(input, _map_currencyPackMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            currencyPackMap_.AddEntriesFrom(ref input, _map_currencyPackMap_codec);
            break;
          }
          case 18: {
            currencyPackMapAB_.AddEntriesFrom(ref input, _map_currencyPackMapAB_codec);
            break;
          }
          case 26: {
            currencyPackMapABPatch_.AddEntriesFrom(ref input, _map_currencyPackMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
