// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/MiniGameSlideMergeLevelConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/MiniGameSlideMergeLevelConf.proto</summary>
  public static partial class MiniGameSlideMergeLevelConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/MiniGameSlideMergeLevelConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MiniGameSlideMergeLevelConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CilyYXdkYXRhL01pbmlHYW1lU2xpZGVNZXJnZUxldmVsQ29uZi5wcm90bxIH",
            "cmF3ZGF0YSLUAQoXTWluaUdhbWVTbGlkZU1lcmdlTGV2ZWwSCgoCaWQYASAB",
            "KAUSEAoIYWN0aXZlTHYYAiABKAUSFwoPYXR0cmFjdERpc3RhbmNlGAMgASgF",
            "EhQKDGF0dHJhY3RTcGVlZBgKIAEoBRIQCghmcmljdGlvbhgLIAEoAhITCgty",
            "ZXN0aXR1dGlvbhgFIAEoAhINCgVzcGVlZBgGIAEoBRIPCgdzdGFnZUlkGAcg",
            "ASgFEhIKCnRhcmdldEl0ZW0YCCABKAUSEQoJdGFyZ2V0TnVtGAkgASgFIvgB",
            "CiFNaW5pR2FtZVNsaWRlTWVyZ2VMZXZlbE1hcEFCVmFsdWUSbgoaTWluaUdh",
            "bWVTbGlkZU1lcmdlTGV2ZWxNYXAYASADKAsySi5yYXdkYXRhLk1pbmlHYW1l",
            "U2xpZGVNZXJnZUxldmVsTWFwQUJWYWx1ZS5NaW5pR2FtZVNsaWRlTWVyZ2VM",
            "ZXZlbE1hcEVudHJ5GmMKH01pbmlHYW1lU2xpZGVNZXJnZUxldmVsTWFwRW50",
            "cnkSCwoDa2V5GAEgASgFEi8KBXZhbHVlGAIgASgLMiAucmF3ZGF0YS5NaW5p",
            "R2FtZVNsaWRlTWVyZ2VMZXZlbDoCOAEiuQUKG01pbmlHYW1lU2xpZGVNZXJn",
            "ZUxldmVsQ29uZhJoChpNaW5pR2FtZVNsaWRlTWVyZ2VMZXZlbE1hcBgBIAMo",
            "CzJELnJhd2RhdGEuTWluaUdhbWVTbGlkZU1lcmdlTGV2ZWxDb25mLk1pbmlH",
            "YW1lU2xpZGVNZXJnZUxldmVsTWFwRW50cnkSbAocTWluaUdhbWVTbGlkZU1l",
            "cmdlTGV2ZWxNYXBBQhgCIAMoCzJGLnJhd2RhdGEuTWluaUdhbWVTbGlkZU1l",
            "cmdlTGV2ZWxDb25mLk1pbmlHYW1lU2xpZGVNZXJnZUxldmVsTWFwQUJFbnRy",
            "eRJ2CiFNaW5pR2FtZVNsaWRlTWVyZ2VMZXZlbE1hcEFCUGF0Y2gYAyADKAsy",
            "Sy5yYXdkYXRhLk1pbmlHYW1lU2xpZGVNZXJnZUxldmVsQ29uZi5NaW5pR2Ft",
            "ZVNsaWRlTWVyZ2VMZXZlbE1hcEFCUGF0Y2hFbnRyeRpjCh9NaW5pR2FtZVNs",
            "aWRlTWVyZ2VMZXZlbE1hcEVudHJ5EgsKA2tleRgBIAEoBRIvCgV2YWx1ZRgC",
            "IAEoCzIgLnJhd2RhdGEuTWluaUdhbWVTbGlkZU1lcmdlTGV2ZWw6AjgBGm8K",
            "IU1pbmlHYW1lU2xpZGVNZXJnZUxldmVsTWFwQUJFbnRyeRILCgNrZXkYASAB",
            "KAkSOQoFdmFsdWUYAiABKAsyKi5yYXdkYXRhLk1pbmlHYW1lU2xpZGVNZXJn",
            "ZUxldmVsTWFwQUJWYWx1ZToCOAEadAomTWluaUdhbWVTbGlkZU1lcmdlTGV2",
            "ZWxNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEjkKBXZhbHVlGAIgASgL",
            "MioucmF3ZGF0YS5NaW5pR2FtZVNsaWRlTWVyZ2VMZXZlbE1hcEFCVmFsdWU6",
            "AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcv",
            "cmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MiniGameSlideMergeLevel), global::fat.rawdata.MiniGameSlideMergeLevel.Parser, new[]{ "Id", "ActiveLv", "AttractDistance", "AttractSpeed", "Friction", "Restitution", "Speed", "StageId", "TargetItem", "TargetNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MiniGameSlideMergeLevelMapABValue), global::fat.rawdata.MiniGameSlideMergeLevelMapABValue.Parser, new[]{ "MiniGameSlideMergeLevelMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MiniGameSlideMergeLevelConf), global::fat.rawdata.MiniGameSlideMergeLevelConf.Parser, new[]{ "MiniGameSlideMergeLevelMap", "MiniGameSlideMergeLevelMapAB", "MiniGameSlideMergeLevelMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="MiniGameSlideMergeLevel",table="MiniGameSlideMergeLevelMap",table_wrapper="MiniGameSlideMergeLevelConf",map="true",map_key_type="int32",data="MiniGameSlideMergeLevelConf")
  /// annotation@ab(table_ab="MiniGameSlideMergeLevelMapAB",table_ab_patch="MiniGameSlideMergeLevelMapABPatch",table_ab_value="MiniGameSlideMergeLevelMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@MiniGameSlideMergeLevel(id="id")
  /// </summary>
  public sealed partial class MiniGameSlideMergeLevel : pb::IMessage<MiniGameSlideMergeLevel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameSlideMergeLevel> _parser = new pb::MessageParser<MiniGameSlideMergeLevel>(() => new MiniGameSlideMergeLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameSlideMergeLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MiniGameSlideMergeLevelConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeLevel(MiniGameSlideMergeLevel other) : this() {
      id_ = other.id_;
      activeLv_ = other.activeLv_;
      attractDistance_ = other.attractDistance_;
      attractSpeed_ = other.attractSpeed_;
      friction_ = other.friction_;
      restitution_ = other.restitution_;
      speed_ = other.speed_;
      stageId_ = other.stageId_;
      targetItem_ = other.targetItem_;
      targetNum_ = other.targetNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeLevel Clone() {
      return new MiniGameSlideMergeLevel(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 小游戏
    /// 关卡ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "activeLv" field.</summary>
    public const int ActiveLvFieldNumber = 2;
    private int activeLv_;
    /// <summary>
    /// 解锁需要的
    /// 玩家等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveLv {
      get { return activeLv_; }
      set {
        activeLv_ = value;
      }
    }

    /// <summary>Field number for the "attractDistance" field.</summary>
    public const int AttractDistanceFieldNumber = 3;
    private int attractDistance_;
    /// <summary>
    /// 吸附距离
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttractDistance {
      get { return attractDistance_; }
      set {
        attractDistance_ = value;
      }
    }

    /// <summary>Field number for the "attractSpeed" field.</summary>
    public const int AttractSpeedFieldNumber = 10;
    private int attractSpeed_;
    /// <summary>
    /// 吸附速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttractSpeed {
      get { return attractSpeed_; }
      set {
        attractSpeed_ = value;
      }
    }

    /// <summary>Field number for the "friction" field.</summary>
    public const int FrictionFieldNumber = 11;
    private float friction_;
    /// <summary>
    /// 摩擦力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Friction {
      get { return friction_; }
      set {
        friction_ = value;
      }
    }

    /// <summary>Field number for the "restitution" field.</summary>
    public const int RestitutionFieldNumber = 5;
    private float restitution_;
    /// <summary>
    /// 弹性碰撞系数（恢复系数）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Restitution {
      get { return restitution_; }
      set {
        restitution_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 6;
    private int speed_;
    /// <summary>
    /// 发射初速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 7;
    private int stageId_;
    /// <summary>
    /// 关卡stage
    /// MiniGameSlideMergeStage.id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    /// <summary>Field number for the "targetItem" field.</summary>
    public const int TargetItemFieldNumber = 8;
    private int targetItem_;
    /// <summary>
    /// 目标棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetItem {
      get { return targetItem_; }
      set {
        targetItem_ = value;
      }
    }

    /// <summary>Field number for the "targetNum" field.</summary>
    public const int TargetNumFieldNumber = 9;
    private int targetNum_;
    /// <summary>
    /// 目标数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetNum {
      get { return targetNum_; }
      set {
        targetNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameSlideMergeLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameSlideMergeLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ActiveLv != other.ActiveLv) return false;
      if (AttractDistance != other.AttractDistance) return false;
      if (AttractSpeed != other.AttractSpeed) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Friction, other.Friction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Restitution, other.Restitution)) return false;
      if (Speed != other.Speed) return false;
      if (StageId != other.StageId) return false;
      if (TargetItem != other.TargetItem) return false;
      if (TargetNum != other.TargetNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ActiveLv != 0) hash ^= ActiveLv.GetHashCode();
      if (AttractDistance != 0) hash ^= AttractDistance.GetHashCode();
      if (AttractSpeed != 0) hash ^= AttractSpeed.GetHashCode();
      if (Friction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Friction);
      if (Restitution != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Restitution);
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (StageId != 0) hash ^= StageId.GetHashCode();
      if (TargetItem != 0) hash ^= TargetItem.GetHashCode();
      if (TargetNum != 0) hash ^= TargetNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ActiveLv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActiveLv);
      }
      if (AttractDistance != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AttractDistance);
      }
      if (Restitution != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Restitution);
      }
      if (Speed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Speed);
      }
      if (StageId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StageId);
      }
      if (TargetItem != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TargetItem);
      }
      if (TargetNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TargetNum);
      }
      if (AttractSpeed != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AttractSpeed);
      }
      if (Friction != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Friction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ActiveLv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActiveLv);
      }
      if (AttractDistance != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AttractDistance);
      }
      if (Restitution != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Restitution);
      }
      if (Speed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Speed);
      }
      if (StageId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StageId);
      }
      if (TargetItem != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TargetItem);
      }
      if (TargetNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TargetNum);
      }
      if (AttractSpeed != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AttractSpeed);
      }
      if (Friction != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Friction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ActiveLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveLv);
      }
      if (AttractDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttractDistance);
      }
      if (AttractSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttractSpeed);
      }
      if (Friction != 0F) {
        size += 1 + 4;
      }
      if (Restitution != 0F) {
        size += 1 + 4;
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageId);
      }
      if (TargetItem != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetItem);
      }
      if (TargetNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameSlideMergeLevel other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ActiveLv != 0) {
        ActiveLv = other.ActiveLv;
      }
      if (other.AttractDistance != 0) {
        AttractDistance = other.AttractDistance;
      }
      if (other.AttractSpeed != 0) {
        AttractSpeed = other.AttractSpeed;
      }
      if (other.Friction != 0F) {
        Friction = other.Friction;
      }
      if (other.Restitution != 0F) {
        Restitution = other.Restitution;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.StageId != 0) {
        StageId = other.StageId;
      }
      if (other.TargetItem != 0) {
        TargetItem = other.TargetItem;
      }
      if (other.TargetNum != 0) {
        TargetNum = other.TargetNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ActiveLv = input.ReadInt32();
            break;
          }
          case 24: {
            AttractDistance = input.ReadInt32();
            break;
          }
          case 45: {
            Restitution = input.ReadFloat();
            break;
          }
          case 48: {
            Speed = input.ReadInt32();
            break;
          }
          case 56: {
            StageId = input.ReadInt32();
            break;
          }
          case 64: {
            TargetItem = input.ReadInt32();
            break;
          }
          case 72: {
            TargetNum = input.ReadInt32();
            break;
          }
          case 80: {
            AttractSpeed = input.ReadInt32();
            break;
          }
          case 93: {
            Friction = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ActiveLv = input.ReadInt32();
            break;
          }
          case 24: {
            AttractDistance = input.ReadInt32();
            break;
          }
          case 45: {
            Restitution = input.ReadFloat();
            break;
          }
          case 48: {
            Speed = input.ReadInt32();
            break;
          }
          case 56: {
            StageId = input.ReadInt32();
            break;
          }
          case 64: {
            TargetItem = input.ReadInt32();
            break;
          }
          case 72: {
            TargetNum = input.ReadInt32();
            break;
          }
          case 80: {
            AttractSpeed = input.ReadInt32();
            break;
          }
          case 93: {
            Friction = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MiniGameSlideMergeLevelMapABValue : pb::IMessage<MiniGameSlideMergeLevelMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameSlideMergeLevelMapABValue> _parser = new pb::MessageParser<MiniGameSlideMergeLevelMapABValue>(() => new MiniGameSlideMergeLevelMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameSlideMergeLevelMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MiniGameSlideMergeLevelConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeLevelMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeLevelMapABValue(MiniGameSlideMergeLevelMapABValue other) : this() {
      miniGameSlideMergeLevelMap_ = other.miniGameSlideMergeLevelMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeLevelMapABValue Clone() {
      return new MiniGameSlideMergeLevelMapABValue(this);
    }

    /// <summary>Field number for the "MiniGameSlideMergeLevelMap" field.</summary>
    public const int MiniGameSlideMergeLevelMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeLevel>.Codec _map_miniGameSlideMergeLevelMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeLevel>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSlideMergeLevel.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeLevel> miniGameSlideMergeLevelMap_ = new pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeLevel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeLevel> MiniGameSlideMergeLevelMap {
      get { return miniGameSlideMergeLevelMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameSlideMergeLevelMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameSlideMergeLevelMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MiniGameSlideMergeLevelMap.Equals(other.MiniGameSlideMergeLevelMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MiniGameSlideMergeLevelMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      miniGameSlideMergeLevelMap_.WriteTo(output, _map_miniGameSlideMergeLevelMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      miniGameSlideMergeLevelMap_.WriteTo(ref output, _map_miniGameSlideMergeLevelMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += miniGameSlideMergeLevelMap_.CalculateSize(_map_miniGameSlideMergeLevelMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameSlideMergeLevelMapABValue other) {
      if (other == null) {
        return;
      }
      miniGameSlideMergeLevelMap_.Add(other.miniGameSlideMergeLevelMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            miniGameSlideMergeLevelMap_.AddEntriesFrom(input, _map_miniGameSlideMergeLevelMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            miniGameSlideMergeLevelMap_.AddEntriesFrom(ref input, _map_miniGameSlideMergeLevelMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MiniGameSlideMergeLevelConf : pb::IMessage<MiniGameSlideMergeLevelConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameSlideMergeLevelConf> _parser = new pb::MessageParser<MiniGameSlideMergeLevelConf>(() => new MiniGameSlideMergeLevelConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameSlideMergeLevelConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MiniGameSlideMergeLevelConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeLevelConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeLevelConf(MiniGameSlideMergeLevelConf other) : this() {
      miniGameSlideMergeLevelMap_ = other.miniGameSlideMergeLevelMap_.Clone();
      miniGameSlideMergeLevelMapAB_ = other.miniGameSlideMergeLevelMapAB_.Clone();
      miniGameSlideMergeLevelMapABPatch_ = other.miniGameSlideMergeLevelMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeLevelConf Clone() {
      return new MiniGameSlideMergeLevelConf(this);
    }

    /// <summary>Field number for the "MiniGameSlideMergeLevelMap" field.</summary>
    public const int MiniGameSlideMergeLevelMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeLevel>.Codec _map_miniGameSlideMergeLevelMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeLevel>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSlideMergeLevel.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeLevel> miniGameSlideMergeLevelMap_ = new pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeLevel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeLevel> MiniGameSlideMergeLevelMap {
      get { return miniGameSlideMergeLevelMap_; }
    }

    /// <summary>Field number for the "MiniGameSlideMergeLevelMapAB" field.</summary>
    public const int MiniGameSlideMergeLevelMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeLevelMapABValue>.Codec _map_miniGameSlideMergeLevelMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeLevelMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSlideMergeLevelMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeLevelMapABValue> miniGameSlideMergeLevelMapAB_ = new pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeLevelMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeLevelMapABValue> MiniGameSlideMergeLevelMapAB {
      get { return miniGameSlideMergeLevelMapAB_; }
    }

    /// <summary>Field number for the "MiniGameSlideMergeLevelMapABPatch" field.</summary>
    public const int MiniGameSlideMergeLevelMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeLevelMapABValue>.Codec _map_miniGameSlideMergeLevelMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeLevelMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSlideMergeLevelMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeLevelMapABValue> miniGameSlideMergeLevelMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeLevelMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeLevelMapABValue> MiniGameSlideMergeLevelMapABPatch {
      get { return miniGameSlideMergeLevelMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameSlideMergeLevelConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameSlideMergeLevelConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MiniGameSlideMergeLevelMap.Equals(other.MiniGameSlideMergeLevelMap)) return false;
      if (!MiniGameSlideMergeLevelMapAB.Equals(other.MiniGameSlideMergeLevelMapAB)) return false;
      if (!MiniGameSlideMergeLevelMapABPatch.Equals(other.MiniGameSlideMergeLevelMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MiniGameSlideMergeLevelMap.GetHashCode();
      hash ^= MiniGameSlideMergeLevelMapAB.GetHashCode();
      hash ^= MiniGameSlideMergeLevelMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      miniGameSlideMergeLevelMap_.WriteTo(output, _map_miniGameSlideMergeLevelMap_codec);
      miniGameSlideMergeLevelMapAB_.WriteTo(output, _map_miniGameSlideMergeLevelMapAB_codec);
      miniGameSlideMergeLevelMapABPatch_.WriteTo(output, _map_miniGameSlideMergeLevelMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      miniGameSlideMergeLevelMap_.WriteTo(ref output, _map_miniGameSlideMergeLevelMap_codec);
      miniGameSlideMergeLevelMapAB_.WriteTo(ref output, _map_miniGameSlideMergeLevelMapAB_codec);
      miniGameSlideMergeLevelMapABPatch_.WriteTo(ref output, _map_miniGameSlideMergeLevelMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += miniGameSlideMergeLevelMap_.CalculateSize(_map_miniGameSlideMergeLevelMap_codec);
      size += miniGameSlideMergeLevelMapAB_.CalculateSize(_map_miniGameSlideMergeLevelMapAB_codec);
      size += miniGameSlideMergeLevelMapABPatch_.CalculateSize(_map_miniGameSlideMergeLevelMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameSlideMergeLevelConf other) {
      if (other == null) {
        return;
      }
      miniGameSlideMergeLevelMap_.Add(other.miniGameSlideMergeLevelMap_);
      miniGameSlideMergeLevelMapAB_.Add(other.miniGameSlideMergeLevelMapAB_);
      miniGameSlideMergeLevelMapABPatch_.Add(other.miniGameSlideMergeLevelMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            miniGameSlideMergeLevelMap_.AddEntriesFrom(input, _map_miniGameSlideMergeLevelMap_codec);
            break;
          }
          case 18: {
            miniGameSlideMergeLevelMapAB_.AddEntriesFrom(input, _map_miniGameSlideMergeLevelMapAB_codec);
            break;
          }
          case 26: {
            miniGameSlideMergeLevelMapABPatch_.AddEntriesFrom(input, _map_miniGameSlideMergeLevelMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            miniGameSlideMergeLevelMap_.AddEntriesFrom(ref input, _map_miniGameSlideMergeLevelMap_codec);
            break;
          }
          case 18: {
            miniGameSlideMergeLevelMapAB_.AddEntriesFrom(ref input, _map_miniGameSlideMergeLevelMapAB_codec);
            break;
          }
          case 26: {
            miniGameSlideMergeLevelMapABPatch_.AddEntriesFrom(ref input, _map_miniGameSlideMergeLevelMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
