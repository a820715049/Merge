// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/GemEndlessThreeConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/GemEndlessThreeConf.proto</summary>
  public static partial class GemEndlessThreeConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/GemEndlessThreeConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GemEndlessThreeConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFyYXdkYXRhL0dlbUVuZGxlc3NUaHJlZUNvbmYucHJvdG8SB3Jhd2RhdGEi",
            "bQoPR2VtRW5kbGVzc1RocmVlEgoKAmlkGAEgASgFEhAKCGN5Y2xlTnVtGAIg",
            "ASgFEhAKCGRldGFpbGlkGAMgAygFEhIKCmV2ZW50VGhlbWUYBCABKAUSFgoO",
            "c3RhcnRMb29wUGtnSWQYBSABKAUiyAEKGUdlbUVuZGxlc3NUaHJlZU1hcEFC",
            "VmFsdWUSVgoSR2VtRW5kbGVzc1RocmVlTWFwGAEgAygLMjoucmF3ZGF0YS5H",
            "ZW1FbmRsZXNzVGhyZWVNYXBBQlZhbHVlLkdlbUVuZGxlc3NUaHJlZU1hcEVu",
            "dHJ5GlMKF0dlbUVuZGxlc3NUaHJlZU1hcEVudHJ5EgsKA2tleRgBIAEoBRIn",
            "CgV2YWx1ZRgCIAEoCzIYLnJhd2RhdGEuR2VtRW5kbGVzc1RocmVlOgI4ASK5",
            "BAoTR2VtRW5kbGVzc1RocmVlQ29uZhJQChJHZW1FbmRsZXNzVGhyZWVNYXAY",
            "ASADKAsyNC5yYXdkYXRhLkdlbUVuZGxlc3NUaHJlZUNvbmYuR2VtRW5kbGVz",
            "c1RocmVlTWFwRW50cnkSVAoUR2VtRW5kbGVzc1RocmVlTWFwQUIYAiADKAsy",
            "Ni5yYXdkYXRhLkdlbUVuZGxlc3NUaHJlZUNvbmYuR2VtRW5kbGVzc1RocmVl",
            "TWFwQUJFbnRyeRJeChlHZW1FbmRsZXNzVGhyZWVNYXBBQlBhdGNoGAMgAygL",
            "MjsucmF3ZGF0YS5HZW1FbmRsZXNzVGhyZWVDb25mLkdlbUVuZGxlc3NUaHJl",
            "ZU1hcEFCUGF0Y2hFbnRyeRpTChdHZW1FbmRsZXNzVGhyZWVNYXBFbnRyeRIL",
            "CgNrZXkYASABKAUSJwoFdmFsdWUYAiABKAsyGC5yYXdkYXRhLkdlbUVuZGxl",
            "c3NUaHJlZToCOAEaXwoZR2VtRW5kbGVzc1RocmVlTWFwQUJFbnRyeRILCgNr",
            "ZXkYASABKAkSMQoFdmFsdWUYAiABKAsyIi5yYXdkYXRhLkdlbUVuZGxlc3NU",
            "aHJlZU1hcEFCVmFsdWU6AjgBGmQKHkdlbUVuZGxlc3NUaHJlZU1hcEFCUGF0",
            "Y2hFbnRyeRILCgNrZXkYASABKAkSMQoFdmFsdWUYAiABKAsyIi5yYXdkYXRh",
            "LkdlbUVuZGxlc3NUaHJlZU1hcEFCVmFsdWU6AjgBQj1aLWdpdGxhYi5mdW5w",
            "bHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3ZGF0YaoCC2ZhdC5yYXdk",
            "YXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.GemEndlessThree), global::fat.rawdata.GemEndlessThree.Parser, new[]{ "Id", "CycleNum", "Detailid", "EventTheme", "StartLoopPkgId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.GemEndlessThreeMapABValue), global::fat.rawdata.GemEndlessThreeMapABValue.Parser, new[]{ "GemEndlessThreeMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.GemEndlessThreeConf), global::fat.rawdata.GemEndlessThreeConf.Parser, new[]{ "GemEndlessThreeMap", "GemEndlessThreeMapAB", "GemEndlessThreeMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="GemEndlessThree",table="GemEndlessThreeMap",table_wrapper="GemEndlessThreeConf",map="true",map_key_type="int32",data="GemEndlessThreeConf")
  /// annotation@ab(table_ab="GemEndlessThreeMapAB",table_ab_patch="GemEndlessThreeMapABPatch",table_ab_value="GemEndlessThreeMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@GemEndlessThree(id="id")
  /// </summary>
  public sealed partial class GemEndlessThree : pb::IMessage<GemEndlessThree>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GemEndlessThree> _parser = new pb::MessageParser<GemEndlessThree>(() => new GemEndlessThree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GemEndlessThree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.GemEndlessThreeConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemEndlessThree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemEndlessThree(GemEndlessThree other) : this() {
      id_ = other.id_;
      cycleNum_ = other.cycleNum_;
      detailid_ = other.detailid_.Clone();
      eventTheme_ = other.eventTheme_;
      startLoopPkgId_ = other.startLoopPkgId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemEndlessThree Clone() {
      return new GemEndlessThree(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 模板ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cycleNum" field.</summary>
    public const int CycleNumFieldNumber = 2;
    private int cycleNum_;
    /// <summary>
    /// 循环次数=目标循环-1
    /// 配-1的时候认为是无限循环
    /// 不配(程序认为是配0)的时候 是只有一轮
    /// 配N, N大于0时 是有1+N轮
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CycleNum {
      get { return cycleNum_; }
      set {
        cycleNum_ = value;
      }
    }

    /// <summary>Field number for the "detailid" field.</summary>
    public const int DetailidFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_detailid_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> detailid_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 礼包详情id(填写顺序决定出现顺序)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Detailid {
      get { return detailid_; }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 4;
    private int eventTheme_;
    /// <summary>
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "startLoopPkgId" field.</summary>
    public const int StartLoopPkgIdFieldNumber = 5;
    private int startLoopPkgId_;
    /// <summary>
    /// 从哪个礼包开始循环
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartLoopPkgId {
      get { return startLoopPkgId_; }
      set {
        startLoopPkgId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GemEndlessThree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GemEndlessThree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CycleNum != other.CycleNum) return false;
      if(!detailid_.Equals(other.detailid_)) return false;
      if (EventTheme != other.EventTheme) return false;
      if (StartLoopPkgId != other.StartLoopPkgId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (CycleNum != 0) hash ^= CycleNum.GetHashCode();
      hash ^= detailid_.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (StartLoopPkgId != 0) hash ^= StartLoopPkgId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CycleNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CycleNum);
      }
      detailid_.WriteTo(output, _repeated_detailid_codec);
      if (EventTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventTheme);
      }
      if (StartLoopPkgId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(StartLoopPkgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CycleNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CycleNum);
      }
      detailid_.WriteTo(ref output, _repeated_detailid_codec);
      if (EventTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventTheme);
      }
      if (StartLoopPkgId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(StartLoopPkgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (CycleNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CycleNum);
      }
      size += detailid_.CalculateSize(_repeated_detailid_codec);
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (StartLoopPkgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartLoopPkgId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GemEndlessThree other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.CycleNum != 0) {
        CycleNum = other.CycleNum;
      }
      detailid_.Add(other.detailid_);
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.StartLoopPkgId != 0) {
        StartLoopPkgId = other.StartLoopPkgId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            CycleNum = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            detailid_.AddEntriesFrom(input, _repeated_detailid_codec);
            break;
          }
          case 32: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 40: {
            StartLoopPkgId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            CycleNum = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            detailid_.AddEntriesFrom(ref input, _repeated_detailid_codec);
            break;
          }
          case 32: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 40: {
            StartLoopPkgId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GemEndlessThreeMapABValue : pb::IMessage<GemEndlessThreeMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GemEndlessThreeMapABValue> _parser = new pb::MessageParser<GemEndlessThreeMapABValue>(() => new GemEndlessThreeMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GemEndlessThreeMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.GemEndlessThreeConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemEndlessThreeMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemEndlessThreeMapABValue(GemEndlessThreeMapABValue other) : this() {
      gemEndlessThreeMap_ = other.gemEndlessThreeMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemEndlessThreeMapABValue Clone() {
      return new GemEndlessThreeMapABValue(this);
    }

    /// <summary>Field number for the "GemEndlessThreeMap" field.</summary>
    public const int GemEndlessThreeMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.GemEndlessThree>.Codec _map_gemEndlessThreeMap_codec
        = new pbc::MapField<int, global::fat.rawdata.GemEndlessThree>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.GemEndlessThree.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.GemEndlessThree> gemEndlessThreeMap_ = new pbc::MapField<int, global::fat.rawdata.GemEndlessThree>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.GemEndlessThree> GemEndlessThreeMap {
      get { return gemEndlessThreeMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GemEndlessThreeMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GemEndlessThreeMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!GemEndlessThreeMap.Equals(other.GemEndlessThreeMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= GemEndlessThreeMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gemEndlessThreeMap_.WriteTo(output, _map_gemEndlessThreeMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gemEndlessThreeMap_.WriteTo(ref output, _map_gemEndlessThreeMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gemEndlessThreeMap_.CalculateSize(_map_gemEndlessThreeMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GemEndlessThreeMapABValue other) {
      if (other == null) {
        return;
      }
      gemEndlessThreeMap_.Add(other.gemEndlessThreeMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gemEndlessThreeMap_.AddEntriesFrom(input, _map_gemEndlessThreeMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gemEndlessThreeMap_.AddEntriesFrom(ref input, _map_gemEndlessThreeMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GemEndlessThreeConf : pb::IMessage<GemEndlessThreeConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GemEndlessThreeConf> _parser = new pb::MessageParser<GemEndlessThreeConf>(() => new GemEndlessThreeConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GemEndlessThreeConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.GemEndlessThreeConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemEndlessThreeConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemEndlessThreeConf(GemEndlessThreeConf other) : this() {
      gemEndlessThreeMap_ = other.gemEndlessThreeMap_.Clone();
      gemEndlessThreeMapAB_ = other.gemEndlessThreeMapAB_.Clone();
      gemEndlessThreeMapABPatch_ = other.gemEndlessThreeMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemEndlessThreeConf Clone() {
      return new GemEndlessThreeConf(this);
    }

    /// <summary>Field number for the "GemEndlessThreeMap" field.</summary>
    public const int GemEndlessThreeMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.GemEndlessThree>.Codec _map_gemEndlessThreeMap_codec
        = new pbc::MapField<int, global::fat.rawdata.GemEndlessThree>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.GemEndlessThree.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.GemEndlessThree> gemEndlessThreeMap_ = new pbc::MapField<int, global::fat.rawdata.GemEndlessThree>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.GemEndlessThree> GemEndlessThreeMap {
      get { return gemEndlessThreeMap_; }
    }

    /// <summary>Field number for the "GemEndlessThreeMapAB" field.</summary>
    public const int GemEndlessThreeMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.GemEndlessThreeMapABValue>.Codec _map_gemEndlessThreeMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.GemEndlessThreeMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.GemEndlessThreeMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.GemEndlessThreeMapABValue> gemEndlessThreeMapAB_ = new pbc::MapField<string, global::fat.rawdata.GemEndlessThreeMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.GemEndlessThreeMapABValue> GemEndlessThreeMapAB {
      get { return gemEndlessThreeMapAB_; }
    }

    /// <summary>Field number for the "GemEndlessThreeMapABPatch" field.</summary>
    public const int GemEndlessThreeMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.GemEndlessThreeMapABValue>.Codec _map_gemEndlessThreeMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.GemEndlessThreeMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.GemEndlessThreeMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.GemEndlessThreeMapABValue> gemEndlessThreeMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.GemEndlessThreeMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.GemEndlessThreeMapABValue> GemEndlessThreeMapABPatch {
      get { return gemEndlessThreeMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GemEndlessThreeConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GemEndlessThreeConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!GemEndlessThreeMap.Equals(other.GemEndlessThreeMap)) return false;
      if (!GemEndlessThreeMapAB.Equals(other.GemEndlessThreeMapAB)) return false;
      if (!GemEndlessThreeMapABPatch.Equals(other.GemEndlessThreeMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= GemEndlessThreeMap.GetHashCode();
      hash ^= GemEndlessThreeMapAB.GetHashCode();
      hash ^= GemEndlessThreeMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gemEndlessThreeMap_.WriteTo(output, _map_gemEndlessThreeMap_codec);
      gemEndlessThreeMapAB_.WriteTo(output, _map_gemEndlessThreeMapAB_codec);
      gemEndlessThreeMapABPatch_.WriteTo(output, _map_gemEndlessThreeMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gemEndlessThreeMap_.WriteTo(ref output, _map_gemEndlessThreeMap_codec);
      gemEndlessThreeMapAB_.WriteTo(ref output, _map_gemEndlessThreeMapAB_codec);
      gemEndlessThreeMapABPatch_.WriteTo(ref output, _map_gemEndlessThreeMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gemEndlessThreeMap_.CalculateSize(_map_gemEndlessThreeMap_codec);
      size += gemEndlessThreeMapAB_.CalculateSize(_map_gemEndlessThreeMapAB_codec);
      size += gemEndlessThreeMapABPatch_.CalculateSize(_map_gemEndlessThreeMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GemEndlessThreeConf other) {
      if (other == null) {
        return;
      }
      gemEndlessThreeMap_.Add(other.gemEndlessThreeMap_);
      gemEndlessThreeMapAB_.Add(other.gemEndlessThreeMapAB_);
      gemEndlessThreeMapABPatch_.Add(other.gemEndlessThreeMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gemEndlessThreeMap_.AddEntriesFrom(input, _map_gemEndlessThreeMap_codec);
            break;
          }
          case 18: {
            gemEndlessThreeMapAB_.AddEntriesFrom(input, _map_gemEndlessThreeMapAB_codec);
            break;
          }
          case 26: {
            gemEndlessThreeMapABPatch_.AddEntriesFrom(input, _map_gemEndlessThreeMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gemEndlessThreeMap_.AddEntriesFrom(ref input, _map_gemEndlessThreeMap_codec);
            break;
          }
          case 18: {
            gemEndlessThreeMapAB_.AddEntriesFrom(ref input, _map_gemEndlessThreeMapAB_codec);
            break;
          }
          case 26: {
            gemEndlessThreeMapABPatch_.AddEntriesFrom(ref input, _map_gemEndlessThreeMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
