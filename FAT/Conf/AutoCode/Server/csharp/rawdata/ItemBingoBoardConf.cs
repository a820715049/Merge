// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/ItemBingoBoardConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/ItemBingoBoardConf.proto</summary>
  public static partial class ItemBingoBoardConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/ItemBingoBoardConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ItemBingoBoardConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiByYXdkYXRhL0l0ZW1CaW5nb0JvYXJkQ29uZi5wcm90bxIHcmF3ZGF0YSKw",
            "AQoOSXRlbUJpbmdvQm9hcmQSCgoCaWQYASABKAUSEAoISXRlbUluZm8YAiAD",
            "KAkSEwoLYm9hcmRDb2xOdW0YCSABKAUSEwoLYm9hcmRSb3dOdW0YBCABKAUS",
            "FgoOY29ubmVjdFNwYXduZXIYBSADKAUSEQoJcmV3YXJkQWxsGAYgAygJEhMK",
            "C3Jld2FyZFNsYXNoGAcgAygJEhYKDnJld2FyZFN0cmFpZ2h0GAogAygJIsIB",
            "ChhJdGVtQmluZ29Cb2FyZE1hcEFCVmFsdWUSUwoRSXRlbUJpbmdvQm9hcmRN",
            "YXAYASADKAsyOC5yYXdkYXRhLkl0ZW1CaW5nb0JvYXJkTWFwQUJWYWx1ZS5J",
            "dGVtQmluZ29Cb2FyZE1hcEVudHJ5GlEKFkl0ZW1CaW5nb0JvYXJkTWFwRW50",
            "cnkSCwoDa2V5GAEgASgFEiYKBXZhbHVlGAIgASgLMhcucmF3ZGF0YS5JdGVt",
            "QmluZ29Cb2FyZDoCOAEiqQQKEkl0ZW1CaW5nb0JvYXJkQ29uZhJNChFJdGVt",
            "QmluZ29Cb2FyZE1hcBgBIAMoCzIyLnJhd2RhdGEuSXRlbUJpbmdvQm9hcmRD",
            "b25mLkl0ZW1CaW5nb0JvYXJkTWFwRW50cnkSUQoTSXRlbUJpbmdvQm9hcmRN",
            "YXBBQhgCIAMoCzI0LnJhd2RhdGEuSXRlbUJpbmdvQm9hcmRDb25mLkl0ZW1C",
            "aW5nb0JvYXJkTWFwQUJFbnRyeRJbChhJdGVtQmluZ29Cb2FyZE1hcEFCUGF0",
            "Y2gYAyADKAsyOS5yYXdkYXRhLkl0ZW1CaW5nb0JvYXJkQ29uZi5JdGVtQmlu",
            "Z29Cb2FyZE1hcEFCUGF0Y2hFbnRyeRpRChZJdGVtQmluZ29Cb2FyZE1hcEVu",
            "dHJ5EgsKA2tleRgBIAEoBRImCgV2YWx1ZRgCIAEoCzIXLnJhd2RhdGEuSXRl",
            "bUJpbmdvQm9hcmQ6AjgBGl0KGEl0ZW1CaW5nb0JvYXJkTWFwQUJFbnRyeRIL",
            "CgNrZXkYASABKAkSMAoFdmFsdWUYAiABKAsyIS5yYXdkYXRhLkl0ZW1CaW5n",
            "b0JvYXJkTWFwQUJWYWx1ZToCOAEaYgodSXRlbUJpbmdvQm9hcmRNYXBBQlBh",
            "dGNoRW50cnkSCwoDa2V5GAEgASgJEjAKBXZhbHVlGAIgASgLMiEucmF3ZGF0",
            "YS5JdGVtQmluZ29Cb2FyZE1hcEFCVmFsdWU6AjgBQj1aLWdpdGxhYi5mdW5w",
            "bHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3ZGF0YaoCC2ZhdC5yYXdk",
            "YXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ItemBingoBoard), global::fat.rawdata.ItemBingoBoard.Parser, new[]{ "Id", "ItemInfo", "BoardColNum", "BoardRowNum", "ConnectSpawner", "RewardAll", "RewardSlash", "RewardStraight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ItemBingoBoardMapABValue), global::fat.rawdata.ItemBingoBoardMapABValue.Parser, new[]{ "ItemBingoBoardMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ItemBingoBoardConf), global::fat.rawdata.ItemBingoBoardConf.Parser, new[]{ "ItemBingoBoardMap", "ItemBingoBoardMapAB", "ItemBingoBoardMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="ItemBingoBoard",table="ItemBingoBoardMap",table_wrapper="ItemBingoBoardConf",map="true",map_key_type="int32",data="ItemBingoBoardConf")
  /// annotation@ab(table_ab="ItemBingoBoardMapAB",table_ab_patch="ItemBingoBoardMapABPatch",table_ab_value="ItemBingoBoardMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@ItemBingoBoard(id="id")
  /// </summary>
  public sealed partial class ItemBingoBoard : pb::IMessage<ItemBingoBoard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ItemBingoBoard> _parser = new pb::MessageParser<ItemBingoBoard>(() => new ItemBingoBoard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemBingoBoard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ItemBingoBoardConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemBingoBoard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemBingoBoard(ItemBingoBoard other) : this() {
      id_ = other.id_;
      itemInfo_ = other.itemInfo_.Clone();
      boardColNum_ = other.boardColNum_;
      boardRowNum_ = other.boardRowNum_;
      connectSpawner_ = other.connectSpawner_.Clone();
      rewardAll_ = other.rewardAll_.Clone();
      rewardSlash_ = other.rewardSlash_.Clone();
      rewardStraight_ = other.rewardStraight_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemBingoBoard Clone() {
      return new ItemBingoBoard(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 棋盘关卡id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ItemInfo" field.</summary>
    public const int ItemInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_itemInfo_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> itemInfo_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 棋子ID分布
    /// 横坐标:纵坐标:棋子ID:奖励ID:奖励数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ItemInfo {
      get { return itemInfo_; }
    }

    /// <summary>Field number for the "boardColNum" field.</summary>
    public const int BoardColNumFieldNumber = 9;
    private int boardColNum_;
    /// <summary>
    /// 棋盘关卡列数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardColNum {
      get { return boardColNum_; }
      set {
        boardColNum_ = value;
      }
    }

    /// <summary>Field number for the "boardRowNum" field.</summary>
    public const int BoardRowNumFieldNumber = 4;
    private int boardRowNum_;
    /// <summary>
    /// 棋盘关卡行数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardRowNum {
      get { return boardRowNum_; }
      set {
        boardRowNum_ = value;
      }
    }

    /// <summary>Field number for the "connectSpawner" field.</summary>
    public const int ConnectSpawnerFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_connectSpawner_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> connectSpawner_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 关联的生成器链条ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ConnectSpawner {
      get { return connectSpawner_; }
    }

    /// <summary>Field number for the "rewardAll" field.</summary>
    public const int RewardAllFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_rewardAll_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> rewardAll_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// bingo全棋盘奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RewardAll {
      get { return rewardAll_; }
    }

    /// <summary>Field number for the "rewardSlash" field.</summary>
    public const int RewardSlashFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_rewardSlash_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> rewardSlash_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// bingo对角线奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RewardSlash {
      get { return rewardSlash_; }
    }

    /// <summary>Field number for the "rewardStraight" field.</summary>
    public const int RewardStraightFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_rewardStraight_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> rewardStraight_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// bingo直线奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RewardStraight {
      get { return rewardStraight_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemBingoBoard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemBingoBoard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!itemInfo_.Equals(other.itemInfo_)) return false;
      if (BoardColNum != other.BoardColNum) return false;
      if (BoardRowNum != other.BoardRowNum) return false;
      if(!connectSpawner_.Equals(other.connectSpawner_)) return false;
      if(!rewardAll_.Equals(other.rewardAll_)) return false;
      if(!rewardSlash_.Equals(other.rewardSlash_)) return false;
      if(!rewardStraight_.Equals(other.rewardStraight_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= itemInfo_.GetHashCode();
      if (BoardColNum != 0) hash ^= BoardColNum.GetHashCode();
      if (BoardRowNum != 0) hash ^= BoardRowNum.GetHashCode();
      hash ^= connectSpawner_.GetHashCode();
      hash ^= rewardAll_.GetHashCode();
      hash ^= rewardSlash_.GetHashCode();
      hash ^= rewardStraight_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      itemInfo_.WriteTo(output, _repeated_itemInfo_codec);
      if (BoardRowNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BoardRowNum);
      }
      connectSpawner_.WriteTo(output, _repeated_connectSpawner_codec);
      rewardAll_.WriteTo(output, _repeated_rewardAll_codec);
      rewardSlash_.WriteTo(output, _repeated_rewardSlash_codec);
      if (BoardColNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BoardColNum);
      }
      rewardStraight_.WriteTo(output, _repeated_rewardStraight_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      itemInfo_.WriteTo(ref output, _repeated_itemInfo_codec);
      if (BoardRowNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BoardRowNum);
      }
      connectSpawner_.WriteTo(ref output, _repeated_connectSpawner_codec);
      rewardAll_.WriteTo(ref output, _repeated_rewardAll_codec);
      rewardSlash_.WriteTo(ref output, _repeated_rewardSlash_codec);
      if (BoardColNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BoardColNum);
      }
      rewardStraight_.WriteTo(ref output, _repeated_rewardStraight_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += itemInfo_.CalculateSize(_repeated_itemInfo_codec);
      if (BoardColNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardColNum);
      }
      if (BoardRowNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardRowNum);
      }
      size += connectSpawner_.CalculateSize(_repeated_connectSpawner_codec);
      size += rewardAll_.CalculateSize(_repeated_rewardAll_codec);
      size += rewardSlash_.CalculateSize(_repeated_rewardSlash_codec);
      size += rewardStraight_.CalculateSize(_repeated_rewardStraight_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemBingoBoard other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      itemInfo_.Add(other.itemInfo_);
      if (other.BoardColNum != 0) {
        BoardColNum = other.BoardColNum;
      }
      if (other.BoardRowNum != 0) {
        BoardRowNum = other.BoardRowNum;
      }
      connectSpawner_.Add(other.connectSpawner_);
      rewardAll_.Add(other.rewardAll_);
      rewardSlash_.Add(other.rewardSlash_);
      rewardStraight_.Add(other.rewardStraight_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            itemInfo_.AddEntriesFrom(input, _repeated_itemInfo_codec);
            break;
          }
          case 32: {
            BoardRowNum = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            connectSpawner_.AddEntriesFrom(input, _repeated_connectSpawner_codec);
            break;
          }
          case 50: {
            rewardAll_.AddEntriesFrom(input, _repeated_rewardAll_codec);
            break;
          }
          case 58: {
            rewardSlash_.AddEntriesFrom(input, _repeated_rewardSlash_codec);
            break;
          }
          case 72: {
            BoardColNum = input.ReadInt32();
            break;
          }
          case 82: {
            rewardStraight_.AddEntriesFrom(input, _repeated_rewardStraight_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            itemInfo_.AddEntriesFrom(ref input, _repeated_itemInfo_codec);
            break;
          }
          case 32: {
            BoardRowNum = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            connectSpawner_.AddEntriesFrom(ref input, _repeated_connectSpawner_codec);
            break;
          }
          case 50: {
            rewardAll_.AddEntriesFrom(ref input, _repeated_rewardAll_codec);
            break;
          }
          case 58: {
            rewardSlash_.AddEntriesFrom(ref input, _repeated_rewardSlash_codec);
            break;
          }
          case 72: {
            BoardColNum = input.ReadInt32();
            break;
          }
          case 82: {
            rewardStraight_.AddEntriesFrom(ref input, _repeated_rewardStraight_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ItemBingoBoardMapABValue : pb::IMessage<ItemBingoBoardMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ItemBingoBoardMapABValue> _parser = new pb::MessageParser<ItemBingoBoardMapABValue>(() => new ItemBingoBoardMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemBingoBoardMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ItemBingoBoardConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemBingoBoardMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemBingoBoardMapABValue(ItemBingoBoardMapABValue other) : this() {
      itemBingoBoardMap_ = other.itemBingoBoardMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemBingoBoardMapABValue Clone() {
      return new ItemBingoBoardMapABValue(this);
    }

    /// <summary>Field number for the "ItemBingoBoardMap" field.</summary>
    public const int ItemBingoBoardMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.ItemBingoBoard>.Codec _map_itemBingoBoardMap_codec
        = new pbc::MapField<int, global::fat.rawdata.ItemBingoBoard>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ItemBingoBoard.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.ItemBingoBoard> itemBingoBoardMap_ = new pbc::MapField<int, global::fat.rawdata.ItemBingoBoard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.ItemBingoBoard> ItemBingoBoardMap {
      get { return itemBingoBoardMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemBingoBoardMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemBingoBoardMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ItemBingoBoardMap.Equals(other.ItemBingoBoardMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ItemBingoBoardMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      itemBingoBoardMap_.WriteTo(output, _map_itemBingoBoardMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      itemBingoBoardMap_.WriteTo(ref output, _map_itemBingoBoardMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemBingoBoardMap_.CalculateSize(_map_itemBingoBoardMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemBingoBoardMapABValue other) {
      if (other == null) {
        return;
      }
      itemBingoBoardMap_.Add(other.itemBingoBoardMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            itemBingoBoardMap_.AddEntriesFrom(input, _map_itemBingoBoardMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            itemBingoBoardMap_.AddEntriesFrom(ref input, _map_itemBingoBoardMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ItemBingoBoardConf : pb::IMessage<ItemBingoBoardConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ItemBingoBoardConf> _parser = new pb::MessageParser<ItemBingoBoardConf>(() => new ItemBingoBoardConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemBingoBoardConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ItemBingoBoardConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemBingoBoardConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemBingoBoardConf(ItemBingoBoardConf other) : this() {
      itemBingoBoardMap_ = other.itemBingoBoardMap_.Clone();
      itemBingoBoardMapAB_ = other.itemBingoBoardMapAB_.Clone();
      itemBingoBoardMapABPatch_ = other.itemBingoBoardMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemBingoBoardConf Clone() {
      return new ItemBingoBoardConf(this);
    }

    /// <summary>Field number for the "ItemBingoBoardMap" field.</summary>
    public const int ItemBingoBoardMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.ItemBingoBoard>.Codec _map_itemBingoBoardMap_codec
        = new pbc::MapField<int, global::fat.rawdata.ItemBingoBoard>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ItemBingoBoard.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.ItemBingoBoard> itemBingoBoardMap_ = new pbc::MapField<int, global::fat.rawdata.ItemBingoBoard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.ItemBingoBoard> ItemBingoBoardMap {
      get { return itemBingoBoardMap_; }
    }

    /// <summary>Field number for the "ItemBingoBoardMapAB" field.</summary>
    public const int ItemBingoBoardMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.ItemBingoBoardMapABValue>.Codec _map_itemBingoBoardMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.ItemBingoBoardMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ItemBingoBoardMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.ItemBingoBoardMapABValue> itemBingoBoardMapAB_ = new pbc::MapField<string, global::fat.rawdata.ItemBingoBoardMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ItemBingoBoardMapABValue> ItemBingoBoardMapAB {
      get { return itemBingoBoardMapAB_; }
    }

    /// <summary>Field number for the "ItemBingoBoardMapABPatch" field.</summary>
    public const int ItemBingoBoardMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.ItemBingoBoardMapABValue>.Codec _map_itemBingoBoardMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.ItemBingoBoardMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ItemBingoBoardMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.ItemBingoBoardMapABValue> itemBingoBoardMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.ItemBingoBoardMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ItemBingoBoardMapABValue> ItemBingoBoardMapABPatch {
      get { return itemBingoBoardMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemBingoBoardConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemBingoBoardConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ItemBingoBoardMap.Equals(other.ItemBingoBoardMap)) return false;
      if (!ItemBingoBoardMapAB.Equals(other.ItemBingoBoardMapAB)) return false;
      if (!ItemBingoBoardMapABPatch.Equals(other.ItemBingoBoardMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ItemBingoBoardMap.GetHashCode();
      hash ^= ItemBingoBoardMapAB.GetHashCode();
      hash ^= ItemBingoBoardMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      itemBingoBoardMap_.WriteTo(output, _map_itemBingoBoardMap_codec);
      itemBingoBoardMapAB_.WriteTo(output, _map_itemBingoBoardMapAB_codec);
      itemBingoBoardMapABPatch_.WriteTo(output, _map_itemBingoBoardMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      itemBingoBoardMap_.WriteTo(ref output, _map_itemBingoBoardMap_codec);
      itemBingoBoardMapAB_.WriteTo(ref output, _map_itemBingoBoardMapAB_codec);
      itemBingoBoardMapABPatch_.WriteTo(ref output, _map_itemBingoBoardMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemBingoBoardMap_.CalculateSize(_map_itemBingoBoardMap_codec);
      size += itemBingoBoardMapAB_.CalculateSize(_map_itemBingoBoardMapAB_codec);
      size += itemBingoBoardMapABPatch_.CalculateSize(_map_itemBingoBoardMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemBingoBoardConf other) {
      if (other == null) {
        return;
      }
      itemBingoBoardMap_.Add(other.itemBingoBoardMap_);
      itemBingoBoardMapAB_.Add(other.itemBingoBoardMapAB_);
      itemBingoBoardMapABPatch_.Add(other.itemBingoBoardMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            itemBingoBoardMap_.AddEntriesFrom(input, _map_itemBingoBoardMap_codec);
            break;
          }
          case 18: {
            itemBingoBoardMapAB_.AddEntriesFrom(input, _map_itemBingoBoardMapAB_codec);
            break;
          }
          case 26: {
            itemBingoBoardMapABPatch_.AddEntriesFrom(input, _map_itemBingoBoardMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            itemBingoBoardMap_.AddEntriesFrom(ref input, _map_itemBingoBoardMap_codec);
            break;
          }
          case 18: {
            itemBingoBoardMapAB_.AddEntriesFrom(ref input, _map_itemBingoBoardMapAB_codec);
            break;
          }
          case 26: {
            itemBingoBoardMapABPatch_.AddEntriesFrom(ref input, _map_itemBingoBoardMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
