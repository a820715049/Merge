// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/MonopolyPackConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/MonopolyPackConf.proto</summary>
  public static partial class MonopolyPackConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/MonopolyPackConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonopolyPackConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5yYXdkYXRhL01vbm9wb2x5UGFja0NvbmYucHJvdG8SB3Jhd2RhdGEiVAoM",
            "TW9ub3BvbHlQYWNrEgoKAmlkGAEgASgFEhIKCmV2ZW50VGhlbWUYAiABKAUS",
            "EQoJZnJlZUdycElkGAMgASgFEhEKCXBhY2tHcnBJZBgEIAEoBSK2AQoWTW9u",
            "b3BvbHlQYWNrTWFwQUJWYWx1ZRJNCg9Nb25vcG9seVBhY2tNYXAYASADKAsy",
            "NC5yYXdkYXRhLk1vbm9wb2x5UGFja01hcEFCVmFsdWUuTW9ub3BvbHlQYWNr",
            "TWFwRW50cnkaTQoUTW9ub3BvbHlQYWNrTWFwRW50cnkSCwoDa2V5GAEgASgF",
            "EiQKBXZhbHVlGAIgASgLMhUucmF3ZGF0YS5Nb25vcG9seVBhY2s6AjgBIokE",
            "ChBNb25vcG9seVBhY2tDb25mEkcKD01vbm9wb2x5UGFja01hcBgBIAMoCzIu",
            "LnJhd2RhdGEuTW9ub3BvbHlQYWNrQ29uZi5Nb25vcG9seVBhY2tNYXBFbnRy",
            "eRJLChFNb25vcG9seVBhY2tNYXBBQhgCIAMoCzIwLnJhd2RhdGEuTW9ub3Bv",
            "bHlQYWNrQ29uZi5Nb25vcG9seVBhY2tNYXBBQkVudHJ5ElUKFk1vbm9wb2x5",
            "UGFja01hcEFCUGF0Y2gYAyADKAsyNS5yYXdkYXRhLk1vbm9wb2x5UGFja0Nv",
            "bmYuTW9ub3BvbHlQYWNrTWFwQUJQYXRjaEVudHJ5Gk0KFE1vbm9wb2x5UGFj",
            "a01hcEVudHJ5EgsKA2tleRgBIAEoBRIkCgV2YWx1ZRgCIAEoCzIVLnJhd2Rh",
            "dGEuTW9ub3BvbHlQYWNrOgI4ARpZChZNb25vcG9seVBhY2tNYXBBQkVudHJ5",
            "EgsKA2tleRgBIAEoCRIuCgV2YWx1ZRgCIAEoCzIfLnJhd2RhdGEuTW9ub3Bv",
            "bHlQYWNrTWFwQUJWYWx1ZToCOAEaXgobTW9ub3BvbHlQYWNrTWFwQUJQYXRj",
            "aEVudHJ5EgsKA2tleRgBIAEoCRIuCgV2YWx1ZRgCIAEoCzIfLnJhd2RhdGEu",
            "TW9ub3BvbHlQYWNrTWFwQUJWYWx1ZToCOAFCPVotZ2l0bGFiLmZ1bnBsdXMu",
            "aW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdkYXRhqgILZmF0LnJhd2RhdGFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MonopolyPack), global::fat.rawdata.MonopolyPack.Parser, new[]{ "Id", "EventTheme", "FreeGrpId", "PackGrpId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MonopolyPackMapABValue), global::fat.rawdata.MonopolyPackMapABValue.Parser, new[]{ "MonopolyPackMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MonopolyPackConf), global::fat.rawdata.MonopolyPackConf.Parser, new[]{ "MonopolyPackMap", "MonopolyPackMapAB", "MonopolyPackMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="MonopolyPack",table="MonopolyPackMap",table_wrapper="MonopolyPackConf",map="true",map_key_type="int32",data="MonopolyPackConf")
  /// annotation@ab(table_ab="MonopolyPackMapAB",table_ab_patch="MonopolyPackMapABPatch",table_ab_value="MonopolyPackMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@MonopolyPack(id="id")
  /// </summary>
  public sealed partial class MonopolyPack : pb::IMessage<MonopolyPack>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonopolyPack> _parser = new pb::MessageParser<MonopolyPack>(() => new MonopolyPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonopolyPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MonopolyPackConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyPack(MonopolyPack other) : this() {
      id_ = other.id_;
      eventTheme_ = other.eventTheme_;
      freeGrpId_ = other.freeGrpId_;
      packGrpId_ = other.packGrpId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyPack Clone() {
      return new MonopolyPack(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 礼包id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 2;
    private int eventTheme_;
    /// <summary>
    /// 礼包弹板
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "freeGrpId" field.</summary>
    public const int FreeGrpIdFieldNumber = 3;
    private int freeGrpId_;
    /// <summary>
    /// 免费商品档位
    /// （GradeIndexMapping.id）
    /// （IAPFree.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeGrpId {
      get { return freeGrpId_; }
      set {
        freeGrpId_ = value;
      }
    }

    /// <summary>Field number for the "packGrpId" field.</summary>
    public const int PackGrpIdFieldNumber = 4;
    private int packGrpId_;
    /// <summary>
    /// 内购商品档位
    /// （GradeIndexMapping.id）
    /// （IAPPack.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackGrpId {
      get { return packGrpId_; }
      set {
        packGrpId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonopolyPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonopolyPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (EventTheme != other.EventTheme) return false;
      if (FreeGrpId != other.FreeGrpId) return false;
      if (PackGrpId != other.PackGrpId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (FreeGrpId != 0) hash ^= FreeGrpId.GetHashCode();
      if (PackGrpId != 0) hash ^= PackGrpId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EventTheme);
      }
      if (FreeGrpId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FreeGrpId);
      }
      if (PackGrpId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PackGrpId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EventTheme);
      }
      if (FreeGrpId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FreeGrpId);
      }
      if (PackGrpId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PackGrpId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (FreeGrpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeGrpId);
      }
      if (PackGrpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackGrpId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonopolyPack other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.FreeGrpId != 0) {
        FreeGrpId = other.FreeGrpId;
      }
      if (other.PackGrpId != 0) {
        PackGrpId = other.PackGrpId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 24: {
            FreeGrpId = input.ReadInt32();
            break;
          }
          case 32: {
            PackGrpId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 24: {
            FreeGrpId = input.ReadInt32();
            break;
          }
          case 32: {
            PackGrpId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MonopolyPackMapABValue : pb::IMessage<MonopolyPackMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonopolyPackMapABValue> _parser = new pb::MessageParser<MonopolyPackMapABValue>(() => new MonopolyPackMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonopolyPackMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MonopolyPackConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyPackMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyPackMapABValue(MonopolyPackMapABValue other) : this() {
      monopolyPackMap_ = other.monopolyPackMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyPackMapABValue Clone() {
      return new MonopolyPackMapABValue(this);
    }

    /// <summary>Field number for the "MonopolyPackMap" field.</summary>
    public const int MonopolyPackMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MonopolyPack>.Codec _map_monopolyPackMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MonopolyPack>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyPack.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MonopolyPack> monopolyPackMap_ = new pbc::MapField<int, global::fat.rawdata.MonopolyPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MonopolyPack> MonopolyPackMap {
      get { return monopolyPackMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonopolyPackMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonopolyPackMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MonopolyPackMap.Equals(other.MonopolyPackMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MonopolyPackMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      monopolyPackMap_.WriteTo(output, _map_monopolyPackMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      monopolyPackMap_.WriteTo(ref output, _map_monopolyPackMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monopolyPackMap_.CalculateSize(_map_monopolyPackMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonopolyPackMapABValue other) {
      if (other == null) {
        return;
      }
      monopolyPackMap_.Add(other.monopolyPackMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            monopolyPackMap_.AddEntriesFrom(input, _map_monopolyPackMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            monopolyPackMap_.AddEntriesFrom(ref input, _map_monopolyPackMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MonopolyPackConf : pb::IMessage<MonopolyPackConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonopolyPackConf> _parser = new pb::MessageParser<MonopolyPackConf>(() => new MonopolyPackConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonopolyPackConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MonopolyPackConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyPackConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyPackConf(MonopolyPackConf other) : this() {
      monopolyPackMap_ = other.monopolyPackMap_.Clone();
      monopolyPackMapAB_ = other.monopolyPackMapAB_.Clone();
      monopolyPackMapABPatch_ = other.monopolyPackMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyPackConf Clone() {
      return new MonopolyPackConf(this);
    }

    /// <summary>Field number for the "MonopolyPackMap" field.</summary>
    public const int MonopolyPackMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MonopolyPack>.Codec _map_monopolyPackMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MonopolyPack>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyPack.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MonopolyPack> monopolyPackMap_ = new pbc::MapField<int, global::fat.rawdata.MonopolyPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MonopolyPack> MonopolyPackMap {
      get { return monopolyPackMap_; }
    }

    /// <summary>Field number for the "MonopolyPackMapAB" field.</summary>
    public const int MonopolyPackMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.MonopolyPackMapABValue>.Codec _map_monopolyPackMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.MonopolyPackMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyPackMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.MonopolyPackMapABValue> monopolyPackMapAB_ = new pbc::MapField<string, global::fat.rawdata.MonopolyPackMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MonopolyPackMapABValue> MonopolyPackMapAB {
      get { return monopolyPackMapAB_; }
    }

    /// <summary>Field number for the "MonopolyPackMapABPatch" field.</summary>
    public const int MonopolyPackMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.MonopolyPackMapABValue>.Codec _map_monopolyPackMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.MonopolyPackMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyPackMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.MonopolyPackMapABValue> monopolyPackMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.MonopolyPackMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MonopolyPackMapABValue> MonopolyPackMapABPatch {
      get { return monopolyPackMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonopolyPackConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonopolyPackConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MonopolyPackMap.Equals(other.MonopolyPackMap)) return false;
      if (!MonopolyPackMapAB.Equals(other.MonopolyPackMapAB)) return false;
      if (!MonopolyPackMapABPatch.Equals(other.MonopolyPackMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MonopolyPackMap.GetHashCode();
      hash ^= MonopolyPackMapAB.GetHashCode();
      hash ^= MonopolyPackMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      monopolyPackMap_.WriteTo(output, _map_monopolyPackMap_codec);
      monopolyPackMapAB_.WriteTo(output, _map_monopolyPackMapAB_codec);
      monopolyPackMapABPatch_.WriteTo(output, _map_monopolyPackMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      monopolyPackMap_.WriteTo(ref output, _map_monopolyPackMap_codec);
      monopolyPackMapAB_.WriteTo(ref output, _map_monopolyPackMapAB_codec);
      monopolyPackMapABPatch_.WriteTo(ref output, _map_monopolyPackMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monopolyPackMap_.CalculateSize(_map_monopolyPackMap_codec);
      size += monopolyPackMapAB_.CalculateSize(_map_monopolyPackMapAB_codec);
      size += monopolyPackMapABPatch_.CalculateSize(_map_monopolyPackMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonopolyPackConf other) {
      if (other == null) {
        return;
      }
      monopolyPackMap_.Add(other.monopolyPackMap_);
      monopolyPackMapAB_.Add(other.monopolyPackMapAB_);
      monopolyPackMapABPatch_.Add(other.monopolyPackMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            monopolyPackMap_.AddEntriesFrom(input, _map_monopolyPackMap_codec);
            break;
          }
          case 18: {
            monopolyPackMapAB_.AddEntriesFrom(input, _map_monopolyPackMapAB_codec);
            break;
          }
          case 26: {
            monopolyPackMapABPatch_.AddEntriesFrom(input, _map_monopolyPackMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            monopolyPackMap_.AddEntriesFrom(ref input, _map_monopolyPackMap_codec);
            break;
          }
          case 18: {
            monopolyPackMapAB_.AddEntriesFrom(ref input, _map_monopolyPackMapAB_codec);
            break;
          }
          case 26: {
            monopolyPackMapABPatch_.AddEntriesFrom(ref input, _map_monopolyPackMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
