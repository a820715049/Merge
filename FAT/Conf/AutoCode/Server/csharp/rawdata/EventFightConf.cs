// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventFightConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventFightConf.proto</summary>
  public static partial class EventFightConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventFightConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventFightConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxyYXdkYXRhL0V2ZW50RmlnaHRDb25mLnByb3RvEgdyYXdkYXRhIvUCCgpF",
            "dmVudEZpZ2h0EgoKAmlkGAEgASgFEhYKDmF0dGFja0NyaXRpY2FsGAIgASgF",
            "EhQKDGF0dGFja0RhbWFnZRgDIAMoBRIQCghhdHRhY2tJZBgUIAEoBRIRCglh",
            "dHRhY2tOdW0YBCABKAUSEgoKYm9hcmRUaGVtZRgFIAEoBRITCgtjb2xvckhl",
            "YWx0aBgGIAMoCRIMCgRjb3N0GAcgASgFEhUKDWN5Y2xlVGlwVGhlbWUYFSAB",
            "KAUSEAoIZW5kVGhlbWUYCCABKAUSEwoLZXhwaXJlUG9wdXAYCSABKAUSDwoH",
            "Z3JhZGVJZBgKIAEoBRISCgpncmlkSGVhbHRoGAsgASgFEhEKCWhlbHBUaGVt",
            "ZRgSIAEoBRIUCgxsb2FkaW5nVGhlbWUYDCABKAUSDAoEbmFtZRgOIAEoCRIT",
            "CgtyZXdhcmRUaGVtZRgTIAEoBRISCgpzdGFydFRoZW1lGBAgASgFEg4KBndl",
            "YXBvbhgRIAEoBSKqAQoURXZlbnRGaWdodE1hcEFCVmFsdWUSRwoNRXZlbnRG",
            "aWdodE1hcBgBIAMoCzIwLnJhd2RhdGEuRXZlbnRGaWdodE1hcEFCVmFsdWUu",
            "RXZlbnRGaWdodE1hcEVudHJ5GkkKEkV2ZW50RmlnaHRNYXBFbnRyeRILCgNr",
            "ZXkYASABKAUSIgoFdmFsdWUYAiABKAsyEy5yYXdkYXRhLkV2ZW50RmlnaHQ6",
            "AjgBIukDCg5FdmVudEZpZ2h0Q29uZhJBCg1FdmVudEZpZ2h0TWFwGAEgAygL",
            "MioucmF3ZGF0YS5FdmVudEZpZ2h0Q29uZi5FdmVudEZpZ2h0TWFwRW50cnkS",
            "RQoPRXZlbnRGaWdodE1hcEFCGAIgAygLMiwucmF3ZGF0YS5FdmVudEZpZ2h0",
            "Q29uZi5FdmVudEZpZ2h0TWFwQUJFbnRyeRJPChRFdmVudEZpZ2h0TWFwQUJQ",
            "YXRjaBgDIAMoCzIxLnJhd2RhdGEuRXZlbnRGaWdodENvbmYuRXZlbnRGaWdo",
            "dE1hcEFCUGF0Y2hFbnRyeRpJChJFdmVudEZpZ2h0TWFwRW50cnkSCwoDa2V5",
            "GAEgASgFEiIKBXZhbHVlGAIgASgLMhMucmF3ZGF0YS5FdmVudEZpZ2h0OgI4",
            "ARpVChRFdmVudEZpZ2h0TWFwQUJFbnRyeRILCgNrZXkYASABKAkSLAoFdmFs",
            "dWUYAiABKAsyHS5yYXdkYXRhLkV2ZW50RmlnaHRNYXBBQlZhbHVlOgI4ARpa",
            "ChlFdmVudEZpZ2h0TWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIsCgV2",
            "YWx1ZRgCIAEoCzIdLnJhd2RhdGEuRXZlbnRGaWdodE1hcEFCVmFsdWU6AjgB",
            "Qj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3",
            "ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventFight), global::fat.rawdata.EventFight.Parser, new[]{ "Id", "AttackCritical", "AttackDamage", "AttackId", "AttackNum", "BoardTheme", "ColorHealth", "Cost", "CycleTipTheme", "EndTheme", "ExpirePopup", "GradeId", "GridHealth", "HelpTheme", "LoadingTheme", "Name", "RewardTheme", "StartTheme", "Weapon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventFightMapABValue), global::fat.rawdata.EventFightMapABValue.Parser, new[]{ "EventFightMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventFightConf), global::fat.rawdata.EventFightConf.Parser, new[]{ "EventFightMap", "EventFightMapAB", "EventFightMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventFight",table="EventFightMap",table_wrapper="EventFightConf",map="true",map_key_type="int32",data="EventFightConf")
  /// annotation@ab(table_ab="EventFightMapAB",table_ab_patch="EventFightMapABPatch",table_ab_value="EventFightMapABValue",ab_patch="true")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventFight(id="id")
  /// </summary>
  public sealed partial class EventFight : pb::IMessage<EventFight>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFight> _parser = new pb::MessageParser<EventFight>(() => new EventFight());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventFightConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFight(EventFight other) : this() {
      id_ = other.id_;
      attackCritical_ = other.attackCritical_;
      attackDamage_ = other.attackDamage_.Clone();
      attackId_ = other.attackId_;
      attackNum_ = other.attackNum_;
      boardTheme_ = other.boardTheme_;
      colorHealth_ = other.colorHealth_.Clone();
      cost_ = other.cost_;
      cycleTipTheme_ = other.cycleTipTheme_;
      endTheme_ = other.endTheme_;
      expirePopup_ = other.expirePopup_;
      gradeId_ = other.gradeId_;
      gridHealth_ = other.gridHealth_;
      helpTheme_ = other.helpTheme_;
      loadingTheme_ = other.loadingTheme_;
      name_ = other.name_;
      rewardTheme_ = other.rewardTheme_;
      startTheme_ = other.startTheme_;
      weapon_ = other.weapon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFight Clone() {
      return new EventFight(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "attackCritical" field.</summary>
    public const int AttackCriticalFieldNumber = 2;
    private int attackCritical_;
    /// <summary>
    /// 暴击概率
    /// 实际=配置/100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackCritical {
      get { return attackCritical_; }
      set {
        attackCritical_ = value;
      }
    }

    /// <summary>Field number for the "attackDamage" field.</summary>
    public const int AttackDamageFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_attackDamage_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> attackDamage_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 基础伤害范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AttackDamage {
      get { return attackDamage_; }
    }

    /// <summary>Field number for the "attackId" field.</summary>
    public const int AttackIdFieldNumber = 20;
    private int attackId_;
    /// <summary>
    /// 仅用来显示攻击icon
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackId {
      get { return attackId_; }
      set {
        attackId_ = value;
      }
    }

    /// <summary>Field number for the "attackNum" field.</summary>
    public const int AttackNumFieldNumber = 4;
    private int attackNum_;
    /// <summary>
    /// 武器攻击次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackNum {
      get { return attackNum_; }
      set {
        attackNum_ = value;
      }
    }

    /// <summary>Field number for the "boardTheme" field.</summary>
    public const int BoardThemeFieldNumber = 5;
    private int boardTheme_;
    /// <summary>
    /// 棋盘
    /// 主界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardTheme {
      get { return boardTheme_; }
      set {
        boardTheme_ = value;
      }
    }

    /// <summary>Field number for the "colorHealth" field.</summary>
    public const int ColorHealthFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_colorHealth_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> colorHealth_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 血条颜色
    /// ≤血量百分比:颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ColorHealth {
      get { return colorHealth_; }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 7;
    private int cost_;
    /// <summary>
    /// 消耗内容
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "cycleTipTheme" field.</summary>
    public const int CycleTipThemeFieldNumber = 21;
    private int cycleTipTheme_;
    /// <summary>
    /// 里程碑达成
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CycleTipTheme {
      get { return cycleTipTheme_; }
      set {
        cycleTipTheme_ = value;
      }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 8;
    private int endTheme_;
    /// <summary>
    /// 结束
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "expirePopup" field.</summary>
    public const int ExpirePopupFieldNumber = 9;
    private int expirePopup_;
    /// <summary>
    /// 补领
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpirePopup {
      get { return expirePopup_; }
      set {
        expirePopup_ = value;
      }
    }

    /// <summary>Field number for the "gradeId" field.</summary>
    public const int GradeIdFieldNumber = 10;
    private int gradeId_;
    /// <summary>
    /// 分层后id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeId {
      get { return gradeId_; }
      set {
        gradeId_ = value;
      }
    }

    /// <summary>Field number for the "gridHealth" field.</summary>
    public const int GridHealthFieldNumber = 11;
    private int gridHealth_;
    /// <summary>
    /// 1格血条值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GridHealth {
      get { return gridHealth_; }
      set {
        gridHealth_ = value;
      }
    }

    /// <summary>Field number for the "helpTheme" field.</summary>
    public const int HelpThemeFieldNumber = 18;
    private int helpTheme_;
    /// <summary>
    /// 帮助页
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpTheme {
      get { return helpTheme_; }
      set {
        helpTheme_ = value;
      }
    }

    /// <summary>Field number for the "loadingTheme" field.</summary>
    public const int LoadingThemeFieldNumber = 12;
    private int loadingTheme_;
    /// <summary>
    /// loading
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoadingTheme {
      get { return loadingTheme_; }
      set {
        loadingTheme_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 14;
    private string name_ = "";
    /// <summary>
    /// 活动名字key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rewardTheme" field.</summary>
    public const int RewardThemeFieldNumber = 19;
    private int rewardTheme_;
    /// <summary>
    /// 里程碑详情
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardTheme {
      get { return rewardTheme_; }
      set {
        rewardTheme_ = value;
      }
    }

    /// <summary>Field number for the "startTheme" field.</summary>
    public const int StartThemeFieldNumber = 16;
    private int startTheme_;
    /// <summary>
    /// 开启
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTheme {
      get { return startTheme_; }
      set {
        startTheme_ = value;
      }
    }

    /// <summary>Field number for the "weapon" field.</summary>
    public const int WeaponFieldNumber = 17;
    private int weapon_;
    /// <summary>
    /// 最高级攻击棋子id
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weapon {
      get { return weapon_; }
      set {
        weapon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AttackCritical != other.AttackCritical) return false;
      if(!attackDamage_.Equals(other.attackDamage_)) return false;
      if (AttackId != other.AttackId) return false;
      if (AttackNum != other.AttackNum) return false;
      if (BoardTheme != other.BoardTheme) return false;
      if(!colorHealth_.Equals(other.colorHealth_)) return false;
      if (Cost != other.Cost) return false;
      if (CycleTipTheme != other.CycleTipTheme) return false;
      if (EndTheme != other.EndTheme) return false;
      if (ExpirePopup != other.ExpirePopup) return false;
      if (GradeId != other.GradeId) return false;
      if (GridHealth != other.GridHealth) return false;
      if (HelpTheme != other.HelpTheme) return false;
      if (LoadingTheme != other.LoadingTheme) return false;
      if (Name != other.Name) return false;
      if (RewardTheme != other.RewardTheme) return false;
      if (StartTheme != other.StartTheme) return false;
      if (Weapon != other.Weapon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (AttackCritical != 0) hash ^= AttackCritical.GetHashCode();
      hash ^= attackDamage_.GetHashCode();
      if (AttackId != 0) hash ^= AttackId.GetHashCode();
      if (AttackNum != 0) hash ^= AttackNum.GetHashCode();
      if (BoardTheme != 0) hash ^= BoardTheme.GetHashCode();
      hash ^= colorHealth_.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (CycleTipTheme != 0) hash ^= CycleTipTheme.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      if (ExpirePopup != 0) hash ^= ExpirePopup.GetHashCode();
      if (GradeId != 0) hash ^= GradeId.GetHashCode();
      if (GridHealth != 0) hash ^= GridHealth.GetHashCode();
      if (HelpTheme != 0) hash ^= HelpTheme.GetHashCode();
      if (LoadingTheme != 0) hash ^= LoadingTheme.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (RewardTheme != 0) hash ^= RewardTheme.GetHashCode();
      if (StartTheme != 0) hash ^= StartTheme.GetHashCode();
      if (Weapon != 0) hash ^= Weapon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (AttackCritical != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttackCritical);
      }
      attackDamage_.WriteTo(output, _repeated_attackDamage_codec);
      if (AttackNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttackNum);
      }
      if (BoardTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BoardTheme);
      }
      colorHealth_.WriteTo(output, _repeated_colorHealth_codec);
      if (Cost != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Cost);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EndTheme);
      }
      if (ExpirePopup != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ExpirePopup);
      }
      if (GradeId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GradeId);
      }
      if (GridHealth != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(GridHealth);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(LoadingTheme);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Name);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(StartTheme);
      }
      if (Weapon != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Weapon);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(HelpTheme);
      }
      if (RewardTheme != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(RewardTheme);
      }
      if (AttackId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(AttackId);
      }
      if (CycleTipTheme != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(CycleTipTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (AttackCritical != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttackCritical);
      }
      attackDamage_.WriteTo(ref output, _repeated_attackDamage_codec);
      if (AttackNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttackNum);
      }
      if (BoardTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BoardTheme);
      }
      colorHealth_.WriteTo(ref output, _repeated_colorHealth_codec);
      if (Cost != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Cost);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EndTheme);
      }
      if (ExpirePopup != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ExpirePopup);
      }
      if (GradeId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GradeId);
      }
      if (GridHealth != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(GridHealth);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(LoadingTheme);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Name);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(StartTheme);
      }
      if (Weapon != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Weapon);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(HelpTheme);
      }
      if (RewardTheme != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(RewardTheme);
      }
      if (AttackId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(AttackId);
      }
      if (CycleTipTheme != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(CycleTipTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (AttackCritical != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackCritical);
      }
      size += attackDamage_.CalculateSize(_repeated_attackDamage_codec);
      if (AttackId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackId);
      }
      if (AttackNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackNum);
      }
      if (BoardTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardTheme);
      }
      size += colorHealth_.CalculateSize(_repeated_colorHealth_codec);
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (CycleTipTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CycleTipTheme);
      }
      if (EndTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      if (ExpirePopup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpirePopup);
      }
      if (GradeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeId);
      }
      if (GridHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GridHealth);
      }
      if (HelpTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HelpTheme);
      }
      if (LoadingTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoadingTheme);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (RewardTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RewardTheme);
      }
      if (StartTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartTheme);
      }
      if (Weapon != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Weapon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFight other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.AttackCritical != 0) {
        AttackCritical = other.AttackCritical;
      }
      attackDamage_.Add(other.attackDamage_);
      if (other.AttackId != 0) {
        AttackId = other.AttackId;
      }
      if (other.AttackNum != 0) {
        AttackNum = other.AttackNum;
      }
      if (other.BoardTheme != 0) {
        BoardTheme = other.BoardTheme;
      }
      colorHealth_.Add(other.colorHealth_);
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.CycleTipTheme != 0) {
        CycleTipTheme = other.CycleTipTheme;
      }
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      if (other.ExpirePopup != 0) {
        ExpirePopup = other.ExpirePopup;
      }
      if (other.GradeId != 0) {
        GradeId = other.GradeId;
      }
      if (other.GridHealth != 0) {
        GridHealth = other.GridHealth;
      }
      if (other.HelpTheme != 0) {
        HelpTheme = other.HelpTheme;
      }
      if (other.LoadingTheme != 0) {
        LoadingTheme = other.LoadingTheme;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.RewardTheme != 0) {
        RewardTheme = other.RewardTheme;
      }
      if (other.StartTheme != 0) {
        StartTheme = other.StartTheme;
      }
      if (other.Weapon != 0) {
        Weapon = other.Weapon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            AttackCritical = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            attackDamage_.AddEntriesFrom(input, _repeated_attackDamage_codec);
            break;
          }
          case 32: {
            AttackNum = input.ReadInt32();
            break;
          }
          case 40: {
            BoardTheme = input.ReadInt32();
            break;
          }
          case 50: {
            colorHealth_.AddEntriesFrom(input, _repeated_colorHealth_codec);
            break;
          }
          case 56: {
            Cost = input.ReadInt32();
            break;
          }
          case 64: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 72: {
            ExpirePopup = input.ReadInt32();
            break;
          }
          case 80: {
            GradeId = input.ReadInt32();
            break;
          }
          case 88: {
            GridHealth = input.ReadInt32();
            break;
          }
          case 96: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 114: {
            Name = input.ReadString();
            break;
          }
          case 128: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 136: {
            Weapon = input.ReadInt32();
            break;
          }
          case 144: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 152: {
            RewardTheme = input.ReadInt32();
            break;
          }
          case 160: {
            AttackId = input.ReadInt32();
            break;
          }
          case 168: {
            CycleTipTheme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            AttackCritical = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            attackDamage_.AddEntriesFrom(ref input, _repeated_attackDamage_codec);
            break;
          }
          case 32: {
            AttackNum = input.ReadInt32();
            break;
          }
          case 40: {
            BoardTheme = input.ReadInt32();
            break;
          }
          case 50: {
            colorHealth_.AddEntriesFrom(ref input, _repeated_colorHealth_codec);
            break;
          }
          case 56: {
            Cost = input.ReadInt32();
            break;
          }
          case 64: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 72: {
            ExpirePopup = input.ReadInt32();
            break;
          }
          case 80: {
            GradeId = input.ReadInt32();
            break;
          }
          case 88: {
            GridHealth = input.ReadInt32();
            break;
          }
          case 96: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 114: {
            Name = input.ReadString();
            break;
          }
          case 128: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 136: {
            Weapon = input.ReadInt32();
            break;
          }
          case 144: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 152: {
            RewardTheme = input.ReadInt32();
            break;
          }
          case 160: {
            AttackId = input.ReadInt32();
            break;
          }
          case 168: {
            CycleTipTheme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventFightMapABValue : pb::IMessage<EventFightMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFightMapABValue> _parser = new pb::MessageParser<EventFightMapABValue>(() => new EventFightMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFightMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventFightConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFightMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFightMapABValue(EventFightMapABValue other) : this() {
      eventFightMap_ = other.eventFightMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFightMapABValue Clone() {
      return new EventFightMapABValue(this);
    }

    /// <summary>Field number for the "EventFightMap" field.</summary>
    public const int EventFightMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventFight>.Codec _map_eventFightMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventFight>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFight.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventFight> eventFightMap_ = new pbc::MapField<int, global::fat.rawdata.EventFight>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventFight> EventFightMap {
      get { return eventFightMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFightMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFightMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventFightMap.Equals(other.EventFightMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventFightMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventFightMap_.WriteTo(output, _map_eventFightMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventFightMap_.WriteTo(ref output, _map_eventFightMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventFightMap_.CalculateSize(_map_eventFightMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFightMapABValue other) {
      if (other == null) {
        return;
      }
      eventFightMap_.Add(other.eventFightMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventFightMap_.AddEntriesFrom(input, _map_eventFightMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventFightMap_.AddEntriesFrom(ref input, _map_eventFightMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventFightConf : pb::IMessage<EventFightConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFightConf> _parser = new pb::MessageParser<EventFightConf>(() => new EventFightConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFightConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventFightConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFightConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFightConf(EventFightConf other) : this() {
      eventFightMap_ = other.eventFightMap_.Clone();
      eventFightMapAB_ = other.eventFightMapAB_.Clone();
      eventFightMapABPatch_ = other.eventFightMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFightConf Clone() {
      return new EventFightConf(this);
    }

    /// <summary>Field number for the "EventFightMap" field.</summary>
    public const int EventFightMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventFight>.Codec _map_eventFightMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventFight>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFight.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventFight> eventFightMap_ = new pbc::MapField<int, global::fat.rawdata.EventFight>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventFight> EventFightMap {
      get { return eventFightMap_; }
    }

    /// <summary>Field number for the "EventFightMapAB" field.</summary>
    public const int EventFightMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventFightMapABValue>.Codec _map_eventFightMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventFightMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFightMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventFightMapABValue> eventFightMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventFightMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventFightMapABValue> EventFightMapAB {
      get { return eventFightMapAB_; }
    }

    /// <summary>Field number for the "EventFightMapABPatch" field.</summary>
    public const int EventFightMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventFightMapABValue>.Codec _map_eventFightMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventFightMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFightMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventFightMapABValue> eventFightMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventFightMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventFightMapABValue> EventFightMapABPatch {
      get { return eventFightMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFightConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFightConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventFightMap.Equals(other.EventFightMap)) return false;
      if (!EventFightMapAB.Equals(other.EventFightMapAB)) return false;
      if (!EventFightMapABPatch.Equals(other.EventFightMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventFightMap.GetHashCode();
      hash ^= EventFightMapAB.GetHashCode();
      hash ^= EventFightMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventFightMap_.WriteTo(output, _map_eventFightMap_codec);
      eventFightMapAB_.WriteTo(output, _map_eventFightMapAB_codec);
      eventFightMapABPatch_.WriteTo(output, _map_eventFightMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventFightMap_.WriteTo(ref output, _map_eventFightMap_codec);
      eventFightMapAB_.WriteTo(ref output, _map_eventFightMapAB_codec);
      eventFightMapABPatch_.WriteTo(ref output, _map_eventFightMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventFightMap_.CalculateSize(_map_eventFightMap_codec);
      size += eventFightMapAB_.CalculateSize(_map_eventFightMapAB_codec);
      size += eventFightMapABPatch_.CalculateSize(_map_eventFightMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFightConf other) {
      if (other == null) {
        return;
      }
      eventFightMap_.Add(other.eventFightMap_);
      eventFightMapAB_.Add(other.eventFightMapAB_);
      eventFightMapABPatch_.Add(other.eventFightMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventFightMap_.AddEntriesFrom(input, _map_eventFightMap_codec);
            break;
          }
          case 18: {
            eventFightMapAB_.AddEntriesFrom(input, _map_eventFightMapAB_codec);
            break;
          }
          case 26: {
            eventFightMapABPatch_.AddEntriesFrom(input, _map_eventFightMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventFightMap_.AddEntriesFrom(ref input, _map_eventFightMap_codec);
            break;
          }
          case 18: {
            eventFightMapAB_.AddEntriesFrom(ref input, _map_eventFightMapAB_codec);
            break;
          }
          case 26: {
            eventFightMapABPatch_.AddEntriesFrom(ref input, _map_eventFightMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
