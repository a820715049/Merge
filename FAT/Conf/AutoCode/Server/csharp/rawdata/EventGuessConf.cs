// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventGuessConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventGuessConf.proto</summary>
  public static partial class EventGuessConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventGuessConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventGuessConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxyYXdkYXRhL0V2ZW50R3Vlc3NDb25mLnByb3RvEgdyYXdkYXRhIrsDCgpF",
            "dmVudEd1ZXNzEgoKAmlkGAEgASgFEg8KB2JvYXJkSWQYAiABKAUSDAoEY29z",
            "dBgDIAEoBRI5CgtleHBpcmVQb3B1cBgEIAMoCzIkLnJhd2RhdGEuRXZlbnRH",
            "dWVzcy5FeHBpcmVQb3B1cEVudHJ5EhQKDGZyZWVUb2tlbk51bRgFIAEoBRIP",
            "CgdncmFkZUlkGAYgASgFEhYKDmd1ZXNzTWFpblRoZW1lGAcgASgFEhUKDWhl",
            "bHBQbGF5VGhlbWUYCCABKAUSFAoMbG9hZGluZ1RoZW1lGAkgASgFEhgKEG1p",
            "bGVzdG9uZVNjb3JlSWQYCiABKAUSDAoEbmFtZRgLIAEoCRIXCg9yZWNvbnRp",
            "bnVlVGhlbWUYDCABKAUSFgoOcmVxdWlyZVNjb3JlSWQYDSABKAUSFAoMcmVz",
            "dGFydFRoZW1lGA4gASgFEhMKC3Jld2FyZFRoZW1lGA8gASgFEhIKCnN0YXJ0",
            "VGhlbWUYECABKAUSDwoHdG9rZW5JZBgRIAEoBRoyChBFeHBpcmVQb3B1cEVu",
            "dHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoCToCOAEiqgEKFEV2ZW50",
            "R3Vlc3NNYXBBQlZhbHVlEkcKDUV2ZW50R3Vlc3NNYXAYASADKAsyMC5yYXdk",
            "YXRhLkV2ZW50R3Vlc3NNYXBBQlZhbHVlLkV2ZW50R3Vlc3NNYXBFbnRyeRpJ",
            "ChJFdmVudEd1ZXNzTWFwRW50cnkSCwoDa2V5GAEgASgFEiIKBXZhbHVlGAIg",
            "ASgLMhMucmF3ZGF0YS5FdmVudEd1ZXNzOgI4ASLpAwoORXZlbnRHdWVzc0Nv",
            "bmYSQQoNRXZlbnRHdWVzc01hcBgBIAMoCzIqLnJhd2RhdGEuRXZlbnRHdWVz",
            "c0NvbmYuRXZlbnRHdWVzc01hcEVudHJ5EkUKD0V2ZW50R3Vlc3NNYXBBQhgC",
            "IAMoCzIsLnJhd2RhdGEuRXZlbnRHdWVzc0NvbmYuRXZlbnRHdWVzc01hcEFC",
            "RW50cnkSTwoURXZlbnRHdWVzc01hcEFCUGF0Y2gYAyADKAsyMS5yYXdkYXRh",
            "LkV2ZW50R3Vlc3NDb25mLkV2ZW50R3Vlc3NNYXBBQlBhdGNoRW50cnkaSQoS",
            "RXZlbnRHdWVzc01hcEVudHJ5EgsKA2tleRgBIAEoBRIiCgV2YWx1ZRgCIAEo",
            "CzITLnJhd2RhdGEuRXZlbnRHdWVzczoCOAEaVQoURXZlbnRHdWVzc01hcEFC",
            "RW50cnkSCwoDa2V5GAEgASgJEiwKBXZhbHVlGAIgASgLMh0ucmF3ZGF0YS5F",
            "dmVudEd1ZXNzTWFwQUJWYWx1ZToCOAEaWgoZRXZlbnRHdWVzc01hcEFCUGF0",
            "Y2hFbnRyeRILCgNrZXkYASABKAkSLAoFdmFsdWUYAiABKAsyHS5yYXdkYXRh",
            "LkV2ZW50R3Vlc3NNYXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5p",
            "by9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventGuess), global::fat.rawdata.EventGuess.Parser, new[]{ "Id", "BoardId", "Cost", "ExpirePopup", "FreeTokenNum", "GradeId", "GuessMainTheme", "HelpPlayTheme", "LoadingTheme", "MilestoneScoreId", "Name", "RecontinueTheme", "RequireScoreId", "RestartTheme", "RewardTheme", "StartTheme", "TokenId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventGuessMapABValue), global::fat.rawdata.EventGuessMapABValue.Parser, new[]{ "EventGuessMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventGuessConf), global::fat.rawdata.EventGuessConf.Parser, new[]{ "EventGuessMap", "EventGuessMapAB", "EventGuessMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventGuess",table="EventGuessMap",table_wrapper="EventGuessConf",map="true",map_key_type="int32",data="EventGuessConf")
  /// annotation@ab(table_ab="EventGuessMapAB",table_ab_patch="EventGuessMapABPatch",table_ab_value="EventGuessMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventGuess(id="id")
  /// </summary>
  public sealed partial class EventGuess : pb::IMessage<EventGuess>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventGuess> _parser = new pb::MessageParser<EventGuess>(() => new EventGuess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventGuess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventGuessConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventGuess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventGuess(EventGuess other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      cost_ = other.cost_;
      expirePopup_ = other.expirePopup_.Clone();
      freeTokenNum_ = other.freeTokenNum_;
      gradeId_ = other.gradeId_;
      guessMainTheme_ = other.guessMainTheme_;
      helpPlayTheme_ = other.helpPlayTheme_;
      loadingTheme_ = other.loadingTheme_;
      milestoneScoreId_ = other.milestoneScoreId_;
      name_ = other.name_;
      recontinueTheme_ = other.recontinueTheme_;
      requireScoreId_ = other.requireScoreId_;
      restartTheme_ = other.restartTheme_;
      rewardTheme_ = other.rewardTheme_;
      startTheme_ = other.startTheme_;
      tokenId_ = other.tokenId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventGuess Clone() {
      return new EventGuess(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 适用棋盘
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 3;
    private int cost_;
    /// <summary>
    /// 消耗内容
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "expirePopup" field.</summary>
    public const int ExpirePopupFieldNumber = 4;
    private static readonly pbc::MapField<int, string>.Codec _map_expirePopup_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<int, string> expirePopup_ = new pbc::MapField<int, string>();
    /// <summary>
    /// 活动结束时
    /// 通过弹板的方式一次性删除棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> ExpirePopup {
      get { return expirePopup_; }
    }

    /// <summary>Field number for the "freeTokenNum" field.</summary>
    public const int FreeTokenNumFieldNumber = 5;
    private int freeTokenNum_;
    /// <summary>
    /// 初始猜颜色数量
    /// （为空=0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTokenNum {
      get { return freeTokenNum_; }
      set {
        freeTokenNum_ = value;
      }
    }

    /// <summary>Field number for the "gradeId" field.</summary>
    public const int GradeIdFieldNumber = 6;
    private int gradeId_;
    /// <summary>
    /// 关卡信息
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （EventGuessDetail.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeId {
      get { return gradeId_; }
      set {
        gradeId_ = value;
      }
    }

    /// <summary>Field number for the "guessMainTheme" field.</summary>
    public const int GuessMainThemeFieldNumber = 7;
    private int guessMainTheme_;
    /// <summary>
    /// 活动主界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuessMainTheme {
      get { return guessMainTheme_; }
      set {
        guessMainTheme_ = value;
      }
    }

    /// <summary>Field number for the "helpPlayTheme" field.</summary>
    public const int HelpPlayThemeFieldNumber = 8;
    private int helpPlayTheme_;
    /// <summary>
    /// 玩法弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpPlayTheme {
      get { return helpPlayTheme_; }
      set {
        helpPlayTheme_ = value;
      }
    }

    /// <summary>Field number for the "loadingTheme" field.</summary>
    public const int LoadingThemeFieldNumber = 9;
    private int loadingTheme_;
    /// <summary>
    /// loading界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoadingTheme {
      get { return loadingTheme_; }
      set {
        loadingTheme_ = value;
      }
    }

    /// <summary>Field number for the "milestoneScoreId" field.</summary>
    public const int MilestoneScoreIdFieldNumber = 10;
    private int milestoneScoreId_;
    /// <summary>
    /// 里程碑代币ID
    /// （ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MilestoneScoreId {
      get { return milestoneScoreId_; }
      set {
        milestoneScoreId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 11;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recontinueTheme" field.</summary>
    public const int RecontinueThemeFieldNumber = 12;
    private int recontinueTheme_;
    /// <summary>
    /// 回收清算
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecontinueTheme {
      get { return recontinueTheme_; }
      set {
        recontinueTheme_ = value;
      }
    }

    /// <summary>Field number for the "requireScoreId" field.</summary>
    public const int RequireScoreIdFieldNumber = 13;
    private int requireScoreId_;
    /// <summary>
    /// 积分ID
    /// （ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireScoreId {
      get { return requireScoreId_; }
      set {
        requireScoreId_ = value;
      }
    }

    /// <summary>Field number for the "restartTheme" field.</summary>
    public const int RestartThemeFieldNumber = 14;
    private int restartTheme_;
    /// <summary>
    /// 新一轮弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RestartTheme {
      get { return restartTheme_; }
      set {
        restartTheme_ = value;
      }
    }

    /// <summary>Field number for the "rewardTheme" field.</summary>
    public const int RewardThemeFieldNumber = 15;
    private int rewardTheme_;
    /// <summary>
    /// 里程碑奖励界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardTheme {
      get { return rewardTheme_; }
      set {
        rewardTheme_ = value;
      }
    }

    /// <summary>Field number for the "startTheme" field.</summary>
    public const int StartThemeFieldNumber = 16;
    private int startTheme_;
    /// <summary>
    /// 开启弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTheme {
      get { return startTheme_; }
      set {
        startTheme_ = value;
      }
    }

    /// <summary>Field number for the "tokenId" field.</summary>
    public const int TokenIdFieldNumber = 17;
    private int tokenId_;
    /// <summary>
    /// 代币ID
    /// （ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TokenId {
      get { return tokenId_; }
      set {
        tokenId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventGuess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventGuess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (Cost != other.Cost) return false;
      if (!ExpirePopup.Equals(other.ExpirePopup)) return false;
      if (FreeTokenNum != other.FreeTokenNum) return false;
      if (GradeId != other.GradeId) return false;
      if (GuessMainTheme != other.GuessMainTheme) return false;
      if (HelpPlayTheme != other.HelpPlayTheme) return false;
      if (LoadingTheme != other.LoadingTheme) return false;
      if (MilestoneScoreId != other.MilestoneScoreId) return false;
      if (Name != other.Name) return false;
      if (RecontinueTheme != other.RecontinueTheme) return false;
      if (RequireScoreId != other.RequireScoreId) return false;
      if (RestartTheme != other.RestartTheme) return false;
      if (RewardTheme != other.RewardTheme) return false;
      if (StartTheme != other.StartTheme) return false;
      if (TokenId != other.TokenId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      hash ^= ExpirePopup.GetHashCode();
      if (FreeTokenNum != 0) hash ^= FreeTokenNum.GetHashCode();
      if (GradeId != 0) hash ^= GradeId.GetHashCode();
      if (GuessMainTheme != 0) hash ^= GuessMainTheme.GetHashCode();
      if (HelpPlayTheme != 0) hash ^= HelpPlayTheme.GetHashCode();
      if (LoadingTheme != 0) hash ^= LoadingTheme.GetHashCode();
      if (MilestoneScoreId != 0) hash ^= MilestoneScoreId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (RecontinueTheme != 0) hash ^= RecontinueTheme.GetHashCode();
      if (RequireScoreId != 0) hash ^= RequireScoreId.GetHashCode();
      if (RestartTheme != 0) hash ^= RestartTheme.GetHashCode();
      if (RewardTheme != 0) hash ^= RewardTheme.GetHashCode();
      if (StartTheme != 0) hash ^= StartTheme.GetHashCode();
      if (TokenId != 0) hash ^= TokenId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (Cost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cost);
      }
      expirePopup_.WriteTo(output, _map_expirePopup_codec);
      if (FreeTokenNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeTokenNum);
      }
      if (GradeId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GradeId);
      }
      if (GuessMainTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GuessMainTheme);
      }
      if (HelpPlayTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HelpPlayTheme);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LoadingTheme);
      }
      if (MilestoneScoreId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MilestoneScoreId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Name);
      }
      if (RecontinueTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RecontinueTheme);
      }
      if (RequireScoreId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(RequireScoreId);
      }
      if (RestartTheme != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RestartTheme);
      }
      if (RewardTheme != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(RewardTheme);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(StartTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(TokenId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (Cost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cost);
      }
      expirePopup_.WriteTo(ref output, _map_expirePopup_codec);
      if (FreeTokenNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeTokenNum);
      }
      if (GradeId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GradeId);
      }
      if (GuessMainTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GuessMainTheme);
      }
      if (HelpPlayTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HelpPlayTheme);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LoadingTheme);
      }
      if (MilestoneScoreId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MilestoneScoreId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Name);
      }
      if (RecontinueTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RecontinueTheme);
      }
      if (RequireScoreId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(RequireScoreId);
      }
      if (RestartTheme != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RestartTheme);
      }
      if (RewardTheme != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(RewardTheme);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(StartTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(TokenId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      size += expirePopup_.CalculateSize(_map_expirePopup_codec);
      if (FreeTokenNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTokenNum);
      }
      if (GradeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeId);
      }
      if (GuessMainTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuessMainTheme);
      }
      if (HelpPlayTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HelpPlayTheme);
      }
      if (LoadingTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoadingTheme);
      }
      if (MilestoneScoreId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MilestoneScoreId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (RecontinueTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecontinueTheme);
      }
      if (RequireScoreId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequireScoreId);
      }
      if (RestartTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RestartTheme);
      }
      if (RewardTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardTheme);
      }
      if (StartTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartTheme);
      }
      if (TokenId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TokenId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventGuess other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      expirePopup_.Add(other.expirePopup_);
      if (other.FreeTokenNum != 0) {
        FreeTokenNum = other.FreeTokenNum;
      }
      if (other.GradeId != 0) {
        GradeId = other.GradeId;
      }
      if (other.GuessMainTheme != 0) {
        GuessMainTheme = other.GuessMainTheme;
      }
      if (other.HelpPlayTheme != 0) {
        HelpPlayTheme = other.HelpPlayTheme;
      }
      if (other.LoadingTheme != 0) {
        LoadingTheme = other.LoadingTheme;
      }
      if (other.MilestoneScoreId != 0) {
        MilestoneScoreId = other.MilestoneScoreId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.RecontinueTheme != 0) {
        RecontinueTheme = other.RecontinueTheme;
      }
      if (other.RequireScoreId != 0) {
        RequireScoreId = other.RequireScoreId;
      }
      if (other.RestartTheme != 0) {
        RestartTheme = other.RestartTheme;
      }
      if (other.RewardTheme != 0) {
        RewardTheme = other.RewardTheme;
      }
      if (other.StartTheme != 0) {
        StartTheme = other.StartTheme;
      }
      if (other.TokenId != 0) {
        TokenId = other.TokenId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            Cost = input.ReadInt32();
            break;
          }
          case 34: {
            expirePopup_.AddEntriesFrom(input, _map_expirePopup_codec);
            break;
          }
          case 40: {
            FreeTokenNum = input.ReadInt32();
            break;
          }
          case 48: {
            GradeId = input.ReadInt32();
            break;
          }
          case 56: {
            GuessMainTheme = input.ReadInt32();
            break;
          }
          case 64: {
            HelpPlayTheme = input.ReadInt32();
            break;
          }
          case 72: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 80: {
            MilestoneScoreId = input.ReadInt32();
            break;
          }
          case 90: {
            Name = input.ReadString();
            break;
          }
          case 96: {
            RecontinueTheme = input.ReadInt32();
            break;
          }
          case 104: {
            RequireScoreId = input.ReadInt32();
            break;
          }
          case 112: {
            RestartTheme = input.ReadInt32();
            break;
          }
          case 120: {
            RewardTheme = input.ReadInt32();
            break;
          }
          case 128: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 136: {
            TokenId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            Cost = input.ReadInt32();
            break;
          }
          case 34: {
            expirePopup_.AddEntriesFrom(ref input, _map_expirePopup_codec);
            break;
          }
          case 40: {
            FreeTokenNum = input.ReadInt32();
            break;
          }
          case 48: {
            GradeId = input.ReadInt32();
            break;
          }
          case 56: {
            GuessMainTheme = input.ReadInt32();
            break;
          }
          case 64: {
            HelpPlayTheme = input.ReadInt32();
            break;
          }
          case 72: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 80: {
            MilestoneScoreId = input.ReadInt32();
            break;
          }
          case 90: {
            Name = input.ReadString();
            break;
          }
          case 96: {
            RecontinueTheme = input.ReadInt32();
            break;
          }
          case 104: {
            RequireScoreId = input.ReadInt32();
            break;
          }
          case 112: {
            RestartTheme = input.ReadInt32();
            break;
          }
          case 120: {
            RewardTheme = input.ReadInt32();
            break;
          }
          case 128: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 136: {
            TokenId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventGuessMapABValue : pb::IMessage<EventGuessMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventGuessMapABValue> _parser = new pb::MessageParser<EventGuessMapABValue>(() => new EventGuessMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventGuessMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventGuessConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventGuessMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventGuessMapABValue(EventGuessMapABValue other) : this() {
      eventGuessMap_ = other.eventGuessMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventGuessMapABValue Clone() {
      return new EventGuessMapABValue(this);
    }

    /// <summary>Field number for the "EventGuessMap" field.</summary>
    public const int EventGuessMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventGuess>.Codec _map_eventGuessMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventGuess>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventGuess.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventGuess> eventGuessMap_ = new pbc::MapField<int, global::fat.rawdata.EventGuess>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventGuess> EventGuessMap {
      get { return eventGuessMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventGuessMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventGuessMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventGuessMap.Equals(other.EventGuessMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventGuessMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventGuessMap_.WriteTo(output, _map_eventGuessMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventGuessMap_.WriteTo(ref output, _map_eventGuessMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventGuessMap_.CalculateSize(_map_eventGuessMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventGuessMapABValue other) {
      if (other == null) {
        return;
      }
      eventGuessMap_.Add(other.eventGuessMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventGuessMap_.AddEntriesFrom(input, _map_eventGuessMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventGuessMap_.AddEntriesFrom(ref input, _map_eventGuessMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventGuessConf : pb::IMessage<EventGuessConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventGuessConf> _parser = new pb::MessageParser<EventGuessConf>(() => new EventGuessConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventGuessConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventGuessConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventGuessConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventGuessConf(EventGuessConf other) : this() {
      eventGuessMap_ = other.eventGuessMap_.Clone();
      eventGuessMapAB_ = other.eventGuessMapAB_.Clone();
      eventGuessMapABPatch_ = other.eventGuessMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventGuessConf Clone() {
      return new EventGuessConf(this);
    }

    /// <summary>Field number for the "EventGuessMap" field.</summary>
    public const int EventGuessMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventGuess>.Codec _map_eventGuessMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventGuess>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventGuess.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventGuess> eventGuessMap_ = new pbc::MapField<int, global::fat.rawdata.EventGuess>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventGuess> EventGuessMap {
      get { return eventGuessMap_; }
    }

    /// <summary>Field number for the "EventGuessMapAB" field.</summary>
    public const int EventGuessMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventGuessMapABValue>.Codec _map_eventGuessMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventGuessMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventGuessMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventGuessMapABValue> eventGuessMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventGuessMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventGuessMapABValue> EventGuessMapAB {
      get { return eventGuessMapAB_; }
    }

    /// <summary>Field number for the "EventGuessMapABPatch" field.</summary>
    public const int EventGuessMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventGuessMapABValue>.Codec _map_eventGuessMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventGuessMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventGuessMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventGuessMapABValue> eventGuessMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventGuessMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventGuessMapABValue> EventGuessMapABPatch {
      get { return eventGuessMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventGuessConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventGuessConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventGuessMap.Equals(other.EventGuessMap)) return false;
      if (!EventGuessMapAB.Equals(other.EventGuessMapAB)) return false;
      if (!EventGuessMapABPatch.Equals(other.EventGuessMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventGuessMap.GetHashCode();
      hash ^= EventGuessMapAB.GetHashCode();
      hash ^= EventGuessMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventGuessMap_.WriteTo(output, _map_eventGuessMap_codec);
      eventGuessMapAB_.WriteTo(output, _map_eventGuessMapAB_codec);
      eventGuessMapABPatch_.WriteTo(output, _map_eventGuessMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventGuessMap_.WriteTo(ref output, _map_eventGuessMap_codec);
      eventGuessMapAB_.WriteTo(ref output, _map_eventGuessMapAB_codec);
      eventGuessMapABPatch_.WriteTo(ref output, _map_eventGuessMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventGuessMap_.CalculateSize(_map_eventGuessMap_codec);
      size += eventGuessMapAB_.CalculateSize(_map_eventGuessMapAB_codec);
      size += eventGuessMapABPatch_.CalculateSize(_map_eventGuessMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventGuessConf other) {
      if (other == null) {
        return;
      }
      eventGuessMap_.Add(other.eventGuessMap_);
      eventGuessMapAB_.Add(other.eventGuessMapAB_);
      eventGuessMapABPatch_.Add(other.eventGuessMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventGuessMap_.AddEntriesFrom(input, _map_eventGuessMap_codec);
            break;
          }
          case 18: {
            eventGuessMapAB_.AddEntriesFrom(input, _map_eventGuessMapAB_codec);
            break;
          }
          case 26: {
            eventGuessMapABPatch_.AddEntriesFrom(input, _map_eventGuessMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventGuessMap_.AddEntriesFrom(ref input, _map_eventGuessMap_codec);
            break;
          }
          case 18: {
            eventGuessMapAB_.AddEntriesFrom(ref input, _map_eventGuessMapAB_codec);
            break;
          }
          case 26: {
            eventGuessMapABPatch_.AddEntriesFrom(ref input, _map_eventGuessMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
