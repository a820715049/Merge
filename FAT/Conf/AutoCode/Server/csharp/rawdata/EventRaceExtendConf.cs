// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventRaceExtendConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventRaceExtendConf.proto</summary>
  public static partial class EventRaceExtendConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventRaceExtendConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventRaceExtendConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFyYXdkYXRhL0V2ZW50UmFjZUV4dGVuZENvbmYucHJvdG8SB3Jhd2RhdGEi",
            "oQIKD0V2ZW50UmFjZUV4dGVuZBIKCgJpZBgBIAEoBRIPCgdib2FyZElkGAIg",
            "ASgFEhQKDGN5Y2xlUm91bmRJZBgDIAEoBRIQCghlbmRUaGVtZRgEIAEoBRIS",
            "CgpldmVudFRoZW1lGAUgASgFEhIKCmV4dHJhU2NvcmUYBiABKAUSDwoHaXNM",
            "YXRlchgHIAEoCBIQCghpc1Jldml2ZRgIIAEoCBIVCg1ub3JtYWxSb3VuZElk",
            "GAkgAygFEhEKCXJhY2VUaGVtZRgKIAEoBRITCgtyZWZyZXNoVGltZRgLIAEo",
            "BRIWCg5yZXF1aXJlU2NvcmVJZBgMIAEoBRIWCg5yb3VuZE92ZXJUaGVtZRgN",
            "IAEoBRIPCgdzdWJUeXBlGA4gASgFIsgBChlFdmVudFJhY2VFeHRlbmRNYXBB",
            "QlZhbHVlElYKEkV2ZW50UmFjZUV4dGVuZE1hcBgBIAMoCzI6LnJhd2RhdGEu",
            "RXZlbnRSYWNlRXh0ZW5kTWFwQUJWYWx1ZS5FdmVudFJhY2VFeHRlbmRNYXBF",
            "bnRyeRpTChdFdmVudFJhY2VFeHRlbmRNYXBFbnRyeRILCgNrZXkYASABKAUS",
            "JwoFdmFsdWUYAiABKAsyGC5yYXdkYXRhLkV2ZW50UmFjZUV4dGVuZDoCOAEi",
            "uQQKE0V2ZW50UmFjZUV4dGVuZENvbmYSUAoSRXZlbnRSYWNlRXh0ZW5kTWFw",
            "GAEgAygLMjQucmF3ZGF0YS5FdmVudFJhY2VFeHRlbmRDb25mLkV2ZW50UmFj",
            "ZUV4dGVuZE1hcEVudHJ5ElQKFEV2ZW50UmFjZUV4dGVuZE1hcEFCGAIgAygL",
            "MjYucmF3ZGF0YS5FdmVudFJhY2VFeHRlbmRDb25mLkV2ZW50UmFjZUV4dGVu",
            "ZE1hcEFCRW50cnkSXgoZRXZlbnRSYWNlRXh0ZW5kTWFwQUJQYXRjaBgDIAMo",
            "CzI7LnJhd2RhdGEuRXZlbnRSYWNlRXh0ZW5kQ29uZi5FdmVudFJhY2VFeHRl",
            "bmRNYXBBQlBhdGNoRW50cnkaUwoXRXZlbnRSYWNlRXh0ZW5kTWFwRW50cnkS",
            "CwoDa2V5GAEgASgFEicKBXZhbHVlGAIgASgLMhgucmF3ZGF0YS5FdmVudFJh",
            "Y2VFeHRlbmQ6AjgBGl8KGUV2ZW50UmFjZUV4dGVuZE1hcEFCRW50cnkSCwoD",
            "a2V5GAEgASgJEjEKBXZhbHVlGAIgASgLMiIucmF3ZGF0YS5FdmVudFJhY2VF",
            "eHRlbmRNYXBBQlZhbHVlOgI4ARpkCh5FdmVudFJhY2VFeHRlbmRNYXBBQlBh",
            "dGNoRW50cnkSCwoDa2V5GAEgASgJEjEKBXZhbHVlGAIgASgLMiIucmF3ZGF0",
            "YS5FdmVudFJhY2VFeHRlbmRNYXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVu",
            "cGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3",
            "ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventRaceExtend), global::fat.rawdata.EventRaceExtend.Parser, new[]{ "Id", "BoardId", "CycleRoundId", "EndTheme", "EventTheme", "ExtraScore", "IsLater", "IsRevive", "NormalRoundId", "RaceTheme", "RefreshTime", "RequireScoreId", "RoundOverTheme", "SubType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventRaceExtendMapABValue), global::fat.rawdata.EventRaceExtendMapABValue.Parser, new[]{ "EventRaceExtendMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventRaceExtendConf), global::fat.rawdata.EventRaceExtendConf.Parser, new[]{ "EventRaceExtendMap", "EventRaceExtendMapAB", "EventRaceExtendMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventRaceExtend",table="EventRaceExtendMap",table_wrapper="EventRaceExtendConf",map="true",map_key_type="int32",data="EventRaceExtendConf")
  /// annotation@ab(table_ab="EventRaceExtendMapAB",table_ab_patch="EventRaceExtendMapABPatch",table_ab_value="EventRaceExtendMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventRaceExtend(id="id")
  /// </summary>
  public sealed partial class EventRaceExtend : pb::IMessage<EventRaceExtend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventRaceExtend> _parser = new pb::MessageParser<EventRaceExtend>(() => new EventRaceExtend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRaceExtend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventRaceExtendConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceExtend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceExtend(EventRaceExtend other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      cycleRoundId_ = other.cycleRoundId_;
      endTheme_ = other.endTheme_;
      eventTheme_ = other.eventTheme_;
      extraScore_ = other.extraScore_;
      isLater_ = other.isLater_;
      isRevive_ = other.isRevive_;
      normalRoundId_ = other.normalRoundId_.Clone();
      raceTheme_ = other.raceTheme_;
      refreshTime_ = other.refreshTime_;
      requireScoreId_ = other.requireScoreId_;
      roundOverTheme_ = other.roundOverTheme_;
      subType_ = other.subType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceExtend Clone() {
      return new EventRaceExtend(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 适用棋盘
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "cycleRoundId" field.</summary>
    public const int CycleRoundIdFieldNumber = 3;
    private int cycleRoundId_;
    /// <summary>
    /// 循环回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CycleRoundId {
      get { return cycleRoundId_; }
      set {
        cycleRoundId_ = value;
      }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 4;
    private int endTheme_;
    /// <summary>
    /// 活动结束弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 5;
    private int eventTheme_;
    /// <summary>
    /// 回合开启弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "extraScore" field.</summary>
    public const int ExtraScoreFieldNumber = 6;
    private int extraScore_;
    /// <summary>
    /// 积分模版
    /// （EventExtraScore.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraScore {
      get { return extraScore_; }
      set {
        extraScore_ = value;
      }
    }

    /// <summary>Field number for the "isLater" field.</summary>
    public const int IsLaterFieldNumber = 7;
    private bool isLater_;
    /// <summary>
    /// 是否允许稍后开启
    /// TRUE=开始面板有later按钮，允许稍后开启
    /// FALSE=开始面板只有start按钮，不允许稍后开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLater {
      get { return isLater_; }
      set {
        isLater_ = value;
      }
    }

    /// <summary>Field number for the "isRevive" field.</summary>
    public const int IsReviveFieldNumber = 8;
    private bool isRevive_;
    /// <summary>
    /// 是否重置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRevive {
      get { return isRevive_; }
      set {
        isRevive_ = value;
      }
    }

    /// <summary>Field number for the "normalRoundId" field.</summary>
    public const int NormalRoundIdFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_normalRoundId_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> normalRoundId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 普通回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NormalRoundId {
      get { return normalRoundId_; }
    }

    /// <summary>Field number for the "raceTheme" field.</summary>
    public const int RaceThemeFieldNumber = 10;
    private int raceTheme_;
    /// <summary>
    /// 排行界面
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RaceTheme {
      get { return raceTheme_; }
      set {
        raceTheme_ = value;
      }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 11;
    private int refreshTime_;
    /// <summary>
    /// 排行刷新间隔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    /// <summary>Field number for the "requireScoreId" field.</summary>
    public const int RequireScoreIdFieldNumber = 12;
    private int requireScoreId_;
    /// <summary>
    /// 积分ID
    /// （ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireScoreId {
      get { return requireScoreId_; }
      set {
        requireScoreId_ = value;
      }
    }

    /// <summary>Field number for the "roundOverTheme" field.</summary>
    public const int RoundOverThemeFieldNumber = 13;
    private int roundOverTheme_;
    /// <summary>
    /// 回合结束
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundOverTheme {
      get { return roundOverTheme_; }
      set {
        roundOverTheme_ = value;
      }
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 14;
    private int subType_;
    /// <summary>
    /// 子类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRaceExtend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRaceExtend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (CycleRoundId != other.CycleRoundId) return false;
      if (EndTheme != other.EndTheme) return false;
      if (EventTheme != other.EventTheme) return false;
      if (ExtraScore != other.ExtraScore) return false;
      if (IsLater != other.IsLater) return false;
      if (IsRevive != other.IsRevive) return false;
      if(!normalRoundId_.Equals(other.normalRoundId_)) return false;
      if (RaceTheme != other.RaceTheme) return false;
      if (RefreshTime != other.RefreshTime) return false;
      if (RequireScoreId != other.RequireScoreId) return false;
      if (RoundOverTheme != other.RoundOverTheme) return false;
      if (SubType != other.SubType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (CycleRoundId != 0) hash ^= CycleRoundId.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (ExtraScore != 0) hash ^= ExtraScore.GetHashCode();
      if (IsLater != false) hash ^= IsLater.GetHashCode();
      if (IsRevive != false) hash ^= IsRevive.GetHashCode();
      hash ^= normalRoundId_.GetHashCode();
      if (RaceTheme != 0) hash ^= RaceTheme.GetHashCode();
      if (RefreshTime != 0) hash ^= RefreshTime.GetHashCode();
      if (RequireScoreId != 0) hash ^= RequireScoreId.GetHashCode();
      if (RoundOverTheme != 0) hash ^= RoundOverTheme.GetHashCode();
      if (SubType != 0) hash ^= SubType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (CycleRoundId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CycleRoundId);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTheme);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EventTheme);
      }
      if (ExtraScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ExtraScore);
      }
      if (IsLater != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsLater);
      }
      if (IsRevive != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsRevive);
      }
      normalRoundId_.WriteTo(output, _repeated_normalRoundId_codec);
      if (RaceTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RaceTheme);
      }
      if (RefreshTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RefreshTime);
      }
      if (RequireScoreId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RequireScoreId);
      }
      if (RoundOverTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(RoundOverTheme);
      }
      if (SubType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SubType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (CycleRoundId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CycleRoundId);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTheme);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EventTheme);
      }
      if (ExtraScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ExtraScore);
      }
      if (IsLater != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsLater);
      }
      if (IsRevive != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsRevive);
      }
      normalRoundId_.WriteTo(ref output, _repeated_normalRoundId_codec);
      if (RaceTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RaceTheme);
      }
      if (RefreshTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RefreshTime);
      }
      if (RequireScoreId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RequireScoreId);
      }
      if (RoundOverTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(RoundOverTheme);
      }
      if (SubType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SubType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (CycleRoundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CycleRoundId);
      }
      if (EndTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (ExtraScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraScore);
      }
      if (IsLater != false) {
        size += 1 + 1;
      }
      if (IsRevive != false) {
        size += 1 + 1;
      }
      size += normalRoundId_.CalculateSize(_repeated_normalRoundId_codec);
      if (RaceTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RaceTheme);
      }
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshTime);
      }
      if (RequireScoreId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequireScoreId);
      }
      if (RoundOverTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundOverTheme);
      }
      if (SubType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRaceExtend other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.CycleRoundId != 0) {
        CycleRoundId = other.CycleRoundId;
      }
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.ExtraScore != 0) {
        ExtraScore = other.ExtraScore;
      }
      if (other.IsLater != false) {
        IsLater = other.IsLater;
      }
      if (other.IsRevive != false) {
        IsRevive = other.IsRevive;
      }
      normalRoundId_.Add(other.normalRoundId_);
      if (other.RaceTheme != 0) {
        RaceTheme = other.RaceTheme;
      }
      if (other.RefreshTime != 0) {
        RefreshTime = other.RefreshTime;
      }
      if (other.RequireScoreId != 0) {
        RequireScoreId = other.RequireScoreId;
      }
      if (other.RoundOverTheme != 0) {
        RoundOverTheme = other.RoundOverTheme;
      }
      if (other.SubType != 0) {
        SubType = other.SubType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            CycleRoundId = input.ReadInt32();
            break;
          }
          case 32: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 40: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 48: {
            ExtraScore = input.ReadInt32();
            break;
          }
          case 56: {
            IsLater = input.ReadBool();
            break;
          }
          case 64: {
            IsRevive = input.ReadBool();
            break;
          }
          case 74:
          case 72: {
            normalRoundId_.AddEntriesFrom(input, _repeated_normalRoundId_codec);
            break;
          }
          case 80: {
            RaceTheme = input.ReadInt32();
            break;
          }
          case 88: {
            RefreshTime = input.ReadInt32();
            break;
          }
          case 96: {
            RequireScoreId = input.ReadInt32();
            break;
          }
          case 104: {
            RoundOverTheme = input.ReadInt32();
            break;
          }
          case 112: {
            SubType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            CycleRoundId = input.ReadInt32();
            break;
          }
          case 32: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 40: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 48: {
            ExtraScore = input.ReadInt32();
            break;
          }
          case 56: {
            IsLater = input.ReadBool();
            break;
          }
          case 64: {
            IsRevive = input.ReadBool();
            break;
          }
          case 74:
          case 72: {
            normalRoundId_.AddEntriesFrom(ref input, _repeated_normalRoundId_codec);
            break;
          }
          case 80: {
            RaceTheme = input.ReadInt32();
            break;
          }
          case 88: {
            RefreshTime = input.ReadInt32();
            break;
          }
          case 96: {
            RequireScoreId = input.ReadInt32();
            break;
          }
          case 104: {
            RoundOverTheme = input.ReadInt32();
            break;
          }
          case 112: {
            SubType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventRaceExtendMapABValue : pb::IMessage<EventRaceExtendMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventRaceExtendMapABValue> _parser = new pb::MessageParser<EventRaceExtendMapABValue>(() => new EventRaceExtendMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRaceExtendMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventRaceExtendConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceExtendMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceExtendMapABValue(EventRaceExtendMapABValue other) : this() {
      eventRaceExtendMap_ = other.eventRaceExtendMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceExtendMapABValue Clone() {
      return new EventRaceExtendMapABValue(this);
    }

    /// <summary>Field number for the "EventRaceExtendMap" field.</summary>
    public const int EventRaceExtendMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventRaceExtend>.Codec _map_eventRaceExtendMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventRaceExtend>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRaceExtend.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventRaceExtend> eventRaceExtendMap_ = new pbc::MapField<int, global::fat.rawdata.EventRaceExtend>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventRaceExtend> EventRaceExtendMap {
      get { return eventRaceExtendMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRaceExtendMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRaceExtendMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventRaceExtendMap.Equals(other.EventRaceExtendMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventRaceExtendMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventRaceExtendMap_.WriteTo(output, _map_eventRaceExtendMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventRaceExtendMap_.WriteTo(ref output, _map_eventRaceExtendMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventRaceExtendMap_.CalculateSize(_map_eventRaceExtendMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRaceExtendMapABValue other) {
      if (other == null) {
        return;
      }
      eventRaceExtendMap_.Add(other.eventRaceExtendMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventRaceExtendMap_.AddEntriesFrom(input, _map_eventRaceExtendMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventRaceExtendMap_.AddEntriesFrom(ref input, _map_eventRaceExtendMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventRaceExtendConf : pb::IMessage<EventRaceExtendConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventRaceExtendConf> _parser = new pb::MessageParser<EventRaceExtendConf>(() => new EventRaceExtendConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRaceExtendConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventRaceExtendConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceExtendConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceExtendConf(EventRaceExtendConf other) : this() {
      eventRaceExtendMap_ = other.eventRaceExtendMap_.Clone();
      eventRaceExtendMapAB_ = other.eventRaceExtendMapAB_.Clone();
      eventRaceExtendMapABPatch_ = other.eventRaceExtendMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceExtendConf Clone() {
      return new EventRaceExtendConf(this);
    }

    /// <summary>Field number for the "EventRaceExtendMap" field.</summary>
    public const int EventRaceExtendMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventRaceExtend>.Codec _map_eventRaceExtendMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventRaceExtend>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRaceExtend.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventRaceExtend> eventRaceExtendMap_ = new pbc::MapField<int, global::fat.rawdata.EventRaceExtend>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventRaceExtend> EventRaceExtendMap {
      get { return eventRaceExtendMap_; }
    }

    /// <summary>Field number for the "EventRaceExtendMapAB" field.</summary>
    public const int EventRaceExtendMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventRaceExtendMapABValue>.Codec _map_eventRaceExtendMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventRaceExtendMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRaceExtendMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventRaceExtendMapABValue> eventRaceExtendMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventRaceExtendMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventRaceExtendMapABValue> EventRaceExtendMapAB {
      get { return eventRaceExtendMapAB_; }
    }

    /// <summary>Field number for the "EventRaceExtendMapABPatch" field.</summary>
    public const int EventRaceExtendMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventRaceExtendMapABValue>.Codec _map_eventRaceExtendMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventRaceExtendMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRaceExtendMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventRaceExtendMapABValue> eventRaceExtendMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventRaceExtendMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventRaceExtendMapABValue> EventRaceExtendMapABPatch {
      get { return eventRaceExtendMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRaceExtendConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRaceExtendConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventRaceExtendMap.Equals(other.EventRaceExtendMap)) return false;
      if (!EventRaceExtendMapAB.Equals(other.EventRaceExtendMapAB)) return false;
      if (!EventRaceExtendMapABPatch.Equals(other.EventRaceExtendMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventRaceExtendMap.GetHashCode();
      hash ^= EventRaceExtendMapAB.GetHashCode();
      hash ^= EventRaceExtendMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventRaceExtendMap_.WriteTo(output, _map_eventRaceExtendMap_codec);
      eventRaceExtendMapAB_.WriteTo(output, _map_eventRaceExtendMapAB_codec);
      eventRaceExtendMapABPatch_.WriteTo(output, _map_eventRaceExtendMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventRaceExtendMap_.WriteTo(ref output, _map_eventRaceExtendMap_codec);
      eventRaceExtendMapAB_.WriteTo(ref output, _map_eventRaceExtendMapAB_codec);
      eventRaceExtendMapABPatch_.WriteTo(ref output, _map_eventRaceExtendMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventRaceExtendMap_.CalculateSize(_map_eventRaceExtendMap_codec);
      size += eventRaceExtendMapAB_.CalculateSize(_map_eventRaceExtendMapAB_codec);
      size += eventRaceExtendMapABPatch_.CalculateSize(_map_eventRaceExtendMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRaceExtendConf other) {
      if (other == null) {
        return;
      }
      eventRaceExtendMap_.Add(other.eventRaceExtendMap_);
      eventRaceExtendMapAB_.Add(other.eventRaceExtendMapAB_);
      eventRaceExtendMapABPatch_.Add(other.eventRaceExtendMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventRaceExtendMap_.AddEntriesFrom(input, _map_eventRaceExtendMap_codec);
            break;
          }
          case 18: {
            eventRaceExtendMapAB_.AddEntriesFrom(input, _map_eventRaceExtendMapAB_codec);
            break;
          }
          case 26: {
            eventRaceExtendMapABPatch_.AddEntriesFrom(input, _map_eventRaceExtendMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventRaceExtendMap_.AddEntriesFrom(ref input, _map_eventRaceExtendMap_codec);
            break;
          }
          case 18: {
            eventRaceExtendMapAB_.AddEntriesFrom(ref input, _map_eventRaceExtendMapAB_codec);
            break;
          }
          case 26: {
            eventRaceExtendMapABPatch_.AddEntriesFrom(ref input, _map_eventRaceExtendMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
