// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/MonopolyGridConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/MonopolyGridConf.proto</summary>
  public static partial class MonopolyGridConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/MonopolyGridConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonopolyGridConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5yYXdkYXRhL01vbm9wb2x5R3JpZENvbmYucHJvdG8SB3Jhd2RhdGEiZgoM",
            "TW9ub3BvbHlHcmlkEgoKAmlkGAEgASgFEgwKBGRyb3AYAiADKAkSEQoJZHJv",
            "cFRpbWVzGAMgASgFEhQKDGdyaWRBYm92ZUltZxgEIAEoCRITCgtncmlkQmFz",
            "ZUltZxgFIAEoCSK2AQoWTW9ub3BvbHlHcmlkTWFwQUJWYWx1ZRJNCg9Nb25v",
            "cG9seUdyaWRNYXAYASADKAsyNC5yYXdkYXRhLk1vbm9wb2x5R3JpZE1hcEFC",
            "VmFsdWUuTW9ub3BvbHlHcmlkTWFwRW50cnkaTQoUTW9ub3BvbHlHcmlkTWFw",
            "RW50cnkSCwoDa2V5GAEgASgFEiQKBXZhbHVlGAIgASgLMhUucmF3ZGF0YS5N",
            "b25vcG9seUdyaWQ6AjgBIokEChBNb25vcG9seUdyaWRDb25mEkcKD01vbm9w",
            "b2x5R3JpZE1hcBgBIAMoCzIuLnJhd2RhdGEuTW9ub3BvbHlHcmlkQ29uZi5N",
            "b25vcG9seUdyaWRNYXBFbnRyeRJLChFNb25vcG9seUdyaWRNYXBBQhgCIAMo",
            "CzIwLnJhd2RhdGEuTW9ub3BvbHlHcmlkQ29uZi5Nb25vcG9seUdyaWRNYXBB",
            "QkVudHJ5ElUKFk1vbm9wb2x5R3JpZE1hcEFCUGF0Y2gYAyADKAsyNS5yYXdk",
            "YXRhLk1vbm9wb2x5R3JpZENvbmYuTW9ub3BvbHlHcmlkTWFwQUJQYXRjaEVu",
            "dHJ5Gk0KFE1vbm9wb2x5R3JpZE1hcEVudHJ5EgsKA2tleRgBIAEoBRIkCgV2",
            "YWx1ZRgCIAEoCzIVLnJhd2RhdGEuTW9ub3BvbHlHcmlkOgI4ARpZChZNb25v",
            "cG9seUdyaWRNYXBBQkVudHJ5EgsKA2tleRgBIAEoCRIuCgV2YWx1ZRgCIAEo",
            "CzIfLnJhd2RhdGEuTW9ub3BvbHlHcmlkTWFwQUJWYWx1ZToCOAEaXgobTW9u",
            "b3BvbHlHcmlkTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIuCgV2YWx1",
            "ZRgCIAEoCzIfLnJhd2RhdGEuTW9ub3BvbHlHcmlkTWFwQUJWYWx1ZToCOAFC",
            "PVotZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdk",
            "YXRhqgILZmF0LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MonopolyGrid), global::fat.rawdata.MonopolyGrid.Parser, new[]{ "Id", "Drop", "DropTimes", "GridAboveImg", "GridBaseImg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MonopolyGridMapABValue), global::fat.rawdata.MonopolyGridMapABValue.Parser, new[]{ "MonopolyGridMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MonopolyGridConf), global::fat.rawdata.MonopolyGridConf.Parser, new[]{ "MonopolyGridMap", "MonopolyGridMapAB", "MonopolyGridMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="MonopolyGrid",table="MonopolyGridMap",table_wrapper="MonopolyGridConf",map="true",map_key_type="int32",data="MonopolyGridConf")
  /// annotation@ab(table_ab="MonopolyGridMapAB",table_ab_patch="MonopolyGridMapABPatch",table_ab_value="MonopolyGridMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@MonopolyGrid(id="id")
  /// </summary>
  public sealed partial class MonopolyGrid : pb::IMessage<MonopolyGrid>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonopolyGrid> _parser = new pb::MessageParser<MonopolyGrid>(() => new MonopolyGrid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonopolyGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MonopolyGridConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyGrid(MonopolyGrid other) : this() {
      id_ = other.id_;
      drop_ = other.drop_.Clone();
      dropTimes_ = other.dropTimes_;
      gridAboveImg_ = other.gridAboveImg_;
      gridBaseImg_ = other.gridBaseImg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyGrid Clone() {
      return new MonopolyGrid(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 格子id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "drop" field.</summary>
    public const int DropFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_drop_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> drop_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 格子掉落
    /// （棋子id:权重）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Drop {
      get { return drop_; }
    }

    /// <summary>Field number for the "dropTimes" field.</summary>
    public const int DropTimesFieldNumber = 3;
    private int dropTimes_;
    /// <summary>
    /// 掉落次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropTimes {
      get { return dropTimes_; }
      set {
        dropTimes_ = value;
      }
    }

    /// <summary>Field number for the "gridAboveImg" field.</summary>
    public const int GridAboveImgFieldNumber = 4;
    private string gridAboveImg_ = "";
    /// <summary>
    /// 格子上方悬浮物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GridAboveImg {
      get { return gridAboveImg_; }
      set {
        gridAboveImg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gridBaseImg" field.</summary>
    public const int GridBaseImgFieldNumber = 5;
    private string gridBaseImg_ = "";
    /// <summary>
    /// 格子底座图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GridBaseImg {
      get { return gridBaseImg_; }
      set {
        gridBaseImg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonopolyGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonopolyGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!drop_.Equals(other.drop_)) return false;
      if (DropTimes != other.DropTimes) return false;
      if (GridAboveImg != other.GridAboveImg) return false;
      if (GridBaseImg != other.GridBaseImg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= drop_.GetHashCode();
      if (DropTimes != 0) hash ^= DropTimes.GetHashCode();
      if (GridAboveImg.Length != 0) hash ^= GridAboveImg.GetHashCode();
      if (GridBaseImg.Length != 0) hash ^= GridBaseImg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      drop_.WriteTo(output, _repeated_drop_codec);
      if (DropTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DropTimes);
      }
      if (GridAboveImg.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GridAboveImg);
      }
      if (GridBaseImg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GridBaseImg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      drop_.WriteTo(ref output, _repeated_drop_codec);
      if (DropTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DropTimes);
      }
      if (GridAboveImg.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GridAboveImg);
      }
      if (GridBaseImg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GridBaseImg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += drop_.CalculateSize(_repeated_drop_codec);
      if (DropTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DropTimes);
      }
      if (GridAboveImg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GridAboveImg);
      }
      if (GridBaseImg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GridBaseImg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonopolyGrid other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      drop_.Add(other.drop_);
      if (other.DropTimes != 0) {
        DropTimes = other.DropTimes;
      }
      if (other.GridAboveImg.Length != 0) {
        GridAboveImg = other.GridAboveImg;
      }
      if (other.GridBaseImg.Length != 0) {
        GridBaseImg = other.GridBaseImg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            drop_.AddEntriesFrom(input, _repeated_drop_codec);
            break;
          }
          case 24: {
            DropTimes = input.ReadInt32();
            break;
          }
          case 34: {
            GridAboveImg = input.ReadString();
            break;
          }
          case 42: {
            GridBaseImg = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            drop_.AddEntriesFrom(ref input, _repeated_drop_codec);
            break;
          }
          case 24: {
            DropTimes = input.ReadInt32();
            break;
          }
          case 34: {
            GridAboveImg = input.ReadString();
            break;
          }
          case 42: {
            GridBaseImg = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MonopolyGridMapABValue : pb::IMessage<MonopolyGridMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonopolyGridMapABValue> _parser = new pb::MessageParser<MonopolyGridMapABValue>(() => new MonopolyGridMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonopolyGridMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MonopolyGridConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyGridMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyGridMapABValue(MonopolyGridMapABValue other) : this() {
      monopolyGridMap_ = other.monopolyGridMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyGridMapABValue Clone() {
      return new MonopolyGridMapABValue(this);
    }

    /// <summary>Field number for the "MonopolyGridMap" field.</summary>
    public const int MonopolyGridMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MonopolyGrid>.Codec _map_monopolyGridMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MonopolyGrid>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyGrid.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MonopolyGrid> monopolyGridMap_ = new pbc::MapField<int, global::fat.rawdata.MonopolyGrid>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MonopolyGrid> MonopolyGridMap {
      get { return monopolyGridMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonopolyGridMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonopolyGridMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MonopolyGridMap.Equals(other.MonopolyGridMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MonopolyGridMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      monopolyGridMap_.WriteTo(output, _map_monopolyGridMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      monopolyGridMap_.WriteTo(ref output, _map_monopolyGridMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monopolyGridMap_.CalculateSize(_map_monopolyGridMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonopolyGridMapABValue other) {
      if (other == null) {
        return;
      }
      monopolyGridMap_.Add(other.monopolyGridMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            monopolyGridMap_.AddEntriesFrom(input, _map_monopolyGridMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            monopolyGridMap_.AddEntriesFrom(ref input, _map_monopolyGridMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MonopolyGridConf : pb::IMessage<MonopolyGridConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonopolyGridConf> _parser = new pb::MessageParser<MonopolyGridConf>(() => new MonopolyGridConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonopolyGridConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MonopolyGridConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyGridConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyGridConf(MonopolyGridConf other) : this() {
      monopolyGridMap_ = other.monopolyGridMap_.Clone();
      monopolyGridMapAB_ = other.monopolyGridMapAB_.Clone();
      monopolyGridMapABPatch_ = other.monopolyGridMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonopolyGridConf Clone() {
      return new MonopolyGridConf(this);
    }

    /// <summary>Field number for the "MonopolyGridMap" field.</summary>
    public const int MonopolyGridMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MonopolyGrid>.Codec _map_monopolyGridMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MonopolyGrid>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyGrid.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MonopolyGrid> monopolyGridMap_ = new pbc::MapField<int, global::fat.rawdata.MonopolyGrid>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MonopolyGrid> MonopolyGridMap {
      get { return monopolyGridMap_; }
    }

    /// <summary>Field number for the "MonopolyGridMapAB" field.</summary>
    public const int MonopolyGridMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.MonopolyGridMapABValue>.Codec _map_monopolyGridMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.MonopolyGridMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyGridMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.MonopolyGridMapABValue> monopolyGridMapAB_ = new pbc::MapField<string, global::fat.rawdata.MonopolyGridMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MonopolyGridMapABValue> MonopolyGridMapAB {
      get { return monopolyGridMapAB_; }
    }

    /// <summary>Field number for the "MonopolyGridMapABPatch" field.</summary>
    public const int MonopolyGridMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.MonopolyGridMapABValue>.Codec _map_monopolyGridMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.MonopolyGridMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MonopolyGridMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.MonopolyGridMapABValue> monopolyGridMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.MonopolyGridMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MonopolyGridMapABValue> MonopolyGridMapABPatch {
      get { return monopolyGridMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonopolyGridConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonopolyGridConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MonopolyGridMap.Equals(other.MonopolyGridMap)) return false;
      if (!MonopolyGridMapAB.Equals(other.MonopolyGridMapAB)) return false;
      if (!MonopolyGridMapABPatch.Equals(other.MonopolyGridMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MonopolyGridMap.GetHashCode();
      hash ^= MonopolyGridMapAB.GetHashCode();
      hash ^= MonopolyGridMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      monopolyGridMap_.WriteTo(output, _map_monopolyGridMap_codec);
      monopolyGridMapAB_.WriteTo(output, _map_monopolyGridMapAB_codec);
      monopolyGridMapABPatch_.WriteTo(output, _map_monopolyGridMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      monopolyGridMap_.WriteTo(ref output, _map_monopolyGridMap_codec);
      monopolyGridMapAB_.WriteTo(ref output, _map_monopolyGridMapAB_codec);
      monopolyGridMapABPatch_.WriteTo(ref output, _map_monopolyGridMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monopolyGridMap_.CalculateSize(_map_monopolyGridMap_codec);
      size += monopolyGridMapAB_.CalculateSize(_map_monopolyGridMapAB_codec);
      size += monopolyGridMapABPatch_.CalculateSize(_map_monopolyGridMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonopolyGridConf other) {
      if (other == null) {
        return;
      }
      monopolyGridMap_.Add(other.monopolyGridMap_);
      monopolyGridMapAB_.Add(other.monopolyGridMapAB_);
      monopolyGridMapABPatch_.Add(other.monopolyGridMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            monopolyGridMap_.AddEntriesFrom(input, _map_monopolyGridMap_codec);
            break;
          }
          case 18: {
            monopolyGridMapAB_.AddEntriesFrom(input, _map_monopolyGridMapAB_codec);
            break;
          }
          case 26: {
            monopolyGridMapABPatch_.AddEntriesFrom(input, _map_monopolyGridMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            monopolyGridMap_.AddEntriesFrom(ref input, _map_monopolyGridMap_codec);
            break;
          }
          case 18: {
            monopolyGridMapAB_.AddEntriesFrom(ref input, _map_monopolyGridMapAB_codec);
            break;
          }
          case 26: {
            monopolyGridMapABPatch_.AddEntriesFrom(ref input, _map_monopolyGridMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
