// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventMineConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventMineConf.proto</summary>
  public static partial class EventMineConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventMineConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventMineConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtyYXdkYXRhL0V2ZW50TWluZUNvbmYucHJvdG8SB3Jhd2RhdGEiqAIKCUV2",
            "ZW50TWluZRIKCgJpZBgBIAEoBRITCgtiYW5uZXJUaGVtZRgMIAEoBRISCgpi",
            "b2FyZFRoZW1lGAIgASgFEhQKDGJvbnVzSXRlbU1heBgOIAMoBRIWCg5lbmRS",
            "ZXdhcmRUaGVtZRgDIAEoBRIQCghlbmRUaGVtZRgEIAEoBRISCgpldmVudFRo",
            "ZW1lGAUgASgFEg8KB2dyYWRlSWQYBiABKAUSFQoNaGFuZGJvb2tUaGVtZRgH",
            "IAEoBRIRCgloZWxwVGhlbWUYCCABKAUSFAoMbG9hZGluZ1RoZW1lGA0gASgF",
            "EhYKDm1pbGVzdG9uZVRoZW1lGAkgASgFEg8KB3Rva2VuSWQYCiABKAUSGAoQ",
            "dG9rZW5NaWxlc3RvbmVJZBgLIAMoBSKkAQoTRXZlbnRNaW5lTWFwQUJWYWx1",
            "ZRJECgxFdmVudE1pbmVNYXAYASADKAsyLi5yYXdkYXRhLkV2ZW50TWluZU1h",
            "cEFCVmFsdWUuRXZlbnRNaW5lTWFwRW50cnkaRwoRRXZlbnRNaW5lTWFwRW50",
            "cnkSCwoDa2V5GAEgASgFEiEKBXZhbHVlGAIgASgLMhIucmF3ZGF0YS5FdmVu",
            "dE1pbmU6AjgBItkDCg1FdmVudE1pbmVDb25mEj4KDEV2ZW50TWluZU1hcBgB",
            "IAMoCzIoLnJhd2RhdGEuRXZlbnRNaW5lQ29uZi5FdmVudE1pbmVNYXBFbnRy",
            "eRJCCg5FdmVudE1pbmVNYXBBQhgCIAMoCzIqLnJhd2RhdGEuRXZlbnRNaW5l",
            "Q29uZi5FdmVudE1pbmVNYXBBQkVudHJ5EkwKE0V2ZW50TWluZU1hcEFCUGF0",
            "Y2gYAyADKAsyLy5yYXdkYXRhLkV2ZW50TWluZUNvbmYuRXZlbnRNaW5lTWFw",
            "QUJQYXRjaEVudHJ5GkcKEUV2ZW50TWluZU1hcEVudHJ5EgsKA2tleRgBIAEo",
            "BRIhCgV2YWx1ZRgCIAEoCzISLnJhd2RhdGEuRXZlbnRNaW5lOgI4ARpTChNF",
            "dmVudE1pbmVNYXBBQkVudHJ5EgsKA2tleRgBIAEoCRIrCgV2YWx1ZRgCIAEo",
            "CzIcLnJhd2RhdGEuRXZlbnRNaW5lTWFwQUJWYWx1ZToCOAEaWAoYRXZlbnRN",
            "aW5lTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIrCgV2YWx1ZRgCIAEo",
            "CzIcLnJhd2RhdGEuRXZlbnRNaW5lTWFwQUJWYWx1ZToCOAFCPVotZ2l0bGFi",
            "LmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdkYXRhqgILZmF0",
            "LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMine), global::fat.rawdata.EventMine.Parser, new[]{ "Id", "BannerTheme", "BoardTheme", "BonusItemMax", "EndRewardTheme", "EndTheme", "EventTheme", "GradeId", "HandbookTheme", "HelpTheme", "LoadingTheme", "MilestoneTheme", "TokenId", "TokenMilestoneId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMineMapABValue), global::fat.rawdata.EventMineMapABValue.Parser, new[]{ "EventMineMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMineConf), global::fat.rawdata.EventMineConf.Parser, new[]{ "EventMineMap", "EventMineMapAB", "EventMineMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventMine",table="EventMineMap",table_wrapper="EventMineConf",map="true",map_key_type="int32",data="EventMineConf")
  /// annotation@ab(table_ab="EventMineMapAB",table_ab_patch="EventMineMapABPatch",table_ab_value="EventMineMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventMine(id="id")
  /// </summary>
  public sealed partial class EventMine : pb::IMessage<EventMine>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMine> _parser = new pb::MessageParser<EventMine>(() => new EventMine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMineConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMine(EventMine other) : this() {
      id_ = other.id_;
      bannerTheme_ = other.bannerTheme_;
      boardTheme_ = other.boardTheme_;
      bonusItemMax_ = other.bonusItemMax_.Clone();
      endRewardTheme_ = other.endRewardTheme_;
      endTheme_ = other.endTheme_;
      eventTheme_ = other.eventTheme_;
      gradeId_ = other.gradeId_;
      handbookTheme_ = other.handbookTheme_;
      helpTheme_ = other.helpTheme_;
      loadingTheme_ = other.loadingTheme_;
      milestoneTheme_ = other.milestoneTheme_;
      tokenId_ = other.tokenId_;
      tokenMilestoneId_ = other.tokenMilestoneId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMine Clone() {
      return new EventMine(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动 id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "bannerTheme" field.</summary>
    public const int BannerThemeFieldNumber = 12;
    private int bannerTheme_;
    /// <summary>
    /// 庆祝横幅
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BannerTheme {
      get { return bannerTheme_; }
      set {
        bannerTheme_ = value;
      }
    }

    /// <summary>Field number for the "boardTheme" field.</summary>
    public const int BoardThemeFieldNumber = 2;
    private int boardTheme_;
    /// <summary>
    /// 棋盘
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardTheme {
      get { return boardTheme_; }
      set {
        boardTheme_ = value;
      }
    }

    /// <summary>Field number for the "bonusItemMax" field.</summary>
    public const int BonusItemMaxFieldNumber = 14;
    private static readonly pb::FieldCodec<int> _repeated_bonusItemMax_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> bonusItemMax_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// milestone 满级棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BonusItemMax {
      get { return bonusItemMax_; }
    }

    /// <summary>Field number for the "endRewardTheme" field.</summary>
    public const int EndRewardThemeFieldNumber = 3;
    private int endRewardTheme_;
    /// <summary>
    /// 补领
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndRewardTheme {
      get { return endRewardTheme_; }
      set {
        endRewardTheme_ = value;
      }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 4;
    private int endTheme_;
    /// <summary>
    /// 结束
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 5;
    private int eventTheme_;
    /// <summary>
    /// 开启
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "gradeId" field.</summary>
    public const int GradeIdFieldNumber = 6;
    private int gradeId_;
    /// <summary>
    /// 分层
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （EventMineGroup.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeId {
      get { return gradeId_; }
      set {
        gradeId_ = value;
      }
    }

    /// <summary>Field number for the "handbookTheme" field.</summary>
    public const int HandbookThemeFieldNumber = 7;
    private int handbookTheme_;
    /// <summary>
    /// 图鉴
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandbookTheme {
      get { return handbookTheme_; }
      set {
        handbookTheme_ = value;
      }
    }

    /// <summary>Field number for the "helpTheme" field.</summary>
    public const int HelpThemeFieldNumber = 8;
    private int helpTheme_;
    /// <summary>
    /// 帮助
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpTheme {
      get { return helpTheme_; }
      set {
        helpTheme_ = value;
      }
    }

    /// <summary>Field number for the "loadingTheme" field.</summary>
    public const int LoadingThemeFieldNumber = 13;
    private int loadingTheme_;
    /// <summary>
    /// loading
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoadingTheme {
      get { return loadingTheme_; }
      set {
        loadingTheme_ = value;
      }
    }

    /// <summary>Field number for the "milestoneTheme" field.</summary>
    public const int MilestoneThemeFieldNumber = 9;
    private int milestoneTheme_;
    /// <summary>
    /// 阶段奖励界面
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MilestoneTheme {
      get { return milestoneTheme_; }
      set {
        milestoneTheme_ = value;
      }
    }

    /// <summary>Field number for the "tokenId" field.</summary>
    public const int TokenIdFieldNumber = 10;
    private int tokenId_;
    /// <summary>
    /// 消耗 token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TokenId {
      get { return tokenId_; }
      set {
        tokenId_ = value;
      }
    }

    /// <summary>Field number for the "tokenMilestoneId" field.</summary>
    public const int TokenMilestoneIdFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_tokenMilestoneId_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> tokenMilestoneId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 进度 token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TokenMilestoneId {
      get { return tokenMilestoneId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BannerTheme != other.BannerTheme) return false;
      if (BoardTheme != other.BoardTheme) return false;
      if(!bonusItemMax_.Equals(other.bonusItemMax_)) return false;
      if (EndRewardTheme != other.EndRewardTheme) return false;
      if (EndTheme != other.EndTheme) return false;
      if (EventTheme != other.EventTheme) return false;
      if (GradeId != other.GradeId) return false;
      if (HandbookTheme != other.HandbookTheme) return false;
      if (HelpTheme != other.HelpTheme) return false;
      if (LoadingTheme != other.LoadingTheme) return false;
      if (MilestoneTheme != other.MilestoneTheme) return false;
      if (TokenId != other.TokenId) return false;
      if(!tokenMilestoneId_.Equals(other.tokenMilestoneId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BannerTheme != 0) hash ^= BannerTheme.GetHashCode();
      if (BoardTheme != 0) hash ^= BoardTheme.GetHashCode();
      hash ^= bonusItemMax_.GetHashCode();
      if (EndRewardTheme != 0) hash ^= EndRewardTheme.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (GradeId != 0) hash ^= GradeId.GetHashCode();
      if (HandbookTheme != 0) hash ^= HandbookTheme.GetHashCode();
      if (HelpTheme != 0) hash ^= HelpTheme.GetHashCode();
      if (LoadingTheme != 0) hash ^= LoadingTheme.GetHashCode();
      if (MilestoneTheme != 0) hash ^= MilestoneTheme.GetHashCode();
      if (TokenId != 0) hash ^= TokenId.GetHashCode();
      hash ^= tokenMilestoneId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardTheme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardTheme);
      }
      if (EndRewardTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndRewardTheme);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTheme);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EventTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GradeId);
      }
      if (HandbookTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HandbookTheme);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HelpTheme);
      }
      if (MilestoneTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MilestoneTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TokenId);
      }
      tokenMilestoneId_.WriteTo(output, _repeated_tokenMilestoneId_codec);
      if (BannerTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BannerTheme);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LoadingTheme);
      }
      bonusItemMax_.WriteTo(output, _repeated_bonusItemMax_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardTheme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardTheme);
      }
      if (EndRewardTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndRewardTheme);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTheme);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EventTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GradeId);
      }
      if (HandbookTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HandbookTheme);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HelpTheme);
      }
      if (MilestoneTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MilestoneTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TokenId);
      }
      tokenMilestoneId_.WriteTo(ref output, _repeated_tokenMilestoneId_codec);
      if (BannerTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BannerTheme);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LoadingTheme);
      }
      bonusItemMax_.WriteTo(ref output, _repeated_bonusItemMax_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BannerTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BannerTheme);
      }
      if (BoardTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardTheme);
      }
      size += bonusItemMax_.CalculateSize(_repeated_bonusItemMax_codec);
      if (EndRewardTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndRewardTheme);
      }
      if (EndTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (GradeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeId);
      }
      if (HandbookTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandbookTheme);
      }
      if (HelpTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HelpTheme);
      }
      if (LoadingTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoadingTheme);
      }
      if (MilestoneTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MilestoneTheme);
      }
      if (TokenId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TokenId);
      }
      size += tokenMilestoneId_.CalculateSize(_repeated_tokenMilestoneId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMine other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BannerTheme != 0) {
        BannerTheme = other.BannerTheme;
      }
      if (other.BoardTheme != 0) {
        BoardTheme = other.BoardTheme;
      }
      bonusItemMax_.Add(other.bonusItemMax_);
      if (other.EndRewardTheme != 0) {
        EndRewardTheme = other.EndRewardTheme;
      }
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.GradeId != 0) {
        GradeId = other.GradeId;
      }
      if (other.HandbookTheme != 0) {
        HandbookTheme = other.HandbookTheme;
      }
      if (other.HelpTheme != 0) {
        HelpTheme = other.HelpTheme;
      }
      if (other.LoadingTheme != 0) {
        LoadingTheme = other.LoadingTheme;
      }
      if (other.MilestoneTheme != 0) {
        MilestoneTheme = other.MilestoneTheme;
      }
      if (other.TokenId != 0) {
        TokenId = other.TokenId;
      }
      tokenMilestoneId_.Add(other.tokenMilestoneId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardTheme = input.ReadInt32();
            break;
          }
          case 24: {
            EndRewardTheme = input.ReadInt32();
            break;
          }
          case 32: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 40: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 48: {
            GradeId = input.ReadInt32();
            break;
          }
          case 56: {
            HandbookTheme = input.ReadInt32();
            break;
          }
          case 64: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 72: {
            MilestoneTheme = input.ReadInt32();
            break;
          }
          case 80: {
            TokenId = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            tokenMilestoneId_.AddEntriesFrom(input, _repeated_tokenMilestoneId_codec);
            break;
          }
          case 96: {
            BannerTheme = input.ReadInt32();
            break;
          }
          case 104: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 114:
          case 112: {
            bonusItemMax_.AddEntriesFrom(input, _repeated_bonusItemMax_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardTheme = input.ReadInt32();
            break;
          }
          case 24: {
            EndRewardTheme = input.ReadInt32();
            break;
          }
          case 32: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 40: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 48: {
            GradeId = input.ReadInt32();
            break;
          }
          case 56: {
            HandbookTheme = input.ReadInt32();
            break;
          }
          case 64: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 72: {
            MilestoneTheme = input.ReadInt32();
            break;
          }
          case 80: {
            TokenId = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            tokenMilestoneId_.AddEntriesFrom(ref input, _repeated_tokenMilestoneId_codec);
            break;
          }
          case 96: {
            BannerTheme = input.ReadInt32();
            break;
          }
          case 104: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 114:
          case 112: {
            bonusItemMax_.AddEntriesFrom(ref input, _repeated_bonusItemMax_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMineMapABValue : pb::IMessage<EventMineMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMineMapABValue> _parser = new pb::MessageParser<EventMineMapABValue>(() => new EventMineMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMineMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMineConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineMapABValue(EventMineMapABValue other) : this() {
      eventMineMap_ = other.eventMineMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineMapABValue Clone() {
      return new EventMineMapABValue(this);
    }

    /// <summary>Field number for the "EventMineMap" field.</summary>
    public const int EventMineMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMine>.Codec _map_eventMineMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMine>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMine.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMine> eventMineMap_ = new pbc::MapField<int, global::fat.rawdata.EventMine>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMine> EventMineMap {
      get { return eventMineMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMineMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMineMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMineMap.Equals(other.EventMineMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMineMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMineMap_.WriteTo(output, _map_eventMineMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMineMap_.WriteTo(ref output, _map_eventMineMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMineMap_.CalculateSize(_map_eventMineMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMineMapABValue other) {
      if (other == null) {
        return;
      }
      eventMineMap_.Add(other.eventMineMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMineMap_.AddEntriesFrom(input, _map_eventMineMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMineMap_.AddEntriesFrom(ref input, _map_eventMineMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMineConf : pb::IMessage<EventMineConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMineConf> _parser = new pb::MessageParser<EventMineConf>(() => new EventMineConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMineConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMineConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineConf(EventMineConf other) : this() {
      eventMineMap_ = other.eventMineMap_.Clone();
      eventMineMapAB_ = other.eventMineMapAB_.Clone();
      eventMineMapABPatch_ = other.eventMineMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineConf Clone() {
      return new EventMineConf(this);
    }

    /// <summary>Field number for the "EventMineMap" field.</summary>
    public const int EventMineMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMine>.Codec _map_eventMineMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMine>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMine.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMine> eventMineMap_ = new pbc::MapField<int, global::fat.rawdata.EventMine>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMine> EventMineMap {
      get { return eventMineMap_; }
    }

    /// <summary>Field number for the "EventMineMapAB" field.</summary>
    public const int EventMineMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMineMapABValue>.Codec _map_eventMineMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMineMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMineMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMineMapABValue> eventMineMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventMineMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMineMapABValue> EventMineMapAB {
      get { return eventMineMapAB_; }
    }

    /// <summary>Field number for the "EventMineMapABPatch" field.</summary>
    public const int EventMineMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMineMapABValue>.Codec _map_eventMineMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMineMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMineMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMineMapABValue> eventMineMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventMineMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMineMapABValue> EventMineMapABPatch {
      get { return eventMineMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMineConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMineConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMineMap.Equals(other.EventMineMap)) return false;
      if (!EventMineMapAB.Equals(other.EventMineMapAB)) return false;
      if (!EventMineMapABPatch.Equals(other.EventMineMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMineMap.GetHashCode();
      hash ^= EventMineMapAB.GetHashCode();
      hash ^= EventMineMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMineMap_.WriteTo(output, _map_eventMineMap_codec);
      eventMineMapAB_.WriteTo(output, _map_eventMineMapAB_codec);
      eventMineMapABPatch_.WriteTo(output, _map_eventMineMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMineMap_.WriteTo(ref output, _map_eventMineMap_codec);
      eventMineMapAB_.WriteTo(ref output, _map_eventMineMapAB_codec);
      eventMineMapABPatch_.WriteTo(ref output, _map_eventMineMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMineMap_.CalculateSize(_map_eventMineMap_codec);
      size += eventMineMapAB_.CalculateSize(_map_eventMineMapAB_codec);
      size += eventMineMapABPatch_.CalculateSize(_map_eventMineMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMineConf other) {
      if (other == null) {
        return;
      }
      eventMineMap_.Add(other.eventMineMap_);
      eventMineMapAB_.Add(other.eventMineMapAB_);
      eventMineMapABPatch_.Add(other.eventMineMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMineMap_.AddEntriesFrom(input, _map_eventMineMap_codec);
            break;
          }
          case 18: {
            eventMineMapAB_.AddEntriesFrom(input, _map_eventMineMapAB_codec);
            break;
          }
          case 26: {
            eventMineMapABPatch_.AddEntriesFrom(input, _map_eventMineMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMineMap_.AddEntriesFrom(ref input, _map_eventMineMap_codec);
            break;
          }
          case 18: {
            eventMineMapAB_.AddEntriesFrom(ref input, _map_eventMineMapAB_codec);
            break;
          }
          case 26: {
            eventMineMapABPatch_.AddEntriesFrom(ref input, _map_eventMineMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
