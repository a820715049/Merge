// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventLimitMergeConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventLimitMergeConf.proto</summary>
  public static partial class EventLimitMergeConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventLimitMergeConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventLimitMergeConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFyYXdkYXRhL0V2ZW50TGltaXRNZXJnZUNvbmYucHJvdG8SB3Jhd2RhdGEi",
            "owIKD0V2ZW50TGltaXRNZXJnZRIKCgJpZBgBIAEoBRIPCgdib2FyZElkGAkg",
            "ASgFEhAKCGRlYWRsaW5lGAIgASgFEhAKCGVuZFRoZW1lGAogASgFEj4KC2V4",
            "cGlyZVBvcHVwGAMgAygLMikucmF3ZGF0YS5FdmVudExpbWl0TWVyZ2UuRXhw",
            "aXJlUG9wdXBFbnRyeRIPCgdpbmZvR3JwGAQgASgFEhAKCGxpZmV0aW1lGAUg",
            "ASgFEhAKCG9yZGVyTnVtGAYgASgFEhIKCm9yZGVyVGhlbWUYByABKAkSEgoK",
            "c3RhcnRUaGVtZRgIIAEoBRoyChBFeHBpcmVQb3B1cEVudHJ5EgsKA2tleRgB",
            "IAEoBRINCgV2YWx1ZRgCIAEoCToCOAEiyAEKGUV2ZW50TGltaXRNZXJnZU1h",
            "cEFCVmFsdWUSVgoSRXZlbnRMaW1pdE1lcmdlTWFwGAEgAygLMjoucmF3ZGF0",
            "YS5FdmVudExpbWl0TWVyZ2VNYXBBQlZhbHVlLkV2ZW50TGltaXRNZXJnZU1h",
            "cEVudHJ5GlMKF0V2ZW50TGltaXRNZXJnZU1hcEVudHJ5EgsKA2tleRgBIAEo",
            "BRInCgV2YWx1ZRgCIAEoCzIYLnJhd2RhdGEuRXZlbnRMaW1pdE1lcmdlOgI4",
            "ASK5BAoTRXZlbnRMaW1pdE1lcmdlQ29uZhJQChJFdmVudExpbWl0TWVyZ2VN",
            "YXAYASADKAsyNC5yYXdkYXRhLkV2ZW50TGltaXRNZXJnZUNvbmYuRXZlbnRM",
            "aW1pdE1lcmdlTWFwRW50cnkSVAoURXZlbnRMaW1pdE1lcmdlTWFwQUIYAiAD",
            "KAsyNi5yYXdkYXRhLkV2ZW50TGltaXRNZXJnZUNvbmYuRXZlbnRMaW1pdE1l",
            "cmdlTWFwQUJFbnRyeRJeChlFdmVudExpbWl0TWVyZ2VNYXBBQlBhdGNoGAMg",
            "AygLMjsucmF3ZGF0YS5FdmVudExpbWl0TWVyZ2VDb25mLkV2ZW50TGltaXRN",
            "ZXJnZU1hcEFCUGF0Y2hFbnRyeRpTChdFdmVudExpbWl0TWVyZ2VNYXBFbnRy",
            "eRILCgNrZXkYASABKAUSJwoFdmFsdWUYAiABKAsyGC5yYXdkYXRhLkV2ZW50",
            "TGltaXRNZXJnZToCOAEaXwoZRXZlbnRMaW1pdE1lcmdlTWFwQUJFbnRyeRIL",
            "CgNrZXkYASABKAkSMQoFdmFsdWUYAiABKAsyIi5yYXdkYXRhLkV2ZW50TGlt",
            "aXRNZXJnZU1hcEFCVmFsdWU6AjgBGmQKHkV2ZW50TGltaXRNZXJnZU1hcEFC",
            "UGF0Y2hFbnRyeRILCgNrZXkYASABKAkSMQoFdmFsdWUYAiABKAsyIi5yYXdk",
            "YXRhLkV2ZW50TGltaXRNZXJnZU1hcEFCVmFsdWU6AjgBQj1aLWdpdGxhYi5m",
            "dW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3ZGF0YaoCC2ZhdC5y",
            "YXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventLimitMerge), global::fat.rawdata.EventLimitMerge.Parser, new[]{ "Id", "BoardId", "Deadline", "EndTheme", "ExpirePopup", "InfoGrp", "Lifetime", "OrderNum", "OrderTheme", "StartTheme" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventLimitMergeMapABValue), global::fat.rawdata.EventLimitMergeMapABValue.Parser, new[]{ "EventLimitMergeMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventLimitMergeConf), global::fat.rawdata.EventLimitMergeConf.Parser, new[]{ "EventLimitMergeMap", "EventLimitMergeMapAB", "EventLimitMergeMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventLimitMerge",table="EventLimitMergeMap",table_wrapper="EventLimitMergeConf",map="true",map_key_type="int32",data="EventLimitMergeConf")
  /// annotation@ab(table_ab="EventLimitMergeMapAB",table_ab_patch="EventLimitMergeMapABPatch",table_ab_value="EventLimitMergeMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventLimitMerge(id="id")
  /// </summary>
  public sealed partial class EventLimitMerge : pb::IMessage<EventLimitMerge>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventLimitMerge> _parser = new pb::MessageParser<EventLimitMerge>(() => new EventLimitMerge());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventLimitMerge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventLimitMergeConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventLimitMerge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventLimitMerge(EventLimitMerge other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      deadline_ = other.deadline_;
      endTheme_ = other.endTheme_;
      expirePopup_ = other.expirePopup_.Clone();
      infoGrp_ = other.infoGrp_;
      lifetime_ = other.lifetime_;
      orderNum_ = other.orderNum_;
      orderTheme_ = other.orderTheme_;
      startTheme_ = other.startTheme_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventLimitMerge Clone() {
      return new EventLimitMerge(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 9;
    private int boardId_;
    /// <summary>
    /// 适用棋盘
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "deadline" field.</summary>
    public const int DeadlineFieldNumber = 2;
    private int deadline_;
    /// <summary>
    /// 剩余时间不开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Deadline {
      get { return deadline_; }
      set {
        deadline_ = value;
      }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 10;
    private int endTheme_;
    /// <summary>
    /// 活动结束弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "expirePopup" field.</summary>
    public const int ExpirePopupFieldNumber = 3;
    private static readonly pbc::MapField<int, string>.Codec _map_expirePopup_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 26);
    private readonly pbc::MapField<int, string> expirePopup_ = new pbc::MapField<int, string>();
    /// <summary>
    /// 过期棋子转化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> ExpirePopup {
      get { return expirePopup_; }
    }

    /// <summary>Field number for the "infoGrp" field.</summary>
    public const int InfoGrpFieldNumber = 4;
    private int infoGrp_;
    /// <summary>
    /// 用户分层id
    /// （GradeIndexMapping.id）
    /// （LimitMergeGroup.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InfoGrp {
      get { return infoGrp_; }
      set {
        infoGrp_ = value;
      }
    }

    /// <summary>Field number for the "lifetime" field.</summary>
    public const int LifetimeFieldNumber = 5;
    private int lifetime_;
    /// <summary>
    /// 活动持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lifetime {
      get { return lifetime_; }
      set {
        lifetime_ = value;
      }
    }

    /// <summary>Field number for the "orderNum" field.</summary>
    public const int OrderNumFieldNumber = 6;
    private int orderNum_;
    /// <summary>
    /// 限时订单数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderNum {
      get { return orderNum_; }
      set {
        orderNum_ = value;
      }
    }

    /// <summary>Field number for the "orderTheme" field.</summary>
    public const int OrderThemeFieldNumber = 7;
    private string orderTheme_ = "";
    /// <summary>
    /// 订单界面模板
    /// （Asset）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderTheme {
      get { return orderTheme_; }
      set {
        orderTheme_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startTheme" field.</summary>
    public const int StartThemeFieldNumber = 8;
    private int startTheme_;
    /// <summary>
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTheme {
      get { return startTheme_; }
      set {
        startTheme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventLimitMerge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventLimitMerge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (Deadline != other.Deadline) return false;
      if (EndTheme != other.EndTheme) return false;
      if (!ExpirePopup.Equals(other.ExpirePopup)) return false;
      if (InfoGrp != other.InfoGrp) return false;
      if (Lifetime != other.Lifetime) return false;
      if (OrderNum != other.OrderNum) return false;
      if (OrderTheme != other.OrderTheme) return false;
      if (StartTheme != other.StartTheme) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (Deadline != 0) hash ^= Deadline.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      hash ^= ExpirePopup.GetHashCode();
      if (InfoGrp != 0) hash ^= InfoGrp.GetHashCode();
      if (Lifetime != 0) hash ^= Lifetime.GetHashCode();
      if (OrderNum != 0) hash ^= OrderNum.GetHashCode();
      if (OrderTheme.Length != 0) hash ^= OrderTheme.GetHashCode();
      if (StartTheme != 0) hash ^= StartTheme.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Deadline != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Deadline);
      }
      expirePopup_.WriteTo(output, _map_expirePopup_codec);
      if (InfoGrp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InfoGrp);
      }
      if (Lifetime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lifetime);
      }
      if (OrderNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OrderNum);
      }
      if (OrderTheme.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OrderTheme);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(StartTheme);
      }
      if (BoardId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BoardId);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EndTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Deadline != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Deadline);
      }
      expirePopup_.WriteTo(ref output, _map_expirePopup_codec);
      if (InfoGrp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InfoGrp);
      }
      if (Lifetime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lifetime);
      }
      if (OrderNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OrderNum);
      }
      if (OrderTheme.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OrderTheme);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(StartTheme);
      }
      if (BoardId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BoardId);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EndTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (Deadline != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deadline);
      }
      if (EndTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      size += expirePopup_.CalculateSize(_map_expirePopup_codec);
      if (InfoGrp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InfoGrp);
      }
      if (Lifetime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lifetime);
      }
      if (OrderNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderNum);
      }
      if (OrderTheme.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderTheme);
      }
      if (StartTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTheme);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventLimitMerge other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.Deadline != 0) {
        Deadline = other.Deadline;
      }
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      expirePopup_.Add(other.expirePopup_);
      if (other.InfoGrp != 0) {
        InfoGrp = other.InfoGrp;
      }
      if (other.Lifetime != 0) {
        Lifetime = other.Lifetime;
      }
      if (other.OrderNum != 0) {
        OrderNum = other.OrderNum;
      }
      if (other.OrderTheme.Length != 0) {
        OrderTheme = other.OrderTheme;
      }
      if (other.StartTheme != 0) {
        StartTheme = other.StartTheme;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Deadline = input.ReadInt32();
            break;
          }
          case 26: {
            expirePopup_.AddEntriesFrom(input, _map_expirePopup_codec);
            break;
          }
          case 32: {
            InfoGrp = input.ReadInt32();
            break;
          }
          case 40: {
            Lifetime = input.ReadInt32();
            break;
          }
          case 48: {
            OrderNum = input.ReadInt32();
            break;
          }
          case 58: {
            OrderTheme = input.ReadString();
            break;
          }
          case 64: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 72: {
            BoardId = input.ReadInt32();
            break;
          }
          case 80: {
            EndTheme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Deadline = input.ReadInt32();
            break;
          }
          case 26: {
            expirePopup_.AddEntriesFrom(ref input, _map_expirePopup_codec);
            break;
          }
          case 32: {
            InfoGrp = input.ReadInt32();
            break;
          }
          case 40: {
            Lifetime = input.ReadInt32();
            break;
          }
          case 48: {
            OrderNum = input.ReadInt32();
            break;
          }
          case 58: {
            OrderTheme = input.ReadString();
            break;
          }
          case 64: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 72: {
            BoardId = input.ReadInt32();
            break;
          }
          case 80: {
            EndTheme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventLimitMergeMapABValue : pb::IMessage<EventLimitMergeMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventLimitMergeMapABValue> _parser = new pb::MessageParser<EventLimitMergeMapABValue>(() => new EventLimitMergeMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventLimitMergeMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventLimitMergeConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventLimitMergeMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventLimitMergeMapABValue(EventLimitMergeMapABValue other) : this() {
      eventLimitMergeMap_ = other.eventLimitMergeMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventLimitMergeMapABValue Clone() {
      return new EventLimitMergeMapABValue(this);
    }

    /// <summary>Field number for the "EventLimitMergeMap" field.</summary>
    public const int EventLimitMergeMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventLimitMerge>.Codec _map_eventLimitMergeMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventLimitMerge>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventLimitMerge.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventLimitMerge> eventLimitMergeMap_ = new pbc::MapField<int, global::fat.rawdata.EventLimitMerge>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventLimitMerge> EventLimitMergeMap {
      get { return eventLimitMergeMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventLimitMergeMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventLimitMergeMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventLimitMergeMap.Equals(other.EventLimitMergeMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventLimitMergeMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventLimitMergeMap_.WriteTo(output, _map_eventLimitMergeMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventLimitMergeMap_.WriteTo(ref output, _map_eventLimitMergeMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventLimitMergeMap_.CalculateSize(_map_eventLimitMergeMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventLimitMergeMapABValue other) {
      if (other == null) {
        return;
      }
      eventLimitMergeMap_.Add(other.eventLimitMergeMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventLimitMergeMap_.AddEntriesFrom(input, _map_eventLimitMergeMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventLimitMergeMap_.AddEntriesFrom(ref input, _map_eventLimitMergeMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventLimitMergeConf : pb::IMessage<EventLimitMergeConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventLimitMergeConf> _parser = new pb::MessageParser<EventLimitMergeConf>(() => new EventLimitMergeConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventLimitMergeConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventLimitMergeConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventLimitMergeConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventLimitMergeConf(EventLimitMergeConf other) : this() {
      eventLimitMergeMap_ = other.eventLimitMergeMap_.Clone();
      eventLimitMergeMapAB_ = other.eventLimitMergeMapAB_.Clone();
      eventLimitMergeMapABPatch_ = other.eventLimitMergeMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventLimitMergeConf Clone() {
      return new EventLimitMergeConf(this);
    }

    /// <summary>Field number for the "EventLimitMergeMap" field.</summary>
    public const int EventLimitMergeMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventLimitMerge>.Codec _map_eventLimitMergeMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventLimitMerge>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventLimitMerge.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventLimitMerge> eventLimitMergeMap_ = new pbc::MapField<int, global::fat.rawdata.EventLimitMerge>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventLimitMerge> EventLimitMergeMap {
      get { return eventLimitMergeMap_; }
    }

    /// <summary>Field number for the "EventLimitMergeMapAB" field.</summary>
    public const int EventLimitMergeMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventLimitMergeMapABValue>.Codec _map_eventLimitMergeMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventLimitMergeMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventLimitMergeMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventLimitMergeMapABValue> eventLimitMergeMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventLimitMergeMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventLimitMergeMapABValue> EventLimitMergeMapAB {
      get { return eventLimitMergeMapAB_; }
    }

    /// <summary>Field number for the "EventLimitMergeMapABPatch" field.</summary>
    public const int EventLimitMergeMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventLimitMergeMapABValue>.Codec _map_eventLimitMergeMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventLimitMergeMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventLimitMergeMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventLimitMergeMapABValue> eventLimitMergeMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventLimitMergeMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventLimitMergeMapABValue> EventLimitMergeMapABPatch {
      get { return eventLimitMergeMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventLimitMergeConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventLimitMergeConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventLimitMergeMap.Equals(other.EventLimitMergeMap)) return false;
      if (!EventLimitMergeMapAB.Equals(other.EventLimitMergeMapAB)) return false;
      if (!EventLimitMergeMapABPatch.Equals(other.EventLimitMergeMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventLimitMergeMap.GetHashCode();
      hash ^= EventLimitMergeMapAB.GetHashCode();
      hash ^= EventLimitMergeMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventLimitMergeMap_.WriteTo(output, _map_eventLimitMergeMap_codec);
      eventLimitMergeMapAB_.WriteTo(output, _map_eventLimitMergeMapAB_codec);
      eventLimitMergeMapABPatch_.WriteTo(output, _map_eventLimitMergeMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventLimitMergeMap_.WriteTo(ref output, _map_eventLimitMergeMap_codec);
      eventLimitMergeMapAB_.WriteTo(ref output, _map_eventLimitMergeMapAB_codec);
      eventLimitMergeMapABPatch_.WriteTo(ref output, _map_eventLimitMergeMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventLimitMergeMap_.CalculateSize(_map_eventLimitMergeMap_codec);
      size += eventLimitMergeMapAB_.CalculateSize(_map_eventLimitMergeMapAB_codec);
      size += eventLimitMergeMapABPatch_.CalculateSize(_map_eventLimitMergeMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventLimitMergeConf other) {
      if (other == null) {
        return;
      }
      eventLimitMergeMap_.Add(other.eventLimitMergeMap_);
      eventLimitMergeMapAB_.Add(other.eventLimitMergeMapAB_);
      eventLimitMergeMapABPatch_.Add(other.eventLimitMergeMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventLimitMergeMap_.AddEntriesFrom(input, _map_eventLimitMergeMap_codec);
            break;
          }
          case 18: {
            eventLimitMergeMapAB_.AddEntriesFrom(input, _map_eventLimitMergeMapAB_codec);
            break;
          }
          case 26: {
            eventLimitMergeMapABPatch_.AddEntriesFrom(input, _map_eventLimitMergeMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventLimitMergeMap_.AddEntriesFrom(ref input, _map_eventLimitMergeMap_codec);
            break;
          }
          case 18: {
            eventLimitMergeMapAB_.AddEntriesFrom(ref input, _map_eventLimitMergeMapAB_codec);
            break;
          }
          case 26: {
            eventLimitMergeMapABPatch_.AddEntriesFrom(ref input, _map_eventLimitMergeMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
