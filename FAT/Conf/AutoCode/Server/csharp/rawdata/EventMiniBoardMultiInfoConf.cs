// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventMiniBoardMultiInfoConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventMiniBoardMultiInfoConf.proto</summary>
  public static partial class EventMiniBoardMultiInfoConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventMiniBoardMultiInfoConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventMiniBoardMultiInfoConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CilyYXdkYXRhL0V2ZW50TWluaUJvYXJkTXVsdGlJbmZvQ29uZi5wcm90bxIH",
            "cmF3ZGF0YSKUAgoXRXZlbnRNaW5pQm9hcmRNdWx0aUluZm8SCgoCaWQYASAB",
            "KAUSDwoHYm9hcmRJZBgCIAEoBRIPCgdpdGVtTnVtGAMgASgJEg8KB2tleUlj",
            "b24YBCABKAkSFAoMa2V5Ym9hcmRJY29uGAggASgJEhEKCWxldmVsSXRlbRgF",
            "IAMoBRIPCgdsZXZlbGlkGAYgAygFEkoKDW5leHRCb2FyZEl0ZW0YByADKAsy",
            "My5yYXdkYXRhLkV2ZW50TWluaUJvYXJkTXVsdGlJbmZvLk5leHRCb2FyZEl0",
            "ZW1FbnRyeRo0ChJOZXh0Qm9hcmRJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0K",
            "BXZhbHVlGAIgASgFOgI4ASL4AQohRXZlbnRNaW5pQm9hcmRNdWx0aUluZm9N",
            "YXBBQlZhbHVlEm4KGkV2ZW50TWluaUJvYXJkTXVsdGlJbmZvTWFwGAEgAygL",
            "MkoucmF3ZGF0YS5FdmVudE1pbmlCb2FyZE11bHRpSW5mb01hcEFCVmFsdWUu",
            "RXZlbnRNaW5pQm9hcmRNdWx0aUluZm9NYXBFbnRyeRpjCh9FdmVudE1pbmlC",
            "b2FyZE11bHRpSW5mb01hcEVudHJ5EgsKA2tleRgBIAEoBRIvCgV2YWx1ZRgC",
            "IAEoCzIgLnJhd2RhdGEuRXZlbnRNaW5pQm9hcmRNdWx0aUluZm86AjgBIrkF",
            "ChtFdmVudE1pbmlCb2FyZE11bHRpSW5mb0NvbmYSaAoaRXZlbnRNaW5pQm9h",
            "cmRNdWx0aUluZm9NYXAYASADKAsyRC5yYXdkYXRhLkV2ZW50TWluaUJvYXJk",
            "TXVsdGlJbmZvQ29uZi5FdmVudE1pbmlCb2FyZE11bHRpSW5mb01hcEVudHJ5",
            "EmwKHEV2ZW50TWluaUJvYXJkTXVsdGlJbmZvTWFwQUIYAiADKAsyRi5yYXdk",
            "YXRhLkV2ZW50TWluaUJvYXJkTXVsdGlJbmZvQ29uZi5FdmVudE1pbmlCb2Fy",
            "ZE11bHRpSW5mb01hcEFCRW50cnkSdgohRXZlbnRNaW5pQm9hcmRNdWx0aUlu",
            "Zm9NYXBBQlBhdGNoGAMgAygLMksucmF3ZGF0YS5FdmVudE1pbmlCb2FyZE11",
            "bHRpSW5mb0NvbmYuRXZlbnRNaW5pQm9hcmRNdWx0aUluZm9NYXBBQlBhdGNo",
            "RW50cnkaYwofRXZlbnRNaW5pQm9hcmRNdWx0aUluZm9NYXBFbnRyeRILCgNr",
            "ZXkYASABKAUSLwoFdmFsdWUYAiABKAsyIC5yYXdkYXRhLkV2ZW50TWluaUJv",
            "YXJkTXVsdGlJbmZvOgI4ARpvCiFFdmVudE1pbmlCb2FyZE11bHRpSW5mb01h",
            "cEFCRW50cnkSCwoDa2V5GAEgASgJEjkKBXZhbHVlGAIgASgLMioucmF3ZGF0",
            "YS5FdmVudE1pbmlCb2FyZE11bHRpSW5mb01hcEFCVmFsdWU6AjgBGnQKJkV2",
            "ZW50TWluaUJvYXJkTXVsdGlJbmZvTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgB",
            "IAEoCRI5CgV2YWx1ZRgCIAEoCzIqLnJhd2RhdGEuRXZlbnRNaW5pQm9hcmRN",
            "dWx0aUluZm9NYXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9m",
            "YXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMiniBoardMultiInfo), global::fat.rawdata.EventMiniBoardMultiInfo.Parser, new[]{ "Id", "BoardId", "ItemNum", "KeyIcon", "KeyboardIcon", "LevelItem", "Levelid", "NextBoardItem" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMiniBoardMultiInfoMapABValue), global::fat.rawdata.EventMiniBoardMultiInfoMapABValue.Parser, new[]{ "EventMiniBoardMultiInfoMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMiniBoardMultiInfoConf), global::fat.rawdata.EventMiniBoardMultiInfoConf.Parser, new[]{ "EventMiniBoardMultiInfoMap", "EventMiniBoardMultiInfoMapAB", "EventMiniBoardMultiInfoMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventMiniBoardMultiInfo",table="EventMiniBoardMultiInfoMap",table_wrapper="EventMiniBoardMultiInfoConf",map="true",map_key_type="int32",data="EventMiniBoardMultiInfoConf")
  /// annotation@ab(table_ab="EventMiniBoardMultiInfoMapAB",table_ab_patch="EventMiniBoardMultiInfoMapABPatch",table_ab_value="EventMiniBoardMultiInfoMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventMiniBoardMultiInfo(id="id")
  /// </summary>
  public sealed partial class EventMiniBoardMultiInfo : pb::IMessage<EventMiniBoardMultiInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMiniBoardMultiInfo> _parser = new pb::MessageParser<EventMiniBoardMultiInfo>(() => new EventMiniBoardMultiInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMiniBoardMultiInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMiniBoardMultiInfoConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMultiInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMultiInfo(EventMiniBoardMultiInfo other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      itemNum_ = other.itemNum_;
      keyIcon_ = other.keyIcon_;
      keyboardIcon_ = other.keyboardIcon_;
      levelItem_ = other.levelItem_.Clone();
      levelid_ = other.levelid_.Clone();
      nextBoardItem_ = other.nextBoardItem_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMultiInfo Clone() {
      return new EventMiniBoardMultiInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 棋盘ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "itemNum" field.</summary>
    public const int ItemNumFieldNumber = 3;
    private string itemNum_ = "";
    /// <summary>
    /// 初始值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyIcon" field.</summary>
    public const int KeyIconFieldNumber = 4;
    private string keyIcon_ = "";
    /// <summary>
    /// key图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyIcon {
      get { return keyIcon_; }
      set {
        keyIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyboardIcon" field.</summary>
    public const int KeyboardIconFieldNumber = 8;
    private string keyboardIcon_ = "";
    /// <summary>
    /// 棋盘上key图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyboardIcon {
      get { return keyboardIcon_; }
      set {
        keyboardIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "levelItem" field.</summary>
    public const int LevelItemFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_levelItem_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> levelItem_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 目标棋子进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LevelItem {
      get { return levelItem_; }
    }

    /// <summary>Field number for the "levelid" field.</summary>
    public const int LevelidFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_levelid_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> levelid_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 对应阶段掉落信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Levelid {
      get { return levelid_; }
    }

    /// <summary>Field number for the "nextBoardItem" field.</summary>
    public const int NextBoardItemFieldNumber = 7;
    private static readonly pbc::MapField<int, int>.Codec _map_nextBoardItem_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 58);
    private readonly pbc::MapField<int, int> nextBoardItem_ = new pbc::MapField<int, int>();
    /// <summary>
    /// itemId:最多可继承数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> NextBoardItem {
      get { return nextBoardItem_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMiniBoardMultiInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMiniBoardMultiInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (ItemNum != other.ItemNum) return false;
      if (KeyIcon != other.KeyIcon) return false;
      if (KeyboardIcon != other.KeyboardIcon) return false;
      if(!levelItem_.Equals(other.levelItem_)) return false;
      if(!levelid_.Equals(other.levelid_)) return false;
      if (!NextBoardItem.Equals(other.NextBoardItem)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (ItemNum.Length != 0) hash ^= ItemNum.GetHashCode();
      if (KeyIcon.Length != 0) hash ^= KeyIcon.GetHashCode();
      if (KeyboardIcon.Length != 0) hash ^= KeyboardIcon.GetHashCode();
      hash ^= levelItem_.GetHashCode();
      hash ^= levelid_.GetHashCode();
      hash ^= NextBoardItem.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (ItemNum.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ItemNum);
      }
      if (KeyIcon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(KeyIcon);
      }
      levelItem_.WriteTo(output, _repeated_levelItem_codec);
      levelid_.WriteTo(output, _repeated_levelid_codec);
      nextBoardItem_.WriteTo(output, _map_nextBoardItem_codec);
      if (KeyboardIcon.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(KeyboardIcon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (ItemNum.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ItemNum);
      }
      if (KeyIcon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(KeyIcon);
      }
      levelItem_.WriteTo(ref output, _repeated_levelItem_codec);
      levelid_.WriteTo(ref output, _repeated_levelid_codec);
      nextBoardItem_.WriteTo(ref output, _map_nextBoardItem_codec);
      if (KeyboardIcon.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(KeyboardIcon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (ItemNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemNum);
      }
      if (KeyIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyIcon);
      }
      if (KeyboardIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyboardIcon);
      }
      size += levelItem_.CalculateSize(_repeated_levelItem_codec);
      size += levelid_.CalculateSize(_repeated_levelid_codec);
      size += nextBoardItem_.CalculateSize(_map_nextBoardItem_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMiniBoardMultiInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.ItemNum.Length != 0) {
        ItemNum = other.ItemNum;
      }
      if (other.KeyIcon.Length != 0) {
        KeyIcon = other.KeyIcon;
      }
      if (other.KeyboardIcon.Length != 0) {
        KeyboardIcon = other.KeyboardIcon;
      }
      levelItem_.Add(other.levelItem_);
      levelid_.Add(other.levelid_);
      nextBoardItem_.Add(other.nextBoardItem_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 26: {
            ItemNum = input.ReadString();
            break;
          }
          case 34: {
            KeyIcon = input.ReadString();
            break;
          }
          case 42:
          case 40: {
            levelItem_.AddEntriesFrom(input, _repeated_levelItem_codec);
            break;
          }
          case 50:
          case 48: {
            levelid_.AddEntriesFrom(input, _repeated_levelid_codec);
            break;
          }
          case 58: {
            nextBoardItem_.AddEntriesFrom(input, _map_nextBoardItem_codec);
            break;
          }
          case 66: {
            KeyboardIcon = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 26: {
            ItemNum = input.ReadString();
            break;
          }
          case 34: {
            KeyIcon = input.ReadString();
            break;
          }
          case 42:
          case 40: {
            levelItem_.AddEntriesFrom(ref input, _repeated_levelItem_codec);
            break;
          }
          case 50:
          case 48: {
            levelid_.AddEntriesFrom(ref input, _repeated_levelid_codec);
            break;
          }
          case 58: {
            nextBoardItem_.AddEntriesFrom(ref input, _map_nextBoardItem_codec);
            break;
          }
          case 66: {
            KeyboardIcon = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMiniBoardMultiInfoMapABValue : pb::IMessage<EventMiniBoardMultiInfoMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMiniBoardMultiInfoMapABValue> _parser = new pb::MessageParser<EventMiniBoardMultiInfoMapABValue>(() => new EventMiniBoardMultiInfoMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMiniBoardMultiInfoMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMiniBoardMultiInfoConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMultiInfoMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMultiInfoMapABValue(EventMiniBoardMultiInfoMapABValue other) : this() {
      eventMiniBoardMultiInfoMap_ = other.eventMiniBoardMultiInfoMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMultiInfoMapABValue Clone() {
      return new EventMiniBoardMultiInfoMapABValue(this);
    }

    /// <summary>Field number for the "EventMiniBoardMultiInfoMap" field.</summary>
    public const int EventMiniBoardMultiInfoMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoardMultiInfo>.Codec _map_eventMiniBoardMultiInfoMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMiniBoardMultiInfo>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoardMultiInfo.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoardMultiInfo> eventMiniBoardMultiInfoMap_ = new pbc::MapField<int, global::fat.rawdata.EventMiniBoardMultiInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMiniBoardMultiInfo> EventMiniBoardMultiInfoMap {
      get { return eventMiniBoardMultiInfoMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMiniBoardMultiInfoMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMiniBoardMultiInfoMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMiniBoardMultiInfoMap.Equals(other.EventMiniBoardMultiInfoMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMiniBoardMultiInfoMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMiniBoardMultiInfoMap_.WriteTo(output, _map_eventMiniBoardMultiInfoMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMiniBoardMultiInfoMap_.WriteTo(ref output, _map_eventMiniBoardMultiInfoMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMiniBoardMultiInfoMap_.CalculateSize(_map_eventMiniBoardMultiInfoMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMiniBoardMultiInfoMapABValue other) {
      if (other == null) {
        return;
      }
      eventMiniBoardMultiInfoMap_.Add(other.eventMiniBoardMultiInfoMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMiniBoardMultiInfoMap_.AddEntriesFrom(input, _map_eventMiniBoardMultiInfoMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMiniBoardMultiInfoMap_.AddEntriesFrom(ref input, _map_eventMiniBoardMultiInfoMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMiniBoardMultiInfoConf : pb::IMessage<EventMiniBoardMultiInfoConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMiniBoardMultiInfoConf> _parser = new pb::MessageParser<EventMiniBoardMultiInfoConf>(() => new EventMiniBoardMultiInfoConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMiniBoardMultiInfoConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMiniBoardMultiInfoConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMultiInfoConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMultiInfoConf(EventMiniBoardMultiInfoConf other) : this() {
      eventMiniBoardMultiInfoMap_ = other.eventMiniBoardMultiInfoMap_.Clone();
      eventMiniBoardMultiInfoMapAB_ = other.eventMiniBoardMultiInfoMapAB_.Clone();
      eventMiniBoardMultiInfoMapABPatch_ = other.eventMiniBoardMultiInfoMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMultiInfoConf Clone() {
      return new EventMiniBoardMultiInfoConf(this);
    }

    /// <summary>Field number for the "EventMiniBoardMultiInfoMap" field.</summary>
    public const int EventMiniBoardMultiInfoMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoardMultiInfo>.Codec _map_eventMiniBoardMultiInfoMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMiniBoardMultiInfo>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoardMultiInfo.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoardMultiInfo> eventMiniBoardMultiInfoMap_ = new pbc::MapField<int, global::fat.rawdata.EventMiniBoardMultiInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMiniBoardMultiInfo> EventMiniBoardMultiInfoMap {
      get { return eventMiniBoardMultiInfoMap_; }
    }

    /// <summary>Field number for the "EventMiniBoardMultiInfoMapAB" field.</summary>
    public const int EventMiniBoardMultiInfoMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiInfoMapABValue>.Codec _map_eventMiniBoardMultiInfoMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiInfoMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoardMultiInfoMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiInfoMapABValue> eventMiniBoardMultiInfoMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiInfoMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiInfoMapABValue> EventMiniBoardMultiInfoMapAB {
      get { return eventMiniBoardMultiInfoMapAB_; }
    }

    /// <summary>Field number for the "EventMiniBoardMultiInfoMapABPatch" field.</summary>
    public const int EventMiniBoardMultiInfoMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiInfoMapABValue>.Codec _map_eventMiniBoardMultiInfoMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiInfoMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoardMultiInfoMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiInfoMapABValue> eventMiniBoardMultiInfoMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiInfoMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMiniBoardMultiInfoMapABValue> EventMiniBoardMultiInfoMapABPatch {
      get { return eventMiniBoardMultiInfoMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMiniBoardMultiInfoConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMiniBoardMultiInfoConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMiniBoardMultiInfoMap.Equals(other.EventMiniBoardMultiInfoMap)) return false;
      if (!EventMiniBoardMultiInfoMapAB.Equals(other.EventMiniBoardMultiInfoMapAB)) return false;
      if (!EventMiniBoardMultiInfoMapABPatch.Equals(other.EventMiniBoardMultiInfoMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMiniBoardMultiInfoMap.GetHashCode();
      hash ^= EventMiniBoardMultiInfoMapAB.GetHashCode();
      hash ^= EventMiniBoardMultiInfoMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMiniBoardMultiInfoMap_.WriteTo(output, _map_eventMiniBoardMultiInfoMap_codec);
      eventMiniBoardMultiInfoMapAB_.WriteTo(output, _map_eventMiniBoardMultiInfoMapAB_codec);
      eventMiniBoardMultiInfoMapABPatch_.WriteTo(output, _map_eventMiniBoardMultiInfoMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMiniBoardMultiInfoMap_.WriteTo(ref output, _map_eventMiniBoardMultiInfoMap_codec);
      eventMiniBoardMultiInfoMapAB_.WriteTo(ref output, _map_eventMiniBoardMultiInfoMapAB_codec);
      eventMiniBoardMultiInfoMapABPatch_.WriteTo(ref output, _map_eventMiniBoardMultiInfoMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMiniBoardMultiInfoMap_.CalculateSize(_map_eventMiniBoardMultiInfoMap_codec);
      size += eventMiniBoardMultiInfoMapAB_.CalculateSize(_map_eventMiniBoardMultiInfoMapAB_codec);
      size += eventMiniBoardMultiInfoMapABPatch_.CalculateSize(_map_eventMiniBoardMultiInfoMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMiniBoardMultiInfoConf other) {
      if (other == null) {
        return;
      }
      eventMiniBoardMultiInfoMap_.Add(other.eventMiniBoardMultiInfoMap_);
      eventMiniBoardMultiInfoMapAB_.Add(other.eventMiniBoardMultiInfoMapAB_);
      eventMiniBoardMultiInfoMapABPatch_.Add(other.eventMiniBoardMultiInfoMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMiniBoardMultiInfoMap_.AddEntriesFrom(input, _map_eventMiniBoardMultiInfoMap_codec);
            break;
          }
          case 18: {
            eventMiniBoardMultiInfoMapAB_.AddEntriesFrom(input, _map_eventMiniBoardMultiInfoMapAB_codec);
            break;
          }
          case 26: {
            eventMiniBoardMultiInfoMapABPatch_.AddEntriesFrom(input, _map_eventMiniBoardMultiInfoMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMiniBoardMultiInfoMap_.AddEntriesFrom(ref input, _map_eventMiniBoardMultiInfoMap_codec);
            break;
          }
          case 18: {
            eventMiniBoardMultiInfoMapAB_.AddEntriesFrom(ref input, _map_eventMiniBoardMultiInfoMapAB_codec);
            break;
          }
          case 26: {
            eventMiniBoardMultiInfoMapABPatch_.AddEntriesFrom(ref input, _map_eventMiniBoardMultiInfoMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
