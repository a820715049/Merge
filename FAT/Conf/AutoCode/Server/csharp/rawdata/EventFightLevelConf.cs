// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventFightLevelConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventFightLevelConf.proto</summary>
  public static partial class EventFightLevelConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventFightLevelConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventFightLevelConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFyYXdkYXRhL0V2ZW50RmlnaHRMZXZlbENvbmYucHJvdG8SB3Jhd2RhdGEi",
            "7gEKD0V2ZW50RmlnaHRMZXZlbBIKCgJpZBgBIAEoBRIVCg1hdHRhY2tPdXRw",
            "dXRzGAIgAygJEg4KBmhlYWx0aBgEIAEoBRITCgtsZXZlbFJld2FyZBgGIAMo",
            "CRIXCg9sZXZlbFJld2FyZEljb24YByABKAkSGwoTbGV2ZWxSZXdhcmRJY29u",
            "RGFyaxgNIAEoCRIPCgdtb25zdGVyGAggASgFEhMKC291dHB1dHNGb3VyGAkg",
            "AygJEhIKCm91dHB1dHNPbmUYCiADKAkSEgoKb3V0cHV0c1R3bxgLIAMoCRIP",
            "CgdzaG93TnVtGAwgASgFIsgBChlFdmVudEZpZ2h0TGV2ZWxNYXBBQlZhbHVl",
            "ElYKEkV2ZW50RmlnaHRMZXZlbE1hcBgBIAMoCzI6LnJhd2RhdGEuRXZlbnRG",
            "aWdodExldmVsTWFwQUJWYWx1ZS5FdmVudEZpZ2h0TGV2ZWxNYXBFbnRyeRpT",
            "ChdFdmVudEZpZ2h0TGV2ZWxNYXBFbnRyeRILCgNrZXkYASABKAUSJwoFdmFs",
            "dWUYAiABKAsyGC5yYXdkYXRhLkV2ZW50RmlnaHRMZXZlbDoCOAEiuQQKE0V2",
            "ZW50RmlnaHRMZXZlbENvbmYSUAoSRXZlbnRGaWdodExldmVsTWFwGAEgAygL",
            "MjQucmF3ZGF0YS5FdmVudEZpZ2h0TGV2ZWxDb25mLkV2ZW50RmlnaHRMZXZl",
            "bE1hcEVudHJ5ElQKFEV2ZW50RmlnaHRMZXZlbE1hcEFCGAIgAygLMjYucmF3",
            "ZGF0YS5FdmVudEZpZ2h0TGV2ZWxDb25mLkV2ZW50RmlnaHRMZXZlbE1hcEFC",
            "RW50cnkSXgoZRXZlbnRGaWdodExldmVsTWFwQUJQYXRjaBgDIAMoCzI7LnJh",
            "d2RhdGEuRXZlbnRGaWdodExldmVsQ29uZi5FdmVudEZpZ2h0TGV2ZWxNYXBB",
            "QlBhdGNoRW50cnkaUwoXRXZlbnRGaWdodExldmVsTWFwRW50cnkSCwoDa2V5",
            "GAEgASgFEicKBXZhbHVlGAIgASgLMhgucmF3ZGF0YS5FdmVudEZpZ2h0TGV2",
            "ZWw6AjgBGl8KGUV2ZW50RmlnaHRMZXZlbE1hcEFCRW50cnkSCwoDa2V5GAEg",
            "ASgJEjEKBXZhbHVlGAIgASgLMiIucmF3ZGF0YS5FdmVudEZpZ2h0TGV2ZWxN",
            "YXBBQlZhbHVlOgI4ARpkCh5FdmVudEZpZ2h0TGV2ZWxNYXBBQlBhdGNoRW50",
            "cnkSCwoDa2V5GAEgASgJEjEKBXZhbHVlGAIgASgLMiIucmF3ZGF0YS5FdmVu",
            "dEZpZ2h0TGV2ZWxNYXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5p",
            "by9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventFightLevel), global::fat.rawdata.EventFightLevel.Parser, new[]{ "Id", "AttackOutputs", "Health", "LevelReward", "LevelRewardIcon", "LevelRewardIconDark", "Monster", "OutputsFour", "OutputsOne", "OutputsTwo", "ShowNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventFightLevelMapABValue), global::fat.rawdata.EventFightLevelMapABValue.Parser, new[]{ "EventFightLevelMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventFightLevelConf), global::fat.rawdata.EventFightLevelConf.Parser, new[]{ "EventFightLevelMap", "EventFightLevelMapAB", "EventFightLevelMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventFightLevel",table="EventFightLevelMap",table_wrapper="EventFightLevelConf",map="true",map_key_type="int32",data="EventFightLevelConf")
  /// annotation@ab(table_ab="EventFightLevelMapAB",table_ab_patch="EventFightLevelMapABPatch",table_ab_value="EventFightLevelMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventFightLevel(id="id")
  /// </summary>
  public sealed partial class EventFightLevel : pb::IMessage<EventFightLevel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFightLevel> _parser = new pb::MessageParser<EventFightLevel>(() => new EventFightLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFightLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventFightLevelConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFightLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFightLevel(EventFightLevel other) : this() {
      id_ = other.id_;
      attackOutputs_ = other.attackOutputs_.Clone();
      health_ = other.health_;
      levelReward_ = other.levelReward_.Clone();
      levelRewardIcon_ = other.levelRewardIcon_;
      levelRewardIconDark_ = other.levelRewardIconDark_;
      monster_ = other.monster_;
      outputsFour_ = other.outputsFour_.Clone();
      outputsOne_ = other.outputsOne_.Clone();
      outputsTwo_ = other.outputsTwo_.Clone();
      showNum_ = other.showNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFightLevel Clone() {
      return new EventFightLevel(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 关卡id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "attackOutputs" field.</summary>
    public const int AttackOutputsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_attackOutputs_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> attackOutputs_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 攻击奖励（消耗1个高级攻击棋子掉落）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AttackOutputs {
      get { return attackOutputs_; }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 4;
    private int health_;
    /// <summary>
    /// 关卡血条值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "levelReward" field.</summary>
    public const int LevelRewardFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_levelReward_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> levelReward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 关卡奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LevelReward {
      get { return levelReward_; }
    }

    /// <summary>Field number for the "levelRewardIcon" field.</summary>
    public const int LevelRewardIconFieldNumber = 7;
    private string levelRewardIcon_ = "";
    /// <summary>
    /// 关卡奖励icon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelRewardIcon {
      get { return levelRewardIcon_; }
      set {
        levelRewardIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "levelRewardIconDark" field.</summary>
    public const int LevelRewardIconDarkFieldNumber = 13;
    private string levelRewardIconDark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelRewardIconDark {
      get { return levelRewardIconDark_; }
      set {
        levelRewardIconDark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "monster" field.</summary>
    public const int MonsterFieldNumber = 8;
    private int monster_;
    /// <summary>
    /// 攻击目标id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Monster {
      get { return monster_; }
      set {
        monster_ = value;
      }
    }

    /// <summary>Field number for the "outputsFour" field.</summary>
    public const int OutputsFourFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_outputsFour_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> outputsFour_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 耗体4点产出棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> OutputsFour {
      get { return outputsFour_; }
    }

    /// <summary>Field number for the "outputsOne" field.</summary>
    public const int OutputsOneFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_outputsOne_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> outputsOne_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 耗体1点产出棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> OutputsOne {
      get { return outputsOne_; }
    }

    /// <summary>Field number for the "outputsTwo" field.</summary>
    public const int OutputsTwoFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_outputsTwo_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> outputsTwo_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 耗体2点产出棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> OutputsTwo {
      get { return outputsTwo_; }
    }

    /// <summary>Field number for the "showNum" field.</summary>
    public const int ShowNumFieldNumber = 12;
    private int showNum_;
    /// <summary>
    /// 关卡序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShowNum {
      get { return showNum_; }
      set {
        showNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFightLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFightLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!attackOutputs_.Equals(other.attackOutputs_)) return false;
      if (Health != other.Health) return false;
      if(!levelReward_.Equals(other.levelReward_)) return false;
      if (LevelRewardIcon != other.LevelRewardIcon) return false;
      if (LevelRewardIconDark != other.LevelRewardIconDark) return false;
      if (Monster != other.Monster) return false;
      if(!outputsFour_.Equals(other.outputsFour_)) return false;
      if(!outputsOne_.Equals(other.outputsOne_)) return false;
      if(!outputsTwo_.Equals(other.outputsTwo_)) return false;
      if (ShowNum != other.ShowNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= attackOutputs_.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      hash ^= levelReward_.GetHashCode();
      if (LevelRewardIcon.Length != 0) hash ^= LevelRewardIcon.GetHashCode();
      if (LevelRewardIconDark.Length != 0) hash ^= LevelRewardIconDark.GetHashCode();
      if (Monster != 0) hash ^= Monster.GetHashCode();
      hash ^= outputsFour_.GetHashCode();
      hash ^= outputsOne_.GetHashCode();
      hash ^= outputsTwo_.GetHashCode();
      if (ShowNum != 0) hash ^= ShowNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      attackOutputs_.WriteTo(output, _repeated_attackOutputs_codec);
      if (Health != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Health);
      }
      levelReward_.WriteTo(output, _repeated_levelReward_codec);
      if (LevelRewardIcon.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LevelRewardIcon);
      }
      if (Monster != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Monster);
      }
      outputsFour_.WriteTo(output, _repeated_outputsFour_codec);
      outputsOne_.WriteTo(output, _repeated_outputsOne_codec);
      outputsTwo_.WriteTo(output, _repeated_outputsTwo_codec);
      if (ShowNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ShowNum);
      }
      if (LevelRewardIconDark.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(LevelRewardIconDark);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      attackOutputs_.WriteTo(ref output, _repeated_attackOutputs_codec);
      if (Health != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Health);
      }
      levelReward_.WriteTo(ref output, _repeated_levelReward_codec);
      if (LevelRewardIcon.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LevelRewardIcon);
      }
      if (Monster != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Monster);
      }
      outputsFour_.WriteTo(ref output, _repeated_outputsFour_codec);
      outputsOne_.WriteTo(ref output, _repeated_outputsOne_codec);
      outputsTwo_.WriteTo(ref output, _repeated_outputsTwo_codec);
      if (ShowNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ShowNum);
      }
      if (LevelRewardIconDark.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(LevelRewardIconDark);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += attackOutputs_.CalculateSize(_repeated_attackOutputs_codec);
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      size += levelReward_.CalculateSize(_repeated_levelReward_codec);
      if (LevelRewardIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelRewardIcon);
      }
      if (LevelRewardIconDark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelRewardIconDark);
      }
      if (Monster != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Monster);
      }
      size += outputsFour_.CalculateSize(_repeated_outputsFour_codec);
      size += outputsOne_.CalculateSize(_repeated_outputsOne_codec);
      size += outputsTwo_.CalculateSize(_repeated_outputsTwo_codec);
      if (ShowNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFightLevel other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      attackOutputs_.Add(other.attackOutputs_);
      if (other.Health != 0) {
        Health = other.Health;
      }
      levelReward_.Add(other.levelReward_);
      if (other.LevelRewardIcon.Length != 0) {
        LevelRewardIcon = other.LevelRewardIcon;
      }
      if (other.LevelRewardIconDark.Length != 0) {
        LevelRewardIconDark = other.LevelRewardIconDark;
      }
      if (other.Monster != 0) {
        Monster = other.Monster;
      }
      outputsFour_.Add(other.outputsFour_);
      outputsOne_.Add(other.outputsOne_);
      outputsTwo_.Add(other.outputsTwo_);
      if (other.ShowNum != 0) {
        ShowNum = other.ShowNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            attackOutputs_.AddEntriesFrom(input, _repeated_attackOutputs_codec);
            break;
          }
          case 32: {
            Health = input.ReadInt32();
            break;
          }
          case 50: {
            levelReward_.AddEntriesFrom(input, _repeated_levelReward_codec);
            break;
          }
          case 58: {
            LevelRewardIcon = input.ReadString();
            break;
          }
          case 64: {
            Monster = input.ReadInt32();
            break;
          }
          case 74: {
            outputsFour_.AddEntriesFrom(input, _repeated_outputsFour_codec);
            break;
          }
          case 82: {
            outputsOne_.AddEntriesFrom(input, _repeated_outputsOne_codec);
            break;
          }
          case 90: {
            outputsTwo_.AddEntriesFrom(input, _repeated_outputsTwo_codec);
            break;
          }
          case 96: {
            ShowNum = input.ReadInt32();
            break;
          }
          case 106: {
            LevelRewardIconDark = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            attackOutputs_.AddEntriesFrom(ref input, _repeated_attackOutputs_codec);
            break;
          }
          case 32: {
            Health = input.ReadInt32();
            break;
          }
          case 50: {
            levelReward_.AddEntriesFrom(ref input, _repeated_levelReward_codec);
            break;
          }
          case 58: {
            LevelRewardIcon = input.ReadString();
            break;
          }
          case 64: {
            Monster = input.ReadInt32();
            break;
          }
          case 74: {
            outputsFour_.AddEntriesFrom(ref input, _repeated_outputsFour_codec);
            break;
          }
          case 82: {
            outputsOne_.AddEntriesFrom(ref input, _repeated_outputsOne_codec);
            break;
          }
          case 90: {
            outputsTwo_.AddEntriesFrom(ref input, _repeated_outputsTwo_codec);
            break;
          }
          case 96: {
            ShowNum = input.ReadInt32();
            break;
          }
          case 106: {
            LevelRewardIconDark = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventFightLevelMapABValue : pb::IMessage<EventFightLevelMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFightLevelMapABValue> _parser = new pb::MessageParser<EventFightLevelMapABValue>(() => new EventFightLevelMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFightLevelMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventFightLevelConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFightLevelMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFightLevelMapABValue(EventFightLevelMapABValue other) : this() {
      eventFightLevelMap_ = other.eventFightLevelMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFightLevelMapABValue Clone() {
      return new EventFightLevelMapABValue(this);
    }

    /// <summary>Field number for the "EventFightLevelMap" field.</summary>
    public const int EventFightLevelMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventFightLevel>.Codec _map_eventFightLevelMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventFightLevel>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFightLevel.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventFightLevel> eventFightLevelMap_ = new pbc::MapField<int, global::fat.rawdata.EventFightLevel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventFightLevel> EventFightLevelMap {
      get { return eventFightLevelMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFightLevelMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFightLevelMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventFightLevelMap.Equals(other.EventFightLevelMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventFightLevelMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventFightLevelMap_.WriteTo(output, _map_eventFightLevelMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventFightLevelMap_.WriteTo(ref output, _map_eventFightLevelMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventFightLevelMap_.CalculateSize(_map_eventFightLevelMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFightLevelMapABValue other) {
      if (other == null) {
        return;
      }
      eventFightLevelMap_.Add(other.eventFightLevelMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventFightLevelMap_.AddEntriesFrom(input, _map_eventFightLevelMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventFightLevelMap_.AddEntriesFrom(ref input, _map_eventFightLevelMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventFightLevelConf : pb::IMessage<EventFightLevelConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFightLevelConf> _parser = new pb::MessageParser<EventFightLevelConf>(() => new EventFightLevelConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFightLevelConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventFightLevelConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFightLevelConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFightLevelConf(EventFightLevelConf other) : this() {
      eventFightLevelMap_ = other.eventFightLevelMap_.Clone();
      eventFightLevelMapAB_ = other.eventFightLevelMapAB_.Clone();
      eventFightLevelMapABPatch_ = other.eventFightLevelMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFightLevelConf Clone() {
      return new EventFightLevelConf(this);
    }

    /// <summary>Field number for the "EventFightLevelMap" field.</summary>
    public const int EventFightLevelMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventFightLevel>.Codec _map_eventFightLevelMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventFightLevel>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFightLevel.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventFightLevel> eventFightLevelMap_ = new pbc::MapField<int, global::fat.rawdata.EventFightLevel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventFightLevel> EventFightLevelMap {
      get { return eventFightLevelMap_; }
    }

    /// <summary>Field number for the "EventFightLevelMapAB" field.</summary>
    public const int EventFightLevelMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventFightLevelMapABValue>.Codec _map_eventFightLevelMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventFightLevelMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFightLevelMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventFightLevelMapABValue> eventFightLevelMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventFightLevelMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventFightLevelMapABValue> EventFightLevelMapAB {
      get { return eventFightLevelMapAB_; }
    }

    /// <summary>Field number for the "EventFightLevelMapABPatch" field.</summary>
    public const int EventFightLevelMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventFightLevelMapABValue>.Codec _map_eventFightLevelMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventFightLevelMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFightLevelMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventFightLevelMapABValue> eventFightLevelMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventFightLevelMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventFightLevelMapABValue> EventFightLevelMapABPatch {
      get { return eventFightLevelMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFightLevelConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFightLevelConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventFightLevelMap.Equals(other.EventFightLevelMap)) return false;
      if (!EventFightLevelMapAB.Equals(other.EventFightLevelMapAB)) return false;
      if (!EventFightLevelMapABPatch.Equals(other.EventFightLevelMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventFightLevelMap.GetHashCode();
      hash ^= EventFightLevelMapAB.GetHashCode();
      hash ^= EventFightLevelMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventFightLevelMap_.WriteTo(output, _map_eventFightLevelMap_codec);
      eventFightLevelMapAB_.WriteTo(output, _map_eventFightLevelMapAB_codec);
      eventFightLevelMapABPatch_.WriteTo(output, _map_eventFightLevelMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventFightLevelMap_.WriteTo(ref output, _map_eventFightLevelMap_codec);
      eventFightLevelMapAB_.WriteTo(ref output, _map_eventFightLevelMapAB_codec);
      eventFightLevelMapABPatch_.WriteTo(ref output, _map_eventFightLevelMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventFightLevelMap_.CalculateSize(_map_eventFightLevelMap_codec);
      size += eventFightLevelMapAB_.CalculateSize(_map_eventFightLevelMapAB_codec);
      size += eventFightLevelMapABPatch_.CalculateSize(_map_eventFightLevelMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFightLevelConf other) {
      if (other == null) {
        return;
      }
      eventFightLevelMap_.Add(other.eventFightLevelMap_);
      eventFightLevelMapAB_.Add(other.eventFightLevelMapAB_);
      eventFightLevelMapABPatch_.Add(other.eventFightLevelMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventFightLevelMap_.AddEntriesFrom(input, _map_eventFightLevelMap_codec);
            break;
          }
          case 18: {
            eventFightLevelMapAB_.AddEntriesFrom(input, _map_eventFightLevelMapAB_codec);
            break;
          }
          case 26: {
            eventFightLevelMapABPatch_.AddEntriesFrom(input, _map_eventFightLevelMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventFightLevelMap_.AddEntriesFrom(ref input, _map_eventFightLevelMap_codec);
            break;
          }
          case 18: {
            eventFightLevelMapAB_.AddEntriesFrom(ref input, _map_eventFightLevelMapAB_codec);
            break;
          }
          case 26: {
            eventFightLevelMapABPatch_.AddEntriesFrom(ref input, _map_eventFightLevelMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
