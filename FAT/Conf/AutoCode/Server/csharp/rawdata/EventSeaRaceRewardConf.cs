// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventSeaRaceRewardConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventSeaRaceRewardConf.proto</summary>
  public static partial class EventSeaRaceRewardConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventSeaRaceRewardConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventSeaRaceRewardConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRyYXdkYXRhL0V2ZW50U2VhUmFjZVJld2FyZENvbmYucHJvdG8SB3Jhd2Rh",
            "dGEiPgoSRXZlbnRTZWFSYWNlUmV3YXJkEgoKAmlkGAEgASgFEgwKBGljb24Y",
            "AiABKAkSDgoGcmV3YXJkGAMgAygJItoBChxFdmVudFNlYVJhY2VSZXdhcmRN",
            "YXBBQlZhbHVlEl8KFUV2ZW50U2VhUmFjZVJld2FyZE1hcBgBIAMoCzJALnJh",
            "d2RhdGEuRXZlbnRTZWFSYWNlUmV3YXJkTWFwQUJWYWx1ZS5FdmVudFNlYVJh",
            "Y2VSZXdhcmRNYXBFbnRyeRpZChpFdmVudFNlYVJhY2VSZXdhcmRNYXBFbnRy",
            "eRILCgNrZXkYASABKAUSKgoFdmFsdWUYAiABKAsyGy5yYXdkYXRhLkV2ZW50",
            "U2VhUmFjZVJld2FyZDoCOAEi6QQKFkV2ZW50U2VhUmFjZVJld2FyZENvbmYS",
            "WQoVRXZlbnRTZWFSYWNlUmV3YXJkTWFwGAEgAygLMjoucmF3ZGF0YS5FdmVu",
            "dFNlYVJhY2VSZXdhcmRDb25mLkV2ZW50U2VhUmFjZVJld2FyZE1hcEVudHJ5",
            "El0KF0V2ZW50U2VhUmFjZVJld2FyZE1hcEFCGAIgAygLMjwucmF3ZGF0YS5F",
            "dmVudFNlYVJhY2VSZXdhcmRDb25mLkV2ZW50U2VhUmFjZVJld2FyZE1hcEFC",
            "RW50cnkSZwocRXZlbnRTZWFSYWNlUmV3YXJkTWFwQUJQYXRjaBgDIAMoCzJB",
            "LnJhd2RhdGEuRXZlbnRTZWFSYWNlUmV3YXJkQ29uZi5FdmVudFNlYVJhY2VS",
            "ZXdhcmRNYXBBQlBhdGNoRW50cnkaWQoaRXZlbnRTZWFSYWNlUmV3YXJkTWFw",
            "RW50cnkSCwoDa2V5GAEgASgFEioKBXZhbHVlGAIgASgLMhsucmF3ZGF0YS5F",
            "dmVudFNlYVJhY2VSZXdhcmQ6AjgBGmUKHEV2ZW50U2VhUmFjZVJld2FyZE1h",
            "cEFCRW50cnkSCwoDa2V5GAEgASgJEjQKBXZhbHVlGAIgASgLMiUucmF3ZGF0",
            "YS5FdmVudFNlYVJhY2VSZXdhcmRNYXBBQlZhbHVlOgI4ARpqCiFFdmVudFNl",
            "YVJhY2VSZXdhcmRNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEjQKBXZh",
            "bHVlGAIgASgLMiUucmF3ZGF0YS5FdmVudFNlYVJhY2VSZXdhcmRNYXBBQlZh",
            "bHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29s",
            "YW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventSeaRaceReward), global::fat.rawdata.EventSeaRaceReward.Parser, new[]{ "Id", "Icon", "Reward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventSeaRaceRewardMapABValue), global::fat.rawdata.EventSeaRaceRewardMapABValue.Parser, new[]{ "EventSeaRaceRewardMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventSeaRaceRewardConf), global::fat.rawdata.EventSeaRaceRewardConf.Parser, new[]{ "EventSeaRaceRewardMap", "EventSeaRaceRewardMapAB", "EventSeaRaceRewardMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventSeaRaceReward",table="EventSeaRaceRewardMap",table_wrapper="EventSeaRaceRewardConf",map="true",map_key_type="int32",data="EventSeaRaceRewardConf")
  /// annotation@ab(table_ab="EventSeaRaceRewardMapAB",table_ab_patch="EventSeaRaceRewardMapABPatch",table_ab_value="EventSeaRaceRewardMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventSeaRaceReward(id="id")
  /// </summary>
  public sealed partial class EventSeaRaceReward : pb::IMessage<EventSeaRaceReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventSeaRaceReward> _parser = new pb::MessageParser<EventSeaRaceReward>(() => new EventSeaRaceReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSeaRaceReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventSeaRaceRewardConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceReward(EventSeaRaceReward other) : this() {
      id_ = other.id_;
      icon_ = other.icon_;
      reward_ = other.reward_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceReward Clone() {
      return new EventSeaRaceReward(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 回合奖励id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 2;
    private string icon_ = "";
    /// <summary>
    /// 宝箱图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_reward_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> reward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 回合奖励详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Reward {
      get { return reward_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSeaRaceReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSeaRaceReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Icon != other.Icon) return false;
      if(!reward_.Equals(other.reward_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      hash ^= reward_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Icon);
      }
      reward_.WriteTo(output, _repeated_reward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Icon);
      }
      reward_.WriteTo(ref output, _repeated_reward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      size += reward_.CalculateSize(_repeated_reward_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSeaRaceReward other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      reward_.Add(other.reward_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Icon = input.ReadString();
            break;
          }
          case 26: {
            reward_.AddEntriesFrom(input, _repeated_reward_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Icon = input.ReadString();
            break;
          }
          case 26: {
            reward_.AddEntriesFrom(ref input, _repeated_reward_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventSeaRaceRewardMapABValue : pb::IMessage<EventSeaRaceRewardMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventSeaRaceRewardMapABValue> _parser = new pb::MessageParser<EventSeaRaceRewardMapABValue>(() => new EventSeaRaceRewardMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSeaRaceRewardMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventSeaRaceRewardConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceRewardMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceRewardMapABValue(EventSeaRaceRewardMapABValue other) : this() {
      eventSeaRaceRewardMap_ = other.eventSeaRaceRewardMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceRewardMapABValue Clone() {
      return new EventSeaRaceRewardMapABValue(this);
    }

    /// <summary>Field number for the "EventSeaRaceRewardMap" field.</summary>
    public const int EventSeaRaceRewardMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventSeaRaceReward>.Codec _map_eventSeaRaceRewardMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventSeaRaceReward>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRaceReward.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventSeaRaceReward> eventSeaRaceRewardMap_ = new pbc::MapField<int, global::fat.rawdata.EventSeaRaceReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventSeaRaceReward> EventSeaRaceRewardMap {
      get { return eventSeaRaceRewardMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSeaRaceRewardMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSeaRaceRewardMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventSeaRaceRewardMap.Equals(other.EventSeaRaceRewardMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventSeaRaceRewardMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventSeaRaceRewardMap_.WriteTo(output, _map_eventSeaRaceRewardMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventSeaRaceRewardMap_.WriteTo(ref output, _map_eventSeaRaceRewardMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventSeaRaceRewardMap_.CalculateSize(_map_eventSeaRaceRewardMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSeaRaceRewardMapABValue other) {
      if (other == null) {
        return;
      }
      eventSeaRaceRewardMap_.Add(other.eventSeaRaceRewardMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventSeaRaceRewardMap_.AddEntriesFrom(input, _map_eventSeaRaceRewardMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventSeaRaceRewardMap_.AddEntriesFrom(ref input, _map_eventSeaRaceRewardMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventSeaRaceRewardConf : pb::IMessage<EventSeaRaceRewardConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventSeaRaceRewardConf> _parser = new pb::MessageParser<EventSeaRaceRewardConf>(() => new EventSeaRaceRewardConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSeaRaceRewardConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventSeaRaceRewardConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceRewardConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceRewardConf(EventSeaRaceRewardConf other) : this() {
      eventSeaRaceRewardMap_ = other.eventSeaRaceRewardMap_.Clone();
      eventSeaRaceRewardMapAB_ = other.eventSeaRaceRewardMapAB_.Clone();
      eventSeaRaceRewardMapABPatch_ = other.eventSeaRaceRewardMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceRewardConf Clone() {
      return new EventSeaRaceRewardConf(this);
    }

    /// <summary>Field number for the "EventSeaRaceRewardMap" field.</summary>
    public const int EventSeaRaceRewardMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventSeaRaceReward>.Codec _map_eventSeaRaceRewardMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventSeaRaceReward>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRaceReward.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventSeaRaceReward> eventSeaRaceRewardMap_ = new pbc::MapField<int, global::fat.rawdata.EventSeaRaceReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventSeaRaceReward> EventSeaRaceRewardMap {
      get { return eventSeaRaceRewardMap_; }
    }

    /// <summary>Field number for the "EventSeaRaceRewardMapAB" field.</summary>
    public const int EventSeaRaceRewardMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceRewardMapABValue>.Codec _map_eventSeaRaceRewardMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceRewardMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRaceRewardMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceRewardMapABValue> eventSeaRaceRewardMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceRewardMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventSeaRaceRewardMapABValue> EventSeaRaceRewardMapAB {
      get { return eventSeaRaceRewardMapAB_; }
    }

    /// <summary>Field number for the "EventSeaRaceRewardMapABPatch" field.</summary>
    public const int EventSeaRaceRewardMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceRewardMapABValue>.Codec _map_eventSeaRaceRewardMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceRewardMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRaceRewardMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceRewardMapABValue> eventSeaRaceRewardMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceRewardMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventSeaRaceRewardMapABValue> EventSeaRaceRewardMapABPatch {
      get { return eventSeaRaceRewardMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSeaRaceRewardConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSeaRaceRewardConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventSeaRaceRewardMap.Equals(other.EventSeaRaceRewardMap)) return false;
      if (!EventSeaRaceRewardMapAB.Equals(other.EventSeaRaceRewardMapAB)) return false;
      if (!EventSeaRaceRewardMapABPatch.Equals(other.EventSeaRaceRewardMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventSeaRaceRewardMap.GetHashCode();
      hash ^= EventSeaRaceRewardMapAB.GetHashCode();
      hash ^= EventSeaRaceRewardMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventSeaRaceRewardMap_.WriteTo(output, _map_eventSeaRaceRewardMap_codec);
      eventSeaRaceRewardMapAB_.WriteTo(output, _map_eventSeaRaceRewardMapAB_codec);
      eventSeaRaceRewardMapABPatch_.WriteTo(output, _map_eventSeaRaceRewardMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventSeaRaceRewardMap_.WriteTo(ref output, _map_eventSeaRaceRewardMap_codec);
      eventSeaRaceRewardMapAB_.WriteTo(ref output, _map_eventSeaRaceRewardMapAB_codec);
      eventSeaRaceRewardMapABPatch_.WriteTo(ref output, _map_eventSeaRaceRewardMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventSeaRaceRewardMap_.CalculateSize(_map_eventSeaRaceRewardMap_codec);
      size += eventSeaRaceRewardMapAB_.CalculateSize(_map_eventSeaRaceRewardMapAB_codec);
      size += eventSeaRaceRewardMapABPatch_.CalculateSize(_map_eventSeaRaceRewardMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSeaRaceRewardConf other) {
      if (other == null) {
        return;
      }
      eventSeaRaceRewardMap_.Add(other.eventSeaRaceRewardMap_);
      eventSeaRaceRewardMapAB_.Add(other.eventSeaRaceRewardMapAB_);
      eventSeaRaceRewardMapABPatch_.Add(other.eventSeaRaceRewardMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventSeaRaceRewardMap_.AddEntriesFrom(input, _map_eventSeaRaceRewardMap_codec);
            break;
          }
          case 18: {
            eventSeaRaceRewardMapAB_.AddEntriesFrom(input, _map_eventSeaRaceRewardMapAB_codec);
            break;
          }
          case 26: {
            eventSeaRaceRewardMapABPatch_.AddEntriesFrom(input, _map_eventSeaRaceRewardMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventSeaRaceRewardMap_.AddEntriesFrom(ref input, _map_eventSeaRaceRewardMap_codec);
            break;
          }
          case 18: {
            eventSeaRaceRewardMapAB_.AddEntriesFrom(ref input, _map_eventSeaRaceRewardMapAB_codec);
            break;
          }
          case 26: {
            eventSeaRaceRewardMapABPatch_.AddEntriesFrom(ref input, _map_eventSeaRaceRewardMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
