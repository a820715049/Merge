// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventVineLeapDiffConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventVineLeapDiffConf.proto</summary>
  public static partial class EventVineLeapDiffConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventVineLeapDiffConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventVineLeapDiffConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNyYXdkYXRhL0V2ZW50VmluZUxlYXBEaWZmQ29uZi5wcm90bxIHcmF3ZGF0",
            "YSI1ChFFdmVudFZpbmVMZWFwRGlmZhIKCgJpZBgBIAEoBRIUCgxzZWxlY3RE",
            "aWZmSWQYAiADKAUi1AEKG0V2ZW50VmluZUxlYXBEaWZmTWFwQUJWYWx1ZRJc",
            "ChRFdmVudFZpbmVMZWFwRGlmZk1hcBgBIAMoCzI+LnJhd2RhdGEuRXZlbnRW",
            "aW5lTGVhcERpZmZNYXBBQlZhbHVlLkV2ZW50VmluZUxlYXBEaWZmTWFwRW50",
            "cnkaVwoZRXZlbnRWaW5lTGVhcERpZmZNYXBFbnRyeRILCgNrZXkYASABKAUS",
            "KQoFdmFsdWUYAiABKAsyGi5yYXdkYXRhLkV2ZW50VmluZUxlYXBEaWZmOgI4",
            "ASLZBAoVRXZlbnRWaW5lTGVhcERpZmZDb25mElYKFEV2ZW50VmluZUxlYXBE",
            "aWZmTWFwGAEgAygLMjgucmF3ZGF0YS5FdmVudFZpbmVMZWFwRGlmZkNvbmYu",
            "RXZlbnRWaW5lTGVhcERpZmZNYXBFbnRyeRJaChZFdmVudFZpbmVMZWFwRGlm",
            "Zk1hcEFCGAIgAygLMjoucmF3ZGF0YS5FdmVudFZpbmVMZWFwRGlmZkNvbmYu",
            "RXZlbnRWaW5lTGVhcERpZmZNYXBBQkVudHJ5EmQKG0V2ZW50VmluZUxlYXBE",
            "aWZmTWFwQUJQYXRjaBgDIAMoCzI/LnJhd2RhdGEuRXZlbnRWaW5lTGVhcERp",
            "ZmZDb25mLkV2ZW50VmluZUxlYXBEaWZmTWFwQUJQYXRjaEVudHJ5GlcKGUV2",
            "ZW50VmluZUxlYXBEaWZmTWFwRW50cnkSCwoDa2V5GAEgASgFEikKBXZhbHVl",
            "GAIgASgLMhoucmF3ZGF0YS5FdmVudFZpbmVMZWFwRGlmZjoCOAEaYwobRXZl",
            "bnRWaW5lTGVhcERpZmZNYXBBQkVudHJ5EgsKA2tleRgBIAEoCRIzCgV2YWx1",
            "ZRgCIAEoCzIkLnJhd2RhdGEuRXZlbnRWaW5lTGVhcERpZmZNYXBBQlZhbHVl",
            "OgI4ARpoCiBFdmVudFZpbmVMZWFwRGlmZk1hcEFCUGF0Y2hFbnRyeRILCgNr",
            "ZXkYASABKAkSMwoFdmFsdWUYAiABKAsyJC5yYXdkYXRhLkV2ZW50VmluZUxl",
            "YXBEaWZmTWFwQUJWYWx1ZToCOAFCPVotZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0",
            "L2NvbmYvZ2VuL2dvbGFuZy9yYXdkYXRhqgILZmF0LnJhd2RhdGFiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventVineLeapDiff), global::fat.rawdata.EventVineLeapDiff.Parser, new[]{ "Id", "SelectDiffId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventVineLeapDiffMapABValue), global::fat.rawdata.EventVineLeapDiffMapABValue.Parser, new[]{ "EventVineLeapDiffMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventVineLeapDiffConf), global::fat.rawdata.EventVineLeapDiffConf.Parser, new[]{ "EventVineLeapDiffMap", "EventVineLeapDiffMapAB", "EventVineLeapDiffMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventVineLeapDiff",table="EventVineLeapDiffMap",table_wrapper="EventVineLeapDiffConf",map="true",map_key_type="int32",data="EventVineLeapDiffConf")
  /// annotation@ab(table_ab="EventVineLeapDiffMapAB",table_ab_patch="EventVineLeapDiffMapABPatch",table_ab_value="EventVineLeapDiffMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventVineLeapDiff(id="id")
  /// </summary>
  public sealed partial class EventVineLeapDiff : pb::IMessage<EventVineLeapDiff>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventVineLeapDiff> _parser = new pb::MessageParser<EventVineLeapDiff>(() => new EventVineLeapDiff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventVineLeapDiff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventVineLeapDiffConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeapDiff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeapDiff(EventVineLeapDiff other) : this() {
      id_ = other.id_;
      selectDiffId_ = other.selectDiffId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeapDiff Clone() {
      return new EventVineLeapDiff(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 难度id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "selectDiffId" field.</summary>
    public const int SelectDiffIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_selectDiffId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> selectDiffId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 选择难度id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SelectDiffId {
      get { return selectDiffId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventVineLeapDiff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventVineLeapDiff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!selectDiffId_.Equals(other.selectDiffId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= selectDiffId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      selectDiffId_.WriteTo(output, _repeated_selectDiffId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      selectDiffId_.WriteTo(ref output, _repeated_selectDiffId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += selectDiffId_.CalculateSize(_repeated_selectDiffId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventVineLeapDiff other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      selectDiffId_.Add(other.selectDiffId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            selectDiffId_.AddEntriesFrom(input, _repeated_selectDiffId_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            selectDiffId_.AddEntriesFrom(ref input, _repeated_selectDiffId_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventVineLeapDiffMapABValue : pb::IMessage<EventVineLeapDiffMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventVineLeapDiffMapABValue> _parser = new pb::MessageParser<EventVineLeapDiffMapABValue>(() => new EventVineLeapDiffMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventVineLeapDiffMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventVineLeapDiffConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeapDiffMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeapDiffMapABValue(EventVineLeapDiffMapABValue other) : this() {
      eventVineLeapDiffMap_ = other.eventVineLeapDiffMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeapDiffMapABValue Clone() {
      return new EventVineLeapDiffMapABValue(this);
    }

    /// <summary>Field number for the "EventVineLeapDiffMap" field.</summary>
    public const int EventVineLeapDiffMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventVineLeapDiff>.Codec _map_eventVineLeapDiffMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventVineLeapDiff>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventVineLeapDiff.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventVineLeapDiff> eventVineLeapDiffMap_ = new pbc::MapField<int, global::fat.rawdata.EventVineLeapDiff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventVineLeapDiff> EventVineLeapDiffMap {
      get { return eventVineLeapDiffMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventVineLeapDiffMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventVineLeapDiffMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventVineLeapDiffMap.Equals(other.EventVineLeapDiffMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventVineLeapDiffMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventVineLeapDiffMap_.WriteTo(output, _map_eventVineLeapDiffMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventVineLeapDiffMap_.WriteTo(ref output, _map_eventVineLeapDiffMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventVineLeapDiffMap_.CalculateSize(_map_eventVineLeapDiffMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventVineLeapDiffMapABValue other) {
      if (other == null) {
        return;
      }
      eventVineLeapDiffMap_.Add(other.eventVineLeapDiffMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventVineLeapDiffMap_.AddEntriesFrom(input, _map_eventVineLeapDiffMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventVineLeapDiffMap_.AddEntriesFrom(ref input, _map_eventVineLeapDiffMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventVineLeapDiffConf : pb::IMessage<EventVineLeapDiffConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventVineLeapDiffConf> _parser = new pb::MessageParser<EventVineLeapDiffConf>(() => new EventVineLeapDiffConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventVineLeapDiffConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventVineLeapDiffConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeapDiffConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeapDiffConf(EventVineLeapDiffConf other) : this() {
      eventVineLeapDiffMap_ = other.eventVineLeapDiffMap_.Clone();
      eventVineLeapDiffMapAB_ = other.eventVineLeapDiffMapAB_.Clone();
      eventVineLeapDiffMapABPatch_ = other.eventVineLeapDiffMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeapDiffConf Clone() {
      return new EventVineLeapDiffConf(this);
    }

    /// <summary>Field number for the "EventVineLeapDiffMap" field.</summary>
    public const int EventVineLeapDiffMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventVineLeapDiff>.Codec _map_eventVineLeapDiffMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventVineLeapDiff>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventVineLeapDiff.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventVineLeapDiff> eventVineLeapDiffMap_ = new pbc::MapField<int, global::fat.rawdata.EventVineLeapDiff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventVineLeapDiff> EventVineLeapDiffMap {
      get { return eventVineLeapDiffMap_; }
    }

    /// <summary>Field number for the "EventVineLeapDiffMapAB" field.</summary>
    public const int EventVineLeapDiffMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventVineLeapDiffMapABValue>.Codec _map_eventVineLeapDiffMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventVineLeapDiffMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventVineLeapDiffMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventVineLeapDiffMapABValue> eventVineLeapDiffMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventVineLeapDiffMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventVineLeapDiffMapABValue> EventVineLeapDiffMapAB {
      get { return eventVineLeapDiffMapAB_; }
    }

    /// <summary>Field number for the "EventVineLeapDiffMapABPatch" field.</summary>
    public const int EventVineLeapDiffMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventVineLeapDiffMapABValue>.Codec _map_eventVineLeapDiffMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventVineLeapDiffMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventVineLeapDiffMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventVineLeapDiffMapABValue> eventVineLeapDiffMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventVineLeapDiffMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventVineLeapDiffMapABValue> EventVineLeapDiffMapABPatch {
      get { return eventVineLeapDiffMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventVineLeapDiffConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventVineLeapDiffConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventVineLeapDiffMap.Equals(other.EventVineLeapDiffMap)) return false;
      if (!EventVineLeapDiffMapAB.Equals(other.EventVineLeapDiffMapAB)) return false;
      if (!EventVineLeapDiffMapABPatch.Equals(other.EventVineLeapDiffMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventVineLeapDiffMap.GetHashCode();
      hash ^= EventVineLeapDiffMapAB.GetHashCode();
      hash ^= EventVineLeapDiffMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventVineLeapDiffMap_.WriteTo(output, _map_eventVineLeapDiffMap_codec);
      eventVineLeapDiffMapAB_.WriteTo(output, _map_eventVineLeapDiffMapAB_codec);
      eventVineLeapDiffMapABPatch_.WriteTo(output, _map_eventVineLeapDiffMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventVineLeapDiffMap_.WriteTo(ref output, _map_eventVineLeapDiffMap_codec);
      eventVineLeapDiffMapAB_.WriteTo(ref output, _map_eventVineLeapDiffMapAB_codec);
      eventVineLeapDiffMapABPatch_.WriteTo(ref output, _map_eventVineLeapDiffMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventVineLeapDiffMap_.CalculateSize(_map_eventVineLeapDiffMap_codec);
      size += eventVineLeapDiffMapAB_.CalculateSize(_map_eventVineLeapDiffMapAB_codec);
      size += eventVineLeapDiffMapABPatch_.CalculateSize(_map_eventVineLeapDiffMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventVineLeapDiffConf other) {
      if (other == null) {
        return;
      }
      eventVineLeapDiffMap_.Add(other.eventVineLeapDiffMap_);
      eventVineLeapDiffMapAB_.Add(other.eventVineLeapDiffMapAB_);
      eventVineLeapDiffMapABPatch_.Add(other.eventVineLeapDiffMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventVineLeapDiffMap_.AddEntriesFrom(input, _map_eventVineLeapDiffMap_codec);
            break;
          }
          case 18: {
            eventVineLeapDiffMapAB_.AddEntriesFrom(input, _map_eventVineLeapDiffMapAB_codec);
            break;
          }
          case 26: {
            eventVineLeapDiffMapABPatch_.AddEntriesFrom(input, _map_eventVineLeapDiffMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventVineLeapDiffMap_.AddEntriesFrom(ref input, _map_eventVineLeapDiffMap_codec);
            break;
          }
          case 18: {
            eventVineLeapDiffMapAB_.AddEntriesFrom(ref input, _map_eventVineLeapDiffMapAB_codec);
            break;
          }
          case 26: {
            eventVineLeapDiffMapABPatch_.AddEntriesFrom(ref input, _map_eventVineLeapDiffMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
