// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/ToolExchangeConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/ToolExchangeConf.proto</summary>
  public static partial class ToolExchangeConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/ToolExchangeConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ToolExchangeConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5yYXdkYXRhL1Rvb2xFeGNoYW5nZUNvbmYucHJvdG8SB3Jhd2RhdGEiwwEK",
            "DFRvb2xFeGNoYW5nZRIKCgJpZBgBIAEoBRISCgphY3RpdmVDb2luGAIgASgJ",
            "EhMKC2FjdGl2ZUxldmVsGAMgASgFEhAKCGR1cmF0aW9uGAQgASgFEhIKCmV2",
            "ZW50VGhlbWUYDCABKAUSEAoIaW50ZXJ2YWwYBSABKAUSEAoIbGltaXROdW0Y",
            "BiABKAUSDQoFcHJpY2UYCSABKAkSDgoGcmV3YXJkGAogAygJEhUKDXNodXRk",
            "b3duTGV2ZWwYCyABKAUitgEKFlRvb2xFeGNoYW5nZU1hcEFCVmFsdWUSTQoP",
            "VG9vbEV4Y2hhbmdlTWFwGAEgAygLMjQucmF3ZGF0YS5Ub29sRXhjaGFuZ2VN",
            "YXBBQlZhbHVlLlRvb2xFeGNoYW5nZU1hcEVudHJ5Gk0KFFRvb2xFeGNoYW5n",
            "ZU1hcEVudHJ5EgsKA2tleRgBIAEoBRIkCgV2YWx1ZRgCIAEoCzIVLnJhd2Rh",
            "dGEuVG9vbEV4Y2hhbmdlOgI4ASKJBAoQVG9vbEV4Y2hhbmdlQ29uZhJHCg9U",
            "b29sRXhjaGFuZ2VNYXAYASADKAsyLi5yYXdkYXRhLlRvb2xFeGNoYW5nZUNv",
            "bmYuVG9vbEV4Y2hhbmdlTWFwRW50cnkSSwoRVG9vbEV4Y2hhbmdlTWFwQUIY",
            "AiADKAsyMC5yYXdkYXRhLlRvb2xFeGNoYW5nZUNvbmYuVG9vbEV4Y2hhbmdl",
            "TWFwQUJFbnRyeRJVChZUb29sRXhjaGFuZ2VNYXBBQlBhdGNoGAMgAygLMjUu",
            "cmF3ZGF0YS5Ub29sRXhjaGFuZ2VDb25mLlRvb2xFeGNoYW5nZU1hcEFCUGF0",
            "Y2hFbnRyeRpNChRUb29sRXhjaGFuZ2VNYXBFbnRyeRILCgNrZXkYASABKAUS",
            "JAoFdmFsdWUYAiABKAsyFS5yYXdkYXRhLlRvb2xFeGNoYW5nZToCOAEaWQoW",
            "VG9vbEV4Y2hhbmdlTWFwQUJFbnRyeRILCgNrZXkYASABKAkSLgoFdmFsdWUY",
            "AiABKAsyHy5yYXdkYXRhLlRvb2xFeGNoYW5nZU1hcEFCVmFsdWU6AjgBGl4K",
            "G1Rvb2xFeGNoYW5nZU1hcEFCUGF0Y2hFbnRyeRILCgNrZXkYASABKAkSLgoF",
            "dmFsdWUYAiABKAsyHy5yYXdkYXRhLlRvb2xFeGNoYW5nZU1hcEFCVmFsdWU6",
            "AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcv",
            "cmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ToolExchange), global::fat.rawdata.ToolExchange.Parser, new[]{ "Id", "ActiveCoin", "ActiveLevel", "Duration", "EventTheme", "Interval", "LimitNum", "Price", "Reward", "ShutdownLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ToolExchangeMapABValue), global::fat.rawdata.ToolExchangeMapABValue.Parser, new[]{ "ToolExchangeMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ToolExchangeConf), global::fat.rawdata.ToolExchangeConf.Parser, new[]{ "ToolExchangeMap", "ToolExchangeMapAB", "ToolExchangeMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="ToolExchange",table="ToolExchangeMap",table_wrapper="ToolExchangeConf",map="true",map_key_type="int32",data="ToolExchangeConf")
  /// annotation@ab(table_ab="ToolExchangeMapAB",table_ab_patch="ToolExchangeMapABPatch",table_ab_value="ToolExchangeMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@ToolExchange(id="id")
  /// </summary>
  public sealed partial class ToolExchange : pb::IMessage<ToolExchange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ToolExchange> _parser = new pb::MessageParser<ToolExchange>(() => new ToolExchange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ToolExchange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ToolExchangeConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToolExchange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToolExchange(ToolExchange other) : this() {
      id_ = other.id_;
      activeCoin_ = other.activeCoin_;
      activeLevel_ = other.activeLevel_;
      duration_ = other.duration_;
      eventTheme_ = other.eventTheme_;
      interval_ = other.interval_;
      limitNum_ = other.limitNum_;
      price_ = other.price_;
      reward_ = other.reward_.Clone();
      shutdownLevel_ = other.shutdownLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToolExchange Clone() {
      return new ToolExchange(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 工具礼包ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "activeCoin" field.</summary>
    public const int ActiveCoinFieldNumber = 2;
    private string activeCoin_ = "";
    /// <summary>
    /// 触发金币数量
    /// （数量:计算方式）
    /// 参数2计算方式规则如下：
    /// 0 = 数量
    /// 3 = 数量*（等级系数/100），RoundCoin取整
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActiveCoin {
      get { return activeCoin_; }
      set {
        activeCoin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "activeLevel" field.</summary>
    public const int ActiveLevelFieldNumber = 3;
    private int activeLevel_;
    /// <summary>
    /// 激活等级
    /// （包含）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveLevel {
      get { return activeLevel_; }
      set {
        activeLevel_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 4;
    private int duration_;
    /// <summary>
    /// 持续时间
    /// （秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 12;
    private int eventTheme_;
    /// <summary>
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 5;
    private int interval_;
    /// <summary>
    /// 冷却时间
    /// （秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "limitNum" field.</summary>
    public const int LimitNumFieldNumber = 6;
    private int limitNum_;
    /// <summary>
    /// 限购次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitNum {
      get { return limitNum_; }
      set {
        limitNum_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 9;
    private string price_ = "";
    /// <summary>
    /// 售价
    /// （数量:计算方式）
    /// 参数2计算方式规则如下：
    /// 0 = 数量
    /// 3 = 数量*（等级系数/100），RoundCoin取整
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Price {
      get { return price_; }
      set {
        price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_reward_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> reward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 礼包奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Reward {
      get { return reward_; }
    }

    /// <summary>Field number for the "shutdownLevel" field.</summary>
    public const int ShutdownLevelFieldNumber = 11;
    private int shutdownLevel_;
    /// <summary>
    /// 关闭等级
    /// （包含）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShutdownLevel {
      get { return shutdownLevel_; }
      set {
        shutdownLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ToolExchange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ToolExchange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ActiveCoin != other.ActiveCoin) return false;
      if (ActiveLevel != other.ActiveLevel) return false;
      if (Duration != other.Duration) return false;
      if (EventTheme != other.EventTheme) return false;
      if (Interval != other.Interval) return false;
      if (LimitNum != other.LimitNum) return false;
      if (Price != other.Price) return false;
      if(!reward_.Equals(other.reward_)) return false;
      if (ShutdownLevel != other.ShutdownLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ActiveCoin.Length != 0) hash ^= ActiveCoin.GetHashCode();
      if (ActiveLevel != 0) hash ^= ActiveLevel.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (Interval != 0) hash ^= Interval.GetHashCode();
      if (LimitNum != 0) hash ^= LimitNum.GetHashCode();
      if (Price.Length != 0) hash ^= Price.GetHashCode();
      hash ^= reward_.GetHashCode();
      if (ShutdownLevel != 0) hash ^= ShutdownLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ActiveCoin.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ActiveCoin);
      }
      if (ActiveLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActiveLevel);
      }
      if (Duration != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Duration);
      }
      if (Interval != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Interval);
      }
      if (LimitNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LimitNum);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Price);
      }
      reward_.WriteTo(output, _repeated_reward_codec);
      if (ShutdownLevel != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ShutdownLevel);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(EventTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ActiveCoin.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ActiveCoin);
      }
      if (ActiveLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActiveLevel);
      }
      if (Duration != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Duration);
      }
      if (Interval != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Interval);
      }
      if (LimitNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LimitNum);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Price);
      }
      reward_.WriteTo(ref output, _repeated_reward_codec);
      if (ShutdownLevel != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ShutdownLevel);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(EventTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ActiveCoin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActiveCoin);
      }
      if (ActiveLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveLevel);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (Interval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Interval);
      }
      if (LimitNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitNum);
      }
      if (Price.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Price);
      }
      size += reward_.CalculateSize(_repeated_reward_codec);
      if (ShutdownLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShutdownLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ToolExchange other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ActiveCoin.Length != 0) {
        ActiveCoin = other.ActiveCoin;
      }
      if (other.ActiveLevel != 0) {
        ActiveLevel = other.ActiveLevel;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.Interval != 0) {
        Interval = other.Interval;
      }
      if (other.LimitNum != 0) {
        LimitNum = other.LimitNum;
      }
      if (other.Price.Length != 0) {
        Price = other.Price;
      }
      reward_.Add(other.reward_);
      if (other.ShutdownLevel != 0) {
        ShutdownLevel = other.ShutdownLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            ActiveCoin = input.ReadString();
            break;
          }
          case 24: {
            ActiveLevel = input.ReadInt32();
            break;
          }
          case 32: {
            Duration = input.ReadInt32();
            break;
          }
          case 40: {
            Interval = input.ReadInt32();
            break;
          }
          case 48: {
            LimitNum = input.ReadInt32();
            break;
          }
          case 74: {
            Price = input.ReadString();
            break;
          }
          case 82: {
            reward_.AddEntriesFrom(input, _repeated_reward_codec);
            break;
          }
          case 88: {
            ShutdownLevel = input.ReadInt32();
            break;
          }
          case 96: {
            EventTheme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            ActiveCoin = input.ReadString();
            break;
          }
          case 24: {
            ActiveLevel = input.ReadInt32();
            break;
          }
          case 32: {
            Duration = input.ReadInt32();
            break;
          }
          case 40: {
            Interval = input.ReadInt32();
            break;
          }
          case 48: {
            LimitNum = input.ReadInt32();
            break;
          }
          case 74: {
            Price = input.ReadString();
            break;
          }
          case 82: {
            reward_.AddEntriesFrom(ref input, _repeated_reward_codec);
            break;
          }
          case 88: {
            ShutdownLevel = input.ReadInt32();
            break;
          }
          case 96: {
            EventTheme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ToolExchangeMapABValue : pb::IMessage<ToolExchangeMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ToolExchangeMapABValue> _parser = new pb::MessageParser<ToolExchangeMapABValue>(() => new ToolExchangeMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ToolExchangeMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ToolExchangeConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToolExchangeMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToolExchangeMapABValue(ToolExchangeMapABValue other) : this() {
      toolExchangeMap_ = other.toolExchangeMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToolExchangeMapABValue Clone() {
      return new ToolExchangeMapABValue(this);
    }

    /// <summary>Field number for the "ToolExchangeMap" field.</summary>
    public const int ToolExchangeMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.ToolExchange>.Codec _map_toolExchangeMap_codec
        = new pbc::MapField<int, global::fat.rawdata.ToolExchange>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ToolExchange.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.ToolExchange> toolExchangeMap_ = new pbc::MapField<int, global::fat.rawdata.ToolExchange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.ToolExchange> ToolExchangeMap {
      get { return toolExchangeMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ToolExchangeMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ToolExchangeMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ToolExchangeMap.Equals(other.ToolExchangeMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ToolExchangeMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      toolExchangeMap_.WriteTo(output, _map_toolExchangeMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      toolExchangeMap_.WriteTo(ref output, _map_toolExchangeMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += toolExchangeMap_.CalculateSize(_map_toolExchangeMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ToolExchangeMapABValue other) {
      if (other == null) {
        return;
      }
      toolExchangeMap_.Add(other.toolExchangeMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            toolExchangeMap_.AddEntriesFrom(input, _map_toolExchangeMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            toolExchangeMap_.AddEntriesFrom(ref input, _map_toolExchangeMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ToolExchangeConf : pb::IMessage<ToolExchangeConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ToolExchangeConf> _parser = new pb::MessageParser<ToolExchangeConf>(() => new ToolExchangeConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ToolExchangeConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ToolExchangeConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToolExchangeConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToolExchangeConf(ToolExchangeConf other) : this() {
      toolExchangeMap_ = other.toolExchangeMap_.Clone();
      toolExchangeMapAB_ = other.toolExchangeMapAB_.Clone();
      toolExchangeMapABPatch_ = other.toolExchangeMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToolExchangeConf Clone() {
      return new ToolExchangeConf(this);
    }

    /// <summary>Field number for the "ToolExchangeMap" field.</summary>
    public const int ToolExchangeMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.ToolExchange>.Codec _map_toolExchangeMap_codec
        = new pbc::MapField<int, global::fat.rawdata.ToolExchange>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ToolExchange.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.ToolExchange> toolExchangeMap_ = new pbc::MapField<int, global::fat.rawdata.ToolExchange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.ToolExchange> ToolExchangeMap {
      get { return toolExchangeMap_; }
    }

    /// <summary>Field number for the "ToolExchangeMapAB" field.</summary>
    public const int ToolExchangeMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.ToolExchangeMapABValue>.Codec _map_toolExchangeMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.ToolExchangeMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ToolExchangeMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.ToolExchangeMapABValue> toolExchangeMapAB_ = new pbc::MapField<string, global::fat.rawdata.ToolExchangeMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ToolExchangeMapABValue> ToolExchangeMapAB {
      get { return toolExchangeMapAB_; }
    }

    /// <summary>Field number for the "ToolExchangeMapABPatch" field.</summary>
    public const int ToolExchangeMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.ToolExchangeMapABValue>.Codec _map_toolExchangeMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.ToolExchangeMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ToolExchangeMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.ToolExchangeMapABValue> toolExchangeMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.ToolExchangeMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ToolExchangeMapABValue> ToolExchangeMapABPatch {
      get { return toolExchangeMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ToolExchangeConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ToolExchangeConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ToolExchangeMap.Equals(other.ToolExchangeMap)) return false;
      if (!ToolExchangeMapAB.Equals(other.ToolExchangeMapAB)) return false;
      if (!ToolExchangeMapABPatch.Equals(other.ToolExchangeMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ToolExchangeMap.GetHashCode();
      hash ^= ToolExchangeMapAB.GetHashCode();
      hash ^= ToolExchangeMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      toolExchangeMap_.WriteTo(output, _map_toolExchangeMap_codec);
      toolExchangeMapAB_.WriteTo(output, _map_toolExchangeMapAB_codec);
      toolExchangeMapABPatch_.WriteTo(output, _map_toolExchangeMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      toolExchangeMap_.WriteTo(ref output, _map_toolExchangeMap_codec);
      toolExchangeMapAB_.WriteTo(ref output, _map_toolExchangeMapAB_codec);
      toolExchangeMapABPatch_.WriteTo(ref output, _map_toolExchangeMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += toolExchangeMap_.CalculateSize(_map_toolExchangeMap_codec);
      size += toolExchangeMapAB_.CalculateSize(_map_toolExchangeMapAB_codec);
      size += toolExchangeMapABPatch_.CalculateSize(_map_toolExchangeMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ToolExchangeConf other) {
      if (other == null) {
        return;
      }
      toolExchangeMap_.Add(other.toolExchangeMap_);
      toolExchangeMapAB_.Add(other.toolExchangeMapAB_);
      toolExchangeMapABPatch_.Add(other.toolExchangeMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            toolExchangeMap_.AddEntriesFrom(input, _map_toolExchangeMap_codec);
            break;
          }
          case 18: {
            toolExchangeMapAB_.AddEntriesFrom(input, _map_toolExchangeMapAB_codec);
            break;
          }
          case 26: {
            toolExchangeMapABPatch_.AddEntriesFrom(input, _map_toolExchangeMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            toolExchangeMap_.AddEntriesFrom(ref input, _map_toolExchangeMap_codec);
            break;
          }
          case 18: {
            toolExchangeMapAB_.AddEntriesFrom(ref input, _map_toolExchangeMapAB_codec);
            break;
          }
          case 26: {
            toolExchangeMapABPatch_.AddEntriesFrom(ref input, _map_toolExchangeMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
