// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/MultiRankRewardConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/MultiRankRewardConf.proto</summary>
  public static partial class MultiRankRewardConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/MultiRankRewardConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MultiRankRewardConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFyYXdkYXRhL011bHRpUmFua1Jld2FyZENvbmYucHJvdG8SB3Jhd2RhdGEi",
            "XAoPTXVsdGlSYW5rUmV3YXJkEgoKAmlkGAEgASgFEgwKBHJhbmsYAiABKAUS",
            "GwoTcmFua1JlcXVpcmVkQ29uc3VtZRgDIAEoCRISCgpyYW5rUmV3YXJkGAQg",
            "AygJIsgBChlNdWx0aVJhbmtSZXdhcmRNYXBBQlZhbHVlElYKEk11bHRpUmFu",
            "a1Jld2FyZE1hcBgBIAMoCzI6LnJhd2RhdGEuTXVsdGlSYW5rUmV3YXJkTWFw",
            "QUJWYWx1ZS5NdWx0aVJhbmtSZXdhcmRNYXBFbnRyeRpTChdNdWx0aVJhbmtS",
            "ZXdhcmRNYXBFbnRyeRILCgNrZXkYASABKAUSJwoFdmFsdWUYAiABKAsyGC5y",
            "YXdkYXRhLk11bHRpUmFua1Jld2FyZDoCOAEiuQQKE011bHRpUmFua1Jld2Fy",
            "ZENvbmYSUAoSTXVsdGlSYW5rUmV3YXJkTWFwGAEgAygLMjQucmF3ZGF0YS5N",
            "dWx0aVJhbmtSZXdhcmRDb25mLk11bHRpUmFua1Jld2FyZE1hcEVudHJ5ElQK",
            "FE11bHRpUmFua1Jld2FyZE1hcEFCGAIgAygLMjYucmF3ZGF0YS5NdWx0aVJh",
            "bmtSZXdhcmRDb25mLk11bHRpUmFua1Jld2FyZE1hcEFCRW50cnkSXgoZTXVs",
            "dGlSYW5rUmV3YXJkTWFwQUJQYXRjaBgDIAMoCzI7LnJhd2RhdGEuTXVsdGlS",
            "YW5rUmV3YXJkQ29uZi5NdWx0aVJhbmtSZXdhcmRNYXBBQlBhdGNoRW50cnka",
            "UwoXTXVsdGlSYW5rUmV3YXJkTWFwRW50cnkSCwoDa2V5GAEgASgFEicKBXZh",
            "bHVlGAIgASgLMhgucmF3ZGF0YS5NdWx0aVJhbmtSZXdhcmQ6AjgBGl8KGU11",
            "bHRpUmFua1Jld2FyZE1hcEFCRW50cnkSCwoDa2V5GAEgASgJEjEKBXZhbHVl",
            "GAIgASgLMiIucmF3ZGF0YS5NdWx0aVJhbmtSZXdhcmRNYXBBQlZhbHVlOgI4",
            "ARpkCh5NdWx0aVJhbmtSZXdhcmRNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEg",
            "ASgJEjEKBXZhbHVlGAIgASgLMiIucmF3ZGF0YS5NdWx0aVJhbmtSZXdhcmRN",
            "YXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9n",
            "ZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MultiRankReward), global::fat.rawdata.MultiRankReward.Parser, new[]{ "Id", "Rank", "RankRequiredConsume", "RankReward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MultiRankRewardMapABValue), global::fat.rawdata.MultiRankRewardMapABValue.Parser, new[]{ "MultiRankRewardMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MultiRankRewardConf), global::fat.rawdata.MultiRankRewardConf.Parser, new[]{ "MultiRankRewardMap", "MultiRankRewardMapAB", "MultiRankRewardMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="MultiRankReward",table="MultiRankRewardMap",table_wrapper="MultiRankRewardConf",map="true",map_key_type="int32",data="MultiRankRewardConf")
  /// annotation@ab(table_ab="MultiRankRewardMapAB",table_ab_patch="MultiRankRewardMapABPatch",table_ab_value="MultiRankRewardMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@MultiRankReward(id="id")
  /// </summary>
  public sealed partial class MultiRankReward : pb::IMessage<MultiRankReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MultiRankReward> _parser = new pb::MessageParser<MultiRankReward>(() => new MultiRankReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiRankReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MultiRankRewardConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRankReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRankReward(MultiRankReward other) : this() {
      id_ = other.id_;
      rank_ = other.rank_;
      rankRequiredConsume_ = other.rankRequiredConsume_;
      rankReward_ = other.rankReward_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRankReward Clone() {
      return new MultiRankReward(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 排名id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private int rank_;
    /// <summary>
    /// 排名位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "rankRequiredConsume" field.</summary>
    public const int RankRequiredConsumeFieldNumber = 3;
    private string rankRequiredConsume_ = "";
    /// <summary>
    /// 达到此排名需要消耗的体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RankRequiredConsume {
      get { return rankRequiredConsume_; }
      set {
        rankRequiredConsume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rankReward" field.</summary>
    public const int RankRewardFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_rankReward_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> rankReward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 排名奖励奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RankReward {
      get { return rankReward_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiRankReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiRankReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Rank != other.Rank) return false;
      if (RankRequiredConsume != other.RankRequiredConsume) return false;
      if(!rankReward_.Equals(other.rankReward_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (RankRequiredConsume.Length != 0) hash ^= RankRequiredConsume.GetHashCode();
      hash ^= rankReward_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rank);
      }
      if (RankRequiredConsume.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RankRequiredConsume);
      }
      rankReward_.WriteTo(output, _repeated_rankReward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rank);
      }
      if (RankRequiredConsume.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RankRequiredConsume);
      }
      rankReward_.WriteTo(ref output, _repeated_rankReward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (RankRequiredConsume.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RankRequiredConsume);
      }
      size += rankReward_.CalculateSize(_repeated_rankReward_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiRankReward other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.RankRequiredConsume.Length != 0) {
        RankRequiredConsume = other.RankRequiredConsume;
      }
      rankReward_.Add(other.rankReward_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Rank = input.ReadInt32();
            break;
          }
          case 26: {
            RankRequiredConsume = input.ReadString();
            break;
          }
          case 34: {
            rankReward_.AddEntriesFrom(input, _repeated_rankReward_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Rank = input.ReadInt32();
            break;
          }
          case 26: {
            RankRequiredConsume = input.ReadString();
            break;
          }
          case 34: {
            rankReward_.AddEntriesFrom(ref input, _repeated_rankReward_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MultiRankRewardMapABValue : pb::IMessage<MultiRankRewardMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MultiRankRewardMapABValue> _parser = new pb::MessageParser<MultiRankRewardMapABValue>(() => new MultiRankRewardMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiRankRewardMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MultiRankRewardConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRankRewardMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRankRewardMapABValue(MultiRankRewardMapABValue other) : this() {
      multiRankRewardMap_ = other.multiRankRewardMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRankRewardMapABValue Clone() {
      return new MultiRankRewardMapABValue(this);
    }

    /// <summary>Field number for the "MultiRankRewardMap" field.</summary>
    public const int MultiRankRewardMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MultiRankReward>.Codec _map_multiRankRewardMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MultiRankReward>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MultiRankReward.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MultiRankReward> multiRankRewardMap_ = new pbc::MapField<int, global::fat.rawdata.MultiRankReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MultiRankReward> MultiRankRewardMap {
      get { return multiRankRewardMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiRankRewardMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiRankRewardMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MultiRankRewardMap.Equals(other.MultiRankRewardMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MultiRankRewardMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      multiRankRewardMap_.WriteTo(output, _map_multiRankRewardMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      multiRankRewardMap_.WriteTo(ref output, _map_multiRankRewardMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += multiRankRewardMap_.CalculateSize(_map_multiRankRewardMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiRankRewardMapABValue other) {
      if (other == null) {
        return;
      }
      multiRankRewardMap_.Add(other.multiRankRewardMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            multiRankRewardMap_.AddEntriesFrom(input, _map_multiRankRewardMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            multiRankRewardMap_.AddEntriesFrom(ref input, _map_multiRankRewardMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MultiRankRewardConf : pb::IMessage<MultiRankRewardConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MultiRankRewardConf> _parser = new pb::MessageParser<MultiRankRewardConf>(() => new MultiRankRewardConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiRankRewardConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MultiRankRewardConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRankRewardConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRankRewardConf(MultiRankRewardConf other) : this() {
      multiRankRewardMap_ = other.multiRankRewardMap_.Clone();
      multiRankRewardMapAB_ = other.multiRankRewardMapAB_.Clone();
      multiRankRewardMapABPatch_ = other.multiRankRewardMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiRankRewardConf Clone() {
      return new MultiRankRewardConf(this);
    }

    /// <summary>Field number for the "MultiRankRewardMap" field.</summary>
    public const int MultiRankRewardMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MultiRankReward>.Codec _map_multiRankRewardMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MultiRankReward>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MultiRankReward.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MultiRankReward> multiRankRewardMap_ = new pbc::MapField<int, global::fat.rawdata.MultiRankReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MultiRankReward> MultiRankRewardMap {
      get { return multiRankRewardMap_; }
    }

    /// <summary>Field number for the "MultiRankRewardMapAB" field.</summary>
    public const int MultiRankRewardMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.MultiRankRewardMapABValue>.Codec _map_multiRankRewardMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.MultiRankRewardMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MultiRankRewardMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.MultiRankRewardMapABValue> multiRankRewardMapAB_ = new pbc::MapField<string, global::fat.rawdata.MultiRankRewardMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MultiRankRewardMapABValue> MultiRankRewardMapAB {
      get { return multiRankRewardMapAB_; }
    }

    /// <summary>Field number for the "MultiRankRewardMapABPatch" field.</summary>
    public const int MultiRankRewardMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.MultiRankRewardMapABValue>.Codec _map_multiRankRewardMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.MultiRankRewardMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MultiRankRewardMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.MultiRankRewardMapABValue> multiRankRewardMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.MultiRankRewardMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MultiRankRewardMapABValue> MultiRankRewardMapABPatch {
      get { return multiRankRewardMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiRankRewardConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiRankRewardConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MultiRankRewardMap.Equals(other.MultiRankRewardMap)) return false;
      if (!MultiRankRewardMapAB.Equals(other.MultiRankRewardMapAB)) return false;
      if (!MultiRankRewardMapABPatch.Equals(other.MultiRankRewardMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MultiRankRewardMap.GetHashCode();
      hash ^= MultiRankRewardMapAB.GetHashCode();
      hash ^= MultiRankRewardMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      multiRankRewardMap_.WriteTo(output, _map_multiRankRewardMap_codec);
      multiRankRewardMapAB_.WriteTo(output, _map_multiRankRewardMapAB_codec);
      multiRankRewardMapABPatch_.WriteTo(output, _map_multiRankRewardMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      multiRankRewardMap_.WriteTo(ref output, _map_multiRankRewardMap_codec);
      multiRankRewardMapAB_.WriteTo(ref output, _map_multiRankRewardMapAB_codec);
      multiRankRewardMapABPatch_.WriteTo(ref output, _map_multiRankRewardMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += multiRankRewardMap_.CalculateSize(_map_multiRankRewardMap_codec);
      size += multiRankRewardMapAB_.CalculateSize(_map_multiRankRewardMapAB_codec);
      size += multiRankRewardMapABPatch_.CalculateSize(_map_multiRankRewardMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiRankRewardConf other) {
      if (other == null) {
        return;
      }
      multiRankRewardMap_.Add(other.multiRankRewardMap_);
      multiRankRewardMapAB_.Add(other.multiRankRewardMapAB_);
      multiRankRewardMapABPatch_.Add(other.multiRankRewardMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            multiRankRewardMap_.AddEntriesFrom(input, _map_multiRankRewardMap_codec);
            break;
          }
          case 18: {
            multiRankRewardMapAB_.AddEntriesFrom(input, _map_multiRankRewardMapAB_codec);
            break;
          }
          case 26: {
            multiRankRewardMapABPatch_.AddEntriesFrom(input, _map_multiRankRewardMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            multiRankRewardMap_.AddEntriesFrom(ref input, _map_multiRankRewardMap_codec);
            break;
          }
          case 18: {
            multiRankRewardMapAB_.AddEntriesFrom(ref input, _map_multiRankRewardMapAB_codec);
            break;
          }
          case 26: {
            multiRankRewardMapABPatch_.AddEntriesFrom(ref input, _map_multiRankRewardMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
