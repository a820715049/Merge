// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventMonopolyConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventMonopolyConf.proto</summary>
  public static partial class EventMonopolyConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventMonopolyConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventMonopolyConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9yYXdkYXRhL0V2ZW50TW9ub3BvbHlDb25mLnByb3RvEgdyYXdkYXRhIoUC",
            "Cg1FdmVudE1vbm9wb2x5EgoKAmlkGAEgASgFEgwKBGNvc3QYAiABKAUSFQoN",
            "Y3ljbGVUaXBUaGVtZRgDIAEoBRIOCgZkaWNlSWQYBCABKAUSEAoIZGljZVN0",
            "ZXAYBSADKAUSEAoIZW5kVGhlbWUYBiABKAUSEgoKZXZlbnRHcm91cBgHIAEo",
            "BRITCgtleHBpcmVUaGVtZRgIIAEoBRIRCgloZWxwVGhlbWUYCSABKAUSFAoM",
            "bG9hZGluZ1RoZW1lGAogASgFEhEKCW1haW5UaGVtZRgLIAEoBRIWCg5taWxl",
            "c3RvbmVUaGVtZRgMIAEoBRISCgpzdGFydFRoZW1lGA0gASgFIrwBChdFdmVu",
            "dE1vbm9wb2x5TWFwQUJWYWx1ZRJQChBFdmVudE1vbm9wb2x5TWFwGAEgAygL",
            "MjYucmF3ZGF0YS5FdmVudE1vbm9wb2x5TWFwQUJWYWx1ZS5FdmVudE1vbm9w",
            "b2x5TWFwRW50cnkaTwoVRXZlbnRNb25vcG9seU1hcEVudHJ5EgsKA2tleRgB",
            "IAEoBRIlCgV2YWx1ZRgCIAEoCzIWLnJhd2RhdGEuRXZlbnRNb25vcG9seToC",
            "OAEimQQKEUV2ZW50TW9ub3BvbHlDb25mEkoKEEV2ZW50TW9ub3BvbHlNYXAY",
            "ASADKAsyMC5yYXdkYXRhLkV2ZW50TW9ub3BvbHlDb25mLkV2ZW50TW9ub3Bv",
            "bHlNYXBFbnRyeRJOChJFdmVudE1vbm9wb2x5TWFwQUIYAiADKAsyMi5yYXdk",
            "YXRhLkV2ZW50TW9ub3BvbHlDb25mLkV2ZW50TW9ub3BvbHlNYXBBQkVudHJ5",
            "ElgKF0V2ZW50TW9ub3BvbHlNYXBBQlBhdGNoGAMgAygLMjcucmF3ZGF0YS5F",
            "dmVudE1vbm9wb2x5Q29uZi5FdmVudE1vbm9wb2x5TWFwQUJQYXRjaEVudHJ5",
            "Gk8KFUV2ZW50TW9ub3BvbHlNYXBFbnRyeRILCgNrZXkYASABKAUSJQoFdmFs",
            "dWUYAiABKAsyFi5yYXdkYXRhLkV2ZW50TW9ub3BvbHk6AjgBGlsKF0V2ZW50",
            "TW9ub3BvbHlNYXBBQkVudHJ5EgsKA2tleRgBIAEoCRIvCgV2YWx1ZRgCIAEo",
            "CzIgLnJhd2RhdGEuRXZlbnRNb25vcG9seU1hcEFCVmFsdWU6AjgBGmAKHEV2",
            "ZW50TW9ub3BvbHlNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEi8KBXZh",
            "bHVlGAIgASgLMiAucmF3ZGF0YS5FdmVudE1vbm9wb2x5TWFwQUJWYWx1ZToC",
            "OAFCPVotZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9y",
            "YXdkYXRhqgILZmF0LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMonopoly), global::fat.rawdata.EventMonopoly.Parser, new[]{ "Id", "Cost", "CycleTipTheme", "DiceId", "DiceStep", "EndTheme", "EventGroup", "ExpireTheme", "HelpTheme", "LoadingTheme", "MainTheme", "MilestoneTheme", "StartTheme" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMonopolyMapABValue), global::fat.rawdata.EventMonopolyMapABValue.Parser, new[]{ "EventMonopolyMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMonopolyConf), global::fat.rawdata.EventMonopolyConf.Parser, new[]{ "EventMonopolyMap", "EventMonopolyMapAB", "EventMonopolyMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventMonopoly",table="EventMonopolyMap",table_wrapper="EventMonopolyConf",map="true",map_key_type="int32",data="EventMonopolyConf")
  /// annotation@ab(table_ab="EventMonopolyMapAB",table_ab_patch="EventMonopolyMapABPatch",table_ab_value="EventMonopolyMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventMonopoly(id="id")
  /// </summary>
  public sealed partial class EventMonopoly : pb::IMessage<EventMonopoly>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMonopoly> _parser = new pb::MessageParser<EventMonopoly>(() => new EventMonopoly());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMonopoly> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMonopolyConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopoly() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopoly(EventMonopoly other) : this() {
      id_ = other.id_;
      cost_ = other.cost_;
      cycleTipTheme_ = other.cycleTipTheme_;
      diceId_ = other.diceId_;
      diceStep_ = other.diceStep_.Clone();
      endTheme_ = other.endTheme_;
      eventGroup_ = other.eventGroup_;
      expireTheme_ = other.expireTheme_;
      helpTheme_ = other.helpTheme_;
      loadingTheme_ = other.loadingTheme_;
      mainTheme_ = other.mainTheme_;
      milestoneTheme_ = other.milestoneTheme_;
      startTheme_ = other.startTheme_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopoly Clone() {
      return new EventMonopoly(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private int cost_;
    /// <summary>
    /// 活动棋子掉落消耗
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "cycleTipTheme" field.</summary>
    public const int CycleTipThemeFieldNumber = 3;
    private int cycleTipTheme_;
    /// <summary>
    /// 里程碑达成提示
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CycleTipTheme {
      get { return cycleTipTheme_; }
      set {
        cycleTipTheme_ = value;
      }
    }

    /// <summary>Field number for the "diceId" field.</summary>
    public const int DiceIdFieldNumber = 4;
    private int diceId_;
    /// <summary>
    /// 投骰子棋子
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DiceId {
      get { return diceId_; }
      set {
        diceId_ = value;
      }
    }

    /// <summary>Field number for the "diceStep" field.</summary>
    public const int DiceStepFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_diceStep_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> diceStep_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 可以roll出的点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DiceStep {
      get { return diceStep_; }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 6;
    private int endTheme_;
    /// <summary>
    /// 结束弹板
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventGroup" field.</summary>
    public const int EventGroupFieldNumber = 7;
    private int eventGroup_;
    /// <summary>
    /// 活动用户分层
    /// （GradeIndexMapping.id）
    /// （EventMonopolyDetail.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventGroup {
      get { return eventGroup_; }
      set {
        eventGroup_ = value;
      }
    }

    /// <summary>Field number for the "expireTheme" field.</summary>
    public const int ExpireThemeFieldNumber = 8;
    private int expireTheme_;
    /// <summary>
    /// 补领弹板
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpireTheme {
      get { return expireTheme_; }
      set {
        expireTheme_ = value;
      }
    }

    /// <summary>Field number for the "helpTheme" field.</summary>
    public const int HelpThemeFieldNumber = 9;
    private int helpTheme_;
    /// <summary>
    /// 帮助页
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpTheme {
      get { return helpTheme_; }
      set {
        helpTheme_ = value;
      }
    }

    /// <summary>Field number for the "loadingTheme" field.</summary>
    public const int LoadingThemeFieldNumber = 10;
    private int loadingTheme_;
    /// <summary>
    /// Loading界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoadingTheme {
      get { return loadingTheme_; }
      set {
        loadingTheme_ = value;
      }
    }

    /// <summary>Field number for the "mainTheme" field.</summary>
    public const int MainThemeFieldNumber = 11;
    private int mainTheme_;
    /// <summary>
    /// 活动主界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainTheme {
      get { return mainTheme_; }
      set {
        mainTheme_ = value;
      }
    }

    /// <summary>Field number for the "milestoneTheme" field.</summary>
    public const int MilestoneThemeFieldNumber = 12;
    private int milestoneTheme_;
    /// <summary>
    /// 里程碑详情
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MilestoneTheme {
      get { return milestoneTheme_; }
      set {
        milestoneTheme_ = value;
      }
    }

    /// <summary>Field number for the "startTheme" field.</summary>
    public const int StartThemeFieldNumber = 13;
    private int startTheme_;
    /// <summary>
    /// 开启弹板
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTheme {
      get { return startTheme_; }
      set {
        startTheme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMonopoly);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMonopoly other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Cost != other.Cost) return false;
      if (CycleTipTheme != other.CycleTipTheme) return false;
      if (DiceId != other.DiceId) return false;
      if(!diceStep_.Equals(other.diceStep_)) return false;
      if (EndTheme != other.EndTheme) return false;
      if (EventGroup != other.EventGroup) return false;
      if (ExpireTheme != other.ExpireTheme) return false;
      if (HelpTheme != other.HelpTheme) return false;
      if (LoadingTheme != other.LoadingTheme) return false;
      if (MainTheme != other.MainTheme) return false;
      if (MilestoneTheme != other.MilestoneTheme) return false;
      if (StartTheme != other.StartTheme) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (CycleTipTheme != 0) hash ^= CycleTipTheme.GetHashCode();
      if (DiceId != 0) hash ^= DiceId.GetHashCode();
      hash ^= diceStep_.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      if (EventGroup != 0) hash ^= EventGroup.GetHashCode();
      if (ExpireTheme != 0) hash ^= ExpireTheme.GetHashCode();
      if (HelpTheme != 0) hash ^= HelpTheme.GetHashCode();
      if (LoadingTheme != 0) hash ^= LoadingTheme.GetHashCode();
      if (MainTheme != 0) hash ^= MainTheme.GetHashCode();
      if (MilestoneTheme != 0) hash ^= MilestoneTheme.GetHashCode();
      if (StartTheme != 0) hash ^= StartTheme.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Cost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (CycleTipTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CycleTipTheme);
      }
      if (DiceId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DiceId);
      }
      diceStep_.WriteTo(output, _repeated_diceStep_codec);
      if (EndTheme != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EndTheme);
      }
      if (EventGroup != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EventGroup);
      }
      if (ExpireTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ExpireTheme);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HelpTheme);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LoadingTheme);
      }
      if (MainTheme != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MainTheme);
      }
      if (MilestoneTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MilestoneTheme);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(StartTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Cost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (CycleTipTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CycleTipTheme);
      }
      if (DiceId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DiceId);
      }
      diceStep_.WriteTo(ref output, _repeated_diceStep_codec);
      if (EndTheme != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EndTheme);
      }
      if (EventGroup != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EventGroup);
      }
      if (ExpireTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ExpireTheme);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HelpTheme);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LoadingTheme);
      }
      if (MainTheme != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MainTheme);
      }
      if (MilestoneTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MilestoneTheme);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(StartTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (CycleTipTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CycleTipTheme);
      }
      if (DiceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiceId);
      }
      size += diceStep_.CalculateSize(_repeated_diceStep_codec);
      if (EndTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      if (EventGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventGroup);
      }
      if (ExpireTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpireTheme);
      }
      if (HelpTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HelpTheme);
      }
      if (LoadingTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoadingTheme);
      }
      if (MainTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainTheme);
      }
      if (MilestoneTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MilestoneTheme);
      }
      if (StartTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTheme);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMonopoly other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.CycleTipTheme != 0) {
        CycleTipTheme = other.CycleTipTheme;
      }
      if (other.DiceId != 0) {
        DiceId = other.DiceId;
      }
      diceStep_.Add(other.diceStep_);
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      if (other.EventGroup != 0) {
        EventGroup = other.EventGroup;
      }
      if (other.ExpireTheme != 0) {
        ExpireTheme = other.ExpireTheme;
      }
      if (other.HelpTheme != 0) {
        HelpTheme = other.HelpTheme;
      }
      if (other.LoadingTheme != 0) {
        LoadingTheme = other.LoadingTheme;
      }
      if (other.MainTheme != 0) {
        MainTheme = other.MainTheme;
      }
      if (other.MilestoneTheme != 0) {
        MilestoneTheme = other.MilestoneTheme;
      }
      if (other.StartTheme != 0) {
        StartTheme = other.StartTheme;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
          case 24: {
            CycleTipTheme = input.ReadInt32();
            break;
          }
          case 32: {
            DiceId = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            diceStep_.AddEntriesFrom(input, _repeated_diceStep_codec);
            break;
          }
          case 48: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 56: {
            EventGroup = input.ReadInt32();
            break;
          }
          case 64: {
            ExpireTheme = input.ReadInt32();
            break;
          }
          case 72: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 80: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 88: {
            MainTheme = input.ReadInt32();
            break;
          }
          case 96: {
            MilestoneTheme = input.ReadInt32();
            break;
          }
          case 104: {
            StartTheme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
          case 24: {
            CycleTipTheme = input.ReadInt32();
            break;
          }
          case 32: {
            DiceId = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            diceStep_.AddEntriesFrom(ref input, _repeated_diceStep_codec);
            break;
          }
          case 48: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 56: {
            EventGroup = input.ReadInt32();
            break;
          }
          case 64: {
            ExpireTheme = input.ReadInt32();
            break;
          }
          case 72: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 80: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 88: {
            MainTheme = input.ReadInt32();
            break;
          }
          case 96: {
            MilestoneTheme = input.ReadInt32();
            break;
          }
          case 104: {
            StartTheme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMonopolyMapABValue : pb::IMessage<EventMonopolyMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMonopolyMapABValue> _parser = new pb::MessageParser<EventMonopolyMapABValue>(() => new EventMonopolyMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMonopolyMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMonopolyConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopolyMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopolyMapABValue(EventMonopolyMapABValue other) : this() {
      eventMonopolyMap_ = other.eventMonopolyMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopolyMapABValue Clone() {
      return new EventMonopolyMapABValue(this);
    }

    /// <summary>Field number for the "EventMonopolyMap" field.</summary>
    public const int EventMonopolyMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMonopoly>.Codec _map_eventMonopolyMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMonopoly>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMonopoly.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMonopoly> eventMonopolyMap_ = new pbc::MapField<int, global::fat.rawdata.EventMonopoly>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMonopoly> EventMonopolyMap {
      get { return eventMonopolyMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMonopolyMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMonopolyMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMonopolyMap.Equals(other.EventMonopolyMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMonopolyMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMonopolyMap_.WriteTo(output, _map_eventMonopolyMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMonopolyMap_.WriteTo(ref output, _map_eventMonopolyMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMonopolyMap_.CalculateSize(_map_eventMonopolyMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMonopolyMapABValue other) {
      if (other == null) {
        return;
      }
      eventMonopolyMap_.Add(other.eventMonopolyMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMonopolyMap_.AddEntriesFrom(input, _map_eventMonopolyMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMonopolyMap_.AddEntriesFrom(ref input, _map_eventMonopolyMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMonopolyConf : pb::IMessage<EventMonopolyConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMonopolyConf> _parser = new pb::MessageParser<EventMonopolyConf>(() => new EventMonopolyConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMonopolyConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMonopolyConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopolyConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopolyConf(EventMonopolyConf other) : this() {
      eventMonopolyMap_ = other.eventMonopolyMap_.Clone();
      eventMonopolyMapAB_ = other.eventMonopolyMapAB_.Clone();
      eventMonopolyMapABPatch_ = other.eventMonopolyMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopolyConf Clone() {
      return new EventMonopolyConf(this);
    }

    /// <summary>Field number for the "EventMonopolyMap" field.</summary>
    public const int EventMonopolyMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMonopoly>.Codec _map_eventMonopolyMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMonopoly>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMonopoly.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMonopoly> eventMonopolyMap_ = new pbc::MapField<int, global::fat.rawdata.EventMonopoly>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMonopoly> EventMonopolyMap {
      get { return eventMonopolyMap_; }
    }

    /// <summary>Field number for the "EventMonopolyMapAB" field.</summary>
    public const int EventMonopolyMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMonopolyMapABValue>.Codec _map_eventMonopolyMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMonopolyMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMonopolyMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMonopolyMapABValue> eventMonopolyMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventMonopolyMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMonopolyMapABValue> EventMonopolyMapAB {
      get { return eventMonopolyMapAB_; }
    }

    /// <summary>Field number for the "EventMonopolyMapABPatch" field.</summary>
    public const int EventMonopolyMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMonopolyMapABValue>.Codec _map_eventMonopolyMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMonopolyMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMonopolyMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMonopolyMapABValue> eventMonopolyMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventMonopolyMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMonopolyMapABValue> EventMonopolyMapABPatch {
      get { return eventMonopolyMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMonopolyConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMonopolyConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMonopolyMap.Equals(other.EventMonopolyMap)) return false;
      if (!EventMonopolyMapAB.Equals(other.EventMonopolyMapAB)) return false;
      if (!EventMonopolyMapABPatch.Equals(other.EventMonopolyMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMonopolyMap.GetHashCode();
      hash ^= EventMonopolyMapAB.GetHashCode();
      hash ^= EventMonopolyMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMonopolyMap_.WriteTo(output, _map_eventMonopolyMap_codec);
      eventMonopolyMapAB_.WriteTo(output, _map_eventMonopolyMapAB_codec);
      eventMonopolyMapABPatch_.WriteTo(output, _map_eventMonopolyMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMonopolyMap_.WriteTo(ref output, _map_eventMonopolyMap_codec);
      eventMonopolyMapAB_.WriteTo(ref output, _map_eventMonopolyMapAB_codec);
      eventMonopolyMapABPatch_.WriteTo(ref output, _map_eventMonopolyMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMonopolyMap_.CalculateSize(_map_eventMonopolyMap_codec);
      size += eventMonopolyMapAB_.CalculateSize(_map_eventMonopolyMapAB_codec);
      size += eventMonopolyMapABPatch_.CalculateSize(_map_eventMonopolyMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMonopolyConf other) {
      if (other == null) {
        return;
      }
      eventMonopolyMap_.Add(other.eventMonopolyMap_);
      eventMonopolyMapAB_.Add(other.eventMonopolyMapAB_);
      eventMonopolyMapABPatch_.Add(other.eventMonopolyMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMonopolyMap_.AddEntriesFrom(input, _map_eventMonopolyMap_codec);
            break;
          }
          case 18: {
            eventMonopolyMapAB_.AddEntriesFrom(input, _map_eventMonopolyMapAB_codec);
            break;
          }
          case 26: {
            eventMonopolyMapABPatch_.AddEntriesFrom(input, _map_eventMonopolyMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMonopolyMap_.AddEntriesFrom(ref input, _map_eventMonopolyMap_codec);
            break;
          }
          case 18: {
            eventMonopolyMapAB_.AddEntriesFrom(ref input, _map_eventMonopolyMapAB_codec);
            break;
          }
          case 26: {
            eventMonopolyMapABPatch_.AddEntriesFrom(ref input, _map_eventMonopolyMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
