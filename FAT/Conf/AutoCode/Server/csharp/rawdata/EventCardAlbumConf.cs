// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventCardAlbumConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventCardAlbumConf.proto</summary>
  public static partial class EventCardAlbumConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventCardAlbumConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventCardAlbumConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiByYXdkYXRhL0V2ZW50Q2FyZEFsYnVtQ29uZi5wcm90bxIHcmF3ZGF0YSKs",
            "AwoORXZlbnRDYXJkQWxidW0SCgoCaWQYASABKAUSFgoOZW5kUmVtaW5kVGhl",
            "bWUYESABKAUSFQoNZW5kUmVtaW5kVGltZRgEIAEoBRI7CgpleHBpcmVJdGVt",
            "GA8gAygLMicucmF3ZGF0YS5FdmVudENhcmRBbGJ1bS5FeHBpcmVJdGVtRW50",
            "cnkSEQoJZ3JvdXBJbmZvGAUgAygFEgwKBGljb24YBiABKAkSDQoFaW1hZ2UY",
            "ByABKAkSEQoJaXNQcmVtaXVtGBQgASgIEgwKBG5hbWUYCCABKAkSEQoJb3Zl",
            "clRoZW1lGBMgASgFEg8KB3BheVJhdGUYECABKAUSEQoJcmVjb3JkRXJnGAkg",
            "ASgFEhQKDHJlc3RhcnRUaGVtZRgVIAEoBRIOCgZyZXdhcmQYCiADKAkSGAoQ",
            "c3RhcnRSZW1pbmRUaGVtZRgSIAEoBRIXCg9zdGFydFJlbWluZFRpbWUYDCAB",
            "KAUSDgoGdGVtcElkGA0gAygFGjEKD0V4cGlyZUl0ZW1FbnRyeRILCgNrZXkY",
            "ASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIsIBChhFdmVudENhcmRBbGJ1bU1h",
            "cEFCVmFsdWUSUwoRRXZlbnRDYXJkQWxidW1NYXAYASADKAsyOC5yYXdkYXRh",
            "LkV2ZW50Q2FyZEFsYnVtTWFwQUJWYWx1ZS5FdmVudENhcmRBbGJ1bU1hcEVu",
            "dHJ5GlEKFkV2ZW50Q2FyZEFsYnVtTWFwRW50cnkSCwoDa2V5GAEgASgFEiYK",
            "BXZhbHVlGAIgASgLMhcucmF3ZGF0YS5FdmVudENhcmRBbGJ1bToCOAEiqQQK",
            "EkV2ZW50Q2FyZEFsYnVtQ29uZhJNChFFdmVudENhcmRBbGJ1bU1hcBgBIAMo",
            "CzIyLnJhd2RhdGEuRXZlbnRDYXJkQWxidW1Db25mLkV2ZW50Q2FyZEFsYnVt",
            "TWFwRW50cnkSUQoTRXZlbnRDYXJkQWxidW1NYXBBQhgCIAMoCzI0LnJhd2Rh",
            "dGEuRXZlbnRDYXJkQWxidW1Db25mLkV2ZW50Q2FyZEFsYnVtTWFwQUJFbnRy",
            "eRJbChhFdmVudENhcmRBbGJ1bU1hcEFCUGF0Y2gYAyADKAsyOS5yYXdkYXRh",
            "LkV2ZW50Q2FyZEFsYnVtQ29uZi5FdmVudENhcmRBbGJ1bU1hcEFCUGF0Y2hF",
            "bnRyeRpRChZFdmVudENhcmRBbGJ1bU1hcEVudHJ5EgsKA2tleRgBIAEoBRIm",
            "CgV2YWx1ZRgCIAEoCzIXLnJhd2RhdGEuRXZlbnRDYXJkQWxidW06AjgBGl0K",
            "GEV2ZW50Q2FyZEFsYnVtTWFwQUJFbnRyeRILCgNrZXkYASABKAkSMAoFdmFs",
            "dWUYAiABKAsyIS5yYXdkYXRhLkV2ZW50Q2FyZEFsYnVtTWFwQUJWYWx1ZToC",
            "OAEaYgodRXZlbnRDYXJkQWxidW1NYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEg",
            "ASgJEjAKBXZhbHVlGAIgASgLMiEucmF3ZGF0YS5FdmVudENhcmRBbGJ1bU1h",
            "cEFCVmFsdWU6AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dl",
            "bi9nb2xhbmcvcmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventCardAlbum), global::fat.rawdata.EventCardAlbum.Parser, new[]{ "Id", "EndRemindTheme", "EndRemindTime", "ExpireItem", "GroupInfo", "Icon", "Image", "IsPremium", "Name", "OverTheme", "PayRate", "RecordErg", "RestartTheme", "Reward", "StartRemindTheme", "StartRemindTime", "TempId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventCardAlbumMapABValue), global::fat.rawdata.EventCardAlbumMapABValue.Parser, new[]{ "EventCardAlbumMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventCardAlbumConf), global::fat.rawdata.EventCardAlbumConf.Parser, new[]{ "EventCardAlbumMap", "EventCardAlbumMapAB", "EventCardAlbumMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventCardAlbum",table="EventCardAlbumMap",table_wrapper="EventCardAlbumConf",map="true",map_key_type="int32",data="EventCardAlbumConf")
  /// annotation@ab(table_ab="EventCardAlbumMapAB",table_ab_patch="EventCardAlbumMapABPatch",table_ab_value="EventCardAlbumMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventCardAlbum(id="id")
  /// </summary>
  public sealed partial class EventCardAlbum : pb::IMessage<EventCardAlbum>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventCardAlbum> _parser = new pb::MessageParser<EventCardAlbum>(() => new EventCardAlbum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventCardAlbum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventCardAlbumConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventCardAlbum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventCardAlbum(EventCardAlbum other) : this() {
      id_ = other.id_;
      endRemindTheme_ = other.endRemindTheme_;
      endRemindTime_ = other.endRemindTime_;
      expireItem_ = other.expireItem_.Clone();
      groupInfo_ = other.groupInfo_.Clone();
      icon_ = other.icon_;
      image_ = other.image_;
      isPremium_ = other.isPremium_;
      name_ = other.name_;
      overTheme_ = other.overTheme_;
      payRate_ = other.payRate_;
      recordErg_ = other.recordErg_;
      restartTheme_ = other.restartTheme_;
      reward_ = other.reward_.Clone();
      startRemindTheme_ = other.startRemindTheme_;
      startRemindTime_ = other.startRemindTime_;
      tempId_ = other.tempId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventCardAlbum Clone() {
      return new EventCardAlbum(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 卡册ID
    /// （集卡活动模板ID）
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "endRemindTheme" field.</summary>
    public const int EndRemindThemeFieldNumber = 17;
    private int endRemindTheme_;
    /// <summary>
    /// 活动结束预告
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndRemindTheme {
      get { return endRemindTheme_; }
      set {
        endRemindTheme_ = value;
      }
    }

    /// <summary>Field number for the "endRemindTime" field.</summary>
    public const int EndRemindTimeFieldNumber = 4;
    private int endRemindTime_;
    /// <summary>
    /// 活动结束前多久之内
    /// 需要弹出活动结束预告
    /// （秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndRemindTime {
      get { return endRemindTime_; }
      set {
        endRemindTime_ = value;
      }
    }

    /// <summary>Field number for the "expireItem" field.</summary>
    public const int ExpireItemFieldNumber = 15;
    private static readonly pbc::MapField<int, int>.Codec _map_expireItem_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 122);
    private readonly pbc::MapField<int, int> expireItem_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 活动结束时删除物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> ExpireItem {
      get { return expireItem_; }
    }

    /// <summary>Field number for the "groupInfo" field.</summary>
    public const int GroupInfoFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_groupInfo_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> groupInfo_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 包含卡组信息
    /// （CardGroup.id）
    /// （有序）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GroupInfo {
      get { return groupInfo_; }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 6;
    private string icon_ = "";
    /// <summary>
    /// 卡册完成界面图标
    /// （Asset）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 7;
    private string image_ = "";
    /// <summary>
    /// 卡册界面标题背景图
    /// （Asset）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isPremium" field.</summary>
    public const int IsPremiumFieldNumber = 20;
    private bool isPremium_;
    /// <summary>
    /// 是否是典藏版卡册
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPremium {
      get { return isPremium_; }
      set {
        isPremium_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 8;
    private string name_ = "";
    /// <summary>
    /// 卡册名称
    /// （多语言）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "overTheme" field.</summary>
    public const int OverThemeFieldNumber = 19;
    private int overTheme_;
    /// <summary>
    /// 活动结束
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverTheme {
      get { return overTheme_; }
      set {
        overTheme_ = value;
      }
    }

    /// <summary>Field number for the "payRate" field.</summary>
    public const int PayRateFieldNumber = 16;
    private int payRate_;
    /// <summary>
    /// 累计充值
    /// 对ergPass的加成系数
    /// （百分数）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayRate {
      get { return payRate_; }
      set {
        payRate_ = value;
      }
    }

    /// <summary>Field number for the "recordErg" field.</summary>
    public const int RecordErgFieldNumber = 9;
    private int recordErg_;
    /// <summary>
    /// 本期活动记录的能量值
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecordErg {
      get { return recordErg_; }
      set {
        recordErg_ = value;
      }
    }

    /// <summary>Field number for the "restartTheme" field.</summary>
    public const int RestartThemeFieldNumber = 21;
    private int restartTheme_;
    /// <summary>
    /// 重开
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RestartTheme {
      get { return restartTheme_; }
      set {
        restartTheme_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_reward_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> reward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 卡册最终奖励
    /// （通用奖励格式）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Reward {
      get { return reward_; }
    }

    /// <summary>Field number for the "startRemindTheme" field.</summary>
    public const int StartRemindThemeFieldNumber = 18;
    private int startRemindTheme_;
    /// <summary>
    /// 活动开启宣传
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartRemindTheme {
      get { return startRemindTheme_; }
      set {
        startRemindTheme_ = value;
      }
    }

    /// <summary>Field number for the "startRemindTime" field.</summary>
    public const int StartRemindTimeFieldNumber = 12;
    private int startRemindTime_;
    /// <summary>
    /// 活动开始后多久之内
    /// 需要弹出宣传界面
    /// （秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartRemindTime {
      get { return startRemindTime_; }
      set {
        startRemindTime_ = value;
      }
    }

    /// <summary>Field number for the "tempId" field.</summary>
    public const int TempIdFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_tempId_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> tempId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 本期卡册的所有CardLimit模板ID
    /// 作用于：
    /// CardLimit.ergPassInfo
    /// CardLimit.payPassInfo
    /// 活动开始时需要先通过随机
    /// 确定最终使用的tempId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TempId {
      get { return tempId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventCardAlbum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventCardAlbum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (EndRemindTheme != other.EndRemindTheme) return false;
      if (EndRemindTime != other.EndRemindTime) return false;
      if (!ExpireItem.Equals(other.ExpireItem)) return false;
      if(!groupInfo_.Equals(other.groupInfo_)) return false;
      if (Icon != other.Icon) return false;
      if (Image != other.Image) return false;
      if (IsPremium != other.IsPremium) return false;
      if (Name != other.Name) return false;
      if (OverTheme != other.OverTheme) return false;
      if (PayRate != other.PayRate) return false;
      if (RecordErg != other.RecordErg) return false;
      if (RestartTheme != other.RestartTheme) return false;
      if(!reward_.Equals(other.reward_)) return false;
      if (StartRemindTheme != other.StartRemindTheme) return false;
      if (StartRemindTime != other.StartRemindTime) return false;
      if(!tempId_.Equals(other.tempId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (EndRemindTheme != 0) hash ^= EndRemindTheme.GetHashCode();
      if (EndRemindTime != 0) hash ^= EndRemindTime.GetHashCode();
      hash ^= ExpireItem.GetHashCode();
      hash ^= groupInfo_.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (IsPremium != false) hash ^= IsPremium.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (OverTheme != 0) hash ^= OverTheme.GetHashCode();
      if (PayRate != 0) hash ^= PayRate.GetHashCode();
      if (RecordErg != 0) hash ^= RecordErg.GetHashCode();
      if (RestartTheme != 0) hash ^= RestartTheme.GetHashCode();
      hash ^= reward_.GetHashCode();
      if (StartRemindTheme != 0) hash ^= StartRemindTheme.GetHashCode();
      if (StartRemindTime != 0) hash ^= StartRemindTime.GetHashCode();
      hash ^= tempId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (EndRemindTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndRemindTime);
      }
      groupInfo_.WriteTo(output, _repeated_groupInfo_codec);
      if (Icon.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Icon);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Image);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (RecordErg != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RecordErg);
      }
      reward_.WriteTo(output, _repeated_reward_codec);
      if (StartRemindTime != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(StartRemindTime);
      }
      tempId_.WriteTo(output, _repeated_tempId_codec);
      expireItem_.WriteTo(output, _map_expireItem_codec);
      if (PayRate != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(PayRate);
      }
      if (EndRemindTheme != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(EndRemindTheme);
      }
      if (StartRemindTheme != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(StartRemindTheme);
      }
      if (OverTheme != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(OverTheme);
      }
      if (IsPremium != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsPremium);
      }
      if (RestartTheme != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(RestartTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (EndRemindTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndRemindTime);
      }
      groupInfo_.WriteTo(ref output, _repeated_groupInfo_codec);
      if (Icon.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Icon);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Image);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (RecordErg != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RecordErg);
      }
      reward_.WriteTo(ref output, _repeated_reward_codec);
      if (StartRemindTime != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(StartRemindTime);
      }
      tempId_.WriteTo(ref output, _repeated_tempId_codec);
      expireItem_.WriteTo(ref output, _map_expireItem_codec);
      if (PayRate != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(PayRate);
      }
      if (EndRemindTheme != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(EndRemindTheme);
      }
      if (StartRemindTheme != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(StartRemindTheme);
      }
      if (OverTheme != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(OverTheme);
      }
      if (IsPremium != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsPremium);
      }
      if (RestartTheme != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(RestartTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (EndRemindTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EndRemindTheme);
      }
      if (EndRemindTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndRemindTime);
      }
      size += expireItem_.CalculateSize(_map_expireItem_codec);
      size += groupInfo_.CalculateSize(_repeated_groupInfo_codec);
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      if (IsPremium != false) {
        size += 2 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (OverTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OverTheme);
      }
      if (PayRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PayRate);
      }
      if (RecordErg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecordErg);
      }
      if (RestartTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RestartTheme);
      }
      size += reward_.CalculateSize(_repeated_reward_codec);
      if (StartRemindTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartRemindTheme);
      }
      if (StartRemindTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartRemindTime);
      }
      size += tempId_.CalculateSize(_repeated_tempId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventCardAlbum other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.EndRemindTheme != 0) {
        EndRemindTheme = other.EndRemindTheme;
      }
      if (other.EndRemindTime != 0) {
        EndRemindTime = other.EndRemindTime;
      }
      expireItem_.Add(other.expireItem_);
      groupInfo_.Add(other.groupInfo_);
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      if (other.IsPremium != false) {
        IsPremium = other.IsPremium;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.OverTheme != 0) {
        OverTheme = other.OverTheme;
      }
      if (other.PayRate != 0) {
        PayRate = other.PayRate;
      }
      if (other.RecordErg != 0) {
        RecordErg = other.RecordErg;
      }
      if (other.RestartTheme != 0) {
        RestartTheme = other.RestartTheme;
      }
      reward_.Add(other.reward_);
      if (other.StartRemindTheme != 0) {
        StartRemindTheme = other.StartRemindTheme;
      }
      if (other.StartRemindTime != 0) {
        StartRemindTime = other.StartRemindTime;
      }
      tempId_.Add(other.tempId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 32: {
            EndRemindTime = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            groupInfo_.AddEntriesFrom(input, _repeated_groupInfo_codec);
            break;
          }
          case 50: {
            Icon = input.ReadString();
            break;
          }
          case 58: {
            Image = input.ReadString();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 72: {
            RecordErg = input.ReadInt32();
            break;
          }
          case 82: {
            reward_.AddEntriesFrom(input, _repeated_reward_codec);
            break;
          }
          case 96: {
            StartRemindTime = input.ReadInt32();
            break;
          }
          case 106:
          case 104: {
            tempId_.AddEntriesFrom(input, _repeated_tempId_codec);
            break;
          }
          case 122: {
            expireItem_.AddEntriesFrom(input, _map_expireItem_codec);
            break;
          }
          case 128: {
            PayRate = input.ReadInt32();
            break;
          }
          case 136: {
            EndRemindTheme = input.ReadInt32();
            break;
          }
          case 144: {
            StartRemindTheme = input.ReadInt32();
            break;
          }
          case 152: {
            OverTheme = input.ReadInt32();
            break;
          }
          case 160: {
            IsPremium = input.ReadBool();
            break;
          }
          case 168: {
            RestartTheme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 32: {
            EndRemindTime = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            groupInfo_.AddEntriesFrom(ref input, _repeated_groupInfo_codec);
            break;
          }
          case 50: {
            Icon = input.ReadString();
            break;
          }
          case 58: {
            Image = input.ReadString();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 72: {
            RecordErg = input.ReadInt32();
            break;
          }
          case 82: {
            reward_.AddEntriesFrom(ref input, _repeated_reward_codec);
            break;
          }
          case 96: {
            StartRemindTime = input.ReadInt32();
            break;
          }
          case 106:
          case 104: {
            tempId_.AddEntriesFrom(ref input, _repeated_tempId_codec);
            break;
          }
          case 122: {
            expireItem_.AddEntriesFrom(ref input, _map_expireItem_codec);
            break;
          }
          case 128: {
            PayRate = input.ReadInt32();
            break;
          }
          case 136: {
            EndRemindTheme = input.ReadInt32();
            break;
          }
          case 144: {
            StartRemindTheme = input.ReadInt32();
            break;
          }
          case 152: {
            OverTheme = input.ReadInt32();
            break;
          }
          case 160: {
            IsPremium = input.ReadBool();
            break;
          }
          case 168: {
            RestartTheme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventCardAlbumMapABValue : pb::IMessage<EventCardAlbumMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventCardAlbumMapABValue> _parser = new pb::MessageParser<EventCardAlbumMapABValue>(() => new EventCardAlbumMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventCardAlbumMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventCardAlbumConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventCardAlbumMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventCardAlbumMapABValue(EventCardAlbumMapABValue other) : this() {
      eventCardAlbumMap_ = other.eventCardAlbumMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventCardAlbumMapABValue Clone() {
      return new EventCardAlbumMapABValue(this);
    }

    /// <summary>Field number for the "EventCardAlbumMap" field.</summary>
    public const int EventCardAlbumMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventCardAlbum>.Codec _map_eventCardAlbumMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventCardAlbum>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventCardAlbum.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventCardAlbum> eventCardAlbumMap_ = new pbc::MapField<int, global::fat.rawdata.EventCardAlbum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventCardAlbum> EventCardAlbumMap {
      get { return eventCardAlbumMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventCardAlbumMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventCardAlbumMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventCardAlbumMap.Equals(other.EventCardAlbumMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventCardAlbumMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventCardAlbumMap_.WriteTo(output, _map_eventCardAlbumMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventCardAlbumMap_.WriteTo(ref output, _map_eventCardAlbumMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventCardAlbumMap_.CalculateSize(_map_eventCardAlbumMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventCardAlbumMapABValue other) {
      if (other == null) {
        return;
      }
      eventCardAlbumMap_.Add(other.eventCardAlbumMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventCardAlbumMap_.AddEntriesFrom(input, _map_eventCardAlbumMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventCardAlbumMap_.AddEntriesFrom(ref input, _map_eventCardAlbumMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventCardAlbumConf : pb::IMessage<EventCardAlbumConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventCardAlbumConf> _parser = new pb::MessageParser<EventCardAlbumConf>(() => new EventCardAlbumConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventCardAlbumConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventCardAlbumConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventCardAlbumConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventCardAlbumConf(EventCardAlbumConf other) : this() {
      eventCardAlbumMap_ = other.eventCardAlbumMap_.Clone();
      eventCardAlbumMapAB_ = other.eventCardAlbumMapAB_.Clone();
      eventCardAlbumMapABPatch_ = other.eventCardAlbumMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventCardAlbumConf Clone() {
      return new EventCardAlbumConf(this);
    }

    /// <summary>Field number for the "EventCardAlbumMap" field.</summary>
    public const int EventCardAlbumMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventCardAlbum>.Codec _map_eventCardAlbumMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventCardAlbum>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventCardAlbum.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventCardAlbum> eventCardAlbumMap_ = new pbc::MapField<int, global::fat.rawdata.EventCardAlbum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventCardAlbum> EventCardAlbumMap {
      get { return eventCardAlbumMap_; }
    }

    /// <summary>Field number for the "EventCardAlbumMapAB" field.</summary>
    public const int EventCardAlbumMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventCardAlbumMapABValue>.Codec _map_eventCardAlbumMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventCardAlbumMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventCardAlbumMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventCardAlbumMapABValue> eventCardAlbumMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventCardAlbumMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventCardAlbumMapABValue> EventCardAlbumMapAB {
      get { return eventCardAlbumMapAB_; }
    }

    /// <summary>Field number for the "EventCardAlbumMapABPatch" field.</summary>
    public const int EventCardAlbumMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventCardAlbumMapABValue>.Codec _map_eventCardAlbumMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventCardAlbumMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventCardAlbumMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventCardAlbumMapABValue> eventCardAlbumMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventCardAlbumMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventCardAlbumMapABValue> EventCardAlbumMapABPatch {
      get { return eventCardAlbumMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventCardAlbumConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventCardAlbumConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventCardAlbumMap.Equals(other.EventCardAlbumMap)) return false;
      if (!EventCardAlbumMapAB.Equals(other.EventCardAlbumMapAB)) return false;
      if (!EventCardAlbumMapABPatch.Equals(other.EventCardAlbumMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventCardAlbumMap.GetHashCode();
      hash ^= EventCardAlbumMapAB.GetHashCode();
      hash ^= EventCardAlbumMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventCardAlbumMap_.WriteTo(output, _map_eventCardAlbumMap_codec);
      eventCardAlbumMapAB_.WriteTo(output, _map_eventCardAlbumMapAB_codec);
      eventCardAlbumMapABPatch_.WriteTo(output, _map_eventCardAlbumMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventCardAlbumMap_.WriteTo(ref output, _map_eventCardAlbumMap_codec);
      eventCardAlbumMapAB_.WriteTo(ref output, _map_eventCardAlbumMapAB_codec);
      eventCardAlbumMapABPatch_.WriteTo(ref output, _map_eventCardAlbumMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventCardAlbumMap_.CalculateSize(_map_eventCardAlbumMap_codec);
      size += eventCardAlbumMapAB_.CalculateSize(_map_eventCardAlbumMapAB_codec);
      size += eventCardAlbumMapABPatch_.CalculateSize(_map_eventCardAlbumMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventCardAlbumConf other) {
      if (other == null) {
        return;
      }
      eventCardAlbumMap_.Add(other.eventCardAlbumMap_);
      eventCardAlbumMapAB_.Add(other.eventCardAlbumMapAB_);
      eventCardAlbumMapABPatch_.Add(other.eventCardAlbumMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventCardAlbumMap_.AddEntriesFrom(input, _map_eventCardAlbumMap_codec);
            break;
          }
          case 18: {
            eventCardAlbumMapAB_.AddEntriesFrom(input, _map_eventCardAlbumMapAB_codec);
            break;
          }
          case 26: {
            eventCardAlbumMapABPatch_.AddEntriesFrom(input, _map_eventCardAlbumMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventCardAlbumMap_.AddEntriesFrom(ref input, _map_eventCardAlbumMap_codec);
            break;
          }
          case 18: {
            eventCardAlbumMapAB_.AddEntriesFrom(ref input, _map_eventCardAlbumMapAB_codec);
            break;
          }
          case 26: {
            eventCardAlbumMapABPatch_.AddEntriesFrom(ref input, _map_eventCardAlbumMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
