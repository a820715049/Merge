// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/MarketDifficultyConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/MarketDifficultyConf.proto</summary>
  public static partial class MarketDifficultyConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/MarketDifficultyConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MarketDifficultyConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJyYXdkYXRhL01hcmtldERpZmZpY3VsdHlDb25mLnByb3RvEgdyYXdkYXRh",
            "In8KEE1hcmtldERpZmZpY3VsdHkSCgoCaWQYASABKAUSDwoHYm9hcmRJZBgC",
            "IAEoBRIRCglwcmljZVJhdGUYAyABKAISEAoIc2VxdWVuY2UYBCABKAUSDwoH",
            "c3RvcmFnZRgFIAEoBRIYChB0YXJnZXREaWZmaWN1bHR5GAYgAygFIs4BChpN",
            "YXJrZXREaWZmaWN1bHR5TWFwQUJWYWx1ZRJZChNNYXJrZXREaWZmaWN1bHR5",
            "TWFwGAEgAygLMjwucmF3ZGF0YS5NYXJrZXREaWZmaWN1bHR5TWFwQUJWYWx1",
            "ZS5NYXJrZXREaWZmaWN1bHR5TWFwRW50cnkaVQoYTWFya2V0RGlmZmljdWx0",
            "eU1hcEVudHJ5EgsKA2tleRgBIAEoBRIoCgV2YWx1ZRgCIAEoCzIZLnJhd2Rh",
            "dGEuTWFya2V0RGlmZmljdWx0eToCOAEiyQQKFE1hcmtldERpZmZpY3VsdHlD",
            "b25mElMKE01hcmtldERpZmZpY3VsdHlNYXAYASADKAsyNi5yYXdkYXRhLk1h",
            "cmtldERpZmZpY3VsdHlDb25mLk1hcmtldERpZmZpY3VsdHlNYXBFbnRyeRJX",
            "ChVNYXJrZXREaWZmaWN1bHR5TWFwQUIYAiADKAsyOC5yYXdkYXRhLk1hcmtl",
            "dERpZmZpY3VsdHlDb25mLk1hcmtldERpZmZpY3VsdHlNYXBBQkVudHJ5EmEK",
            "Gk1hcmtldERpZmZpY3VsdHlNYXBBQlBhdGNoGAMgAygLMj0ucmF3ZGF0YS5N",
            "YXJrZXREaWZmaWN1bHR5Q29uZi5NYXJrZXREaWZmaWN1bHR5TWFwQUJQYXRj",
            "aEVudHJ5GlUKGE1hcmtldERpZmZpY3VsdHlNYXBFbnRyeRILCgNrZXkYASAB",
            "KAUSKAoFdmFsdWUYAiABKAsyGS5yYXdkYXRhLk1hcmtldERpZmZpY3VsdHk6",
            "AjgBGmEKGk1hcmtldERpZmZpY3VsdHlNYXBBQkVudHJ5EgsKA2tleRgBIAEo",
            "CRIyCgV2YWx1ZRgCIAEoCzIjLnJhd2RhdGEuTWFya2V0RGlmZmljdWx0eU1h",
            "cEFCVmFsdWU6AjgBGmYKH01hcmtldERpZmZpY3VsdHlNYXBBQlBhdGNoRW50",
            "cnkSCwoDa2V5GAEgASgJEjIKBXZhbHVlGAIgASgLMiMucmF3ZGF0YS5NYXJr",
            "ZXREaWZmaWN1bHR5TWFwQUJWYWx1ZToCOAFCPVotZ2l0bGFiLmZ1bnBsdXMu",
            "aW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdkYXRhqgILZmF0LnJhd2RhdGFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MarketDifficulty), global::fat.rawdata.MarketDifficulty.Parser, new[]{ "Id", "BoardId", "PriceRate", "Sequence", "Storage", "TargetDifficulty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MarketDifficultyMapABValue), global::fat.rawdata.MarketDifficultyMapABValue.Parser, new[]{ "MarketDifficultyMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MarketDifficultyConf), global::fat.rawdata.MarketDifficultyConf.Parser, new[]{ "MarketDifficultyMap", "MarketDifficultyMapAB", "MarketDifficultyMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="MarketDifficulty",table="MarketDifficultyMap",table_wrapper="MarketDifficultyConf",map="true",map_key_type="int32",data="MarketDifficultyConf")
  /// annotation@ab(table_ab="MarketDifficultyMapAB",table_ab_patch="MarketDifficultyMapABPatch",table_ab_value="MarketDifficultyMapABValue",ab_patch="true")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@MarketDifficulty(id="id")
  /// </summary>
  public sealed partial class MarketDifficulty : pb::IMessage<MarketDifficulty>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketDifficulty> _parser = new pb::MessageParser<MarketDifficulty>(() => new MarketDifficulty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDifficulty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MarketDifficultyConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDifficulty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDifficulty(MarketDifficulty other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      priceRate_ = other.priceRate_;
      sequence_ = other.sequence_;
      storage_ = other.storage_;
      targetDifficulty_ = other.targetDifficulty_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDifficulty Clone() {
      return new MarketDifficulty(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 难度随机商品列表
    /// 格子ID
    /// （双键）
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 格子属于棋盘
    /// （MergeBoard.id）
    /// （双键）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "priceRate" field.</summary>
    public const int PriceRateFieldNumber = 3;
    private float priceRate_;
    /// <summary>
    /// 售价难度系数
    /// （使用钻石进行购买）
    /// （价格 = （平均难度/100） * priceRate）
    /// （结果四舍五入，最小为1）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PriceRate {
      get { return priceRate_; }
      set {
        priceRate_ = value;
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 4;
    private int sequence_;
    /// <summary>
    /// 格子的排序权重
    /// （越小越靠前）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "storage" field.</summary>
    public const int StorageFieldNumber = 5;
    private int storage_;
    /// <summary>
    /// 格子的最大库存
    /// （一次刷新期间）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Storage {
      get { return storage_; }
      set {
        storage_ = value;
      }
    }

    /// <summary>Field number for the "targetDifficulty" field.</summary>
    public const int TargetDifficultyFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_targetDifficulty_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> targetDifficulty_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 售出商品的目标难度
    /// （作为从当前订单列表中选择商品的依据）
    /// （从给定区间内等概率随机整数作为目标难度）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TargetDifficulty {
      get { return targetDifficulty_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDifficulty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDifficulty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PriceRate, other.PriceRate)) return false;
      if (Sequence != other.Sequence) return false;
      if (Storage != other.Storage) return false;
      if(!targetDifficulty_.Equals(other.targetDifficulty_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (PriceRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PriceRate);
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      if (Storage != 0) hash ^= Storage.GetHashCode();
      hash ^= targetDifficulty_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (PriceRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PriceRate);
      }
      if (Sequence != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Sequence);
      }
      if (Storage != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Storage);
      }
      targetDifficulty_.WriteTo(output, _repeated_targetDifficulty_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (PriceRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PriceRate);
      }
      if (Sequence != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Sequence);
      }
      if (Storage != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Storage);
      }
      targetDifficulty_.WriteTo(ref output, _repeated_targetDifficulty_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (PriceRate != 0F) {
        size += 1 + 4;
      }
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
      }
      if (Storage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Storage);
      }
      size += targetDifficulty_.CalculateSize(_repeated_targetDifficulty_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDifficulty other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.PriceRate != 0F) {
        PriceRate = other.PriceRate;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
      if (other.Storage != 0) {
        Storage = other.Storage;
      }
      targetDifficulty_.Add(other.targetDifficulty_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 29: {
            PriceRate = input.ReadFloat();
            break;
          }
          case 32: {
            Sequence = input.ReadInt32();
            break;
          }
          case 40: {
            Storage = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            targetDifficulty_.AddEntriesFrom(input, _repeated_targetDifficulty_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 29: {
            PriceRate = input.ReadFloat();
            break;
          }
          case 32: {
            Sequence = input.ReadInt32();
            break;
          }
          case 40: {
            Storage = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            targetDifficulty_.AddEntriesFrom(ref input, _repeated_targetDifficulty_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MarketDifficultyMapABValue : pb::IMessage<MarketDifficultyMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketDifficultyMapABValue> _parser = new pb::MessageParser<MarketDifficultyMapABValue>(() => new MarketDifficultyMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDifficultyMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MarketDifficultyConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDifficultyMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDifficultyMapABValue(MarketDifficultyMapABValue other) : this() {
      marketDifficultyMap_ = other.marketDifficultyMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDifficultyMapABValue Clone() {
      return new MarketDifficultyMapABValue(this);
    }

    /// <summary>Field number for the "MarketDifficultyMap" field.</summary>
    public const int MarketDifficultyMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MarketDifficulty>.Codec _map_marketDifficultyMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MarketDifficulty>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MarketDifficulty.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MarketDifficulty> marketDifficultyMap_ = new pbc::MapField<int, global::fat.rawdata.MarketDifficulty>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MarketDifficulty> MarketDifficultyMap {
      get { return marketDifficultyMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDifficultyMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDifficultyMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MarketDifficultyMap.Equals(other.MarketDifficultyMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MarketDifficultyMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      marketDifficultyMap_.WriteTo(output, _map_marketDifficultyMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      marketDifficultyMap_.WriteTo(ref output, _map_marketDifficultyMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += marketDifficultyMap_.CalculateSize(_map_marketDifficultyMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDifficultyMapABValue other) {
      if (other == null) {
        return;
      }
      marketDifficultyMap_.Add(other.marketDifficultyMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            marketDifficultyMap_.AddEntriesFrom(input, _map_marketDifficultyMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            marketDifficultyMap_.AddEntriesFrom(ref input, _map_marketDifficultyMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MarketDifficultyConf : pb::IMessage<MarketDifficultyConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketDifficultyConf> _parser = new pb::MessageParser<MarketDifficultyConf>(() => new MarketDifficultyConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDifficultyConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MarketDifficultyConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDifficultyConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDifficultyConf(MarketDifficultyConf other) : this() {
      marketDifficultyMap_ = other.marketDifficultyMap_.Clone();
      marketDifficultyMapAB_ = other.marketDifficultyMapAB_.Clone();
      marketDifficultyMapABPatch_ = other.marketDifficultyMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDifficultyConf Clone() {
      return new MarketDifficultyConf(this);
    }

    /// <summary>Field number for the "MarketDifficultyMap" field.</summary>
    public const int MarketDifficultyMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MarketDifficulty>.Codec _map_marketDifficultyMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MarketDifficulty>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MarketDifficulty.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MarketDifficulty> marketDifficultyMap_ = new pbc::MapField<int, global::fat.rawdata.MarketDifficulty>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MarketDifficulty> MarketDifficultyMap {
      get { return marketDifficultyMap_; }
    }

    /// <summary>Field number for the "MarketDifficultyMapAB" field.</summary>
    public const int MarketDifficultyMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.MarketDifficultyMapABValue>.Codec _map_marketDifficultyMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.MarketDifficultyMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MarketDifficultyMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.MarketDifficultyMapABValue> marketDifficultyMapAB_ = new pbc::MapField<string, global::fat.rawdata.MarketDifficultyMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MarketDifficultyMapABValue> MarketDifficultyMapAB {
      get { return marketDifficultyMapAB_; }
    }

    /// <summary>Field number for the "MarketDifficultyMapABPatch" field.</summary>
    public const int MarketDifficultyMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.MarketDifficultyMapABValue>.Codec _map_marketDifficultyMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.MarketDifficultyMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MarketDifficultyMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.MarketDifficultyMapABValue> marketDifficultyMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.MarketDifficultyMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MarketDifficultyMapABValue> MarketDifficultyMapABPatch {
      get { return marketDifficultyMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDifficultyConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDifficultyConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MarketDifficultyMap.Equals(other.MarketDifficultyMap)) return false;
      if (!MarketDifficultyMapAB.Equals(other.MarketDifficultyMapAB)) return false;
      if (!MarketDifficultyMapABPatch.Equals(other.MarketDifficultyMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MarketDifficultyMap.GetHashCode();
      hash ^= MarketDifficultyMapAB.GetHashCode();
      hash ^= MarketDifficultyMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      marketDifficultyMap_.WriteTo(output, _map_marketDifficultyMap_codec);
      marketDifficultyMapAB_.WriteTo(output, _map_marketDifficultyMapAB_codec);
      marketDifficultyMapABPatch_.WriteTo(output, _map_marketDifficultyMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      marketDifficultyMap_.WriteTo(ref output, _map_marketDifficultyMap_codec);
      marketDifficultyMapAB_.WriteTo(ref output, _map_marketDifficultyMapAB_codec);
      marketDifficultyMapABPatch_.WriteTo(ref output, _map_marketDifficultyMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += marketDifficultyMap_.CalculateSize(_map_marketDifficultyMap_codec);
      size += marketDifficultyMapAB_.CalculateSize(_map_marketDifficultyMapAB_codec);
      size += marketDifficultyMapABPatch_.CalculateSize(_map_marketDifficultyMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDifficultyConf other) {
      if (other == null) {
        return;
      }
      marketDifficultyMap_.Add(other.marketDifficultyMap_);
      marketDifficultyMapAB_.Add(other.marketDifficultyMapAB_);
      marketDifficultyMapABPatch_.Add(other.marketDifficultyMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            marketDifficultyMap_.AddEntriesFrom(input, _map_marketDifficultyMap_codec);
            break;
          }
          case 18: {
            marketDifficultyMapAB_.AddEntriesFrom(input, _map_marketDifficultyMapAB_codec);
            break;
          }
          case 26: {
            marketDifficultyMapABPatch_.AddEntriesFrom(input, _map_marketDifficultyMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            marketDifficultyMap_.AddEntriesFrom(ref input, _map_marketDifficultyMap_codec);
            break;
          }
          case 18: {
            marketDifficultyMapAB_.AddEntriesFrom(ref input, _map_marketDifficultyMapAB_codec);
            break;
          }
          case 26: {
            marketDifficultyMapABPatch_.AddEntriesFrom(ref input, _map_marketDifficultyMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
