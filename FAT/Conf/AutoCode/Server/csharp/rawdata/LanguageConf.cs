// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/LanguageConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/LanguageConf.proto</summary>
  public static partial class LanguageConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/LanguageConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LanguageConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpyYXdkYXRhL0xhbmd1YWdlQ29uZi5wcm90bxIHcmF3ZGF0YSJpCghMYW5n",
            "dWFnZRINCgVBc3NldBgFIAEoCRIQCghJc1Rlc3RlchgGIAEoCBIQCghMYW5n",
            "dWFnZRgBIAEoCRIMCgRTaG93GAIgASgJEgwKBFdyYXAYAyABKAgSDgoGX3Rh",
            "Z3NfGAQgAygJIkAKFExhbmd1YWdlU2xpY2VBQlZhbHVlEigKDUxhbmd1YWdl",
            "U2xpY2UYASADKAsyES5yYXdkYXRhLkxhbmd1YWdlIv8CCgxMYW5ndWFnZUNv",
            "bmYSKAoNTGFuZ3VhZ2VTbGljZRgBIAMoCzIRLnJhd2RhdGEuTGFuZ3VhZ2US",
            "QwoPTGFuZ3VhZ2VTbGljZUFCGAIgAygLMioucmF3ZGF0YS5MYW5ndWFnZUNv",
            "bmYuTGFuZ3VhZ2VTbGljZUFCRW50cnkSTQoUTGFuZ3VhZ2VTbGljZUFCUGF0",
            "Y2gYAyADKAsyLy5yYXdkYXRhLkxhbmd1YWdlQ29uZi5MYW5ndWFnZVNsaWNl",
            "QUJQYXRjaEVudHJ5GlUKFExhbmd1YWdlU2xpY2VBQkVudHJ5EgsKA2tleRgB",
            "IAEoCRIsCgV2YWx1ZRgCIAEoCzIdLnJhd2RhdGEuTGFuZ3VhZ2VTbGljZUFC",
            "VmFsdWU6AjgBGloKGUxhbmd1YWdlU2xpY2VBQlBhdGNoRW50cnkSCwoDa2V5",
            "GAEgASgJEiwKBXZhbHVlGAIgASgLMh0ucmF3ZGF0YS5MYW5ndWFnZVNsaWNl",
            "QUJWYWx1ZToCOAFCPVotZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2Vu",
            "L2dvbGFuZy9yYXdkYXRhqgILZmF0LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.Language), global::fat.rawdata.Language.Parser, new[]{ "Asset", "IsTester", "Language_", "Show", "Wrap", "Tags" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.LanguageSliceABValue), global::fat.rawdata.LanguageSliceABValue.Parser, new[]{ "LanguageSlice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.LanguageConf), global::fat.rawdata.LanguageConf.Parser, new[]{ "LanguageSlice", "LanguageSliceAB", "LanguageSliceABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="Language",table="LanguageSlice",table_wrapper="LanguageConf",map="false",map_key_type="",data="LanguageConf")
  /// annotation@ab(table_ab="LanguageSliceAB",table_ab_patch="LanguageSliceABPatch",table_ab_value="LanguageSliceABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// </summary>
  public sealed partial class Language : pb::IMessage<Language>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Language> _parser = new pb::MessageParser<Language>(() => new Language());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Language> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.LanguageConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Language() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Language(Language other) : this() {
      asset_ = other.asset_;
      isTester_ = other.isTester_;
      language_ = other.language_;
      show_ = other.show_;
      wrap_ = other.wrap_;
      Tags_ = other.Tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Language Clone() {
      return new Language(this);
    }

    /// <summary>Field number for the "Asset" field.</summary>
    public const int AssetFieldNumber = 5;
    private string asset_ = "";
    /// <summary>
    /// 字体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Asset {
      get { return asset_; }
      set {
        asset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsTester" field.</summary>
    public const int IsTesterFieldNumber = 6;
    private bool isTester_;
    /// <summary>
    /// 是否对测试开放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTester {
      get { return isTester_; }
      set {
        isTester_ = value;
      }
    }

    /// <summary>Field number for the "Language" field.</summary>
    public const int Language_FieldNumber = 1;
    private string language_ = "";
    /// <summary>
    /// 语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language_ {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Show" field.</summary>
    public const int ShowFieldNumber = 2;
    private string show_ = "";
    /// <summary>
    /// 显示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Show {
      get { return show_; }
      set {
        show_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Wrap" field.</summary>
    public const int WrapFieldNumber = 3;
    private bool wrap_;
    /// <summary>
    /// 是否换行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Wrap {
      get { return wrap_; }
      set {
        wrap_ = value;
      }
    }

    /// <summary>Field number for the "_tags_" field.</summary>
    public const int TagsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_Tags_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> Tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return Tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Language);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Language other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Asset != other.Asset) return false;
      if (IsTester != other.IsTester) return false;
      if (Language_ != other.Language_) return false;
      if (Show != other.Show) return false;
      if (Wrap != other.Wrap) return false;
      if(!Tags_.Equals(other.Tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Asset.Length != 0) hash ^= Asset.GetHashCode();
      if (IsTester != false) hash ^= IsTester.GetHashCode();
      if (Language_.Length != 0) hash ^= Language_.GetHashCode();
      if (Show.Length != 0) hash ^= Show.GetHashCode();
      if (Wrap != false) hash ^= Wrap.GetHashCode();
      hash ^= Tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Language_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Language_);
      }
      if (Show.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Show);
      }
      if (Wrap != false) {
        output.WriteRawTag(24);
        output.WriteBool(Wrap);
      }
      Tags_.WriteTo(output, _repeated_Tags_codec);
      if (Asset.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Asset);
      }
      if (IsTester != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsTester);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Language_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Language_);
      }
      if (Show.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Show);
      }
      if (Wrap != false) {
        output.WriteRawTag(24);
        output.WriteBool(Wrap);
      }
      Tags_.WriteTo(ref output, _repeated_Tags_codec);
      if (Asset.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Asset);
      }
      if (IsTester != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsTester);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Asset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Asset);
      }
      if (IsTester != false) {
        size += 1 + 1;
      }
      if (Language_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language_);
      }
      if (Show.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Show);
      }
      if (Wrap != false) {
        size += 1 + 1;
      }
      size += Tags_.CalculateSize(_repeated_Tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Language other) {
      if (other == null) {
        return;
      }
      if (other.Asset.Length != 0) {
        Asset = other.Asset;
      }
      if (other.IsTester != false) {
        IsTester = other.IsTester;
      }
      if (other.Language_.Length != 0) {
        Language_ = other.Language_;
      }
      if (other.Show.Length != 0) {
        Show = other.Show;
      }
      if (other.Wrap != false) {
        Wrap = other.Wrap;
      }
      Tags_.Add(other.Tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Language_ = input.ReadString();
            break;
          }
          case 18: {
            Show = input.ReadString();
            break;
          }
          case 24: {
            Wrap = input.ReadBool();
            break;
          }
          case 34: {
            Tags_.AddEntriesFrom(input, _repeated_Tags_codec);
            break;
          }
          case 42: {
            Asset = input.ReadString();
            break;
          }
          case 48: {
            IsTester = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Language_ = input.ReadString();
            break;
          }
          case 18: {
            Show = input.ReadString();
            break;
          }
          case 24: {
            Wrap = input.ReadBool();
            break;
          }
          case 34: {
            Tags_.AddEntriesFrom(ref input, _repeated_Tags_codec);
            break;
          }
          case 42: {
            Asset = input.ReadString();
            break;
          }
          case 48: {
            IsTester = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LanguageSliceABValue : pb::IMessage<LanguageSliceABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LanguageSliceABValue> _parser = new pb::MessageParser<LanguageSliceABValue>(() => new LanguageSliceABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LanguageSliceABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.LanguageConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageSliceABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageSliceABValue(LanguageSliceABValue other) : this() {
      languageSlice_ = other.languageSlice_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageSliceABValue Clone() {
      return new LanguageSliceABValue(this);
    }

    /// <summary>Field number for the "LanguageSlice" field.</summary>
    public const int LanguageSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.Language> _repeated_languageSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.Language.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.Language> languageSlice_ = new pbc::RepeatedField<global::fat.rawdata.Language>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.Language> LanguageSlice {
      get { return languageSlice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LanguageSliceABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LanguageSliceABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!languageSlice_.Equals(other.languageSlice_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= languageSlice_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      languageSlice_.WriteTo(output, _repeated_languageSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      languageSlice_.WriteTo(ref output, _repeated_languageSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += languageSlice_.CalculateSize(_repeated_languageSlice_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LanguageSliceABValue other) {
      if (other == null) {
        return;
      }
      languageSlice_.Add(other.languageSlice_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            languageSlice_.AddEntriesFrom(input, _repeated_languageSlice_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            languageSlice_.AddEntriesFrom(ref input, _repeated_languageSlice_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LanguageConf : pb::IMessage<LanguageConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LanguageConf> _parser = new pb::MessageParser<LanguageConf>(() => new LanguageConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LanguageConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.LanguageConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageConf(LanguageConf other) : this() {
      languageSlice_ = other.languageSlice_.Clone();
      languageSliceAB_ = other.languageSliceAB_.Clone();
      languageSliceABPatch_ = other.languageSliceABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageConf Clone() {
      return new LanguageConf(this);
    }

    /// <summary>Field number for the "LanguageSlice" field.</summary>
    public const int LanguageSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.Language> _repeated_languageSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.Language.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.Language> languageSlice_ = new pbc::RepeatedField<global::fat.rawdata.Language>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.Language> LanguageSlice {
      get { return languageSlice_; }
    }

    /// <summary>Field number for the "LanguageSliceAB" field.</summary>
    public const int LanguageSliceABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.LanguageSliceABValue>.Codec _map_languageSliceAB_codec
        = new pbc::MapField<string, global::fat.rawdata.LanguageSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.LanguageSliceABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.LanguageSliceABValue> languageSliceAB_ = new pbc::MapField<string, global::fat.rawdata.LanguageSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.LanguageSliceABValue> LanguageSliceAB {
      get { return languageSliceAB_; }
    }

    /// <summary>Field number for the "LanguageSliceABPatch" field.</summary>
    public const int LanguageSliceABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.LanguageSliceABValue>.Codec _map_languageSliceABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.LanguageSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.LanguageSliceABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.LanguageSliceABValue> languageSliceABPatch_ = new pbc::MapField<string, global::fat.rawdata.LanguageSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.LanguageSliceABValue> LanguageSliceABPatch {
      get { return languageSliceABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LanguageConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LanguageConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!languageSlice_.Equals(other.languageSlice_)) return false;
      if (!LanguageSliceAB.Equals(other.LanguageSliceAB)) return false;
      if (!LanguageSliceABPatch.Equals(other.LanguageSliceABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= languageSlice_.GetHashCode();
      hash ^= LanguageSliceAB.GetHashCode();
      hash ^= LanguageSliceABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      languageSlice_.WriteTo(output, _repeated_languageSlice_codec);
      languageSliceAB_.WriteTo(output, _map_languageSliceAB_codec);
      languageSliceABPatch_.WriteTo(output, _map_languageSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      languageSlice_.WriteTo(ref output, _repeated_languageSlice_codec);
      languageSliceAB_.WriteTo(ref output, _map_languageSliceAB_codec);
      languageSliceABPatch_.WriteTo(ref output, _map_languageSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += languageSlice_.CalculateSize(_repeated_languageSlice_codec);
      size += languageSliceAB_.CalculateSize(_map_languageSliceAB_codec);
      size += languageSliceABPatch_.CalculateSize(_map_languageSliceABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LanguageConf other) {
      if (other == null) {
        return;
      }
      languageSlice_.Add(other.languageSlice_);
      languageSliceAB_.Add(other.languageSliceAB_);
      languageSliceABPatch_.Add(other.languageSliceABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            languageSlice_.AddEntriesFrom(input, _repeated_languageSlice_codec);
            break;
          }
          case 18: {
            languageSliceAB_.AddEntriesFrom(input, _map_languageSliceAB_codec);
            break;
          }
          case 26: {
            languageSliceABPatch_.AddEntriesFrom(input, _map_languageSliceABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            languageSlice_.AddEntriesFrom(ref input, _repeated_languageSlice_codec);
            break;
          }
          case 18: {
            languageSliceAB_.AddEntriesFrom(ref input, _map_languageSliceAB_codec);
            break;
          }
          case 26: {
            languageSliceABPatch_.AddEntriesFrom(ref input, _map_languageSliceABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
