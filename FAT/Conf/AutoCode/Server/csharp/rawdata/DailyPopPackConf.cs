// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/DailyPopPackConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/DailyPopPackConf.proto</summary>
  public static partial class DailyPopPackConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/DailyPopPackConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DailyPopPackConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5yYXdkYXRhL0RhaWx5UG9wUGFja0NvbmYucHJvdG8SB3Jhd2RhdGEi3AEK",
            "DERhaWx5UG9wUGFjaxIKCgJpZBgBIAEoBRITCgthY3RpdmVMZXZlbBgJIAEo",
            "BRITCgthcGlQYWNrUG9vbBgOIAMoBRISCgpldmVudFRoZW1lGAogASgFEhAK",
            "CGlzQXBpVXNlGA8gASgIEg0KBWxhYmVsGA0gASgFEhQKDG1vZGVsVmVyc2lv",
            "bhgRIAEoCRIRCglwYWNrR3JwSWQYDCABKAUSEAoIcGF5dGltZXMYBSABKAUS",
            "FQoNc2h1dGRvd25MZXZlbBgLIAEoBRIPCgdzdWJUeXBlGBAgASgJIrYBChZE",
            "YWlseVBvcFBhY2tNYXBBQlZhbHVlEk0KD0RhaWx5UG9wUGFja01hcBgBIAMo",
            "CzI0LnJhd2RhdGEuRGFpbHlQb3BQYWNrTWFwQUJWYWx1ZS5EYWlseVBvcFBh",
            "Y2tNYXBFbnRyeRpNChREYWlseVBvcFBhY2tNYXBFbnRyeRILCgNrZXkYASAB",
            "KAUSJAoFdmFsdWUYAiABKAsyFS5yYXdkYXRhLkRhaWx5UG9wUGFjazoCOAEi",
            "iQQKEERhaWx5UG9wUGFja0NvbmYSRwoPRGFpbHlQb3BQYWNrTWFwGAEgAygL",
            "Mi4ucmF3ZGF0YS5EYWlseVBvcFBhY2tDb25mLkRhaWx5UG9wUGFja01hcEVu",
            "dHJ5EksKEURhaWx5UG9wUGFja01hcEFCGAIgAygLMjAucmF3ZGF0YS5EYWls",
            "eVBvcFBhY2tDb25mLkRhaWx5UG9wUGFja01hcEFCRW50cnkSVQoWRGFpbHlQ",
            "b3BQYWNrTWFwQUJQYXRjaBgDIAMoCzI1LnJhd2RhdGEuRGFpbHlQb3BQYWNr",
            "Q29uZi5EYWlseVBvcFBhY2tNYXBBQlBhdGNoRW50cnkaTQoURGFpbHlQb3BQ",
            "YWNrTWFwRW50cnkSCwoDa2V5GAEgASgFEiQKBXZhbHVlGAIgASgLMhUucmF3",
            "ZGF0YS5EYWlseVBvcFBhY2s6AjgBGlkKFkRhaWx5UG9wUGFja01hcEFCRW50",
            "cnkSCwoDa2V5GAEgASgJEi4KBXZhbHVlGAIgASgLMh8ucmF3ZGF0YS5EYWls",
            "eVBvcFBhY2tNYXBBQlZhbHVlOgI4ARpeChtEYWlseVBvcFBhY2tNYXBBQlBh",
            "dGNoRW50cnkSCwoDa2V5GAEgASgJEi4KBXZhbHVlGAIgASgLMh8ucmF3ZGF0",
            "YS5EYWlseVBvcFBhY2tNYXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1",
            "cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0",
            "YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.DailyPopPack), global::fat.rawdata.DailyPopPack.Parser, new[]{ "Id", "ActiveLevel", "ApiPackPool", "EventTheme", "IsApiUse", "Label", "ModelVersion", "PackGrpId", "Paytimes", "ShutdownLevel", "SubType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.DailyPopPackMapABValue), global::fat.rawdata.DailyPopPackMapABValue.Parser, new[]{ "DailyPopPackMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.DailyPopPackConf), global::fat.rawdata.DailyPopPackConf.Parser, new[]{ "DailyPopPackMap", "DailyPopPackMapAB", "DailyPopPackMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="DailyPopPack",table="DailyPopPackMap",table_wrapper="DailyPopPackConf",map="true",map_key_type="int32",data="DailyPopPackConf")
  /// annotation@ab(table_ab="DailyPopPackMapAB",table_ab_patch="DailyPopPackMapABPatch",table_ab_value="DailyPopPackMapABValue",ab_patch="true")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@DailyPopPack(id="id")
  /// </summary>
  public sealed partial class DailyPopPack : pb::IMessage<DailyPopPack>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DailyPopPack> _parser = new pb::MessageParser<DailyPopPack>(() => new DailyPopPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyPopPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.DailyPopPackConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyPopPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyPopPack(DailyPopPack other) : this() {
      id_ = other.id_;
      activeLevel_ = other.activeLevel_;
      apiPackPool_ = other.apiPackPool_.Clone();
      eventTheme_ = other.eventTheme_;
      isApiUse_ = other.isApiUse_;
      label_ = other.label_;
      modelVersion_ = other.modelVersion_;
      packGrpId_ = other.packGrpId_;
      paytimes_ = other.paytimes_;
      shutdownLevel_ = other.shutdownLevel_;
      subType_ = other.subType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyPopPack Clone() {
      return new DailyPopPack(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 每日推送礼包
    /// 模板ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "activeLevel" field.</summary>
    public const int ActiveLevelFieldNumber = 9;
    private int activeLevel_;
    /// <summary>
    /// 激活等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveLevel {
      get { return activeLevel_; }
      set {
        activeLevel_ = value;
      }
    }

    /// <summary>Field number for the "apiPackPool" field.</summary>
    public const int ApiPackPoolFieldNumber = 14;
    private static readonly pb::FieldCodec<int> _repeated_apiPackPool_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> apiPackPool_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 礼包备选池
    /// 如果为空，代表不调用API
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ApiPackPool {
      get { return apiPackPool_; }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 10;
    private int eventTheme_;
    /// <summary>
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "isApiUse" field.</summary>
    public const int IsApiUseFieldNumber = 15;
    private bool isApiUse_;
    /// <summary>
    /// 是否真的使用
    /// 礼包API返回的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsApiUse {
      get { return isApiUse_; }
      set {
        isApiUse_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 13;
    private int label_;
    /// <summary>
    /// 标签信息
    /// （Label.id）
    /// （为空代表不显示标签）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    /// <summary>Field number for the "modelVersion" field.</summary>
    public const int ModelVersionFieldNumber = 17;
    private string modelVersion_ = "";
    /// <summary>
    /// 使用的模型版本
    /// 与Data Product约定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelVersion {
      get { return modelVersion_; }
      set {
        modelVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "packGrpId" field.</summary>
    public const int PackGrpIdFieldNumber = 12;
    private int packGrpId_;
    /// <summary>
    /// 内购商品ID
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （IAPPack.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackGrpId {
      get { return packGrpId_; }
      set {
        packGrpId_ = value;
      }
    }

    /// <summary>Field number for the "paytimes" field.</summary>
    public const int PaytimesFieldNumber = 5;
    private int paytimes_;
    /// <summary>
    /// 限购次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Paytimes {
      get { return paytimes_; }
      set {
        paytimes_ = value;
      }
    }

    /// <summary>Field number for the "shutdownLevel" field.</summary>
    public const int ShutdownLevelFieldNumber = 11;
    private int shutdownLevel_;
    /// <summary>
    /// 关闭等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShutdownLevel {
      get { return shutdownLevel_; }
      set {
        shutdownLevel_ = value;
      }
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 16;
    private string subType_ = "";
    /// <summary>
    /// 礼包子类型
    /// API会用到
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubType {
      get { return subType_; }
      set {
        subType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyPopPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyPopPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ActiveLevel != other.ActiveLevel) return false;
      if(!apiPackPool_.Equals(other.apiPackPool_)) return false;
      if (EventTheme != other.EventTheme) return false;
      if (IsApiUse != other.IsApiUse) return false;
      if (Label != other.Label) return false;
      if (ModelVersion != other.ModelVersion) return false;
      if (PackGrpId != other.PackGrpId) return false;
      if (Paytimes != other.Paytimes) return false;
      if (ShutdownLevel != other.ShutdownLevel) return false;
      if (SubType != other.SubType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ActiveLevel != 0) hash ^= ActiveLevel.GetHashCode();
      hash ^= apiPackPool_.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (IsApiUse != false) hash ^= IsApiUse.GetHashCode();
      if (Label != 0) hash ^= Label.GetHashCode();
      if (ModelVersion.Length != 0) hash ^= ModelVersion.GetHashCode();
      if (PackGrpId != 0) hash ^= PackGrpId.GetHashCode();
      if (Paytimes != 0) hash ^= Paytimes.GetHashCode();
      if (ShutdownLevel != 0) hash ^= ShutdownLevel.GetHashCode();
      if (SubType.Length != 0) hash ^= SubType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Paytimes != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Paytimes);
      }
      if (ActiveLevel != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ActiveLevel);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EventTheme);
      }
      if (ShutdownLevel != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ShutdownLevel);
      }
      if (PackGrpId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PackGrpId);
      }
      if (Label != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Label);
      }
      apiPackPool_.WriteTo(output, _repeated_apiPackPool_codec);
      if (IsApiUse != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsApiUse);
      }
      if (SubType.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(SubType);
      }
      if (ModelVersion.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ModelVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Paytimes != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Paytimes);
      }
      if (ActiveLevel != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ActiveLevel);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EventTheme);
      }
      if (ShutdownLevel != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ShutdownLevel);
      }
      if (PackGrpId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PackGrpId);
      }
      if (Label != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Label);
      }
      apiPackPool_.WriteTo(ref output, _repeated_apiPackPool_codec);
      if (IsApiUse != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsApiUse);
      }
      if (SubType.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(SubType);
      }
      if (ModelVersion.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ModelVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ActiveLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveLevel);
      }
      size += apiPackPool_.CalculateSize(_repeated_apiPackPool_codec);
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (IsApiUse != false) {
        size += 1 + 1;
      }
      if (Label != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Label);
      }
      if (ModelVersion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModelVersion);
      }
      if (PackGrpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackGrpId);
      }
      if (Paytimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Paytimes);
      }
      if (ShutdownLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShutdownLevel);
      }
      if (SubType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SubType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyPopPack other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ActiveLevel != 0) {
        ActiveLevel = other.ActiveLevel;
      }
      apiPackPool_.Add(other.apiPackPool_);
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.IsApiUse != false) {
        IsApiUse = other.IsApiUse;
      }
      if (other.Label != 0) {
        Label = other.Label;
      }
      if (other.ModelVersion.Length != 0) {
        ModelVersion = other.ModelVersion;
      }
      if (other.PackGrpId != 0) {
        PackGrpId = other.PackGrpId;
      }
      if (other.Paytimes != 0) {
        Paytimes = other.Paytimes;
      }
      if (other.ShutdownLevel != 0) {
        ShutdownLevel = other.ShutdownLevel;
      }
      if (other.SubType.Length != 0) {
        SubType = other.SubType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 40: {
            Paytimes = input.ReadInt32();
            break;
          }
          case 72: {
            ActiveLevel = input.ReadInt32();
            break;
          }
          case 80: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 88: {
            ShutdownLevel = input.ReadInt32();
            break;
          }
          case 96: {
            PackGrpId = input.ReadInt32();
            break;
          }
          case 104: {
            Label = input.ReadInt32();
            break;
          }
          case 114:
          case 112: {
            apiPackPool_.AddEntriesFrom(input, _repeated_apiPackPool_codec);
            break;
          }
          case 120: {
            IsApiUse = input.ReadBool();
            break;
          }
          case 130: {
            SubType = input.ReadString();
            break;
          }
          case 138: {
            ModelVersion = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 40: {
            Paytimes = input.ReadInt32();
            break;
          }
          case 72: {
            ActiveLevel = input.ReadInt32();
            break;
          }
          case 80: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 88: {
            ShutdownLevel = input.ReadInt32();
            break;
          }
          case 96: {
            PackGrpId = input.ReadInt32();
            break;
          }
          case 104: {
            Label = input.ReadInt32();
            break;
          }
          case 114:
          case 112: {
            apiPackPool_.AddEntriesFrom(ref input, _repeated_apiPackPool_codec);
            break;
          }
          case 120: {
            IsApiUse = input.ReadBool();
            break;
          }
          case 130: {
            SubType = input.ReadString();
            break;
          }
          case 138: {
            ModelVersion = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DailyPopPackMapABValue : pb::IMessage<DailyPopPackMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DailyPopPackMapABValue> _parser = new pb::MessageParser<DailyPopPackMapABValue>(() => new DailyPopPackMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyPopPackMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.DailyPopPackConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyPopPackMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyPopPackMapABValue(DailyPopPackMapABValue other) : this() {
      dailyPopPackMap_ = other.dailyPopPackMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyPopPackMapABValue Clone() {
      return new DailyPopPackMapABValue(this);
    }

    /// <summary>Field number for the "DailyPopPackMap" field.</summary>
    public const int DailyPopPackMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.DailyPopPack>.Codec _map_dailyPopPackMap_codec
        = new pbc::MapField<int, global::fat.rawdata.DailyPopPack>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.DailyPopPack.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.DailyPopPack> dailyPopPackMap_ = new pbc::MapField<int, global::fat.rawdata.DailyPopPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.DailyPopPack> DailyPopPackMap {
      get { return dailyPopPackMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyPopPackMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyPopPackMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!DailyPopPackMap.Equals(other.DailyPopPackMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= DailyPopPackMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dailyPopPackMap_.WriteTo(output, _map_dailyPopPackMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dailyPopPackMap_.WriteTo(ref output, _map_dailyPopPackMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dailyPopPackMap_.CalculateSize(_map_dailyPopPackMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyPopPackMapABValue other) {
      if (other == null) {
        return;
      }
      dailyPopPackMap_.Add(other.dailyPopPackMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dailyPopPackMap_.AddEntriesFrom(input, _map_dailyPopPackMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dailyPopPackMap_.AddEntriesFrom(ref input, _map_dailyPopPackMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DailyPopPackConf : pb::IMessage<DailyPopPackConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DailyPopPackConf> _parser = new pb::MessageParser<DailyPopPackConf>(() => new DailyPopPackConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyPopPackConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.DailyPopPackConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyPopPackConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyPopPackConf(DailyPopPackConf other) : this() {
      dailyPopPackMap_ = other.dailyPopPackMap_.Clone();
      dailyPopPackMapAB_ = other.dailyPopPackMapAB_.Clone();
      dailyPopPackMapABPatch_ = other.dailyPopPackMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyPopPackConf Clone() {
      return new DailyPopPackConf(this);
    }

    /// <summary>Field number for the "DailyPopPackMap" field.</summary>
    public const int DailyPopPackMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.DailyPopPack>.Codec _map_dailyPopPackMap_codec
        = new pbc::MapField<int, global::fat.rawdata.DailyPopPack>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.DailyPopPack.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.DailyPopPack> dailyPopPackMap_ = new pbc::MapField<int, global::fat.rawdata.DailyPopPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.DailyPopPack> DailyPopPackMap {
      get { return dailyPopPackMap_; }
    }

    /// <summary>Field number for the "DailyPopPackMapAB" field.</summary>
    public const int DailyPopPackMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.DailyPopPackMapABValue>.Codec _map_dailyPopPackMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.DailyPopPackMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.DailyPopPackMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.DailyPopPackMapABValue> dailyPopPackMapAB_ = new pbc::MapField<string, global::fat.rawdata.DailyPopPackMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.DailyPopPackMapABValue> DailyPopPackMapAB {
      get { return dailyPopPackMapAB_; }
    }

    /// <summary>Field number for the "DailyPopPackMapABPatch" field.</summary>
    public const int DailyPopPackMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.DailyPopPackMapABValue>.Codec _map_dailyPopPackMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.DailyPopPackMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.DailyPopPackMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.DailyPopPackMapABValue> dailyPopPackMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.DailyPopPackMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.DailyPopPackMapABValue> DailyPopPackMapABPatch {
      get { return dailyPopPackMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyPopPackConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyPopPackConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!DailyPopPackMap.Equals(other.DailyPopPackMap)) return false;
      if (!DailyPopPackMapAB.Equals(other.DailyPopPackMapAB)) return false;
      if (!DailyPopPackMapABPatch.Equals(other.DailyPopPackMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= DailyPopPackMap.GetHashCode();
      hash ^= DailyPopPackMapAB.GetHashCode();
      hash ^= DailyPopPackMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dailyPopPackMap_.WriteTo(output, _map_dailyPopPackMap_codec);
      dailyPopPackMapAB_.WriteTo(output, _map_dailyPopPackMapAB_codec);
      dailyPopPackMapABPatch_.WriteTo(output, _map_dailyPopPackMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dailyPopPackMap_.WriteTo(ref output, _map_dailyPopPackMap_codec);
      dailyPopPackMapAB_.WriteTo(ref output, _map_dailyPopPackMapAB_codec);
      dailyPopPackMapABPatch_.WriteTo(ref output, _map_dailyPopPackMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dailyPopPackMap_.CalculateSize(_map_dailyPopPackMap_codec);
      size += dailyPopPackMapAB_.CalculateSize(_map_dailyPopPackMapAB_codec);
      size += dailyPopPackMapABPatch_.CalculateSize(_map_dailyPopPackMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyPopPackConf other) {
      if (other == null) {
        return;
      }
      dailyPopPackMap_.Add(other.dailyPopPackMap_);
      dailyPopPackMapAB_.Add(other.dailyPopPackMapAB_);
      dailyPopPackMapABPatch_.Add(other.dailyPopPackMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dailyPopPackMap_.AddEntriesFrom(input, _map_dailyPopPackMap_codec);
            break;
          }
          case 18: {
            dailyPopPackMapAB_.AddEntriesFrom(input, _map_dailyPopPackMapAB_codec);
            break;
          }
          case 26: {
            dailyPopPackMapABPatch_.AddEntriesFrom(input, _map_dailyPopPackMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dailyPopPackMap_.AddEntriesFrom(ref input, _map_dailyPopPackMap_codec);
            break;
          }
          case 18: {
            dailyPopPackMapAB_.AddEntriesFrom(ref input, _map_dailyPopPackMapAB_codec);
            break;
          }
          case 26: {
            dailyPopPackMapABPatch_.AddEntriesFrom(ref input, _map_dailyPopPackMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
