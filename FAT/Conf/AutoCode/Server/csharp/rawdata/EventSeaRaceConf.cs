// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventSeaRaceConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventSeaRaceConf.proto</summary>
  public static partial class EventSeaRaceConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventSeaRaceConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventSeaRaceConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5yYXdkYXRhL0V2ZW50U2VhUmFjZUNvbmYucHJvdG8SB3Jhd2RhdGEingEK",
            "DEV2ZW50U2VhUmFjZRIKCgJpZBgBIAEoBRIPCgdib2FyZElkGAIgASgFEhAK",
            "CGRldGFpbElkGAMgASgFEhAKCGV2ZW50RW5kGAYgASgFEhEKCWV2ZW50RmFp",
            "bBgHIAEoBRIRCglldmVudEhlbHAYCCABKAUSEgoKZXZlbnRUaGVtZRgEIAEo",
            "BRITCgtyZWZyZXNoVGltZRgFIAEoBSK2AQoWRXZlbnRTZWFSYWNlTWFwQUJW",
            "YWx1ZRJNCg9FdmVudFNlYVJhY2VNYXAYASADKAsyNC5yYXdkYXRhLkV2ZW50",
            "U2VhUmFjZU1hcEFCVmFsdWUuRXZlbnRTZWFSYWNlTWFwRW50cnkaTQoURXZl",
            "bnRTZWFSYWNlTWFwRW50cnkSCwoDa2V5GAEgASgFEiQKBXZhbHVlGAIgASgL",
            "MhUucmF3ZGF0YS5FdmVudFNlYVJhY2U6AjgBIokEChBFdmVudFNlYVJhY2VD",
            "b25mEkcKD0V2ZW50U2VhUmFjZU1hcBgBIAMoCzIuLnJhd2RhdGEuRXZlbnRT",
            "ZWFSYWNlQ29uZi5FdmVudFNlYVJhY2VNYXBFbnRyeRJLChFFdmVudFNlYVJh",
            "Y2VNYXBBQhgCIAMoCzIwLnJhd2RhdGEuRXZlbnRTZWFSYWNlQ29uZi5FdmVu",
            "dFNlYVJhY2VNYXBBQkVudHJ5ElUKFkV2ZW50U2VhUmFjZU1hcEFCUGF0Y2gY",
            "AyADKAsyNS5yYXdkYXRhLkV2ZW50U2VhUmFjZUNvbmYuRXZlbnRTZWFSYWNl",
            "TWFwQUJQYXRjaEVudHJ5Gk0KFEV2ZW50U2VhUmFjZU1hcEVudHJ5EgsKA2tl",
            "eRgBIAEoBRIkCgV2YWx1ZRgCIAEoCzIVLnJhd2RhdGEuRXZlbnRTZWFSYWNl",
            "OgI4ARpZChZFdmVudFNlYVJhY2VNYXBBQkVudHJ5EgsKA2tleRgBIAEoCRIu",
            "CgV2YWx1ZRgCIAEoCzIfLnJhd2RhdGEuRXZlbnRTZWFSYWNlTWFwQUJWYWx1",
            "ZToCOAEaXgobRXZlbnRTZWFSYWNlTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgB",
            "IAEoCRIuCgV2YWx1ZRgCIAEoCzIfLnJhd2RhdGEuRXZlbnRTZWFSYWNlTWFw",
            "QUJWYWx1ZToCOAFCPVotZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2Vu",
            "L2dvbGFuZy9yYXdkYXRhqgILZmF0LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventSeaRace), global::fat.rawdata.EventSeaRace.Parser, new[]{ "Id", "BoardId", "DetailId", "EventEnd", "EventFail", "EventHelp", "EventTheme", "RefreshTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventSeaRaceMapABValue), global::fat.rawdata.EventSeaRaceMapABValue.Parser, new[]{ "EventSeaRaceMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventSeaRaceConf), global::fat.rawdata.EventSeaRaceConf.Parser, new[]{ "EventSeaRaceMap", "EventSeaRaceMapAB", "EventSeaRaceMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventSeaRace",table="EventSeaRaceMap",table_wrapper="EventSeaRaceConf",map="true",map_key_type="int32",data="EventSeaRaceConf")
  /// annotation@ab(table_ab="EventSeaRaceMapAB",table_ab_patch="EventSeaRaceMapABPatch",table_ab_value="EventSeaRaceMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventSeaRace(id="id")
  /// </summary>
  public sealed partial class EventSeaRace : pb::IMessage<EventSeaRace>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventSeaRace> _parser = new pb::MessageParser<EventSeaRace>(() => new EventSeaRace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSeaRace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventSeaRaceConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRace(EventSeaRace other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      detailId_ = other.detailId_;
      eventEnd_ = other.eventEnd_;
      eventFail_ = other.eventFail_;
      eventHelp_ = other.eventHelp_;
      eventTheme_ = other.eventTheme_;
      refreshTime_ = other.refreshTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRace Clone() {
      return new EventSeaRace(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 生效棋盘
    /// (MergeBoard.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "detailId" field.</summary>
    public const int DetailIdFieldNumber = 3;
    private int detailId_;
    /// <summary>
    /// 活动详情
    /// (GradeIndexMapping.id)
    /// (EventSeaRaceDetail.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DetailId {
      get { return detailId_; }
      set {
        detailId_ = value;
      }
    }

    /// <summary>Field number for the "eventEnd" field.</summary>
    public const int EventEndFieldNumber = 6;
    private int eventEnd_;
    /// <summary>
    /// 结束通知界面
    /// （eventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventEnd {
      get { return eventEnd_; }
      set {
        eventEnd_ = value;
      }
    }

    /// <summary>Field number for the "eventFail" field.</summary>
    public const int EventFailFieldNumber = 7;
    private int eventFail_;
    /// <summary>
    /// 失败界面
    /// （eventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventFail {
      get { return eventFail_; }
      set {
        eventFail_ = value;
      }
    }

    /// <summary>Field number for the "eventHelp" field.</summary>
    public const int EventHelpFieldNumber = 8;
    private int eventHelp_;
    /// <summary>
    /// 帮助界面
    /// （eventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventHelp {
      get { return eventHelp_; }
      set {
        eventHelp_ = value;
      }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 4;
    private int eventTheme_;
    /// <summary>
    /// 主界面弹板id
    /// （eventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 5;
    private int refreshTime_;
    /// <summary>
    /// 在线刷新时间间隔/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSeaRace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSeaRace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (DetailId != other.DetailId) return false;
      if (EventEnd != other.EventEnd) return false;
      if (EventFail != other.EventFail) return false;
      if (EventHelp != other.EventHelp) return false;
      if (EventTheme != other.EventTheme) return false;
      if (RefreshTime != other.RefreshTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (DetailId != 0) hash ^= DetailId.GetHashCode();
      if (EventEnd != 0) hash ^= EventEnd.GetHashCode();
      if (EventFail != 0) hash ^= EventFail.GetHashCode();
      if (EventHelp != 0) hash ^= EventHelp.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (RefreshTime != 0) hash ^= RefreshTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (DetailId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DetailId);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventTheme);
      }
      if (RefreshTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RefreshTime);
      }
      if (EventEnd != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EventEnd);
      }
      if (EventFail != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EventFail);
      }
      if (EventHelp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EventHelp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (DetailId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DetailId);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventTheme);
      }
      if (RefreshTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RefreshTime);
      }
      if (EventEnd != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EventEnd);
      }
      if (EventFail != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EventFail);
      }
      if (EventHelp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EventHelp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (DetailId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DetailId);
      }
      if (EventEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventEnd);
      }
      if (EventFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventFail);
      }
      if (EventHelp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventHelp);
      }
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSeaRace other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.DetailId != 0) {
        DetailId = other.DetailId;
      }
      if (other.EventEnd != 0) {
        EventEnd = other.EventEnd;
      }
      if (other.EventFail != 0) {
        EventFail = other.EventFail;
      }
      if (other.EventHelp != 0) {
        EventHelp = other.EventHelp;
      }
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.RefreshTime != 0) {
        RefreshTime = other.RefreshTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            DetailId = input.ReadInt32();
            break;
          }
          case 32: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 40: {
            RefreshTime = input.ReadInt32();
            break;
          }
          case 48: {
            EventEnd = input.ReadInt32();
            break;
          }
          case 56: {
            EventFail = input.ReadInt32();
            break;
          }
          case 64: {
            EventHelp = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            DetailId = input.ReadInt32();
            break;
          }
          case 32: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 40: {
            RefreshTime = input.ReadInt32();
            break;
          }
          case 48: {
            EventEnd = input.ReadInt32();
            break;
          }
          case 56: {
            EventFail = input.ReadInt32();
            break;
          }
          case 64: {
            EventHelp = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventSeaRaceMapABValue : pb::IMessage<EventSeaRaceMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventSeaRaceMapABValue> _parser = new pb::MessageParser<EventSeaRaceMapABValue>(() => new EventSeaRaceMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSeaRaceMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventSeaRaceConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceMapABValue(EventSeaRaceMapABValue other) : this() {
      eventSeaRaceMap_ = other.eventSeaRaceMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceMapABValue Clone() {
      return new EventSeaRaceMapABValue(this);
    }

    /// <summary>Field number for the "EventSeaRaceMap" field.</summary>
    public const int EventSeaRaceMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventSeaRace>.Codec _map_eventSeaRaceMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventSeaRace>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRace.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventSeaRace> eventSeaRaceMap_ = new pbc::MapField<int, global::fat.rawdata.EventSeaRace>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventSeaRace> EventSeaRaceMap {
      get { return eventSeaRaceMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSeaRaceMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSeaRaceMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventSeaRaceMap.Equals(other.EventSeaRaceMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventSeaRaceMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventSeaRaceMap_.WriteTo(output, _map_eventSeaRaceMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventSeaRaceMap_.WriteTo(ref output, _map_eventSeaRaceMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventSeaRaceMap_.CalculateSize(_map_eventSeaRaceMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSeaRaceMapABValue other) {
      if (other == null) {
        return;
      }
      eventSeaRaceMap_.Add(other.eventSeaRaceMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventSeaRaceMap_.AddEntriesFrom(input, _map_eventSeaRaceMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventSeaRaceMap_.AddEntriesFrom(ref input, _map_eventSeaRaceMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventSeaRaceConf : pb::IMessage<EventSeaRaceConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventSeaRaceConf> _parser = new pb::MessageParser<EventSeaRaceConf>(() => new EventSeaRaceConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSeaRaceConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventSeaRaceConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceConf(EventSeaRaceConf other) : this() {
      eventSeaRaceMap_ = other.eventSeaRaceMap_.Clone();
      eventSeaRaceMapAB_ = other.eventSeaRaceMapAB_.Clone();
      eventSeaRaceMapABPatch_ = other.eventSeaRaceMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSeaRaceConf Clone() {
      return new EventSeaRaceConf(this);
    }

    /// <summary>Field number for the "EventSeaRaceMap" field.</summary>
    public const int EventSeaRaceMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventSeaRace>.Codec _map_eventSeaRaceMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventSeaRace>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRace.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventSeaRace> eventSeaRaceMap_ = new pbc::MapField<int, global::fat.rawdata.EventSeaRace>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventSeaRace> EventSeaRaceMap {
      get { return eventSeaRaceMap_; }
    }

    /// <summary>Field number for the "EventSeaRaceMapAB" field.</summary>
    public const int EventSeaRaceMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceMapABValue>.Codec _map_eventSeaRaceMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRaceMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceMapABValue> eventSeaRaceMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventSeaRaceMapABValue> EventSeaRaceMapAB {
      get { return eventSeaRaceMapAB_; }
    }

    /// <summary>Field number for the "EventSeaRaceMapABPatch" field.</summary>
    public const int EventSeaRaceMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceMapABValue>.Codec _map_eventSeaRaceMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventSeaRaceMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventSeaRaceMapABValue> eventSeaRaceMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventSeaRaceMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventSeaRaceMapABValue> EventSeaRaceMapABPatch {
      get { return eventSeaRaceMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSeaRaceConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSeaRaceConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventSeaRaceMap.Equals(other.EventSeaRaceMap)) return false;
      if (!EventSeaRaceMapAB.Equals(other.EventSeaRaceMapAB)) return false;
      if (!EventSeaRaceMapABPatch.Equals(other.EventSeaRaceMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventSeaRaceMap.GetHashCode();
      hash ^= EventSeaRaceMapAB.GetHashCode();
      hash ^= EventSeaRaceMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventSeaRaceMap_.WriteTo(output, _map_eventSeaRaceMap_codec);
      eventSeaRaceMapAB_.WriteTo(output, _map_eventSeaRaceMapAB_codec);
      eventSeaRaceMapABPatch_.WriteTo(output, _map_eventSeaRaceMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventSeaRaceMap_.WriteTo(ref output, _map_eventSeaRaceMap_codec);
      eventSeaRaceMapAB_.WriteTo(ref output, _map_eventSeaRaceMapAB_codec);
      eventSeaRaceMapABPatch_.WriteTo(ref output, _map_eventSeaRaceMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventSeaRaceMap_.CalculateSize(_map_eventSeaRaceMap_codec);
      size += eventSeaRaceMapAB_.CalculateSize(_map_eventSeaRaceMapAB_codec);
      size += eventSeaRaceMapABPatch_.CalculateSize(_map_eventSeaRaceMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSeaRaceConf other) {
      if (other == null) {
        return;
      }
      eventSeaRaceMap_.Add(other.eventSeaRaceMap_);
      eventSeaRaceMapAB_.Add(other.eventSeaRaceMapAB_);
      eventSeaRaceMapABPatch_.Add(other.eventSeaRaceMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventSeaRaceMap_.AddEntriesFrom(input, _map_eventSeaRaceMap_codec);
            break;
          }
          case 18: {
            eventSeaRaceMapAB_.AddEntriesFrom(input, _map_eventSeaRaceMapAB_codec);
            break;
          }
          case 26: {
            eventSeaRaceMapABPatch_.AddEntriesFrom(input, _map_eventSeaRaceMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventSeaRaceMap_.AddEntriesFrom(ref input, _map_eventSeaRaceMap_codec);
            break;
          }
          case 18: {
            eventSeaRaceMapAB_.AddEntriesFrom(ref input, _map_eventSeaRaceMapAB_codec);
            break;
          }
          case 26: {
            eventSeaRaceMapABPatch_.AddEntriesFrom(ref input, _map_eventSeaRaceMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
