// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/ObjCardPackConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/ObjCardPackConf.proto</summary>
  public static partial class ObjCardPackConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/ObjCardPackConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ObjCardPackConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1yYXdkYXRhL09iakNhcmRQYWNrQ29uZi5wcm90bxIHcmF3ZGF0YSLcAgoL",
            "T2JqQ2FyZFBhY2sSCgoCaWQYASABKAUSDwoHY2FyZE51bRgDIAEoBRISCgpl",
            "eHBpcmVJdGVtGAsgASgJEhEKCWdvbGRMaW1pdBgEIAEoBRIUCgxnb2xkTmV3",
            "TGltaXQYBSABKAUSOgoLZ29sZFBheVBhc3MYBiADKAsyJS5yYXdkYXRhLk9i",
            "akNhcmRQYWNrLkdvbGRQYXlQYXNzRW50cnkSEgoKaXNBdXRvT3BlbhgOIAEo",
            "CBIUCgxpc1NoaW5ueUd1YXIYDSABKAgSDQoFaXNUb3AYDCABKAgSEAoIbGVh",
            "c3ROdW0YByABKAUSEQoJbGVhc3RTdGFyGAggASgFEhYKDnJhbmRvbVN0YXJJ",
            "bmZvGAkgAygFEg0KBXNwaW5lGAogASgJGjIKEEdvbGRQYXlQYXNzRW50cnkS",
            "CwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASKwAQoVT2JqQ2FyZFBh",
            "Y2tNYXBBQlZhbHVlEkoKDk9iakNhcmRQYWNrTWFwGAEgAygLMjIucmF3ZGF0",
            "YS5PYmpDYXJkUGFja01hcEFCVmFsdWUuT2JqQ2FyZFBhY2tNYXBFbnRyeRpL",
            "ChNPYmpDYXJkUGFja01hcEVudHJ5EgsKA2tleRgBIAEoBRIjCgV2YWx1ZRgC",
            "IAEoCzIULnJhd2RhdGEuT2JqQ2FyZFBhY2s6AjgBIvkDCg9PYmpDYXJkUGFj",
            "a0NvbmYSRAoOT2JqQ2FyZFBhY2tNYXAYASADKAsyLC5yYXdkYXRhLk9iakNh",
            "cmRQYWNrQ29uZi5PYmpDYXJkUGFja01hcEVudHJ5EkgKEE9iakNhcmRQYWNr",
            "TWFwQUIYAiADKAsyLi5yYXdkYXRhLk9iakNhcmRQYWNrQ29uZi5PYmpDYXJk",
            "UGFja01hcEFCRW50cnkSUgoVT2JqQ2FyZFBhY2tNYXBBQlBhdGNoGAMgAygL",
            "MjMucmF3ZGF0YS5PYmpDYXJkUGFja0NvbmYuT2JqQ2FyZFBhY2tNYXBBQlBh",
            "dGNoRW50cnkaSwoTT2JqQ2FyZFBhY2tNYXBFbnRyeRILCgNrZXkYASABKAUS",
            "IwoFdmFsdWUYAiABKAsyFC5yYXdkYXRhLk9iakNhcmRQYWNrOgI4ARpXChVP",
            "YmpDYXJkUGFja01hcEFCRW50cnkSCwoDa2V5GAEgASgJEi0KBXZhbHVlGAIg",
            "ASgLMh4ucmF3ZGF0YS5PYmpDYXJkUGFja01hcEFCVmFsdWU6AjgBGlwKGk9i",
            "akNhcmRQYWNrTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRItCgV2YWx1",
            "ZRgCIAEoCzIeLnJhd2RhdGEuT2JqQ2FyZFBhY2tNYXBBQlZhbHVlOgI4AUI9",
            "Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2Rh",
            "dGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ObjCardPack), global::fat.rawdata.ObjCardPack.Parser, new[]{ "Id", "CardNum", "ExpireItem", "GoldLimit", "GoldNewLimit", "GoldPayPass", "IsAutoOpen", "IsShinnyGuar", "IsTop", "LeastNum", "LeastStar", "RandomStarInfo", "Spine" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ObjCardPackMapABValue), global::fat.rawdata.ObjCardPackMapABValue.Parser, new[]{ "ObjCardPackMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ObjCardPackConf), global::fat.rawdata.ObjCardPackConf.Parser, new[]{ "ObjCardPackMap", "ObjCardPackMapAB", "ObjCardPackMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="ObjCardPack",table="ObjCardPackMap",table_wrapper="ObjCardPackConf",map="true",map_key_type="int32",data="ObjCardPackConf")
  /// annotation@ab(table_ab="ObjCardPackMapAB",table_ab_patch="ObjCardPackMapABPatch",table_ab_value="ObjCardPackMapABValue",ab_patch="true")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@ObjCardPack(id="id")
  /// </summary>
  public sealed partial class ObjCardPack : pb::IMessage<ObjCardPack>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjCardPack> _parser = new pb::MessageParser<ObjCardPack>(() => new ObjCardPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjCardPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ObjCardPackConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjCardPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjCardPack(ObjCardPack other) : this() {
      id_ = other.id_;
      cardNum_ = other.cardNum_;
      expireItem_ = other.expireItem_;
      goldLimit_ = other.goldLimit_;
      goldNewLimit_ = other.goldNewLimit_;
      goldPayPass_ = other.goldPayPass_.Clone();
      isAutoOpen_ = other.isAutoOpen_;
      isShinnyGuar_ = other.isShinnyGuar_;
      isTop_ = other.isTop_;
      leastNum_ = other.leastNum_;
      leastStar_ = other.leastStar_;
      randomStarInfo_ = other.randomStarInfo_.Clone();
      spine_ = other.spine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjCardPack Clone() {
      return new ObjCardPack(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 卡包ID
    /// （ObjBasic.id）
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cardNum" field.</summary>
    public const int CardNumFieldNumber = 3;
    private int cardNum_;
    /// <summary>
    /// 包含卡片数量
    /// （仅展示）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardNum {
      get { return cardNum_; }
      set {
        cardNum_ = value;
      }
    }

    /// <summary>Field number for the "expireItem" field.</summary>
    public const int ExpireItemFieldNumber = 11;
    private string expireItem_ = "";
    /// <summary>
    /// 非集卡期间开启卡包时转化
    /// （ObjBasic.id:数量）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpireItem {
      get { return expireItem_; }
      set {
        expireItem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "goldLimit" field.</summary>
    public const int GoldLimitFieldNumber = 4;
    private int goldLimit_;
    /// <summary>
    /// 最多产出几张金卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoldLimit {
      get { return goldLimit_; }
      set {
        goldLimit_ = value;
      }
    }

    /// <summary>Field number for the "goldNewLimit" field.</summary>
    public const int GoldNewLimitFieldNumber = 5;
    private int goldNewLimit_;
    /// <summary>
    /// 最多产出几张金卡新卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoldNewLimit {
      get { return goldNewLimit_; }
      set {
        goldNewLimit_ = value;
      }
    }

    /// <summary>Field number for the "goldPayPass" field.</summary>
    public const int GoldPayPassFieldNumber = 6;
    private static readonly pbc::MapField<int, int>.Codec _map_goldPayPass_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 50);
    private readonly pbc::MapField<int, int> goldPayPass_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 为金卡提供多少payPass加成
    /// （受ObjCard.isGoldable限制）
    /// {tempId:payPass加成}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> GoldPayPass {
      get { return goldPayPass_; }
    }

    /// <summary>Field number for the "isAutoOpen" field.</summary>
    public const int IsAutoOpenFieldNumber = 14;
    private bool isAutoOpen_;
    /// <summary>
    /// 获得时是否自动开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAutoOpen {
      get { return isAutoOpen_; }
      set {
        isAutoOpen_ = value;
      }
    }

    /// <summary>Field number for the "isShinnyGuar" field.</summary>
    public const int IsShinnyGuarFieldNumber = 13;
    private bool isShinnyGuar_;
    /// <summary>
    /// 是否是闪卡必得卡包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShinnyGuar {
      get { return isShinnyGuar_; }
      set {
        isShinnyGuar_ = value;
      }
    }

    /// <summary>Field number for the "isTop" field.</summary>
    public const int IsTopFieldNumber = 12;
    private bool isTop_;
    /// <summary>
    /// 获得时
    /// 是否在奖励箱置顶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTop {
      get { return isTop_; }
      set {
        isTop_ = value;
      }
    }

    /// <summary>Field number for the "leastNum" field.</summary>
    public const int LeastNumFieldNumber = 7;
    private int leastNum_;
    /// <summary>
    /// 至少产出最高星级数量
    /// （仅展示）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeastNum {
      get { return leastNum_; }
      set {
        leastNum_ = value;
      }
    }

    /// <summary>Field number for the "leastStar" field.</summary>
    public const int LeastStarFieldNumber = 8;
    private int leastStar_;
    /// <summary>
    /// 至少产出最高星级
    /// （仅展示）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeastStar {
      get { return leastStar_; }
      set {
        leastStar_ = value;
      }
    }

    /// <summary>Field number for the "randomStarInfo" field.</summary>
    public const int RandomStarInfoFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_randomStarInfo_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> randomStarInfo_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 随机星级结果信息
    /// （RandomStar.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RandomStarInfo {
      get { return randomStarInfo_; }
    }

    /// <summary>Field number for the "spine" field.</summary>
    public const int SpineFieldNumber = 10;
    private string spine_ = "";
    /// <summary>
    /// 卡包开启动画
    /// （Asset）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Spine {
      get { return spine_; }
      set {
        spine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjCardPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjCardPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CardNum != other.CardNum) return false;
      if (ExpireItem != other.ExpireItem) return false;
      if (GoldLimit != other.GoldLimit) return false;
      if (GoldNewLimit != other.GoldNewLimit) return false;
      if (!GoldPayPass.Equals(other.GoldPayPass)) return false;
      if (IsAutoOpen != other.IsAutoOpen) return false;
      if (IsShinnyGuar != other.IsShinnyGuar) return false;
      if (IsTop != other.IsTop) return false;
      if (LeastNum != other.LeastNum) return false;
      if (LeastStar != other.LeastStar) return false;
      if(!randomStarInfo_.Equals(other.randomStarInfo_)) return false;
      if (Spine != other.Spine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (CardNum != 0) hash ^= CardNum.GetHashCode();
      if (ExpireItem.Length != 0) hash ^= ExpireItem.GetHashCode();
      if (GoldLimit != 0) hash ^= GoldLimit.GetHashCode();
      if (GoldNewLimit != 0) hash ^= GoldNewLimit.GetHashCode();
      hash ^= GoldPayPass.GetHashCode();
      if (IsAutoOpen != false) hash ^= IsAutoOpen.GetHashCode();
      if (IsShinnyGuar != false) hash ^= IsShinnyGuar.GetHashCode();
      if (IsTop != false) hash ^= IsTop.GetHashCode();
      if (LeastNum != 0) hash ^= LeastNum.GetHashCode();
      if (LeastStar != 0) hash ^= LeastStar.GetHashCode();
      hash ^= randomStarInfo_.GetHashCode();
      if (Spine.Length != 0) hash ^= Spine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CardNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardNum);
      }
      if (GoldLimit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GoldLimit);
      }
      if (GoldNewLimit != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GoldNewLimit);
      }
      goldPayPass_.WriteTo(output, _map_goldPayPass_codec);
      if (LeastNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LeastNum);
      }
      if (LeastStar != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LeastStar);
      }
      randomStarInfo_.WriteTo(output, _repeated_randomStarInfo_codec);
      if (Spine.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Spine);
      }
      if (ExpireItem.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ExpireItem);
      }
      if (IsTop != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsTop);
      }
      if (IsShinnyGuar != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsShinnyGuar);
      }
      if (IsAutoOpen != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsAutoOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CardNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardNum);
      }
      if (GoldLimit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GoldLimit);
      }
      if (GoldNewLimit != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GoldNewLimit);
      }
      goldPayPass_.WriteTo(ref output, _map_goldPayPass_codec);
      if (LeastNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LeastNum);
      }
      if (LeastStar != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LeastStar);
      }
      randomStarInfo_.WriteTo(ref output, _repeated_randomStarInfo_codec);
      if (Spine.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Spine);
      }
      if (ExpireItem.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ExpireItem);
      }
      if (IsTop != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsTop);
      }
      if (IsShinnyGuar != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsShinnyGuar);
      }
      if (IsAutoOpen != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsAutoOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (CardNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardNum);
      }
      if (ExpireItem.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExpireItem);
      }
      if (GoldLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldLimit);
      }
      if (GoldNewLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldNewLimit);
      }
      size += goldPayPass_.CalculateSize(_map_goldPayPass_codec);
      if (IsAutoOpen != false) {
        size += 1 + 1;
      }
      if (IsShinnyGuar != false) {
        size += 1 + 1;
      }
      if (IsTop != false) {
        size += 1 + 1;
      }
      if (LeastNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeastNum);
      }
      if (LeastStar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeastStar);
      }
      size += randomStarInfo_.CalculateSize(_repeated_randomStarInfo_codec);
      if (Spine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Spine);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjCardPack other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.CardNum != 0) {
        CardNum = other.CardNum;
      }
      if (other.ExpireItem.Length != 0) {
        ExpireItem = other.ExpireItem;
      }
      if (other.GoldLimit != 0) {
        GoldLimit = other.GoldLimit;
      }
      if (other.GoldNewLimit != 0) {
        GoldNewLimit = other.GoldNewLimit;
      }
      goldPayPass_.Add(other.goldPayPass_);
      if (other.IsAutoOpen != false) {
        IsAutoOpen = other.IsAutoOpen;
      }
      if (other.IsShinnyGuar != false) {
        IsShinnyGuar = other.IsShinnyGuar;
      }
      if (other.IsTop != false) {
        IsTop = other.IsTop;
      }
      if (other.LeastNum != 0) {
        LeastNum = other.LeastNum;
      }
      if (other.LeastStar != 0) {
        LeastStar = other.LeastStar;
      }
      randomStarInfo_.Add(other.randomStarInfo_);
      if (other.Spine.Length != 0) {
        Spine = other.Spine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            CardNum = input.ReadInt32();
            break;
          }
          case 32: {
            GoldLimit = input.ReadInt32();
            break;
          }
          case 40: {
            GoldNewLimit = input.ReadInt32();
            break;
          }
          case 50: {
            goldPayPass_.AddEntriesFrom(input, _map_goldPayPass_codec);
            break;
          }
          case 56: {
            LeastNum = input.ReadInt32();
            break;
          }
          case 64: {
            LeastStar = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            randomStarInfo_.AddEntriesFrom(input, _repeated_randomStarInfo_codec);
            break;
          }
          case 82: {
            Spine = input.ReadString();
            break;
          }
          case 90: {
            ExpireItem = input.ReadString();
            break;
          }
          case 96: {
            IsTop = input.ReadBool();
            break;
          }
          case 104: {
            IsShinnyGuar = input.ReadBool();
            break;
          }
          case 112: {
            IsAutoOpen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            CardNum = input.ReadInt32();
            break;
          }
          case 32: {
            GoldLimit = input.ReadInt32();
            break;
          }
          case 40: {
            GoldNewLimit = input.ReadInt32();
            break;
          }
          case 50: {
            goldPayPass_.AddEntriesFrom(ref input, _map_goldPayPass_codec);
            break;
          }
          case 56: {
            LeastNum = input.ReadInt32();
            break;
          }
          case 64: {
            LeastStar = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            randomStarInfo_.AddEntriesFrom(ref input, _repeated_randomStarInfo_codec);
            break;
          }
          case 82: {
            Spine = input.ReadString();
            break;
          }
          case 90: {
            ExpireItem = input.ReadString();
            break;
          }
          case 96: {
            IsTop = input.ReadBool();
            break;
          }
          case 104: {
            IsShinnyGuar = input.ReadBool();
            break;
          }
          case 112: {
            IsAutoOpen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjCardPackMapABValue : pb::IMessage<ObjCardPackMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjCardPackMapABValue> _parser = new pb::MessageParser<ObjCardPackMapABValue>(() => new ObjCardPackMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjCardPackMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ObjCardPackConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjCardPackMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjCardPackMapABValue(ObjCardPackMapABValue other) : this() {
      objCardPackMap_ = other.objCardPackMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjCardPackMapABValue Clone() {
      return new ObjCardPackMapABValue(this);
    }

    /// <summary>Field number for the "ObjCardPackMap" field.</summary>
    public const int ObjCardPackMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.ObjCardPack>.Codec _map_objCardPackMap_codec
        = new pbc::MapField<int, global::fat.rawdata.ObjCardPack>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjCardPack.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.ObjCardPack> objCardPackMap_ = new pbc::MapField<int, global::fat.rawdata.ObjCardPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.ObjCardPack> ObjCardPackMap {
      get { return objCardPackMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjCardPackMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjCardPackMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ObjCardPackMap.Equals(other.ObjCardPackMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ObjCardPackMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objCardPackMap_.WriteTo(output, _map_objCardPackMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objCardPackMap_.WriteTo(ref output, _map_objCardPackMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objCardPackMap_.CalculateSize(_map_objCardPackMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjCardPackMapABValue other) {
      if (other == null) {
        return;
      }
      objCardPackMap_.Add(other.objCardPackMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objCardPackMap_.AddEntriesFrom(input, _map_objCardPackMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objCardPackMap_.AddEntriesFrom(ref input, _map_objCardPackMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjCardPackConf : pb::IMessage<ObjCardPackConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjCardPackConf> _parser = new pb::MessageParser<ObjCardPackConf>(() => new ObjCardPackConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjCardPackConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ObjCardPackConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjCardPackConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjCardPackConf(ObjCardPackConf other) : this() {
      objCardPackMap_ = other.objCardPackMap_.Clone();
      objCardPackMapAB_ = other.objCardPackMapAB_.Clone();
      objCardPackMapABPatch_ = other.objCardPackMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjCardPackConf Clone() {
      return new ObjCardPackConf(this);
    }

    /// <summary>Field number for the "ObjCardPackMap" field.</summary>
    public const int ObjCardPackMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.ObjCardPack>.Codec _map_objCardPackMap_codec
        = new pbc::MapField<int, global::fat.rawdata.ObjCardPack>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjCardPack.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.ObjCardPack> objCardPackMap_ = new pbc::MapField<int, global::fat.rawdata.ObjCardPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.ObjCardPack> ObjCardPackMap {
      get { return objCardPackMap_; }
    }

    /// <summary>Field number for the "ObjCardPackMapAB" field.</summary>
    public const int ObjCardPackMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.ObjCardPackMapABValue>.Codec _map_objCardPackMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.ObjCardPackMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjCardPackMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.ObjCardPackMapABValue> objCardPackMapAB_ = new pbc::MapField<string, global::fat.rawdata.ObjCardPackMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ObjCardPackMapABValue> ObjCardPackMapAB {
      get { return objCardPackMapAB_; }
    }

    /// <summary>Field number for the "ObjCardPackMapABPatch" field.</summary>
    public const int ObjCardPackMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.ObjCardPackMapABValue>.Codec _map_objCardPackMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.ObjCardPackMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjCardPackMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.ObjCardPackMapABValue> objCardPackMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.ObjCardPackMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ObjCardPackMapABValue> ObjCardPackMapABPatch {
      get { return objCardPackMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjCardPackConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjCardPackConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ObjCardPackMap.Equals(other.ObjCardPackMap)) return false;
      if (!ObjCardPackMapAB.Equals(other.ObjCardPackMapAB)) return false;
      if (!ObjCardPackMapABPatch.Equals(other.ObjCardPackMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ObjCardPackMap.GetHashCode();
      hash ^= ObjCardPackMapAB.GetHashCode();
      hash ^= ObjCardPackMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objCardPackMap_.WriteTo(output, _map_objCardPackMap_codec);
      objCardPackMapAB_.WriteTo(output, _map_objCardPackMapAB_codec);
      objCardPackMapABPatch_.WriteTo(output, _map_objCardPackMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objCardPackMap_.WriteTo(ref output, _map_objCardPackMap_codec);
      objCardPackMapAB_.WriteTo(ref output, _map_objCardPackMapAB_codec);
      objCardPackMapABPatch_.WriteTo(ref output, _map_objCardPackMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objCardPackMap_.CalculateSize(_map_objCardPackMap_codec);
      size += objCardPackMapAB_.CalculateSize(_map_objCardPackMapAB_codec);
      size += objCardPackMapABPatch_.CalculateSize(_map_objCardPackMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjCardPackConf other) {
      if (other == null) {
        return;
      }
      objCardPackMap_.Add(other.objCardPackMap_);
      objCardPackMapAB_.Add(other.objCardPackMapAB_);
      objCardPackMapABPatch_.Add(other.objCardPackMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objCardPackMap_.AddEntriesFrom(input, _map_objCardPackMap_codec);
            break;
          }
          case 18: {
            objCardPackMapAB_.AddEntriesFrom(input, _map_objCardPackMapAB_codec);
            break;
          }
          case 26: {
            objCardPackMapABPatch_.AddEntriesFrom(input, _map_objCardPackMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objCardPackMap_.AddEntriesFrom(ref input, _map_objCardPackMap_codec);
            break;
          }
          case 18: {
            objCardPackMapAB_.AddEntriesFrom(ref input, _map_objCardPackMapAB_codec);
            break;
          }
          case 26: {
            objCardPackMapABPatch_.AddEntriesFrom(ref input, _map_objCardPackMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
