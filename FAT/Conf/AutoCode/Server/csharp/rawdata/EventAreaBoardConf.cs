// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventAreaBoardConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventAreaBoardConf.proto</summary>
  public static partial class EventAreaBoardConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventAreaBoardConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventAreaBoardConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiByYXdkYXRhL0V2ZW50QXJlYUJvYXJkQ29uZi5wcm90bxIHcmF3ZGF0YSKW",
            "AgoORXZlbnRBcmVhQm9hcmQSCgoCaWQYASABKAUSDAoEY29zdBgCIAEoBRIQ",
            "CghlbmRUaGVtZRgDIAEoBRISCgpldmVudEdyb3VwGAQgASgFEhMKC2V4cGly",
            "ZVRoZW1lGAUgASgFEhMKC2ZpbmlzaFRoZW1lGAYgASgFEhwKFGdhbGxlcnlD",
            "b21wbGV0ZVRoZW1lGAcgASgFEhQKDGdhbGxlcnlUaGVtZRgIIAEoBRIRCglo",
            "ZWxwVGhlbWUYCSABKAUSFAoMbG9hZGluZ1RoZW1lGAogASgFEhEKCW1haW5U",
            "aGVtZRgLIAEoBRIWCg5taWxlc3RvbmVUaGVtZRgMIAEoBRISCgpzdGFydFRo",
            "ZW1lGA0gASgFIsIBChhFdmVudEFyZWFCb2FyZE1hcEFCVmFsdWUSUwoRRXZl",
            "bnRBcmVhQm9hcmRNYXAYASADKAsyOC5yYXdkYXRhLkV2ZW50QXJlYUJvYXJk",
            "TWFwQUJWYWx1ZS5FdmVudEFyZWFCb2FyZE1hcEVudHJ5GlEKFkV2ZW50QXJl",
            "YUJvYXJkTWFwRW50cnkSCwoDa2V5GAEgASgFEiYKBXZhbHVlGAIgASgLMhcu",
            "cmF3ZGF0YS5FdmVudEFyZWFCb2FyZDoCOAEiqQQKEkV2ZW50QXJlYUJvYXJk",
            "Q29uZhJNChFFdmVudEFyZWFCb2FyZE1hcBgBIAMoCzIyLnJhd2RhdGEuRXZl",
            "bnRBcmVhQm9hcmRDb25mLkV2ZW50QXJlYUJvYXJkTWFwRW50cnkSUQoTRXZl",
            "bnRBcmVhQm9hcmRNYXBBQhgCIAMoCzI0LnJhd2RhdGEuRXZlbnRBcmVhQm9h",
            "cmRDb25mLkV2ZW50QXJlYUJvYXJkTWFwQUJFbnRyeRJbChhFdmVudEFyZWFC",
            "b2FyZE1hcEFCUGF0Y2gYAyADKAsyOS5yYXdkYXRhLkV2ZW50QXJlYUJvYXJk",
            "Q29uZi5FdmVudEFyZWFCb2FyZE1hcEFCUGF0Y2hFbnRyeRpRChZFdmVudEFy",
            "ZWFCb2FyZE1hcEVudHJ5EgsKA2tleRgBIAEoBRImCgV2YWx1ZRgCIAEoCzIX",
            "LnJhd2RhdGEuRXZlbnRBcmVhQm9hcmQ6AjgBGl0KGEV2ZW50QXJlYUJvYXJk",
            "TWFwQUJFbnRyeRILCgNrZXkYASABKAkSMAoFdmFsdWUYAiABKAsyIS5yYXdk",
            "YXRhLkV2ZW50QXJlYUJvYXJkTWFwQUJWYWx1ZToCOAEaYgodRXZlbnRBcmVh",
            "Qm9hcmRNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEjAKBXZhbHVlGAIg",
            "ASgLMiEucmF3ZGF0YS5FdmVudEFyZWFCb2FyZE1hcEFCVmFsdWU6AjgBQj1a",
            "LWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3ZGF0",
            "YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventAreaBoard), global::fat.rawdata.EventAreaBoard.Parser, new[]{ "Id", "Cost", "EndTheme", "EventGroup", "ExpireTheme", "FinishTheme", "GalleryCompleteTheme", "GalleryTheme", "HelpTheme", "LoadingTheme", "MainTheme", "MilestoneTheme", "StartTheme" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventAreaBoardMapABValue), global::fat.rawdata.EventAreaBoardMapABValue.Parser, new[]{ "EventAreaBoardMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventAreaBoardConf), global::fat.rawdata.EventAreaBoardConf.Parser, new[]{ "EventAreaBoardMap", "EventAreaBoardMapAB", "EventAreaBoardMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventAreaBoard",table="EventAreaBoardMap",table_wrapper="EventAreaBoardConf",map="true",map_key_type="int32",data="EventAreaBoardConf")
  /// annotation@ab(table_ab="EventAreaBoardMapAB",table_ab_patch="EventAreaBoardMapABPatch",table_ab_value="EventAreaBoardMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventAreaBoard(id="id")
  /// </summary>
  public sealed partial class EventAreaBoard : pb::IMessage<EventAreaBoard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventAreaBoard> _parser = new pb::MessageParser<EventAreaBoard>(() => new EventAreaBoard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventAreaBoard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventAreaBoardConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventAreaBoard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventAreaBoard(EventAreaBoard other) : this() {
      id_ = other.id_;
      cost_ = other.cost_;
      endTheme_ = other.endTheme_;
      eventGroup_ = other.eventGroup_;
      expireTheme_ = other.expireTheme_;
      finishTheme_ = other.finishTheme_;
      galleryCompleteTheme_ = other.galleryCompleteTheme_;
      galleryTheme_ = other.galleryTheme_;
      helpTheme_ = other.helpTheme_;
      loadingTheme_ = other.loadingTheme_;
      mainTheme_ = other.mainTheme_;
      milestoneTheme_ = other.milestoneTheme_;
      startTheme_ = other.startTheme_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventAreaBoard Clone() {
      return new EventAreaBoard(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private int cost_;
    /// <summary>
    /// 活动棋子掉落消耗
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 3;
    private int endTheme_;
    /// <summary>
    /// 结束弹板
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventGroup" field.</summary>
    public const int EventGroupFieldNumber = 4;
    private int eventGroup_;
    /// <summary>
    /// 活动用户分层
    /// （GradeIndexMapping.id）
    /// （EventAreaBoardGroup.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventGroup {
      get { return eventGroup_; }
      set {
        eventGroup_ = value;
      }
    }

    /// <summary>Field number for the "expireTheme" field.</summary>
    public const int ExpireThemeFieldNumber = 5;
    private int expireTheme_;
    /// <summary>
    /// 补领弹板
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpireTheme {
      get { return expireTheme_; }
      set {
        expireTheme_ = value;
      }
    }

    /// <summary>Field number for the "finishTheme" field.</summary>
    public const int FinishThemeFieldNumber = 6;
    private int finishTheme_;
    /// <summary>
    /// 活动主链条完成弹板
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinishTheme {
      get { return finishTheme_; }
      set {
        finishTheme_ = value;
      }
    }

    /// <summary>Field number for the "galleryCompleteTheme" field.</summary>
    public const int GalleryCompleteThemeFieldNumber = 7;
    private int galleryCompleteTheme_;
    /// <summary>
    /// 图鉴完成界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GalleryCompleteTheme {
      get { return galleryCompleteTheme_; }
      set {
        galleryCompleteTheme_ = value;
      }
    }

    /// <summary>Field number for the "galleryTheme" field.</summary>
    public const int GalleryThemeFieldNumber = 8;
    private int galleryTheme_;
    /// <summary>
    /// 图鉴界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GalleryTheme {
      get { return galleryTheme_; }
      set {
        galleryTheme_ = value;
      }
    }

    /// <summary>Field number for the "helpTheme" field.</summary>
    public const int HelpThemeFieldNumber = 9;
    private int helpTheme_;
    /// <summary>
    /// 帮助页
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpTheme {
      get { return helpTheme_; }
      set {
        helpTheme_ = value;
      }
    }

    /// <summary>Field number for the "loadingTheme" field.</summary>
    public const int LoadingThemeFieldNumber = 10;
    private int loadingTheme_;
    /// <summary>
    /// Loading界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoadingTheme {
      get { return loadingTheme_; }
      set {
        loadingTheme_ = value;
      }
    }

    /// <summary>Field number for the "mainTheme" field.</summary>
    public const int MainThemeFieldNumber = 11;
    private int mainTheme_;
    /// <summary>
    /// 活动主界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainTheme {
      get { return mainTheme_; }
      set {
        mainTheme_ = value;
      }
    }

    /// <summary>Field number for the "milestoneTheme" field.</summary>
    public const int MilestoneThemeFieldNumber = 12;
    private int milestoneTheme_;
    /// <summary>
    /// 里程碑详情
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MilestoneTheme {
      get { return milestoneTheme_; }
      set {
        milestoneTheme_ = value;
      }
    }

    /// <summary>Field number for the "startTheme" field.</summary>
    public const int StartThemeFieldNumber = 13;
    private int startTheme_;
    /// <summary>
    /// 开启弹板
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTheme {
      get { return startTheme_; }
      set {
        startTheme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventAreaBoard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventAreaBoard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Cost != other.Cost) return false;
      if (EndTheme != other.EndTheme) return false;
      if (EventGroup != other.EventGroup) return false;
      if (ExpireTheme != other.ExpireTheme) return false;
      if (FinishTheme != other.FinishTheme) return false;
      if (GalleryCompleteTheme != other.GalleryCompleteTheme) return false;
      if (GalleryTheme != other.GalleryTheme) return false;
      if (HelpTheme != other.HelpTheme) return false;
      if (LoadingTheme != other.LoadingTheme) return false;
      if (MainTheme != other.MainTheme) return false;
      if (MilestoneTheme != other.MilestoneTheme) return false;
      if (StartTheme != other.StartTheme) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      if (EventGroup != 0) hash ^= EventGroup.GetHashCode();
      if (ExpireTheme != 0) hash ^= ExpireTheme.GetHashCode();
      if (FinishTheme != 0) hash ^= FinishTheme.GetHashCode();
      if (GalleryCompleteTheme != 0) hash ^= GalleryCompleteTheme.GetHashCode();
      if (GalleryTheme != 0) hash ^= GalleryTheme.GetHashCode();
      if (HelpTheme != 0) hash ^= HelpTheme.GetHashCode();
      if (LoadingTheme != 0) hash ^= LoadingTheme.GetHashCode();
      if (MainTheme != 0) hash ^= MainTheme.GetHashCode();
      if (MilestoneTheme != 0) hash ^= MilestoneTheme.GetHashCode();
      if (StartTheme != 0) hash ^= StartTheme.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Cost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndTheme);
      }
      if (EventGroup != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventGroup);
      }
      if (ExpireTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ExpireTheme);
      }
      if (FinishTheme != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FinishTheme);
      }
      if (GalleryCompleteTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GalleryCompleteTheme);
      }
      if (GalleryTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GalleryTheme);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HelpTheme);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LoadingTheme);
      }
      if (MainTheme != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MainTheme);
      }
      if (MilestoneTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MilestoneTheme);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(StartTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Cost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndTheme);
      }
      if (EventGroup != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EventGroup);
      }
      if (ExpireTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ExpireTheme);
      }
      if (FinishTheme != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FinishTheme);
      }
      if (GalleryCompleteTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GalleryCompleteTheme);
      }
      if (GalleryTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GalleryTheme);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HelpTheme);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LoadingTheme);
      }
      if (MainTheme != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MainTheme);
      }
      if (MilestoneTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MilestoneTheme);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(StartTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (EndTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      if (EventGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventGroup);
      }
      if (ExpireTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpireTheme);
      }
      if (FinishTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinishTheme);
      }
      if (GalleryCompleteTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GalleryCompleteTheme);
      }
      if (GalleryTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GalleryTheme);
      }
      if (HelpTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HelpTheme);
      }
      if (LoadingTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoadingTheme);
      }
      if (MainTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainTheme);
      }
      if (MilestoneTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MilestoneTheme);
      }
      if (StartTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTheme);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventAreaBoard other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      if (other.EventGroup != 0) {
        EventGroup = other.EventGroup;
      }
      if (other.ExpireTheme != 0) {
        ExpireTheme = other.ExpireTheme;
      }
      if (other.FinishTheme != 0) {
        FinishTheme = other.FinishTheme;
      }
      if (other.GalleryCompleteTheme != 0) {
        GalleryCompleteTheme = other.GalleryCompleteTheme;
      }
      if (other.GalleryTheme != 0) {
        GalleryTheme = other.GalleryTheme;
      }
      if (other.HelpTheme != 0) {
        HelpTheme = other.HelpTheme;
      }
      if (other.LoadingTheme != 0) {
        LoadingTheme = other.LoadingTheme;
      }
      if (other.MainTheme != 0) {
        MainTheme = other.MainTheme;
      }
      if (other.MilestoneTheme != 0) {
        MilestoneTheme = other.MilestoneTheme;
      }
      if (other.StartTheme != 0) {
        StartTheme = other.StartTheme;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
          case 24: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 32: {
            EventGroup = input.ReadInt32();
            break;
          }
          case 40: {
            ExpireTheme = input.ReadInt32();
            break;
          }
          case 48: {
            FinishTheme = input.ReadInt32();
            break;
          }
          case 56: {
            GalleryCompleteTheme = input.ReadInt32();
            break;
          }
          case 64: {
            GalleryTheme = input.ReadInt32();
            break;
          }
          case 72: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 80: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 88: {
            MainTheme = input.ReadInt32();
            break;
          }
          case 96: {
            MilestoneTheme = input.ReadInt32();
            break;
          }
          case 104: {
            StartTheme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
          case 24: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 32: {
            EventGroup = input.ReadInt32();
            break;
          }
          case 40: {
            ExpireTheme = input.ReadInt32();
            break;
          }
          case 48: {
            FinishTheme = input.ReadInt32();
            break;
          }
          case 56: {
            GalleryCompleteTheme = input.ReadInt32();
            break;
          }
          case 64: {
            GalleryTheme = input.ReadInt32();
            break;
          }
          case 72: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 80: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 88: {
            MainTheme = input.ReadInt32();
            break;
          }
          case 96: {
            MilestoneTheme = input.ReadInt32();
            break;
          }
          case 104: {
            StartTheme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventAreaBoardMapABValue : pb::IMessage<EventAreaBoardMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventAreaBoardMapABValue> _parser = new pb::MessageParser<EventAreaBoardMapABValue>(() => new EventAreaBoardMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventAreaBoardMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventAreaBoardConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventAreaBoardMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventAreaBoardMapABValue(EventAreaBoardMapABValue other) : this() {
      eventAreaBoardMap_ = other.eventAreaBoardMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventAreaBoardMapABValue Clone() {
      return new EventAreaBoardMapABValue(this);
    }

    /// <summary>Field number for the "EventAreaBoardMap" field.</summary>
    public const int EventAreaBoardMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventAreaBoard>.Codec _map_eventAreaBoardMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventAreaBoard>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventAreaBoard.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventAreaBoard> eventAreaBoardMap_ = new pbc::MapField<int, global::fat.rawdata.EventAreaBoard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventAreaBoard> EventAreaBoardMap {
      get { return eventAreaBoardMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventAreaBoardMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventAreaBoardMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventAreaBoardMap.Equals(other.EventAreaBoardMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventAreaBoardMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventAreaBoardMap_.WriteTo(output, _map_eventAreaBoardMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventAreaBoardMap_.WriteTo(ref output, _map_eventAreaBoardMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventAreaBoardMap_.CalculateSize(_map_eventAreaBoardMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventAreaBoardMapABValue other) {
      if (other == null) {
        return;
      }
      eventAreaBoardMap_.Add(other.eventAreaBoardMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventAreaBoardMap_.AddEntriesFrom(input, _map_eventAreaBoardMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventAreaBoardMap_.AddEntriesFrom(ref input, _map_eventAreaBoardMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventAreaBoardConf : pb::IMessage<EventAreaBoardConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventAreaBoardConf> _parser = new pb::MessageParser<EventAreaBoardConf>(() => new EventAreaBoardConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventAreaBoardConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventAreaBoardConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventAreaBoardConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventAreaBoardConf(EventAreaBoardConf other) : this() {
      eventAreaBoardMap_ = other.eventAreaBoardMap_.Clone();
      eventAreaBoardMapAB_ = other.eventAreaBoardMapAB_.Clone();
      eventAreaBoardMapABPatch_ = other.eventAreaBoardMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventAreaBoardConf Clone() {
      return new EventAreaBoardConf(this);
    }

    /// <summary>Field number for the "EventAreaBoardMap" field.</summary>
    public const int EventAreaBoardMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventAreaBoard>.Codec _map_eventAreaBoardMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventAreaBoard>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventAreaBoard.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventAreaBoard> eventAreaBoardMap_ = new pbc::MapField<int, global::fat.rawdata.EventAreaBoard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventAreaBoard> EventAreaBoardMap {
      get { return eventAreaBoardMap_; }
    }

    /// <summary>Field number for the "EventAreaBoardMapAB" field.</summary>
    public const int EventAreaBoardMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventAreaBoardMapABValue>.Codec _map_eventAreaBoardMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventAreaBoardMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventAreaBoardMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventAreaBoardMapABValue> eventAreaBoardMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventAreaBoardMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventAreaBoardMapABValue> EventAreaBoardMapAB {
      get { return eventAreaBoardMapAB_; }
    }

    /// <summary>Field number for the "EventAreaBoardMapABPatch" field.</summary>
    public const int EventAreaBoardMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventAreaBoardMapABValue>.Codec _map_eventAreaBoardMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventAreaBoardMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventAreaBoardMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventAreaBoardMapABValue> eventAreaBoardMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventAreaBoardMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventAreaBoardMapABValue> EventAreaBoardMapABPatch {
      get { return eventAreaBoardMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventAreaBoardConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventAreaBoardConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventAreaBoardMap.Equals(other.EventAreaBoardMap)) return false;
      if (!EventAreaBoardMapAB.Equals(other.EventAreaBoardMapAB)) return false;
      if (!EventAreaBoardMapABPatch.Equals(other.EventAreaBoardMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventAreaBoardMap.GetHashCode();
      hash ^= EventAreaBoardMapAB.GetHashCode();
      hash ^= EventAreaBoardMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventAreaBoardMap_.WriteTo(output, _map_eventAreaBoardMap_codec);
      eventAreaBoardMapAB_.WriteTo(output, _map_eventAreaBoardMapAB_codec);
      eventAreaBoardMapABPatch_.WriteTo(output, _map_eventAreaBoardMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventAreaBoardMap_.WriteTo(ref output, _map_eventAreaBoardMap_codec);
      eventAreaBoardMapAB_.WriteTo(ref output, _map_eventAreaBoardMapAB_codec);
      eventAreaBoardMapABPatch_.WriteTo(ref output, _map_eventAreaBoardMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventAreaBoardMap_.CalculateSize(_map_eventAreaBoardMap_codec);
      size += eventAreaBoardMapAB_.CalculateSize(_map_eventAreaBoardMapAB_codec);
      size += eventAreaBoardMapABPatch_.CalculateSize(_map_eventAreaBoardMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventAreaBoardConf other) {
      if (other == null) {
        return;
      }
      eventAreaBoardMap_.Add(other.eventAreaBoardMap_);
      eventAreaBoardMapAB_.Add(other.eventAreaBoardMapAB_);
      eventAreaBoardMapABPatch_.Add(other.eventAreaBoardMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventAreaBoardMap_.AddEntriesFrom(input, _map_eventAreaBoardMap_codec);
            break;
          }
          case 18: {
            eventAreaBoardMapAB_.AddEntriesFrom(input, _map_eventAreaBoardMapAB_codec);
            break;
          }
          case 26: {
            eventAreaBoardMapABPatch_.AddEntriesFrom(input, _map_eventAreaBoardMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventAreaBoardMap_.AddEntriesFrom(ref input, _map_eventAreaBoardMap_codec);
            break;
          }
          case 18: {
            eventAreaBoardMapAB_.AddEntriesFrom(ref input, _map_eventAreaBoardMapAB_codec);
            break;
          }
          case 26: {
            eventAreaBoardMapABPatch_.AddEntriesFrom(ref input, _map_eventAreaBoardMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
