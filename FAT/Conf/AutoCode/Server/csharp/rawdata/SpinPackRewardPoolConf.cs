// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/SpinPackRewardPoolConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/SpinPackRewardPoolConf.proto</summary>
  public static partial class SpinPackRewardPoolConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/SpinPackRewardPoolConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinPackRewardPoolConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRyYXdkYXRhL1NwaW5QYWNrUmV3YXJkUG9vbENvbmYucHJvdG8SB3Jhd2Rh",
            "dGEiUwoSU3BpblBhY2tSZXdhcmRQb29sEgoKAmlkGAEgASgFEhIKCnJld2Fy",
            "ZExpc3QYAiADKAkSDQoFc3RhZ2UYAyABKAUSDgoGd2VpZ2h0GAQgASgFItoB",
            "ChxTcGluUGFja1Jld2FyZFBvb2xNYXBBQlZhbHVlEl8KFVNwaW5QYWNrUmV3",
            "YXJkUG9vbE1hcBgBIAMoCzJALnJhd2RhdGEuU3BpblBhY2tSZXdhcmRQb29s",
            "TWFwQUJWYWx1ZS5TcGluUGFja1Jld2FyZFBvb2xNYXBFbnRyeRpZChpTcGlu",
            "UGFja1Jld2FyZFBvb2xNYXBFbnRyeRILCgNrZXkYASABKAUSKgoFdmFsdWUY",
            "AiABKAsyGy5yYXdkYXRhLlNwaW5QYWNrUmV3YXJkUG9vbDoCOAEi6QQKFlNw",
            "aW5QYWNrUmV3YXJkUG9vbENvbmYSWQoVU3BpblBhY2tSZXdhcmRQb29sTWFw",
            "GAEgAygLMjoucmF3ZGF0YS5TcGluUGFja1Jld2FyZFBvb2xDb25mLlNwaW5Q",
            "YWNrUmV3YXJkUG9vbE1hcEVudHJ5El0KF1NwaW5QYWNrUmV3YXJkUG9vbE1h",
            "cEFCGAIgAygLMjwucmF3ZGF0YS5TcGluUGFja1Jld2FyZFBvb2xDb25mLlNw",
            "aW5QYWNrUmV3YXJkUG9vbE1hcEFCRW50cnkSZwocU3BpblBhY2tSZXdhcmRQ",
            "b29sTWFwQUJQYXRjaBgDIAMoCzJBLnJhd2RhdGEuU3BpblBhY2tSZXdhcmRQ",
            "b29sQ29uZi5TcGluUGFja1Jld2FyZFBvb2xNYXBBQlBhdGNoRW50cnkaWQoa",
            "U3BpblBhY2tSZXdhcmRQb29sTWFwRW50cnkSCwoDa2V5GAEgASgFEioKBXZh",
            "bHVlGAIgASgLMhsucmF3ZGF0YS5TcGluUGFja1Jld2FyZFBvb2w6AjgBGmUK",
            "HFNwaW5QYWNrUmV3YXJkUG9vbE1hcEFCRW50cnkSCwoDa2V5GAEgASgJEjQK",
            "BXZhbHVlGAIgASgLMiUucmF3ZGF0YS5TcGluUGFja1Jld2FyZFBvb2xNYXBB",
            "QlZhbHVlOgI4ARpqCiFTcGluUGFja1Jld2FyZFBvb2xNYXBBQlBhdGNoRW50",
            "cnkSCwoDa2V5GAEgASgJEjQKBXZhbHVlGAIgASgLMiUucmF3ZGF0YS5TcGlu",
            "UGFja1Jld2FyZFBvb2xNYXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1",
            "cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0",
            "YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.SpinPackRewardPool), global::fat.rawdata.SpinPackRewardPool.Parser, new[]{ "Id", "RewardList", "Stage", "Weight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.SpinPackRewardPoolMapABValue), global::fat.rawdata.SpinPackRewardPoolMapABValue.Parser, new[]{ "SpinPackRewardPoolMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.SpinPackRewardPoolConf), global::fat.rawdata.SpinPackRewardPoolConf.Parser, new[]{ "SpinPackRewardPoolMap", "SpinPackRewardPoolMapAB", "SpinPackRewardPoolMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="SpinPackRewardPool",table="SpinPackRewardPoolMap",table_wrapper="SpinPackRewardPoolConf",map="true",map_key_type="int32",data="SpinPackRewardPoolConf")
  /// annotation@ab(table_ab="SpinPackRewardPoolMapAB",table_ab_patch="SpinPackRewardPoolMapABPatch",table_ab_value="SpinPackRewardPoolMapABValue",ab_patch="true")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@SpinPackRewardPool(id="id")
  /// </summary>
  public sealed partial class SpinPackRewardPool : pb::IMessage<SpinPackRewardPool>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinPackRewardPool> _parser = new pb::MessageParser<SpinPackRewardPool>(() => new SpinPackRewardPool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpinPackRewardPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.SpinPackRewardPoolConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinPackRewardPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinPackRewardPool(SpinPackRewardPool other) : this() {
      id_ = other.id_;
      rewardList_ = other.rewardList_.Clone();
      stage_ = other.stage_;
      weight_ = other.weight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinPackRewardPool Clone() {
      return new SpinPackRewardPool(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 奖励id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "rewardList" field.</summary>
    public const int RewardListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_rewardList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> rewardList_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 各个节点具体奖励
    /// （奖励id:数量,...）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RewardList {
      get { return rewardList_; }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 3;
    private int stage_;
    /// <summary>
    /// 奖励所属阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 4;
    private int weight_;
    /// <summary>
    /// 奖励权重
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpinPackRewardPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpinPackRewardPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!rewardList_.Equals(other.rewardList_)) return false;
      if (Stage != other.Stage) return false;
      if (Weight != other.Weight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= rewardList_.GetHashCode();
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (Stage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Stage);
      }
      if (Weight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Weight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      rewardList_.WriteTo(ref output, _repeated_rewardList_codec);
      if (Stage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Stage);
      }
      if (Weight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Weight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpinPackRewardPool other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      rewardList_.Add(other.rewardList_);
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
          case 24: {
            Stage = input.ReadInt32();
            break;
          }
          case 32: {
            Weight = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            rewardList_.AddEntriesFrom(ref input, _repeated_rewardList_codec);
            break;
          }
          case 24: {
            Stage = input.ReadInt32();
            break;
          }
          case 32: {
            Weight = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SpinPackRewardPoolMapABValue : pb::IMessage<SpinPackRewardPoolMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinPackRewardPoolMapABValue> _parser = new pb::MessageParser<SpinPackRewardPoolMapABValue>(() => new SpinPackRewardPoolMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpinPackRewardPoolMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.SpinPackRewardPoolConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinPackRewardPoolMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinPackRewardPoolMapABValue(SpinPackRewardPoolMapABValue other) : this() {
      spinPackRewardPoolMap_ = other.spinPackRewardPoolMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinPackRewardPoolMapABValue Clone() {
      return new SpinPackRewardPoolMapABValue(this);
    }

    /// <summary>Field number for the "SpinPackRewardPoolMap" field.</summary>
    public const int SpinPackRewardPoolMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.SpinPackRewardPool>.Codec _map_spinPackRewardPoolMap_codec
        = new pbc::MapField<int, global::fat.rawdata.SpinPackRewardPool>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.SpinPackRewardPool.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.SpinPackRewardPool> spinPackRewardPoolMap_ = new pbc::MapField<int, global::fat.rawdata.SpinPackRewardPool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.SpinPackRewardPool> SpinPackRewardPoolMap {
      get { return spinPackRewardPoolMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpinPackRewardPoolMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpinPackRewardPoolMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!SpinPackRewardPoolMap.Equals(other.SpinPackRewardPoolMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= SpinPackRewardPoolMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      spinPackRewardPoolMap_.WriteTo(output, _map_spinPackRewardPoolMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      spinPackRewardPoolMap_.WriteTo(ref output, _map_spinPackRewardPoolMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += spinPackRewardPoolMap_.CalculateSize(_map_spinPackRewardPoolMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpinPackRewardPoolMapABValue other) {
      if (other == null) {
        return;
      }
      spinPackRewardPoolMap_.Add(other.spinPackRewardPoolMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            spinPackRewardPoolMap_.AddEntriesFrom(input, _map_spinPackRewardPoolMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            spinPackRewardPoolMap_.AddEntriesFrom(ref input, _map_spinPackRewardPoolMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SpinPackRewardPoolConf : pb::IMessage<SpinPackRewardPoolConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinPackRewardPoolConf> _parser = new pb::MessageParser<SpinPackRewardPoolConf>(() => new SpinPackRewardPoolConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpinPackRewardPoolConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.SpinPackRewardPoolConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinPackRewardPoolConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinPackRewardPoolConf(SpinPackRewardPoolConf other) : this() {
      spinPackRewardPoolMap_ = other.spinPackRewardPoolMap_.Clone();
      spinPackRewardPoolMapAB_ = other.spinPackRewardPoolMapAB_.Clone();
      spinPackRewardPoolMapABPatch_ = other.spinPackRewardPoolMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinPackRewardPoolConf Clone() {
      return new SpinPackRewardPoolConf(this);
    }

    /// <summary>Field number for the "SpinPackRewardPoolMap" field.</summary>
    public const int SpinPackRewardPoolMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.SpinPackRewardPool>.Codec _map_spinPackRewardPoolMap_codec
        = new pbc::MapField<int, global::fat.rawdata.SpinPackRewardPool>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.SpinPackRewardPool.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.SpinPackRewardPool> spinPackRewardPoolMap_ = new pbc::MapField<int, global::fat.rawdata.SpinPackRewardPool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.SpinPackRewardPool> SpinPackRewardPoolMap {
      get { return spinPackRewardPoolMap_; }
    }

    /// <summary>Field number for the "SpinPackRewardPoolMapAB" field.</summary>
    public const int SpinPackRewardPoolMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.SpinPackRewardPoolMapABValue>.Codec _map_spinPackRewardPoolMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.SpinPackRewardPoolMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.SpinPackRewardPoolMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.SpinPackRewardPoolMapABValue> spinPackRewardPoolMapAB_ = new pbc::MapField<string, global::fat.rawdata.SpinPackRewardPoolMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.SpinPackRewardPoolMapABValue> SpinPackRewardPoolMapAB {
      get { return spinPackRewardPoolMapAB_; }
    }

    /// <summary>Field number for the "SpinPackRewardPoolMapABPatch" field.</summary>
    public const int SpinPackRewardPoolMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.SpinPackRewardPoolMapABValue>.Codec _map_spinPackRewardPoolMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.SpinPackRewardPoolMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.SpinPackRewardPoolMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.SpinPackRewardPoolMapABValue> spinPackRewardPoolMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.SpinPackRewardPoolMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.SpinPackRewardPoolMapABValue> SpinPackRewardPoolMapABPatch {
      get { return spinPackRewardPoolMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpinPackRewardPoolConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpinPackRewardPoolConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!SpinPackRewardPoolMap.Equals(other.SpinPackRewardPoolMap)) return false;
      if (!SpinPackRewardPoolMapAB.Equals(other.SpinPackRewardPoolMapAB)) return false;
      if (!SpinPackRewardPoolMapABPatch.Equals(other.SpinPackRewardPoolMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= SpinPackRewardPoolMap.GetHashCode();
      hash ^= SpinPackRewardPoolMapAB.GetHashCode();
      hash ^= SpinPackRewardPoolMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      spinPackRewardPoolMap_.WriteTo(output, _map_spinPackRewardPoolMap_codec);
      spinPackRewardPoolMapAB_.WriteTo(output, _map_spinPackRewardPoolMapAB_codec);
      spinPackRewardPoolMapABPatch_.WriteTo(output, _map_spinPackRewardPoolMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      spinPackRewardPoolMap_.WriteTo(ref output, _map_spinPackRewardPoolMap_codec);
      spinPackRewardPoolMapAB_.WriteTo(ref output, _map_spinPackRewardPoolMapAB_codec);
      spinPackRewardPoolMapABPatch_.WriteTo(ref output, _map_spinPackRewardPoolMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += spinPackRewardPoolMap_.CalculateSize(_map_spinPackRewardPoolMap_codec);
      size += spinPackRewardPoolMapAB_.CalculateSize(_map_spinPackRewardPoolMapAB_codec);
      size += spinPackRewardPoolMapABPatch_.CalculateSize(_map_spinPackRewardPoolMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpinPackRewardPoolConf other) {
      if (other == null) {
        return;
      }
      spinPackRewardPoolMap_.Add(other.spinPackRewardPoolMap_);
      spinPackRewardPoolMapAB_.Add(other.spinPackRewardPoolMapAB_);
      spinPackRewardPoolMapABPatch_.Add(other.spinPackRewardPoolMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            spinPackRewardPoolMap_.AddEntriesFrom(input, _map_spinPackRewardPoolMap_codec);
            break;
          }
          case 18: {
            spinPackRewardPoolMapAB_.AddEntriesFrom(input, _map_spinPackRewardPoolMapAB_codec);
            break;
          }
          case 26: {
            spinPackRewardPoolMapABPatch_.AddEntriesFrom(input, _map_spinPackRewardPoolMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            spinPackRewardPoolMap_.AddEntriesFrom(ref input, _map_spinPackRewardPoolMap_codec);
            break;
          }
          case 18: {
            spinPackRewardPoolMapAB_.AddEntriesFrom(ref input, _map_spinPackRewardPoolMapAB_codec);
            break;
          }
          case 26: {
            spinPackRewardPoolMapABPatch_.AddEntriesFrom(ref input, _map_spinPackRewardPoolMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
