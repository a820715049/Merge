// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventTreasureConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventTreasureConf.proto</summary>
  public static partial class EventTreasureConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventTreasureConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventTreasureConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9yYXdkYXRhL0V2ZW50VHJlYXN1cmVDb25mLnByb3RvEgdyYXdkYXRhIs4F",
            "Cg1FdmVudFRyZWFzdXJlEgoKAmlkGAEgASgFEg8KB2JvYXJkSWQYAiABKAUS",
            "EgoKYm9udXNUb2tlbhgcIAEoBRIQCghidXlUaGVtZRgDIAEoBRIMCgRjb3N0",
            "GAQgASgFEhgKEGN5Y2xlTGV2ZWxSZXdhcmQYBSABKAkSFwoPY3ljbGVMZXZl",
            "bFNjb3JlGAYgASgFEhIKCmV2ZW50VGhlbWUYByABKAUSPAoLZXhwaXJlUG9w",
            "dXAYCCADKAsyJy5yYXdkYXRhLkV2ZW50VHJlYXN1cmUuRXhwaXJlUG9wdXBF",
            "bnRyeRIPCgdncmFkZUlkGBggASgFEhQKDGhlbHBLZXlUaGVtZRgJIAEoBRIV",
            "Cg1oZWxwUGxheVRoZW1lGAogASgFEhQKDGluY2x1ZGVHcnBJZBgLIAMoBRIO",
            "CgZrZXlOdW0YDCABKAUSEwoLbGV2ZWxSZXdhcmQYDSADKAkSGAoQbGV2ZWxS",
            "ZXdhcmRUaGVtZRgZIAEoBRISCgpsZXZlbFNjb3JlGA4gAygFEhQKDGxvYWRp",
            "bmdUaGVtZRgaIAEoBRIbChNtaWxlc3RvbmVSZXdhcmRJY29uGA8gASgJEgwK",
            "BG5hbWUYECABKAkSFQoNbmV3Um91bmRUaGVtZRgdIAEoBRIRCglwYWNrR3Jw",
            "SWQYESABKAUSEQoJcGFja1RpbWVzGBUgASgFEhsKE3Byb2dyZXNzUmV3YXJk",
            "VGhlbWUYGyABKAUSFwoPcmVjb250aW51ZVRoZW1lGBIgASgFEhUKDXJlcXVp",
            "cmVDb2luSWQYEyABKAUSFgoOcmVxdWlyZVNjb3JlSWQYFiABKAUSEgoKcmV3",
            "YXJkSWNvbhgUIAEoCRIVCg10cmVhc3VyZVRoZW1lGBcgASgFGjIKEEV4cGly",
            "ZVBvcHVwRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgJOgI4ASK8",
            "AQoXRXZlbnRUcmVhc3VyZU1hcEFCVmFsdWUSUAoQRXZlbnRUcmVhc3VyZU1h",
            "cBgBIAMoCzI2LnJhd2RhdGEuRXZlbnRUcmVhc3VyZU1hcEFCVmFsdWUuRXZl",
            "bnRUcmVhc3VyZU1hcEVudHJ5Gk8KFUV2ZW50VHJlYXN1cmVNYXBFbnRyeRIL",
            "CgNrZXkYASABKAUSJQoFdmFsdWUYAiABKAsyFi5yYXdkYXRhLkV2ZW50VHJl",
            "YXN1cmU6AjgBIpkEChFFdmVudFRyZWFzdXJlQ29uZhJKChBFdmVudFRyZWFz",
            "dXJlTWFwGAEgAygLMjAucmF3ZGF0YS5FdmVudFRyZWFzdXJlQ29uZi5FdmVu",
            "dFRyZWFzdXJlTWFwRW50cnkSTgoSRXZlbnRUcmVhc3VyZU1hcEFCGAIgAygL",
            "MjIucmF3ZGF0YS5FdmVudFRyZWFzdXJlQ29uZi5FdmVudFRyZWFzdXJlTWFw",
            "QUJFbnRyeRJYChdFdmVudFRyZWFzdXJlTWFwQUJQYXRjaBgDIAMoCzI3LnJh",
            "d2RhdGEuRXZlbnRUcmVhc3VyZUNvbmYuRXZlbnRUcmVhc3VyZU1hcEFCUGF0",
            "Y2hFbnRyeRpPChVFdmVudFRyZWFzdXJlTWFwRW50cnkSCwoDa2V5GAEgASgF",
            "EiUKBXZhbHVlGAIgASgLMhYucmF3ZGF0YS5FdmVudFRyZWFzdXJlOgI4ARpb",
            "ChdFdmVudFRyZWFzdXJlTWFwQUJFbnRyeRILCgNrZXkYASABKAkSLwoFdmFs",
            "dWUYAiABKAsyIC5yYXdkYXRhLkV2ZW50VHJlYXN1cmVNYXBBQlZhbHVlOgI4",
            "ARpgChxFdmVudFRyZWFzdXJlTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEo",
            "CRIvCgV2YWx1ZRgCIAEoCzIgLnJhd2RhdGEuRXZlbnRUcmVhc3VyZU1hcEFC",
            "VmFsdWU6AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9n",
            "b2xhbmcvcmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTreasure), global::fat.rawdata.EventTreasure.Parser, new[]{ "Id", "BoardId", "BonusToken", "BuyTheme", "Cost", "CycleLevelReward", "CycleLevelScore", "EventTheme", "ExpirePopup", "GradeId", "HelpKeyTheme", "HelpPlayTheme", "IncludeGrpId", "KeyNum", "LevelReward", "LevelRewardTheme", "LevelScore", "LoadingTheme", "MilestoneRewardIcon", "Name", "NewRoundTheme", "PackGrpId", "PackTimes", "ProgressRewardTheme", "RecontinueTheme", "RequireCoinId", "RequireScoreId", "RewardIcon", "TreasureTheme" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTreasureMapABValue), global::fat.rawdata.EventTreasureMapABValue.Parser, new[]{ "EventTreasureMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventTreasureConf), global::fat.rawdata.EventTreasureConf.Parser, new[]{ "EventTreasureMap", "EventTreasureMapAB", "EventTreasureMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventTreasure",table="EventTreasureMap",table_wrapper="EventTreasureConf",map="true",map_key_type="int32",data="EventTreasureConf")
  /// annotation@ab(table_ab="EventTreasureMapAB",table_ab_patch="EventTreasureMapABPatch",table_ab_value="EventTreasureMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventTreasure(id="id")
  /// </summary>
  public sealed partial class EventTreasure : pb::IMessage<EventTreasure>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTreasure> _parser = new pb::MessageParser<EventTreasure>(() => new EventTreasure());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTreasure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventTreasureConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTreasure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTreasure(EventTreasure other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      bonusToken_ = other.bonusToken_;
      buyTheme_ = other.buyTheme_;
      cost_ = other.cost_;
      cycleLevelReward_ = other.cycleLevelReward_;
      cycleLevelScore_ = other.cycleLevelScore_;
      eventTheme_ = other.eventTheme_;
      expirePopup_ = other.expirePopup_.Clone();
      gradeId_ = other.gradeId_;
      helpKeyTheme_ = other.helpKeyTheme_;
      helpPlayTheme_ = other.helpPlayTheme_;
      includeGrpId_ = other.includeGrpId_.Clone();
      keyNum_ = other.keyNum_;
      levelReward_ = other.levelReward_.Clone();
      levelRewardTheme_ = other.levelRewardTheme_;
      levelScore_ = other.levelScore_.Clone();
      loadingTheme_ = other.loadingTheme_;
      milestoneRewardIcon_ = other.milestoneRewardIcon_;
      name_ = other.name_;
      newRoundTheme_ = other.newRoundTheme_;
      packGrpId_ = other.packGrpId_;
      packTimes_ = other.packTimes_;
      progressRewardTheme_ = other.progressRewardTheme_;
      recontinueTheme_ = other.recontinueTheme_;
      requireCoinId_ = other.requireCoinId_;
      requireScoreId_ = other.requireScoreId_;
      rewardIcon_ = other.rewardIcon_;
      treasureTheme_ = other.treasureTheme_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTreasure Clone() {
      return new EventTreasure(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 适用棋盘
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "bonusToken" field.</summary>
    public const int BonusTokenFieldNumber = 28;
    private int bonusToken_;
    /// <summary>
    /// 特殊物品id
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BonusToken {
      get { return bonusToken_; }
      set {
        bonusToken_ = value;
      }
    }

    /// <summary>Field number for the "buyTheme" field.</summary>
    public const int BuyThemeFieldNumber = 3;
    private int buyTheme_;
    /// <summary>
    /// 购买钥匙
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyTheme {
      get { return buyTheme_; }
      set {
        buyTheme_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 4;
    private int cost_;
    /// <summary>
    /// 消耗内容
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "cycleLevelReward" field.</summary>
    public const int CycleLevelRewardFieldNumber = 5;
    private string cycleLevelReward_ = "";
    /// <summary>
    /// 循环奖励
    /// （被gradeId替代）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CycleLevelReward {
      get { return cycleLevelReward_; }
      set {
        cycleLevelReward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cycleLevelScore" field.</summary>
    public const int CycleLevelScoreFieldNumber = 6;
    private int cycleLevelScore_;
    /// <summary>
    /// 循环进度积分
    /// （被gradeId替代）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CycleLevelScore {
      get { return cycleLevelScore_; }
      set {
        cycleLevelScore_ = value;
      }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 7;
    private int eventTheme_;
    /// <summary>
    /// 开启弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "expirePopup" field.</summary>
    public const int ExpirePopupFieldNumber = 8;
    private static readonly pbc::MapField<int, string>.Codec _map_expirePopup_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 66);
    private readonly pbc::MapField<int, string> expirePopup_ = new pbc::MapField<int, string>();
    /// <summary>
    /// 活动结束时
    /// 通过弹板的方式一次性删除棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> ExpirePopup {
      get { return expirePopup_; }
    }

    /// <summary>Field number for the "gradeId" field.</summary>
    public const int GradeIdFieldNumber = 24;
    private int gradeId_;
    /// <summary>
    /// 关卡信息
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （EventTreasureGroupDetail.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeId {
      get { return gradeId_; }
      set {
        gradeId_ = value;
      }
    }

    /// <summary>Field number for the "helpKeyTheme" field.</summary>
    public const int HelpKeyThemeFieldNumber = 9;
    private int helpKeyTheme_;
    /// <summary>
    /// 玩法弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpKeyTheme {
      get { return helpKeyTheme_; }
      set {
        helpKeyTheme_ = value;
      }
    }

    /// <summary>Field number for the "helpPlayTheme" field.</summary>
    public const int HelpPlayThemeFieldNumber = 10;
    private int helpPlayTheme_;
    /// <summary>
    /// 玩法弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpPlayTheme {
      get { return helpPlayTheme_; }
      set {
        helpPlayTheme_ = value;
      }
    }

    /// <summary>Field number for the "includeGrpId" field.</summary>
    public const int IncludeGrpIdFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_includeGrpId_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> includeGrpId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 关卡组
    /// （被gradeId替代）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IncludeGrpId {
      get { return includeGrpId_; }
    }

    /// <summary>Field number for the "keyNum" field.</summary>
    public const int KeyNumFieldNumber = 12;
    private int keyNum_;
    /// <summary>
    /// 初始值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeyNum {
      get { return keyNum_; }
      set {
        keyNum_ = value;
      }
    }

    /// <summary>Field number for the "levelReward" field.</summary>
    public const int LevelRewardFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _repeated_levelReward_codec
        = pb::FieldCodec.ForString(106);
    private readonly pbc::RepeatedField<string> levelReward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 奖励
    /// （被gradeId替代）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LevelReward {
      get { return levelReward_; }
    }

    /// <summary>Field number for the "levelRewardTheme" field.</summary>
    public const int LevelRewardThemeFieldNumber = 25;
    private int levelRewardTheme_;
    /// <summary>
    /// LevelReward
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelRewardTheme {
      get { return levelRewardTheme_; }
      set {
        levelRewardTheme_ = value;
      }
    }

    /// <summary>Field number for the "levelScore" field.</summary>
    public const int LevelScoreFieldNumber = 14;
    private static readonly pb::FieldCodec<int> _repeated_levelScore_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> levelScore_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 进度积分
    /// （被gradeId替代）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LevelScore {
      get { return levelScore_; }
    }

    /// <summary>Field number for the "loadingTheme" field.</summary>
    public const int LoadingThemeFieldNumber = 26;
    private int loadingTheme_;
    /// <summary>
    /// Loading
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoadingTheme {
      get { return loadingTheme_; }
      set {
        loadingTheme_ = value;
      }
    }

    /// <summary>Field number for the "milestoneRewardIcon" field.</summary>
    public const int MilestoneRewardIconFieldNumber = 15;
    private string milestoneRewardIcon_ = "";
    /// <summary>
    /// 里程碑图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MilestoneRewardIcon {
      get { return milestoneRewardIcon_; }
      set {
        milestoneRewardIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 16;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "newRoundTheme" field.</summary>
    public const int NewRoundThemeFieldNumber = 29;
    private int newRoundTheme_;
    /// <summary>
    /// 新一轮弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewRoundTheme {
      get { return newRoundTheme_; }
      set {
        newRoundTheme_ = value;
      }
    }

    /// <summary>Field number for the "packGrpId" field.</summary>
    public const int PackGrpIdFieldNumber = 17;
    private int packGrpId_;
    /// <summary>
    /// 内购商品ID
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （IAPPack.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackGrpId {
      get { return packGrpId_; }
      set {
        packGrpId_ = value;
      }
    }

    /// <summary>Field number for the "packTimes" field.</summary>
    public const int PackTimesFieldNumber = 21;
    private int packTimes_;
    /// <summary>
    /// 购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackTimes {
      get { return packTimes_; }
      set {
        packTimes_ = value;
      }
    }

    /// <summary>Field number for the "progressRewardTheme" field.</summary>
    public const int ProgressRewardThemeFieldNumber = 27;
    private int progressRewardTheme_;
    /// <summary>
    /// ProgressReward
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProgressRewardTheme {
      get { return progressRewardTheme_; }
      set {
        progressRewardTheme_ = value;
      }
    }

    /// <summary>Field number for the "recontinueTheme" field.</summary>
    public const int RecontinueThemeFieldNumber = 18;
    private int recontinueTheme_;
    /// <summary>
    /// 回收清算
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecontinueTheme {
      get { return recontinueTheme_; }
      set {
        recontinueTheme_ = value;
      }
    }

    /// <summary>Field number for the "requireCoinId" field.</summary>
    public const int RequireCoinIdFieldNumber = 19;
    private int requireCoinId_;
    /// <summary>
    /// 开宝箱所需货币ID
    /// （ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireCoinId {
      get { return requireCoinId_; }
      set {
        requireCoinId_ = value;
      }
    }

    /// <summary>Field number for the "requireScoreId" field.</summary>
    public const int RequireScoreIdFieldNumber = 22;
    private int requireScoreId_;
    /// <summary>
    /// 积分ID
    /// （ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireScoreId {
      get { return requireScoreId_; }
      set {
        requireScoreId_ = value;
      }
    }

    /// <summary>Field number for the "rewardIcon" field.</summary>
    public const int RewardIconFieldNumber = 20;
    private string rewardIcon_ = "";
    /// <summary>
    /// 宝藏图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RewardIcon {
      get { return rewardIcon_; }
      set {
        rewardIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "treasureTheme" field.</summary>
    public const int TreasureThemeFieldNumber = 23;
    private int treasureTheme_;
    /// <summary>
    /// 寻宝活动界面
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TreasureTheme {
      get { return treasureTheme_; }
      set {
        treasureTheme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTreasure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTreasure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (BonusToken != other.BonusToken) return false;
      if (BuyTheme != other.BuyTheme) return false;
      if (Cost != other.Cost) return false;
      if (CycleLevelReward != other.CycleLevelReward) return false;
      if (CycleLevelScore != other.CycleLevelScore) return false;
      if (EventTheme != other.EventTheme) return false;
      if (!ExpirePopup.Equals(other.ExpirePopup)) return false;
      if (GradeId != other.GradeId) return false;
      if (HelpKeyTheme != other.HelpKeyTheme) return false;
      if (HelpPlayTheme != other.HelpPlayTheme) return false;
      if(!includeGrpId_.Equals(other.includeGrpId_)) return false;
      if (KeyNum != other.KeyNum) return false;
      if(!levelReward_.Equals(other.levelReward_)) return false;
      if (LevelRewardTheme != other.LevelRewardTheme) return false;
      if(!levelScore_.Equals(other.levelScore_)) return false;
      if (LoadingTheme != other.LoadingTheme) return false;
      if (MilestoneRewardIcon != other.MilestoneRewardIcon) return false;
      if (Name != other.Name) return false;
      if (NewRoundTheme != other.NewRoundTheme) return false;
      if (PackGrpId != other.PackGrpId) return false;
      if (PackTimes != other.PackTimes) return false;
      if (ProgressRewardTheme != other.ProgressRewardTheme) return false;
      if (RecontinueTheme != other.RecontinueTheme) return false;
      if (RequireCoinId != other.RequireCoinId) return false;
      if (RequireScoreId != other.RequireScoreId) return false;
      if (RewardIcon != other.RewardIcon) return false;
      if (TreasureTheme != other.TreasureTheme) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (BonusToken != 0) hash ^= BonusToken.GetHashCode();
      if (BuyTheme != 0) hash ^= BuyTheme.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (CycleLevelReward.Length != 0) hash ^= CycleLevelReward.GetHashCode();
      if (CycleLevelScore != 0) hash ^= CycleLevelScore.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      hash ^= ExpirePopup.GetHashCode();
      if (GradeId != 0) hash ^= GradeId.GetHashCode();
      if (HelpKeyTheme != 0) hash ^= HelpKeyTheme.GetHashCode();
      if (HelpPlayTheme != 0) hash ^= HelpPlayTheme.GetHashCode();
      hash ^= includeGrpId_.GetHashCode();
      if (KeyNum != 0) hash ^= KeyNum.GetHashCode();
      hash ^= levelReward_.GetHashCode();
      if (LevelRewardTheme != 0) hash ^= LevelRewardTheme.GetHashCode();
      hash ^= levelScore_.GetHashCode();
      if (LoadingTheme != 0) hash ^= LoadingTheme.GetHashCode();
      if (MilestoneRewardIcon.Length != 0) hash ^= MilestoneRewardIcon.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NewRoundTheme != 0) hash ^= NewRoundTheme.GetHashCode();
      if (PackGrpId != 0) hash ^= PackGrpId.GetHashCode();
      if (PackTimes != 0) hash ^= PackTimes.GetHashCode();
      if (ProgressRewardTheme != 0) hash ^= ProgressRewardTheme.GetHashCode();
      if (RecontinueTheme != 0) hash ^= RecontinueTheme.GetHashCode();
      if (RequireCoinId != 0) hash ^= RequireCoinId.GetHashCode();
      if (RequireScoreId != 0) hash ^= RequireScoreId.GetHashCode();
      if (RewardIcon.Length != 0) hash ^= RewardIcon.GetHashCode();
      if (TreasureTheme != 0) hash ^= TreasureTheme.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (BuyTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuyTheme);
      }
      if (Cost != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Cost);
      }
      if (CycleLevelReward.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CycleLevelReward);
      }
      if (CycleLevelScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CycleLevelScore);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EventTheme);
      }
      expirePopup_.WriteTo(output, _map_expirePopup_codec);
      if (HelpKeyTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HelpKeyTheme);
      }
      if (HelpPlayTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(HelpPlayTheme);
      }
      includeGrpId_.WriteTo(output, _repeated_includeGrpId_codec);
      if (KeyNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(KeyNum);
      }
      levelReward_.WriteTo(output, _repeated_levelReward_codec);
      levelScore_.WriteTo(output, _repeated_levelScore_codec);
      if (MilestoneRewardIcon.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(MilestoneRewardIcon);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Name);
      }
      if (PackGrpId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(PackGrpId);
      }
      if (RecontinueTheme != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(RecontinueTheme);
      }
      if (RequireCoinId != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(RequireCoinId);
      }
      if (RewardIcon.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(RewardIcon);
      }
      if (PackTimes != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(PackTimes);
      }
      if (RequireScoreId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(RequireScoreId);
      }
      if (TreasureTheme != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(TreasureTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(GradeId);
      }
      if (LevelRewardTheme != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(LevelRewardTheme);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(LoadingTheme);
      }
      if (ProgressRewardTheme != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(ProgressRewardTheme);
      }
      if (BonusToken != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(BonusToken);
      }
      if (NewRoundTheme != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(NewRoundTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (BuyTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuyTheme);
      }
      if (Cost != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Cost);
      }
      if (CycleLevelReward.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CycleLevelReward);
      }
      if (CycleLevelScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CycleLevelScore);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EventTheme);
      }
      expirePopup_.WriteTo(ref output, _map_expirePopup_codec);
      if (HelpKeyTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HelpKeyTheme);
      }
      if (HelpPlayTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(HelpPlayTheme);
      }
      includeGrpId_.WriteTo(ref output, _repeated_includeGrpId_codec);
      if (KeyNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(KeyNum);
      }
      levelReward_.WriteTo(ref output, _repeated_levelReward_codec);
      levelScore_.WriteTo(ref output, _repeated_levelScore_codec);
      if (MilestoneRewardIcon.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(MilestoneRewardIcon);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Name);
      }
      if (PackGrpId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(PackGrpId);
      }
      if (RecontinueTheme != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(RecontinueTheme);
      }
      if (RequireCoinId != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(RequireCoinId);
      }
      if (RewardIcon.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(RewardIcon);
      }
      if (PackTimes != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(PackTimes);
      }
      if (RequireScoreId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(RequireScoreId);
      }
      if (TreasureTheme != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(TreasureTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(GradeId);
      }
      if (LevelRewardTheme != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(LevelRewardTheme);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(LoadingTheme);
      }
      if (ProgressRewardTheme != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(ProgressRewardTheme);
      }
      if (BonusToken != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(BonusToken);
      }
      if (NewRoundTheme != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(NewRoundTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (BonusToken != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BonusToken);
      }
      if (BuyTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyTheme);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (CycleLevelReward.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CycleLevelReward);
      }
      if (CycleLevelScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CycleLevelScore);
      }
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      size += expirePopup_.CalculateSize(_map_expirePopup_codec);
      if (GradeId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GradeId);
      }
      if (HelpKeyTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HelpKeyTheme);
      }
      if (HelpPlayTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HelpPlayTheme);
      }
      size += includeGrpId_.CalculateSize(_repeated_includeGrpId_codec);
      if (KeyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeyNum);
      }
      size += levelReward_.CalculateSize(_repeated_levelReward_codec);
      if (LevelRewardTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LevelRewardTheme);
      }
      size += levelScore_.CalculateSize(_repeated_levelScore_codec);
      if (LoadingTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LoadingTheme);
      }
      if (MilestoneRewardIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MilestoneRewardIcon);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NewRoundTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewRoundTheme);
      }
      if (PackGrpId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PackGrpId);
      }
      if (PackTimes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PackTimes);
      }
      if (ProgressRewardTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProgressRewardTheme);
      }
      if (RecontinueTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RecontinueTheme);
      }
      if (RequireCoinId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequireCoinId);
      }
      if (RequireScoreId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RequireScoreId);
      }
      if (RewardIcon.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RewardIcon);
      }
      if (TreasureTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TreasureTheme);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTreasure other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.BonusToken != 0) {
        BonusToken = other.BonusToken;
      }
      if (other.BuyTheme != 0) {
        BuyTheme = other.BuyTheme;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.CycleLevelReward.Length != 0) {
        CycleLevelReward = other.CycleLevelReward;
      }
      if (other.CycleLevelScore != 0) {
        CycleLevelScore = other.CycleLevelScore;
      }
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      expirePopup_.Add(other.expirePopup_);
      if (other.GradeId != 0) {
        GradeId = other.GradeId;
      }
      if (other.HelpKeyTheme != 0) {
        HelpKeyTheme = other.HelpKeyTheme;
      }
      if (other.HelpPlayTheme != 0) {
        HelpPlayTheme = other.HelpPlayTheme;
      }
      includeGrpId_.Add(other.includeGrpId_);
      if (other.KeyNum != 0) {
        KeyNum = other.KeyNum;
      }
      levelReward_.Add(other.levelReward_);
      if (other.LevelRewardTheme != 0) {
        LevelRewardTheme = other.LevelRewardTheme;
      }
      levelScore_.Add(other.levelScore_);
      if (other.LoadingTheme != 0) {
        LoadingTheme = other.LoadingTheme;
      }
      if (other.MilestoneRewardIcon.Length != 0) {
        MilestoneRewardIcon = other.MilestoneRewardIcon;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NewRoundTheme != 0) {
        NewRoundTheme = other.NewRoundTheme;
      }
      if (other.PackGrpId != 0) {
        PackGrpId = other.PackGrpId;
      }
      if (other.PackTimes != 0) {
        PackTimes = other.PackTimes;
      }
      if (other.ProgressRewardTheme != 0) {
        ProgressRewardTheme = other.ProgressRewardTheme;
      }
      if (other.RecontinueTheme != 0) {
        RecontinueTheme = other.RecontinueTheme;
      }
      if (other.RequireCoinId != 0) {
        RequireCoinId = other.RequireCoinId;
      }
      if (other.RequireScoreId != 0) {
        RequireScoreId = other.RequireScoreId;
      }
      if (other.RewardIcon.Length != 0) {
        RewardIcon = other.RewardIcon;
      }
      if (other.TreasureTheme != 0) {
        TreasureTheme = other.TreasureTheme;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            BuyTheme = input.ReadInt32();
            break;
          }
          case 32: {
            Cost = input.ReadInt32();
            break;
          }
          case 42: {
            CycleLevelReward = input.ReadString();
            break;
          }
          case 48: {
            CycleLevelScore = input.ReadInt32();
            break;
          }
          case 56: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 66: {
            expirePopup_.AddEntriesFrom(input, _map_expirePopup_codec);
            break;
          }
          case 72: {
            HelpKeyTheme = input.ReadInt32();
            break;
          }
          case 80: {
            HelpPlayTheme = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            includeGrpId_.AddEntriesFrom(input, _repeated_includeGrpId_codec);
            break;
          }
          case 96: {
            KeyNum = input.ReadInt32();
            break;
          }
          case 106: {
            levelReward_.AddEntriesFrom(input, _repeated_levelReward_codec);
            break;
          }
          case 114:
          case 112: {
            levelScore_.AddEntriesFrom(input, _repeated_levelScore_codec);
            break;
          }
          case 122: {
            MilestoneRewardIcon = input.ReadString();
            break;
          }
          case 130: {
            Name = input.ReadString();
            break;
          }
          case 136: {
            PackGrpId = input.ReadInt32();
            break;
          }
          case 144: {
            RecontinueTheme = input.ReadInt32();
            break;
          }
          case 152: {
            RequireCoinId = input.ReadInt32();
            break;
          }
          case 162: {
            RewardIcon = input.ReadString();
            break;
          }
          case 168: {
            PackTimes = input.ReadInt32();
            break;
          }
          case 176: {
            RequireScoreId = input.ReadInt32();
            break;
          }
          case 184: {
            TreasureTheme = input.ReadInt32();
            break;
          }
          case 192: {
            GradeId = input.ReadInt32();
            break;
          }
          case 200: {
            LevelRewardTheme = input.ReadInt32();
            break;
          }
          case 208: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 216: {
            ProgressRewardTheme = input.ReadInt32();
            break;
          }
          case 224: {
            BonusToken = input.ReadInt32();
            break;
          }
          case 232: {
            NewRoundTheme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            BuyTheme = input.ReadInt32();
            break;
          }
          case 32: {
            Cost = input.ReadInt32();
            break;
          }
          case 42: {
            CycleLevelReward = input.ReadString();
            break;
          }
          case 48: {
            CycleLevelScore = input.ReadInt32();
            break;
          }
          case 56: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 66: {
            expirePopup_.AddEntriesFrom(ref input, _map_expirePopup_codec);
            break;
          }
          case 72: {
            HelpKeyTheme = input.ReadInt32();
            break;
          }
          case 80: {
            HelpPlayTheme = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            includeGrpId_.AddEntriesFrom(ref input, _repeated_includeGrpId_codec);
            break;
          }
          case 96: {
            KeyNum = input.ReadInt32();
            break;
          }
          case 106: {
            levelReward_.AddEntriesFrom(ref input, _repeated_levelReward_codec);
            break;
          }
          case 114:
          case 112: {
            levelScore_.AddEntriesFrom(ref input, _repeated_levelScore_codec);
            break;
          }
          case 122: {
            MilestoneRewardIcon = input.ReadString();
            break;
          }
          case 130: {
            Name = input.ReadString();
            break;
          }
          case 136: {
            PackGrpId = input.ReadInt32();
            break;
          }
          case 144: {
            RecontinueTheme = input.ReadInt32();
            break;
          }
          case 152: {
            RequireCoinId = input.ReadInt32();
            break;
          }
          case 162: {
            RewardIcon = input.ReadString();
            break;
          }
          case 168: {
            PackTimes = input.ReadInt32();
            break;
          }
          case 176: {
            RequireScoreId = input.ReadInt32();
            break;
          }
          case 184: {
            TreasureTheme = input.ReadInt32();
            break;
          }
          case 192: {
            GradeId = input.ReadInt32();
            break;
          }
          case 200: {
            LevelRewardTheme = input.ReadInt32();
            break;
          }
          case 208: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 216: {
            ProgressRewardTheme = input.ReadInt32();
            break;
          }
          case 224: {
            BonusToken = input.ReadInt32();
            break;
          }
          case 232: {
            NewRoundTheme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventTreasureMapABValue : pb::IMessage<EventTreasureMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTreasureMapABValue> _parser = new pb::MessageParser<EventTreasureMapABValue>(() => new EventTreasureMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTreasureMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventTreasureConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTreasureMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTreasureMapABValue(EventTreasureMapABValue other) : this() {
      eventTreasureMap_ = other.eventTreasureMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTreasureMapABValue Clone() {
      return new EventTreasureMapABValue(this);
    }

    /// <summary>Field number for the "EventTreasureMap" field.</summary>
    public const int EventTreasureMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventTreasure>.Codec _map_eventTreasureMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventTreasure>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTreasure.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventTreasure> eventTreasureMap_ = new pbc::MapField<int, global::fat.rawdata.EventTreasure>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventTreasure> EventTreasureMap {
      get { return eventTreasureMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTreasureMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTreasureMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventTreasureMap.Equals(other.EventTreasureMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventTreasureMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventTreasureMap_.WriteTo(output, _map_eventTreasureMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventTreasureMap_.WriteTo(ref output, _map_eventTreasureMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventTreasureMap_.CalculateSize(_map_eventTreasureMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTreasureMapABValue other) {
      if (other == null) {
        return;
      }
      eventTreasureMap_.Add(other.eventTreasureMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventTreasureMap_.AddEntriesFrom(input, _map_eventTreasureMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventTreasureMap_.AddEntriesFrom(ref input, _map_eventTreasureMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventTreasureConf : pb::IMessage<EventTreasureConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTreasureConf> _parser = new pb::MessageParser<EventTreasureConf>(() => new EventTreasureConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTreasureConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventTreasureConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTreasureConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTreasureConf(EventTreasureConf other) : this() {
      eventTreasureMap_ = other.eventTreasureMap_.Clone();
      eventTreasureMapAB_ = other.eventTreasureMapAB_.Clone();
      eventTreasureMapABPatch_ = other.eventTreasureMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTreasureConf Clone() {
      return new EventTreasureConf(this);
    }

    /// <summary>Field number for the "EventTreasureMap" field.</summary>
    public const int EventTreasureMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventTreasure>.Codec _map_eventTreasureMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventTreasure>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTreasure.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventTreasure> eventTreasureMap_ = new pbc::MapField<int, global::fat.rawdata.EventTreasure>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventTreasure> EventTreasureMap {
      get { return eventTreasureMap_; }
    }

    /// <summary>Field number for the "EventTreasureMapAB" field.</summary>
    public const int EventTreasureMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventTreasureMapABValue>.Codec _map_eventTreasureMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventTreasureMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTreasureMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventTreasureMapABValue> eventTreasureMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventTreasureMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventTreasureMapABValue> EventTreasureMapAB {
      get { return eventTreasureMapAB_; }
    }

    /// <summary>Field number for the "EventTreasureMapABPatch" field.</summary>
    public const int EventTreasureMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventTreasureMapABValue>.Codec _map_eventTreasureMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventTreasureMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventTreasureMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventTreasureMapABValue> eventTreasureMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventTreasureMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventTreasureMapABValue> EventTreasureMapABPatch {
      get { return eventTreasureMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTreasureConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTreasureConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventTreasureMap.Equals(other.EventTreasureMap)) return false;
      if (!EventTreasureMapAB.Equals(other.EventTreasureMapAB)) return false;
      if (!EventTreasureMapABPatch.Equals(other.EventTreasureMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventTreasureMap.GetHashCode();
      hash ^= EventTreasureMapAB.GetHashCode();
      hash ^= EventTreasureMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventTreasureMap_.WriteTo(output, _map_eventTreasureMap_codec);
      eventTreasureMapAB_.WriteTo(output, _map_eventTreasureMapAB_codec);
      eventTreasureMapABPatch_.WriteTo(output, _map_eventTreasureMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventTreasureMap_.WriteTo(ref output, _map_eventTreasureMap_codec);
      eventTreasureMapAB_.WriteTo(ref output, _map_eventTreasureMapAB_codec);
      eventTreasureMapABPatch_.WriteTo(ref output, _map_eventTreasureMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventTreasureMap_.CalculateSize(_map_eventTreasureMap_codec);
      size += eventTreasureMapAB_.CalculateSize(_map_eventTreasureMapAB_codec);
      size += eventTreasureMapABPatch_.CalculateSize(_map_eventTreasureMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTreasureConf other) {
      if (other == null) {
        return;
      }
      eventTreasureMap_.Add(other.eventTreasureMap_);
      eventTreasureMapAB_.Add(other.eventTreasureMapAB_);
      eventTreasureMapABPatch_.Add(other.eventTreasureMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventTreasureMap_.AddEntriesFrom(input, _map_eventTreasureMap_codec);
            break;
          }
          case 18: {
            eventTreasureMapAB_.AddEntriesFrom(input, _map_eventTreasureMapAB_codec);
            break;
          }
          case 26: {
            eventTreasureMapABPatch_.AddEntriesFrom(input, _map_eventTreasureMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventTreasureMap_.AddEntriesFrom(ref input, _map_eventTreasureMap_codec);
            break;
          }
          case 18: {
            eventTreasureMapAB_.AddEntriesFrom(ref input, _map_eventTreasureMapAB_codec);
            break;
          }
          case 26: {
            eventTreasureMapABPatch_.AddEntriesFrom(ref input, _map_eventTreasureMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
