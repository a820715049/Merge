// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventPachinkoConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventPachinkoConf.proto</summary>
  public static partial class EventPachinkoConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventPachinkoConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventPachinkoConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9yYXdkYXRhL0V2ZW50UGFjaGlua29Db25mLnByb3RvEgdyYXdkYXRhIrcD",
            "Cg1FdmVudFBhY2hpbmtvEgoKAmlkGAEgASgFEg8KB2JvYXJkSWQYAiABKAUS",
            "DAoEY29zdBgDIAEoBRIQCghlbmVyZ3lJZBgPIAEoBRI8CgtleHBpcmVQb3B1",
            "cBgEIAMoCzInLnJhd2RhdGEuRXZlbnRQYWNoaW5rby5FeHBpcmVQb3B1cEVu",
            "dHJ5EhQKDGZyZWVUb2tlbk51bRgFIAEoBRIPCgdncmFkZUlkGAYgASgFEhUK",
            "DWhlbHBQbGF5VGhlbWUYByABKAUSFAoMbG9hZGluZ1RoZW1lGBAgASgFEgwK",
            "BG5hbWUYCCABKAkSFQoNcGFjaGlua29UaGVtZRgJIAEoBRIXCg9yZWNvbnRp",
            "bnVlVGhlbWUYCiABKAUSFgoOcmVxdWlyZVNjb3JlSWQYCyABKAUSFAoMcmVz",
            "dGFydFRoZW1lGAwgASgFEhIKCnN0YXJ0VGhlbWUYDSABKAUSEgoKdGlwUG9w",
            "QXV0bxgRIAEoCBIPCgd0b2tlbklkGA4gASgFGjIKEEV4cGlyZVBvcHVwRW50",
            "cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgJOgI4ASK8AQoXRXZlbnRQ",
            "YWNoaW5rb01hcEFCVmFsdWUSUAoQRXZlbnRQYWNoaW5rb01hcBgBIAMoCzI2",
            "LnJhd2RhdGEuRXZlbnRQYWNoaW5rb01hcEFCVmFsdWUuRXZlbnRQYWNoaW5r",
            "b01hcEVudHJ5Gk8KFUV2ZW50UGFjaGlua29NYXBFbnRyeRILCgNrZXkYASAB",
            "KAUSJQoFdmFsdWUYAiABKAsyFi5yYXdkYXRhLkV2ZW50UGFjaGlua286AjgB",
            "IpkEChFFdmVudFBhY2hpbmtvQ29uZhJKChBFdmVudFBhY2hpbmtvTWFwGAEg",
            "AygLMjAucmF3ZGF0YS5FdmVudFBhY2hpbmtvQ29uZi5FdmVudFBhY2hpbmtv",
            "TWFwRW50cnkSTgoSRXZlbnRQYWNoaW5rb01hcEFCGAIgAygLMjIucmF3ZGF0",
            "YS5FdmVudFBhY2hpbmtvQ29uZi5FdmVudFBhY2hpbmtvTWFwQUJFbnRyeRJY",
            "ChdFdmVudFBhY2hpbmtvTWFwQUJQYXRjaBgDIAMoCzI3LnJhd2RhdGEuRXZl",
            "bnRQYWNoaW5rb0NvbmYuRXZlbnRQYWNoaW5rb01hcEFCUGF0Y2hFbnRyeRpP",
            "ChVFdmVudFBhY2hpbmtvTWFwRW50cnkSCwoDa2V5GAEgASgFEiUKBXZhbHVl",
            "GAIgASgLMhYucmF3ZGF0YS5FdmVudFBhY2hpbmtvOgI4ARpbChdFdmVudFBh",
            "Y2hpbmtvTWFwQUJFbnRyeRILCgNrZXkYASABKAkSLwoFdmFsdWUYAiABKAsy",
            "IC5yYXdkYXRhLkV2ZW50UGFjaGlua29NYXBBQlZhbHVlOgI4ARpgChxFdmVu",
            "dFBhY2hpbmtvTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIvCgV2YWx1",
            "ZRgCIAEoCzIgLnJhd2RhdGEuRXZlbnRQYWNoaW5rb01hcEFCVmFsdWU6AjgB",
            "Qj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3",
            "ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventPachinko), global::fat.rawdata.EventPachinko.Parser, new[]{ "Id", "BoardId", "Cost", "EnergyId", "ExpirePopup", "FreeTokenNum", "GradeId", "HelpPlayTheme", "LoadingTheme", "Name", "PachinkoTheme", "RecontinueTheme", "RequireScoreId", "RestartTheme", "StartTheme", "TipPopAuto", "TokenId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventPachinkoMapABValue), global::fat.rawdata.EventPachinkoMapABValue.Parser, new[]{ "EventPachinkoMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventPachinkoConf), global::fat.rawdata.EventPachinkoConf.Parser, new[]{ "EventPachinkoMap", "EventPachinkoMapAB", "EventPachinkoMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventPachinko",table="EventPachinkoMap",table_wrapper="EventPachinkoConf",map="true",map_key_type="int32",data="EventPachinkoConf")
  /// annotation@ab(table_ab="EventPachinkoMapAB",table_ab_patch="EventPachinkoMapABPatch",table_ab_value="EventPachinkoMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventPachinko(id="id")
  /// </summary>
  public sealed partial class EventPachinko : pb::IMessage<EventPachinko>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventPachinko> _parser = new pb::MessageParser<EventPachinko>(() => new EventPachinko());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventPachinko> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventPachinkoConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinko() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinko(EventPachinko other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      cost_ = other.cost_;
      energyId_ = other.energyId_;
      expirePopup_ = other.expirePopup_.Clone();
      freeTokenNum_ = other.freeTokenNum_;
      gradeId_ = other.gradeId_;
      helpPlayTheme_ = other.helpPlayTheme_;
      loadingTheme_ = other.loadingTheme_;
      name_ = other.name_;
      pachinkoTheme_ = other.pachinkoTheme_;
      recontinueTheme_ = other.recontinueTheme_;
      requireScoreId_ = other.requireScoreId_;
      restartTheme_ = other.restartTheme_;
      startTheme_ = other.startTheme_;
      tipPopAuto_ = other.tipPopAuto_;
      tokenId_ = other.tokenId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinko Clone() {
      return new EventPachinko(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 适用棋盘
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 3;
    private int cost_;
    /// <summary>
    /// 消耗内容
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "energyId" field.</summary>
    public const int EnergyIdFieldNumber = 15;
    private int energyId_;
    /// <summary>
    /// 能量ID
    /// （ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnergyId {
      get { return energyId_; }
      set {
        energyId_ = value;
      }
    }

    /// <summary>Field number for the "expirePopup" field.</summary>
    public const int ExpirePopupFieldNumber = 4;
    private static readonly pbc::MapField<int, string>.Codec _map_expirePopup_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<int, string> expirePopup_ = new pbc::MapField<int, string>();
    /// <summary>
    /// 活动结束时
    /// 通过弹板的方式一次性删除棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> ExpirePopup {
      get { return expirePopup_; }
    }

    /// <summary>Field number for the "freeTokenNum" field.</summary>
    public const int FreeTokenNumFieldNumber = 5;
    private int freeTokenNum_;
    /// <summary>
    /// 初始弹珠数量
    /// （为空=0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTokenNum {
      get { return freeTokenNum_; }
      set {
        freeTokenNum_ = value;
      }
    }

    /// <summary>Field number for the "gradeId" field.</summary>
    public const int GradeIdFieldNumber = 6;
    private int gradeId_;
    /// <summary>
    /// 关卡信息
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （EventpachinkoDetail.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeId {
      get { return gradeId_; }
      set {
        gradeId_ = value;
      }
    }

    /// <summary>Field number for the "helpPlayTheme" field.</summary>
    public const int HelpPlayThemeFieldNumber = 7;
    private int helpPlayTheme_;
    /// <summary>
    /// 玩法弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpPlayTheme {
      get { return helpPlayTheme_; }
      set {
        helpPlayTheme_ = value;
      }
    }

    /// <summary>Field number for the "loadingTheme" field.</summary>
    public const int LoadingThemeFieldNumber = 16;
    private int loadingTheme_;
    /// <summary>
    /// loading界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoadingTheme {
      get { return loadingTheme_; }
      set {
        loadingTheme_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 8;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pachinkoTheme" field.</summary>
    public const int PachinkoThemeFieldNumber = 9;
    private int pachinkoTheme_;
    /// <summary>
    /// 活动主界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PachinkoTheme {
      get { return pachinkoTheme_; }
      set {
        pachinkoTheme_ = value;
      }
    }

    /// <summary>Field number for the "recontinueTheme" field.</summary>
    public const int RecontinueThemeFieldNumber = 10;
    private int recontinueTheme_;
    /// <summary>
    /// 回收清算
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecontinueTheme {
      get { return recontinueTheme_; }
      set {
        recontinueTheme_ = value;
      }
    }

    /// <summary>Field number for the "requireScoreId" field.</summary>
    public const int RequireScoreIdFieldNumber = 11;
    private int requireScoreId_;
    /// <summary>
    /// 积分ID
    /// （ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireScoreId {
      get { return requireScoreId_; }
      set {
        requireScoreId_ = value;
      }
    }

    /// <summary>Field number for the "restartTheme" field.</summary>
    public const int RestartThemeFieldNumber = 12;
    private int restartTheme_;
    /// <summary>
    /// 新一轮弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RestartTheme {
      get { return restartTheme_; }
      set {
        restartTheme_ = value;
      }
    }

    /// <summary>Field number for the "startTheme" field.</summary>
    public const int StartThemeFieldNumber = 13;
    private int startTheme_;
    /// <summary>
    /// 开启弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTheme {
      get { return startTheme_; }
      set {
        startTheme_ = value;
      }
    }

    /// <summary>Field number for the "tipPopAuto" field.</summary>
    public const int TipPopAutoFieldNumber = 17;
    private bool tipPopAuto_;
    /// <summary>
    /// 最后一档里程碑tip
    /// 自动展开
    /// 为空=FALSE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TipPopAuto {
      get { return tipPopAuto_; }
      set {
        tipPopAuto_ = value;
      }
    }

    /// <summary>Field number for the "tokenId" field.</summary>
    public const int TokenIdFieldNumber = 14;
    private int tokenId_;
    /// <summary>
    /// 弹珠ID
    /// （ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TokenId {
      get { return tokenId_; }
      set {
        tokenId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventPachinko);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventPachinko other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (Cost != other.Cost) return false;
      if (EnergyId != other.EnergyId) return false;
      if (!ExpirePopup.Equals(other.ExpirePopup)) return false;
      if (FreeTokenNum != other.FreeTokenNum) return false;
      if (GradeId != other.GradeId) return false;
      if (HelpPlayTheme != other.HelpPlayTheme) return false;
      if (LoadingTheme != other.LoadingTheme) return false;
      if (Name != other.Name) return false;
      if (PachinkoTheme != other.PachinkoTheme) return false;
      if (RecontinueTheme != other.RecontinueTheme) return false;
      if (RequireScoreId != other.RequireScoreId) return false;
      if (RestartTheme != other.RestartTheme) return false;
      if (StartTheme != other.StartTheme) return false;
      if (TipPopAuto != other.TipPopAuto) return false;
      if (TokenId != other.TokenId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (EnergyId != 0) hash ^= EnergyId.GetHashCode();
      hash ^= ExpirePopup.GetHashCode();
      if (FreeTokenNum != 0) hash ^= FreeTokenNum.GetHashCode();
      if (GradeId != 0) hash ^= GradeId.GetHashCode();
      if (HelpPlayTheme != 0) hash ^= HelpPlayTheme.GetHashCode();
      if (LoadingTheme != 0) hash ^= LoadingTheme.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PachinkoTheme != 0) hash ^= PachinkoTheme.GetHashCode();
      if (RecontinueTheme != 0) hash ^= RecontinueTheme.GetHashCode();
      if (RequireScoreId != 0) hash ^= RequireScoreId.GetHashCode();
      if (RestartTheme != 0) hash ^= RestartTheme.GetHashCode();
      if (StartTheme != 0) hash ^= StartTheme.GetHashCode();
      if (TipPopAuto != false) hash ^= TipPopAuto.GetHashCode();
      if (TokenId != 0) hash ^= TokenId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (Cost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cost);
      }
      expirePopup_.WriteTo(output, _map_expirePopup_codec);
      if (FreeTokenNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeTokenNum);
      }
      if (GradeId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GradeId);
      }
      if (HelpPlayTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HelpPlayTheme);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (PachinkoTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PachinkoTheme);
      }
      if (RecontinueTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RecontinueTheme);
      }
      if (RequireScoreId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RequireScoreId);
      }
      if (RestartTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RestartTheme);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(StartTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(TokenId);
      }
      if (EnergyId != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(EnergyId);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(LoadingTheme);
      }
      if (TipPopAuto != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(TipPopAuto);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (Cost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cost);
      }
      expirePopup_.WriteTo(ref output, _map_expirePopup_codec);
      if (FreeTokenNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeTokenNum);
      }
      if (GradeId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GradeId);
      }
      if (HelpPlayTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HelpPlayTheme);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (PachinkoTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PachinkoTheme);
      }
      if (RecontinueTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RecontinueTheme);
      }
      if (RequireScoreId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RequireScoreId);
      }
      if (RestartTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RestartTheme);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(StartTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(TokenId);
      }
      if (EnergyId != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(EnergyId);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(LoadingTheme);
      }
      if (TipPopAuto != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(TipPopAuto);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (EnergyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnergyId);
      }
      size += expirePopup_.CalculateSize(_map_expirePopup_codec);
      if (FreeTokenNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTokenNum);
      }
      if (GradeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeId);
      }
      if (HelpPlayTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HelpPlayTheme);
      }
      if (LoadingTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LoadingTheme);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PachinkoTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PachinkoTheme);
      }
      if (RecontinueTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecontinueTheme);
      }
      if (RequireScoreId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequireScoreId);
      }
      if (RestartTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RestartTheme);
      }
      if (StartTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTheme);
      }
      if (TipPopAuto != false) {
        size += 2 + 1;
      }
      if (TokenId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TokenId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventPachinko other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.EnergyId != 0) {
        EnergyId = other.EnergyId;
      }
      expirePopup_.Add(other.expirePopup_);
      if (other.FreeTokenNum != 0) {
        FreeTokenNum = other.FreeTokenNum;
      }
      if (other.GradeId != 0) {
        GradeId = other.GradeId;
      }
      if (other.HelpPlayTheme != 0) {
        HelpPlayTheme = other.HelpPlayTheme;
      }
      if (other.LoadingTheme != 0) {
        LoadingTheme = other.LoadingTheme;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PachinkoTheme != 0) {
        PachinkoTheme = other.PachinkoTheme;
      }
      if (other.RecontinueTheme != 0) {
        RecontinueTheme = other.RecontinueTheme;
      }
      if (other.RequireScoreId != 0) {
        RequireScoreId = other.RequireScoreId;
      }
      if (other.RestartTheme != 0) {
        RestartTheme = other.RestartTheme;
      }
      if (other.StartTheme != 0) {
        StartTheme = other.StartTheme;
      }
      if (other.TipPopAuto != false) {
        TipPopAuto = other.TipPopAuto;
      }
      if (other.TokenId != 0) {
        TokenId = other.TokenId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            Cost = input.ReadInt32();
            break;
          }
          case 34: {
            expirePopup_.AddEntriesFrom(input, _map_expirePopup_codec);
            break;
          }
          case 40: {
            FreeTokenNum = input.ReadInt32();
            break;
          }
          case 48: {
            GradeId = input.ReadInt32();
            break;
          }
          case 56: {
            HelpPlayTheme = input.ReadInt32();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 72: {
            PachinkoTheme = input.ReadInt32();
            break;
          }
          case 80: {
            RecontinueTheme = input.ReadInt32();
            break;
          }
          case 88: {
            RequireScoreId = input.ReadInt32();
            break;
          }
          case 96: {
            RestartTheme = input.ReadInt32();
            break;
          }
          case 104: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 112: {
            TokenId = input.ReadInt32();
            break;
          }
          case 120: {
            EnergyId = input.ReadInt32();
            break;
          }
          case 128: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 136: {
            TipPopAuto = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            Cost = input.ReadInt32();
            break;
          }
          case 34: {
            expirePopup_.AddEntriesFrom(ref input, _map_expirePopup_codec);
            break;
          }
          case 40: {
            FreeTokenNum = input.ReadInt32();
            break;
          }
          case 48: {
            GradeId = input.ReadInt32();
            break;
          }
          case 56: {
            HelpPlayTheme = input.ReadInt32();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 72: {
            PachinkoTheme = input.ReadInt32();
            break;
          }
          case 80: {
            RecontinueTheme = input.ReadInt32();
            break;
          }
          case 88: {
            RequireScoreId = input.ReadInt32();
            break;
          }
          case 96: {
            RestartTheme = input.ReadInt32();
            break;
          }
          case 104: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 112: {
            TokenId = input.ReadInt32();
            break;
          }
          case 120: {
            EnergyId = input.ReadInt32();
            break;
          }
          case 128: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 136: {
            TipPopAuto = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventPachinkoMapABValue : pb::IMessage<EventPachinkoMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventPachinkoMapABValue> _parser = new pb::MessageParser<EventPachinkoMapABValue>(() => new EventPachinkoMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventPachinkoMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventPachinkoConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoMapABValue(EventPachinkoMapABValue other) : this() {
      eventPachinkoMap_ = other.eventPachinkoMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoMapABValue Clone() {
      return new EventPachinkoMapABValue(this);
    }

    /// <summary>Field number for the "EventPachinkoMap" field.</summary>
    public const int EventPachinkoMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventPachinko>.Codec _map_eventPachinkoMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventPachinko>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPachinko.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventPachinko> eventPachinkoMap_ = new pbc::MapField<int, global::fat.rawdata.EventPachinko>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventPachinko> EventPachinkoMap {
      get { return eventPachinkoMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventPachinkoMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventPachinkoMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventPachinkoMap.Equals(other.EventPachinkoMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventPachinkoMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventPachinkoMap_.WriteTo(output, _map_eventPachinkoMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventPachinkoMap_.WriteTo(ref output, _map_eventPachinkoMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventPachinkoMap_.CalculateSize(_map_eventPachinkoMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventPachinkoMapABValue other) {
      if (other == null) {
        return;
      }
      eventPachinkoMap_.Add(other.eventPachinkoMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventPachinkoMap_.AddEntriesFrom(input, _map_eventPachinkoMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventPachinkoMap_.AddEntriesFrom(ref input, _map_eventPachinkoMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventPachinkoConf : pb::IMessage<EventPachinkoConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventPachinkoConf> _parser = new pb::MessageParser<EventPachinkoConf>(() => new EventPachinkoConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventPachinkoConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventPachinkoConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoConf(EventPachinkoConf other) : this() {
      eventPachinkoMap_ = other.eventPachinkoMap_.Clone();
      eventPachinkoMapAB_ = other.eventPachinkoMapAB_.Clone();
      eventPachinkoMapABPatch_ = other.eventPachinkoMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoConf Clone() {
      return new EventPachinkoConf(this);
    }

    /// <summary>Field number for the "EventPachinkoMap" field.</summary>
    public const int EventPachinkoMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventPachinko>.Codec _map_eventPachinkoMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventPachinko>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPachinko.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventPachinko> eventPachinkoMap_ = new pbc::MapField<int, global::fat.rawdata.EventPachinko>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventPachinko> EventPachinkoMap {
      get { return eventPachinkoMap_; }
    }

    /// <summary>Field number for the "EventPachinkoMapAB" field.</summary>
    public const int EventPachinkoMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventPachinkoMapABValue>.Codec _map_eventPachinkoMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventPachinkoMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPachinkoMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventPachinkoMapABValue> eventPachinkoMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventPachinkoMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventPachinkoMapABValue> EventPachinkoMapAB {
      get { return eventPachinkoMapAB_; }
    }

    /// <summary>Field number for the "EventPachinkoMapABPatch" field.</summary>
    public const int EventPachinkoMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventPachinkoMapABValue>.Codec _map_eventPachinkoMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventPachinkoMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPachinkoMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventPachinkoMapABValue> eventPachinkoMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventPachinkoMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventPachinkoMapABValue> EventPachinkoMapABPatch {
      get { return eventPachinkoMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventPachinkoConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventPachinkoConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventPachinkoMap.Equals(other.EventPachinkoMap)) return false;
      if (!EventPachinkoMapAB.Equals(other.EventPachinkoMapAB)) return false;
      if (!EventPachinkoMapABPatch.Equals(other.EventPachinkoMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventPachinkoMap.GetHashCode();
      hash ^= EventPachinkoMapAB.GetHashCode();
      hash ^= EventPachinkoMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventPachinkoMap_.WriteTo(output, _map_eventPachinkoMap_codec);
      eventPachinkoMapAB_.WriteTo(output, _map_eventPachinkoMapAB_codec);
      eventPachinkoMapABPatch_.WriteTo(output, _map_eventPachinkoMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventPachinkoMap_.WriteTo(ref output, _map_eventPachinkoMap_codec);
      eventPachinkoMapAB_.WriteTo(ref output, _map_eventPachinkoMapAB_codec);
      eventPachinkoMapABPatch_.WriteTo(ref output, _map_eventPachinkoMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventPachinkoMap_.CalculateSize(_map_eventPachinkoMap_codec);
      size += eventPachinkoMapAB_.CalculateSize(_map_eventPachinkoMapAB_codec);
      size += eventPachinkoMapABPatch_.CalculateSize(_map_eventPachinkoMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventPachinkoConf other) {
      if (other == null) {
        return;
      }
      eventPachinkoMap_.Add(other.eventPachinkoMap_);
      eventPachinkoMapAB_.Add(other.eventPachinkoMapAB_);
      eventPachinkoMapABPatch_.Add(other.eventPachinkoMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventPachinkoMap_.AddEntriesFrom(input, _map_eventPachinkoMap_codec);
            break;
          }
          case 18: {
            eventPachinkoMapAB_.AddEntriesFrom(input, _map_eventPachinkoMapAB_codec);
            break;
          }
          case 26: {
            eventPachinkoMapABPatch_.AddEntriesFrom(input, _map_eventPachinkoMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventPachinkoMap_.AddEntriesFrom(ref input, _map_eventPachinkoMap_codec);
            break;
          }
          case 18: {
            eventPachinkoMapAB_.AddEntriesFrom(ref input, _map_eventPachinkoMapAB_codec);
            break;
          }
          case 26: {
            eventPachinkoMapABPatch_.AddEntriesFrom(ref input, _map_eventPachinkoMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
