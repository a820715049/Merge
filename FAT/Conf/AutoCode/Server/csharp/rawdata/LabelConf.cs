// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/LabelConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/LabelConf.proto</summary>
  public static partial class LabelConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/LabelConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LabelConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdyYXdkYXRhL0xhYmVsQ29uZi5wcm90bxIHcmF3ZGF0YRoXcmF3ZGF0YS9M",
            "YWJlbFR5cGUucHJvdG8igwEKBUxhYmVsEgoKAmlkGAEgASgFEg0KBWltYWdl",
            "GAIgASgJEgsKA2tleRgHIAEoCRIlCglsYWJlbFR5cGUYAyABKA4yEi5yYXdk",
            "YXRhLkxhYmVsVHlwZRIOCgZwcmVmYWIYBSABKAkSDQoFc3R5bGUYBCABKAUS",
            "DAoEem9vbRgGIAEoAiKMAQoPTGFiZWxNYXBBQlZhbHVlEjgKCExhYmVsTWFw",
            "GAEgAygLMiYucmF3ZGF0YS5MYWJlbE1hcEFCVmFsdWUuTGFiZWxNYXBFbnRy",
            "eRo/Cg1MYWJlbE1hcEVudHJ5EgsKA2tleRgBIAEoBRIdCgV2YWx1ZRgCIAEo",
            "CzIOLnJhd2RhdGEuTGFiZWw6AjgBIpkDCglMYWJlbENvbmYSMgoITGFiZWxN",
            "YXAYASADKAsyIC5yYXdkYXRhLkxhYmVsQ29uZi5MYWJlbE1hcEVudHJ5EjYK",
            "CkxhYmVsTWFwQUIYAiADKAsyIi5yYXdkYXRhLkxhYmVsQ29uZi5MYWJlbE1h",
            "cEFCRW50cnkSQAoPTGFiZWxNYXBBQlBhdGNoGAMgAygLMicucmF3ZGF0YS5M",
            "YWJlbENvbmYuTGFiZWxNYXBBQlBhdGNoRW50cnkaPwoNTGFiZWxNYXBFbnRy",
            "eRILCgNrZXkYASABKAUSHQoFdmFsdWUYAiABKAsyDi5yYXdkYXRhLkxhYmVs",
            "OgI4ARpLCg9MYWJlbE1hcEFCRW50cnkSCwoDa2V5GAEgASgJEicKBXZhbHVl",
            "GAIgASgLMhgucmF3ZGF0YS5MYWJlbE1hcEFCVmFsdWU6AjgBGlAKFExhYmVs",
            "TWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRInCgV2YWx1ZRgCIAEoCzIY",
            "LnJhd2RhdGEuTGFiZWxNYXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1",
            "cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0",
            "YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.rawdata.LabelTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.Label), global::fat.rawdata.Label.Parser, new[]{ "Id", "Image", "Key", "LabelType", "Prefab", "Style", "Zoom" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.LabelMapABValue), global::fat.rawdata.LabelMapABValue.Parser, new[]{ "LabelMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.LabelConf), global::fat.rawdata.LabelConf.Parser, new[]{ "LabelMap", "LabelMapAB", "LabelMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="Label",table="LabelMap",table_wrapper="LabelConf",map="true",map_key_type="int32",data="LabelConf")
  /// annotation@ab(table_ab="LabelMapAB",table_ab_patch="LabelMapABPatch",table_ab_value="LabelMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@Label(id="id")
  /// </summary>
  public sealed partial class Label : pb::IMessage<Label>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Label> _parser = new pb::MessageParser<Label>(() => new Label());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Label> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.LabelConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Label() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Label(Label other) : this() {
      id_ = other.id_;
      image_ = other.image_;
      key_ = other.key_;
      labelType_ = other.labelType_;
      prefab_ = other.prefab_;
      style_ = other.style_;
      zoom_ = other.zoom_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Label Clone() {
      return new Label(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 标签信息ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 2;
    private string image_ = "";
    /// <summary>
    /// 标签图片
    /// （Asset）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 7;
    private string key_ = "";
    /// <summary>
    /// 标签文字
    /// （类型为Limit时文字读本字段）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labelType" field.</summary>
    public const int LabelTypeFieldNumber = 3;
    private global::fat.rawdata.LabelType labelType_ = global::fat.rawdata.LabelType.Default;
    /// <summary>
    /// 标签文字类型
    /// （LabelType@enum.key）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.rawdata.LabelType LabelType {
      get { return labelType_; }
      set {
        labelType_ = value;
      }
    }

    /// <summary>Field number for the "prefab" field.</summary>
    public const int PrefabFieldNumber = 5;
    private string prefab_ = "";
    /// <summary>
    /// 预制体与类型LableType一一对应
    /// （Asset）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Prefab {
      get { return prefab_; }
      set {
        prefab_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 4;
    private int style_;
    /// <summary>
    /// 文字样式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Style {
      get { return style_; }
      set {
        style_ = value;
      }
    }

    /// <summary>Field number for the "zoom" field.</summary>
    public const int ZoomFieldNumber = 6;
    private float zoom_;
    /// <summary>
    /// 缩放
    /// （带缩放的为专属标签）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Zoom {
      get { return zoom_; }
      set {
        zoom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Label);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Label other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Image != other.Image) return false;
      if (Key != other.Key) return false;
      if (LabelType != other.LabelType) return false;
      if (Prefab != other.Prefab) return false;
      if (Style != other.Style) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Zoom, other.Zoom)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (LabelType != global::fat.rawdata.LabelType.Default) hash ^= LabelType.GetHashCode();
      if (Prefab.Length != 0) hash ^= Prefab.GetHashCode();
      if (Style != 0) hash ^= Style.GetHashCode();
      if (Zoom != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Zoom);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Image);
      }
      if (LabelType != global::fat.rawdata.LabelType.Default) {
        output.WriteRawTag(24);
        output.WriteEnum((int) LabelType);
      }
      if (Style != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Style);
      }
      if (Prefab.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Prefab);
      }
      if (Zoom != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Zoom);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Image);
      }
      if (LabelType != global::fat.rawdata.LabelType.Default) {
        output.WriteRawTag(24);
        output.WriteEnum((int) LabelType);
      }
      if (Style != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Style);
      }
      if (Prefab.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Prefab);
      }
      if (Zoom != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Zoom);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (LabelType != global::fat.rawdata.LabelType.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LabelType);
      }
      if (Prefab.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prefab);
      }
      if (Style != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Style);
      }
      if (Zoom != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Label other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.LabelType != global::fat.rawdata.LabelType.Default) {
        LabelType = other.LabelType;
      }
      if (other.Prefab.Length != 0) {
        Prefab = other.Prefab;
      }
      if (other.Style != 0) {
        Style = other.Style;
      }
      if (other.Zoom != 0F) {
        Zoom = other.Zoom;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Image = input.ReadString();
            break;
          }
          case 24: {
            LabelType = (global::fat.rawdata.LabelType) input.ReadEnum();
            break;
          }
          case 32: {
            Style = input.ReadInt32();
            break;
          }
          case 42: {
            Prefab = input.ReadString();
            break;
          }
          case 53: {
            Zoom = input.ReadFloat();
            break;
          }
          case 58: {
            Key = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Image = input.ReadString();
            break;
          }
          case 24: {
            LabelType = (global::fat.rawdata.LabelType) input.ReadEnum();
            break;
          }
          case 32: {
            Style = input.ReadInt32();
            break;
          }
          case 42: {
            Prefab = input.ReadString();
            break;
          }
          case 53: {
            Zoom = input.ReadFloat();
            break;
          }
          case 58: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LabelMapABValue : pb::IMessage<LabelMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LabelMapABValue> _parser = new pb::MessageParser<LabelMapABValue>(() => new LabelMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabelMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.LabelConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelMapABValue(LabelMapABValue other) : this() {
      labelMap_ = other.labelMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelMapABValue Clone() {
      return new LabelMapABValue(this);
    }

    /// <summary>Field number for the "LabelMap" field.</summary>
    public const int LabelMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.Label>.Codec _map_labelMap_codec
        = new pbc::MapField<int, global::fat.rawdata.Label>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.Label.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.Label> labelMap_ = new pbc::MapField<int, global::fat.rawdata.Label>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.Label> LabelMap {
      get { return labelMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabelMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabelMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!LabelMap.Equals(other.LabelMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= LabelMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      labelMap_.WriteTo(output, _map_labelMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      labelMap_.WriteTo(ref output, _map_labelMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += labelMap_.CalculateSize(_map_labelMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabelMapABValue other) {
      if (other == null) {
        return;
      }
      labelMap_.Add(other.labelMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            labelMap_.AddEntriesFrom(input, _map_labelMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            labelMap_.AddEntriesFrom(ref input, _map_labelMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LabelConf : pb::IMessage<LabelConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LabelConf> _parser = new pb::MessageParser<LabelConf>(() => new LabelConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabelConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.LabelConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelConf(LabelConf other) : this() {
      labelMap_ = other.labelMap_.Clone();
      labelMapAB_ = other.labelMapAB_.Clone();
      labelMapABPatch_ = other.labelMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelConf Clone() {
      return new LabelConf(this);
    }

    /// <summary>Field number for the "LabelMap" field.</summary>
    public const int LabelMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.Label>.Codec _map_labelMap_codec
        = new pbc::MapField<int, global::fat.rawdata.Label>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.Label.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.Label> labelMap_ = new pbc::MapField<int, global::fat.rawdata.Label>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.Label> LabelMap {
      get { return labelMap_; }
    }

    /// <summary>Field number for the "LabelMapAB" field.</summary>
    public const int LabelMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.LabelMapABValue>.Codec _map_labelMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.LabelMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.LabelMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.LabelMapABValue> labelMapAB_ = new pbc::MapField<string, global::fat.rawdata.LabelMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.LabelMapABValue> LabelMapAB {
      get { return labelMapAB_; }
    }

    /// <summary>Field number for the "LabelMapABPatch" field.</summary>
    public const int LabelMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.LabelMapABValue>.Codec _map_labelMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.LabelMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.LabelMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.LabelMapABValue> labelMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.LabelMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.LabelMapABValue> LabelMapABPatch {
      get { return labelMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabelConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabelConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!LabelMap.Equals(other.LabelMap)) return false;
      if (!LabelMapAB.Equals(other.LabelMapAB)) return false;
      if (!LabelMapABPatch.Equals(other.LabelMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= LabelMap.GetHashCode();
      hash ^= LabelMapAB.GetHashCode();
      hash ^= LabelMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      labelMap_.WriteTo(output, _map_labelMap_codec);
      labelMapAB_.WriteTo(output, _map_labelMapAB_codec);
      labelMapABPatch_.WriteTo(output, _map_labelMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      labelMap_.WriteTo(ref output, _map_labelMap_codec);
      labelMapAB_.WriteTo(ref output, _map_labelMapAB_codec);
      labelMapABPatch_.WriteTo(ref output, _map_labelMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += labelMap_.CalculateSize(_map_labelMap_codec);
      size += labelMapAB_.CalculateSize(_map_labelMapAB_codec);
      size += labelMapABPatch_.CalculateSize(_map_labelMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabelConf other) {
      if (other == null) {
        return;
      }
      labelMap_.Add(other.labelMap_);
      labelMapAB_.Add(other.labelMapAB_);
      labelMapABPatch_.Add(other.labelMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            labelMap_.AddEntriesFrom(input, _map_labelMap_codec);
            break;
          }
          case 18: {
            labelMapAB_.AddEntriesFrom(input, _map_labelMapAB_codec);
            break;
          }
          case 26: {
            labelMapABPatch_.AddEntriesFrom(input, _map_labelMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            labelMap_.AddEntriesFrom(ref input, _map_labelMap_codec);
            break;
          }
          case 18: {
            labelMapAB_.AddEntriesFrom(ref input, _map_labelMapAB_codec);
            break;
          }
          case 26: {
            labelMapABPatch_.AddEntriesFrom(ref input, _map_labelMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
