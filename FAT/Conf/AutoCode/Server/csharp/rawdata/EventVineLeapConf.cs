// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventVineLeapConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventVineLeapConf.proto</summary>
  public static partial class EventVineLeapConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventVineLeapConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventVineLeapConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9yYXdkYXRhL0V2ZW50VmluZUxlYXBDb25mLnByb3RvEgdyYXdkYXRhIvUB",
            "Cg1FdmVudFZpbmVMZWFwEgoKAmlkGAEgASgFEgwKBGNvc3QYAiABKAUSHQoV",
            "ZGlmZmljdWx0eVNlbGVjdFRoZW1lGAMgASgFEhAKCGVuZFRoZW1lGAQgASgF",
            "EhIKCmV2ZW50VGhlbWUYBSABKAUSEQoJZmFpbFRoZW1lGAsgASgFEg8KB2dy",
            "YWRlSWQYBiABKAUSFAoMbG9hZGluZ1RoZW1lGAcgASgFEhEKCXBhc3NUaGVt",
            "ZRgMIAEoBRITCgtyZWZyZXNoVGltZRgIIAEoBRISCgpzdGFydFRoZW1lGAkg",
            "ASgFEg8KB3Rva2VuSWQYCiABKAUivAEKF0V2ZW50VmluZUxlYXBNYXBBQlZh",
            "bHVlElAKEEV2ZW50VmluZUxlYXBNYXAYASADKAsyNi5yYXdkYXRhLkV2ZW50",
            "VmluZUxlYXBNYXBBQlZhbHVlLkV2ZW50VmluZUxlYXBNYXBFbnRyeRpPChVF",
            "dmVudFZpbmVMZWFwTWFwRW50cnkSCwoDa2V5GAEgASgFEiUKBXZhbHVlGAIg",
            "ASgLMhYucmF3ZGF0YS5FdmVudFZpbmVMZWFwOgI4ASKZBAoRRXZlbnRWaW5l",
            "TGVhcENvbmYSSgoQRXZlbnRWaW5lTGVhcE1hcBgBIAMoCzIwLnJhd2RhdGEu",
            "RXZlbnRWaW5lTGVhcENvbmYuRXZlbnRWaW5lTGVhcE1hcEVudHJ5Ek4KEkV2",
            "ZW50VmluZUxlYXBNYXBBQhgCIAMoCzIyLnJhd2RhdGEuRXZlbnRWaW5lTGVh",
            "cENvbmYuRXZlbnRWaW5lTGVhcE1hcEFCRW50cnkSWAoXRXZlbnRWaW5lTGVh",
            "cE1hcEFCUGF0Y2gYAyADKAsyNy5yYXdkYXRhLkV2ZW50VmluZUxlYXBDb25m",
            "LkV2ZW50VmluZUxlYXBNYXBBQlBhdGNoRW50cnkaTwoVRXZlbnRWaW5lTGVh",
            "cE1hcEVudHJ5EgsKA2tleRgBIAEoBRIlCgV2YWx1ZRgCIAEoCzIWLnJhd2Rh",
            "dGEuRXZlbnRWaW5lTGVhcDoCOAEaWwoXRXZlbnRWaW5lTGVhcE1hcEFCRW50",
            "cnkSCwoDa2V5GAEgASgJEi8KBXZhbHVlGAIgASgLMiAucmF3ZGF0YS5FdmVu",
            "dFZpbmVMZWFwTWFwQUJWYWx1ZToCOAEaYAocRXZlbnRWaW5lTGVhcE1hcEFC",
            "UGF0Y2hFbnRyeRILCgNrZXkYASABKAkSLwoFdmFsdWUYAiABKAsyIC5yYXdk",
            "YXRhLkV2ZW50VmluZUxlYXBNYXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVu",
            "cGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3",
            "ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventVineLeap), global::fat.rawdata.EventVineLeap.Parser, new[]{ "Id", "Cost", "DifficultySelectTheme", "EndTheme", "EventTheme", "FailTheme", "GradeId", "LoadingTheme", "PassTheme", "RefreshTime", "StartTheme", "TokenId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventVineLeapMapABValue), global::fat.rawdata.EventVineLeapMapABValue.Parser, new[]{ "EventVineLeapMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventVineLeapConf), global::fat.rawdata.EventVineLeapConf.Parser, new[]{ "EventVineLeapMap", "EventVineLeapMapAB", "EventVineLeapMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventVineLeap",table="EventVineLeapMap",table_wrapper="EventVineLeapConf",map="true",map_key_type="int32",data="EventVineLeapConf")
  /// annotation@ab(table_ab="EventVineLeapMapAB",table_ab_patch="EventVineLeapMapABPatch",table_ab_value="EventVineLeapMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventVineLeap(id="id")
  /// </summary>
  public sealed partial class EventVineLeap : pb::IMessage<EventVineLeap>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventVineLeap> _parser = new pb::MessageParser<EventVineLeap>(() => new EventVineLeap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventVineLeap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventVineLeapConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeap(EventVineLeap other) : this() {
      id_ = other.id_;
      cost_ = other.cost_;
      difficultySelectTheme_ = other.difficultySelectTheme_;
      endTheme_ = other.endTheme_;
      eventTheme_ = other.eventTheme_;
      failTheme_ = other.failTheme_;
      gradeId_ = other.gradeId_;
      loadingTheme_ = other.loadingTheme_;
      passTheme_ = other.passTheme_;
      refreshTime_ = other.refreshTime_;
      startTheme_ = other.startTheme_;
      tokenId_ = other.tokenId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeap Clone() {
      return new EventVineLeap(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private int cost_;
    /// <summary>
    /// 消耗内容
    /// （objbasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "difficultySelectTheme" field.</summary>
    public const int DifficultySelectThemeFieldNumber = 3;
    private int difficultySelectTheme_;
    /// <summary>
    /// 难度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DifficultySelectTheme {
      get { return difficultySelectTheme_; }
      set {
        difficultySelectTheme_ = value;
      }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 4;
    private int endTheme_;
    /// <summary>
    /// 结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 5;
    private int eventTheme_;
    /// <summary>
    /// 活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "failTheme" field.</summary>
    public const int FailThemeFieldNumber = 11;
    private int failTheme_;
    /// <summary>
    /// 失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FailTheme {
      get { return failTheme_; }
      set {
        failTheme_ = value;
      }
    }

    /// <summary>Field number for the "gradeId" field.</summary>
    public const int GradeIdFieldNumber = 6;
    private int gradeId_;
    /// <summary>
    /// 分层=Diffid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeId {
      get { return gradeId_; }
      set {
        gradeId_ = value;
      }
    }

    /// <summary>Field number for the "loadingTheme" field.</summary>
    public const int LoadingThemeFieldNumber = 7;
    private int loadingTheme_;
    /// <summary>
    /// loading
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoadingTheme {
      get { return loadingTheme_; }
      set {
        loadingTheme_ = value;
      }
    }

    /// <summary>Field number for the "passTheme" field.</summary>
    public const int PassThemeFieldNumber = 12;
    private int passTheme_;
    /// <summary>
    /// 过关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassTheme {
      get { return passTheme_; }
      set {
        passTheme_ = value;
      }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 8;
    private int refreshTime_;
    /// <summary>
    /// 淘汰刷新间隔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    /// <summary>Field number for the "startTheme" field.</summary>
    public const int StartThemeFieldNumber = 9;
    private int startTheme_;
    /// <summary>
    /// 开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTheme {
      get { return startTheme_; }
      set {
        startTheme_ = value;
      }
    }

    /// <summary>Field number for the "tokenId" field.</summary>
    public const int TokenIdFieldNumber = 10;
    private int tokenId_;
    /// <summary>
    /// tokenId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TokenId {
      get { return tokenId_; }
      set {
        tokenId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventVineLeap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventVineLeap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Cost != other.Cost) return false;
      if (DifficultySelectTheme != other.DifficultySelectTheme) return false;
      if (EndTheme != other.EndTheme) return false;
      if (EventTheme != other.EventTheme) return false;
      if (FailTheme != other.FailTheme) return false;
      if (GradeId != other.GradeId) return false;
      if (LoadingTheme != other.LoadingTheme) return false;
      if (PassTheme != other.PassTheme) return false;
      if (RefreshTime != other.RefreshTime) return false;
      if (StartTheme != other.StartTheme) return false;
      if (TokenId != other.TokenId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (DifficultySelectTheme != 0) hash ^= DifficultySelectTheme.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (FailTheme != 0) hash ^= FailTheme.GetHashCode();
      if (GradeId != 0) hash ^= GradeId.GetHashCode();
      if (LoadingTheme != 0) hash ^= LoadingTheme.GetHashCode();
      if (PassTheme != 0) hash ^= PassTheme.GetHashCode();
      if (RefreshTime != 0) hash ^= RefreshTime.GetHashCode();
      if (StartTheme != 0) hash ^= StartTheme.GetHashCode();
      if (TokenId != 0) hash ^= TokenId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Cost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (DifficultySelectTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DifficultySelectTheme);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTheme);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EventTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GradeId);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LoadingTheme);
      }
      if (RefreshTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RefreshTime);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StartTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TokenId);
      }
      if (FailTheme != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FailTheme);
      }
      if (PassTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PassTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Cost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (DifficultySelectTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DifficultySelectTheme);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTheme);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EventTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GradeId);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LoadingTheme);
      }
      if (RefreshTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RefreshTime);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StartTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TokenId);
      }
      if (FailTheme != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FailTheme);
      }
      if (PassTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PassTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (DifficultySelectTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DifficultySelectTheme);
      }
      if (EndTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (FailTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FailTheme);
      }
      if (GradeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeId);
      }
      if (LoadingTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoadingTheme);
      }
      if (PassTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassTheme);
      }
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshTime);
      }
      if (StartTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTheme);
      }
      if (TokenId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TokenId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventVineLeap other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.DifficultySelectTheme != 0) {
        DifficultySelectTheme = other.DifficultySelectTheme;
      }
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.FailTheme != 0) {
        FailTheme = other.FailTheme;
      }
      if (other.GradeId != 0) {
        GradeId = other.GradeId;
      }
      if (other.LoadingTheme != 0) {
        LoadingTheme = other.LoadingTheme;
      }
      if (other.PassTheme != 0) {
        PassTheme = other.PassTheme;
      }
      if (other.RefreshTime != 0) {
        RefreshTime = other.RefreshTime;
      }
      if (other.StartTheme != 0) {
        StartTheme = other.StartTheme;
      }
      if (other.TokenId != 0) {
        TokenId = other.TokenId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
          case 24: {
            DifficultySelectTheme = input.ReadInt32();
            break;
          }
          case 32: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 40: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 48: {
            GradeId = input.ReadInt32();
            break;
          }
          case 56: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 64: {
            RefreshTime = input.ReadInt32();
            break;
          }
          case 72: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 80: {
            TokenId = input.ReadInt32();
            break;
          }
          case 88: {
            FailTheme = input.ReadInt32();
            break;
          }
          case 96: {
            PassTheme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
          case 24: {
            DifficultySelectTheme = input.ReadInt32();
            break;
          }
          case 32: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 40: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 48: {
            GradeId = input.ReadInt32();
            break;
          }
          case 56: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 64: {
            RefreshTime = input.ReadInt32();
            break;
          }
          case 72: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 80: {
            TokenId = input.ReadInt32();
            break;
          }
          case 88: {
            FailTheme = input.ReadInt32();
            break;
          }
          case 96: {
            PassTheme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventVineLeapMapABValue : pb::IMessage<EventVineLeapMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventVineLeapMapABValue> _parser = new pb::MessageParser<EventVineLeapMapABValue>(() => new EventVineLeapMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventVineLeapMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventVineLeapConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeapMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeapMapABValue(EventVineLeapMapABValue other) : this() {
      eventVineLeapMap_ = other.eventVineLeapMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeapMapABValue Clone() {
      return new EventVineLeapMapABValue(this);
    }

    /// <summary>Field number for the "EventVineLeapMap" field.</summary>
    public const int EventVineLeapMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventVineLeap>.Codec _map_eventVineLeapMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventVineLeap>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventVineLeap.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventVineLeap> eventVineLeapMap_ = new pbc::MapField<int, global::fat.rawdata.EventVineLeap>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventVineLeap> EventVineLeapMap {
      get { return eventVineLeapMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventVineLeapMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventVineLeapMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventVineLeapMap.Equals(other.EventVineLeapMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventVineLeapMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventVineLeapMap_.WriteTo(output, _map_eventVineLeapMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventVineLeapMap_.WriteTo(ref output, _map_eventVineLeapMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventVineLeapMap_.CalculateSize(_map_eventVineLeapMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventVineLeapMapABValue other) {
      if (other == null) {
        return;
      }
      eventVineLeapMap_.Add(other.eventVineLeapMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventVineLeapMap_.AddEntriesFrom(input, _map_eventVineLeapMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventVineLeapMap_.AddEntriesFrom(ref input, _map_eventVineLeapMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventVineLeapConf : pb::IMessage<EventVineLeapConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventVineLeapConf> _parser = new pb::MessageParser<EventVineLeapConf>(() => new EventVineLeapConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventVineLeapConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventVineLeapConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeapConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeapConf(EventVineLeapConf other) : this() {
      eventVineLeapMap_ = other.eventVineLeapMap_.Clone();
      eventVineLeapMapAB_ = other.eventVineLeapMapAB_.Clone();
      eventVineLeapMapABPatch_ = other.eventVineLeapMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventVineLeapConf Clone() {
      return new EventVineLeapConf(this);
    }

    /// <summary>Field number for the "EventVineLeapMap" field.</summary>
    public const int EventVineLeapMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventVineLeap>.Codec _map_eventVineLeapMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventVineLeap>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventVineLeap.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventVineLeap> eventVineLeapMap_ = new pbc::MapField<int, global::fat.rawdata.EventVineLeap>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventVineLeap> EventVineLeapMap {
      get { return eventVineLeapMap_; }
    }

    /// <summary>Field number for the "EventVineLeapMapAB" field.</summary>
    public const int EventVineLeapMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventVineLeapMapABValue>.Codec _map_eventVineLeapMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventVineLeapMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventVineLeapMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventVineLeapMapABValue> eventVineLeapMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventVineLeapMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventVineLeapMapABValue> EventVineLeapMapAB {
      get { return eventVineLeapMapAB_; }
    }

    /// <summary>Field number for the "EventVineLeapMapABPatch" field.</summary>
    public const int EventVineLeapMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventVineLeapMapABValue>.Codec _map_eventVineLeapMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventVineLeapMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventVineLeapMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventVineLeapMapABValue> eventVineLeapMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventVineLeapMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventVineLeapMapABValue> EventVineLeapMapABPatch {
      get { return eventVineLeapMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventVineLeapConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventVineLeapConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventVineLeapMap.Equals(other.EventVineLeapMap)) return false;
      if (!EventVineLeapMapAB.Equals(other.EventVineLeapMapAB)) return false;
      if (!EventVineLeapMapABPatch.Equals(other.EventVineLeapMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventVineLeapMap.GetHashCode();
      hash ^= EventVineLeapMapAB.GetHashCode();
      hash ^= EventVineLeapMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventVineLeapMap_.WriteTo(output, _map_eventVineLeapMap_codec);
      eventVineLeapMapAB_.WriteTo(output, _map_eventVineLeapMapAB_codec);
      eventVineLeapMapABPatch_.WriteTo(output, _map_eventVineLeapMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventVineLeapMap_.WriteTo(ref output, _map_eventVineLeapMap_codec);
      eventVineLeapMapAB_.WriteTo(ref output, _map_eventVineLeapMapAB_codec);
      eventVineLeapMapABPatch_.WriteTo(ref output, _map_eventVineLeapMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventVineLeapMap_.CalculateSize(_map_eventVineLeapMap_codec);
      size += eventVineLeapMapAB_.CalculateSize(_map_eventVineLeapMapAB_codec);
      size += eventVineLeapMapABPatch_.CalculateSize(_map_eventVineLeapMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventVineLeapConf other) {
      if (other == null) {
        return;
      }
      eventVineLeapMap_.Add(other.eventVineLeapMap_);
      eventVineLeapMapAB_.Add(other.eventVineLeapMapAB_);
      eventVineLeapMapABPatch_.Add(other.eventVineLeapMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventVineLeapMap_.AddEntriesFrom(input, _map_eventVineLeapMap_codec);
            break;
          }
          case 18: {
            eventVineLeapMapAB_.AddEntriesFrom(input, _map_eventVineLeapMapAB_codec);
            break;
          }
          case 26: {
            eventVineLeapMapABPatch_.AddEntriesFrom(input, _map_eventVineLeapMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventVineLeapMap_.AddEntriesFrom(ref input, _map_eventVineLeapMap_codec);
            break;
          }
          case 18: {
            eventVineLeapMapAB_.AddEntriesFrom(ref input, _map_eventVineLeapMapAB_codec);
            break;
          }
          case 26: {
            eventVineLeapMapABPatch_.AddEntriesFrom(ref input, _map_eventVineLeapMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
