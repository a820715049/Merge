// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventMiniBoardConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventMiniBoardConf.proto</summary>
  public static partial class EventMiniBoardConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventMiniBoardConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventMiniBoardConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiByYXdkYXRhL0V2ZW50TWluaUJvYXJkQ29uZi5wcm90bxIHcmF3ZGF0YSKN",
            "AQoORXZlbnRNaW5pQm9hcmQSCgoCaWQYASABKAUSEgoKYm9hcmRUaGVtZRgC",
            "IAEoBRIMCgRjb3N0GAMgASgFEhYKDmVuZFJld2FyZFRoZW1lGAQgASgFEhAK",
            "CGVuZFRoZW1lGAUgASgFEhIKCmV2ZW50VGhlbWUYBiABKAUSDwoHZ3JhZGVJ",
            "ZBgHIAEoBSLCAQoYRXZlbnRNaW5pQm9hcmRNYXBBQlZhbHVlElMKEUV2ZW50",
            "TWluaUJvYXJkTWFwGAEgAygLMjgucmF3ZGF0YS5FdmVudE1pbmlCb2FyZE1h",
            "cEFCVmFsdWUuRXZlbnRNaW5pQm9hcmRNYXBFbnRyeRpRChZFdmVudE1pbmlC",
            "b2FyZE1hcEVudHJ5EgsKA2tleRgBIAEoBRImCgV2YWx1ZRgCIAEoCzIXLnJh",
            "d2RhdGEuRXZlbnRNaW5pQm9hcmQ6AjgBIqkEChJFdmVudE1pbmlCb2FyZENv",
            "bmYSTQoRRXZlbnRNaW5pQm9hcmRNYXAYASADKAsyMi5yYXdkYXRhLkV2ZW50",
            "TWluaUJvYXJkQ29uZi5FdmVudE1pbmlCb2FyZE1hcEVudHJ5ElEKE0V2ZW50",
            "TWluaUJvYXJkTWFwQUIYAiADKAsyNC5yYXdkYXRhLkV2ZW50TWluaUJvYXJk",
            "Q29uZi5FdmVudE1pbmlCb2FyZE1hcEFCRW50cnkSWwoYRXZlbnRNaW5pQm9h",
            "cmRNYXBBQlBhdGNoGAMgAygLMjkucmF3ZGF0YS5FdmVudE1pbmlCb2FyZENv",
            "bmYuRXZlbnRNaW5pQm9hcmRNYXBBQlBhdGNoRW50cnkaUQoWRXZlbnRNaW5p",
            "Qm9hcmRNYXBFbnRyeRILCgNrZXkYASABKAUSJgoFdmFsdWUYAiABKAsyFy5y",
            "YXdkYXRhLkV2ZW50TWluaUJvYXJkOgI4ARpdChhFdmVudE1pbmlCb2FyZE1h",
            "cEFCRW50cnkSCwoDa2V5GAEgASgJEjAKBXZhbHVlGAIgASgLMiEucmF3ZGF0",
            "YS5FdmVudE1pbmlCb2FyZE1hcEFCVmFsdWU6AjgBGmIKHUV2ZW50TWluaUJv",
            "YXJkTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIwCgV2YWx1ZRgCIAEo",
            "CzIhLnJhd2RhdGEuRXZlbnRNaW5pQm9hcmRNYXBBQlZhbHVlOgI4AUI9Wi1n",
            "aXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGq",
            "AgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMiniBoard), global::fat.rawdata.EventMiniBoard.Parser, new[]{ "Id", "BoardTheme", "Cost", "EndRewardTheme", "EndTheme", "EventTheme", "GradeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMiniBoardMapABValue), global::fat.rawdata.EventMiniBoardMapABValue.Parser, new[]{ "EventMiniBoardMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMiniBoardConf), global::fat.rawdata.EventMiniBoardConf.Parser, new[]{ "EventMiniBoardMap", "EventMiniBoardMapAB", "EventMiniBoardMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventMiniBoard",table="EventMiniBoardMap",table_wrapper="EventMiniBoardConf",map="true",map_key_type="int32",data="EventMiniBoardConf")
  /// annotation@ab(table_ab="EventMiniBoardMapAB",table_ab_patch="EventMiniBoardMapABPatch",table_ab_value="EventMiniBoardMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventMiniBoard(id="id")
  /// </summary>
  public sealed partial class EventMiniBoard : pb::IMessage<EventMiniBoard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMiniBoard> _parser = new pb::MessageParser<EventMiniBoard>(() => new EventMiniBoard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMiniBoard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMiniBoardConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoard(EventMiniBoard other) : this() {
      id_ = other.id_;
      boardTheme_ = other.boardTheme_;
      cost_ = other.cost_;
      endRewardTheme_ = other.endRewardTheme_;
      endTheme_ = other.endTheme_;
      eventTheme_ = other.eventTheme_;
      gradeId_ = other.gradeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoard Clone() {
      return new EventMiniBoard(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardTheme" field.</summary>
    public const int BoardThemeFieldNumber = 2;
    private int boardTheme_;
    /// <summary>
    /// 棋盘
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardTheme {
      get { return boardTheme_; }
      set {
        boardTheme_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 3;
    private int cost_;
    /// <summary>
    /// 消耗内容
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "endRewardTheme" field.</summary>
    public const int EndRewardThemeFieldNumber = 4;
    private int endRewardTheme_;
    /// <summary>
    /// 补领
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndRewardTheme {
      get { return endRewardTheme_; }
      set {
        endRewardTheme_ = value;
      }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 5;
    private int endTheme_;
    /// <summary>
    /// 结束
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 6;
    private int eventTheme_;
    /// <summary>
    /// 开启
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "gradeId" field.</summary>
    public const int GradeIdFieldNumber = 7;
    private int gradeId_;
    /// <summary>
    /// 分层后id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeId {
      get { return gradeId_; }
      set {
        gradeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMiniBoard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMiniBoard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardTheme != other.BoardTheme) return false;
      if (Cost != other.Cost) return false;
      if (EndRewardTheme != other.EndRewardTheme) return false;
      if (EndTheme != other.EndTheme) return false;
      if (EventTheme != other.EventTheme) return false;
      if (GradeId != other.GradeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardTheme != 0) hash ^= BoardTheme.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (EndRewardTheme != 0) hash ^= EndRewardTheme.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (GradeId != 0) hash ^= GradeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardTheme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardTheme);
      }
      if (Cost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cost);
      }
      if (EndRewardTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndRewardTheme);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EndTheme);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EventTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GradeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardTheme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardTheme);
      }
      if (Cost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cost);
      }
      if (EndRewardTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndRewardTheme);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EndTheme);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EventTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GradeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardTheme);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (EndRewardTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndRewardTheme);
      }
      if (EndTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (GradeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMiniBoard other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardTheme != 0) {
        BoardTheme = other.BoardTheme;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.EndRewardTheme != 0) {
        EndRewardTheme = other.EndRewardTheme;
      }
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.GradeId != 0) {
        GradeId = other.GradeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardTheme = input.ReadInt32();
            break;
          }
          case 24: {
            Cost = input.ReadInt32();
            break;
          }
          case 32: {
            EndRewardTheme = input.ReadInt32();
            break;
          }
          case 40: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 48: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 56: {
            GradeId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardTheme = input.ReadInt32();
            break;
          }
          case 24: {
            Cost = input.ReadInt32();
            break;
          }
          case 32: {
            EndRewardTheme = input.ReadInt32();
            break;
          }
          case 40: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 48: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 56: {
            GradeId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMiniBoardMapABValue : pb::IMessage<EventMiniBoardMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMiniBoardMapABValue> _parser = new pb::MessageParser<EventMiniBoardMapABValue>(() => new EventMiniBoardMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMiniBoardMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMiniBoardConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMapABValue(EventMiniBoardMapABValue other) : this() {
      eventMiniBoardMap_ = other.eventMiniBoardMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardMapABValue Clone() {
      return new EventMiniBoardMapABValue(this);
    }

    /// <summary>Field number for the "EventMiniBoardMap" field.</summary>
    public const int EventMiniBoardMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoard>.Codec _map_eventMiniBoardMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMiniBoard>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoard.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoard> eventMiniBoardMap_ = new pbc::MapField<int, global::fat.rawdata.EventMiniBoard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMiniBoard> EventMiniBoardMap {
      get { return eventMiniBoardMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMiniBoardMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMiniBoardMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMiniBoardMap.Equals(other.EventMiniBoardMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMiniBoardMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMiniBoardMap_.WriteTo(output, _map_eventMiniBoardMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMiniBoardMap_.WriteTo(ref output, _map_eventMiniBoardMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMiniBoardMap_.CalculateSize(_map_eventMiniBoardMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMiniBoardMapABValue other) {
      if (other == null) {
        return;
      }
      eventMiniBoardMap_.Add(other.eventMiniBoardMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMiniBoardMap_.AddEntriesFrom(input, _map_eventMiniBoardMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMiniBoardMap_.AddEntriesFrom(ref input, _map_eventMiniBoardMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMiniBoardConf : pb::IMessage<EventMiniBoardConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMiniBoardConf> _parser = new pb::MessageParser<EventMiniBoardConf>(() => new EventMiniBoardConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMiniBoardConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMiniBoardConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardConf(EventMiniBoardConf other) : this() {
      eventMiniBoardMap_ = other.eventMiniBoardMap_.Clone();
      eventMiniBoardMapAB_ = other.eventMiniBoardMapAB_.Clone();
      eventMiniBoardMapABPatch_ = other.eventMiniBoardMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardConf Clone() {
      return new EventMiniBoardConf(this);
    }

    /// <summary>Field number for the "EventMiniBoardMap" field.</summary>
    public const int EventMiniBoardMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoard>.Codec _map_eventMiniBoardMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMiniBoard>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoard.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoard> eventMiniBoardMap_ = new pbc::MapField<int, global::fat.rawdata.EventMiniBoard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMiniBoard> EventMiniBoardMap {
      get { return eventMiniBoardMap_; }
    }

    /// <summary>Field number for the "EventMiniBoardMapAB" field.</summary>
    public const int EventMiniBoardMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardMapABValue>.Codec _map_eventMiniBoardMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoardMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardMapABValue> eventMiniBoardMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMiniBoardMapABValue> EventMiniBoardMapAB {
      get { return eventMiniBoardMapAB_; }
    }

    /// <summary>Field number for the "EventMiniBoardMapABPatch" field.</summary>
    public const int EventMiniBoardMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardMapABValue>.Codec _map_eventMiniBoardMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoardMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardMapABValue> eventMiniBoardMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMiniBoardMapABValue> EventMiniBoardMapABPatch {
      get { return eventMiniBoardMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMiniBoardConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMiniBoardConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMiniBoardMap.Equals(other.EventMiniBoardMap)) return false;
      if (!EventMiniBoardMapAB.Equals(other.EventMiniBoardMapAB)) return false;
      if (!EventMiniBoardMapABPatch.Equals(other.EventMiniBoardMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMiniBoardMap.GetHashCode();
      hash ^= EventMiniBoardMapAB.GetHashCode();
      hash ^= EventMiniBoardMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMiniBoardMap_.WriteTo(output, _map_eventMiniBoardMap_codec);
      eventMiniBoardMapAB_.WriteTo(output, _map_eventMiniBoardMapAB_codec);
      eventMiniBoardMapABPatch_.WriteTo(output, _map_eventMiniBoardMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMiniBoardMap_.WriteTo(ref output, _map_eventMiniBoardMap_codec);
      eventMiniBoardMapAB_.WriteTo(ref output, _map_eventMiniBoardMapAB_codec);
      eventMiniBoardMapABPatch_.WriteTo(ref output, _map_eventMiniBoardMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMiniBoardMap_.CalculateSize(_map_eventMiniBoardMap_codec);
      size += eventMiniBoardMapAB_.CalculateSize(_map_eventMiniBoardMapAB_codec);
      size += eventMiniBoardMapABPatch_.CalculateSize(_map_eventMiniBoardMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMiniBoardConf other) {
      if (other == null) {
        return;
      }
      eventMiniBoardMap_.Add(other.eventMiniBoardMap_);
      eventMiniBoardMapAB_.Add(other.eventMiniBoardMapAB_);
      eventMiniBoardMapABPatch_.Add(other.eventMiniBoardMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMiniBoardMap_.AddEntriesFrom(input, _map_eventMiniBoardMap_codec);
            break;
          }
          case 18: {
            eventMiniBoardMapAB_.AddEntriesFrom(input, _map_eventMiniBoardMapAB_codec);
            break;
          }
          case 26: {
            eventMiniBoardMapABPatch_.AddEntriesFrom(input, _map_eventMiniBoardMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMiniBoardMap_.AddEntriesFrom(ref input, _map_eventMiniBoardMap_codec);
            break;
          }
          case 18: {
            eventMiniBoardMapAB_.AddEntriesFrom(ref input, _map_eventMiniBoardMapAB_codec);
            break;
          }
          case 26: {
            eventMiniBoardMapABPatch_.AddEntriesFrom(ref input, _map_eventMiniBoardMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
