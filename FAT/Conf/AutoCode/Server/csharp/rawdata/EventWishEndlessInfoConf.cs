// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventWishEndlessInfoConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventWishEndlessInfoConf.proto</summary>
  public static partial class EventWishEndlessInfoConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventWishEndlessInfoConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventWishEndlessInfoConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZyYXdkYXRhL0V2ZW50V2lzaEVuZGxlc3NJbmZvQ29uZi5wcm90bxIHcmF3",
            "ZGF0YSJXChRFdmVudFdpc2hFbmRsZXNzSW5mbxIKCgJpZBgBIAEoBRIRCglm",
            "cmVlR3JwSWQYAiABKAUSDQoFbGFiZWwYAyABKAUSEQoJcGFja0dycElkGAQg",
            "ASgFIuYBCh5FdmVudFdpc2hFbmRsZXNzSW5mb01hcEFCVmFsdWUSZQoXRXZl",
            "bnRXaXNoRW5kbGVzc0luZm9NYXAYASADKAsyRC5yYXdkYXRhLkV2ZW50V2lz",
            "aEVuZGxlc3NJbmZvTWFwQUJWYWx1ZS5FdmVudFdpc2hFbmRsZXNzSW5mb01h",
            "cEVudHJ5Gl0KHEV2ZW50V2lzaEVuZGxlc3NJbmZvTWFwRW50cnkSCwoDa2V5",
            "GAEgASgFEiwKBXZhbHVlGAIgASgLMh0ucmF3ZGF0YS5FdmVudFdpc2hFbmRs",
            "ZXNzSW5mbzoCOAEiiQUKGEV2ZW50V2lzaEVuZGxlc3NJbmZvQ29uZhJfChdF",
            "dmVudFdpc2hFbmRsZXNzSW5mb01hcBgBIAMoCzI+LnJhd2RhdGEuRXZlbnRX",
            "aXNoRW5kbGVzc0luZm9Db25mLkV2ZW50V2lzaEVuZGxlc3NJbmZvTWFwRW50",
            "cnkSYwoZRXZlbnRXaXNoRW5kbGVzc0luZm9NYXBBQhgCIAMoCzJALnJhd2Rh",
            "dGEuRXZlbnRXaXNoRW5kbGVzc0luZm9Db25mLkV2ZW50V2lzaEVuZGxlc3NJ",
            "bmZvTWFwQUJFbnRyeRJtCh5FdmVudFdpc2hFbmRsZXNzSW5mb01hcEFCUGF0",
            "Y2gYAyADKAsyRS5yYXdkYXRhLkV2ZW50V2lzaEVuZGxlc3NJbmZvQ29uZi5F",
            "dmVudFdpc2hFbmRsZXNzSW5mb01hcEFCUGF0Y2hFbnRyeRpdChxFdmVudFdp",
            "c2hFbmRsZXNzSW5mb01hcEVudHJ5EgsKA2tleRgBIAEoBRIsCgV2YWx1ZRgC",
            "IAEoCzIdLnJhd2RhdGEuRXZlbnRXaXNoRW5kbGVzc0luZm86AjgBGmkKHkV2",
            "ZW50V2lzaEVuZGxlc3NJbmZvTWFwQUJFbnRyeRILCgNrZXkYASABKAkSNgoF",
            "dmFsdWUYAiABKAsyJy5yYXdkYXRhLkV2ZW50V2lzaEVuZGxlc3NJbmZvTWFw",
            "QUJWYWx1ZToCOAEabgojRXZlbnRXaXNoRW5kbGVzc0luZm9NYXBBQlBhdGNo",
            "RW50cnkSCwoDa2V5GAEgASgJEjYKBXZhbHVlGAIgASgLMicucmF3ZGF0YS5F",
            "dmVudFdpc2hFbmRsZXNzSW5mb01hcEFCVmFsdWU6AjgBQj1aLWdpdGxhYi5m",
            "dW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3ZGF0YaoCC2ZhdC5y",
            "YXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventWishEndlessInfo), global::fat.rawdata.EventWishEndlessInfo.Parser, new[]{ "Id", "FreeGrpId", "Label", "PackGrpId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventWishEndlessInfoMapABValue), global::fat.rawdata.EventWishEndlessInfoMapABValue.Parser, new[]{ "EventWishEndlessInfoMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventWishEndlessInfoConf), global::fat.rawdata.EventWishEndlessInfoConf.Parser, new[]{ "EventWishEndlessInfoMap", "EventWishEndlessInfoMapAB", "EventWishEndlessInfoMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventWishEndlessInfo",table="EventWishEndlessInfoMap",table_wrapper="EventWishEndlessInfoConf",map="true",map_key_type="int32",data="EventWishEndlessInfoConf")
  /// annotation@ab(table_ab="EventWishEndlessInfoMapAB",table_ab_patch="EventWishEndlessInfoMapABPatch",table_ab_value="EventWishEndlessInfoMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventWishEndlessInfo(id="id")
  /// </summary>
  public sealed partial class EventWishEndlessInfo : pb::IMessage<EventWishEndlessInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventWishEndlessInfo> _parser = new pb::MessageParser<EventWishEndlessInfo>(() => new EventWishEndlessInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventWishEndlessInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventWishEndlessInfoConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishEndlessInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishEndlessInfo(EventWishEndlessInfo other) : this() {
      id_ = other.id_;
      freeGrpId_ = other.freeGrpId_;
      label_ = other.label_;
      packGrpId_ = other.packGrpId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishEndlessInfo Clone() {
      return new EventWishEndlessInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 礼包详情id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "freeGrpId" field.</summary>
    public const int FreeGrpIdFieldNumber = 2;
    private int freeGrpId_;
    /// <summary>
    /// 赠品ID
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （IAPFree.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeGrpId {
      get { return freeGrpId_; }
      set {
        freeGrpId_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 3;
    private int label_;
    /// <summary>
    /// 标签信息
    /// （Label.id）
    /// （为空代表不显示标签）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    /// <summary>Field number for the "packGrpId" field.</summary>
    public const int PackGrpIdFieldNumber = 4;
    private int packGrpId_;
    /// <summary>
    /// 内购商品ID
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （IAPPack.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackGrpId {
      get { return packGrpId_; }
      set {
        packGrpId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventWishEndlessInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventWishEndlessInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FreeGrpId != other.FreeGrpId) return false;
      if (Label != other.Label) return false;
      if (PackGrpId != other.PackGrpId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (FreeGrpId != 0) hash ^= FreeGrpId.GetHashCode();
      if (Label != 0) hash ^= Label.GetHashCode();
      if (PackGrpId != 0) hash ^= PackGrpId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (FreeGrpId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FreeGrpId);
      }
      if (Label != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Label);
      }
      if (PackGrpId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PackGrpId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (FreeGrpId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FreeGrpId);
      }
      if (Label != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Label);
      }
      if (PackGrpId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PackGrpId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (FreeGrpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeGrpId);
      }
      if (Label != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Label);
      }
      if (PackGrpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackGrpId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventWishEndlessInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.FreeGrpId != 0) {
        FreeGrpId = other.FreeGrpId;
      }
      if (other.Label != 0) {
        Label = other.Label;
      }
      if (other.PackGrpId != 0) {
        PackGrpId = other.PackGrpId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            FreeGrpId = input.ReadInt32();
            break;
          }
          case 24: {
            Label = input.ReadInt32();
            break;
          }
          case 32: {
            PackGrpId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            FreeGrpId = input.ReadInt32();
            break;
          }
          case 24: {
            Label = input.ReadInt32();
            break;
          }
          case 32: {
            PackGrpId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventWishEndlessInfoMapABValue : pb::IMessage<EventWishEndlessInfoMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventWishEndlessInfoMapABValue> _parser = new pb::MessageParser<EventWishEndlessInfoMapABValue>(() => new EventWishEndlessInfoMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventWishEndlessInfoMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventWishEndlessInfoConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishEndlessInfoMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishEndlessInfoMapABValue(EventWishEndlessInfoMapABValue other) : this() {
      eventWishEndlessInfoMap_ = other.eventWishEndlessInfoMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishEndlessInfoMapABValue Clone() {
      return new EventWishEndlessInfoMapABValue(this);
    }

    /// <summary>Field number for the "EventWishEndlessInfoMap" field.</summary>
    public const int EventWishEndlessInfoMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventWishEndlessInfo>.Codec _map_eventWishEndlessInfoMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventWishEndlessInfo>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventWishEndlessInfo.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventWishEndlessInfo> eventWishEndlessInfoMap_ = new pbc::MapField<int, global::fat.rawdata.EventWishEndlessInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventWishEndlessInfo> EventWishEndlessInfoMap {
      get { return eventWishEndlessInfoMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventWishEndlessInfoMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventWishEndlessInfoMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventWishEndlessInfoMap.Equals(other.EventWishEndlessInfoMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventWishEndlessInfoMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventWishEndlessInfoMap_.WriteTo(output, _map_eventWishEndlessInfoMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventWishEndlessInfoMap_.WriteTo(ref output, _map_eventWishEndlessInfoMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventWishEndlessInfoMap_.CalculateSize(_map_eventWishEndlessInfoMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventWishEndlessInfoMapABValue other) {
      if (other == null) {
        return;
      }
      eventWishEndlessInfoMap_.Add(other.eventWishEndlessInfoMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventWishEndlessInfoMap_.AddEntriesFrom(input, _map_eventWishEndlessInfoMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventWishEndlessInfoMap_.AddEntriesFrom(ref input, _map_eventWishEndlessInfoMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventWishEndlessInfoConf : pb::IMessage<EventWishEndlessInfoConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventWishEndlessInfoConf> _parser = new pb::MessageParser<EventWishEndlessInfoConf>(() => new EventWishEndlessInfoConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventWishEndlessInfoConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventWishEndlessInfoConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishEndlessInfoConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishEndlessInfoConf(EventWishEndlessInfoConf other) : this() {
      eventWishEndlessInfoMap_ = other.eventWishEndlessInfoMap_.Clone();
      eventWishEndlessInfoMapAB_ = other.eventWishEndlessInfoMapAB_.Clone();
      eventWishEndlessInfoMapABPatch_ = other.eventWishEndlessInfoMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishEndlessInfoConf Clone() {
      return new EventWishEndlessInfoConf(this);
    }

    /// <summary>Field number for the "EventWishEndlessInfoMap" field.</summary>
    public const int EventWishEndlessInfoMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventWishEndlessInfo>.Codec _map_eventWishEndlessInfoMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventWishEndlessInfo>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventWishEndlessInfo.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventWishEndlessInfo> eventWishEndlessInfoMap_ = new pbc::MapField<int, global::fat.rawdata.EventWishEndlessInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventWishEndlessInfo> EventWishEndlessInfoMap {
      get { return eventWishEndlessInfoMap_; }
    }

    /// <summary>Field number for the "EventWishEndlessInfoMapAB" field.</summary>
    public const int EventWishEndlessInfoMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventWishEndlessInfoMapABValue>.Codec _map_eventWishEndlessInfoMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventWishEndlessInfoMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventWishEndlessInfoMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventWishEndlessInfoMapABValue> eventWishEndlessInfoMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventWishEndlessInfoMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventWishEndlessInfoMapABValue> EventWishEndlessInfoMapAB {
      get { return eventWishEndlessInfoMapAB_; }
    }

    /// <summary>Field number for the "EventWishEndlessInfoMapABPatch" field.</summary>
    public const int EventWishEndlessInfoMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventWishEndlessInfoMapABValue>.Codec _map_eventWishEndlessInfoMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventWishEndlessInfoMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventWishEndlessInfoMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventWishEndlessInfoMapABValue> eventWishEndlessInfoMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventWishEndlessInfoMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventWishEndlessInfoMapABValue> EventWishEndlessInfoMapABPatch {
      get { return eventWishEndlessInfoMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventWishEndlessInfoConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventWishEndlessInfoConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventWishEndlessInfoMap.Equals(other.EventWishEndlessInfoMap)) return false;
      if (!EventWishEndlessInfoMapAB.Equals(other.EventWishEndlessInfoMapAB)) return false;
      if (!EventWishEndlessInfoMapABPatch.Equals(other.EventWishEndlessInfoMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventWishEndlessInfoMap.GetHashCode();
      hash ^= EventWishEndlessInfoMapAB.GetHashCode();
      hash ^= EventWishEndlessInfoMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventWishEndlessInfoMap_.WriteTo(output, _map_eventWishEndlessInfoMap_codec);
      eventWishEndlessInfoMapAB_.WriteTo(output, _map_eventWishEndlessInfoMapAB_codec);
      eventWishEndlessInfoMapABPatch_.WriteTo(output, _map_eventWishEndlessInfoMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventWishEndlessInfoMap_.WriteTo(ref output, _map_eventWishEndlessInfoMap_codec);
      eventWishEndlessInfoMapAB_.WriteTo(ref output, _map_eventWishEndlessInfoMapAB_codec);
      eventWishEndlessInfoMapABPatch_.WriteTo(ref output, _map_eventWishEndlessInfoMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventWishEndlessInfoMap_.CalculateSize(_map_eventWishEndlessInfoMap_codec);
      size += eventWishEndlessInfoMapAB_.CalculateSize(_map_eventWishEndlessInfoMapAB_codec);
      size += eventWishEndlessInfoMapABPatch_.CalculateSize(_map_eventWishEndlessInfoMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventWishEndlessInfoConf other) {
      if (other == null) {
        return;
      }
      eventWishEndlessInfoMap_.Add(other.eventWishEndlessInfoMap_);
      eventWishEndlessInfoMapAB_.Add(other.eventWishEndlessInfoMapAB_);
      eventWishEndlessInfoMapABPatch_.Add(other.eventWishEndlessInfoMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventWishEndlessInfoMap_.AddEntriesFrom(input, _map_eventWishEndlessInfoMap_codec);
            break;
          }
          case 18: {
            eventWishEndlessInfoMapAB_.AddEntriesFrom(input, _map_eventWishEndlessInfoMapAB_codec);
            break;
          }
          case 26: {
            eventWishEndlessInfoMapABPatch_.AddEntriesFrom(input, _map_eventWishEndlessInfoMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventWishEndlessInfoMap_.AddEntriesFrom(ref input, _map_eventWishEndlessInfoMap_codec);
            break;
          }
          case 18: {
            eventWishEndlessInfoMapAB_.AddEntriesFrom(ref input, _map_eventWishEndlessInfoMapAB_codec);
            break;
          }
          case 26: {
            eventWishEndlessInfoMapABPatch_.AddEntriesFrom(ref input, _map_eventWishEndlessInfoMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
