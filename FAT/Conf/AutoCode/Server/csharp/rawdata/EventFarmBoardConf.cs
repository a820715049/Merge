// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventFarmBoardConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventFarmBoardConf.proto</summary>
  public static partial class EventFarmBoardConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventFarmBoardConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventFarmBoardConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiByYXdkYXRhL0V2ZW50RmFybUJvYXJkQ29uZi5wcm90bxIHcmF3ZGF0YSLu",
            "AQoORXZlbnRGYXJtQm9hcmQSCgoCaWQYASABKAUSEgoKYm9hcmRUaGVtZRgC",
            "IAEoBRIMCgRjb3N0GAsgASgFEhYKDmVuZFJld2FyZFRoZW1lGAMgASgFEhAK",
            "CGVuZFRoZW1lGAQgASgFEhIKCmV2ZW50VGhlbWUYBSABKAUSEwoLZmluaXNo",
            "VGhlbWUYBiABKAUSDwoHZ3JhZGVJZBgHIAEoBRIRCgloZWxwVGhlbWUYCCAB",
            "KAUSFAoMbG9hZGluZ1RoZW1lGAkgASgFEg8KB3Rva2VuSWQYCiABKAUSEAoI",
            "dG9rZW5Vc2UYDCABKAUiwgEKGEV2ZW50RmFybUJvYXJkTWFwQUJWYWx1ZRJT",
            "ChFFdmVudEZhcm1Cb2FyZE1hcBgBIAMoCzI4LnJhd2RhdGEuRXZlbnRGYXJt",
            "Qm9hcmRNYXBBQlZhbHVlLkV2ZW50RmFybUJvYXJkTWFwRW50cnkaUQoWRXZl",
            "bnRGYXJtQm9hcmRNYXBFbnRyeRILCgNrZXkYASABKAUSJgoFdmFsdWUYAiAB",
            "KAsyFy5yYXdkYXRhLkV2ZW50RmFybUJvYXJkOgI4ASKpBAoSRXZlbnRGYXJt",
            "Qm9hcmRDb25mEk0KEUV2ZW50RmFybUJvYXJkTWFwGAEgAygLMjIucmF3ZGF0",
            "YS5FdmVudEZhcm1Cb2FyZENvbmYuRXZlbnRGYXJtQm9hcmRNYXBFbnRyeRJR",
            "ChNFdmVudEZhcm1Cb2FyZE1hcEFCGAIgAygLMjQucmF3ZGF0YS5FdmVudEZh",
            "cm1Cb2FyZENvbmYuRXZlbnRGYXJtQm9hcmRNYXBBQkVudHJ5ElsKGEV2ZW50",
            "RmFybUJvYXJkTWFwQUJQYXRjaBgDIAMoCzI5LnJhd2RhdGEuRXZlbnRGYXJt",
            "Qm9hcmRDb25mLkV2ZW50RmFybUJvYXJkTWFwQUJQYXRjaEVudHJ5GlEKFkV2",
            "ZW50RmFybUJvYXJkTWFwRW50cnkSCwoDa2V5GAEgASgFEiYKBXZhbHVlGAIg",
            "ASgLMhcucmF3ZGF0YS5FdmVudEZhcm1Cb2FyZDoCOAEaXQoYRXZlbnRGYXJt",
            "Qm9hcmRNYXBBQkVudHJ5EgsKA2tleRgBIAEoCRIwCgV2YWx1ZRgCIAEoCzIh",
            "LnJhd2RhdGEuRXZlbnRGYXJtQm9hcmRNYXBBQlZhbHVlOgI4ARpiCh1FdmVu",
            "dEZhcm1Cb2FyZE1hcEFCUGF0Y2hFbnRyeRILCgNrZXkYASABKAkSMAoFdmFs",
            "dWUYAiABKAsyIS5yYXdkYXRhLkV2ZW50RmFybUJvYXJkTWFwQUJWYWx1ZToC",
            "OAFCPVotZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9y",
            "YXdkYXRhqgILZmF0LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventFarmBoard), global::fat.rawdata.EventFarmBoard.Parser, new[]{ "Id", "BoardTheme", "Cost", "EndRewardTheme", "EndTheme", "EventTheme", "FinishTheme", "GradeId", "HelpTheme", "LoadingTheme", "TokenId", "TokenUse" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventFarmBoardMapABValue), global::fat.rawdata.EventFarmBoardMapABValue.Parser, new[]{ "EventFarmBoardMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventFarmBoardConf), global::fat.rawdata.EventFarmBoardConf.Parser, new[]{ "EventFarmBoardMap", "EventFarmBoardMapAB", "EventFarmBoardMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventFarmBoard",table="EventFarmBoardMap",table_wrapper="EventFarmBoardConf",map="true",map_key_type="int32",data="EventFarmBoardConf")
  /// annotation@ab(table_ab="EventFarmBoardMapAB",table_ab_patch="EventFarmBoardMapABPatch",table_ab_value="EventFarmBoardMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventFarmBoard(id="id")
  /// </summary>
  public sealed partial class EventFarmBoard : pb::IMessage<EventFarmBoard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFarmBoard> _parser = new pb::MessageParser<EventFarmBoard>(() => new EventFarmBoard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFarmBoard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventFarmBoardConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFarmBoard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFarmBoard(EventFarmBoard other) : this() {
      id_ = other.id_;
      boardTheme_ = other.boardTheme_;
      cost_ = other.cost_;
      endRewardTheme_ = other.endRewardTheme_;
      endTheme_ = other.endTheme_;
      eventTheme_ = other.eventTheme_;
      finishTheme_ = other.finishTheme_;
      gradeId_ = other.gradeId_;
      helpTheme_ = other.helpTheme_;
      loadingTheme_ = other.loadingTheme_;
      tokenId_ = other.tokenId_;
      tokenUse_ = other.tokenUse_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFarmBoard Clone() {
      return new EventFarmBoard(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardTheme" field.</summary>
    public const int BoardThemeFieldNumber = 2;
    private int boardTheme_;
    /// <summary>
    /// 棋盘
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardTheme {
      get { return boardTheme_; }
      set {
        boardTheme_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 11;
    private int cost_;
    /// <summary>
    /// 消耗内容
    /// （objbasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "endRewardTheme" field.</summary>
    public const int EndRewardThemeFieldNumber = 3;
    private int endRewardTheme_;
    /// <summary>
    /// 补领奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndRewardTheme {
      get { return endRewardTheme_; }
      set {
        endRewardTheme_ = value;
      }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 4;
    private int endTheme_;
    /// <summary>
    /// 结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 5;
    private int eventTheme_;
    /// <summary>
    /// 开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "finishTheme" field.</summary>
    public const int FinishThemeFieldNumber = 6;
    private int finishTheme_;
    /// <summary>
    /// 完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinishTheme {
      get { return finishTheme_; }
      set {
        finishTheme_ = value;
      }
    }

    /// <summary>Field number for the "gradeId" field.</summary>
    public const int GradeIdFieldNumber = 7;
    private int gradeId_;
    /// <summary>
    /// 分层
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeId {
      get { return gradeId_; }
      set {
        gradeId_ = value;
      }
    }

    /// <summary>Field number for the "helpTheme" field.</summary>
    public const int HelpThemeFieldNumber = 8;
    private int helpTheme_;
    /// <summary>
    /// 帮助
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpTheme {
      get { return helpTheme_; }
      set {
        helpTheme_ = value;
      }
    }

    /// <summary>Field number for the "loadingTheme" field.</summary>
    public const int LoadingThemeFieldNumber = 9;
    private int loadingTheme_;
    /// <summary>
    /// loading
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoadingTheme {
      get { return loadingTheme_; }
      set {
        loadingTheme_ = value;
      }
    }

    /// <summary>Field number for the "tokenId" field.</summary>
    public const int TokenIdFieldNumber = 10;
    private int tokenId_;
    /// <summary>
    /// tokenId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TokenId {
      get { return tokenId_; }
      set {
        tokenId_ = value;
      }
    }

    /// <summary>Field number for the "tokenUse" field.</summary>
    public const int TokenUseFieldNumber = 12;
    private int tokenUse_;
    /// <summary>
    /// 每次使用代币数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TokenUse {
      get { return tokenUse_; }
      set {
        tokenUse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFarmBoard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFarmBoard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardTheme != other.BoardTheme) return false;
      if (Cost != other.Cost) return false;
      if (EndRewardTheme != other.EndRewardTheme) return false;
      if (EndTheme != other.EndTheme) return false;
      if (EventTheme != other.EventTheme) return false;
      if (FinishTheme != other.FinishTheme) return false;
      if (GradeId != other.GradeId) return false;
      if (HelpTheme != other.HelpTheme) return false;
      if (LoadingTheme != other.LoadingTheme) return false;
      if (TokenId != other.TokenId) return false;
      if (TokenUse != other.TokenUse) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardTheme != 0) hash ^= BoardTheme.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (EndRewardTheme != 0) hash ^= EndRewardTheme.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (FinishTheme != 0) hash ^= FinishTheme.GetHashCode();
      if (GradeId != 0) hash ^= GradeId.GetHashCode();
      if (HelpTheme != 0) hash ^= HelpTheme.GetHashCode();
      if (LoadingTheme != 0) hash ^= LoadingTheme.GetHashCode();
      if (TokenId != 0) hash ^= TokenId.GetHashCode();
      if (TokenUse != 0) hash ^= TokenUse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardTheme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardTheme);
      }
      if (EndRewardTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndRewardTheme);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTheme);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EventTheme);
      }
      if (FinishTheme != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FinishTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GradeId);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HelpTheme);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LoadingTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TokenId);
      }
      if (Cost != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Cost);
      }
      if (TokenUse != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TokenUse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardTheme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardTheme);
      }
      if (EndRewardTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndRewardTheme);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTheme);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EventTheme);
      }
      if (FinishTheme != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FinishTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GradeId);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HelpTheme);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LoadingTheme);
      }
      if (TokenId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TokenId);
      }
      if (Cost != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Cost);
      }
      if (TokenUse != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TokenUse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardTheme);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (EndRewardTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndRewardTheme);
      }
      if (EndTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (FinishTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinishTheme);
      }
      if (GradeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeId);
      }
      if (HelpTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HelpTheme);
      }
      if (LoadingTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoadingTheme);
      }
      if (TokenId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TokenId);
      }
      if (TokenUse != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TokenUse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFarmBoard other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardTheme != 0) {
        BoardTheme = other.BoardTheme;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.EndRewardTheme != 0) {
        EndRewardTheme = other.EndRewardTheme;
      }
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.FinishTheme != 0) {
        FinishTheme = other.FinishTheme;
      }
      if (other.GradeId != 0) {
        GradeId = other.GradeId;
      }
      if (other.HelpTheme != 0) {
        HelpTheme = other.HelpTheme;
      }
      if (other.LoadingTheme != 0) {
        LoadingTheme = other.LoadingTheme;
      }
      if (other.TokenId != 0) {
        TokenId = other.TokenId;
      }
      if (other.TokenUse != 0) {
        TokenUse = other.TokenUse;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardTheme = input.ReadInt32();
            break;
          }
          case 24: {
            EndRewardTheme = input.ReadInt32();
            break;
          }
          case 32: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 40: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 48: {
            FinishTheme = input.ReadInt32();
            break;
          }
          case 56: {
            GradeId = input.ReadInt32();
            break;
          }
          case 64: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 72: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 80: {
            TokenId = input.ReadInt32();
            break;
          }
          case 88: {
            Cost = input.ReadInt32();
            break;
          }
          case 96: {
            TokenUse = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardTheme = input.ReadInt32();
            break;
          }
          case 24: {
            EndRewardTheme = input.ReadInt32();
            break;
          }
          case 32: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 40: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 48: {
            FinishTheme = input.ReadInt32();
            break;
          }
          case 56: {
            GradeId = input.ReadInt32();
            break;
          }
          case 64: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 72: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 80: {
            TokenId = input.ReadInt32();
            break;
          }
          case 88: {
            Cost = input.ReadInt32();
            break;
          }
          case 96: {
            TokenUse = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventFarmBoardMapABValue : pb::IMessage<EventFarmBoardMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFarmBoardMapABValue> _parser = new pb::MessageParser<EventFarmBoardMapABValue>(() => new EventFarmBoardMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFarmBoardMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventFarmBoardConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFarmBoardMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFarmBoardMapABValue(EventFarmBoardMapABValue other) : this() {
      eventFarmBoardMap_ = other.eventFarmBoardMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFarmBoardMapABValue Clone() {
      return new EventFarmBoardMapABValue(this);
    }

    /// <summary>Field number for the "EventFarmBoardMap" field.</summary>
    public const int EventFarmBoardMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventFarmBoard>.Codec _map_eventFarmBoardMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventFarmBoard>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFarmBoard.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventFarmBoard> eventFarmBoardMap_ = new pbc::MapField<int, global::fat.rawdata.EventFarmBoard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventFarmBoard> EventFarmBoardMap {
      get { return eventFarmBoardMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFarmBoardMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFarmBoardMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventFarmBoardMap.Equals(other.EventFarmBoardMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventFarmBoardMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventFarmBoardMap_.WriteTo(output, _map_eventFarmBoardMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventFarmBoardMap_.WriteTo(ref output, _map_eventFarmBoardMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventFarmBoardMap_.CalculateSize(_map_eventFarmBoardMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFarmBoardMapABValue other) {
      if (other == null) {
        return;
      }
      eventFarmBoardMap_.Add(other.eventFarmBoardMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventFarmBoardMap_.AddEntriesFrom(input, _map_eventFarmBoardMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventFarmBoardMap_.AddEntriesFrom(ref input, _map_eventFarmBoardMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventFarmBoardConf : pb::IMessage<EventFarmBoardConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFarmBoardConf> _parser = new pb::MessageParser<EventFarmBoardConf>(() => new EventFarmBoardConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFarmBoardConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventFarmBoardConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFarmBoardConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFarmBoardConf(EventFarmBoardConf other) : this() {
      eventFarmBoardMap_ = other.eventFarmBoardMap_.Clone();
      eventFarmBoardMapAB_ = other.eventFarmBoardMapAB_.Clone();
      eventFarmBoardMapABPatch_ = other.eventFarmBoardMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFarmBoardConf Clone() {
      return new EventFarmBoardConf(this);
    }

    /// <summary>Field number for the "EventFarmBoardMap" field.</summary>
    public const int EventFarmBoardMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventFarmBoard>.Codec _map_eventFarmBoardMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventFarmBoard>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFarmBoard.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventFarmBoard> eventFarmBoardMap_ = new pbc::MapField<int, global::fat.rawdata.EventFarmBoard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventFarmBoard> EventFarmBoardMap {
      get { return eventFarmBoardMap_; }
    }

    /// <summary>Field number for the "EventFarmBoardMapAB" field.</summary>
    public const int EventFarmBoardMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventFarmBoardMapABValue>.Codec _map_eventFarmBoardMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventFarmBoardMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFarmBoardMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventFarmBoardMapABValue> eventFarmBoardMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventFarmBoardMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventFarmBoardMapABValue> EventFarmBoardMapAB {
      get { return eventFarmBoardMapAB_; }
    }

    /// <summary>Field number for the "EventFarmBoardMapABPatch" field.</summary>
    public const int EventFarmBoardMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventFarmBoardMapABValue>.Codec _map_eventFarmBoardMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventFarmBoardMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFarmBoardMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventFarmBoardMapABValue> eventFarmBoardMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventFarmBoardMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventFarmBoardMapABValue> EventFarmBoardMapABPatch {
      get { return eventFarmBoardMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFarmBoardConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFarmBoardConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventFarmBoardMap.Equals(other.EventFarmBoardMap)) return false;
      if (!EventFarmBoardMapAB.Equals(other.EventFarmBoardMapAB)) return false;
      if (!EventFarmBoardMapABPatch.Equals(other.EventFarmBoardMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventFarmBoardMap.GetHashCode();
      hash ^= EventFarmBoardMapAB.GetHashCode();
      hash ^= EventFarmBoardMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventFarmBoardMap_.WriteTo(output, _map_eventFarmBoardMap_codec);
      eventFarmBoardMapAB_.WriteTo(output, _map_eventFarmBoardMapAB_codec);
      eventFarmBoardMapABPatch_.WriteTo(output, _map_eventFarmBoardMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventFarmBoardMap_.WriteTo(ref output, _map_eventFarmBoardMap_codec);
      eventFarmBoardMapAB_.WriteTo(ref output, _map_eventFarmBoardMapAB_codec);
      eventFarmBoardMapABPatch_.WriteTo(ref output, _map_eventFarmBoardMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventFarmBoardMap_.CalculateSize(_map_eventFarmBoardMap_codec);
      size += eventFarmBoardMapAB_.CalculateSize(_map_eventFarmBoardMapAB_codec);
      size += eventFarmBoardMapABPatch_.CalculateSize(_map_eventFarmBoardMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFarmBoardConf other) {
      if (other == null) {
        return;
      }
      eventFarmBoardMap_.Add(other.eventFarmBoardMap_);
      eventFarmBoardMapAB_.Add(other.eventFarmBoardMapAB_);
      eventFarmBoardMapABPatch_.Add(other.eventFarmBoardMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventFarmBoardMap_.AddEntriesFrom(input, _map_eventFarmBoardMap_codec);
            break;
          }
          case 18: {
            eventFarmBoardMapAB_.AddEntriesFrom(input, _map_eventFarmBoardMapAB_codec);
            break;
          }
          case 26: {
            eventFarmBoardMapABPatch_.AddEntriesFrom(input, _map_eventFarmBoardMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventFarmBoardMap_.AddEntriesFrom(ref input, _map_eventFarmBoardMap_codec);
            break;
          }
          case 18: {
            eventFarmBoardMapAB_.AddEntriesFrom(ref input, _map_eventFarmBoardMapAB_codec);
            break;
          }
          case 26: {
            eventFarmBoardMapABPatch_.AddEntriesFrom(ref input, _map_eventFarmBoardMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
