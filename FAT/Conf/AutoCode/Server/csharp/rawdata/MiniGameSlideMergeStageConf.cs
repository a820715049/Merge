// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/MiniGameSlideMergeStageConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/MiniGameSlideMergeStageConf.proto</summary>
  public static partial class MiniGameSlideMergeStageConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/MiniGameSlideMergeStageConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MiniGameSlideMergeStageConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CilyYXdkYXRhL01pbmlHYW1lU2xpZGVNZXJnZVN0YWdlQ29uZi5wcm90bxIH",
            "cmF3ZGF0YSKcAQoXTWluaUdhbWVTbGlkZU1lcmdlU3RhZ2USCgoCaWQYASAB",
            "KAUSEQoJZml4ZWRQb29sGAIgAygFEhQKDGluaXRpYWxQbGFjZRgDIAMoCRIU",
            "Cgxpbml0aWFsU3RhdGUYBCADKAUSEAoIaXRlbUxpc3QYBSADKAUSEgoKcmFu",
            "ZG9tUG9vbBgGIAMoCRIQCghyZW1vdmluZxgHIAEoBSL4AQohTWluaUdhbWVT",
            "bGlkZU1lcmdlU3RhZ2VNYXBBQlZhbHVlEm4KGk1pbmlHYW1lU2xpZGVNZXJn",
            "ZVN0YWdlTWFwGAEgAygLMkoucmF3ZGF0YS5NaW5pR2FtZVNsaWRlTWVyZ2VT",
            "dGFnZU1hcEFCVmFsdWUuTWluaUdhbWVTbGlkZU1lcmdlU3RhZ2VNYXBFbnRy",
            "eRpjCh9NaW5pR2FtZVNsaWRlTWVyZ2VTdGFnZU1hcEVudHJ5EgsKA2tleRgB",
            "IAEoBRIvCgV2YWx1ZRgCIAEoCzIgLnJhd2RhdGEuTWluaUdhbWVTbGlkZU1l",
            "cmdlU3RhZ2U6AjgBIrkFChtNaW5pR2FtZVNsaWRlTWVyZ2VTdGFnZUNvbmYS",
            "aAoaTWluaUdhbWVTbGlkZU1lcmdlU3RhZ2VNYXAYASADKAsyRC5yYXdkYXRh",
            "Lk1pbmlHYW1lU2xpZGVNZXJnZVN0YWdlQ29uZi5NaW5pR2FtZVNsaWRlTWVy",
            "Z2VTdGFnZU1hcEVudHJ5EmwKHE1pbmlHYW1lU2xpZGVNZXJnZVN0YWdlTWFw",
            "QUIYAiADKAsyRi5yYXdkYXRhLk1pbmlHYW1lU2xpZGVNZXJnZVN0YWdlQ29u",
            "Zi5NaW5pR2FtZVNsaWRlTWVyZ2VTdGFnZU1hcEFCRW50cnkSdgohTWluaUdh",
            "bWVTbGlkZU1lcmdlU3RhZ2VNYXBBQlBhdGNoGAMgAygLMksucmF3ZGF0YS5N",
            "aW5pR2FtZVNsaWRlTWVyZ2VTdGFnZUNvbmYuTWluaUdhbWVTbGlkZU1lcmdl",
            "U3RhZ2VNYXBBQlBhdGNoRW50cnkaYwofTWluaUdhbWVTbGlkZU1lcmdlU3Rh",
            "Z2VNYXBFbnRyeRILCgNrZXkYASABKAUSLwoFdmFsdWUYAiABKAsyIC5yYXdk",
            "YXRhLk1pbmlHYW1lU2xpZGVNZXJnZVN0YWdlOgI4ARpvCiFNaW5pR2FtZVNs",
            "aWRlTWVyZ2VTdGFnZU1hcEFCRW50cnkSCwoDa2V5GAEgASgJEjkKBXZhbHVl",
            "GAIgASgLMioucmF3ZGF0YS5NaW5pR2FtZVNsaWRlTWVyZ2VTdGFnZU1hcEFC",
            "VmFsdWU6AjgBGnQKJk1pbmlHYW1lU2xpZGVNZXJnZVN0YWdlTWFwQUJQYXRj",
            "aEVudHJ5EgsKA2tleRgBIAEoCRI5CgV2YWx1ZRgCIAEoCzIqLnJhd2RhdGEu",
            "TWluaUdhbWVTbGlkZU1lcmdlU3RhZ2VNYXBBQlZhbHVlOgI4AUI9Wi1naXRs",
            "YWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtm",
            "YXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MiniGameSlideMergeStage), global::fat.rawdata.MiniGameSlideMergeStage.Parser, new[]{ "Id", "FixedPool", "InitialPlace", "InitialState", "ItemList", "RandomPool", "Removing" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MiniGameSlideMergeStageMapABValue), global::fat.rawdata.MiniGameSlideMergeStageMapABValue.Parser, new[]{ "MiniGameSlideMergeStageMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MiniGameSlideMergeStageConf), global::fat.rawdata.MiniGameSlideMergeStageConf.Parser, new[]{ "MiniGameSlideMergeStageMap", "MiniGameSlideMergeStageMapAB", "MiniGameSlideMergeStageMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="MiniGameSlideMergeStage",table="MiniGameSlideMergeStageMap",table_wrapper="MiniGameSlideMergeStageConf",map="true",map_key_type="int32",data="MiniGameSlideMergeStageConf")
  /// annotation@ab(table_ab="MiniGameSlideMergeStageMapAB",table_ab_patch="MiniGameSlideMergeStageMapABPatch",table_ab_value="MiniGameSlideMergeStageMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@MiniGameSlideMergeStage(id="id")
  /// </summary>
  public sealed partial class MiniGameSlideMergeStage : pb::IMessage<MiniGameSlideMergeStage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameSlideMergeStage> _parser = new pb::MessageParser<MiniGameSlideMergeStage>(() => new MiniGameSlideMergeStage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameSlideMergeStage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MiniGameSlideMergeStageConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeStage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeStage(MiniGameSlideMergeStage other) : this() {
      id_ = other.id_;
      fixedPool_ = other.fixedPool_.Clone();
      initialPlace_ = other.initialPlace_.Clone();
      initialState_ = other.initialState_.Clone();
      itemList_ = other.itemList_.Clone();
      randomPool_ = other.randomPool_.Clone();
      removing_ = other.removing_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeStage Clone() {
      return new MiniGameSlideMergeStage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// stage.ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "fixedPool" field.</summary>
    public const int FixedPoolFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_fixedPool_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> fixedPool_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 下一个固定配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FixedPool {
      get { return fixedPool_; }
    }

    /// <summary>Field number for the "initialPlace" field.</summary>
    public const int InitialPlaceFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_initialPlace_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> initialPlace_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 初始棋盘物品位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InitialPlace {
      get { return initialPlace_; }
    }

    /// <summary>Field number for the "initialState" field.</summary>
    public const int InitialStateFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_initialState_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> initialState_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 初始棋盘物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> InitialState {
      get { return initialState_; }
    }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_itemList_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> itemList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 合成链条
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "randomPool" field.</summary>
    public const int RandomPoolFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_randomPool_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> randomPool_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 下一个权重随机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RandomPool {
      get { return randomPool_; }
    }

    /// <summary>Field number for the "removing" field.</summary>
    public const int RemovingFieldNumber = 7;
    private int removing_;
    /// <summary>
    /// 棋盘虚线距离偏移（百分比，从上往下）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Removing {
      get { return removing_; }
      set {
        removing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameSlideMergeStage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameSlideMergeStage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!fixedPool_.Equals(other.fixedPool_)) return false;
      if(!initialPlace_.Equals(other.initialPlace_)) return false;
      if(!initialState_.Equals(other.initialState_)) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      if(!randomPool_.Equals(other.randomPool_)) return false;
      if (Removing != other.Removing) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= fixedPool_.GetHashCode();
      hash ^= initialPlace_.GetHashCode();
      hash ^= initialState_.GetHashCode();
      hash ^= itemList_.GetHashCode();
      hash ^= randomPool_.GetHashCode();
      if (Removing != 0) hash ^= Removing.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      fixedPool_.WriteTo(output, _repeated_fixedPool_codec);
      initialPlace_.WriteTo(output, _repeated_initialPlace_codec);
      initialState_.WriteTo(output, _repeated_initialState_codec);
      itemList_.WriteTo(output, _repeated_itemList_codec);
      randomPool_.WriteTo(output, _repeated_randomPool_codec);
      if (Removing != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Removing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      fixedPool_.WriteTo(ref output, _repeated_fixedPool_codec);
      initialPlace_.WriteTo(ref output, _repeated_initialPlace_codec);
      initialState_.WriteTo(ref output, _repeated_initialState_codec);
      itemList_.WriteTo(ref output, _repeated_itemList_codec);
      randomPool_.WriteTo(ref output, _repeated_randomPool_codec);
      if (Removing != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Removing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += fixedPool_.CalculateSize(_repeated_fixedPool_codec);
      size += initialPlace_.CalculateSize(_repeated_initialPlace_codec);
      size += initialState_.CalculateSize(_repeated_initialState_codec);
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      size += randomPool_.CalculateSize(_repeated_randomPool_codec);
      if (Removing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Removing);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameSlideMergeStage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      fixedPool_.Add(other.fixedPool_);
      initialPlace_.Add(other.initialPlace_);
      initialState_.Add(other.initialState_);
      itemList_.Add(other.itemList_);
      randomPool_.Add(other.randomPool_);
      if (other.Removing != 0) {
        Removing = other.Removing;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            fixedPool_.AddEntriesFrom(input, _repeated_fixedPool_codec);
            break;
          }
          case 26: {
            initialPlace_.AddEntriesFrom(input, _repeated_initialPlace_codec);
            break;
          }
          case 34:
          case 32: {
            initialState_.AddEntriesFrom(input, _repeated_initialState_codec);
            break;
          }
          case 42:
          case 40: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 50: {
            randomPool_.AddEntriesFrom(input, _repeated_randomPool_codec);
            break;
          }
          case 56: {
            Removing = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            fixedPool_.AddEntriesFrom(ref input, _repeated_fixedPool_codec);
            break;
          }
          case 26: {
            initialPlace_.AddEntriesFrom(ref input, _repeated_initialPlace_codec);
            break;
          }
          case 34:
          case 32: {
            initialState_.AddEntriesFrom(ref input, _repeated_initialState_codec);
            break;
          }
          case 42:
          case 40: {
            itemList_.AddEntriesFrom(ref input, _repeated_itemList_codec);
            break;
          }
          case 50: {
            randomPool_.AddEntriesFrom(ref input, _repeated_randomPool_codec);
            break;
          }
          case 56: {
            Removing = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MiniGameSlideMergeStageMapABValue : pb::IMessage<MiniGameSlideMergeStageMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameSlideMergeStageMapABValue> _parser = new pb::MessageParser<MiniGameSlideMergeStageMapABValue>(() => new MiniGameSlideMergeStageMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameSlideMergeStageMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MiniGameSlideMergeStageConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeStageMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeStageMapABValue(MiniGameSlideMergeStageMapABValue other) : this() {
      miniGameSlideMergeStageMap_ = other.miniGameSlideMergeStageMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeStageMapABValue Clone() {
      return new MiniGameSlideMergeStageMapABValue(this);
    }

    /// <summary>Field number for the "MiniGameSlideMergeStageMap" field.</summary>
    public const int MiniGameSlideMergeStageMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeStage>.Codec _map_miniGameSlideMergeStageMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeStage>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSlideMergeStage.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeStage> miniGameSlideMergeStageMap_ = new pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeStage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeStage> MiniGameSlideMergeStageMap {
      get { return miniGameSlideMergeStageMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameSlideMergeStageMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameSlideMergeStageMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MiniGameSlideMergeStageMap.Equals(other.MiniGameSlideMergeStageMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MiniGameSlideMergeStageMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      miniGameSlideMergeStageMap_.WriteTo(output, _map_miniGameSlideMergeStageMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      miniGameSlideMergeStageMap_.WriteTo(ref output, _map_miniGameSlideMergeStageMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += miniGameSlideMergeStageMap_.CalculateSize(_map_miniGameSlideMergeStageMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameSlideMergeStageMapABValue other) {
      if (other == null) {
        return;
      }
      miniGameSlideMergeStageMap_.Add(other.miniGameSlideMergeStageMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            miniGameSlideMergeStageMap_.AddEntriesFrom(input, _map_miniGameSlideMergeStageMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            miniGameSlideMergeStageMap_.AddEntriesFrom(ref input, _map_miniGameSlideMergeStageMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MiniGameSlideMergeStageConf : pb::IMessage<MiniGameSlideMergeStageConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameSlideMergeStageConf> _parser = new pb::MessageParser<MiniGameSlideMergeStageConf>(() => new MiniGameSlideMergeStageConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameSlideMergeStageConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MiniGameSlideMergeStageConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeStageConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeStageConf(MiniGameSlideMergeStageConf other) : this() {
      miniGameSlideMergeStageMap_ = other.miniGameSlideMergeStageMap_.Clone();
      miniGameSlideMergeStageMapAB_ = other.miniGameSlideMergeStageMapAB_.Clone();
      miniGameSlideMergeStageMapABPatch_ = other.miniGameSlideMergeStageMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameSlideMergeStageConf Clone() {
      return new MiniGameSlideMergeStageConf(this);
    }

    /// <summary>Field number for the "MiniGameSlideMergeStageMap" field.</summary>
    public const int MiniGameSlideMergeStageMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeStage>.Codec _map_miniGameSlideMergeStageMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeStage>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSlideMergeStage.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeStage> miniGameSlideMergeStageMap_ = new pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeStage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MiniGameSlideMergeStage> MiniGameSlideMergeStageMap {
      get { return miniGameSlideMergeStageMap_; }
    }

    /// <summary>Field number for the "MiniGameSlideMergeStageMapAB" field.</summary>
    public const int MiniGameSlideMergeStageMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeStageMapABValue>.Codec _map_miniGameSlideMergeStageMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeStageMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSlideMergeStageMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeStageMapABValue> miniGameSlideMergeStageMapAB_ = new pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeStageMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeStageMapABValue> MiniGameSlideMergeStageMapAB {
      get { return miniGameSlideMergeStageMapAB_; }
    }

    /// <summary>Field number for the "MiniGameSlideMergeStageMapABPatch" field.</summary>
    public const int MiniGameSlideMergeStageMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeStageMapABValue>.Codec _map_miniGameSlideMergeStageMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeStageMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameSlideMergeStageMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeStageMapABValue> miniGameSlideMergeStageMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeStageMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MiniGameSlideMergeStageMapABValue> MiniGameSlideMergeStageMapABPatch {
      get { return miniGameSlideMergeStageMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameSlideMergeStageConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameSlideMergeStageConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MiniGameSlideMergeStageMap.Equals(other.MiniGameSlideMergeStageMap)) return false;
      if (!MiniGameSlideMergeStageMapAB.Equals(other.MiniGameSlideMergeStageMapAB)) return false;
      if (!MiniGameSlideMergeStageMapABPatch.Equals(other.MiniGameSlideMergeStageMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MiniGameSlideMergeStageMap.GetHashCode();
      hash ^= MiniGameSlideMergeStageMapAB.GetHashCode();
      hash ^= MiniGameSlideMergeStageMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      miniGameSlideMergeStageMap_.WriteTo(output, _map_miniGameSlideMergeStageMap_codec);
      miniGameSlideMergeStageMapAB_.WriteTo(output, _map_miniGameSlideMergeStageMapAB_codec);
      miniGameSlideMergeStageMapABPatch_.WriteTo(output, _map_miniGameSlideMergeStageMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      miniGameSlideMergeStageMap_.WriteTo(ref output, _map_miniGameSlideMergeStageMap_codec);
      miniGameSlideMergeStageMapAB_.WriteTo(ref output, _map_miniGameSlideMergeStageMapAB_codec);
      miniGameSlideMergeStageMapABPatch_.WriteTo(ref output, _map_miniGameSlideMergeStageMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += miniGameSlideMergeStageMap_.CalculateSize(_map_miniGameSlideMergeStageMap_codec);
      size += miniGameSlideMergeStageMapAB_.CalculateSize(_map_miniGameSlideMergeStageMapAB_codec);
      size += miniGameSlideMergeStageMapABPatch_.CalculateSize(_map_miniGameSlideMergeStageMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameSlideMergeStageConf other) {
      if (other == null) {
        return;
      }
      miniGameSlideMergeStageMap_.Add(other.miniGameSlideMergeStageMap_);
      miniGameSlideMergeStageMapAB_.Add(other.miniGameSlideMergeStageMapAB_);
      miniGameSlideMergeStageMapABPatch_.Add(other.miniGameSlideMergeStageMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            miniGameSlideMergeStageMap_.AddEntriesFrom(input, _map_miniGameSlideMergeStageMap_codec);
            break;
          }
          case 18: {
            miniGameSlideMergeStageMapAB_.AddEntriesFrom(input, _map_miniGameSlideMergeStageMapAB_codec);
            break;
          }
          case 26: {
            miniGameSlideMergeStageMapABPatch_.AddEntriesFrom(input, _map_miniGameSlideMergeStageMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            miniGameSlideMergeStageMap_.AddEntriesFrom(ref input, _map_miniGameSlideMergeStageMap_codec);
            break;
          }
          case 18: {
            miniGameSlideMergeStageMapAB_.AddEntriesFrom(ref input, _map_miniGameSlideMergeStageMapAB_codec);
            break;
          }
          case 26: {
            miniGameSlideMergeStageMapABPatch_.AddEntriesFrom(ref input, _map_miniGameSlideMergeStageMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
