// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/ObjToolConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/ObjToolConf.proto</summary>
  public static partial class ObjToolConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/ObjToolConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ObjToolConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlyYXdkYXRhL09ialRvb2xDb25mLnByb3RvEgdyYXdkYXRhInwKB09ialRv",
            "b2wSCgoCaWQYASABKAUSEAoIZGVzY3JpYmUYAiABKAkSEAoIaXNBY3RpdmUY",
            "AyABKAgSFwoPcmVsYXRlZENhdGVnb3J5GAUgASgFEhEKCXRvb2xTY29yZRgE",
            "IAEoBRIVCg10dXRvcmlhbEltYWdlGAYgASgJIpgBChFPYmpUb29sTWFwQUJW",
            "YWx1ZRI+CgpPYmpUb29sTWFwGAEgAygLMioucmF3ZGF0YS5PYmpUb29sTWFw",
            "QUJWYWx1ZS5PYmpUb29sTWFwRW50cnkaQwoPT2JqVG9vbE1hcEVudHJ5EgsK",
            "A2tleRgBIAEoBRIfCgV2YWx1ZRgCIAEoCzIQLnJhd2RhdGEuT2JqVG9vbDoC",
            "OAEiuQMKC09ialRvb2xDb25mEjgKCk9ialRvb2xNYXAYASADKAsyJC5yYXdk",
            "YXRhLk9ialRvb2xDb25mLk9ialRvb2xNYXBFbnRyeRI8CgxPYmpUb29sTWFw",
            "QUIYAiADKAsyJi5yYXdkYXRhLk9ialRvb2xDb25mLk9ialRvb2xNYXBBQkVu",
            "dHJ5EkYKEU9ialRvb2xNYXBBQlBhdGNoGAMgAygLMisucmF3ZGF0YS5PYmpU",
            "b29sQ29uZi5PYmpUb29sTWFwQUJQYXRjaEVudHJ5GkMKD09ialRvb2xNYXBF",
            "bnRyeRILCgNrZXkYASABKAUSHwoFdmFsdWUYAiABKAsyEC5yYXdkYXRhLk9i",
            "alRvb2w6AjgBGk8KEU9ialRvb2xNYXBBQkVudHJ5EgsKA2tleRgBIAEoCRIp",
            "CgV2YWx1ZRgCIAEoCzIaLnJhd2RhdGEuT2JqVG9vbE1hcEFCVmFsdWU6AjgB",
            "GlQKFk9ialRvb2xNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEikKBXZh",
            "bHVlGAIgASgLMhoucmF3ZGF0YS5PYmpUb29sTWFwQUJWYWx1ZToCOAFCPVot",
            "Z2l0bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdkYXRh",
            "qgILZmF0LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ObjTool), global::fat.rawdata.ObjTool.Parser, new[]{ "Id", "Describe", "IsActive", "RelatedCategory", "ToolScore", "TutorialImage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ObjToolMapABValue), global::fat.rawdata.ObjToolMapABValue.Parser, new[]{ "ObjToolMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.ObjToolConf), global::fat.rawdata.ObjToolConf.Parser, new[]{ "ObjToolMap", "ObjToolMapAB", "ObjToolMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="ObjTool",table="ObjToolMap",table_wrapper="ObjToolConf",map="true",map_key_type="int32",data="ObjToolConf")
  /// annotation@ab(table_ab="ObjToolMapAB",table_ab_patch="ObjToolMapABPatch",table_ab_value="ObjToolMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@ObjTool(id="id")
  /// </summary>
  public sealed partial class ObjTool : pb::IMessage<ObjTool>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjTool> _parser = new pb::MessageParser<ObjTool>(() => new ObjTool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjTool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ObjToolConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjTool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjTool(ObjTool other) : this() {
      id_ = other.id_;
      describe_ = other.describe_;
      isActive_ = other.isActive_;
      relatedCategory_ = other.relatedCategory_;
      toolScore_ = other.toolScore_;
      tutorialImage_ = other.tutorialImage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjTool Clone() {
      return new ObjTool(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 货币ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "describe" field.</summary>
    public const int DescribeFieldNumber = 2;
    private string describe_ = "";
    /// <summary>
    /// 策划用描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Describe {
      get { return describe_; }
      set {
        describe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isActive" field.</summary>
    public const int IsActiveFieldNumber = 3;
    private bool isActive_;
    /// <summary>
    /// 是否开放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "relatedCategory" field.</summary>
    public const int RelatedCategoryFieldNumber = 5;
    private int relatedCategory_;
    /// <summary>
    /// 对应链条ID
    /// （MergeItemCategory.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RelatedCategory {
      get { return relatedCategory_; }
      set {
        relatedCategory_ = value;
      }
    }

    /// <summary>Field number for the "toolScore" field.</summary>
    public const int ToolScoreFieldNumber = 4;
    private int toolScore_;
    /// <summary>
    /// 为精准工具库存提供分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToolScore {
      get { return toolScore_; }
      set {
        toolScore_ = value;
      }
    }

    /// <summary>Field number for the "tutorialImage" field.</summary>
    public const int TutorialImageFieldNumber = 6;
    private string tutorialImage_ = "";
    /// <summary>
    /// 教学界面配图
    /// （Asset）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TutorialImage {
      get { return tutorialImage_; }
      set {
        tutorialImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjTool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjTool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Describe != other.Describe) return false;
      if (IsActive != other.IsActive) return false;
      if (RelatedCategory != other.RelatedCategory) return false;
      if (ToolScore != other.ToolScore) return false;
      if (TutorialImage != other.TutorialImage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Describe.Length != 0) hash ^= Describe.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (RelatedCategory != 0) hash ^= RelatedCategory.GetHashCode();
      if (ToolScore != 0) hash ^= ToolScore.GetHashCode();
      if (TutorialImage.Length != 0) hash ^= TutorialImage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Describe.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Describe);
      }
      if (IsActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsActive);
      }
      if (ToolScore != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ToolScore);
      }
      if (RelatedCategory != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RelatedCategory);
      }
      if (TutorialImage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TutorialImage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Describe.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Describe);
      }
      if (IsActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsActive);
      }
      if (ToolScore != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ToolScore);
      }
      if (RelatedCategory != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RelatedCategory);
      }
      if (TutorialImage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TutorialImage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Describe.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Describe);
      }
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (RelatedCategory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RelatedCategory);
      }
      if (ToolScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToolScore);
      }
      if (TutorialImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TutorialImage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjTool other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Describe.Length != 0) {
        Describe = other.Describe;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      if (other.RelatedCategory != 0) {
        RelatedCategory = other.RelatedCategory;
      }
      if (other.ToolScore != 0) {
        ToolScore = other.ToolScore;
      }
      if (other.TutorialImage.Length != 0) {
        TutorialImage = other.TutorialImage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Describe = input.ReadString();
            break;
          }
          case 24: {
            IsActive = input.ReadBool();
            break;
          }
          case 32: {
            ToolScore = input.ReadInt32();
            break;
          }
          case 40: {
            RelatedCategory = input.ReadInt32();
            break;
          }
          case 50: {
            TutorialImage = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Describe = input.ReadString();
            break;
          }
          case 24: {
            IsActive = input.ReadBool();
            break;
          }
          case 32: {
            ToolScore = input.ReadInt32();
            break;
          }
          case 40: {
            RelatedCategory = input.ReadInt32();
            break;
          }
          case 50: {
            TutorialImage = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjToolMapABValue : pb::IMessage<ObjToolMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjToolMapABValue> _parser = new pb::MessageParser<ObjToolMapABValue>(() => new ObjToolMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjToolMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ObjToolConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjToolMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjToolMapABValue(ObjToolMapABValue other) : this() {
      objToolMap_ = other.objToolMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjToolMapABValue Clone() {
      return new ObjToolMapABValue(this);
    }

    /// <summary>Field number for the "ObjToolMap" field.</summary>
    public const int ObjToolMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.ObjTool>.Codec _map_objToolMap_codec
        = new pbc::MapField<int, global::fat.rawdata.ObjTool>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjTool.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.ObjTool> objToolMap_ = new pbc::MapField<int, global::fat.rawdata.ObjTool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.ObjTool> ObjToolMap {
      get { return objToolMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjToolMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjToolMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ObjToolMap.Equals(other.ObjToolMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ObjToolMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objToolMap_.WriteTo(output, _map_objToolMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objToolMap_.WriteTo(ref output, _map_objToolMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objToolMap_.CalculateSize(_map_objToolMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjToolMapABValue other) {
      if (other == null) {
        return;
      }
      objToolMap_.Add(other.objToolMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objToolMap_.AddEntriesFrom(input, _map_objToolMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objToolMap_.AddEntriesFrom(ref input, _map_objToolMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjToolConf : pb::IMessage<ObjToolConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjToolConf> _parser = new pb::MessageParser<ObjToolConf>(() => new ObjToolConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjToolConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.ObjToolConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjToolConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjToolConf(ObjToolConf other) : this() {
      objToolMap_ = other.objToolMap_.Clone();
      objToolMapAB_ = other.objToolMapAB_.Clone();
      objToolMapABPatch_ = other.objToolMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjToolConf Clone() {
      return new ObjToolConf(this);
    }

    /// <summary>Field number for the "ObjToolMap" field.</summary>
    public const int ObjToolMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.ObjTool>.Codec _map_objToolMap_codec
        = new pbc::MapField<int, global::fat.rawdata.ObjTool>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjTool.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.ObjTool> objToolMap_ = new pbc::MapField<int, global::fat.rawdata.ObjTool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.ObjTool> ObjToolMap {
      get { return objToolMap_; }
    }

    /// <summary>Field number for the "ObjToolMapAB" field.</summary>
    public const int ObjToolMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.ObjToolMapABValue>.Codec _map_objToolMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.ObjToolMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjToolMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.ObjToolMapABValue> objToolMapAB_ = new pbc::MapField<string, global::fat.rawdata.ObjToolMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ObjToolMapABValue> ObjToolMapAB {
      get { return objToolMapAB_; }
    }

    /// <summary>Field number for the "ObjToolMapABPatch" field.</summary>
    public const int ObjToolMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.ObjToolMapABValue>.Codec _map_objToolMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.ObjToolMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.ObjToolMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.ObjToolMapABValue> objToolMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.ObjToolMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.ObjToolMapABValue> ObjToolMapABPatch {
      get { return objToolMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjToolConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjToolConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ObjToolMap.Equals(other.ObjToolMap)) return false;
      if (!ObjToolMapAB.Equals(other.ObjToolMapAB)) return false;
      if (!ObjToolMapABPatch.Equals(other.ObjToolMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ObjToolMap.GetHashCode();
      hash ^= ObjToolMapAB.GetHashCode();
      hash ^= ObjToolMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objToolMap_.WriteTo(output, _map_objToolMap_codec);
      objToolMapAB_.WriteTo(output, _map_objToolMapAB_codec);
      objToolMapABPatch_.WriteTo(output, _map_objToolMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objToolMap_.WriteTo(ref output, _map_objToolMap_codec);
      objToolMapAB_.WriteTo(ref output, _map_objToolMapAB_codec);
      objToolMapABPatch_.WriteTo(ref output, _map_objToolMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objToolMap_.CalculateSize(_map_objToolMap_codec);
      size += objToolMapAB_.CalculateSize(_map_objToolMapAB_codec);
      size += objToolMapABPatch_.CalculateSize(_map_objToolMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjToolConf other) {
      if (other == null) {
        return;
      }
      objToolMap_.Add(other.objToolMap_);
      objToolMapAB_.Add(other.objToolMapAB_);
      objToolMapABPatch_.Add(other.objToolMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objToolMap_.AddEntriesFrom(input, _map_objToolMap_codec);
            break;
          }
          case 18: {
            objToolMapAB_.AddEntriesFrom(input, _map_objToolMapAB_codec);
            break;
          }
          case 26: {
            objToolMapABPatch_.AddEntriesFrom(input, _map_objToolMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objToolMap_.AddEntriesFrom(ref input, _map_objToolMap_codec);
            break;
          }
          case 18: {
            objToolMapAB_.AddEntriesFrom(ref input, _map_objToolMapAB_codec);
            break;
          }
          case 26: {
            objToolMapABPatch_.AddEntriesFrom(ref input, _map_objToolMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
