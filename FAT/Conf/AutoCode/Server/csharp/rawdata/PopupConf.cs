// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/PopupConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/PopupConf.proto</summary>
  public static partial class PopupConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/PopupConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PopupConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdyYXdkYXRhL1BvcHVwQ29uZi5wcm90bxIHcmF3ZGF0YSJ7CgVQb3B1cBIK",
            "CgJpZBgBIAEoBRISCgpsaW1pdENvdW50GAIgASgFEhQKDG5vTGltaXRDb3Vu",
            "dBgFIAEoCBIZChFwb3BFcXVhbE1haW5Cb2FyZBgGIAEoCBIRCglwb3B1cFR5",
            "cGUYBCADKAUSDgoGd2VpZ2h0GAMgASgFIowBCg9Qb3B1cE1hcEFCVmFsdWUS",
            "OAoIUG9wdXBNYXAYASADKAsyJi5yYXdkYXRhLlBvcHVwTWFwQUJWYWx1ZS5Q",
            "b3B1cE1hcEVudHJ5Gj8KDVBvcHVwTWFwRW50cnkSCwoDa2V5GAEgASgFEh0K",
            "BXZhbHVlGAIgASgLMg4ucmF3ZGF0YS5Qb3B1cDoCOAEimQMKCVBvcHVwQ29u",
            "ZhIyCghQb3B1cE1hcBgBIAMoCzIgLnJhd2RhdGEuUG9wdXBDb25mLlBvcHVw",
            "TWFwRW50cnkSNgoKUG9wdXBNYXBBQhgCIAMoCzIiLnJhd2RhdGEuUG9wdXBD",
            "b25mLlBvcHVwTWFwQUJFbnRyeRJACg9Qb3B1cE1hcEFCUGF0Y2gYAyADKAsy",
            "Jy5yYXdkYXRhLlBvcHVwQ29uZi5Qb3B1cE1hcEFCUGF0Y2hFbnRyeRo/Cg1Q",
            "b3B1cE1hcEVudHJ5EgsKA2tleRgBIAEoBRIdCgV2YWx1ZRgCIAEoCzIOLnJh",
            "d2RhdGEuUG9wdXA6AjgBGksKD1BvcHVwTWFwQUJFbnRyeRILCgNrZXkYASAB",
            "KAkSJwoFdmFsdWUYAiABKAsyGC5yYXdkYXRhLlBvcHVwTWFwQUJWYWx1ZToC",
            "OAEaUAoUUG9wdXBNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEicKBXZh",
            "bHVlGAIgASgLMhgucmF3ZGF0YS5Qb3B1cE1hcEFCVmFsdWU6AjgBQj1aLWdp",
            "dGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3ZGF0YaoC",
            "C2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.Popup), global::fat.rawdata.Popup.Parser, new[]{ "Id", "LimitCount", "NoLimitCount", "PopEqualMainBoard", "PopupType", "Weight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.PopupMapABValue), global::fat.rawdata.PopupMapABValue.Parser, new[]{ "PopupMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.PopupConf), global::fat.rawdata.PopupConf.Parser, new[]{ "PopupMap", "PopupMapAB", "PopupMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="Popup",table="PopupMap",table_wrapper="PopupConf",map="true",map_key_type="int32",data="PopupConf")
  /// annotation@ab(table_ab="PopupMapAB",table_ab_patch="PopupMapABPatch",table_ab_value="PopupMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@Popup(id="id")
  /// </summary>
  public sealed partial class Popup : pb::IMessage<Popup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Popup> _parser = new pb::MessageParser<Popup>(() => new Popup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Popup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.PopupConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Popup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Popup(Popup other) : this() {
      id_ = other.id_;
      limitCount_ = other.limitCount_;
      noLimitCount_ = other.noLimitCount_;
      popEqualMainBoard_ = other.popEqualMainBoard_;
      popupType_ = other.popupType_.Clone();
      weight_ = other.weight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Popup Clone() {
      return new Popup(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 弹脸信息ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "limitCount" field.</summary>
    public const int LimitCountFieldNumber = 2;
    private int limitCount_;
    /// <summary>
    /// 每天弹脸次数限制
    /// （GlobalConfig.popupRefresh决定刷新的UTC-0时间）
    /// （-1代表不限制次数）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitCount {
      get { return limitCount_; }
      set {
        limitCount_ = value;
      }
    }

    /// <summary>Field number for the "noLimitCount" field.</summary>
    public const int NoLimitCountFieldNumber = 5;
    private bool noLimitCount_;
    /// <summary>
    /// 不遵循每天弹脸次数限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoLimitCount {
      get { return noLimitCount_; }
      set {
        noLimitCount_ = value;
      }
    }

    /// <summary>Field number for the "popEqualMainBoard" field.</summary>
    public const int PopEqualMainBoardFieldNumber = 6;
    private bool popEqualMainBoard_;
    /// <summary>
    /// 是否在等价于主棋盘的棋盘活动弹出
    /// （如火车、bingo）仅限于礼包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PopEqualMainBoard {
      get { return popEqualMainBoard_; }
      set {
        popEqualMainBoard_ = value;
      }
    }

    /// <summary>Field number for the "popupType" field.</summary>
    public const int PopupTypeFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_popupType_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> popupType_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 弹脸时机
    /// （PopupType@enum.value）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PopupType {
      get { return popupType_; }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 3;
    private int weight_;
    /// <summary>
    /// 弹脸权重
    /// （越大越优先）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Popup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Popup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (LimitCount != other.LimitCount) return false;
      if (NoLimitCount != other.NoLimitCount) return false;
      if (PopEqualMainBoard != other.PopEqualMainBoard) return false;
      if(!popupType_.Equals(other.popupType_)) return false;
      if (Weight != other.Weight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (LimitCount != 0) hash ^= LimitCount.GetHashCode();
      if (NoLimitCount != false) hash ^= NoLimitCount.GetHashCode();
      if (PopEqualMainBoard != false) hash ^= PopEqualMainBoard.GetHashCode();
      hash ^= popupType_.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (LimitCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LimitCount);
      }
      if (Weight != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Weight);
      }
      popupType_.WriteTo(output, _repeated_popupType_codec);
      if (NoLimitCount != false) {
        output.WriteRawTag(40);
        output.WriteBool(NoLimitCount);
      }
      if (PopEqualMainBoard != false) {
        output.WriteRawTag(48);
        output.WriteBool(PopEqualMainBoard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (LimitCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LimitCount);
      }
      if (Weight != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Weight);
      }
      popupType_.WriteTo(ref output, _repeated_popupType_codec);
      if (NoLimitCount != false) {
        output.WriteRawTag(40);
        output.WriteBool(NoLimitCount);
      }
      if (PopEqualMainBoard != false) {
        output.WriteRawTag(48);
        output.WriteBool(PopEqualMainBoard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (LimitCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitCount);
      }
      if (NoLimitCount != false) {
        size += 1 + 1;
      }
      if (PopEqualMainBoard != false) {
        size += 1 + 1;
      }
      size += popupType_.CalculateSize(_repeated_popupType_codec);
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Popup other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.LimitCount != 0) {
        LimitCount = other.LimitCount;
      }
      if (other.NoLimitCount != false) {
        NoLimitCount = other.NoLimitCount;
      }
      if (other.PopEqualMainBoard != false) {
        PopEqualMainBoard = other.PopEqualMainBoard;
      }
      popupType_.Add(other.popupType_);
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            LimitCount = input.ReadInt32();
            break;
          }
          case 24: {
            Weight = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            popupType_.AddEntriesFrom(input, _repeated_popupType_codec);
            break;
          }
          case 40: {
            NoLimitCount = input.ReadBool();
            break;
          }
          case 48: {
            PopEqualMainBoard = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            LimitCount = input.ReadInt32();
            break;
          }
          case 24: {
            Weight = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            popupType_.AddEntriesFrom(ref input, _repeated_popupType_codec);
            break;
          }
          case 40: {
            NoLimitCount = input.ReadBool();
            break;
          }
          case 48: {
            PopEqualMainBoard = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PopupMapABValue : pb::IMessage<PopupMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PopupMapABValue> _parser = new pb::MessageParser<PopupMapABValue>(() => new PopupMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PopupMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.PopupConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopupMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopupMapABValue(PopupMapABValue other) : this() {
      popupMap_ = other.popupMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopupMapABValue Clone() {
      return new PopupMapABValue(this);
    }

    /// <summary>Field number for the "PopupMap" field.</summary>
    public const int PopupMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.Popup>.Codec _map_popupMap_codec
        = new pbc::MapField<int, global::fat.rawdata.Popup>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.Popup.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.Popup> popupMap_ = new pbc::MapField<int, global::fat.rawdata.Popup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.Popup> PopupMap {
      get { return popupMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PopupMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PopupMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!PopupMap.Equals(other.PopupMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= PopupMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      popupMap_.WriteTo(output, _map_popupMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      popupMap_.WriteTo(ref output, _map_popupMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += popupMap_.CalculateSize(_map_popupMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PopupMapABValue other) {
      if (other == null) {
        return;
      }
      popupMap_.Add(other.popupMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            popupMap_.AddEntriesFrom(input, _map_popupMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            popupMap_.AddEntriesFrom(ref input, _map_popupMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PopupConf : pb::IMessage<PopupConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PopupConf> _parser = new pb::MessageParser<PopupConf>(() => new PopupConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PopupConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.PopupConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopupConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopupConf(PopupConf other) : this() {
      popupMap_ = other.popupMap_.Clone();
      popupMapAB_ = other.popupMapAB_.Clone();
      popupMapABPatch_ = other.popupMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopupConf Clone() {
      return new PopupConf(this);
    }

    /// <summary>Field number for the "PopupMap" field.</summary>
    public const int PopupMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.Popup>.Codec _map_popupMap_codec
        = new pbc::MapField<int, global::fat.rawdata.Popup>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.Popup.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.Popup> popupMap_ = new pbc::MapField<int, global::fat.rawdata.Popup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.Popup> PopupMap {
      get { return popupMap_; }
    }

    /// <summary>Field number for the "PopupMapAB" field.</summary>
    public const int PopupMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.PopupMapABValue>.Codec _map_popupMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.PopupMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.PopupMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.PopupMapABValue> popupMapAB_ = new pbc::MapField<string, global::fat.rawdata.PopupMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.PopupMapABValue> PopupMapAB {
      get { return popupMapAB_; }
    }

    /// <summary>Field number for the "PopupMapABPatch" field.</summary>
    public const int PopupMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.PopupMapABValue>.Codec _map_popupMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.PopupMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.PopupMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.PopupMapABValue> popupMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.PopupMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.PopupMapABValue> PopupMapABPatch {
      get { return popupMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PopupConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PopupConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!PopupMap.Equals(other.PopupMap)) return false;
      if (!PopupMapAB.Equals(other.PopupMapAB)) return false;
      if (!PopupMapABPatch.Equals(other.PopupMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= PopupMap.GetHashCode();
      hash ^= PopupMapAB.GetHashCode();
      hash ^= PopupMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      popupMap_.WriteTo(output, _map_popupMap_codec);
      popupMapAB_.WriteTo(output, _map_popupMapAB_codec);
      popupMapABPatch_.WriteTo(output, _map_popupMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      popupMap_.WriteTo(ref output, _map_popupMap_codec);
      popupMapAB_.WriteTo(ref output, _map_popupMapAB_codec);
      popupMapABPatch_.WriteTo(ref output, _map_popupMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += popupMap_.CalculateSize(_map_popupMap_codec);
      size += popupMapAB_.CalculateSize(_map_popupMapAB_codec);
      size += popupMapABPatch_.CalculateSize(_map_popupMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PopupConf other) {
      if (other == null) {
        return;
      }
      popupMap_.Add(other.popupMap_);
      popupMapAB_.Add(other.popupMapAB_);
      popupMapABPatch_.Add(other.popupMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            popupMap_.AddEntriesFrom(input, _map_popupMap_codec);
            break;
          }
          case 18: {
            popupMapAB_.AddEntriesFrom(input, _map_popupMapAB_codec);
            break;
          }
          case 26: {
            popupMapABPatch_.AddEntriesFrom(input, _map_popupMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            popupMap_.AddEntriesFrom(ref input, _map_popupMap_codec);
            break;
          }
          case 18: {
            popupMapAB_.AddEntriesFrom(ref input, _map_popupMapAB_codec);
            break;
          }
          case 26: {
            popupMapABPatch_.AddEntriesFrom(ref input, _map_popupMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
