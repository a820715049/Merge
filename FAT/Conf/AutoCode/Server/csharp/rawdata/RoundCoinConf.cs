// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/RoundCoinConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/RoundCoinConf.proto</summary>
  public static partial class RoundCoinConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/RoundCoinConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoundCoinConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtyYXdkYXRhL1JvdW5kQ29pbkNvbmYucHJvdG8SB3Jhd2RhdGEiKgoJUm91",
            "bmRDb2luEgwKBGZyb20YASABKAUSDwoHcm91bmRCeRgCIAEoBSJDChVSb3Vu",
            "ZENvaW5TbGljZUFCVmFsdWUSKgoOUm91bmRDb2luU2xpY2UYASADKAsyEi5y",
            "YXdkYXRhLlJvdW5kQ29pbiKMAwoNUm91bmRDb2luQ29uZhIqCg5Sb3VuZENv",
            "aW5TbGljZRgBIAMoCzISLnJhd2RhdGEuUm91bmRDb2luEkYKEFJvdW5kQ29p",
            "blNsaWNlQUIYAiADKAsyLC5yYXdkYXRhLlJvdW5kQ29pbkNvbmYuUm91bmRD",
            "b2luU2xpY2VBQkVudHJ5ElAKFVJvdW5kQ29pblNsaWNlQUJQYXRjaBgDIAMo",
            "CzIxLnJhd2RhdGEuUm91bmRDb2luQ29uZi5Sb3VuZENvaW5TbGljZUFCUGF0",
            "Y2hFbnRyeRpXChVSb3VuZENvaW5TbGljZUFCRW50cnkSCwoDa2V5GAEgASgJ",
            "Ei0KBXZhbHVlGAIgASgLMh4ucmF3ZGF0YS5Sb3VuZENvaW5TbGljZUFCVmFs",
            "dWU6AjgBGlwKGlJvdW5kQ29pblNsaWNlQUJQYXRjaEVudHJ5EgsKA2tleRgB",
            "IAEoCRItCgV2YWx1ZRgCIAEoCzIeLnJhd2RhdGEuUm91bmRDb2luU2xpY2VB",
            "QlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4v",
            "Z29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.RoundCoin), global::fat.rawdata.RoundCoin.Parser, new[]{ "From", "RoundBy" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.RoundCoinSliceABValue), global::fat.rawdata.RoundCoinSliceABValue.Parser, new[]{ "RoundCoinSlice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.RoundCoinConf), global::fat.rawdata.RoundCoinConf.Parser, new[]{ "RoundCoinSlice", "RoundCoinSliceAB", "RoundCoinSliceABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="RoundCoin",table="RoundCoinSlice",table_wrapper="RoundCoinConf",map="false",map_key_type="",data="RoundCoinConf")
  /// annotation@ab(table_ab="RoundCoinSliceAB",table_ab_patch="RoundCoinSliceABPatch",table_ab_value="RoundCoinSliceABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// </summary>
  public sealed partial class RoundCoin : pb::IMessage<RoundCoin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundCoin> _parser = new pb::MessageParser<RoundCoin>(() => new RoundCoin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundCoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.RoundCoinConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundCoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundCoin(RoundCoin other) : this() {
      from_ = other.from_;
      roundBy_ = other.roundBy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundCoin Clone() {
      return new RoundCoin(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private int from_;
    /// <summary>
    /// 区间左侧值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "roundBy" field.</summary>
    public const int RoundByFieldNumber = 2;
    private int roundBy_;
    /// <summary>
    /// 取整值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundBy {
      get { return roundBy_; }
      set {
        roundBy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundCoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundCoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (RoundBy != other.RoundBy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != 0) hash ^= From.GetHashCode();
      if (RoundBy != 0) hash ^= RoundBy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (RoundBy != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoundBy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (RoundBy != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoundBy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
      }
      if (RoundBy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundBy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundCoin other) {
      if (other == null) {
        return;
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.RoundBy != 0) {
        RoundBy = other.RoundBy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            RoundBy = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            RoundBy = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoundCoinSliceABValue : pb::IMessage<RoundCoinSliceABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundCoinSliceABValue> _parser = new pb::MessageParser<RoundCoinSliceABValue>(() => new RoundCoinSliceABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundCoinSliceABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.RoundCoinConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundCoinSliceABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundCoinSliceABValue(RoundCoinSliceABValue other) : this() {
      roundCoinSlice_ = other.roundCoinSlice_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundCoinSliceABValue Clone() {
      return new RoundCoinSliceABValue(this);
    }

    /// <summary>Field number for the "RoundCoinSlice" field.</summary>
    public const int RoundCoinSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.RoundCoin> _repeated_roundCoinSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.RoundCoin.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.RoundCoin> roundCoinSlice_ = new pbc::RepeatedField<global::fat.rawdata.RoundCoin>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.RoundCoin> RoundCoinSlice {
      get { return roundCoinSlice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundCoinSliceABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundCoinSliceABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roundCoinSlice_.Equals(other.roundCoinSlice_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roundCoinSlice_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      roundCoinSlice_.WriteTo(output, _repeated_roundCoinSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      roundCoinSlice_.WriteTo(ref output, _repeated_roundCoinSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roundCoinSlice_.CalculateSize(_repeated_roundCoinSlice_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundCoinSliceABValue other) {
      if (other == null) {
        return;
      }
      roundCoinSlice_.Add(other.roundCoinSlice_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roundCoinSlice_.AddEntriesFrom(input, _repeated_roundCoinSlice_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            roundCoinSlice_.AddEntriesFrom(ref input, _repeated_roundCoinSlice_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoundCoinConf : pb::IMessage<RoundCoinConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundCoinConf> _parser = new pb::MessageParser<RoundCoinConf>(() => new RoundCoinConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundCoinConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.RoundCoinConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundCoinConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundCoinConf(RoundCoinConf other) : this() {
      roundCoinSlice_ = other.roundCoinSlice_.Clone();
      roundCoinSliceAB_ = other.roundCoinSliceAB_.Clone();
      roundCoinSliceABPatch_ = other.roundCoinSliceABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundCoinConf Clone() {
      return new RoundCoinConf(this);
    }

    /// <summary>Field number for the "RoundCoinSlice" field.</summary>
    public const int RoundCoinSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.RoundCoin> _repeated_roundCoinSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.RoundCoin.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.RoundCoin> roundCoinSlice_ = new pbc::RepeatedField<global::fat.rawdata.RoundCoin>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.RoundCoin> RoundCoinSlice {
      get { return roundCoinSlice_; }
    }

    /// <summary>Field number for the "RoundCoinSliceAB" field.</summary>
    public const int RoundCoinSliceABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.RoundCoinSliceABValue>.Codec _map_roundCoinSliceAB_codec
        = new pbc::MapField<string, global::fat.rawdata.RoundCoinSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.RoundCoinSliceABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.RoundCoinSliceABValue> roundCoinSliceAB_ = new pbc::MapField<string, global::fat.rawdata.RoundCoinSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.RoundCoinSliceABValue> RoundCoinSliceAB {
      get { return roundCoinSliceAB_; }
    }

    /// <summary>Field number for the "RoundCoinSliceABPatch" field.</summary>
    public const int RoundCoinSliceABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.RoundCoinSliceABValue>.Codec _map_roundCoinSliceABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.RoundCoinSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.RoundCoinSliceABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.RoundCoinSliceABValue> roundCoinSliceABPatch_ = new pbc::MapField<string, global::fat.rawdata.RoundCoinSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.RoundCoinSliceABValue> RoundCoinSliceABPatch {
      get { return roundCoinSliceABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundCoinConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundCoinConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roundCoinSlice_.Equals(other.roundCoinSlice_)) return false;
      if (!RoundCoinSliceAB.Equals(other.RoundCoinSliceAB)) return false;
      if (!RoundCoinSliceABPatch.Equals(other.RoundCoinSliceABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roundCoinSlice_.GetHashCode();
      hash ^= RoundCoinSliceAB.GetHashCode();
      hash ^= RoundCoinSliceABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      roundCoinSlice_.WriteTo(output, _repeated_roundCoinSlice_codec);
      roundCoinSliceAB_.WriteTo(output, _map_roundCoinSliceAB_codec);
      roundCoinSliceABPatch_.WriteTo(output, _map_roundCoinSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      roundCoinSlice_.WriteTo(ref output, _repeated_roundCoinSlice_codec);
      roundCoinSliceAB_.WriteTo(ref output, _map_roundCoinSliceAB_codec);
      roundCoinSliceABPatch_.WriteTo(ref output, _map_roundCoinSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roundCoinSlice_.CalculateSize(_repeated_roundCoinSlice_codec);
      size += roundCoinSliceAB_.CalculateSize(_map_roundCoinSliceAB_codec);
      size += roundCoinSliceABPatch_.CalculateSize(_map_roundCoinSliceABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundCoinConf other) {
      if (other == null) {
        return;
      }
      roundCoinSlice_.Add(other.roundCoinSlice_);
      roundCoinSliceAB_.Add(other.roundCoinSliceAB_);
      roundCoinSliceABPatch_.Add(other.roundCoinSliceABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roundCoinSlice_.AddEntriesFrom(input, _repeated_roundCoinSlice_codec);
            break;
          }
          case 18: {
            roundCoinSliceAB_.AddEntriesFrom(input, _map_roundCoinSliceAB_codec);
            break;
          }
          case 26: {
            roundCoinSliceABPatch_.AddEntriesFrom(input, _map_roundCoinSliceABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            roundCoinSlice_.AddEntriesFrom(ref input, _repeated_roundCoinSlice_codec);
            break;
          }
          case 18: {
            roundCoinSliceAB_.AddEntriesFrom(ref input, _map_roundCoinSliceAB_codec);
            break;
          }
          case 26: {
            roundCoinSliceABPatch_.AddEntriesFrom(ref input, _map_roundCoinSliceABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
