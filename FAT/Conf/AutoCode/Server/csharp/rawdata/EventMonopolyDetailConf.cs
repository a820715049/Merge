// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventMonopolyDetailConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventMonopolyDetailConf.proto</summary>
  public static partial class EventMonopolyDetailConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventMonopolyDetailConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventMonopolyDetailConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVyYXdkYXRhL0V2ZW50TW9ub3BvbHlEZXRhaWxDb25mLnByb3RvEgdyYXdk",
            "YXRhIqMBChNFdmVudE1vbm9wb2x5RGV0YWlsEgoKAmlkGAEgASgFEg8KB2Jv",
            "YXJkSWQYAiABKAUSEgoKY3ljbGVTdGFnZRgDIAEoBRIMCgRkaWZmGAQgASgF",
            "EhAKCGZyZWVJdGVtGAUgAygFEhMKC29yZGVySXRlbUlkGAYgAygFEhQKDHJl",
            "Z3VsYXJTdGFnZRgHIAMoBRIQCgh0cm9waHlJZBgIIAMoBSLgAQodRXZlbnRN",
            "b25vcG9seURldGFpbE1hcEFCVmFsdWUSYgoWRXZlbnRNb25vcG9seURldGFp",
            "bE1hcBgBIAMoCzJCLnJhd2RhdGEuRXZlbnRNb25vcG9seURldGFpbE1hcEFC",
            "VmFsdWUuRXZlbnRNb25vcG9seURldGFpbE1hcEVudHJ5GlsKG0V2ZW50TW9u",
            "b3BvbHlEZXRhaWxNYXBFbnRyeRILCgNrZXkYASABKAUSKwoFdmFsdWUYAiAB",
            "KAsyHC5yYXdkYXRhLkV2ZW50TW9ub3BvbHlEZXRhaWw6AjgBIvkEChdFdmVu",
            "dE1vbm9wb2x5RGV0YWlsQ29uZhJcChZFdmVudE1vbm9wb2x5RGV0YWlsTWFw",
            "GAEgAygLMjwucmF3ZGF0YS5FdmVudE1vbm9wb2x5RGV0YWlsQ29uZi5FdmVu",
            "dE1vbm9wb2x5RGV0YWlsTWFwRW50cnkSYAoYRXZlbnRNb25vcG9seURldGFp",
            "bE1hcEFCGAIgAygLMj4ucmF3ZGF0YS5FdmVudE1vbm9wb2x5RGV0YWlsQ29u",
            "Zi5FdmVudE1vbm9wb2x5RGV0YWlsTWFwQUJFbnRyeRJqCh1FdmVudE1vbm9w",
            "b2x5RGV0YWlsTWFwQUJQYXRjaBgDIAMoCzJDLnJhd2RhdGEuRXZlbnRNb25v",
            "cG9seURldGFpbENvbmYuRXZlbnRNb25vcG9seURldGFpbE1hcEFCUGF0Y2hF",
            "bnRyeRpbChtFdmVudE1vbm9wb2x5RGV0YWlsTWFwRW50cnkSCwoDa2V5GAEg",
            "ASgFEisKBXZhbHVlGAIgASgLMhwucmF3ZGF0YS5FdmVudE1vbm9wb2x5RGV0",
            "YWlsOgI4ARpnCh1FdmVudE1vbm9wb2x5RGV0YWlsTWFwQUJFbnRyeRILCgNr",
            "ZXkYASABKAkSNQoFdmFsdWUYAiABKAsyJi5yYXdkYXRhLkV2ZW50TW9ub3Bv",
            "bHlEZXRhaWxNYXBBQlZhbHVlOgI4ARpsCiJFdmVudE1vbm9wb2x5RGV0YWls",
            "TWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRI1CgV2YWx1ZRgCIAEoCzIm",
            "LnJhd2RhdGEuRXZlbnRNb25vcG9seURldGFpbE1hcEFCVmFsdWU6AjgBQj1a",
            "LWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3ZGF0",
            "YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMonopolyDetail), global::fat.rawdata.EventMonopolyDetail.Parser, new[]{ "Id", "BoardId", "CycleStage", "Diff", "FreeItem", "OrderItemId", "RegularStage", "TrophyId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMonopolyDetailMapABValue), global::fat.rawdata.EventMonopolyDetailMapABValue.Parser, new[]{ "EventMonopolyDetailMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMonopolyDetailConf), global::fat.rawdata.EventMonopolyDetailConf.Parser, new[]{ "EventMonopolyDetailMap", "EventMonopolyDetailMapAB", "EventMonopolyDetailMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventMonopolyDetail",table="EventMonopolyDetailMap",table_wrapper="EventMonopolyDetailConf",map="true",map_key_type="int32",data="EventMonopolyDetailConf")
  /// annotation@ab(table_ab="EventMonopolyDetailMapAB",table_ab_patch="EventMonopolyDetailMapABPatch",table_ab_value="EventMonopolyDetailMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventMonopolyDetail(id="id")
  /// </summary>
  public sealed partial class EventMonopolyDetail : pb::IMessage<EventMonopolyDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMonopolyDetail> _parser = new pb::MessageParser<EventMonopolyDetail>(() => new EventMonopolyDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMonopolyDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMonopolyDetailConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopolyDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopolyDetail(EventMonopolyDetail other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      cycleStage_ = other.cycleStage_;
      diff_ = other.diff_;
      freeItem_ = other.freeItem_.Clone();
      orderItemId_ = other.orderItemId_.Clone();
      regularStage_ = other.regularStage_.Clone();
      trophyId_ = other.trophyId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopolyDetail Clone() {
      return new EventMonopolyDetail(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动详情id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 棋盘id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "cycleStage" field.</summary>
    public const int CycleStageFieldNumber = 3;
    private int cycleStage_;
    /// <summary>
    /// 循环关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CycleStage {
      get { return cycleStage_; }
      set {
        cycleStage_ = value;
      }
    }

    /// <summary>Field number for the "diff" field.</summary>
    public const int DiffFieldNumber = 4;
    private int diff_;
    /// <summary>
    /// 难度
    /// (仅TGA打点使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diff {
      get { return diff_; }
      set {
        diff_ = value;
      }
    }

    /// <summary>Field number for the "freeItem" field.</summary>
    public const int FreeItemFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_freeItem_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> freeItem_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 初始赠送棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FreeItem {
      get { return freeItem_; }
    }

    /// <summary>Field number for the "orderItemId" field.</summary>
    public const int OrderItemIdFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_orderItemId_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> orderItemId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 订单发放活动棋子
    /// （MonopolyOrderItem.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> OrderItemId {
      get { return orderItemId_; }
    }

    /// <summary>Field number for the "regularStage" field.</summary>
    public const int RegularStageFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_regularStage_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> regularStage_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 常规关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RegularStage {
      get { return regularStage_; }
    }

    /// <summary>Field number for the "trophyId" field.</summary>
    public const int TrophyIdFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_trophyId_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> trophyId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 奖杯id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TrophyId {
      get { return trophyId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMonopolyDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMonopolyDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (CycleStage != other.CycleStage) return false;
      if (Diff != other.Diff) return false;
      if(!freeItem_.Equals(other.freeItem_)) return false;
      if(!orderItemId_.Equals(other.orderItemId_)) return false;
      if(!regularStage_.Equals(other.regularStage_)) return false;
      if(!trophyId_.Equals(other.trophyId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (CycleStage != 0) hash ^= CycleStage.GetHashCode();
      if (Diff != 0) hash ^= Diff.GetHashCode();
      hash ^= freeItem_.GetHashCode();
      hash ^= orderItemId_.GetHashCode();
      hash ^= regularStage_.GetHashCode();
      hash ^= trophyId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (CycleStage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CycleStage);
      }
      if (Diff != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Diff);
      }
      freeItem_.WriteTo(output, _repeated_freeItem_codec);
      orderItemId_.WriteTo(output, _repeated_orderItemId_codec);
      regularStage_.WriteTo(output, _repeated_regularStage_codec);
      trophyId_.WriteTo(output, _repeated_trophyId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (CycleStage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CycleStage);
      }
      if (Diff != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Diff);
      }
      freeItem_.WriteTo(ref output, _repeated_freeItem_codec);
      orderItemId_.WriteTo(ref output, _repeated_orderItemId_codec);
      regularStage_.WriteTo(ref output, _repeated_regularStage_codec);
      trophyId_.WriteTo(ref output, _repeated_trophyId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (CycleStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CycleStage);
      }
      if (Diff != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diff);
      }
      size += freeItem_.CalculateSize(_repeated_freeItem_codec);
      size += orderItemId_.CalculateSize(_repeated_orderItemId_codec);
      size += regularStage_.CalculateSize(_repeated_regularStage_codec);
      size += trophyId_.CalculateSize(_repeated_trophyId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMonopolyDetail other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.CycleStage != 0) {
        CycleStage = other.CycleStage;
      }
      if (other.Diff != 0) {
        Diff = other.Diff;
      }
      freeItem_.Add(other.freeItem_);
      orderItemId_.Add(other.orderItemId_);
      regularStage_.Add(other.regularStage_);
      trophyId_.Add(other.trophyId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            CycleStage = input.ReadInt32();
            break;
          }
          case 32: {
            Diff = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            freeItem_.AddEntriesFrom(input, _repeated_freeItem_codec);
            break;
          }
          case 50:
          case 48: {
            orderItemId_.AddEntriesFrom(input, _repeated_orderItemId_codec);
            break;
          }
          case 58:
          case 56: {
            regularStage_.AddEntriesFrom(input, _repeated_regularStage_codec);
            break;
          }
          case 66:
          case 64: {
            trophyId_.AddEntriesFrom(input, _repeated_trophyId_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            CycleStage = input.ReadInt32();
            break;
          }
          case 32: {
            Diff = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            freeItem_.AddEntriesFrom(ref input, _repeated_freeItem_codec);
            break;
          }
          case 50:
          case 48: {
            orderItemId_.AddEntriesFrom(ref input, _repeated_orderItemId_codec);
            break;
          }
          case 58:
          case 56: {
            regularStage_.AddEntriesFrom(ref input, _repeated_regularStage_codec);
            break;
          }
          case 66:
          case 64: {
            trophyId_.AddEntriesFrom(ref input, _repeated_trophyId_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMonopolyDetailMapABValue : pb::IMessage<EventMonopolyDetailMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMonopolyDetailMapABValue> _parser = new pb::MessageParser<EventMonopolyDetailMapABValue>(() => new EventMonopolyDetailMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMonopolyDetailMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMonopolyDetailConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopolyDetailMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopolyDetailMapABValue(EventMonopolyDetailMapABValue other) : this() {
      eventMonopolyDetailMap_ = other.eventMonopolyDetailMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopolyDetailMapABValue Clone() {
      return new EventMonopolyDetailMapABValue(this);
    }

    /// <summary>Field number for the "EventMonopolyDetailMap" field.</summary>
    public const int EventMonopolyDetailMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMonopolyDetail>.Codec _map_eventMonopolyDetailMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMonopolyDetail>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMonopolyDetail.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMonopolyDetail> eventMonopolyDetailMap_ = new pbc::MapField<int, global::fat.rawdata.EventMonopolyDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMonopolyDetail> EventMonopolyDetailMap {
      get { return eventMonopolyDetailMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMonopolyDetailMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMonopolyDetailMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMonopolyDetailMap.Equals(other.EventMonopolyDetailMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMonopolyDetailMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMonopolyDetailMap_.WriteTo(output, _map_eventMonopolyDetailMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMonopolyDetailMap_.WriteTo(ref output, _map_eventMonopolyDetailMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMonopolyDetailMap_.CalculateSize(_map_eventMonopolyDetailMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMonopolyDetailMapABValue other) {
      if (other == null) {
        return;
      }
      eventMonopolyDetailMap_.Add(other.eventMonopolyDetailMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMonopolyDetailMap_.AddEntriesFrom(input, _map_eventMonopolyDetailMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMonopolyDetailMap_.AddEntriesFrom(ref input, _map_eventMonopolyDetailMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMonopolyDetailConf : pb::IMessage<EventMonopolyDetailConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMonopolyDetailConf> _parser = new pb::MessageParser<EventMonopolyDetailConf>(() => new EventMonopolyDetailConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMonopolyDetailConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMonopolyDetailConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopolyDetailConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopolyDetailConf(EventMonopolyDetailConf other) : this() {
      eventMonopolyDetailMap_ = other.eventMonopolyDetailMap_.Clone();
      eventMonopolyDetailMapAB_ = other.eventMonopolyDetailMapAB_.Clone();
      eventMonopolyDetailMapABPatch_ = other.eventMonopolyDetailMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMonopolyDetailConf Clone() {
      return new EventMonopolyDetailConf(this);
    }

    /// <summary>Field number for the "EventMonopolyDetailMap" field.</summary>
    public const int EventMonopolyDetailMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMonopolyDetail>.Codec _map_eventMonopolyDetailMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMonopolyDetail>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMonopolyDetail.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMonopolyDetail> eventMonopolyDetailMap_ = new pbc::MapField<int, global::fat.rawdata.EventMonopolyDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMonopolyDetail> EventMonopolyDetailMap {
      get { return eventMonopolyDetailMap_; }
    }

    /// <summary>Field number for the "EventMonopolyDetailMapAB" field.</summary>
    public const int EventMonopolyDetailMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMonopolyDetailMapABValue>.Codec _map_eventMonopolyDetailMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMonopolyDetailMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMonopolyDetailMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMonopolyDetailMapABValue> eventMonopolyDetailMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventMonopolyDetailMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMonopolyDetailMapABValue> EventMonopolyDetailMapAB {
      get { return eventMonopolyDetailMapAB_; }
    }

    /// <summary>Field number for the "EventMonopolyDetailMapABPatch" field.</summary>
    public const int EventMonopolyDetailMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMonopolyDetailMapABValue>.Codec _map_eventMonopolyDetailMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMonopolyDetailMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMonopolyDetailMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMonopolyDetailMapABValue> eventMonopolyDetailMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventMonopolyDetailMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMonopolyDetailMapABValue> EventMonopolyDetailMapABPatch {
      get { return eventMonopolyDetailMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMonopolyDetailConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMonopolyDetailConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMonopolyDetailMap.Equals(other.EventMonopolyDetailMap)) return false;
      if (!EventMonopolyDetailMapAB.Equals(other.EventMonopolyDetailMapAB)) return false;
      if (!EventMonopolyDetailMapABPatch.Equals(other.EventMonopolyDetailMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMonopolyDetailMap.GetHashCode();
      hash ^= EventMonopolyDetailMapAB.GetHashCode();
      hash ^= EventMonopolyDetailMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMonopolyDetailMap_.WriteTo(output, _map_eventMonopolyDetailMap_codec);
      eventMonopolyDetailMapAB_.WriteTo(output, _map_eventMonopolyDetailMapAB_codec);
      eventMonopolyDetailMapABPatch_.WriteTo(output, _map_eventMonopolyDetailMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMonopolyDetailMap_.WriteTo(ref output, _map_eventMonopolyDetailMap_codec);
      eventMonopolyDetailMapAB_.WriteTo(ref output, _map_eventMonopolyDetailMapAB_codec);
      eventMonopolyDetailMapABPatch_.WriteTo(ref output, _map_eventMonopolyDetailMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMonopolyDetailMap_.CalculateSize(_map_eventMonopolyDetailMap_codec);
      size += eventMonopolyDetailMapAB_.CalculateSize(_map_eventMonopolyDetailMapAB_codec);
      size += eventMonopolyDetailMapABPatch_.CalculateSize(_map_eventMonopolyDetailMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMonopolyDetailConf other) {
      if (other == null) {
        return;
      }
      eventMonopolyDetailMap_.Add(other.eventMonopolyDetailMap_);
      eventMonopolyDetailMapAB_.Add(other.eventMonopolyDetailMapAB_);
      eventMonopolyDetailMapABPatch_.Add(other.eventMonopolyDetailMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMonopolyDetailMap_.AddEntriesFrom(input, _map_eventMonopolyDetailMap_codec);
            break;
          }
          case 18: {
            eventMonopolyDetailMapAB_.AddEntriesFrom(input, _map_eventMonopolyDetailMapAB_codec);
            break;
          }
          case 26: {
            eventMonopolyDetailMapABPatch_.AddEntriesFrom(input, _map_eventMonopolyDetailMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMonopolyDetailMap_.AddEntriesFrom(ref input, _map_eventMonopolyDetailMap_codec);
            break;
          }
          case 18: {
            eventMonopolyDetailMapAB_.AddEntriesFrom(ref input, _map_eventMonopolyDetailMapAB_codec);
            break;
          }
          case 26: {
            eventMonopolyDetailMapABPatch_.AddEntriesFrom(ref input, _map_eventMonopolyDetailMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
