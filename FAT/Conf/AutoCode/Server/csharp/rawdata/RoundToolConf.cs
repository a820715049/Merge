// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/RoundToolConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/RoundToolConf.proto</summary>
  public static partial class RoundToolConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/RoundToolConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoundToolConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtyYXdkYXRhL1JvdW5kVG9vbENvbmYucHJvdG8SB3Jhd2RhdGEiKQoJUm91",
            "bmRUb29sEgwKBGZyb20YASABKAUSDgoGcmV3YXJkGAIgASgJIkMKFVJvdW5k",
            "VG9vbFNsaWNlQUJWYWx1ZRIqCg5Sb3VuZFRvb2xTbGljZRgBIAMoCzISLnJh",
            "d2RhdGEuUm91bmRUb29sIowDCg1Sb3VuZFRvb2xDb25mEioKDlJvdW5kVG9v",
            "bFNsaWNlGAEgAygLMhIucmF3ZGF0YS5Sb3VuZFRvb2wSRgoQUm91bmRUb29s",
            "U2xpY2VBQhgCIAMoCzIsLnJhd2RhdGEuUm91bmRUb29sQ29uZi5Sb3VuZFRv",
            "b2xTbGljZUFCRW50cnkSUAoVUm91bmRUb29sU2xpY2VBQlBhdGNoGAMgAygL",
            "MjEucmF3ZGF0YS5Sb3VuZFRvb2xDb25mLlJvdW5kVG9vbFNsaWNlQUJQYXRj",
            "aEVudHJ5GlcKFVJvdW5kVG9vbFNsaWNlQUJFbnRyeRILCgNrZXkYASABKAkS",
            "LQoFdmFsdWUYAiABKAsyHi5yYXdkYXRhLlJvdW5kVG9vbFNsaWNlQUJWYWx1",
            "ZToCOAEaXAoaUm91bmRUb29sU2xpY2VBQlBhdGNoRW50cnkSCwoDa2V5GAEg",
            "ASgJEi0KBXZhbHVlGAIgASgLMh4ucmF3ZGF0YS5Sb3VuZFRvb2xTbGljZUFC",
            "VmFsdWU6AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9n",
            "b2xhbmcvcmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.RoundTool), global::fat.rawdata.RoundTool.Parser, new[]{ "From", "Reward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.RoundToolSliceABValue), global::fat.rawdata.RoundToolSliceABValue.Parser, new[]{ "RoundToolSlice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.RoundToolConf), global::fat.rawdata.RoundToolConf.Parser, new[]{ "RoundToolSlice", "RoundToolSliceAB", "RoundToolSliceABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="RoundTool",table="RoundToolSlice",table_wrapper="RoundToolConf",map="false",map_key_type="",data="RoundToolConf")
  /// annotation@ab(table_ab="RoundToolSliceAB",table_ab_patch="RoundToolSliceABPatch",table_ab_value="RoundToolSliceABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// </summary>
  public sealed partial class RoundTool : pb::IMessage<RoundTool>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundTool> _parser = new pb::MessageParser<RoundTool>(() => new RoundTool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundTool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.RoundToolConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundTool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundTool(RoundTool other) : this() {
      from_ = other.from_;
      reward_ = other.reward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundTool Clone() {
      return new RoundTool(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private int from_;
    /// <summary>
    /// 区间左侧值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private string reward_ = "";
    /// <summary>
    /// 对应奖励结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reward {
      get { return reward_; }
      set {
        reward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundTool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundTool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (Reward != other.Reward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != 0) hash ^= From.GetHashCode();
      if (Reward.Length != 0) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (Reward.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (Reward.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
      }
      if (Reward.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundTool other) {
      if (other == null) {
        return;
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.Reward.Length != 0) {
        Reward = other.Reward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 18: {
            Reward = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 18: {
            Reward = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoundToolSliceABValue : pb::IMessage<RoundToolSliceABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundToolSliceABValue> _parser = new pb::MessageParser<RoundToolSliceABValue>(() => new RoundToolSliceABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundToolSliceABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.RoundToolConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundToolSliceABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundToolSliceABValue(RoundToolSliceABValue other) : this() {
      roundToolSlice_ = other.roundToolSlice_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundToolSliceABValue Clone() {
      return new RoundToolSliceABValue(this);
    }

    /// <summary>Field number for the "RoundToolSlice" field.</summary>
    public const int RoundToolSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.RoundTool> _repeated_roundToolSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.RoundTool.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.RoundTool> roundToolSlice_ = new pbc::RepeatedField<global::fat.rawdata.RoundTool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.RoundTool> RoundToolSlice {
      get { return roundToolSlice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundToolSliceABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundToolSliceABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roundToolSlice_.Equals(other.roundToolSlice_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roundToolSlice_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      roundToolSlice_.WriteTo(output, _repeated_roundToolSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      roundToolSlice_.WriteTo(ref output, _repeated_roundToolSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roundToolSlice_.CalculateSize(_repeated_roundToolSlice_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundToolSliceABValue other) {
      if (other == null) {
        return;
      }
      roundToolSlice_.Add(other.roundToolSlice_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roundToolSlice_.AddEntriesFrom(input, _repeated_roundToolSlice_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            roundToolSlice_.AddEntriesFrom(ref input, _repeated_roundToolSlice_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoundToolConf : pb::IMessage<RoundToolConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundToolConf> _parser = new pb::MessageParser<RoundToolConf>(() => new RoundToolConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundToolConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.RoundToolConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundToolConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundToolConf(RoundToolConf other) : this() {
      roundToolSlice_ = other.roundToolSlice_.Clone();
      roundToolSliceAB_ = other.roundToolSliceAB_.Clone();
      roundToolSliceABPatch_ = other.roundToolSliceABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundToolConf Clone() {
      return new RoundToolConf(this);
    }

    /// <summary>Field number for the "RoundToolSlice" field.</summary>
    public const int RoundToolSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.RoundTool> _repeated_roundToolSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.RoundTool.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.RoundTool> roundToolSlice_ = new pbc::RepeatedField<global::fat.rawdata.RoundTool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.RoundTool> RoundToolSlice {
      get { return roundToolSlice_; }
    }

    /// <summary>Field number for the "RoundToolSliceAB" field.</summary>
    public const int RoundToolSliceABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.RoundToolSliceABValue>.Codec _map_roundToolSliceAB_codec
        = new pbc::MapField<string, global::fat.rawdata.RoundToolSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.RoundToolSliceABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.RoundToolSliceABValue> roundToolSliceAB_ = new pbc::MapField<string, global::fat.rawdata.RoundToolSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.RoundToolSliceABValue> RoundToolSliceAB {
      get { return roundToolSliceAB_; }
    }

    /// <summary>Field number for the "RoundToolSliceABPatch" field.</summary>
    public const int RoundToolSliceABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.RoundToolSliceABValue>.Codec _map_roundToolSliceABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.RoundToolSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.RoundToolSliceABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.RoundToolSliceABValue> roundToolSliceABPatch_ = new pbc::MapField<string, global::fat.rawdata.RoundToolSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.RoundToolSliceABValue> RoundToolSliceABPatch {
      get { return roundToolSliceABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundToolConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundToolConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roundToolSlice_.Equals(other.roundToolSlice_)) return false;
      if (!RoundToolSliceAB.Equals(other.RoundToolSliceAB)) return false;
      if (!RoundToolSliceABPatch.Equals(other.RoundToolSliceABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roundToolSlice_.GetHashCode();
      hash ^= RoundToolSliceAB.GetHashCode();
      hash ^= RoundToolSliceABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      roundToolSlice_.WriteTo(output, _repeated_roundToolSlice_codec);
      roundToolSliceAB_.WriteTo(output, _map_roundToolSliceAB_codec);
      roundToolSliceABPatch_.WriteTo(output, _map_roundToolSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      roundToolSlice_.WriteTo(ref output, _repeated_roundToolSlice_codec);
      roundToolSliceAB_.WriteTo(ref output, _map_roundToolSliceAB_codec);
      roundToolSliceABPatch_.WriteTo(ref output, _map_roundToolSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roundToolSlice_.CalculateSize(_repeated_roundToolSlice_codec);
      size += roundToolSliceAB_.CalculateSize(_map_roundToolSliceAB_codec);
      size += roundToolSliceABPatch_.CalculateSize(_map_roundToolSliceABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundToolConf other) {
      if (other == null) {
        return;
      }
      roundToolSlice_.Add(other.roundToolSlice_);
      roundToolSliceAB_.Add(other.roundToolSliceAB_);
      roundToolSliceABPatch_.Add(other.roundToolSliceABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roundToolSlice_.AddEntriesFrom(input, _repeated_roundToolSlice_codec);
            break;
          }
          case 18: {
            roundToolSliceAB_.AddEntriesFrom(input, _map_roundToolSliceAB_codec);
            break;
          }
          case 26: {
            roundToolSliceABPatch_.AddEntriesFrom(input, _map_roundToolSliceABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            roundToolSlice_.AddEntriesFrom(ref input, _repeated_roundToolSlice_codec);
            break;
          }
          case 18: {
            roundToolSliceAB_.AddEntriesFrom(ref input, _map_roundToolSliceAB_codec);
            break;
          }
          case 26: {
            roundToolSliceABPatch_.AddEntriesFrom(ref input, _map_roundToolSliceABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
