// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/BpTaskConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/BpTaskConf.proto</summary>
  public static partial class BpTaskConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/BpTaskConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BpTaskConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhyYXdkYXRhL0JwVGFza0NvbmYucHJvdG8SB3Jhd2RhdGEaGHJhd2RhdGEv",
            "QnBUYXNrVHlwZS5wcm90byKQAQoGQnBUYXNrEgoKAmlkGAEgASgFEhEKCXBh",
            "cmFtZXRlchgCIAEoCRIOCgZyZXdhcmQYAyABKAkSDAoEc29ydBgIIAEoBRIQ",
            "Cgh0YXNrRGVzYxgEIAEoCRIQCgh0YXNrSWNvbhgFIAEoCRIlCgh0YXNrVHlw",
            "ZRgHIAEoDjITLnJhd2RhdGEuQnBUYXNrVHlwZSKSAQoQQnBUYXNrTWFwQUJW",
            "YWx1ZRI7CglCcFRhc2tNYXAYASADKAsyKC5yYXdkYXRhLkJwVGFza01hcEFC",
            "VmFsdWUuQnBUYXNrTWFwRW50cnkaQQoOQnBUYXNrTWFwRW50cnkSCwoDa2V5",
            "GAEgASgFEh4KBXZhbHVlGAIgASgLMg8ucmF3ZGF0YS5CcFRhc2s6AjgBIqkD",
            "CgpCcFRhc2tDb25mEjUKCUJwVGFza01hcBgBIAMoCzIiLnJhd2RhdGEuQnBU",
            "YXNrQ29uZi5CcFRhc2tNYXBFbnRyeRI5CgtCcFRhc2tNYXBBQhgCIAMoCzIk",
            "LnJhd2RhdGEuQnBUYXNrQ29uZi5CcFRhc2tNYXBBQkVudHJ5EkMKEEJwVGFz",
            "a01hcEFCUGF0Y2gYAyADKAsyKS5yYXdkYXRhLkJwVGFza0NvbmYuQnBUYXNr",
            "TWFwQUJQYXRjaEVudHJ5GkEKDkJwVGFza01hcEVudHJ5EgsKA2tleRgBIAEo",
            "BRIeCgV2YWx1ZRgCIAEoCzIPLnJhd2RhdGEuQnBUYXNrOgI4ARpNChBCcFRh",
            "c2tNYXBBQkVudHJ5EgsKA2tleRgBIAEoCRIoCgV2YWx1ZRgCIAEoCzIZLnJh",
            "d2RhdGEuQnBUYXNrTWFwQUJWYWx1ZToCOAEaUgoVQnBUYXNrTWFwQUJQYXRj",
            "aEVudHJ5EgsKA2tleRgBIAEoCRIoCgV2YWx1ZRgCIAEoCzIZLnJhd2RhdGEu",
            "QnBUYXNrTWFwQUJWYWx1ZToCOAFCPVotZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0",
            "L2NvbmYvZ2VuL2dvbGFuZy9yYXdkYXRhqgILZmF0LnJhd2RhdGFiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.rawdata.BpTaskTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.BpTask), global::fat.rawdata.BpTask.Parser, new[]{ "Id", "Parameter", "Reward", "Sort", "TaskDesc", "TaskIcon", "TaskType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.BpTaskMapABValue), global::fat.rawdata.BpTaskMapABValue.Parser, new[]{ "BpTaskMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.BpTaskConf), global::fat.rawdata.BpTaskConf.Parser, new[]{ "BpTaskMap", "BpTaskMapAB", "BpTaskMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="BpTask",table="BpTaskMap",table_wrapper="BpTaskConf",map="true",map_key_type="int32",data="BpTaskConf")
  /// annotation@ab(table_ab="BpTaskMapAB",table_ab_patch="BpTaskMapABPatch",table_ab_value="BpTaskMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@BpTask(id="id")
  /// </summary>
  public sealed partial class BpTask : pb::IMessage<BpTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BpTask> _parser = new pb::MessageParser<BpTask>(() => new BpTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BpTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.BpTaskConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BpTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BpTask(BpTask other) : this() {
      id_ = other.id_;
      parameter_ = other.parameter_;
      reward_ = other.reward_;
      sort_ = other.sort_;
      taskDesc_ = other.taskDesc_;
      taskIcon_ = other.taskIcon_;
      taskType_ = other.taskType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BpTask Clone() {
      return new BpTask(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 任务id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "parameter" field.</summary>
    public const int ParameterFieldNumber = 2;
    private string parameter_ = "";
    /// <summary>
    /// 任务目标数量
    /// 【数量:计算方式】
    /// 计算方式规则如下：
    /// 0 = 数量
    /// 3 = 数量*（等级系数/100），RoundCoin取整
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parameter {
      get { return parameter_; }
      set {
        parameter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 3;
    private string reward_ = "";
    /// <summary>
    /// scoreId:数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reward {
      get { return reward_; }
      set {
        reward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 8;
    private int sort_;
    /// <summary>
    /// 任务排序
    /// 小的在前
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "taskDesc" field.</summary>
    public const int TaskDescFieldNumber = 4;
    private string taskDesc_ = "";
    /// <summary>
    /// 任务描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskDesc {
      get { return taskDesc_; }
      set {
        taskDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskIcon" field.</summary>
    public const int TaskIconFieldNumber = 5;
    private string taskIcon_ = "";
    /// <summary>
    /// 任务icon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskIcon {
      get { return taskIcon_; }
      set {
        taskIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskType" field.</summary>
    public const int TaskTypeFieldNumber = 7;
    private global::fat.rawdata.BpTaskType taskType_ = global::fat.rawdata.BpTaskType.Order;
    /// <summary>
    /// 任务类型
    /// BpTaskType@enum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.rawdata.BpTaskType TaskType {
      get { return taskType_; }
      set {
        taskType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BpTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BpTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Parameter != other.Parameter) return false;
      if (Reward != other.Reward) return false;
      if (Sort != other.Sort) return false;
      if (TaskDesc != other.TaskDesc) return false;
      if (TaskIcon != other.TaskIcon) return false;
      if (TaskType != other.TaskType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Parameter.Length != 0) hash ^= Parameter.GetHashCode();
      if (Reward.Length != 0) hash ^= Reward.GetHashCode();
      if (Sort != 0) hash ^= Sort.GetHashCode();
      if (TaskDesc.Length != 0) hash ^= TaskDesc.GetHashCode();
      if (TaskIcon.Length != 0) hash ^= TaskIcon.GetHashCode();
      if (TaskType != global::fat.rawdata.BpTaskType.Order) hash ^= TaskType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Parameter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Parameter);
      }
      if (Reward.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reward);
      }
      if (TaskDesc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TaskDesc);
      }
      if (TaskIcon.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TaskIcon);
      }
      if (TaskType != global::fat.rawdata.BpTaskType.Order) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TaskType);
      }
      if (Sort != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Sort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Parameter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Parameter);
      }
      if (Reward.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reward);
      }
      if (TaskDesc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TaskDesc);
      }
      if (TaskIcon.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TaskIcon);
      }
      if (TaskType != global::fat.rawdata.BpTaskType.Order) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TaskType);
      }
      if (Sort != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Sort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Parameter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parameter);
      }
      if (Reward.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reward);
      }
      if (Sort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sort);
      }
      if (TaskDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskDesc);
      }
      if (TaskIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskIcon);
      }
      if (TaskType != global::fat.rawdata.BpTaskType.Order) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TaskType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BpTask other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Parameter.Length != 0) {
        Parameter = other.Parameter;
      }
      if (other.Reward.Length != 0) {
        Reward = other.Reward;
      }
      if (other.Sort != 0) {
        Sort = other.Sort;
      }
      if (other.TaskDesc.Length != 0) {
        TaskDesc = other.TaskDesc;
      }
      if (other.TaskIcon.Length != 0) {
        TaskIcon = other.TaskIcon;
      }
      if (other.TaskType != global::fat.rawdata.BpTaskType.Order) {
        TaskType = other.TaskType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Parameter = input.ReadString();
            break;
          }
          case 26: {
            Reward = input.ReadString();
            break;
          }
          case 34: {
            TaskDesc = input.ReadString();
            break;
          }
          case 42: {
            TaskIcon = input.ReadString();
            break;
          }
          case 56: {
            TaskType = (global::fat.rawdata.BpTaskType) input.ReadEnum();
            break;
          }
          case 64: {
            Sort = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Parameter = input.ReadString();
            break;
          }
          case 26: {
            Reward = input.ReadString();
            break;
          }
          case 34: {
            TaskDesc = input.ReadString();
            break;
          }
          case 42: {
            TaskIcon = input.ReadString();
            break;
          }
          case 56: {
            TaskType = (global::fat.rawdata.BpTaskType) input.ReadEnum();
            break;
          }
          case 64: {
            Sort = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BpTaskMapABValue : pb::IMessage<BpTaskMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BpTaskMapABValue> _parser = new pb::MessageParser<BpTaskMapABValue>(() => new BpTaskMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BpTaskMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.BpTaskConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BpTaskMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BpTaskMapABValue(BpTaskMapABValue other) : this() {
      bpTaskMap_ = other.bpTaskMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BpTaskMapABValue Clone() {
      return new BpTaskMapABValue(this);
    }

    /// <summary>Field number for the "BpTaskMap" field.</summary>
    public const int BpTaskMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.BpTask>.Codec _map_bpTaskMap_codec
        = new pbc::MapField<int, global::fat.rawdata.BpTask>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.BpTask.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.BpTask> bpTaskMap_ = new pbc::MapField<int, global::fat.rawdata.BpTask>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.BpTask> BpTaskMap {
      get { return bpTaskMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BpTaskMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BpTaskMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!BpTaskMap.Equals(other.BpTaskMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= BpTaskMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      bpTaskMap_.WriteTo(output, _map_bpTaskMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      bpTaskMap_.WriteTo(ref output, _map_bpTaskMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bpTaskMap_.CalculateSize(_map_bpTaskMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BpTaskMapABValue other) {
      if (other == null) {
        return;
      }
      bpTaskMap_.Add(other.bpTaskMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bpTaskMap_.AddEntriesFrom(input, _map_bpTaskMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            bpTaskMap_.AddEntriesFrom(ref input, _map_bpTaskMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BpTaskConf : pb::IMessage<BpTaskConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BpTaskConf> _parser = new pb::MessageParser<BpTaskConf>(() => new BpTaskConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BpTaskConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.BpTaskConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BpTaskConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BpTaskConf(BpTaskConf other) : this() {
      bpTaskMap_ = other.bpTaskMap_.Clone();
      bpTaskMapAB_ = other.bpTaskMapAB_.Clone();
      bpTaskMapABPatch_ = other.bpTaskMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BpTaskConf Clone() {
      return new BpTaskConf(this);
    }

    /// <summary>Field number for the "BpTaskMap" field.</summary>
    public const int BpTaskMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.BpTask>.Codec _map_bpTaskMap_codec
        = new pbc::MapField<int, global::fat.rawdata.BpTask>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.BpTask.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.BpTask> bpTaskMap_ = new pbc::MapField<int, global::fat.rawdata.BpTask>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.BpTask> BpTaskMap {
      get { return bpTaskMap_; }
    }

    /// <summary>Field number for the "BpTaskMapAB" field.</summary>
    public const int BpTaskMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.BpTaskMapABValue>.Codec _map_bpTaskMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.BpTaskMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.BpTaskMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.BpTaskMapABValue> bpTaskMapAB_ = new pbc::MapField<string, global::fat.rawdata.BpTaskMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.BpTaskMapABValue> BpTaskMapAB {
      get { return bpTaskMapAB_; }
    }

    /// <summary>Field number for the "BpTaskMapABPatch" field.</summary>
    public const int BpTaskMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.BpTaskMapABValue>.Codec _map_bpTaskMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.BpTaskMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.BpTaskMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.BpTaskMapABValue> bpTaskMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.BpTaskMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.BpTaskMapABValue> BpTaskMapABPatch {
      get { return bpTaskMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BpTaskConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BpTaskConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!BpTaskMap.Equals(other.BpTaskMap)) return false;
      if (!BpTaskMapAB.Equals(other.BpTaskMapAB)) return false;
      if (!BpTaskMapABPatch.Equals(other.BpTaskMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= BpTaskMap.GetHashCode();
      hash ^= BpTaskMapAB.GetHashCode();
      hash ^= BpTaskMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      bpTaskMap_.WriteTo(output, _map_bpTaskMap_codec);
      bpTaskMapAB_.WriteTo(output, _map_bpTaskMapAB_codec);
      bpTaskMapABPatch_.WriteTo(output, _map_bpTaskMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      bpTaskMap_.WriteTo(ref output, _map_bpTaskMap_codec);
      bpTaskMapAB_.WriteTo(ref output, _map_bpTaskMapAB_codec);
      bpTaskMapABPatch_.WriteTo(ref output, _map_bpTaskMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bpTaskMap_.CalculateSize(_map_bpTaskMap_codec);
      size += bpTaskMapAB_.CalculateSize(_map_bpTaskMapAB_codec);
      size += bpTaskMapABPatch_.CalculateSize(_map_bpTaskMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BpTaskConf other) {
      if (other == null) {
        return;
      }
      bpTaskMap_.Add(other.bpTaskMap_);
      bpTaskMapAB_.Add(other.bpTaskMapAB_);
      bpTaskMapABPatch_.Add(other.bpTaskMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bpTaskMap_.AddEntriesFrom(input, _map_bpTaskMap_codec);
            break;
          }
          case 18: {
            bpTaskMapAB_.AddEntriesFrom(input, _map_bpTaskMapAB_codec);
            break;
          }
          case 26: {
            bpTaskMapABPatch_.AddEntriesFrom(input, _map_bpTaskMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            bpTaskMap_.AddEntriesFrom(ref input, _map_bpTaskMap_codec);
            break;
          }
          case 18: {
            bpTaskMapAB_.AddEntriesFrom(ref input, _map_bpTaskMapAB_codec);
            break;
          }
          case 26: {
            bpTaskMapABPatch_.AddEntriesFrom(ref input, _map_bpTaskMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
