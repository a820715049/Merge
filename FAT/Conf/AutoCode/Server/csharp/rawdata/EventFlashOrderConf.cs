// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventFlashOrderConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventFlashOrderConf.proto</summary>
  public static partial class EventFlashOrderConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventFlashOrderConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventFlashOrderConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFyYXdkYXRhL0V2ZW50Rmxhc2hPcmRlckNvbmYucHJvdG8SB3Jhd2RhdGEi",
            "pwEKD0V2ZW50Rmxhc2hPcmRlchIKCgJpZBgBIAEoBRIPCgdib2FyZElkGAgg",
            "ASgFEhAKCGRlYWRsaW5lGAcgASgFEhQKDGluaXRSYW5kb21lchgCIAEoBRIQ",
            "CghsaWZlVGltZRgDIAEoCRIUCgxsb3NlUmFuZG9tZXIYBCADKAUSEgoKb3Jk",
            "ZXJUaGVtZRgFIAEoCRITCgt3aW5SYW5kb21lchgGIAMoBSLIAQoZRXZlbnRG",
            "bGFzaE9yZGVyTWFwQUJWYWx1ZRJWChJFdmVudEZsYXNoT3JkZXJNYXAYASAD",
            "KAsyOi5yYXdkYXRhLkV2ZW50Rmxhc2hPcmRlck1hcEFCVmFsdWUuRXZlbnRG",
            "bGFzaE9yZGVyTWFwRW50cnkaUwoXRXZlbnRGbGFzaE9yZGVyTWFwRW50cnkS",
            "CwoDa2V5GAEgASgFEicKBXZhbHVlGAIgASgLMhgucmF3ZGF0YS5FdmVudEZs",
            "YXNoT3JkZXI6AjgBIrkEChNFdmVudEZsYXNoT3JkZXJDb25mElAKEkV2ZW50",
            "Rmxhc2hPcmRlck1hcBgBIAMoCzI0LnJhd2RhdGEuRXZlbnRGbGFzaE9yZGVy",
            "Q29uZi5FdmVudEZsYXNoT3JkZXJNYXBFbnRyeRJUChRFdmVudEZsYXNoT3Jk",
            "ZXJNYXBBQhgCIAMoCzI2LnJhd2RhdGEuRXZlbnRGbGFzaE9yZGVyQ29uZi5F",
            "dmVudEZsYXNoT3JkZXJNYXBBQkVudHJ5El4KGUV2ZW50Rmxhc2hPcmRlck1h",
            "cEFCUGF0Y2gYAyADKAsyOy5yYXdkYXRhLkV2ZW50Rmxhc2hPcmRlckNvbmYu",
            "RXZlbnRGbGFzaE9yZGVyTWFwQUJQYXRjaEVudHJ5GlMKF0V2ZW50Rmxhc2hP",
            "cmRlck1hcEVudHJ5EgsKA2tleRgBIAEoBRInCgV2YWx1ZRgCIAEoCzIYLnJh",
            "d2RhdGEuRXZlbnRGbGFzaE9yZGVyOgI4ARpfChlFdmVudEZsYXNoT3JkZXJN",
            "YXBBQkVudHJ5EgsKA2tleRgBIAEoCRIxCgV2YWx1ZRgCIAEoCzIiLnJhd2Rh",
            "dGEuRXZlbnRGbGFzaE9yZGVyTWFwQUJWYWx1ZToCOAEaZAoeRXZlbnRGbGFz",
            "aE9yZGVyTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIxCgV2YWx1ZRgC",
            "IAEoCzIiLnJhd2RhdGEuRXZlbnRGbGFzaE9yZGVyTWFwQUJWYWx1ZToCOAFC",
            "PVotZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdk",
            "YXRhqgILZmF0LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventFlashOrder), global::fat.rawdata.EventFlashOrder.Parser, new[]{ "Id", "BoardId", "Deadline", "InitRandomer", "LifeTime", "LoseRandomer", "OrderTheme", "WinRandomer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventFlashOrderMapABValue), global::fat.rawdata.EventFlashOrderMapABValue.Parser, new[]{ "EventFlashOrderMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventFlashOrderConf), global::fat.rawdata.EventFlashOrderConf.Parser, new[]{ "EventFlashOrderMap", "EventFlashOrderMapAB", "EventFlashOrderMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventFlashOrder",table="EventFlashOrderMap",table_wrapper="EventFlashOrderConf",map="true",map_key_type="int32",data="EventFlashOrderConf")
  /// annotation@ab(table_ab="EventFlashOrderMapAB",table_ab_patch="EventFlashOrderMapABPatch",table_ab_value="EventFlashOrderMapABValue",ab_patch="true")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventFlashOrder(id="id")
  /// </summary>
  public sealed partial class EventFlashOrder : pb::IMessage<EventFlashOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFlashOrder> _parser = new pb::MessageParser<EventFlashOrder>(() => new EventFlashOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFlashOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventFlashOrderConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFlashOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFlashOrder(EventFlashOrder other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      deadline_ = other.deadline_;
      initRandomer_ = other.initRandomer_;
      lifeTime_ = other.lifeTime_;
      loseRandomer_ = other.loseRandomer_.Clone();
      orderTheme_ = other.orderTheme_;
      winRandomer_ = other.winRandomer_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFlashOrder Clone() {
      return new EventFlashOrder(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 限时订单活动
    /// 模板ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 8;
    private int boardId_;
    /// <summary>
    /// 此活动对哪个棋盘生效
    /// （MergeBoard.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "deadline" field.</summary>
    public const int DeadlineFieldNumber = 7;
    private int deadline_;
    /// <summary>
    /// 发放订单截止时间
    /// 从活动结束时刻往前推
    /// （秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Deadline {
      get { return deadline_; }
      set {
        deadline_ = value;
      }
    }

    /// <summary>Field number for the "initRandomer" field.</summary>
    public const int InitRandomerFieldNumber = 2;
    private int initRandomer_;
    /// <summary>
    /// 初始randomerId
    /// （OrderRandomer.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitRandomer {
      get { return initRandomer_; }
      set {
        initRandomer_ = value;
      }
    }

    /// <summary>Field number for the "lifeTime" field.</summary>
    public const int LifeTimeFieldNumber = 3;
    private string lifeTime_ = "";
    /// <summary>
    /// 生命周期限制
    /// {时长:计算方式}
    /// 0 = 时长（秒）
    /// 7 = 时长*（实际难度/100），RoundLifeTime取整
    /// 约定：时长为0，视为无限时长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LifeTime {
      get { return lifeTime_; }
      set {
        lifeTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loseRandomer" field.</summary>
    public const int LoseRandomerFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_loseRandomer_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> loseRandomer_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 失败randomerId
    /// （OrderRandomer.id）
    /// 上一个限时订单失败时
    /// 根据活动期间经历的
    /// 限时订单次数，取对应值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LoseRandomer {
      get { return loseRandomer_; }
    }

    /// <summary>Field number for the "orderTheme" field.</summary>
    public const int OrderThemeFieldNumber = 5;
    private string orderTheme_ = "";
    /// <summary>
    /// 订单界面模板
    /// （Asset）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderTheme {
      get { return orderTheme_; }
      set {
        orderTheme_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "winRandomer" field.</summary>
    public const int WinRandomerFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_winRandomer_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> winRandomer_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 胜利randomerId
    /// （OrderRandomer.id）
    /// 上一个限时订单完成时
    /// 根据活动期间经历的
    /// 限时订单次数，取对应值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WinRandomer {
      get { return winRandomer_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFlashOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFlashOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (Deadline != other.Deadline) return false;
      if (InitRandomer != other.InitRandomer) return false;
      if (LifeTime != other.LifeTime) return false;
      if(!loseRandomer_.Equals(other.loseRandomer_)) return false;
      if (OrderTheme != other.OrderTheme) return false;
      if(!winRandomer_.Equals(other.winRandomer_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (Deadline != 0) hash ^= Deadline.GetHashCode();
      if (InitRandomer != 0) hash ^= InitRandomer.GetHashCode();
      if (LifeTime.Length != 0) hash ^= LifeTime.GetHashCode();
      hash ^= loseRandomer_.GetHashCode();
      if (OrderTheme.Length != 0) hash ^= OrderTheme.GetHashCode();
      hash ^= winRandomer_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (InitRandomer != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InitRandomer);
      }
      if (LifeTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LifeTime);
      }
      loseRandomer_.WriteTo(output, _repeated_loseRandomer_codec);
      if (OrderTheme.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderTheme);
      }
      winRandomer_.WriteTo(output, _repeated_winRandomer_codec);
      if (Deadline != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Deadline);
      }
      if (BoardId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BoardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (InitRandomer != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InitRandomer);
      }
      if (LifeTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LifeTime);
      }
      loseRandomer_.WriteTo(ref output, _repeated_loseRandomer_codec);
      if (OrderTheme.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderTheme);
      }
      winRandomer_.WriteTo(ref output, _repeated_winRandomer_codec);
      if (Deadline != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Deadline);
      }
      if (BoardId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BoardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (Deadline != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deadline);
      }
      if (InitRandomer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitRandomer);
      }
      if (LifeTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LifeTime);
      }
      size += loseRandomer_.CalculateSize(_repeated_loseRandomer_codec);
      if (OrderTheme.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderTheme);
      }
      size += winRandomer_.CalculateSize(_repeated_winRandomer_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFlashOrder other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.Deadline != 0) {
        Deadline = other.Deadline;
      }
      if (other.InitRandomer != 0) {
        InitRandomer = other.InitRandomer;
      }
      if (other.LifeTime.Length != 0) {
        LifeTime = other.LifeTime;
      }
      loseRandomer_.Add(other.loseRandomer_);
      if (other.OrderTheme.Length != 0) {
        OrderTheme = other.OrderTheme;
      }
      winRandomer_.Add(other.winRandomer_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            InitRandomer = input.ReadInt32();
            break;
          }
          case 26: {
            LifeTime = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            loseRandomer_.AddEntriesFrom(input, _repeated_loseRandomer_codec);
            break;
          }
          case 42: {
            OrderTheme = input.ReadString();
            break;
          }
          case 50:
          case 48: {
            winRandomer_.AddEntriesFrom(input, _repeated_winRandomer_codec);
            break;
          }
          case 56: {
            Deadline = input.ReadInt32();
            break;
          }
          case 64: {
            BoardId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            InitRandomer = input.ReadInt32();
            break;
          }
          case 26: {
            LifeTime = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            loseRandomer_.AddEntriesFrom(ref input, _repeated_loseRandomer_codec);
            break;
          }
          case 42: {
            OrderTheme = input.ReadString();
            break;
          }
          case 50:
          case 48: {
            winRandomer_.AddEntriesFrom(ref input, _repeated_winRandomer_codec);
            break;
          }
          case 56: {
            Deadline = input.ReadInt32();
            break;
          }
          case 64: {
            BoardId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventFlashOrderMapABValue : pb::IMessage<EventFlashOrderMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFlashOrderMapABValue> _parser = new pb::MessageParser<EventFlashOrderMapABValue>(() => new EventFlashOrderMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFlashOrderMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventFlashOrderConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFlashOrderMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFlashOrderMapABValue(EventFlashOrderMapABValue other) : this() {
      eventFlashOrderMap_ = other.eventFlashOrderMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFlashOrderMapABValue Clone() {
      return new EventFlashOrderMapABValue(this);
    }

    /// <summary>Field number for the "EventFlashOrderMap" field.</summary>
    public const int EventFlashOrderMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventFlashOrder>.Codec _map_eventFlashOrderMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventFlashOrder>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFlashOrder.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventFlashOrder> eventFlashOrderMap_ = new pbc::MapField<int, global::fat.rawdata.EventFlashOrder>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventFlashOrder> EventFlashOrderMap {
      get { return eventFlashOrderMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFlashOrderMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFlashOrderMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventFlashOrderMap.Equals(other.EventFlashOrderMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventFlashOrderMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventFlashOrderMap_.WriteTo(output, _map_eventFlashOrderMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventFlashOrderMap_.WriteTo(ref output, _map_eventFlashOrderMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventFlashOrderMap_.CalculateSize(_map_eventFlashOrderMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFlashOrderMapABValue other) {
      if (other == null) {
        return;
      }
      eventFlashOrderMap_.Add(other.eventFlashOrderMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventFlashOrderMap_.AddEntriesFrom(input, _map_eventFlashOrderMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventFlashOrderMap_.AddEntriesFrom(ref input, _map_eventFlashOrderMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventFlashOrderConf : pb::IMessage<EventFlashOrderConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFlashOrderConf> _parser = new pb::MessageParser<EventFlashOrderConf>(() => new EventFlashOrderConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFlashOrderConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventFlashOrderConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFlashOrderConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFlashOrderConf(EventFlashOrderConf other) : this() {
      eventFlashOrderMap_ = other.eventFlashOrderMap_.Clone();
      eventFlashOrderMapAB_ = other.eventFlashOrderMapAB_.Clone();
      eventFlashOrderMapABPatch_ = other.eventFlashOrderMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFlashOrderConf Clone() {
      return new EventFlashOrderConf(this);
    }

    /// <summary>Field number for the "EventFlashOrderMap" field.</summary>
    public const int EventFlashOrderMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventFlashOrder>.Codec _map_eventFlashOrderMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventFlashOrder>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFlashOrder.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventFlashOrder> eventFlashOrderMap_ = new pbc::MapField<int, global::fat.rawdata.EventFlashOrder>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventFlashOrder> EventFlashOrderMap {
      get { return eventFlashOrderMap_; }
    }

    /// <summary>Field number for the "EventFlashOrderMapAB" field.</summary>
    public const int EventFlashOrderMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventFlashOrderMapABValue>.Codec _map_eventFlashOrderMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventFlashOrderMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFlashOrderMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventFlashOrderMapABValue> eventFlashOrderMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventFlashOrderMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventFlashOrderMapABValue> EventFlashOrderMapAB {
      get { return eventFlashOrderMapAB_; }
    }

    /// <summary>Field number for the "EventFlashOrderMapABPatch" field.</summary>
    public const int EventFlashOrderMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventFlashOrderMapABValue>.Codec _map_eventFlashOrderMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventFlashOrderMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventFlashOrderMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventFlashOrderMapABValue> eventFlashOrderMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventFlashOrderMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventFlashOrderMapABValue> EventFlashOrderMapABPatch {
      get { return eventFlashOrderMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFlashOrderConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFlashOrderConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventFlashOrderMap.Equals(other.EventFlashOrderMap)) return false;
      if (!EventFlashOrderMapAB.Equals(other.EventFlashOrderMapAB)) return false;
      if (!EventFlashOrderMapABPatch.Equals(other.EventFlashOrderMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventFlashOrderMap.GetHashCode();
      hash ^= EventFlashOrderMapAB.GetHashCode();
      hash ^= EventFlashOrderMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventFlashOrderMap_.WriteTo(output, _map_eventFlashOrderMap_codec);
      eventFlashOrderMapAB_.WriteTo(output, _map_eventFlashOrderMapAB_codec);
      eventFlashOrderMapABPatch_.WriteTo(output, _map_eventFlashOrderMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventFlashOrderMap_.WriteTo(ref output, _map_eventFlashOrderMap_codec);
      eventFlashOrderMapAB_.WriteTo(ref output, _map_eventFlashOrderMapAB_codec);
      eventFlashOrderMapABPatch_.WriteTo(ref output, _map_eventFlashOrderMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventFlashOrderMap_.CalculateSize(_map_eventFlashOrderMap_codec);
      size += eventFlashOrderMapAB_.CalculateSize(_map_eventFlashOrderMapAB_codec);
      size += eventFlashOrderMapABPatch_.CalculateSize(_map_eventFlashOrderMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFlashOrderConf other) {
      if (other == null) {
        return;
      }
      eventFlashOrderMap_.Add(other.eventFlashOrderMap_);
      eventFlashOrderMapAB_.Add(other.eventFlashOrderMapAB_);
      eventFlashOrderMapABPatch_.Add(other.eventFlashOrderMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventFlashOrderMap_.AddEntriesFrom(input, _map_eventFlashOrderMap_codec);
            break;
          }
          case 18: {
            eventFlashOrderMapAB_.AddEntriesFrom(input, _map_eventFlashOrderMapAB_codec);
            break;
          }
          case 26: {
            eventFlashOrderMapABPatch_.AddEntriesFrom(input, _map_eventFlashOrderMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventFlashOrderMap_.AddEntriesFrom(ref input, _map_eventFlashOrderMap_codec);
            break;
          }
          case 18: {
            eventFlashOrderMapAB_.AddEntriesFrom(ref input, _map_eventFlashOrderMapAB_codec);
            break;
          }
          case 26: {
            eventFlashOrderMapABPatch_.AddEntriesFrom(ref input, _map_eventFlashOrderMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
