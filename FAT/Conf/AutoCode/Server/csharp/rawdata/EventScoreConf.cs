// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventScoreConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventScoreConf.proto</summary>
  public static partial class EventScoreConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventScoreConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventScoreConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxyYXdkYXRhL0V2ZW50U2NvcmVDb25mLnByb3RvEgdyYXdkYXRhIv4DCgpF",
            "dmVudFNjb3JlEgoKAmlkGAEgASgFEg8KB2JvYXJkSWQYAiABKAUSFwoPYnV5",
            "QnViYmxlRmFjdG9yGAMgASgFEhcKD2J1eU1hcmtldEZhY3RvchgEIAEoBRIU",
            "CgxldmVudFRoZW1lSWQYDSABKAUSNwoKZXhwaXJlSXRlbRgSIAMoCzIjLnJh",
            "d2RhdGEuRXZlbnRTY29yZS5FeHBpcmVJdGVtRW50cnkSEgoKZXh0cmFTY29y",
            "ZRgPIAEoBRIcChRmaW5hbE1pbGVzdG9uZVJld2FyZBgFIAMoCRIbChNmaW5h",
            "bE1pbGVzdG9uZVNjb3JlGAYgASgFEg8KB2dyYWRlSWQYECABKAUSDgoGaXNI",
            "ZWxwGBEgASgIEhcKD21pbGVzdG9uZVJld2FyZBgHIAMoCRIWCg5taWxlc3Rv",
            "bmVTY29yZRgIIAMoBRITCgttaW5EaWZmUmF0ZRgJIAEoBRIMCgRuYW1lGAog",
            "ASgJEhgKEG9yZGVyU2NvcmVGYWN0b3IYCyABKAUSFQoNcmVxdWlyZUNvaW5J",
            "ZBgMIAEoBRITCgtyZXdhcmRQb3B1cBgVIAEoCBIVCg1yZXdhcmRTdGVwTnVt",
            "GBQgAygFGjEKD0V4cGlyZUl0ZW1FbnRyeRILCgNrZXkYASABKAUSDQoFdmFs",
            "dWUYAiABKAU6AjgBIqoBChRFdmVudFNjb3JlTWFwQUJWYWx1ZRJHCg1FdmVu",
            "dFNjb3JlTWFwGAEgAygLMjAucmF3ZGF0YS5FdmVudFNjb3JlTWFwQUJWYWx1",
            "ZS5FdmVudFNjb3JlTWFwRW50cnkaSQoSRXZlbnRTY29yZU1hcEVudHJ5EgsK",
            "A2tleRgBIAEoBRIiCgV2YWx1ZRgCIAEoCzITLnJhd2RhdGEuRXZlbnRTY29y",
            "ZToCOAEi6QMKDkV2ZW50U2NvcmVDb25mEkEKDUV2ZW50U2NvcmVNYXAYASAD",
            "KAsyKi5yYXdkYXRhLkV2ZW50U2NvcmVDb25mLkV2ZW50U2NvcmVNYXBFbnRy",
            "eRJFCg9FdmVudFNjb3JlTWFwQUIYAiADKAsyLC5yYXdkYXRhLkV2ZW50U2Nv",
            "cmVDb25mLkV2ZW50U2NvcmVNYXBBQkVudHJ5Ek8KFEV2ZW50U2NvcmVNYXBB",
            "QlBhdGNoGAMgAygLMjEucmF3ZGF0YS5FdmVudFNjb3JlQ29uZi5FdmVudFNj",
            "b3JlTWFwQUJQYXRjaEVudHJ5GkkKEkV2ZW50U2NvcmVNYXBFbnRyeRILCgNr",
            "ZXkYASABKAUSIgoFdmFsdWUYAiABKAsyEy5yYXdkYXRhLkV2ZW50U2NvcmU6",
            "AjgBGlUKFEV2ZW50U2NvcmVNYXBBQkVudHJ5EgsKA2tleRgBIAEoCRIsCgV2",
            "YWx1ZRgCIAEoCzIdLnJhd2RhdGEuRXZlbnRTY29yZU1hcEFCVmFsdWU6AjgB",
            "GloKGUV2ZW50U2NvcmVNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEiwK",
            "BXZhbHVlGAIgASgLMh0ucmF3ZGF0YS5FdmVudFNjb3JlTWFwQUJWYWx1ZToC",
            "OAFCPVotZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9y",
            "YXdkYXRhqgILZmF0LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventScore), global::fat.rawdata.EventScore.Parser, new[]{ "Id", "BoardId", "BuyBubbleFactor", "BuyMarketFactor", "EventThemeId", "ExpireItem", "ExtraScore", "FinalMilestoneReward", "FinalMilestoneScore", "GradeId", "IsHelp", "MilestoneReward", "MilestoneScore", "MinDiffRate", "Name", "OrderScoreFactor", "RequireCoinId", "RewardPopup", "RewardStepNum" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventScoreMapABValue), global::fat.rawdata.EventScoreMapABValue.Parser, new[]{ "EventScoreMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventScoreConf), global::fat.rawdata.EventScoreConf.Parser, new[]{ "EventScoreMap", "EventScoreMapAB", "EventScoreMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventScore",table="EventScoreMap",table_wrapper="EventScoreConf",map="true",map_key_type="int32",data="EventScoreConf")
  /// annotation@ab(table_ab="EventScoreMapAB",table_ab_patch="EventScoreMapABPatch",table_ab_value="EventScoreMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventScore(id="id")
  /// </summary>
  public sealed partial class EventScore : pb::IMessage<EventScore>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventScore> _parser = new pb::MessageParser<EventScore>(() => new EventScore());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventScore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventScoreConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventScore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventScore(EventScore other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      buyBubbleFactor_ = other.buyBubbleFactor_;
      buyMarketFactor_ = other.buyMarketFactor_;
      eventThemeId_ = other.eventThemeId_;
      expireItem_ = other.expireItem_.Clone();
      extraScore_ = other.extraScore_;
      finalMilestoneReward_ = other.finalMilestoneReward_.Clone();
      finalMilestoneScore_ = other.finalMilestoneScore_;
      gradeId_ = other.gradeId_;
      isHelp_ = other.isHelp_;
      milestoneReward_ = other.milestoneReward_.Clone();
      milestoneScore_ = other.milestoneScore_.Clone();
      minDiffRate_ = other.minDiffRate_;
      name_ = other.name_;
      orderScoreFactor_ = other.orderScoreFactor_;
      requireCoinId_ = other.requireCoinId_;
      rewardPopup_ = other.rewardPopup_;
      rewardStepNum_ = other.rewardStepNum_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventScore Clone() {
      return new EventScore(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 适用棋盘
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "buyBubbleFactor" field.</summary>
    public const int BuyBubbleFactorFieldNumber = 3;
    private int buyBubbleFactor_;
    /// <summary>
    /// 泡泡系数
    /// （被extraScore代替）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyBubbleFactor {
      get { return buyBubbleFactor_; }
      set {
        buyBubbleFactor_ = value;
      }
    }

    /// <summary>Field number for the "buyMarketFactor" field.</summary>
    public const int BuyMarketFactorFieldNumber = 4;
    private int buyMarketFactor_;
    /// <summary>
    /// 商店系数
    /// （被extraScore代替）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyMarketFactor {
      get { return buyMarketFactor_; }
      set {
        buyMarketFactor_ = value;
      }
    }

    /// <summary>Field number for the "eventThemeId" field.</summary>
    public const int EventThemeIdFieldNumber = 13;
    private int eventThemeId_;
    /// <summary>
    /// 活动界面模板ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventThemeId {
      get { return eventThemeId_; }
      set {
        eventThemeId_ = value;
      }
    }

    /// <summary>Field number for the "expireItem" field.</summary>
    public const int ExpireItemFieldNumber = 18;
    private static readonly pbc::MapField<int, int>.Codec _map_expireItem_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 146);
    private readonly pbc::MapField<int, int> expireItem_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 活动结束时删除棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> ExpireItem {
      get { return expireItem_; }
    }

    /// <summary>Field number for the "extraScore" field.</summary>
    public const int ExtraScoreFieldNumber = 15;
    private int extraScore_;
    /// <summary>
    /// 积分模版
    /// （EventExtraScore.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraScore {
      get { return extraScore_; }
      set {
        extraScore_ = value;
      }
    }

    /// <summary>Field number for the "finalMilestoneReward" field.</summary>
    public const int FinalMilestoneRewardFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_finalMilestoneReward_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> finalMilestoneReward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 循环目标固定分值随机对应奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FinalMilestoneReward {
      get { return finalMilestoneReward_; }
    }

    /// <summary>Field number for the "finalMilestoneScore" field.</summary>
    public const int FinalMilestoneScoreFieldNumber = 6;
    private int finalMilestoneScore_;
    /// <summary>
    /// 循环目标固定分值要求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalMilestoneScore {
      get { return finalMilestoneScore_; }
      set {
        finalMilestoneScore_ = value;
      }
    }

    /// <summary>Field number for the "gradeId" field.</summary>
    public const int GradeIdFieldNumber = 16;
    private int gradeId_;
    /// <summary>
    /// 分层
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeId {
      get { return gradeId_; }
      set {
        gradeId_ = value;
      }
    }

    /// <summary>Field number for the "isHelp" field.</summary>
    public const int IsHelpFieldNumber = 17;
    private bool isHelp_;
    /// <summary>
    /// 是否显示帮助
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHelp {
      get { return isHelp_; }
      set {
        isHelp_ = value;
      }
    }

    /// <summary>Field number for the "milestoneReward" field.</summary>
    public const int MilestoneRewardFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_milestoneReward_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> milestoneReward_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 里程碑分数对应奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MilestoneReward {
      get { return milestoneReward_; }
    }

    /// <summary>Field number for the "milestoneScore" field.</summary>
    public const int MilestoneScoreFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_milestoneScore_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> milestoneScore_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 里程碑分数要求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MilestoneScore {
      get { return milestoneScore_; }
    }

    /// <summary>Field number for the "minDiffRate" field.</summary>
    public const int MinDiffRateFieldNumber = 9;
    private int minDiffRate_;
    /// <summary>
    /// 最低付出与实际难度比
    /// （百分数）
    /// 付出难度/实际难度最小为67%
    /// （被extraScore代替）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinDiffRate {
      get { return minDiffRate_; }
      set {
        minDiffRate_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 10;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderScoreFactor" field.</summary>
    public const int OrderScoreFactorFieldNumber = 11;
    private int orderScoreFactor_;
    /// <summary>
    /// (ObjBasic.id:订单积分系数:计算方式)
    /// = 订单积分系数/100*(实际难度/100)*付出与实际难度比%（RoundScore取整）
    /// （被extraScore代替）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderScoreFactor {
      get { return orderScoreFactor_; }
      set {
        orderScoreFactor_ = value;
      }
    }

    /// <summary>Field number for the "requireCoinId" field.</summary>
    public const int RequireCoinIdFieldNumber = 12;
    private int requireCoinId_;
    /// <summary>
    /// 里程碑所需货币ID
    /// （ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireCoinId {
      get { return requireCoinId_; }
      set {
        requireCoinId_ = value;
      }
    }

    /// <summary>Field number for the "rewardPopup" field.</summary>
    public const int RewardPopupFieldNumber = 21;
    private bool rewardPopup_;
    /// <summary>
    /// 可以领奖时是否主动弹出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RewardPopup {
      get { return rewardPopup_; }
      set {
        rewardPopup_ = value;
      }
    }

    /// <summary>Field number for the "rewardStepNum" field.</summary>
    public const int RewardStepNumFieldNumber = 20;
    private static readonly pb::FieldCodec<int> _repeated_rewardStepNum_codec
        = pb::FieldCodec.ForInt32(162);
    private readonly pbc::RepeatedField<int> rewardStepNum_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 阶段大奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RewardStepNum {
      get { return rewardStepNum_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventScore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventScore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (BuyBubbleFactor != other.BuyBubbleFactor) return false;
      if (BuyMarketFactor != other.BuyMarketFactor) return false;
      if (EventThemeId != other.EventThemeId) return false;
      if (!ExpireItem.Equals(other.ExpireItem)) return false;
      if (ExtraScore != other.ExtraScore) return false;
      if(!finalMilestoneReward_.Equals(other.finalMilestoneReward_)) return false;
      if (FinalMilestoneScore != other.FinalMilestoneScore) return false;
      if (GradeId != other.GradeId) return false;
      if (IsHelp != other.IsHelp) return false;
      if(!milestoneReward_.Equals(other.milestoneReward_)) return false;
      if(!milestoneScore_.Equals(other.milestoneScore_)) return false;
      if (MinDiffRate != other.MinDiffRate) return false;
      if (Name != other.Name) return false;
      if (OrderScoreFactor != other.OrderScoreFactor) return false;
      if (RequireCoinId != other.RequireCoinId) return false;
      if (RewardPopup != other.RewardPopup) return false;
      if(!rewardStepNum_.Equals(other.rewardStepNum_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (BuyBubbleFactor != 0) hash ^= BuyBubbleFactor.GetHashCode();
      if (BuyMarketFactor != 0) hash ^= BuyMarketFactor.GetHashCode();
      if (EventThemeId != 0) hash ^= EventThemeId.GetHashCode();
      hash ^= ExpireItem.GetHashCode();
      if (ExtraScore != 0) hash ^= ExtraScore.GetHashCode();
      hash ^= finalMilestoneReward_.GetHashCode();
      if (FinalMilestoneScore != 0) hash ^= FinalMilestoneScore.GetHashCode();
      if (GradeId != 0) hash ^= GradeId.GetHashCode();
      if (IsHelp != false) hash ^= IsHelp.GetHashCode();
      hash ^= milestoneReward_.GetHashCode();
      hash ^= milestoneScore_.GetHashCode();
      if (MinDiffRate != 0) hash ^= MinDiffRate.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (OrderScoreFactor != 0) hash ^= OrderScoreFactor.GetHashCode();
      if (RequireCoinId != 0) hash ^= RequireCoinId.GetHashCode();
      if (RewardPopup != false) hash ^= RewardPopup.GetHashCode();
      hash ^= rewardStepNum_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (BuyBubbleFactor != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuyBubbleFactor);
      }
      if (BuyMarketFactor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BuyMarketFactor);
      }
      finalMilestoneReward_.WriteTo(output, _repeated_finalMilestoneReward_codec);
      if (FinalMilestoneScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FinalMilestoneScore);
      }
      milestoneReward_.WriteTo(output, _repeated_milestoneReward_codec);
      milestoneScore_.WriteTo(output, _repeated_milestoneScore_codec);
      if (MinDiffRate != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MinDiffRate);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Name);
      }
      if (OrderScoreFactor != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(OrderScoreFactor);
      }
      if (RequireCoinId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RequireCoinId);
      }
      if (EventThemeId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(EventThemeId);
      }
      if (ExtraScore != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ExtraScore);
      }
      if (GradeId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(GradeId);
      }
      if (IsHelp != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsHelp);
      }
      expireItem_.WriteTo(output, _map_expireItem_codec);
      rewardStepNum_.WriteTo(output, _repeated_rewardStepNum_codec);
      if (RewardPopup != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(RewardPopup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (BuyBubbleFactor != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuyBubbleFactor);
      }
      if (BuyMarketFactor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BuyMarketFactor);
      }
      finalMilestoneReward_.WriteTo(ref output, _repeated_finalMilestoneReward_codec);
      if (FinalMilestoneScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FinalMilestoneScore);
      }
      milestoneReward_.WriteTo(ref output, _repeated_milestoneReward_codec);
      milestoneScore_.WriteTo(ref output, _repeated_milestoneScore_codec);
      if (MinDiffRate != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MinDiffRate);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Name);
      }
      if (OrderScoreFactor != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(OrderScoreFactor);
      }
      if (RequireCoinId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RequireCoinId);
      }
      if (EventThemeId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(EventThemeId);
      }
      if (ExtraScore != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ExtraScore);
      }
      if (GradeId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(GradeId);
      }
      if (IsHelp != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsHelp);
      }
      expireItem_.WriteTo(ref output, _map_expireItem_codec);
      rewardStepNum_.WriteTo(ref output, _repeated_rewardStepNum_codec);
      if (RewardPopup != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(RewardPopup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (BuyBubbleFactor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyBubbleFactor);
      }
      if (BuyMarketFactor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyMarketFactor);
      }
      if (EventThemeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventThemeId);
      }
      size += expireItem_.CalculateSize(_map_expireItem_codec);
      if (ExtraScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraScore);
      }
      size += finalMilestoneReward_.CalculateSize(_repeated_finalMilestoneReward_codec);
      if (FinalMilestoneScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalMilestoneScore);
      }
      if (GradeId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GradeId);
      }
      if (IsHelp != false) {
        size += 2 + 1;
      }
      size += milestoneReward_.CalculateSize(_repeated_milestoneReward_codec);
      size += milestoneScore_.CalculateSize(_repeated_milestoneScore_codec);
      if (MinDiffRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinDiffRate);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (OrderScoreFactor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderScoreFactor);
      }
      if (RequireCoinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequireCoinId);
      }
      if (RewardPopup != false) {
        size += 2 + 1;
      }
      size += rewardStepNum_.CalculateSize(_repeated_rewardStepNum_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventScore other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.BuyBubbleFactor != 0) {
        BuyBubbleFactor = other.BuyBubbleFactor;
      }
      if (other.BuyMarketFactor != 0) {
        BuyMarketFactor = other.BuyMarketFactor;
      }
      if (other.EventThemeId != 0) {
        EventThemeId = other.EventThemeId;
      }
      expireItem_.Add(other.expireItem_);
      if (other.ExtraScore != 0) {
        ExtraScore = other.ExtraScore;
      }
      finalMilestoneReward_.Add(other.finalMilestoneReward_);
      if (other.FinalMilestoneScore != 0) {
        FinalMilestoneScore = other.FinalMilestoneScore;
      }
      if (other.GradeId != 0) {
        GradeId = other.GradeId;
      }
      if (other.IsHelp != false) {
        IsHelp = other.IsHelp;
      }
      milestoneReward_.Add(other.milestoneReward_);
      milestoneScore_.Add(other.milestoneScore_);
      if (other.MinDiffRate != 0) {
        MinDiffRate = other.MinDiffRate;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.OrderScoreFactor != 0) {
        OrderScoreFactor = other.OrderScoreFactor;
      }
      if (other.RequireCoinId != 0) {
        RequireCoinId = other.RequireCoinId;
      }
      if (other.RewardPopup != false) {
        RewardPopup = other.RewardPopup;
      }
      rewardStepNum_.Add(other.rewardStepNum_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            BuyBubbleFactor = input.ReadInt32();
            break;
          }
          case 32: {
            BuyMarketFactor = input.ReadInt32();
            break;
          }
          case 42: {
            finalMilestoneReward_.AddEntriesFrom(input, _repeated_finalMilestoneReward_codec);
            break;
          }
          case 48: {
            FinalMilestoneScore = input.ReadInt32();
            break;
          }
          case 58: {
            milestoneReward_.AddEntriesFrom(input, _repeated_milestoneReward_codec);
            break;
          }
          case 66:
          case 64: {
            milestoneScore_.AddEntriesFrom(input, _repeated_milestoneScore_codec);
            break;
          }
          case 72: {
            MinDiffRate = input.ReadInt32();
            break;
          }
          case 82: {
            Name = input.ReadString();
            break;
          }
          case 88: {
            OrderScoreFactor = input.ReadInt32();
            break;
          }
          case 96: {
            RequireCoinId = input.ReadInt32();
            break;
          }
          case 104: {
            EventThemeId = input.ReadInt32();
            break;
          }
          case 120: {
            ExtraScore = input.ReadInt32();
            break;
          }
          case 128: {
            GradeId = input.ReadInt32();
            break;
          }
          case 136: {
            IsHelp = input.ReadBool();
            break;
          }
          case 146: {
            expireItem_.AddEntriesFrom(input, _map_expireItem_codec);
            break;
          }
          case 162:
          case 160: {
            rewardStepNum_.AddEntriesFrom(input, _repeated_rewardStepNum_codec);
            break;
          }
          case 168: {
            RewardPopup = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            BuyBubbleFactor = input.ReadInt32();
            break;
          }
          case 32: {
            BuyMarketFactor = input.ReadInt32();
            break;
          }
          case 42: {
            finalMilestoneReward_.AddEntriesFrom(ref input, _repeated_finalMilestoneReward_codec);
            break;
          }
          case 48: {
            FinalMilestoneScore = input.ReadInt32();
            break;
          }
          case 58: {
            milestoneReward_.AddEntriesFrom(ref input, _repeated_milestoneReward_codec);
            break;
          }
          case 66:
          case 64: {
            milestoneScore_.AddEntriesFrom(ref input, _repeated_milestoneScore_codec);
            break;
          }
          case 72: {
            MinDiffRate = input.ReadInt32();
            break;
          }
          case 82: {
            Name = input.ReadString();
            break;
          }
          case 88: {
            OrderScoreFactor = input.ReadInt32();
            break;
          }
          case 96: {
            RequireCoinId = input.ReadInt32();
            break;
          }
          case 104: {
            EventThemeId = input.ReadInt32();
            break;
          }
          case 120: {
            ExtraScore = input.ReadInt32();
            break;
          }
          case 128: {
            GradeId = input.ReadInt32();
            break;
          }
          case 136: {
            IsHelp = input.ReadBool();
            break;
          }
          case 146: {
            expireItem_.AddEntriesFrom(ref input, _map_expireItem_codec);
            break;
          }
          case 162:
          case 160: {
            rewardStepNum_.AddEntriesFrom(ref input, _repeated_rewardStepNum_codec);
            break;
          }
          case 168: {
            RewardPopup = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventScoreMapABValue : pb::IMessage<EventScoreMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventScoreMapABValue> _parser = new pb::MessageParser<EventScoreMapABValue>(() => new EventScoreMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventScoreMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventScoreConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventScoreMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventScoreMapABValue(EventScoreMapABValue other) : this() {
      eventScoreMap_ = other.eventScoreMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventScoreMapABValue Clone() {
      return new EventScoreMapABValue(this);
    }

    /// <summary>Field number for the "EventScoreMap" field.</summary>
    public const int EventScoreMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventScore>.Codec _map_eventScoreMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventScore>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventScore.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventScore> eventScoreMap_ = new pbc::MapField<int, global::fat.rawdata.EventScore>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventScore> EventScoreMap {
      get { return eventScoreMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventScoreMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventScoreMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventScoreMap.Equals(other.EventScoreMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventScoreMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventScoreMap_.WriteTo(output, _map_eventScoreMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventScoreMap_.WriteTo(ref output, _map_eventScoreMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventScoreMap_.CalculateSize(_map_eventScoreMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventScoreMapABValue other) {
      if (other == null) {
        return;
      }
      eventScoreMap_.Add(other.eventScoreMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventScoreMap_.AddEntriesFrom(input, _map_eventScoreMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventScoreMap_.AddEntriesFrom(ref input, _map_eventScoreMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventScoreConf : pb::IMessage<EventScoreConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventScoreConf> _parser = new pb::MessageParser<EventScoreConf>(() => new EventScoreConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventScoreConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventScoreConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventScoreConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventScoreConf(EventScoreConf other) : this() {
      eventScoreMap_ = other.eventScoreMap_.Clone();
      eventScoreMapAB_ = other.eventScoreMapAB_.Clone();
      eventScoreMapABPatch_ = other.eventScoreMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventScoreConf Clone() {
      return new EventScoreConf(this);
    }

    /// <summary>Field number for the "EventScoreMap" field.</summary>
    public const int EventScoreMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventScore>.Codec _map_eventScoreMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventScore>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventScore.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventScore> eventScoreMap_ = new pbc::MapField<int, global::fat.rawdata.EventScore>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventScore> EventScoreMap {
      get { return eventScoreMap_; }
    }

    /// <summary>Field number for the "EventScoreMapAB" field.</summary>
    public const int EventScoreMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventScoreMapABValue>.Codec _map_eventScoreMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventScoreMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventScoreMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventScoreMapABValue> eventScoreMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventScoreMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventScoreMapABValue> EventScoreMapAB {
      get { return eventScoreMapAB_; }
    }

    /// <summary>Field number for the "EventScoreMapABPatch" field.</summary>
    public const int EventScoreMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventScoreMapABValue>.Codec _map_eventScoreMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventScoreMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventScoreMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventScoreMapABValue> eventScoreMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventScoreMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventScoreMapABValue> EventScoreMapABPatch {
      get { return eventScoreMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventScoreConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventScoreConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventScoreMap.Equals(other.EventScoreMap)) return false;
      if (!EventScoreMapAB.Equals(other.EventScoreMapAB)) return false;
      if (!EventScoreMapABPatch.Equals(other.EventScoreMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventScoreMap.GetHashCode();
      hash ^= EventScoreMapAB.GetHashCode();
      hash ^= EventScoreMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventScoreMap_.WriteTo(output, _map_eventScoreMap_codec);
      eventScoreMapAB_.WriteTo(output, _map_eventScoreMapAB_codec);
      eventScoreMapABPatch_.WriteTo(output, _map_eventScoreMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventScoreMap_.WriteTo(ref output, _map_eventScoreMap_codec);
      eventScoreMapAB_.WriteTo(ref output, _map_eventScoreMapAB_codec);
      eventScoreMapABPatch_.WriteTo(ref output, _map_eventScoreMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventScoreMap_.CalculateSize(_map_eventScoreMap_codec);
      size += eventScoreMapAB_.CalculateSize(_map_eventScoreMapAB_codec);
      size += eventScoreMapABPatch_.CalculateSize(_map_eventScoreMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventScoreConf other) {
      if (other == null) {
        return;
      }
      eventScoreMap_.Add(other.eventScoreMap_);
      eventScoreMapAB_.Add(other.eventScoreMapAB_);
      eventScoreMapABPatch_.Add(other.eventScoreMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventScoreMap_.AddEntriesFrom(input, _map_eventScoreMap_codec);
            break;
          }
          case 18: {
            eventScoreMapAB_.AddEntriesFrom(input, _map_eventScoreMapAB_codec);
            break;
          }
          case 26: {
            eventScoreMapABPatch_.AddEntriesFrom(input, _map_eventScoreMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventScoreMap_.AddEntriesFrom(ref input, _map_eventScoreMap_codec);
            break;
          }
          case 18: {
            eventScoreMapAB_.AddEntriesFrom(ref input, _map_eventScoreMapAB_codec);
            break;
          }
          case 26: {
            eventScoreMapABPatch_.AddEntriesFrom(ref input, _map_eventScoreMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
