// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/GameDiffConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/GameDiffConf.proto</summary>
  public static partial class GameDiffConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/GameDiffConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameDiffConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpyYXdkYXRhL0dhbWVEaWZmQ29uZi5wcm90bxIHcmF3ZGF0YRoWcmF3ZGF0",
            "YS9HYW1lVHlwZS5wcm90byJTCghHYW1lRGlmZhIPCgdwcml2YWN5GAEgASgJ",
            "EhUKDXRlcm1PZlNlcnZpY2UYAiABKAkSHwoEdHlwZRgDIAEoDjIRLnJhd2Rh",
            "dGEuR2FtZVR5cGUiQAoUR2FtZURpZmZTbGljZUFCVmFsdWUSKAoNR2FtZURp",
            "ZmZTbGljZRgBIAMoCzIRLnJhd2RhdGEuR2FtZURpZmYi/wIKDEdhbWVEaWZm",
            "Q29uZhIoCg1HYW1lRGlmZlNsaWNlGAEgAygLMhEucmF3ZGF0YS5HYW1lRGlm",
            "ZhJDCg9HYW1lRGlmZlNsaWNlQUIYAiADKAsyKi5yYXdkYXRhLkdhbWVEaWZm",
            "Q29uZi5HYW1lRGlmZlNsaWNlQUJFbnRyeRJNChRHYW1lRGlmZlNsaWNlQUJQ",
            "YXRjaBgDIAMoCzIvLnJhd2RhdGEuR2FtZURpZmZDb25mLkdhbWVEaWZmU2xp",
            "Y2VBQlBhdGNoRW50cnkaVQoUR2FtZURpZmZTbGljZUFCRW50cnkSCwoDa2V5",
            "GAEgASgJEiwKBXZhbHVlGAIgASgLMh0ucmF3ZGF0YS5HYW1lRGlmZlNsaWNl",
            "QUJWYWx1ZToCOAEaWgoZR2FtZURpZmZTbGljZUFCUGF0Y2hFbnRyeRILCgNr",
            "ZXkYASABKAkSLAoFdmFsdWUYAiABKAsyHS5yYXdkYXRhLkdhbWVEaWZmU2xp",
            "Y2VBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9n",
            "ZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.rawdata.GameTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.GameDiff), global::fat.rawdata.GameDiff.Parser, new[]{ "Privacy", "TermOfService", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.GameDiffSliceABValue), global::fat.rawdata.GameDiffSliceABValue.Parser, new[]{ "GameDiffSlice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.GameDiffConf), global::fat.rawdata.GameDiffConf.Parser, new[]{ "GameDiffSlice", "GameDiffSliceAB", "GameDiffSliceABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="GameDiff",table="GameDiffSlice",table_wrapper="GameDiffConf",map="false",map_key_type="",data="GameDiffConf")
  /// annotation@ab(table_ab="GameDiffSliceAB",table_ab_patch="GameDiffSliceABPatch",table_ab_value="GameDiffSliceABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// </summary>
  public sealed partial class GameDiff : pb::IMessage<GameDiff>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameDiff> _parser = new pb::MessageParser<GameDiff>(() => new GameDiff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameDiff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.GameDiffConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDiff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDiff(GameDiff other) : this() {
      privacy_ = other.privacy_;
      termOfService_ = other.termOfService_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDiff Clone() {
      return new GameDiff(this);
    }

    /// <summary>Field number for the "privacy" field.</summary>
    public const int PrivacyFieldNumber = 1;
    private string privacy_ = "";
    /// <summary>
    /// 隐私策略
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Privacy {
      get { return privacy_; }
      set {
        privacy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "termOfService" field.</summary>
    public const int TermOfServiceFieldNumber = 2;
    private string termOfService_ = "";
    /// <summary>
    /// 服务协议
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TermOfService {
      get { return termOfService_; }
      set {
        termOfService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::fat.rawdata.GameType type_ = global::fat.rawdata.GameType.Mainland;
    /// <summary>
    /// 内地/港澳台/...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.rawdata.GameType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameDiff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameDiff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Privacy != other.Privacy) return false;
      if (TermOfService != other.TermOfService) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Privacy.Length != 0) hash ^= Privacy.GetHashCode();
      if (TermOfService.Length != 0) hash ^= TermOfService.GetHashCode();
      if (Type != global::fat.rawdata.GameType.Mainland) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Privacy.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Privacy);
      }
      if (TermOfService.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TermOfService);
      }
      if (Type != global::fat.rawdata.GameType.Mainland) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Privacy.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Privacy);
      }
      if (TermOfService.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TermOfService);
      }
      if (Type != global::fat.rawdata.GameType.Mainland) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Privacy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Privacy);
      }
      if (TermOfService.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TermOfService);
      }
      if (Type != global::fat.rawdata.GameType.Mainland) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameDiff other) {
      if (other == null) {
        return;
      }
      if (other.Privacy.Length != 0) {
        Privacy = other.Privacy;
      }
      if (other.TermOfService.Length != 0) {
        TermOfService = other.TermOfService;
      }
      if (other.Type != global::fat.rawdata.GameType.Mainland) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Privacy = input.ReadString();
            break;
          }
          case 18: {
            TermOfService = input.ReadString();
            break;
          }
          case 24: {
            Type = (global::fat.rawdata.GameType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Privacy = input.ReadString();
            break;
          }
          case 18: {
            TermOfService = input.ReadString();
            break;
          }
          case 24: {
            Type = (global::fat.rawdata.GameType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameDiffSliceABValue : pb::IMessage<GameDiffSliceABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameDiffSliceABValue> _parser = new pb::MessageParser<GameDiffSliceABValue>(() => new GameDiffSliceABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameDiffSliceABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.GameDiffConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDiffSliceABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDiffSliceABValue(GameDiffSliceABValue other) : this() {
      gameDiffSlice_ = other.gameDiffSlice_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDiffSliceABValue Clone() {
      return new GameDiffSliceABValue(this);
    }

    /// <summary>Field number for the "GameDiffSlice" field.</summary>
    public const int GameDiffSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.GameDiff> _repeated_gameDiffSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.GameDiff.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.GameDiff> gameDiffSlice_ = new pbc::RepeatedField<global::fat.rawdata.GameDiff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.GameDiff> GameDiffSlice {
      get { return gameDiffSlice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameDiffSliceABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameDiffSliceABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gameDiffSlice_.Equals(other.gameDiffSlice_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gameDiffSlice_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gameDiffSlice_.WriteTo(output, _repeated_gameDiffSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gameDiffSlice_.WriteTo(ref output, _repeated_gameDiffSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gameDiffSlice_.CalculateSize(_repeated_gameDiffSlice_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameDiffSliceABValue other) {
      if (other == null) {
        return;
      }
      gameDiffSlice_.Add(other.gameDiffSlice_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gameDiffSlice_.AddEntriesFrom(input, _repeated_gameDiffSlice_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gameDiffSlice_.AddEntriesFrom(ref input, _repeated_gameDiffSlice_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameDiffConf : pb::IMessage<GameDiffConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameDiffConf> _parser = new pb::MessageParser<GameDiffConf>(() => new GameDiffConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameDiffConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.GameDiffConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDiffConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDiffConf(GameDiffConf other) : this() {
      gameDiffSlice_ = other.gameDiffSlice_.Clone();
      gameDiffSliceAB_ = other.gameDiffSliceAB_.Clone();
      gameDiffSliceABPatch_ = other.gameDiffSliceABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDiffConf Clone() {
      return new GameDiffConf(this);
    }

    /// <summary>Field number for the "GameDiffSlice" field.</summary>
    public const int GameDiffSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.GameDiff> _repeated_gameDiffSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.GameDiff.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.GameDiff> gameDiffSlice_ = new pbc::RepeatedField<global::fat.rawdata.GameDiff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.GameDiff> GameDiffSlice {
      get { return gameDiffSlice_; }
    }

    /// <summary>Field number for the "GameDiffSliceAB" field.</summary>
    public const int GameDiffSliceABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.GameDiffSliceABValue>.Codec _map_gameDiffSliceAB_codec
        = new pbc::MapField<string, global::fat.rawdata.GameDiffSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.GameDiffSliceABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.GameDiffSliceABValue> gameDiffSliceAB_ = new pbc::MapField<string, global::fat.rawdata.GameDiffSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.GameDiffSliceABValue> GameDiffSliceAB {
      get { return gameDiffSliceAB_; }
    }

    /// <summary>Field number for the "GameDiffSliceABPatch" field.</summary>
    public const int GameDiffSliceABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.GameDiffSliceABValue>.Codec _map_gameDiffSliceABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.GameDiffSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.GameDiffSliceABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.GameDiffSliceABValue> gameDiffSliceABPatch_ = new pbc::MapField<string, global::fat.rawdata.GameDiffSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.GameDiffSliceABValue> GameDiffSliceABPatch {
      get { return gameDiffSliceABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameDiffConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameDiffConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gameDiffSlice_.Equals(other.gameDiffSlice_)) return false;
      if (!GameDiffSliceAB.Equals(other.GameDiffSliceAB)) return false;
      if (!GameDiffSliceABPatch.Equals(other.GameDiffSliceABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gameDiffSlice_.GetHashCode();
      hash ^= GameDiffSliceAB.GetHashCode();
      hash ^= GameDiffSliceABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gameDiffSlice_.WriteTo(output, _repeated_gameDiffSlice_codec);
      gameDiffSliceAB_.WriteTo(output, _map_gameDiffSliceAB_codec);
      gameDiffSliceABPatch_.WriteTo(output, _map_gameDiffSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gameDiffSlice_.WriteTo(ref output, _repeated_gameDiffSlice_codec);
      gameDiffSliceAB_.WriteTo(ref output, _map_gameDiffSliceAB_codec);
      gameDiffSliceABPatch_.WriteTo(ref output, _map_gameDiffSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gameDiffSlice_.CalculateSize(_repeated_gameDiffSlice_codec);
      size += gameDiffSliceAB_.CalculateSize(_map_gameDiffSliceAB_codec);
      size += gameDiffSliceABPatch_.CalculateSize(_map_gameDiffSliceABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameDiffConf other) {
      if (other == null) {
        return;
      }
      gameDiffSlice_.Add(other.gameDiffSlice_);
      gameDiffSliceAB_.Add(other.gameDiffSliceAB_);
      gameDiffSliceABPatch_.Add(other.gameDiffSliceABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gameDiffSlice_.AddEntriesFrom(input, _repeated_gameDiffSlice_codec);
            break;
          }
          case 18: {
            gameDiffSliceAB_.AddEntriesFrom(input, _map_gameDiffSliceAB_codec);
            break;
          }
          case 26: {
            gameDiffSliceABPatch_.AddEntriesFrom(input, _map_gameDiffSliceABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gameDiffSlice_.AddEntriesFrom(ref input, _repeated_gameDiffSlice_codec);
            break;
          }
          case 18: {
            gameDiffSliceAB_.AddEntriesFrom(ref input, _map_gameDiffSliceAB_codec);
            break;
          }
          case 26: {
            gameDiffSliceABPatch_.AddEntriesFrom(ref input, _map_gameDiffSliceABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
