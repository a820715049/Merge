// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/PMTABConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/PMTABConf.proto</summary>
  public static partial class PMTABConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/PMTABConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PMTABConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdyYXdkYXRhL1BNVEFCQ29uZi5wcm90bxIHcmF3ZGF0YSKBAQoFUE1UQUIS",
            "FgoOaXNQTVRBQlRlc3RpbmcYASABKAgSFwoPcG10QUJIdHRwR2xvYmFsGAIg",
            "ASgJEhUKDXBtdEFCSHR0cFRlc3QYAyABKAkSGAoQcG10QUJIdHRwVGltZW91",
            "dBgEIAEoBRIWCg5wbXRUb2tlbkFlc0tleRgFIAEoCSI3ChFQTVRBQlNsaWNl",
            "QUJWYWx1ZRIiCgpQTVRBQlNsaWNlGAEgAygLMg4ucmF3ZGF0YS5QTVRBQiLY",
            "AgoJUE1UQUJDb25mEiIKClBNVEFCU2xpY2UYASADKAsyDi5yYXdkYXRhLlBN",
            "VEFCEjoKDFBNVEFCU2xpY2VBQhgCIAMoCzIkLnJhd2RhdGEuUE1UQUJDb25m",
            "LlBNVEFCU2xpY2VBQkVudHJ5EkQKEVBNVEFCU2xpY2VBQlBhdGNoGAMgAygL",
            "MikucmF3ZGF0YS5QTVRBQkNvbmYuUE1UQUJTbGljZUFCUGF0Y2hFbnRyeRpP",
            "ChFQTVRBQlNsaWNlQUJFbnRyeRILCgNrZXkYASABKAkSKQoFdmFsdWUYAiAB",
            "KAsyGi5yYXdkYXRhLlBNVEFCU2xpY2VBQlZhbHVlOgI4ARpUChZQTVRBQlNs",
            "aWNlQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIpCgV2YWx1ZRgCIAEoCzIa",
            "LnJhd2RhdGEuUE1UQUJTbGljZUFCVmFsdWU6AjgBQj1aLWdpdGxhYi5mdW5w",
            "bHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3ZGF0YaoCC2ZhdC5yYXdk",
            "YXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.PMTAB), global::fat.rawdata.PMTAB.Parser, new[]{ "IsPMTABTesting", "PmtABHttpGlobal", "PmtABHttpTest", "PmtABHttpTimeout", "PmtTokenAesKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.PMTABSliceABValue), global::fat.rawdata.PMTABSliceABValue.Parser, new[]{ "PMTABSlice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.PMTABConf), global::fat.rawdata.PMTABConf.Parser, new[]{ "PMTABSlice", "PMTABSliceAB", "PMTABSliceABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="PMTAB",table="PMTABSlice",table_wrapper="PMTABConf",map="false",map_key_type="",data="PMTABConf")
  /// annotation@ab(table_ab="PMTABSliceAB",table_ab_patch="PMTABSliceABPatch",table_ab_value="PMTABSliceABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// </summary>
  public sealed partial class PMTAB : pb::IMessage<PMTAB>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PMTAB> _parser = new pb::MessageParser<PMTAB>(() => new PMTAB());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMTAB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.PMTABConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMTAB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMTAB(PMTAB other) : this() {
      isPMTABTesting_ = other.isPMTABTesting_;
      pmtABHttpGlobal_ = other.pmtABHttpGlobal_;
      pmtABHttpTest_ = other.pmtABHttpTest_;
      pmtABHttpTimeout_ = other.pmtABHttpTimeout_;
      pmtTokenAesKey_ = other.pmtTokenAesKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMTAB Clone() {
      return new PMTAB(this);
    }

    /// <summary>Field number for the "isPMTABTesting" field.</summary>
    public const int IsPMTABTestingFieldNumber = 1;
    private bool isPMTABTesting_;
    /// <summary>
    /// 是否调用 PMT A/B Testing 分流工具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPMTABTesting {
      get { return isPMTABTesting_; }
      set {
        isPMTABTesting_ = value;
      }
    }

    /// <summary>Field number for the "pmtABHttpGlobal" field.</summary>
    public const int PmtABHttpGlobalFieldNumber = 2;
    private string pmtABHttpGlobal_ = "";
    /// <summary>
    /// 线上使用的 PMT A/B Testing 服务地址（global、global-upgrade、global-upgradex、pioneer）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PmtABHttpGlobal {
      get { return pmtABHttpGlobal_; }
      set {
        pmtABHttpGlobal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pmtABHttpTest" field.</summary>
    public const int PmtABHttpTestFieldNumber = 3;
    private string pmtABHttpTest_ = "";
    /// <summary>
    /// 内部使用的 PMT A/B Testing 服务地址（test、qa）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PmtABHttpTest {
      get { return pmtABHttpTest_; }
      set {
        pmtABHttpTest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pmtABHttpTimeout" field.</summary>
    public const int PmtABHttpTimeoutFieldNumber = 4;
    private int pmtABHttpTimeout_;
    /// <summary>
    /// 调用 PMT A/B Testing 分流工具超时时间（毫秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PmtABHttpTimeout {
      get { return pmtABHttpTimeout_; }
      set {
        pmtABHttpTimeout_ = value;
      }
    }

    /// <summary>Field number for the "pmtTokenAesKey" field.</summary>
    public const int PmtTokenAesKeyFieldNumber = 5;
    private string pmtTokenAesKey_ = "";
    /// <summary>
    /// 调用 PMT A/B Testing 分流工具的访问秘钥
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PmtTokenAesKey {
      get { return pmtTokenAesKey_; }
      set {
        pmtTokenAesKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMTAB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMTAB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsPMTABTesting != other.IsPMTABTesting) return false;
      if (PmtABHttpGlobal != other.PmtABHttpGlobal) return false;
      if (PmtABHttpTest != other.PmtABHttpTest) return false;
      if (PmtABHttpTimeout != other.PmtABHttpTimeout) return false;
      if (PmtTokenAesKey != other.PmtTokenAesKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsPMTABTesting != false) hash ^= IsPMTABTesting.GetHashCode();
      if (PmtABHttpGlobal.Length != 0) hash ^= PmtABHttpGlobal.GetHashCode();
      if (PmtABHttpTest.Length != 0) hash ^= PmtABHttpTest.GetHashCode();
      if (PmtABHttpTimeout != 0) hash ^= PmtABHttpTimeout.GetHashCode();
      if (PmtTokenAesKey.Length != 0) hash ^= PmtTokenAesKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsPMTABTesting != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsPMTABTesting);
      }
      if (PmtABHttpGlobal.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PmtABHttpGlobal);
      }
      if (PmtABHttpTest.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PmtABHttpTest);
      }
      if (PmtABHttpTimeout != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PmtABHttpTimeout);
      }
      if (PmtTokenAesKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PmtTokenAesKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsPMTABTesting != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsPMTABTesting);
      }
      if (PmtABHttpGlobal.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PmtABHttpGlobal);
      }
      if (PmtABHttpTest.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PmtABHttpTest);
      }
      if (PmtABHttpTimeout != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PmtABHttpTimeout);
      }
      if (PmtTokenAesKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PmtTokenAesKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsPMTABTesting != false) {
        size += 1 + 1;
      }
      if (PmtABHttpGlobal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PmtABHttpGlobal);
      }
      if (PmtABHttpTest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PmtABHttpTest);
      }
      if (PmtABHttpTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PmtABHttpTimeout);
      }
      if (PmtTokenAesKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PmtTokenAesKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMTAB other) {
      if (other == null) {
        return;
      }
      if (other.IsPMTABTesting != false) {
        IsPMTABTesting = other.IsPMTABTesting;
      }
      if (other.PmtABHttpGlobal.Length != 0) {
        PmtABHttpGlobal = other.PmtABHttpGlobal;
      }
      if (other.PmtABHttpTest.Length != 0) {
        PmtABHttpTest = other.PmtABHttpTest;
      }
      if (other.PmtABHttpTimeout != 0) {
        PmtABHttpTimeout = other.PmtABHttpTimeout;
      }
      if (other.PmtTokenAesKey.Length != 0) {
        PmtTokenAesKey = other.PmtTokenAesKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsPMTABTesting = input.ReadBool();
            break;
          }
          case 18: {
            PmtABHttpGlobal = input.ReadString();
            break;
          }
          case 26: {
            PmtABHttpTest = input.ReadString();
            break;
          }
          case 32: {
            PmtABHttpTimeout = input.ReadInt32();
            break;
          }
          case 42: {
            PmtTokenAesKey = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsPMTABTesting = input.ReadBool();
            break;
          }
          case 18: {
            PmtABHttpGlobal = input.ReadString();
            break;
          }
          case 26: {
            PmtABHttpTest = input.ReadString();
            break;
          }
          case 32: {
            PmtABHttpTimeout = input.ReadInt32();
            break;
          }
          case 42: {
            PmtTokenAesKey = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PMTABSliceABValue : pb::IMessage<PMTABSliceABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PMTABSliceABValue> _parser = new pb::MessageParser<PMTABSliceABValue>(() => new PMTABSliceABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMTABSliceABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.PMTABConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMTABSliceABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMTABSliceABValue(PMTABSliceABValue other) : this() {
      pMTABSlice_ = other.pMTABSlice_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMTABSliceABValue Clone() {
      return new PMTABSliceABValue(this);
    }

    /// <summary>Field number for the "PMTABSlice" field.</summary>
    public const int PMTABSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.PMTAB> _repeated_pMTABSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.PMTAB.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.PMTAB> pMTABSlice_ = new pbc::RepeatedField<global::fat.rawdata.PMTAB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.PMTAB> PMTABSlice {
      get { return pMTABSlice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMTABSliceABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMTABSliceABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pMTABSlice_.Equals(other.pMTABSlice_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pMTABSlice_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pMTABSlice_.WriteTo(output, _repeated_pMTABSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pMTABSlice_.WriteTo(ref output, _repeated_pMTABSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pMTABSlice_.CalculateSize(_repeated_pMTABSlice_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMTABSliceABValue other) {
      if (other == null) {
        return;
      }
      pMTABSlice_.Add(other.pMTABSlice_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pMTABSlice_.AddEntriesFrom(input, _repeated_pMTABSlice_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            pMTABSlice_.AddEntriesFrom(ref input, _repeated_pMTABSlice_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PMTABConf : pb::IMessage<PMTABConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PMTABConf> _parser = new pb::MessageParser<PMTABConf>(() => new PMTABConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PMTABConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.PMTABConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMTABConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMTABConf(PMTABConf other) : this() {
      pMTABSlice_ = other.pMTABSlice_.Clone();
      pMTABSliceAB_ = other.pMTABSliceAB_.Clone();
      pMTABSliceABPatch_ = other.pMTABSliceABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PMTABConf Clone() {
      return new PMTABConf(this);
    }

    /// <summary>Field number for the "PMTABSlice" field.</summary>
    public const int PMTABSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.PMTAB> _repeated_pMTABSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.PMTAB.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.PMTAB> pMTABSlice_ = new pbc::RepeatedField<global::fat.rawdata.PMTAB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.PMTAB> PMTABSlice {
      get { return pMTABSlice_; }
    }

    /// <summary>Field number for the "PMTABSliceAB" field.</summary>
    public const int PMTABSliceABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.PMTABSliceABValue>.Codec _map_pMTABSliceAB_codec
        = new pbc::MapField<string, global::fat.rawdata.PMTABSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.PMTABSliceABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.PMTABSliceABValue> pMTABSliceAB_ = new pbc::MapField<string, global::fat.rawdata.PMTABSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.PMTABSliceABValue> PMTABSliceAB {
      get { return pMTABSliceAB_; }
    }

    /// <summary>Field number for the "PMTABSliceABPatch" field.</summary>
    public const int PMTABSliceABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.PMTABSliceABValue>.Codec _map_pMTABSliceABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.PMTABSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.PMTABSliceABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.PMTABSliceABValue> pMTABSliceABPatch_ = new pbc::MapField<string, global::fat.rawdata.PMTABSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.PMTABSliceABValue> PMTABSliceABPatch {
      get { return pMTABSliceABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PMTABConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PMTABConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pMTABSlice_.Equals(other.pMTABSlice_)) return false;
      if (!PMTABSliceAB.Equals(other.PMTABSliceAB)) return false;
      if (!PMTABSliceABPatch.Equals(other.PMTABSliceABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pMTABSlice_.GetHashCode();
      hash ^= PMTABSliceAB.GetHashCode();
      hash ^= PMTABSliceABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pMTABSlice_.WriteTo(output, _repeated_pMTABSlice_codec);
      pMTABSliceAB_.WriteTo(output, _map_pMTABSliceAB_codec);
      pMTABSliceABPatch_.WriteTo(output, _map_pMTABSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pMTABSlice_.WriteTo(ref output, _repeated_pMTABSlice_codec);
      pMTABSliceAB_.WriteTo(ref output, _map_pMTABSliceAB_codec);
      pMTABSliceABPatch_.WriteTo(ref output, _map_pMTABSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pMTABSlice_.CalculateSize(_repeated_pMTABSlice_codec);
      size += pMTABSliceAB_.CalculateSize(_map_pMTABSliceAB_codec);
      size += pMTABSliceABPatch_.CalculateSize(_map_pMTABSliceABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PMTABConf other) {
      if (other == null) {
        return;
      }
      pMTABSlice_.Add(other.pMTABSlice_);
      pMTABSliceAB_.Add(other.pMTABSliceAB_);
      pMTABSliceABPatch_.Add(other.pMTABSliceABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pMTABSlice_.AddEntriesFrom(input, _repeated_pMTABSlice_codec);
            break;
          }
          case 18: {
            pMTABSliceAB_.AddEntriesFrom(input, _map_pMTABSliceAB_codec);
            break;
          }
          case 26: {
            pMTABSliceABPatch_.AddEntriesFrom(input, _map_pMTABSliceABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            pMTABSlice_.AddEntriesFrom(ref input, _repeated_pMTABSlice_codec);
            break;
          }
          case 18: {
            pMTABSliceAB_.AddEntriesFrom(ref input, _map_pMTABSliceAB_codec);
            break;
          }
          case 26: {
            pMTABSliceABPatch_.AddEntriesFrom(ref input, _map_pMTABSliceABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
