// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/OrderRandomerConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/OrderRandomerConf.proto</summary>
  public static partial class OrderRandomerConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/OrderRandomerConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OrderRandomerConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9yYXdkYXRhL09yZGVyUmFuZG9tZXJDb25mLnByb3RvEgdyYXdkYXRhIqUF",
            "Cg1PcmRlclJhbmRvbWVyEgoKAmlkGAEgASgFEhQKDGFjdERpZmZHcnBJZBgW",
            "IAEoBRIUCgxhY3RpdmVJdGVtSWQYAiADKAUSEwoLYWN0aXZlTGV2ZWwYAyAB",
            "KAUSFQoNYWN0aXZlT3JkZXJJZBgEIAMoBRIPCgdib2FyZElkGAYgASgFEhQK",
            "DGRpc3BsYXlMZXZlbBgIIAEoBRITCgtlYXN5QWN0RGlmZhgdIAEoBRITCgtl",
            "YXN5UGF5RGlmZhgeIAEoBRITCgtoYXJkQWN0RGlmZhgfIAEoBRITCgtoYXJk",
            "UGF5RGlmZhggIAEoBRISCgppc0FwaU9yZGVyGBogASgIEhAKCGlzQXBpVXNl",
            "GBsgASgIEhAKCGlzQ3RybGVkGCEgASgIEhQKDGlzT3JkZXJCb251cxgmIAEo",
            "CBITCgtpc09yZGVyQ2xhdxgoIAEoCBIRCglpc1Bhc3NpdmUYEyABKAgSEwoL",
            "aXNSZWxhdGVCb3gYHCABKAgSGAoQaXNTa2lwQ2F0ZWdvcnlXdBgnIAEoCBIR",
            "Cglpc1dpc2hpbmcYJCABKAgSEwoLbWluRGlmZlJhdGUYFSABKAUSFAoMbW9k",
            "ZWxWZXJzaW9uGCUgASgJEg0KBW51bVd0GBIgAygFEhQKDHBheURpZmZHcnBJ",
            "ZBgXIAEoBRITCgtyZXdhcmRHcnBJZBgYIAEoBRIOCgZyb2xlSWQYCyABKAUS",
            "EwoLc2FmZUFjdERpZmYYIiABKAUSEwoLc2FmZVBheURpZmYYIyABKAUSFgoO",
            "c2h1dGRvd25JdGVtSWQYDCADKAUSFQoNc2h1dGRvd25MZXZlbBgNIAEoBRIX",
            "Cg9zaHV0ZG93bk9yZGVySWQYDiADKAUSFgoOc2h1dGRvd25SYW5kSWQYGSAD",
            "KAUivAEKF09yZGVyUmFuZG9tZXJNYXBBQlZhbHVlElAKEE9yZGVyUmFuZG9t",
            "ZXJNYXAYASADKAsyNi5yYXdkYXRhLk9yZGVyUmFuZG9tZXJNYXBBQlZhbHVl",
            "Lk9yZGVyUmFuZG9tZXJNYXBFbnRyeRpPChVPcmRlclJhbmRvbWVyTWFwRW50",
            "cnkSCwoDa2V5GAEgASgFEiUKBXZhbHVlGAIgASgLMhYucmF3ZGF0YS5PcmRl",
            "clJhbmRvbWVyOgI4ASKZBAoRT3JkZXJSYW5kb21lckNvbmYSSgoQT3JkZXJS",
            "YW5kb21lck1hcBgBIAMoCzIwLnJhd2RhdGEuT3JkZXJSYW5kb21lckNvbmYu",
            "T3JkZXJSYW5kb21lck1hcEVudHJ5Ek4KEk9yZGVyUmFuZG9tZXJNYXBBQhgC",
            "IAMoCzIyLnJhd2RhdGEuT3JkZXJSYW5kb21lckNvbmYuT3JkZXJSYW5kb21l",
            "ck1hcEFCRW50cnkSWAoXT3JkZXJSYW5kb21lck1hcEFCUGF0Y2gYAyADKAsy",
            "Ny5yYXdkYXRhLk9yZGVyUmFuZG9tZXJDb25mLk9yZGVyUmFuZG9tZXJNYXBB",
            "QlBhdGNoRW50cnkaTwoVT3JkZXJSYW5kb21lck1hcEVudHJ5EgsKA2tleRgB",
            "IAEoBRIlCgV2YWx1ZRgCIAEoCzIWLnJhd2RhdGEuT3JkZXJSYW5kb21lcjoC",
            "OAEaWwoXT3JkZXJSYW5kb21lck1hcEFCRW50cnkSCwoDa2V5GAEgASgJEi8K",
            "BXZhbHVlGAIgASgLMiAucmF3ZGF0YS5PcmRlclJhbmRvbWVyTWFwQUJWYWx1",
            "ZToCOAEaYAocT3JkZXJSYW5kb21lck1hcEFCUGF0Y2hFbnRyeRILCgNrZXkY",
            "ASABKAkSLwoFdmFsdWUYAiABKAsyIC5yYXdkYXRhLk9yZGVyUmFuZG9tZXJN",
            "YXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9n",
            "ZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.OrderRandomer), global::fat.rawdata.OrderRandomer.Parser, new[]{ "Id", "ActDiffGrpId", "ActiveItemId", "ActiveLevel", "ActiveOrderId", "BoardId", "DisplayLevel", "EasyActDiff", "EasyPayDiff", "HardActDiff", "HardPayDiff", "IsApiOrder", "IsApiUse", "IsCtrled", "IsOrderBonus", "IsOrderClaw", "IsPassive", "IsRelateBox", "IsSkipCategoryWt", "IsWishing", "MinDiffRate", "ModelVersion", "NumWt", "PayDiffGrpId", "RewardGrpId", "RoleId", "SafeActDiff", "SafePayDiff", "ShutdownItemId", "ShutdownLevel", "ShutdownOrderId", "ShutdownRandId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.OrderRandomerMapABValue), global::fat.rawdata.OrderRandomerMapABValue.Parser, new[]{ "OrderRandomerMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.OrderRandomerConf), global::fat.rawdata.OrderRandomerConf.Parser, new[]{ "OrderRandomerMap", "OrderRandomerMapAB", "OrderRandomerMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="OrderRandomer",table="OrderRandomerMap",table_wrapper="OrderRandomerConf",map="true",map_key_type="int32",data="OrderRandomerConf")
  /// annotation@ab(table_ab="OrderRandomerMapAB",table_ab_patch="OrderRandomerMapABPatch",table_ab_value="OrderRandomerMapABValue",ab_patch="true")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@OrderRandomer(id="id")
  /// </summary>
  public sealed partial class OrderRandomer : pb::IMessage<OrderRandomer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderRandomer> _parser = new pb::MessageParser<OrderRandomer>(() => new OrderRandomer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderRandomer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.OrderRandomerConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRandomer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRandomer(OrderRandomer other) : this() {
      id_ = other.id_;
      actDiffGrpId_ = other.actDiffGrpId_;
      activeItemId_ = other.activeItemId_.Clone();
      activeLevel_ = other.activeLevel_;
      activeOrderId_ = other.activeOrderId_.Clone();
      boardId_ = other.boardId_;
      displayLevel_ = other.displayLevel_;
      easyActDiff_ = other.easyActDiff_;
      easyPayDiff_ = other.easyPayDiff_;
      hardActDiff_ = other.hardActDiff_;
      hardPayDiff_ = other.hardPayDiff_;
      isApiOrder_ = other.isApiOrder_;
      isApiUse_ = other.isApiUse_;
      isCtrled_ = other.isCtrled_;
      isOrderBonus_ = other.isOrderBonus_;
      isOrderClaw_ = other.isOrderClaw_;
      isPassive_ = other.isPassive_;
      isRelateBox_ = other.isRelateBox_;
      isSkipCategoryWt_ = other.isSkipCategoryWt_;
      isWishing_ = other.isWishing_;
      minDiffRate_ = other.minDiffRate_;
      modelVersion_ = other.modelVersion_;
      numWt_ = other.numWt_.Clone();
      payDiffGrpId_ = other.payDiffGrpId_;
      rewardGrpId_ = other.rewardGrpId_;
      roleId_ = other.roleId_;
      safeActDiff_ = other.safeActDiff_;
      safePayDiff_ = other.safePayDiff_;
      shutdownItemId_ = other.shutdownItemId_.Clone();
      shutdownLevel_ = other.shutdownLevel_;
      shutdownOrderId_ = other.shutdownOrderId_.Clone();
      shutdownRandId_ = other.shutdownRandId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRandomer Clone() {
      return new OrderRandomer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 随机生成规则ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "actDiffGrpId" field.</summary>
    public const int ActDiffGrpIdFieldNumber = 22;
    private int actDiffGrpId_;
    /// <summary>
    /// 实际难度区间
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （OrderDiff.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActDiffGrpId {
      get { return actDiffGrpId_; }
      set {
        actDiffGrpId_ = value;
      }
    }

    /// <summary>Field number for the "activeItemId" field.</summary>
    public const int ActiveItemIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_activeItemId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> activeItemId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 激活棋子ID
    /// （且）
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ActiveItemId {
      get { return activeItemId_; }
    }

    /// <summary>Field number for the "activeLevel" field.</summary>
    public const int ActiveLevelFieldNumber = 3;
    private int activeLevel_;
    /// <summary>
    /// 激活等级
    /// 先激活
    /// 后关闭
    /// （且）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveLevel {
      get { return activeLevel_; }
      set {
        activeLevel_ = value;
      }
    }

    /// <summary>Field number for the "activeOrderId" field.</summary>
    public const int ActiveOrderIdFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_activeOrderId_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> activeOrderId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 激活订单ID
    /// （且）
    /// （OrderCommon.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ActiveOrderId {
      get { return activeOrderId_; }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 6;
    private int boardId_;
    /// <summary>
    /// 所属棋盘ID
    /// （MergeBoard.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "displayLevel" field.</summary>
    public const int DisplayLevelFieldNumber = 8;
    private int displayLevel_;
    /// <summary>
    /// 订单展示等级
    /// 未到达时
    /// 仅能看到等级限制
    /// 且无法完成订单
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DisplayLevel {
      get { return displayLevel_; }
      set {
        displayLevel_ = value;
      }
    }

    /// <summary>Field number for the "easyActDiff" field.</summary>
    public const int EasyActDiffFieldNumber = 29;
    private int easyActDiff_;
    /// <summary>
    /// 超过tooHigh之后
    /// 降低投入率
    /// 所用实际难度区间
    /// （GradeIndexMapping.id）
    /// （OrderDiff.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EasyActDiff {
      get { return easyActDiff_; }
      set {
        easyActDiff_ = value;
      }
    }

    /// <summary>Field number for the "easyPayDiff" field.</summary>
    public const int EasyPayDiffFieldNumber = 30;
    private int easyPayDiff_;
    /// <summary>
    /// 超过tooHigh之后
    /// 降低投入率
    /// 所用付出难度区间
    /// （GradeIndexMapping.id）
    /// （OrderDiff.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EasyPayDiff {
      get { return easyPayDiff_; }
      set {
        easyPayDiff_ = value;
      }
    }

    /// <summary>Field number for the "hardActDiff" field.</summary>
    public const int HardActDiffFieldNumber = 31;
    private int hardActDiff_;
    /// <summary>
    /// 超过tooLow之后
    /// 提高投入率
    /// 所用实际难度区间
    /// （GradeIndexMapping.id）
    /// （OrderDiff.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HardActDiff {
      get { return hardActDiff_; }
      set {
        hardActDiff_ = value;
      }
    }

    /// <summary>Field number for the "hardPayDiff" field.</summary>
    public const int HardPayDiffFieldNumber = 32;
    private int hardPayDiff_;
    /// <summary>
    /// 超过tooLow之后
    /// 提高投入率
    /// 所用付出难度区间
    /// （GradeIndexMapping.id）
    /// （OrderDiff.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HardPayDiff {
      get { return hardPayDiff_; }
      set {
        hardPayDiff_ = value;
      }
    }

    /// <summary>Field number for the "isApiOrder" field.</summary>
    public const int IsApiOrderFieldNumber = 26;
    private bool isApiOrder_;
    /// <summary>
    /// 是否通过订单API
    /// 决定订单内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsApiOrder {
      get { return isApiOrder_; }
      set {
        isApiOrder_ = value;
      }
    }

    /// <summary>Field number for the "isApiUse" field.</summary>
    public const int IsApiUseFieldNumber = 27;
    private bool isApiUse_;
    /// <summary>
    /// 是否使用订单API
    /// 返回的内容
    /// （用于初期A/A测试）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsApiUse {
      get { return isApiUse_; }
      set {
        isApiUse_ = value;
      }
    }

    /// <summary>Field number for the "isCtrled" field.</summary>
    public const int IsCtrledFieldNumber = 33;
    private bool isCtrled_;
    /// <summary>
    /// 是否受阈值干预
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCtrled {
      get { return isCtrled_; }
      set {
        isCtrled_ = value;
      }
    }

    /// <summary>Field number for the "isOrderBonus" field.</summary>
    public const int IsOrderBonusFieldNumber = 38;
    private bool isOrderBonus_;
    /// <summary>
    /// 是否被以下活动关注
    /// 订单助力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOrderBonus {
      get { return isOrderBonus_; }
      set {
        isOrderBonus_ = value;
      }
    }

    /// <summary>Field number for the "isOrderClaw" field.</summary>
    public const int IsOrderClawFieldNumber = 40;
    private bool isOrderClaw_;
    /// <summary>
    /// 是否被以下活动关注
    /// 抓宝大师订单
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOrderClaw {
      get { return isOrderClaw_; }
      set {
        isOrderClaw_ = value;
      }
    }

    /// <summary>Field number for the "isPassive" field.</summary>
    public const int IsPassiveFieldNumber = 19;
    private bool isPassive_;
    /// <summary>
    /// 是否被动启用
    /// TRUE：
    /// 适用active和shutdown
    /// 且仅能被活动启用
    /// FALSE：
    /// 适用active和shutdown
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPassive {
      get { return isPassive_; }
      set {
        isPassive_ = value;
      }
    }

    /// <summary>Field number for the "isRelateBox" field.</summary>
    public const int IsRelateBoxFieldNumber = 28;
    private bool isRelateBox_;
    /// <summary>
    /// 是否被以下物品关注
    /// 棋子魔盒
    /// 三选一盒子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRelateBox {
      get { return isRelateBox_; }
      set {
        isRelateBox_ = value;
      }
    }

    /// <summary>Field number for the "isSkipCategoryWt" field.</summary>
    public const int IsSkipCategoryWtFieldNumber = 39;
    private bool isSkipCategoryWt_;
    /// <summary>
    /// 是否忽略订单权重增减逻辑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkipCategoryWt {
      get { return isSkipCategoryWt_; }
      set {
        isSkipCategoryWt_ = value;
      }
    }

    /// <summary>Field number for the "isWishing" field.</summary>
    public const int IsWishingFieldNumber = 36;
    private bool isWishing_;
    /// <summary>
    /// 是否被以下订单关注
    /// 心想事成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWishing {
      get { return isWishing_; }
      set {
        isWishing_ = value;
      }
    }

    /// <summary>Field number for the "minDiffRate" field.</summary>
    public const int MinDiffRateFieldNumber = 21;
    private int minDiffRate_;
    /// <summary>
    /// 最低付出与实际难度比
    /// （百分数）
    /// 付出难度/实际难度最小为67%
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinDiffRate {
      get { return minDiffRate_; }
      set {
        minDiffRate_ = value;
      }
    }

    /// <summary>Field number for the "modelVersion" field.</summary>
    public const int ModelVersionFieldNumber = 37;
    private string modelVersion_ = "";
    /// <summary>
    /// 使用的模型版本
    /// 与Data Product约定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelVersion {
      get { return modelVersion_; }
      set {
        modelVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "numWt" field.</summary>
    public const int NumWtFieldNumber = 18;
    private static readonly pb::FieldCodec<int> _repeated_numWt_codec
        = pb::FieldCodec.ForInt32(146);
    private readonly pbc::RepeatedField<int> numWt_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 订单棋子种数权重
    /// {单,双,...}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NumWt {
      get { return numWt_; }
    }

    /// <summary>Field number for the "payDiffGrpId" field.</summary>
    public const int PayDiffGrpIdFieldNumber = 23;
    private int payDiffGrpId_;
    /// <summary>
    /// 付出难度区间
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （OrderDiff.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayDiffGrpId {
      get { return payDiffGrpId_; }
      set {
        payDiffGrpId_ = value;
      }
    }

    /// <summary>Field number for the "rewardGrpId" field.</summary>
    public const int RewardGrpIdFieldNumber = 24;
    private int rewardGrpId_;
    /// <summary>
    /// 订单奖励
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （OrderReward.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardGrpId {
      get { return rewardGrpId_; }
      set {
        rewardGrpId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 11;
    private int roleId_;
    /// <summary>
    /// 订单角色形象
    /// （0 = 随机角色）
    /// （NpcConfig.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "safeActDiff" field.</summary>
    public const int SafeActDiffFieldNumber = 34;
    private int safeActDiff_;
    /// <summary>
    /// normalDiff无法随出订单时
    /// 按照目标棋子数量
    /// 使用的付出难度区间
    /// （GradeIndexMapping.id）
    /// （OrderDiff.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SafeActDiff {
      get { return safeActDiff_; }
      set {
        safeActDiff_ = value;
      }
    }

    /// <summary>Field number for the "safePayDiff" field.</summary>
    public const int SafePayDiffFieldNumber = 35;
    private int safePayDiff_;
    /// <summary>
    /// normalDiff无法随出订单时
    /// 按照目标棋子数量
    /// 使用的付出难度区间
    /// （GradeIndexMapping.id）
    /// （OrderDiff.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SafePayDiff {
      get { return safePayDiff_; }
      set {
        safePayDiff_ = value;
      }
    }

    /// <summary>Field number for the "shutdownItemId" field.</summary>
    public const int ShutdownItemIdFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_shutdownItemId_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> shutdownItemId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 关闭棋子ID
    /// （或）
    /// （ObjBasic.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ShutdownItemId {
      get { return shutdownItemId_; }
    }

    /// <summary>Field number for the "shutdownLevel" field.</summary>
    public const int ShutdownLevelFieldNumber = 13;
    private int shutdownLevel_;
    /// <summary>
    /// 关闭等级
    /// 先激活
    /// 后关闭
    /// （或）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShutdownLevel {
      get { return shutdownLevel_; }
      set {
        shutdownLevel_ = value;
      }
    }

    /// <summary>Field number for the "shutdownOrderId" field.</summary>
    public const int ShutdownOrderIdFieldNumber = 14;
    private static readonly pb::FieldCodec<int> _repeated_shutdownOrderId_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> shutdownOrderId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 关闭订单ID
    /// （或）
    /// （OrderCommon.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ShutdownOrderId {
      get { return shutdownOrderId_; }
    }

    /// <summary>Field number for the "shutdownRandId" field.</summary>
    public const int ShutdownRandIdFieldNumber = 25;
    private static readonly pb::FieldCodec<int> _repeated_shutdownRandId_codec
        = pb::FieldCodec.ForInt32(202);
    private readonly pbc::RepeatedField<int> shutdownRandId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 如果场上有
    /// 此randomerId发出的订单
    /// 则关闭
    /// （或）
    /// （OrderRandomer.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ShutdownRandId {
      get { return shutdownRandId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderRandomer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderRandomer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ActDiffGrpId != other.ActDiffGrpId) return false;
      if(!activeItemId_.Equals(other.activeItemId_)) return false;
      if (ActiveLevel != other.ActiveLevel) return false;
      if(!activeOrderId_.Equals(other.activeOrderId_)) return false;
      if (BoardId != other.BoardId) return false;
      if (DisplayLevel != other.DisplayLevel) return false;
      if (EasyActDiff != other.EasyActDiff) return false;
      if (EasyPayDiff != other.EasyPayDiff) return false;
      if (HardActDiff != other.HardActDiff) return false;
      if (HardPayDiff != other.HardPayDiff) return false;
      if (IsApiOrder != other.IsApiOrder) return false;
      if (IsApiUse != other.IsApiUse) return false;
      if (IsCtrled != other.IsCtrled) return false;
      if (IsOrderBonus != other.IsOrderBonus) return false;
      if (IsOrderClaw != other.IsOrderClaw) return false;
      if (IsPassive != other.IsPassive) return false;
      if (IsRelateBox != other.IsRelateBox) return false;
      if (IsSkipCategoryWt != other.IsSkipCategoryWt) return false;
      if (IsWishing != other.IsWishing) return false;
      if (MinDiffRate != other.MinDiffRate) return false;
      if (ModelVersion != other.ModelVersion) return false;
      if(!numWt_.Equals(other.numWt_)) return false;
      if (PayDiffGrpId != other.PayDiffGrpId) return false;
      if (RewardGrpId != other.RewardGrpId) return false;
      if (RoleId != other.RoleId) return false;
      if (SafeActDiff != other.SafeActDiff) return false;
      if (SafePayDiff != other.SafePayDiff) return false;
      if(!shutdownItemId_.Equals(other.shutdownItemId_)) return false;
      if (ShutdownLevel != other.ShutdownLevel) return false;
      if(!shutdownOrderId_.Equals(other.shutdownOrderId_)) return false;
      if(!shutdownRandId_.Equals(other.shutdownRandId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ActDiffGrpId != 0) hash ^= ActDiffGrpId.GetHashCode();
      hash ^= activeItemId_.GetHashCode();
      if (ActiveLevel != 0) hash ^= ActiveLevel.GetHashCode();
      hash ^= activeOrderId_.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (DisplayLevel != 0) hash ^= DisplayLevel.GetHashCode();
      if (EasyActDiff != 0) hash ^= EasyActDiff.GetHashCode();
      if (EasyPayDiff != 0) hash ^= EasyPayDiff.GetHashCode();
      if (HardActDiff != 0) hash ^= HardActDiff.GetHashCode();
      if (HardPayDiff != 0) hash ^= HardPayDiff.GetHashCode();
      if (IsApiOrder != false) hash ^= IsApiOrder.GetHashCode();
      if (IsApiUse != false) hash ^= IsApiUse.GetHashCode();
      if (IsCtrled != false) hash ^= IsCtrled.GetHashCode();
      if (IsOrderBonus != false) hash ^= IsOrderBonus.GetHashCode();
      if (IsOrderClaw != false) hash ^= IsOrderClaw.GetHashCode();
      if (IsPassive != false) hash ^= IsPassive.GetHashCode();
      if (IsRelateBox != false) hash ^= IsRelateBox.GetHashCode();
      if (IsSkipCategoryWt != false) hash ^= IsSkipCategoryWt.GetHashCode();
      if (IsWishing != false) hash ^= IsWishing.GetHashCode();
      if (MinDiffRate != 0) hash ^= MinDiffRate.GetHashCode();
      if (ModelVersion.Length != 0) hash ^= ModelVersion.GetHashCode();
      hash ^= numWt_.GetHashCode();
      if (PayDiffGrpId != 0) hash ^= PayDiffGrpId.GetHashCode();
      if (RewardGrpId != 0) hash ^= RewardGrpId.GetHashCode();
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (SafeActDiff != 0) hash ^= SafeActDiff.GetHashCode();
      if (SafePayDiff != 0) hash ^= SafePayDiff.GetHashCode();
      hash ^= shutdownItemId_.GetHashCode();
      if (ShutdownLevel != 0) hash ^= ShutdownLevel.GetHashCode();
      hash ^= shutdownOrderId_.GetHashCode();
      hash ^= shutdownRandId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      activeItemId_.WriteTo(output, _repeated_activeItemId_codec);
      if (ActiveLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActiveLevel);
      }
      activeOrderId_.WriteTo(output, _repeated_activeOrderId_codec);
      if (BoardId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BoardId);
      }
      if (DisplayLevel != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DisplayLevel);
      }
      if (RoleId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RoleId);
      }
      shutdownItemId_.WriteTo(output, _repeated_shutdownItemId_codec);
      if (ShutdownLevel != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ShutdownLevel);
      }
      shutdownOrderId_.WriteTo(output, _repeated_shutdownOrderId_codec);
      numWt_.WriteTo(output, _repeated_numWt_codec);
      if (IsPassive != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsPassive);
      }
      if (MinDiffRate != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(MinDiffRate);
      }
      if (ActDiffGrpId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ActDiffGrpId);
      }
      if (PayDiffGrpId != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(PayDiffGrpId);
      }
      if (RewardGrpId != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(RewardGrpId);
      }
      shutdownRandId_.WriteTo(output, _repeated_shutdownRandId_codec);
      if (IsApiOrder != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsApiOrder);
      }
      if (IsApiUse != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(IsApiUse);
      }
      if (IsRelateBox != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(IsRelateBox);
      }
      if (EasyActDiff != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(EasyActDiff);
      }
      if (EasyPayDiff != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(EasyPayDiff);
      }
      if (HardActDiff != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(HardActDiff);
      }
      if (HardPayDiff != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(HardPayDiff);
      }
      if (IsCtrled != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IsCtrled);
      }
      if (SafeActDiff != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(SafeActDiff);
      }
      if (SafePayDiff != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(SafePayDiff);
      }
      if (IsWishing != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(IsWishing);
      }
      if (ModelVersion.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(ModelVersion);
      }
      if (IsOrderBonus != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(IsOrderBonus);
      }
      if (IsSkipCategoryWt != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(IsSkipCategoryWt);
      }
      if (IsOrderClaw != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(IsOrderClaw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      activeItemId_.WriteTo(ref output, _repeated_activeItemId_codec);
      if (ActiveLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActiveLevel);
      }
      activeOrderId_.WriteTo(ref output, _repeated_activeOrderId_codec);
      if (BoardId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BoardId);
      }
      if (DisplayLevel != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DisplayLevel);
      }
      if (RoleId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RoleId);
      }
      shutdownItemId_.WriteTo(ref output, _repeated_shutdownItemId_codec);
      if (ShutdownLevel != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ShutdownLevel);
      }
      shutdownOrderId_.WriteTo(ref output, _repeated_shutdownOrderId_codec);
      numWt_.WriteTo(ref output, _repeated_numWt_codec);
      if (IsPassive != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsPassive);
      }
      if (MinDiffRate != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(MinDiffRate);
      }
      if (ActDiffGrpId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ActDiffGrpId);
      }
      if (PayDiffGrpId != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(PayDiffGrpId);
      }
      if (RewardGrpId != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(RewardGrpId);
      }
      shutdownRandId_.WriteTo(ref output, _repeated_shutdownRandId_codec);
      if (IsApiOrder != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsApiOrder);
      }
      if (IsApiUse != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(IsApiUse);
      }
      if (IsRelateBox != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(IsRelateBox);
      }
      if (EasyActDiff != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(EasyActDiff);
      }
      if (EasyPayDiff != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(EasyPayDiff);
      }
      if (HardActDiff != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(HardActDiff);
      }
      if (HardPayDiff != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(HardPayDiff);
      }
      if (IsCtrled != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IsCtrled);
      }
      if (SafeActDiff != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(SafeActDiff);
      }
      if (SafePayDiff != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(SafePayDiff);
      }
      if (IsWishing != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(IsWishing);
      }
      if (ModelVersion.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(ModelVersion);
      }
      if (IsOrderBonus != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(IsOrderBonus);
      }
      if (IsSkipCategoryWt != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(IsSkipCategoryWt);
      }
      if (IsOrderClaw != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(IsOrderClaw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ActDiffGrpId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActDiffGrpId);
      }
      size += activeItemId_.CalculateSize(_repeated_activeItemId_codec);
      if (ActiveLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveLevel);
      }
      size += activeOrderId_.CalculateSize(_repeated_activeOrderId_codec);
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (DisplayLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisplayLevel);
      }
      if (EasyActDiff != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EasyActDiff);
      }
      if (EasyPayDiff != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EasyPayDiff);
      }
      if (HardActDiff != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HardActDiff);
      }
      if (HardPayDiff != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HardPayDiff);
      }
      if (IsApiOrder != false) {
        size += 2 + 1;
      }
      if (IsApiUse != false) {
        size += 2 + 1;
      }
      if (IsCtrled != false) {
        size += 2 + 1;
      }
      if (IsOrderBonus != false) {
        size += 2 + 1;
      }
      if (IsOrderClaw != false) {
        size += 2 + 1;
      }
      if (IsPassive != false) {
        size += 2 + 1;
      }
      if (IsRelateBox != false) {
        size += 2 + 1;
      }
      if (IsSkipCategoryWt != false) {
        size += 2 + 1;
      }
      if (IsWishing != false) {
        size += 2 + 1;
      }
      if (MinDiffRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinDiffRate);
      }
      if (ModelVersion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModelVersion);
      }
      size += numWt_.CalculateSize(_repeated_numWt_codec);
      if (PayDiffGrpId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PayDiffGrpId);
      }
      if (RewardGrpId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RewardGrpId);
      }
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (SafeActDiff != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SafeActDiff);
      }
      if (SafePayDiff != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SafePayDiff);
      }
      size += shutdownItemId_.CalculateSize(_repeated_shutdownItemId_codec);
      if (ShutdownLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShutdownLevel);
      }
      size += shutdownOrderId_.CalculateSize(_repeated_shutdownOrderId_codec);
      size += shutdownRandId_.CalculateSize(_repeated_shutdownRandId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderRandomer other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ActDiffGrpId != 0) {
        ActDiffGrpId = other.ActDiffGrpId;
      }
      activeItemId_.Add(other.activeItemId_);
      if (other.ActiveLevel != 0) {
        ActiveLevel = other.ActiveLevel;
      }
      activeOrderId_.Add(other.activeOrderId_);
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.DisplayLevel != 0) {
        DisplayLevel = other.DisplayLevel;
      }
      if (other.EasyActDiff != 0) {
        EasyActDiff = other.EasyActDiff;
      }
      if (other.EasyPayDiff != 0) {
        EasyPayDiff = other.EasyPayDiff;
      }
      if (other.HardActDiff != 0) {
        HardActDiff = other.HardActDiff;
      }
      if (other.HardPayDiff != 0) {
        HardPayDiff = other.HardPayDiff;
      }
      if (other.IsApiOrder != false) {
        IsApiOrder = other.IsApiOrder;
      }
      if (other.IsApiUse != false) {
        IsApiUse = other.IsApiUse;
      }
      if (other.IsCtrled != false) {
        IsCtrled = other.IsCtrled;
      }
      if (other.IsOrderBonus != false) {
        IsOrderBonus = other.IsOrderBonus;
      }
      if (other.IsOrderClaw != false) {
        IsOrderClaw = other.IsOrderClaw;
      }
      if (other.IsPassive != false) {
        IsPassive = other.IsPassive;
      }
      if (other.IsRelateBox != false) {
        IsRelateBox = other.IsRelateBox;
      }
      if (other.IsSkipCategoryWt != false) {
        IsSkipCategoryWt = other.IsSkipCategoryWt;
      }
      if (other.IsWishing != false) {
        IsWishing = other.IsWishing;
      }
      if (other.MinDiffRate != 0) {
        MinDiffRate = other.MinDiffRate;
      }
      if (other.ModelVersion.Length != 0) {
        ModelVersion = other.ModelVersion;
      }
      numWt_.Add(other.numWt_);
      if (other.PayDiffGrpId != 0) {
        PayDiffGrpId = other.PayDiffGrpId;
      }
      if (other.RewardGrpId != 0) {
        RewardGrpId = other.RewardGrpId;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.SafeActDiff != 0) {
        SafeActDiff = other.SafeActDiff;
      }
      if (other.SafePayDiff != 0) {
        SafePayDiff = other.SafePayDiff;
      }
      shutdownItemId_.Add(other.shutdownItemId_);
      if (other.ShutdownLevel != 0) {
        ShutdownLevel = other.ShutdownLevel;
      }
      shutdownOrderId_.Add(other.shutdownOrderId_);
      shutdownRandId_.Add(other.shutdownRandId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            activeItemId_.AddEntriesFrom(input, _repeated_activeItemId_codec);
            break;
          }
          case 24: {
            ActiveLevel = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            activeOrderId_.AddEntriesFrom(input, _repeated_activeOrderId_codec);
            break;
          }
          case 48: {
            BoardId = input.ReadInt32();
            break;
          }
          case 64: {
            DisplayLevel = input.ReadInt32();
            break;
          }
          case 88: {
            RoleId = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            shutdownItemId_.AddEntriesFrom(input, _repeated_shutdownItemId_codec);
            break;
          }
          case 104: {
            ShutdownLevel = input.ReadInt32();
            break;
          }
          case 114:
          case 112: {
            shutdownOrderId_.AddEntriesFrom(input, _repeated_shutdownOrderId_codec);
            break;
          }
          case 146:
          case 144: {
            numWt_.AddEntriesFrom(input, _repeated_numWt_codec);
            break;
          }
          case 152: {
            IsPassive = input.ReadBool();
            break;
          }
          case 168: {
            MinDiffRate = input.ReadInt32();
            break;
          }
          case 176: {
            ActDiffGrpId = input.ReadInt32();
            break;
          }
          case 184: {
            PayDiffGrpId = input.ReadInt32();
            break;
          }
          case 192: {
            RewardGrpId = input.ReadInt32();
            break;
          }
          case 202:
          case 200: {
            shutdownRandId_.AddEntriesFrom(input, _repeated_shutdownRandId_codec);
            break;
          }
          case 208: {
            IsApiOrder = input.ReadBool();
            break;
          }
          case 216: {
            IsApiUse = input.ReadBool();
            break;
          }
          case 224: {
            IsRelateBox = input.ReadBool();
            break;
          }
          case 232: {
            EasyActDiff = input.ReadInt32();
            break;
          }
          case 240: {
            EasyPayDiff = input.ReadInt32();
            break;
          }
          case 248: {
            HardActDiff = input.ReadInt32();
            break;
          }
          case 256: {
            HardPayDiff = input.ReadInt32();
            break;
          }
          case 264: {
            IsCtrled = input.ReadBool();
            break;
          }
          case 272: {
            SafeActDiff = input.ReadInt32();
            break;
          }
          case 280: {
            SafePayDiff = input.ReadInt32();
            break;
          }
          case 288: {
            IsWishing = input.ReadBool();
            break;
          }
          case 298: {
            ModelVersion = input.ReadString();
            break;
          }
          case 304: {
            IsOrderBonus = input.ReadBool();
            break;
          }
          case 312: {
            IsSkipCategoryWt = input.ReadBool();
            break;
          }
          case 320: {
            IsOrderClaw = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            activeItemId_.AddEntriesFrom(ref input, _repeated_activeItemId_codec);
            break;
          }
          case 24: {
            ActiveLevel = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            activeOrderId_.AddEntriesFrom(ref input, _repeated_activeOrderId_codec);
            break;
          }
          case 48: {
            BoardId = input.ReadInt32();
            break;
          }
          case 64: {
            DisplayLevel = input.ReadInt32();
            break;
          }
          case 88: {
            RoleId = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            shutdownItemId_.AddEntriesFrom(ref input, _repeated_shutdownItemId_codec);
            break;
          }
          case 104: {
            ShutdownLevel = input.ReadInt32();
            break;
          }
          case 114:
          case 112: {
            shutdownOrderId_.AddEntriesFrom(ref input, _repeated_shutdownOrderId_codec);
            break;
          }
          case 146:
          case 144: {
            numWt_.AddEntriesFrom(ref input, _repeated_numWt_codec);
            break;
          }
          case 152: {
            IsPassive = input.ReadBool();
            break;
          }
          case 168: {
            MinDiffRate = input.ReadInt32();
            break;
          }
          case 176: {
            ActDiffGrpId = input.ReadInt32();
            break;
          }
          case 184: {
            PayDiffGrpId = input.ReadInt32();
            break;
          }
          case 192: {
            RewardGrpId = input.ReadInt32();
            break;
          }
          case 202:
          case 200: {
            shutdownRandId_.AddEntriesFrom(ref input, _repeated_shutdownRandId_codec);
            break;
          }
          case 208: {
            IsApiOrder = input.ReadBool();
            break;
          }
          case 216: {
            IsApiUse = input.ReadBool();
            break;
          }
          case 224: {
            IsRelateBox = input.ReadBool();
            break;
          }
          case 232: {
            EasyActDiff = input.ReadInt32();
            break;
          }
          case 240: {
            EasyPayDiff = input.ReadInt32();
            break;
          }
          case 248: {
            HardActDiff = input.ReadInt32();
            break;
          }
          case 256: {
            HardPayDiff = input.ReadInt32();
            break;
          }
          case 264: {
            IsCtrled = input.ReadBool();
            break;
          }
          case 272: {
            SafeActDiff = input.ReadInt32();
            break;
          }
          case 280: {
            SafePayDiff = input.ReadInt32();
            break;
          }
          case 288: {
            IsWishing = input.ReadBool();
            break;
          }
          case 298: {
            ModelVersion = input.ReadString();
            break;
          }
          case 304: {
            IsOrderBonus = input.ReadBool();
            break;
          }
          case 312: {
            IsSkipCategoryWt = input.ReadBool();
            break;
          }
          case 320: {
            IsOrderClaw = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OrderRandomerMapABValue : pb::IMessage<OrderRandomerMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderRandomerMapABValue> _parser = new pb::MessageParser<OrderRandomerMapABValue>(() => new OrderRandomerMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderRandomerMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.OrderRandomerConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRandomerMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRandomerMapABValue(OrderRandomerMapABValue other) : this() {
      orderRandomerMap_ = other.orderRandomerMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRandomerMapABValue Clone() {
      return new OrderRandomerMapABValue(this);
    }

    /// <summary>Field number for the "OrderRandomerMap" field.</summary>
    public const int OrderRandomerMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.OrderRandomer>.Codec _map_orderRandomerMap_codec
        = new pbc::MapField<int, global::fat.rawdata.OrderRandomer>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.OrderRandomer.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.OrderRandomer> orderRandomerMap_ = new pbc::MapField<int, global::fat.rawdata.OrderRandomer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.OrderRandomer> OrderRandomerMap {
      get { return orderRandomerMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderRandomerMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderRandomerMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!OrderRandomerMap.Equals(other.OrderRandomerMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= OrderRandomerMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      orderRandomerMap_.WriteTo(output, _map_orderRandomerMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      orderRandomerMap_.WriteTo(ref output, _map_orderRandomerMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += orderRandomerMap_.CalculateSize(_map_orderRandomerMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderRandomerMapABValue other) {
      if (other == null) {
        return;
      }
      orderRandomerMap_.Add(other.orderRandomerMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            orderRandomerMap_.AddEntriesFrom(input, _map_orderRandomerMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            orderRandomerMap_.AddEntriesFrom(ref input, _map_orderRandomerMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OrderRandomerConf : pb::IMessage<OrderRandomerConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderRandomerConf> _parser = new pb::MessageParser<OrderRandomerConf>(() => new OrderRandomerConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderRandomerConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.OrderRandomerConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRandomerConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRandomerConf(OrderRandomerConf other) : this() {
      orderRandomerMap_ = other.orderRandomerMap_.Clone();
      orderRandomerMapAB_ = other.orderRandomerMapAB_.Clone();
      orderRandomerMapABPatch_ = other.orderRandomerMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderRandomerConf Clone() {
      return new OrderRandomerConf(this);
    }

    /// <summary>Field number for the "OrderRandomerMap" field.</summary>
    public const int OrderRandomerMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.OrderRandomer>.Codec _map_orderRandomerMap_codec
        = new pbc::MapField<int, global::fat.rawdata.OrderRandomer>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.OrderRandomer.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.OrderRandomer> orderRandomerMap_ = new pbc::MapField<int, global::fat.rawdata.OrderRandomer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.OrderRandomer> OrderRandomerMap {
      get { return orderRandomerMap_; }
    }

    /// <summary>Field number for the "OrderRandomerMapAB" field.</summary>
    public const int OrderRandomerMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.OrderRandomerMapABValue>.Codec _map_orderRandomerMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.OrderRandomerMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.OrderRandomerMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.OrderRandomerMapABValue> orderRandomerMapAB_ = new pbc::MapField<string, global::fat.rawdata.OrderRandomerMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.OrderRandomerMapABValue> OrderRandomerMapAB {
      get { return orderRandomerMapAB_; }
    }

    /// <summary>Field number for the "OrderRandomerMapABPatch" field.</summary>
    public const int OrderRandomerMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.OrderRandomerMapABValue>.Codec _map_orderRandomerMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.OrderRandomerMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.OrderRandomerMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.OrderRandomerMapABValue> orderRandomerMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.OrderRandomerMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.OrderRandomerMapABValue> OrderRandomerMapABPatch {
      get { return orderRandomerMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderRandomerConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderRandomerConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!OrderRandomerMap.Equals(other.OrderRandomerMap)) return false;
      if (!OrderRandomerMapAB.Equals(other.OrderRandomerMapAB)) return false;
      if (!OrderRandomerMapABPatch.Equals(other.OrderRandomerMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= OrderRandomerMap.GetHashCode();
      hash ^= OrderRandomerMapAB.GetHashCode();
      hash ^= OrderRandomerMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      orderRandomerMap_.WriteTo(output, _map_orderRandomerMap_codec);
      orderRandomerMapAB_.WriteTo(output, _map_orderRandomerMapAB_codec);
      orderRandomerMapABPatch_.WriteTo(output, _map_orderRandomerMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      orderRandomerMap_.WriteTo(ref output, _map_orderRandomerMap_codec);
      orderRandomerMapAB_.WriteTo(ref output, _map_orderRandomerMapAB_codec);
      orderRandomerMapABPatch_.WriteTo(ref output, _map_orderRandomerMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += orderRandomerMap_.CalculateSize(_map_orderRandomerMap_codec);
      size += orderRandomerMapAB_.CalculateSize(_map_orderRandomerMapAB_codec);
      size += orderRandomerMapABPatch_.CalculateSize(_map_orderRandomerMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderRandomerConf other) {
      if (other == null) {
        return;
      }
      orderRandomerMap_.Add(other.orderRandomerMap_);
      orderRandomerMapAB_.Add(other.orderRandomerMapAB_);
      orderRandomerMapABPatch_.Add(other.orderRandomerMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            orderRandomerMap_.AddEntriesFrom(input, _map_orderRandomerMap_codec);
            break;
          }
          case 18: {
            orderRandomerMapAB_.AddEntriesFrom(input, _map_orderRandomerMapAB_codec);
            break;
          }
          case 26: {
            orderRandomerMapABPatch_.AddEntriesFrom(input, _map_orderRandomerMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            orderRandomerMap_.AddEntriesFrom(ref input, _map_orderRandomerMap_codec);
            break;
          }
          case 18: {
            orderRandomerMapAB_.AddEntriesFrom(ref input, _map_orderRandomerMapAB_codec);
            break;
          }
          case 26: {
            orderRandomerMapABPatch_.AddEntriesFrom(ref input, _map_orderRandomerMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
