// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventRaceRoundConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventRaceRoundConf.proto</summary>
  public static partial class EventRaceRoundConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventRaceRoundConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventRaceRoundConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiByYXdkYXRhL0V2ZW50UmFjZVJvdW5kQ29uZi5wcm90bxIHcmF3ZGF0YSJl",
            "Cg5FdmVudFJhY2VSb3VuZBIKCgJpZBgBIAEoBRITCgtyYWNlR2V0R2lmdBgC",
            "IAMoBRISCgpyYWNlR2V0TnVtGAMgAygFEg8KB3JvYm90SWQYBCADKAUSDQoF",
            "c2NvcmUYBSABKAUiwgEKGEV2ZW50UmFjZVJvdW5kTWFwQUJWYWx1ZRJTChFF",
            "dmVudFJhY2VSb3VuZE1hcBgBIAMoCzI4LnJhd2RhdGEuRXZlbnRSYWNlUm91",
            "bmRNYXBBQlZhbHVlLkV2ZW50UmFjZVJvdW5kTWFwRW50cnkaUQoWRXZlbnRS",
            "YWNlUm91bmRNYXBFbnRyeRILCgNrZXkYASABKAUSJgoFdmFsdWUYAiABKAsy",
            "Fy5yYXdkYXRhLkV2ZW50UmFjZVJvdW5kOgI4ASKpBAoSRXZlbnRSYWNlUm91",
            "bmRDb25mEk0KEUV2ZW50UmFjZVJvdW5kTWFwGAEgAygLMjIucmF3ZGF0YS5F",
            "dmVudFJhY2VSb3VuZENvbmYuRXZlbnRSYWNlUm91bmRNYXBFbnRyeRJRChNF",
            "dmVudFJhY2VSb3VuZE1hcEFCGAIgAygLMjQucmF3ZGF0YS5FdmVudFJhY2VS",
            "b3VuZENvbmYuRXZlbnRSYWNlUm91bmRNYXBBQkVudHJ5ElsKGEV2ZW50UmFj",
            "ZVJvdW5kTWFwQUJQYXRjaBgDIAMoCzI5LnJhd2RhdGEuRXZlbnRSYWNlUm91",
            "bmRDb25mLkV2ZW50UmFjZVJvdW5kTWFwQUJQYXRjaEVudHJ5GlEKFkV2ZW50",
            "UmFjZVJvdW5kTWFwRW50cnkSCwoDa2V5GAEgASgFEiYKBXZhbHVlGAIgASgL",
            "MhcucmF3ZGF0YS5FdmVudFJhY2VSb3VuZDoCOAEaXQoYRXZlbnRSYWNlUm91",
            "bmRNYXBBQkVudHJ5EgsKA2tleRgBIAEoCRIwCgV2YWx1ZRgCIAEoCzIhLnJh",
            "d2RhdGEuRXZlbnRSYWNlUm91bmRNYXBBQlZhbHVlOgI4ARpiCh1FdmVudFJh",
            "Y2VSb3VuZE1hcEFCUGF0Y2hFbnRyeRILCgNrZXkYASABKAkSMAoFdmFsdWUY",
            "AiABKAsyIS5yYXdkYXRhLkV2ZW50UmFjZVJvdW5kTWFwQUJWYWx1ZToCOAFC",
            "PVotZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdk",
            "YXRhqgILZmF0LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventRaceRound), global::fat.rawdata.EventRaceRound.Parser, new[]{ "Id", "RaceGetGift", "RaceGetNum", "RobotId", "Score" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventRaceRoundMapABValue), global::fat.rawdata.EventRaceRoundMapABValue.Parser, new[]{ "EventRaceRoundMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventRaceRoundConf), global::fat.rawdata.EventRaceRoundConf.Parser, new[]{ "EventRaceRoundMap", "EventRaceRoundMapAB", "EventRaceRoundMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventRaceRound",table="EventRaceRoundMap",table_wrapper="EventRaceRoundConf",map="true",map_key_type="int32",data="EventRaceRoundConf")
  /// annotation@ab(table_ab="EventRaceRoundMapAB",table_ab_patch="EventRaceRoundMapABPatch",table_ab_value="EventRaceRoundMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventRaceRound(id="id")
  /// </summary>
  public sealed partial class EventRaceRound : pb::IMessage<EventRaceRound>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventRaceRound> _parser = new pb::MessageParser<EventRaceRound>(() => new EventRaceRound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRaceRound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventRaceRoundConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRound(EventRaceRound other) : this() {
      id_ = other.id_;
      raceGetGift_ = other.raceGetGift_.Clone();
      raceGetNum_ = other.raceGetNum_.Clone();
      robotId_ = other.robotId_.Clone();
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRound Clone() {
      return new EventRaceRound(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 回合id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "raceGetGift" field.</summary>
    public const int RaceGetGiftFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_raceGetGift_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> raceGetGift_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 对应奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RaceGetGift {
      get { return raceGetGift_; }
    }

    /// <summary>Field number for the "raceGetNum" field.</summary>
    public const int RaceGetNumFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_raceGetNum_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> raceGetNum_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 可获得名次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RaceGetNum {
      get { return raceGetNum_; }
    }

    /// <summary>Field number for the "robotId" field.</summary>
    public const int RobotIdFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_robotId_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> robotId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 机器人id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RobotId {
      get { return robotId_; }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 5;
    private int score_;
    /// <summary>
    /// 回合积分目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRaceRound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRaceRound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!raceGetGift_.Equals(other.raceGetGift_)) return false;
      if(!raceGetNum_.Equals(other.raceGetNum_)) return false;
      if(!robotId_.Equals(other.robotId_)) return false;
      if (Score != other.Score) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= raceGetGift_.GetHashCode();
      hash ^= raceGetNum_.GetHashCode();
      hash ^= robotId_.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      raceGetGift_.WriteTo(output, _repeated_raceGetGift_codec);
      raceGetNum_.WriteTo(output, _repeated_raceGetNum_codec);
      robotId_.WriteTo(output, _repeated_robotId_codec);
      if (Score != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      raceGetGift_.WriteTo(ref output, _repeated_raceGetGift_codec);
      raceGetNum_.WriteTo(ref output, _repeated_raceGetNum_codec);
      robotId_.WriteTo(ref output, _repeated_robotId_codec);
      if (Score != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += raceGetGift_.CalculateSize(_repeated_raceGetGift_codec);
      size += raceGetNum_.CalculateSize(_repeated_raceGetNum_codec);
      size += robotId_.CalculateSize(_repeated_robotId_codec);
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRaceRound other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      raceGetGift_.Add(other.raceGetGift_);
      raceGetNum_.Add(other.raceGetNum_);
      robotId_.Add(other.robotId_);
      if (other.Score != 0) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            raceGetGift_.AddEntriesFrom(input, _repeated_raceGetGift_codec);
            break;
          }
          case 26:
          case 24: {
            raceGetNum_.AddEntriesFrom(input, _repeated_raceGetNum_codec);
            break;
          }
          case 34:
          case 32: {
            robotId_.AddEntriesFrom(input, _repeated_robotId_codec);
            break;
          }
          case 40: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            raceGetGift_.AddEntriesFrom(ref input, _repeated_raceGetGift_codec);
            break;
          }
          case 26:
          case 24: {
            raceGetNum_.AddEntriesFrom(ref input, _repeated_raceGetNum_codec);
            break;
          }
          case 34:
          case 32: {
            robotId_.AddEntriesFrom(ref input, _repeated_robotId_codec);
            break;
          }
          case 40: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventRaceRoundMapABValue : pb::IMessage<EventRaceRoundMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventRaceRoundMapABValue> _parser = new pb::MessageParser<EventRaceRoundMapABValue>(() => new EventRaceRoundMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRaceRoundMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventRaceRoundConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRoundMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRoundMapABValue(EventRaceRoundMapABValue other) : this() {
      eventRaceRoundMap_ = other.eventRaceRoundMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRoundMapABValue Clone() {
      return new EventRaceRoundMapABValue(this);
    }

    /// <summary>Field number for the "EventRaceRoundMap" field.</summary>
    public const int EventRaceRoundMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventRaceRound>.Codec _map_eventRaceRoundMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventRaceRound>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRaceRound.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventRaceRound> eventRaceRoundMap_ = new pbc::MapField<int, global::fat.rawdata.EventRaceRound>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventRaceRound> EventRaceRoundMap {
      get { return eventRaceRoundMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRaceRoundMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRaceRoundMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventRaceRoundMap.Equals(other.EventRaceRoundMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventRaceRoundMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventRaceRoundMap_.WriteTo(output, _map_eventRaceRoundMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventRaceRoundMap_.WriteTo(ref output, _map_eventRaceRoundMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventRaceRoundMap_.CalculateSize(_map_eventRaceRoundMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRaceRoundMapABValue other) {
      if (other == null) {
        return;
      }
      eventRaceRoundMap_.Add(other.eventRaceRoundMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventRaceRoundMap_.AddEntriesFrom(input, _map_eventRaceRoundMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventRaceRoundMap_.AddEntriesFrom(ref input, _map_eventRaceRoundMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventRaceRoundConf : pb::IMessage<EventRaceRoundConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventRaceRoundConf> _parser = new pb::MessageParser<EventRaceRoundConf>(() => new EventRaceRoundConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRaceRoundConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventRaceRoundConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRoundConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRoundConf(EventRaceRoundConf other) : this() {
      eventRaceRoundMap_ = other.eventRaceRoundMap_.Clone();
      eventRaceRoundMapAB_ = other.eventRaceRoundMapAB_.Clone();
      eventRaceRoundMapABPatch_ = other.eventRaceRoundMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceRoundConf Clone() {
      return new EventRaceRoundConf(this);
    }

    /// <summary>Field number for the "EventRaceRoundMap" field.</summary>
    public const int EventRaceRoundMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventRaceRound>.Codec _map_eventRaceRoundMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventRaceRound>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRaceRound.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventRaceRound> eventRaceRoundMap_ = new pbc::MapField<int, global::fat.rawdata.EventRaceRound>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventRaceRound> EventRaceRoundMap {
      get { return eventRaceRoundMap_; }
    }

    /// <summary>Field number for the "EventRaceRoundMapAB" field.</summary>
    public const int EventRaceRoundMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventRaceRoundMapABValue>.Codec _map_eventRaceRoundMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventRaceRoundMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRaceRoundMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventRaceRoundMapABValue> eventRaceRoundMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventRaceRoundMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventRaceRoundMapABValue> EventRaceRoundMapAB {
      get { return eventRaceRoundMapAB_; }
    }

    /// <summary>Field number for the "EventRaceRoundMapABPatch" field.</summary>
    public const int EventRaceRoundMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventRaceRoundMapABValue>.Codec _map_eventRaceRoundMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventRaceRoundMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRaceRoundMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventRaceRoundMapABValue> eventRaceRoundMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventRaceRoundMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventRaceRoundMapABValue> EventRaceRoundMapABPatch {
      get { return eventRaceRoundMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRaceRoundConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRaceRoundConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventRaceRoundMap.Equals(other.EventRaceRoundMap)) return false;
      if (!EventRaceRoundMapAB.Equals(other.EventRaceRoundMapAB)) return false;
      if (!EventRaceRoundMapABPatch.Equals(other.EventRaceRoundMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventRaceRoundMap.GetHashCode();
      hash ^= EventRaceRoundMapAB.GetHashCode();
      hash ^= EventRaceRoundMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventRaceRoundMap_.WriteTo(output, _map_eventRaceRoundMap_codec);
      eventRaceRoundMapAB_.WriteTo(output, _map_eventRaceRoundMapAB_codec);
      eventRaceRoundMapABPatch_.WriteTo(output, _map_eventRaceRoundMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventRaceRoundMap_.WriteTo(ref output, _map_eventRaceRoundMap_codec);
      eventRaceRoundMapAB_.WriteTo(ref output, _map_eventRaceRoundMapAB_codec);
      eventRaceRoundMapABPatch_.WriteTo(ref output, _map_eventRaceRoundMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventRaceRoundMap_.CalculateSize(_map_eventRaceRoundMap_codec);
      size += eventRaceRoundMapAB_.CalculateSize(_map_eventRaceRoundMapAB_codec);
      size += eventRaceRoundMapABPatch_.CalculateSize(_map_eventRaceRoundMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRaceRoundConf other) {
      if (other == null) {
        return;
      }
      eventRaceRoundMap_.Add(other.eventRaceRoundMap_);
      eventRaceRoundMapAB_.Add(other.eventRaceRoundMapAB_);
      eventRaceRoundMapABPatch_.Add(other.eventRaceRoundMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventRaceRoundMap_.AddEntriesFrom(input, _map_eventRaceRoundMap_codec);
            break;
          }
          case 18: {
            eventRaceRoundMapAB_.AddEntriesFrom(input, _map_eventRaceRoundMapAB_codec);
            break;
          }
          case 26: {
            eventRaceRoundMapABPatch_.AddEntriesFrom(input, _map_eventRaceRoundMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventRaceRoundMap_.AddEntriesFrom(ref input, _map_eventRaceRoundMap_codec);
            break;
          }
          case 18: {
            eventRaceRoundMapAB_.AddEntriesFrom(ref input, _map_eventRaceRoundMapAB_codec);
            break;
          }
          case 26: {
            eventRaceRoundMapABPatch_.AddEntriesFrom(ref input, _map_eventRaceRoundMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
