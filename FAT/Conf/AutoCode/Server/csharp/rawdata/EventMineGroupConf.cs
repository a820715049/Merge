// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventMineGroupConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventMineGroupConf.proto</summary>
  public static partial class EventMineGroupConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventMineGroupConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventMineGroupConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiByYXdkYXRhL0V2ZW50TWluZUdyb3VwQ29uZi5wcm90bxIHcmF3ZGF0YSL+",
            "AQoORXZlbnRNaW5lR3JvdXASCgoCaWQYASABKAUSDwoHYm9hcmRJZBgCIAEo",
            "BRIMCgRkaWZmGAcgASgFEjsKCmV4cGlyZUl0ZW0YCCADKAsyJy5yYXdkYXRh",
            "LkV2ZW50TWluZUdyb3VwLkV4cGlyZUl0ZW1FbnRyeRISCgpleHRyYVNjb3Jl",
            "GAMgASgFEhAKCGhhbmRib29rGAQgAygFEhkKEW1pbGVzdG9uZVJld2FyZElk",
            "GAUgAygFEhAKCHRva2VuTnVtGAYgASgFGjEKD0V4cGlyZUl0ZW1FbnRyeRIL",
            "CgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAk6AjgBIsIBChhFdmVudE1pbmVH",
            "cm91cE1hcEFCVmFsdWUSUwoRRXZlbnRNaW5lR3JvdXBNYXAYASADKAsyOC5y",
            "YXdkYXRhLkV2ZW50TWluZUdyb3VwTWFwQUJWYWx1ZS5FdmVudE1pbmVHcm91",
            "cE1hcEVudHJ5GlEKFkV2ZW50TWluZUdyb3VwTWFwRW50cnkSCwoDa2V5GAEg",
            "ASgFEiYKBXZhbHVlGAIgASgLMhcucmF3ZGF0YS5FdmVudE1pbmVHcm91cDoC",
            "OAEiqQQKEkV2ZW50TWluZUdyb3VwQ29uZhJNChFFdmVudE1pbmVHcm91cE1h",
            "cBgBIAMoCzIyLnJhd2RhdGEuRXZlbnRNaW5lR3JvdXBDb25mLkV2ZW50TWlu",
            "ZUdyb3VwTWFwRW50cnkSUQoTRXZlbnRNaW5lR3JvdXBNYXBBQhgCIAMoCzI0",
            "LnJhd2RhdGEuRXZlbnRNaW5lR3JvdXBDb25mLkV2ZW50TWluZUdyb3VwTWFw",
            "QUJFbnRyeRJbChhFdmVudE1pbmVHcm91cE1hcEFCUGF0Y2gYAyADKAsyOS5y",
            "YXdkYXRhLkV2ZW50TWluZUdyb3VwQ29uZi5FdmVudE1pbmVHcm91cE1hcEFC",
            "UGF0Y2hFbnRyeRpRChZFdmVudE1pbmVHcm91cE1hcEVudHJ5EgsKA2tleRgB",
            "IAEoBRImCgV2YWx1ZRgCIAEoCzIXLnJhd2RhdGEuRXZlbnRNaW5lR3JvdXA6",
            "AjgBGl0KGEV2ZW50TWluZUdyb3VwTWFwQUJFbnRyeRILCgNrZXkYASABKAkS",
            "MAoFdmFsdWUYAiABKAsyIS5yYXdkYXRhLkV2ZW50TWluZUdyb3VwTWFwQUJW",
            "YWx1ZToCOAEaYgodRXZlbnRNaW5lR3JvdXBNYXBBQlBhdGNoRW50cnkSCwoD",
            "a2V5GAEgASgJEjAKBXZhbHVlGAIgASgLMiEucmF3ZGF0YS5FdmVudE1pbmVH",
            "cm91cE1hcEFCVmFsdWU6AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9j",
            "b25mL2dlbi9nb2xhbmcvcmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMineGroup), global::fat.rawdata.EventMineGroup.Parser, new[]{ "Id", "BoardId", "Diff", "ExpireItem", "ExtraScore", "Handbook", "MilestoneRewardId", "TokenNum" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMineGroupMapABValue), global::fat.rawdata.EventMineGroupMapABValue.Parser, new[]{ "EventMineGroupMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMineGroupConf), global::fat.rawdata.EventMineGroupConf.Parser, new[]{ "EventMineGroupMap", "EventMineGroupMapAB", "EventMineGroupMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventMineGroup",table="EventMineGroupMap",table_wrapper="EventMineGroupConf",map="true",map_key_type="int32",data="EventMineGroupConf")
  /// annotation@ab(table_ab="EventMineGroupMapAB",table_ab_patch="EventMineGroupMapABPatch",table_ab_value="EventMineGroupMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventMineGroup(id="id")
  /// </summary>
  public sealed partial class EventMineGroup : pb::IMessage<EventMineGroup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMineGroup> _parser = new pb::MessageParser<EventMineGroup>(() => new EventMineGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMineGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMineGroupConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineGroup(EventMineGroup other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      diff_ = other.diff_;
      expireItem_ = other.expireItem_.Clone();
      extraScore_ = other.extraScore_;
      handbook_ = other.handbook_.Clone();
      milestoneRewardId_ = other.milestoneRewardId_.Clone();
      tokenNum_ = other.tokenNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineGroup Clone() {
      return new EventMineGroup(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 挖矿棋盘id
    /// MergeBoard_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "diff" field.</summary>
    public const int DiffFieldNumber = 7;
    private int diff_;
    /// <summary>
    /// 难度
    /// （仅TGA使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diff {
      get { return diff_; }
      set {
        diff_ = value;
      }
    }

    /// <summary>Field number for the "expireItem" field.</summary>
    public const int ExpireItemFieldNumber = 8;
    private static readonly pbc::MapField<int, string>.Codec _map_expireItem_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 66);
    private readonly pbc::MapField<int, string> expireItem_ = new pbc::MapField<int, string>();
    /// <summary>
    /// 活动结束时
    /// 通过弹板的方式一次性删除棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> ExpireItem {
      get { return expireItem_; }
    }

    /// <summary>Field number for the "extraScore" field.</summary>
    public const int ExtraScoreFieldNumber = 3;
    private int extraScore_;
    /// <summary>
    /// 积分模版
    /// （EventExtraScore.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraScore {
      get { return extraScore_; }
      set {
        extraScore_ = value;
      }
    }

    /// <summary>Field number for the "handbook" field.</summary>
    public const int HandbookFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_handbook_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> handbook_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 图鉴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Handbook {
      get { return handbook_; }
    }

    /// <summary>Field number for the "milestoneRewardId" field.</summary>
    public const int MilestoneRewardIdFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_milestoneRewardId_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> milestoneRewardId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 阶段进度值id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MilestoneRewardId {
      get { return milestoneRewardId_; }
    }

    /// <summary>Field number for the "tokenNum" field.</summary>
    public const int TokenNumFieldNumber = 6;
    private int tokenNum_;
    /// <summary>
    /// 初始tokennum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TokenNum {
      get { return tokenNum_; }
      set {
        tokenNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMineGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMineGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (Diff != other.Diff) return false;
      if (!ExpireItem.Equals(other.ExpireItem)) return false;
      if (ExtraScore != other.ExtraScore) return false;
      if(!handbook_.Equals(other.handbook_)) return false;
      if(!milestoneRewardId_.Equals(other.milestoneRewardId_)) return false;
      if (TokenNum != other.TokenNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (Diff != 0) hash ^= Diff.GetHashCode();
      hash ^= ExpireItem.GetHashCode();
      if (ExtraScore != 0) hash ^= ExtraScore.GetHashCode();
      hash ^= handbook_.GetHashCode();
      hash ^= milestoneRewardId_.GetHashCode();
      if (TokenNum != 0) hash ^= TokenNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (ExtraScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ExtraScore);
      }
      handbook_.WriteTo(output, _repeated_handbook_codec);
      milestoneRewardId_.WriteTo(output, _repeated_milestoneRewardId_codec);
      if (TokenNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TokenNum);
      }
      if (Diff != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Diff);
      }
      expireItem_.WriteTo(output, _map_expireItem_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (ExtraScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ExtraScore);
      }
      handbook_.WriteTo(ref output, _repeated_handbook_codec);
      milestoneRewardId_.WriteTo(ref output, _repeated_milestoneRewardId_codec);
      if (TokenNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TokenNum);
      }
      if (Diff != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Diff);
      }
      expireItem_.WriteTo(ref output, _map_expireItem_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (Diff != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diff);
      }
      size += expireItem_.CalculateSize(_map_expireItem_codec);
      if (ExtraScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraScore);
      }
      size += handbook_.CalculateSize(_repeated_handbook_codec);
      size += milestoneRewardId_.CalculateSize(_repeated_milestoneRewardId_codec);
      if (TokenNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TokenNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMineGroup other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.Diff != 0) {
        Diff = other.Diff;
      }
      expireItem_.Add(other.expireItem_);
      if (other.ExtraScore != 0) {
        ExtraScore = other.ExtraScore;
      }
      handbook_.Add(other.handbook_);
      milestoneRewardId_.Add(other.milestoneRewardId_);
      if (other.TokenNum != 0) {
        TokenNum = other.TokenNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            ExtraScore = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            handbook_.AddEntriesFrom(input, _repeated_handbook_codec);
            break;
          }
          case 42:
          case 40: {
            milestoneRewardId_.AddEntriesFrom(input, _repeated_milestoneRewardId_codec);
            break;
          }
          case 48: {
            TokenNum = input.ReadInt32();
            break;
          }
          case 56: {
            Diff = input.ReadInt32();
            break;
          }
          case 66: {
            expireItem_.AddEntriesFrom(input, _map_expireItem_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            ExtraScore = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            handbook_.AddEntriesFrom(ref input, _repeated_handbook_codec);
            break;
          }
          case 42:
          case 40: {
            milestoneRewardId_.AddEntriesFrom(ref input, _repeated_milestoneRewardId_codec);
            break;
          }
          case 48: {
            TokenNum = input.ReadInt32();
            break;
          }
          case 56: {
            Diff = input.ReadInt32();
            break;
          }
          case 66: {
            expireItem_.AddEntriesFrom(ref input, _map_expireItem_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMineGroupMapABValue : pb::IMessage<EventMineGroupMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMineGroupMapABValue> _parser = new pb::MessageParser<EventMineGroupMapABValue>(() => new EventMineGroupMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMineGroupMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMineGroupConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineGroupMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineGroupMapABValue(EventMineGroupMapABValue other) : this() {
      eventMineGroupMap_ = other.eventMineGroupMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineGroupMapABValue Clone() {
      return new EventMineGroupMapABValue(this);
    }

    /// <summary>Field number for the "EventMineGroupMap" field.</summary>
    public const int EventMineGroupMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMineGroup>.Codec _map_eventMineGroupMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMineGroup>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMineGroup.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMineGroup> eventMineGroupMap_ = new pbc::MapField<int, global::fat.rawdata.EventMineGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMineGroup> EventMineGroupMap {
      get { return eventMineGroupMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMineGroupMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMineGroupMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMineGroupMap.Equals(other.EventMineGroupMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMineGroupMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMineGroupMap_.WriteTo(output, _map_eventMineGroupMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMineGroupMap_.WriteTo(ref output, _map_eventMineGroupMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMineGroupMap_.CalculateSize(_map_eventMineGroupMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMineGroupMapABValue other) {
      if (other == null) {
        return;
      }
      eventMineGroupMap_.Add(other.eventMineGroupMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMineGroupMap_.AddEntriesFrom(input, _map_eventMineGroupMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMineGroupMap_.AddEntriesFrom(ref input, _map_eventMineGroupMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMineGroupConf : pb::IMessage<EventMineGroupConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMineGroupConf> _parser = new pb::MessageParser<EventMineGroupConf>(() => new EventMineGroupConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMineGroupConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMineGroupConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineGroupConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineGroupConf(EventMineGroupConf other) : this() {
      eventMineGroupMap_ = other.eventMineGroupMap_.Clone();
      eventMineGroupMapAB_ = other.eventMineGroupMapAB_.Clone();
      eventMineGroupMapABPatch_ = other.eventMineGroupMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMineGroupConf Clone() {
      return new EventMineGroupConf(this);
    }

    /// <summary>Field number for the "EventMineGroupMap" field.</summary>
    public const int EventMineGroupMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMineGroup>.Codec _map_eventMineGroupMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMineGroup>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMineGroup.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMineGroup> eventMineGroupMap_ = new pbc::MapField<int, global::fat.rawdata.EventMineGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMineGroup> EventMineGroupMap {
      get { return eventMineGroupMap_; }
    }

    /// <summary>Field number for the "EventMineGroupMapAB" field.</summary>
    public const int EventMineGroupMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMineGroupMapABValue>.Codec _map_eventMineGroupMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMineGroupMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMineGroupMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMineGroupMapABValue> eventMineGroupMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventMineGroupMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMineGroupMapABValue> EventMineGroupMapAB {
      get { return eventMineGroupMapAB_; }
    }

    /// <summary>Field number for the "EventMineGroupMapABPatch" field.</summary>
    public const int EventMineGroupMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMineGroupMapABValue>.Codec _map_eventMineGroupMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMineGroupMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMineGroupMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMineGroupMapABValue> eventMineGroupMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventMineGroupMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMineGroupMapABValue> EventMineGroupMapABPatch {
      get { return eventMineGroupMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMineGroupConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMineGroupConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMineGroupMap.Equals(other.EventMineGroupMap)) return false;
      if (!EventMineGroupMapAB.Equals(other.EventMineGroupMapAB)) return false;
      if (!EventMineGroupMapABPatch.Equals(other.EventMineGroupMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMineGroupMap.GetHashCode();
      hash ^= EventMineGroupMapAB.GetHashCode();
      hash ^= EventMineGroupMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMineGroupMap_.WriteTo(output, _map_eventMineGroupMap_codec);
      eventMineGroupMapAB_.WriteTo(output, _map_eventMineGroupMapAB_codec);
      eventMineGroupMapABPatch_.WriteTo(output, _map_eventMineGroupMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMineGroupMap_.WriteTo(ref output, _map_eventMineGroupMap_codec);
      eventMineGroupMapAB_.WriteTo(ref output, _map_eventMineGroupMapAB_codec);
      eventMineGroupMapABPatch_.WriteTo(ref output, _map_eventMineGroupMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMineGroupMap_.CalculateSize(_map_eventMineGroupMap_codec);
      size += eventMineGroupMapAB_.CalculateSize(_map_eventMineGroupMapAB_codec);
      size += eventMineGroupMapABPatch_.CalculateSize(_map_eventMineGroupMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMineGroupConf other) {
      if (other == null) {
        return;
      }
      eventMineGroupMap_.Add(other.eventMineGroupMap_);
      eventMineGroupMapAB_.Add(other.eventMineGroupMapAB_);
      eventMineGroupMapABPatch_.Add(other.eventMineGroupMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMineGroupMap_.AddEntriesFrom(input, _map_eventMineGroupMap_codec);
            break;
          }
          case 18: {
            eventMineGroupMapAB_.AddEntriesFrom(input, _map_eventMineGroupMapAB_codec);
            break;
          }
          case 26: {
            eventMineGroupMapABPatch_.AddEntriesFrom(input, _map_eventMineGroupMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMineGroupMap_.AddEntriesFrom(ref input, _map_eventMineGroupMap_codec);
            break;
          }
          case 18: {
            eventMineGroupMapAB_.AddEntriesFrom(ref input, _map_eventMineGroupMapAB_codec);
            break;
          }
          case 26: {
            eventMineGroupMapABPatch_.AddEntriesFrom(ref input, _map_eventMineGroupMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
