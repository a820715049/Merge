// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/MarketIgnoreConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/MarketIgnoreConf.proto</summary>
  public static partial class MarketIgnoreConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/MarketIgnoreConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MarketIgnoreConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5yYXdkYXRhL01hcmtldElnbm9yZUNvbmYucHJvdG8SB3Jhd2RhdGEiMQoM",
            "TWFya2V0SWdub3JlEhEKCW9yZGVyVHlwZRgBIAEoBRIOCgZzbG90SWQYAiAB",
            "KAUiTAoYTWFya2V0SWdub3JlU2xpY2VBQlZhbHVlEjAKEU1hcmtldElnbm9y",
            "ZVNsaWNlGAEgAygLMhUucmF3ZGF0YS5NYXJrZXRJZ25vcmUiswMKEE1hcmtl",
            "dElnbm9yZUNvbmYSMAoRTWFya2V0SWdub3JlU2xpY2UYASADKAsyFS5yYXdk",
            "YXRhLk1hcmtldElnbm9yZRJPChNNYXJrZXRJZ25vcmVTbGljZUFCGAIgAygL",
            "MjIucmF3ZGF0YS5NYXJrZXRJZ25vcmVDb25mLk1hcmtldElnbm9yZVNsaWNl",
            "QUJFbnRyeRJZChhNYXJrZXRJZ25vcmVTbGljZUFCUGF0Y2gYAyADKAsyNy5y",
            "YXdkYXRhLk1hcmtldElnbm9yZUNvbmYuTWFya2V0SWdub3JlU2xpY2VBQlBh",
            "dGNoRW50cnkaXQoYTWFya2V0SWdub3JlU2xpY2VBQkVudHJ5EgsKA2tleRgB",
            "IAEoCRIwCgV2YWx1ZRgCIAEoCzIhLnJhd2RhdGEuTWFya2V0SWdub3JlU2xp",
            "Y2VBQlZhbHVlOgI4ARpiCh1NYXJrZXRJZ25vcmVTbGljZUFCUGF0Y2hFbnRy",
            "eRILCgNrZXkYASABKAkSMAoFdmFsdWUYAiABKAsyIS5yYXdkYXRhLk1hcmtl",
            "dElnbm9yZVNsaWNlQUJWYWx1ZToCOAFCPVotZ2l0bGFiLmZ1bnBsdXMuaW8v",
            "ZmF0L2NvbmYvZ2VuL2dvbGFuZy9yYXdkYXRhqgILZmF0LnJhd2RhdGFiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MarketIgnore), global::fat.rawdata.MarketIgnore.Parser, new[]{ "OrderType", "SlotId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MarketIgnoreSliceABValue), global::fat.rawdata.MarketIgnoreSliceABValue.Parser, new[]{ "MarketIgnoreSlice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MarketIgnoreConf), global::fat.rawdata.MarketIgnoreConf.Parser, new[]{ "MarketIgnoreSlice", "MarketIgnoreSliceAB", "MarketIgnoreSliceABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="MarketIgnore",table="MarketIgnoreSlice",table_wrapper="MarketIgnoreConf",map="false",map_key_type="",data="MarketIgnoreConf")
  /// annotation@ab(table_ab="MarketIgnoreSliceAB",table_ab_patch="MarketIgnoreSliceABPatch",table_ab_value="MarketIgnoreSliceABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// </summary>
  public sealed partial class MarketIgnore : pb::IMessage<MarketIgnore>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketIgnore> _parser = new pb::MessageParser<MarketIgnore>(() => new MarketIgnore());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketIgnore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MarketIgnoreConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIgnore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIgnore(MarketIgnore other) : this() {
      orderType_ = other.orderType_;
      slotId_ = other.slotId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIgnore Clone() {
      return new MarketIgnore(this);
    }

    /// <summary>Field number for the "orderType" field.</summary>
    public const int OrderTypeFieldNumber = 1;
    private int orderType_;
    /// <summary>
    /// 槽位所属订单类型
    /// 0 = common
    /// 1 = detector
    /// 2 = randomer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "slotId" field.</summary>
    public const int SlotIdFieldNumber = 2;
    private int slotId_;
    /// <summary>
    /// 订单槽位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotId {
      get { return slotId_; }
      set {
        slotId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketIgnore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketIgnore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderType != other.OrderType) return false;
      if (SlotId != other.SlotId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderType != 0) hash ^= OrderType.GetHashCode();
      if (SlotId != 0) hash ^= SlotId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OrderType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OrderType);
      }
      if (SlotId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SlotId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OrderType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OrderType);
      }
      if (SlotId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SlotId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderType);
      }
      if (SlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketIgnore other) {
      if (other == null) {
        return;
      }
      if (other.OrderType != 0) {
        OrderType = other.OrderType;
      }
      if (other.SlotId != 0) {
        SlotId = other.SlotId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OrderType = input.ReadInt32();
            break;
          }
          case 16: {
            SlotId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OrderType = input.ReadInt32();
            break;
          }
          case 16: {
            SlotId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MarketIgnoreSliceABValue : pb::IMessage<MarketIgnoreSliceABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketIgnoreSliceABValue> _parser = new pb::MessageParser<MarketIgnoreSliceABValue>(() => new MarketIgnoreSliceABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketIgnoreSliceABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MarketIgnoreConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIgnoreSliceABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIgnoreSliceABValue(MarketIgnoreSliceABValue other) : this() {
      marketIgnoreSlice_ = other.marketIgnoreSlice_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIgnoreSliceABValue Clone() {
      return new MarketIgnoreSliceABValue(this);
    }

    /// <summary>Field number for the "MarketIgnoreSlice" field.</summary>
    public const int MarketIgnoreSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.MarketIgnore> _repeated_marketIgnoreSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.MarketIgnore.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.MarketIgnore> marketIgnoreSlice_ = new pbc::RepeatedField<global::fat.rawdata.MarketIgnore>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.MarketIgnore> MarketIgnoreSlice {
      get { return marketIgnoreSlice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketIgnoreSliceABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketIgnoreSliceABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!marketIgnoreSlice_.Equals(other.marketIgnoreSlice_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= marketIgnoreSlice_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      marketIgnoreSlice_.WriteTo(output, _repeated_marketIgnoreSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      marketIgnoreSlice_.WriteTo(ref output, _repeated_marketIgnoreSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += marketIgnoreSlice_.CalculateSize(_repeated_marketIgnoreSlice_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketIgnoreSliceABValue other) {
      if (other == null) {
        return;
      }
      marketIgnoreSlice_.Add(other.marketIgnoreSlice_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            marketIgnoreSlice_.AddEntriesFrom(input, _repeated_marketIgnoreSlice_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            marketIgnoreSlice_.AddEntriesFrom(ref input, _repeated_marketIgnoreSlice_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MarketIgnoreConf : pb::IMessage<MarketIgnoreConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarketIgnoreConf> _parser = new pb::MessageParser<MarketIgnoreConf>(() => new MarketIgnoreConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketIgnoreConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MarketIgnoreConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIgnoreConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIgnoreConf(MarketIgnoreConf other) : this() {
      marketIgnoreSlice_ = other.marketIgnoreSlice_.Clone();
      marketIgnoreSliceAB_ = other.marketIgnoreSliceAB_.Clone();
      marketIgnoreSliceABPatch_ = other.marketIgnoreSliceABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketIgnoreConf Clone() {
      return new MarketIgnoreConf(this);
    }

    /// <summary>Field number for the "MarketIgnoreSlice" field.</summary>
    public const int MarketIgnoreSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.MarketIgnore> _repeated_marketIgnoreSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.MarketIgnore.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.MarketIgnore> marketIgnoreSlice_ = new pbc::RepeatedField<global::fat.rawdata.MarketIgnore>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.MarketIgnore> MarketIgnoreSlice {
      get { return marketIgnoreSlice_; }
    }

    /// <summary>Field number for the "MarketIgnoreSliceAB" field.</summary>
    public const int MarketIgnoreSliceABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.MarketIgnoreSliceABValue>.Codec _map_marketIgnoreSliceAB_codec
        = new pbc::MapField<string, global::fat.rawdata.MarketIgnoreSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MarketIgnoreSliceABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.MarketIgnoreSliceABValue> marketIgnoreSliceAB_ = new pbc::MapField<string, global::fat.rawdata.MarketIgnoreSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MarketIgnoreSliceABValue> MarketIgnoreSliceAB {
      get { return marketIgnoreSliceAB_; }
    }

    /// <summary>Field number for the "MarketIgnoreSliceABPatch" field.</summary>
    public const int MarketIgnoreSliceABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.MarketIgnoreSliceABValue>.Codec _map_marketIgnoreSliceABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.MarketIgnoreSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MarketIgnoreSliceABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.MarketIgnoreSliceABValue> marketIgnoreSliceABPatch_ = new pbc::MapField<string, global::fat.rawdata.MarketIgnoreSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MarketIgnoreSliceABValue> MarketIgnoreSliceABPatch {
      get { return marketIgnoreSliceABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketIgnoreConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketIgnoreConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!marketIgnoreSlice_.Equals(other.marketIgnoreSlice_)) return false;
      if (!MarketIgnoreSliceAB.Equals(other.MarketIgnoreSliceAB)) return false;
      if (!MarketIgnoreSliceABPatch.Equals(other.MarketIgnoreSliceABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= marketIgnoreSlice_.GetHashCode();
      hash ^= MarketIgnoreSliceAB.GetHashCode();
      hash ^= MarketIgnoreSliceABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      marketIgnoreSlice_.WriteTo(output, _repeated_marketIgnoreSlice_codec);
      marketIgnoreSliceAB_.WriteTo(output, _map_marketIgnoreSliceAB_codec);
      marketIgnoreSliceABPatch_.WriteTo(output, _map_marketIgnoreSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      marketIgnoreSlice_.WriteTo(ref output, _repeated_marketIgnoreSlice_codec);
      marketIgnoreSliceAB_.WriteTo(ref output, _map_marketIgnoreSliceAB_codec);
      marketIgnoreSliceABPatch_.WriteTo(ref output, _map_marketIgnoreSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += marketIgnoreSlice_.CalculateSize(_repeated_marketIgnoreSlice_codec);
      size += marketIgnoreSliceAB_.CalculateSize(_map_marketIgnoreSliceAB_codec);
      size += marketIgnoreSliceABPatch_.CalculateSize(_map_marketIgnoreSliceABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketIgnoreConf other) {
      if (other == null) {
        return;
      }
      marketIgnoreSlice_.Add(other.marketIgnoreSlice_);
      marketIgnoreSliceAB_.Add(other.marketIgnoreSliceAB_);
      marketIgnoreSliceABPatch_.Add(other.marketIgnoreSliceABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            marketIgnoreSlice_.AddEntriesFrom(input, _repeated_marketIgnoreSlice_codec);
            break;
          }
          case 18: {
            marketIgnoreSliceAB_.AddEntriesFrom(input, _map_marketIgnoreSliceAB_codec);
            break;
          }
          case 26: {
            marketIgnoreSliceABPatch_.AddEntriesFrom(input, _map_marketIgnoreSliceABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            marketIgnoreSlice_.AddEntriesFrom(ref input, _repeated_marketIgnoreSlice_codec);
            break;
          }
          case 18: {
            marketIgnoreSliceAB_.AddEntriesFrom(ref input, _map_marketIgnoreSliceAB_codec);
            break;
          }
          case 26: {
            marketIgnoreSliceABPatch_.AddEntriesFrom(ref input, _map_marketIgnoreSliceABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
