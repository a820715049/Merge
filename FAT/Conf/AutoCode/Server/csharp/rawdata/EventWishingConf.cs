// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventWishingConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventWishingConf.proto</summary>
  public static partial class EventWishingConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventWishingConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventWishingConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5yYXdkYXRhL0V2ZW50V2lzaGluZ0NvbmYucHJvdG8SB3Jhd2RhdGEi/wEK",
            "DEV2ZW50V2lzaGluZxIKCgJpZBgBIAEoBRIQCghkZWFkTGluZRgCIAEoBRIV",
            "Cg1kZWZhdWx0T3V0cHV0GAMgASgFEhEKCWRpZmZSYW5nZRgEIAMoBRISCgpl",
            "dmVudFRoZW1lGAggASgFEhEKCWV2ZW50VGltZRgJIAEoBRISCgpvcmRlclRo",
            "ZW1lGAUgASgJEjkKCnJhbmRvbWVySWQYBiADKAsyJS5yYXdkYXRhLkV2ZW50",
            "V2lzaGluZy5SYW5kb21lcklkRW50cnkaMQoPUmFuZG9tZXJJZEVudHJ5EgsK",
            "A2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEitgEKFkV2ZW50V2lzaGlu",
            "Z01hcEFCVmFsdWUSTQoPRXZlbnRXaXNoaW5nTWFwGAEgAygLMjQucmF3ZGF0",
            "YS5FdmVudFdpc2hpbmdNYXBBQlZhbHVlLkV2ZW50V2lzaGluZ01hcEVudHJ5",
            "Gk0KFEV2ZW50V2lzaGluZ01hcEVudHJ5EgsKA2tleRgBIAEoBRIkCgV2YWx1",
            "ZRgCIAEoCzIVLnJhd2RhdGEuRXZlbnRXaXNoaW5nOgI4ASKJBAoQRXZlbnRX",
            "aXNoaW5nQ29uZhJHCg9FdmVudFdpc2hpbmdNYXAYASADKAsyLi5yYXdkYXRh",
            "LkV2ZW50V2lzaGluZ0NvbmYuRXZlbnRXaXNoaW5nTWFwRW50cnkSSwoRRXZl",
            "bnRXaXNoaW5nTWFwQUIYAiADKAsyMC5yYXdkYXRhLkV2ZW50V2lzaGluZ0Nv",
            "bmYuRXZlbnRXaXNoaW5nTWFwQUJFbnRyeRJVChZFdmVudFdpc2hpbmdNYXBB",
            "QlBhdGNoGAMgAygLMjUucmF3ZGF0YS5FdmVudFdpc2hpbmdDb25mLkV2ZW50",
            "V2lzaGluZ01hcEFCUGF0Y2hFbnRyeRpNChRFdmVudFdpc2hpbmdNYXBFbnRy",
            "eRILCgNrZXkYASABKAUSJAoFdmFsdWUYAiABKAsyFS5yYXdkYXRhLkV2ZW50",
            "V2lzaGluZzoCOAEaWQoWRXZlbnRXaXNoaW5nTWFwQUJFbnRyeRILCgNrZXkY",
            "ASABKAkSLgoFdmFsdWUYAiABKAsyHy5yYXdkYXRhLkV2ZW50V2lzaGluZ01h",
            "cEFCVmFsdWU6AjgBGl4KG0V2ZW50V2lzaGluZ01hcEFCUGF0Y2hFbnRyeRIL",
            "CgNrZXkYASABKAkSLgoFdmFsdWUYAiABKAsyHy5yYXdkYXRhLkV2ZW50V2lz",
            "aGluZ01hcEFCVmFsdWU6AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9j",
            "b25mL2dlbi9nb2xhbmcvcmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventWishing), global::fat.rawdata.EventWishing.Parser, new[]{ "Id", "DeadLine", "DefaultOutput", "DiffRange", "EventTheme", "EventTime", "OrderTheme", "RandomerId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventWishingMapABValue), global::fat.rawdata.EventWishingMapABValue.Parser, new[]{ "EventWishingMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventWishingConf), global::fat.rawdata.EventWishingConf.Parser, new[]{ "EventWishingMap", "EventWishingMapAB", "EventWishingMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventWishing",table="EventWishingMap",table_wrapper="EventWishingConf",map="true",map_key_type="int32",data="EventWishingConf")
  /// annotation@ab(table_ab="EventWishingMapAB",table_ab_patch="EventWishingMapABPatch",table_ab_value="EventWishingMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventWishing(id="id")
  /// </summary>
  public sealed partial class EventWishing : pb::IMessage<EventWishing>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventWishing> _parser = new pb::MessageParser<EventWishing>(() => new EventWishing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventWishing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventWishingConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishing(EventWishing other) : this() {
      id_ = other.id_;
      deadLine_ = other.deadLine_;
      defaultOutput_ = other.defaultOutput_;
      diffRange_ = other.diffRange_.Clone();
      eventTheme_ = other.eventTheme_;
      eventTime_ = other.eventTime_;
      orderTheme_ = other.orderTheme_;
      randomerId_ = other.randomerId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishing Clone() {
      return new EventWishing(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动模版
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "deadLine" field.</summary>
    public const int DeadLineFieldNumber = 2;
    private int deadLine_;
    /// <summary>
    /// 提交倒计时(s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeadLine {
      get { return deadLine_; }
      set {
        deadLine_ = value;
      }
    }

    /// <summary>Field number for the "defaultOutput" field.</summary>
    public const int DefaultOutputFieldNumber = 3;
    private int defaultOutput_;
    /// <summary>
    /// 缺省产出
    /// (无法产出奖励棋子时产出的道具id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultOutput {
      get { return defaultOutput_; }
      set {
        defaultOutput_ = value;
      }
    }

    /// <summary>Field number for the "diffRange" field.</summary>
    public const int DiffRangeFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_diffRange_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> diffRange_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 奖励难度区间
    /// 百分比区间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DiffRange {
      get { return diffRange_; }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 8;
    private int eventTheme_;
    /// <summary>
    /// 活动主界面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventTime" field.</summary>
    public const int EventTimeFieldNumber = 9;
    private int eventTime_;
    /// <summary>
    /// 活动时间设置(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTime {
      get { return eventTime_; }
      set {
        eventTime_ = value;
      }
    }

    /// <summary>Field number for the "orderTheme" field.</summary>
    public const int OrderThemeFieldNumber = 5;
    private string orderTheme_ = "";
    /// <summary>
    /// 订单面板资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderTheme {
      get { return orderTheme_; }
      set {
        orderTheme_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "randomerId" field.</summary>
    public const int RandomerIdFieldNumber = 6;
    private static readonly pbc::MapField<int, int>.Codec _map_randomerId_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 50);
    private readonly pbc::MapField<int, int> randomerId_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 对应随机任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> RandomerId {
      get { return randomerId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventWishing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventWishing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DeadLine != other.DeadLine) return false;
      if (DefaultOutput != other.DefaultOutput) return false;
      if(!diffRange_.Equals(other.diffRange_)) return false;
      if (EventTheme != other.EventTheme) return false;
      if (EventTime != other.EventTime) return false;
      if (OrderTheme != other.OrderTheme) return false;
      if (!RandomerId.Equals(other.RandomerId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (DeadLine != 0) hash ^= DeadLine.GetHashCode();
      if (DefaultOutput != 0) hash ^= DefaultOutput.GetHashCode();
      hash ^= diffRange_.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (EventTime != 0) hash ^= EventTime.GetHashCode();
      if (OrderTheme.Length != 0) hash ^= OrderTheme.GetHashCode();
      hash ^= RandomerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (DeadLine != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DeadLine);
      }
      if (DefaultOutput != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DefaultOutput);
      }
      diffRange_.WriteTo(output, _repeated_diffRange_codec);
      if (OrderTheme.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderTheme);
      }
      randomerId_.WriteTo(output, _map_randomerId_codec);
      if (EventTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EventTheme);
      }
      if (EventTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EventTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (DeadLine != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DeadLine);
      }
      if (DefaultOutput != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DefaultOutput);
      }
      diffRange_.WriteTo(ref output, _repeated_diffRange_codec);
      if (OrderTheme.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderTheme);
      }
      randomerId_.WriteTo(ref output, _map_randomerId_codec);
      if (EventTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EventTheme);
      }
      if (EventTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EventTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (DeadLine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeadLine);
      }
      if (DefaultOutput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultOutput);
      }
      size += diffRange_.CalculateSize(_repeated_diffRange_codec);
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (EventTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTime);
      }
      if (OrderTheme.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderTheme);
      }
      size += randomerId_.CalculateSize(_map_randomerId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventWishing other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.DeadLine != 0) {
        DeadLine = other.DeadLine;
      }
      if (other.DefaultOutput != 0) {
        DefaultOutput = other.DefaultOutput;
      }
      diffRange_.Add(other.diffRange_);
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.EventTime != 0) {
        EventTime = other.EventTime;
      }
      if (other.OrderTheme.Length != 0) {
        OrderTheme = other.OrderTheme;
      }
      randomerId_.Add(other.randomerId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            DeadLine = input.ReadInt32();
            break;
          }
          case 24: {
            DefaultOutput = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            diffRange_.AddEntriesFrom(input, _repeated_diffRange_codec);
            break;
          }
          case 42: {
            OrderTheme = input.ReadString();
            break;
          }
          case 50: {
            randomerId_.AddEntriesFrom(input, _map_randomerId_codec);
            break;
          }
          case 64: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 72: {
            EventTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            DeadLine = input.ReadInt32();
            break;
          }
          case 24: {
            DefaultOutput = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            diffRange_.AddEntriesFrom(ref input, _repeated_diffRange_codec);
            break;
          }
          case 42: {
            OrderTheme = input.ReadString();
            break;
          }
          case 50: {
            randomerId_.AddEntriesFrom(ref input, _map_randomerId_codec);
            break;
          }
          case 64: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 72: {
            EventTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventWishingMapABValue : pb::IMessage<EventWishingMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventWishingMapABValue> _parser = new pb::MessageParser<EventWishingMapABValue>(() => new EventWishingMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventWishingMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventWishingConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishingMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishingMapABValue(EventWishingMapABValue other) : this() {
      eventWishingMap_ = other.eventWishingMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishingMapABValue Clone() {
      return new EventWishingMapABValue(this);
    }

    /// <summary>Field number for the "EventWishingMap" field.</summary>
    public const int EventWishingMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventWishing>.Codec _map_eventWishingMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventWishing>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventWishing.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventWishing> eventWishingMap_ = new pbc::MapField<int, global::fat.rawdata.EventWishing>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventWishing> EventWishingMap {
      get { return eventWishingMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventWishingMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventWishingMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventWishingMap.Equals(other.EventWishingMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventWishingMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventWishingMap_.WriteTo(output, _map_eventWishingMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventWishingMap_.WriteTo(ref output, _map_eventWishingMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventWishingMap_.CalculateSize(_map_eventWishingMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventWishingMapABValue other) {
      if (other == null) {
        return;
      }
      eventWishingMap_.Add(other.eventWishingMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventWishingMap_.AddEntriesFrom(input, _map_eventWishingMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventWishingMap_.AddEntriesFrom(ref input, _map_eventWishingMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventWishingConf : pb::IMessage<EventWishingConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventWishingConf> _parser = new pb::MessageParser<EventWishingConf>(() => new EventWishingConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventWishingConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventWishingConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishingConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishingConf(EventWishingConf other) : this() {
      eventWishingMap_ = other.eventWishingMap_.Clone();
      eventWishingMapAB_ = other.eventWishingMapAB_.Clone();
      eventWishingMapABPatch_ = other.eventWishingMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventWishingConf Clone() {
      return new EventWishingConf(this);
    }

    /// <summary>Field number for the "EventWishingMap" field.</summary>
    public const int EventWishingMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventWishing>.Codec _map_eventWishingMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventWishing>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventWishing.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventWishing> eventWishingMap_ = new pbc::MapField<int, global::fat.rawdata.EventWishing>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventWishing> EventWishingMap {
      get { return eventWishingMap_; }
    }

    /// <summary>Field number for the "EventWishingMapAB" field.</summary>
    public const int EventWishingMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventWishingMapABValue>.Codec _map_eventWishingMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventWishingMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventWishingMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventWishingMapABValue> eventWishingMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventWishingMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventWishingMapABValue> EventWishingMapAB {
      get { return eventWishingMapAB_; }
    }

    /// <summary>Field number for the "EventWishingMapABPatch" field.</summary>
    public const int EventWishingMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventWishingMapABValue>.Codec _map_eventWishingMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventWishingMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventWishingMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventWishingMapABValue> eventWishingMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventWishingMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventWishingMapABValue> EventWishingMapABPatch {
      get { return eventWishingMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventWishingConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventWishingConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventWishingMap.Equals(other.EventWishingMap)) return false;
      if (!EventWishingMapAB.Equals(other.EventWishingMapAB)) return false;
      if (!EventWishingMapABPatch.Equals(other.EventWishingMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventWishingMap.GetHashCode();
      hash ^= EventWishingMapAB.GetHashCode();
      hash ^= EventWishingMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventWishingMap_.WriteTo(output, _map_eventWishingMap_codec);
      eventWishingMapAB_.WriteTo(output, _map_eventWishingMapAB_codec);
      eventWishingMapABPatch_.WriteTo(output, _map_eventWishingMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventWishingMap_.WriteTo(ref output, _map_eventWishingMap_codec);
      eventWishingMapAB_.WriteTo(ref output, _map_eventWishingMapAB_codec);
      eventWishingMapABPatch_.WriteTo(ref output, _map_eventWishingMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventWishingMap_.CalculateSize(_map_eventWishingMap_codec);
      size += eventWishingMapAB_.CalculateSize(_map_eventWishingMapAB_codec);
      size += eventWishingMapABPatch_.CalculateSize(_map_eventWishingMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventWishingConf other) {
      if (other == null) {
        return;
      }
      eventWishingMap_.Add(other.eventWishingMap_);
      eventWishingMapAB_.Add(other.eventWishingMapAB_);
      eventWishingMapABPatch_.Add(other.eventWishingMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventWishingMap_.AddEntriesFrom(input, _map_eventWishingMap_codec);
            break;
          }
          case 18: {
            eventWishingMapAB_.AddEntriesFrom(input, _map_eventWishingMapAB_codec);
            break;
          }
          case 26: {
            eventWishingMapABPatch_.AddEntriesFrom(input, _map_eventWishingMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventWishingMap_.AddEntriesFrom(ref input, _map_eventWishingMap_codec);
            break;
          }
          case 18: {
            eventWishingMapAB_.AddEntriesFrom(ref input, _map_eventWishingMapAB_codec);
            break;
          }
          case 26: {
            eventWishingMapABPatch_.AddEntriesFrom(ref input, _map_eventWishingMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
