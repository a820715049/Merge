// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventBpConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventBpConf.proto</summary>
  public static partial class EventBpConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventBpConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventBpConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlyYXdkYXRhL0V2ZW50QnBDb25mLnByb3RvEgdyYXdkYXRhIrYCCgdFdmVu",
            "dEJwEgoKAmlkGAEgASgFEhMKC2J1eVBvcFRoZW1lGAIgASgFEhgKEGJ1eVN1",
            "Y2Nlc3NUaGVtZTEYDiABKAUSGAoQYnV5U3VjY2Vzc1RoZW1lMhgPIAEoBRIQ",
            "CghidXlUaGVtZRgDIAEoBRIRCglidXlUaGVtZTIYBCABKAUSFQoNY2lyY2xl",
            "Q2hlc3RJZBgFIAEoBRIUCgxjb25maXJtVGhlbWUYECABKAUSEAoIZW5kVGhl",
            "bWUYESABKAUSDwoHZ3JhZGVJZBgJIAEoBRIRCgltYWluVGhlbWUYCiABKAUS",
            "DwoHc2NvcmVJZBgLIAEoBRISCgpzdGFydFRoZW1lGAwgASgFEhYKDnRhc2tB",
            "c3NldFRoZW1lGBIgASgFEhEKCXRhc2tUaGVtZRgNIAEoBSKYAQoRRXZlbnRC",
            "cE1hcEFCVmFsdWUSPgoKRXZlbnRCcE1hcBgBIAMoCzIqLnJhd2RhdGEuRXZl",
            "bnRCcE1hcEFCVmFsdWUuRXZlbnRCcE1hcEVudHJ5GkMKD0V2ZW50QnBNYXBF",
            "bnRyeRILCgNrZXkYASABKAUSHwoFdmFsdWUYAiABKAsyEC5yYXdkYXRhLkV2",
            "ZW50QnA6AjgBIrkDCgtFdmVudEJwQ29uZhI4CgpFdmVudEJwTWFwGAEgAygL",
            "MiQucmF3ZGF0YS5FdmVudEJwQ29uZi5FdmVudEJwTWFwRW50cnkSPAoMRXZl",
            "bnRCcE1hcEFCGAIgAygLMiYucmF3ZGF0YS5FdmVudEJwQ29uZi5FdmVudEJw",
            "TWFwQUJFbnRyeRJGChFFdmVudEJwTWFwQUJQYXRjaBgDIAMoCzIrLnJhd2Rh",
            "dGEuRXZlbnRCcENvbmYuRXZlbnRCcE1hcEFCUGF0Y2hFbnRyeRpDCg9FdmVu",
            "dEJwTWFwRW50cnkSCwoDa2V5GAEgASgFEh8KBXZhbHVlGAIgASgLMhAucmF3",
            "ZGF0YS5FdmVudEJwOgI4ARpPChFFdmVudEJwTWFwQUJFbnRyeRILCgNrZXkY",
            "ASABKAkSKQoFdmFsdWUYAiABKAsyGi5yYXdkYXRhLkV2ZW50QnBNYXBBQlZh",
            "bHVlOgI4ARpUChZFdmVudEJwTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEo",
            "CRIpCgV2YWx1ZRgCIAEoCzIaLnJhd2RhdGEuRXZlbnRCcE1hcEFCVmFsdWU6",
            "AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcv",
            "cmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventBp), global::fat.rawdata.EventBp.Parser, new[]{ "Id", "BuyPopTheme", "BuySuccessTheme1", "BuySuccessTheme2", "BuyTheme", "BuyTheme2", "CircleChestId", "ConfirmTheme", "EndTheme", "GradeId", "MainTheme", "ScoreId", "StartTheme", "TaskAssetTheme", "TaskTheme" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventBpMapABValue), global::fat.rawdata.EventBpMapABValue.Parser, new[]{ "EventBpMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventBpConf), global::fat.rawdata.EventBpConf.Parser, new[]{ "EventBpMap", "EventBpMapAB", "EventBpMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventBp",table="EventBpMap",table_wrapper="EventBpConf",map="true",map_key_type="int32",data="EventBpConf")
  /// annotation@ab(table_ab="EventBpMapAB",table_ab_patch="EventBpMapABPatch",table_ab_value="EventBpMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventBp(id="id")
  /// </summary>
  public sealed partial class EventBp : pb::IMessage<EventBp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventBp> _parser = new pb::MessageParser<EventBp>(() => new EventBp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventBp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventBpConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventBp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventBp(EventBp other) : this() {
      id_ = other.id_;
      buyPopTheme_ = other.buyPopTheme_;
      buySuccessTheme1_ = other.buySuccessTheme1_;
      buySuccessTheme2_ = other.buySuccessTheme2_;
      buyTheme_ = other.buyTheme_;
      buyTheme2_ = other.buyTheme2_;
      circleChestId_ = other.circleChestId_;
      confirmTheme_ = other.confirmTheme_;
      endTheme_ = other.endTheme_;
      gradeId_ = other.gradeId_;
      mainTheme_ = other.mainTheme_;
      scoreId_ = other.scoreId_;
      startTheme_ = other.startTheme_;
      taskAssetTheme_ = other.taskAssetTheme_;
      taskTheme_ = other.taskTheme_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventBp Clone() {
      return new EventBp(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 通行证id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "buyPopTheme" field.</summary>
    public const int BuyPopThemeFieldNumber = 2;
    private int buyPopTheme_;
    /// <summary>
    /// 购买强弹弹窗
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyPopTheme {
      get { return buyPopTheme_; }
      set {
        buyPopTheme_ = value;
      }
    }

    /// <summary>Field number for the "buySuccessTheme1" field.</summary>
    public const int BuySuccessTheme1FieldNumber = 14;
    private int buySuccessTheme1_;
    /// <summary>
    /// 购买1成功
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuySuccessTheme1 {
      get { return buySuccessTheme1_; }
      set {
        buySuccessTheme1_ = value;
      }
    }

    /// <summary>Field number for the "buySuccessTheme2" field.</summary>
    public const int BuySuccessTheme2FieldNumber = 15;
    private int buySuccessTheme2_;
    /// <summary>
    /// 购买2成功
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuySuccessTheme2 {
      get { return buySuccessTheme2_; }
      set {
        buySuccessTheme2_ = value;
      }
    }

    /// <summary>Field number for the "buyTheme" field.</summary>
    public const int BuyThemeFieldNumber = 3;
    private int buyTheme_;
    /// <summary>
    /// 购买界面1
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyTheme {
      get { return buyTheme_; }
      set {
        buyTheme_ = value;
      }
    }

    /// <summary>Field number for the "buyTheme2" field.</summary>
    public const int BuyTheme2FieldNumber = 4;
    private int buyTheme2_;
    /// <summary>
    /// 购买界面2-升级弹板
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyTheme2 {
      get { return buyTheme2_; }
      set {
        buyTheme2_ = value;
      }
    }

    /// <summary>Field number for the "circleChestId" field.</summary>
    public const int CircleChestIdFieldNumber = 5;
    private int circleChestId_;
    /// <summary>
    /// 循环宝箱ID
    /// （ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CircleChestId {
      get { return circleChestId_; }
      set {
        circleChestId_ = value;
      }
    }

    /// <summary>Field number for the "confirmTheme" field.</summary>
    public const int ConfirmThemeFieldNumber = 16;
    private int confirmTheme_;
    /// <summary>
    /// 二次确认弹窗
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfirmTheme {
      get { return confirmTheme_; }
      set {
        confirmTheme_ = value;
      }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 17;
    private int endTheme_;
    /// <summary>
    /// 结束购买
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "gradeId" field.</summary>
    public const int GradeIdFieldNumber = 9;
    private int gradeId_;
    /// <summary>
    /// 分层后id
    /// (映射BpDetail.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeId {
      get { return gradeId_; }
      set {
        gradeId_ = value;
      }
    }

    /// <summary>Field number for the "mainTheme" field.</summary>
    public const int MainThemeFieldNumber = 10;
    private int mainTheme_;
    /// <summary>
    /// 活动主界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainTheme {
      get { return mainTheme_; }
      set {
        mainTheme_ = value;
      }
    }

    /// <summary>Field number for the "scoreId" field.</summary>
    public const int ScoreIdFieldNumber = 11;
    private int scoreId_;
    /// <summary>
    /// 积分ID
    /// （ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScoreId {
      get { return scoreId_; }
      set {
        scoreId_ = value;
      }
    }

    /// <summary>Field number for the "startTheme" field.</summary>
    public const int StartThemeFieldNumber = 12;
    private int startTheme_;
    /// <summary>
    /// 开启弹板
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTheme {
      get { return startTheme_; }
      set {
        startTheme_ = value;
      }
    }

    /// <summary>Field number for the "taskAssetTheme" field.</summary>
    public const int TaskAssetThemeFieldNumber = 18;
    private int taskAssetTheme_;
    /// <summary>
    /// 任务资源主题
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskAssetTheme {
      get { return taskAssetTheme_; }
      set {
        taskAssetTheme_ = value;
      }
    }

    /// <summary>Field number for the "taskTheme" field.</summary>
    public const int TaskThemeFieldNumber = 13;
    private int taskTheme_;
    /// <summary>
    /// 任务弹板
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskTheme {
      get { return taskTheme_; }
      set {
        taskTheme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventBp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventBp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BuyPopTheme != other.BuyPopTheme) return false;
      if (BuySuccessTheme1 != other.BuySuccessTheme1) return false;
      if (BuySuccessTheme2 != other.BuySuccessTheme2) return false;
      if (BuyTheme != other.BuyTheme) return false;
      if (BuyTheme2 != other.BuyTheme2) return false;
      if (CircleChestId != other.CircleChestId) return false;
      if (ConfirmTheme != other.ConfirmTheme) return false;
      if (EndTheme != other.EndTheme) return false;
      if (GradeId != other.GradeId) return false;
      if (MainTheme != other.MainTheme) return false;
      if (ScoreId != other.ScoreId) return false;
      if (StartTheme != other.StartTheme) return false;
      if (TaskAssetTheme != other.TaskAssetTheme) return false;
      if (TaskTheme != other.TaskTheme) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BuyPopTheme != 0) hash ^= BuyPopTheme.GetHashCode();
      if (BuySuccessTheme1 != 0) hash ^= BuySuccessTheme1.GetHashCode();
      if (BuySuccessTheme2 != 0) hash ^= BuySuccessTheme2.GetHashCode();
      if (BuyTheme != 0) hash ^= BuyTheme.GetHashCode();
      if (BuyTheme2 != 0) hash ^= BuyTheme2.GetHashCode();
      if (CircleChestId != 0) hash ^= CircleChestId.GetHashCode();
      if (ConfirmTheme != 0) hash ^= ConfirmTheme.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      if (GradeId != 0) hash ^= GradeId.GetHashCode();
      if (MainTheme != 0) hash ^= MainTheme.GetHashCode();
      if (ScoreId != 0) hash ^= ScoreId.GetHashCode();
      if (StartTheme != 0) hash ^= StartTheme.GetHashCode();
      if (TaskAssetTheme != 0) hash ^= TaskAssetTheme.GetHashCode();
      if (TaskTheme != 0) hash ^= TaskTheme.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BuyPopTheme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BuyPopTheme);
      }
      if (BuyTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuyTheme);
      }
      if (BuyTheme2 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BuyTheme2);
      }
      if (CircleChestId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CircleChestId);
      }
      if (GradeId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GradeId);
      }
      if (MainTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MainTheme);
      }
      if (ScoreId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ScoreId);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(StartTheme);
      }
      if (TaskTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TaskTheme);
      }
      if (BuySuccessTheme1 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(BuySuccessTheme1);
      }
      if (BuySuccessTheme2 != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(BuySuccessTheme2);
      }
      if (ConfirmTheme != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ConfirmTheme);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(EndTheme);
      }
      if (TaskAssetTheme != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(TaskAssetTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BuyPopTheme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BuyPopTheme);
      }
      if (BuyTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuyTheme);
      }
      if (BuyTheme2 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BuyTheme2);
      }
      if (CircleChestId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CircleChestId);
      }
      if (GradeId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GradeId);
      }
      if (MainTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MainTheme);
      }
      if (ScoreId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ScoreId);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(StartTheme);
      }
      if (TaskTheme != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TaskTheme);
      }
      if (BuySuccessTheme1 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(BuySuccessTheme1);
      }
      if (BuySuccessTheme2 != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(BuySuccessTheme2);
      }
      if (ConfirmTheme != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ConfirmTheme);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(EndTheme);
      }
      if (TaskAssetTheme != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(TaskAssetTheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BuyPopTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyPopTheme);
      }
      if (BuySuccessTheme1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuySuccessTheme1);
      }
      if (BuySuccessTheme2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuySuccessTheme2);
      }
      if (BuyTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyTheme);
      }
      if (BuyTheme2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyTheme2);
      }
      if (CircleChestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CircleChestId);
      }
      if (ConfirmTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ConfirmTheme);
      }
      if (EndTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      if (GradeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeId);
      }
      if (MainTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainTheme);
      }
      if (ScoreId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreId);
      }
      if (StartTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTheme);
      }
      if (TaskAssetTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TaskAssetTheme);
      }
      if (TaskTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskTheme);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventBp other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BuyPopTheme != 0) {
        BuyPopTheme = other.BuyPopTheme;
      }
      if (other.BuySuccessTheme1 != 0) {
        BuySuccessTheme1 = other.BuySuccessTheme1;
      }
      if (other.BuySuccessTheme2 != 0) {
        BuySuccessTheme2 = other.BuySuccessTheme2;
      }
      if (other.BuyTheme != 0) {
        BuyTheme = other.BuyTheme;
      }
      if (other.BuyTheme2 != 0) {
        BuyTheme2 = other.BuyTheme2;
      }
      if (other.CircleChestId != 0) {
        CircleChestId = other.CircleChestId;
      }
      if (other.ConfirmTheme != 0) {
        ConfirmTheme = other.ConfirmTheme;
      }
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      if (other.GradeId != 0) {
        GradeId = other.GradeId;
      }
      if (other.MainTheme != 0) {
        MainTheme = other.MainTheme;
      }
      if (other.ScoreId != 0) {
        ScoreId = other.ScoreId;
      }
      if (other.StartTheme != 0) {
        StartTheme = other.StartTheme;
      }
      if (other.TaskAssetTheme != 0) {
        TaskAssetTheme = other.TaskAssetTheme;
      }
      if (other.TaskTheme != 0) {
        TaskTheme = other.TaskTheme;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BuyPopTheme = input.ReadInt32();
            break;
          }
          case 24: {
            BuyTheme = input.ReadInt32();
            break;
          }
          case 32: {
            BuyTheme2 = input.ReadInt32();
            break;
          }
          case 40: {
            CircleChestId = input.ReadInt32();
            break;
          }
          case 72: {
            GradeId = input.ReadInt32();
            break;
          }
          case 80: {
            MainTheme = input.ReadInt32();
            break;
          }
          case 88: {
            ScoreId = input.ReadInt32();
            break;
          }
          case 96: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 104: {
            TaskTheme = input.ReadInt32();
            break;
          }
          case 112: {
            BuySuccessTheme1 = input.ReadInt32();
            break;
          }
          case 120: {
            BuySuccessTheme2 = input.ReadInt32();
            break;
          }
          case 128: {
            ConfirmTheme = input.ReadInt32();
            break;
          }
          case 136: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 144: {
            TaskAssetTheme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BuyPopTheme = input.ReadInt32();
            break;
          }
          case 24: {
            BuyTheme = input.ReadInt32();
            break;
          }
          case 32: {
            BuyTheme2 = input.ReadInt32();
            break;
          }
          case 40: {
            CircleChestId = input.ReadInt32();
            break;
          }
          case 72: {
            GradeId = input.ReadInt32();
            break;
          }
          case 80: {
            MainTheme = input.ReadInt32();
            break;
          }
          case 88: {
            ScoreId = input.ReadInt32();
            break;
          }
          case 96: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 104: {
            TaskTheme = input.ReadInt32();
            break;
          }
          case 112: {
            BuySuccessTheme1 = input.ReadInt32();
            break;
          }
          case 120: {
            BuySuccessTheme2 = input.ReadInt32();
            break;
          }
          case 128: {
            ConfirmTheme = input.ReadInt32();
            break;
          }
          case 136: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 144: {
            TaskAssetTheme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventBpMapABValue : pb::IMessage<EventBpMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventBpMapABValue> _parser = new pb::MessageParser<EventBpMapABValue>(() => new EventBpMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventBpMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventBpConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventBpMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventBpMapABValue(EventBpMapABValue other) : this() {
      eventBpMap_ = other.eventBpMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventBpMapABValue Clone() {
      return new EventBpMapABValue(this);
    }

    /// <summary>Field number for the "EventBpMap" field.</summary>
    public const int EventBpMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventBp>.Codec _map_eventBpMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventBp>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventBp.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventBp> eventBpMap_ = new pbc::MapField<int, global::fat.rawdata.EventBp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventBp> EventBpMap {
      get { return eventBpMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventBpMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventBpMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventBpMap.Equals(other.EventBpMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventBpMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventBpMap_.WriteTo(output, _map_eventBpMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventBpMap_.WriteTo(ref output, _map_eventBpMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventBpMap_.CalculateSize(_map_eventBpMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventBpMapABValue other) {
      if (other == null) {
        return;
      }
      eventBpMap_.Add(other.eventBpMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventBpMap_.AddEntriesFrom(input, _map_eventBpMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventBpMap_.AddEntriesFrom(ref input, _map_eventBpMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventBpConf : pb::IMessage<EventBpConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventBpConf> _parser = new pb::MessageParser<EventBpConf>(() => new EventBpConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventBpConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventBpConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventBpConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventBpConf(EventBpConf other) : this() {
      eventBpMap_ = other.eventBpMap_.Clone();
      eventBpMapAB_ = other.eventBpMapAB_.Clone();
      eventBpMapABPatch_ = other.eventBpMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventBpConf Clone() {
      return new EventBpConf(this);
    }

    /// <summary>Field number for the "EventBpMap" field.</summary>
    public const int EventBpMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventBp>.Codec _map_eventBpMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventBp>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventBp.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventBp> eventBpMap_ = new pbc::MapField<int, global::fat.rawdata.EventBp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventBp> EventBpMap {
      get { return eventBpMap_; }
    }

    /// <summary>Field number for the "EventBpMapAB" field.</summary>
    public const int EventBpMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventBpMapABValue>.Codec _map_eventBpMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventBpMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventBpMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventBpMapABValue> eventBpMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventBpMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventBpMapABValue> EventBpMapAB {
      get { return eventBpMapAB_; }
    }

    /// <summary>Field number for the "EventBpMapABPatch" field.</summary>
    public const int EventBpMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventBpMapABValue>.Codec _map_eventBpMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventBpMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventBpMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventBpMapABValue> eventBpMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventBpMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventBpMapABValue> EventBpMapABPatch {
      get { return eventBpMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventBpConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventBpConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventBpMap.Equals(other.EventBpMap)) return false;
      if (!EventBpMapAB.Equals(other.EventBpMapAB)) return false;
      if (!EventBpMapABPatch.Equals(other.EventBpMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventBpMap.GetHashCode();
      hash ^= EventBpMapAB.GetHashCode();
      hash ^= EventBpMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventBpMap_.WriteTo(output, _map_eventBpMap_codec);
      eventBpMapAB_.WriteTo(output, _map_eventBpMapAB_codec);
      eventBpMapABPatch_.WriteTo(output, _map_eventBpMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventBpMap_.WriteTo(ref output, _map_eventBpMap_codec);
      eventBpMapAB_.WriteTo(ref output, _map_eventBpMapAB_codec);
      eventBpMapABPatch_.WriteTo(ref output, _map_eventBpMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventBpMap_.CalculateSize(_map_eventBpMap_codec);
      size += eventBpMapAB_.CalculateSize(_map_eventBpMapAB_codec);
      size += eventBpMapABPatch_.CalculateSize(_map_eventBpMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventBpConf other) {
      if (other == null) {
        return;
      }
      eventBpMap_.Add(other.eventBpMap_);
      eventBpMapAB_.Add(other.eventBpMapAB_);
      eventBpMapABPatch_.Add(other.eventBpMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventBpMap_.AddEntriesFrom(input, _map_eventBpMap_codec);
            break;
          }
          case 18: {
            eventBpMapAB_.AddEntriesFrom(input, _map_eventBpMapAB_codec);
            break;
          }
          case 26: {
            eventBpMapABPatch_.AddEntriesFrom(input, _map_eventBpMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventBpMap_.AddEntriesFrom(ref input, _map_eventBpMap_codec);
            break;
          }
          case 18: {
            eventBpMapAB_.AddEntriesFrom(ref input, _map_eventBpMapAB_codec);
            break;
          }
          case 26: {
            eventBpMapABPatch_.AddEntriesFrom(ref input, _map_eventBpMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
