// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/RaceExtendRoundConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/RaceExtendRoundConf.proto</summary>
  public static partial class RaceExtendRoundConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/RaceExtendRoundConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RaceExtendRoundConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFyYXdkYXRhL1JhY2VFeHRlbmRSb3VuZENvbmYucHJvdG8SB3Jhd2RhdGEi",
            "sQEKD1JhY2VFeHRlbmRSb3VuZBIKCgJpZBgBIAEoBRIZChFtaWxlc3RvbmVC",
            "b3hDbG9zZRgCIAEoCRIYChBtaWxlc3RvbmVCb3hPcGVuGAMgASgJEhQKDG1p",
            "bGVzdG9uZVJ3ZBgEIAEoBRITCgtyYWNlR2V0R2lmdBgFIAMoBRISCgpyYWNl",
            "R2V0TnVtGAYgAygFEg8KB3JvYm90SWQYByADKAUSDQoFc2NvcmUYCCABKAUi",
            "yAEKGVJhY2VFeHRlbmRSb3VuZE1hcEFCVmFsdWUSVgoSUmFjZUV4dGVuZFJv",
            "dW5kTWFwGAEgAygLMjoucmF3ZGF0YS5SYWNlRXh0ZW5kUm91bmRNYXBBQlZh",
            "bHVlLlJhY2VFeHRlbmRSb3VuZE1hcEVudHJ5GlMKF1JhY2VFeHRlbmRSb3Vu",
            "ZE1hcEVudHJ5EgsKA2tleRgBIAEoBRInCgV2YWx1ZRgCIAEoCzIYLnJhd2Rh",
            "dGEuUmFjZUV4dGVuZFJvdW5kOgI4ASK5BAoTUmFjZUV4dGVuZFJvdW5kQ29u",
            "ZhJQChJSYWNlRXh0ZW5kUm91bmRNYXAYASADKAsyNC5yYXdkYXRhLlJhY2VF",
            "eHRlbmRSb3VuZENvbmYuUmFjZUV4dGVuZFJvdW5kTWFwRW50cnkSVAoUUmFj",
            "ZUV4dGVuZFJvdW5kTWFwQUIYAiADKAsyNi5yYXdkYXRhLlJhY2VFeHRlbmRS",
            "b3VuZENvbmYuUmFjZUV4dGVuZFJvdW5kTWFwQUJFbnRyeRJeChlSYWNlRXh0",
            "ZW5kUm91bmRNYXBBQlBhdGNoGAMgAygLMjsucmF3ZGF0YS5SYWNlRXh0ZW5k",
            "Um91bmRDb25mLlJhY2VFeHRlbmRSb3VuZE1hcEFCUGF0Y2hFbnRyeRpTChdS",
            "YWNlRXh0ZW5kUm91bmRNYXBFbnRyeRILCgNrZXkYASABKAUSJwoFdmFsdWUY",
            "AiABKAsyGC5yYXdkYXRhLlJhY2VFeHRlbmRSb3VuZDoCOAEaXwoZUmFjZUV4",
            "dGVuZFJvdW5kTWFwQUJFbnRyeRILCgNrZXkYASABKAkSMQoFdmFsdWUYAiAB",
            "KAsyIi5yYXdkYXRhLlJhY2VFeHRlbmRSb3VuZE1hcEFCVmFsdWU6AjgBGmQK",
            "HlJhY2VFeHRlbmRSb3VuZE1hcEFCUGF0Y2hFbnRyeRILCgNrZXkYASABKAkS",
            "MQoFdmFsdWUYAiABKAsyIi5yYXdkYXRhLlJhY2VFeHRlbmRSb3VuZE1hcEFC",
            "VmFsdWU6AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9n",
            "b2xhbmcvcmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.RaceExtendRound), global::fat.rawdata.RaceExtendRound.Parser, new[]{ "Id", "MilestoneBoxClose", "MilestoneBoxOpen", "MilestoneRwd", "RaceGetGift", "RaceGetNum", "RobotId", "Score" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.RaceExtendRoundMapABValue), global::fat.rawdata.RaceExtendRoundMapABValue.Parser, new[]{ "RaceExtendRoundMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.RaceExtendRoundConf), global::fat.rawdata.RaceExtendRoundConf.Parser, new[]{ "RaceExtendRoundMap", "RaceExtendRoundMapAB", "RaceExtendRoundMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="RaceExtendRound",table="RaceExtendRoundMap",table_wrapper="RaceExtendRoundConf",map="true",map_key_type="int32",data="RaceExtendRoundConf")
  /// annotation@ab(table_ab="RaceExtendRoundMapAB",table_ab_patch="RaceExtendRoundMapABPatch",table_ab_value="RaceExtendRoundMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@RaceExtendRound(id="id")
  /// </summary>
  public sealed partial class RaceExtendRound : pb::IMessage<RaceExtendRound>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RaceExtendRound> _parser = new pb::MessageParser<RaceExtendRound>(() => new RaceExtendRound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RaceExtendRound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.RaceExtendRoundConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaceExtendRound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaceExtendRound(RaceExtendRound other) : this() {
      id_ = other.id_;
      milestoneBoxClose_ = other.milestoneBoxClose_;
      milestoneBoxOpen_ = other.milestoneBoxOpen_;
      milestoneRwd_ = other.milestoneRwd_;
      raceGetGift_ = other.raceGetGift_.Clone();
      raceGetNum_ = other.raceGetNum_.Clone();
      robotId_ = other.robotId_.Clone();
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaceExtendRound Clone() {
      return new RaceExtendRound(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 回合id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "milestoneBoxClose" field.</summary>
    public const int MilestoneBoxCloseFieldNumber = 2;
    private string milestoneBoxClose_ = "";
    /// <summary>
    /// 里程碑宝箱的关闭状态图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MilestoneBoxClose {
      get { return milestoneBoxClose_; }
      set {
        milestoneBoxClose_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "milestoneBoxOpen" field.</summary>
    public const int MilestoneBoxOpenFieldNumber = 3;
    private string milestoneBoxOpen_ = "";
    /// <summary>
    /// 里程碑宝箱的打开状态图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MilestoneBoxOpen {
      get { return milestoneBoxOpen_; }
      set {
        milestoneBoxOpen_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "milestoneRwd" field.</summary>
    public const int MilestoneRwdFieldNumber = 4;
    private int milestoneRwd_;
    /// <summary>
    /// 对应RaceExtendReward.id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MilestoneRwd {
      get { return milestoneRwd_; }
      set {
        milestoneRwd_ = value;
      }
    }

    /// <summary>Field number for the "raceGetGift" field.</summary>
    public const int RaceGetGiftFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_raceGetGift_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> raceGetGift_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 对应奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RaceGetGift {
      get { return raceGetGift_; }
    }

    /// <summary>Field number for the "raceGetNum" field.</summary>
    public const int RaceGetNumFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_raceGetNum_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> raceGetNum_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 可获得名次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RaceGetNum {
      get { return raceGetNum_; }
    }

    /// <summary>Field number for the "robotId" field.</summary>
    public const int RobotIdFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_robotId_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> robotId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 机器人id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RobotId {
      get { return robotId_; }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 8;
    private int score_;
    /// <summary>
    /// 回合积分目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RaceExtendRound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RaceExtendRound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MilestoneBoxClose != other.MilestoneBoxClose) return false;
      if (MilestoneBoxOpen != other.MilestoneBoxOpen) return false;
      if (MilestoneRwd != other.MilestoneRwd) return false;
      if(!raceGetGift_.Equals(other.raceGetGift_)) return false;
      if(!raceGetNum_.Equals(other.raceGetNum_)) return false;
      if(!robotId_.Equals(other.robotId_)) return false;
      if (Score != other.Score) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (MilestoneBoxClose.Length != 0) hash ^= MilestoneBoxClose.GetHashCode();
      if (MilestoneBoxOpen.Length != 0) hash ^= MilestoneBoxOpen.GetHashCode();
      if (MilestoneRwd != 0) hash ^= MilestoneRwd.GetHashCode();
      hash ^= raceGetGift_.GetHashCode();
      hash ^= raceGetNum_.GetHashCode();
      hash ^= robotId_.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (MilestoneBoxClose.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MilestoneBoxClose);
      }
      if (MilestoneBoxOpen.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MilestoneBoxOpen);
      }
      if (MilestoneRwd != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MilestoneRwd);
      }
      raceGetGift_.WriteTo(output, _repeated_raceGetGift_codec);
      raceGetNum_.WriteTo(output, _repeated_raceGetNum_codec);
      robotId_.WriteTo(output, _repeated_robotId_codec);
      if (Score != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (MilestoneBoxClose.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MilestoneBoxClose);
      }
      if (MilestoneBoxOpen.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MilestoneBoxOpen);
      }
      if (MilestoneRwd != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MilestoneRwd);
      }
      raceGetGift_.WriteTo(ref output, _repeated_raceGetGift_codec);
      raceGetNum_.WriteTo(ref output, _repeated_raceGetNum_codec);
      robotId_.WriteTo(ref output, _repeated_robotId_codec);
      if (Score != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (MilestoneBoxClose.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MilestoneBoxClose);
      }
      if (MilestoneBoxOpen.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MilestoneBoxOpen);
      }
      if (MilestoneRwd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MilestoneRwd);
      }
      size += raceGetGift_.CalculateSize(_repeated_raceGetGift_codec);
      size += raceGetNum_.CalculateSize(_repeated_raceGetNum_codec);
      size += robotId_.CalculateSize(_repeated_robotId_codec);
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RaceExtendRound other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.MilestoneBoxClose.Length != 0) {
        MilestoneBoxClose = other.MilestoneBoxClose;
      }
      if (other.MilestoneBoxOpen.Length != 0) {
        MilestoneBoxOpen = other.MilestoneBoxOpen;
      }
      if (other.MilestoneRwd != 0) {
        MilestoneRwd = other.MilestoneRwd;
      }
      raceGetGift_.Add(other.raceGetGift_);
      raceGetNum_.Add(other.raceGetNum_);
      robotId_.Add(other.robotId_);
      if (other.Score != 0) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            MilestoneBoxClose = input.ReadString();
            break;
          }
          case 26: {
            MilestoneBoxOpen = input.ReadString();
            break;
          }
          case 32: {
            MilestoneRwd = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            raceGetGift_.AddEntriesFrom(input, _repeated_raceGetGift_codec);
            break;
          }
          case 50:
          case 48: {
            raceGetNum_.AddEntriesFrom(input, _repeated_raceGetNum_codec);
            break;
          }
          case 58:
          case 56: {
            robotId_.AddEntriesFrom(input, _repeated_robotId_codec);
            break;
          }
          case 64: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            MilestoneBoxClose = input.ReadString();
            break;
          }
          case 26: {
            MilestoneBoxOpen = input.ReadString();
            break;
          }
          case 32: {
            MilestoneRwd = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            raceGetGift_.AddEntriesFrom(ref input, _repeated_raceGetGift_codec);
            break;
          }
          case 50:
          case 48: {
            raceGetNum_.AddEntriesFrom(ref input, _repeated_raceGetNum_codec);
            break;
          }
          case 58:
          case 56: {
            robotId_.AddEntriesFrom(ref input, _repeated_robotId_codec);
            break;
          }
          case 64: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RaceExtendRoundMapABValue : pb::IMessage<RaceExtendRoundMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RaceExtendRoundMapABValue> _parser = new pb::MessageParser<RaceExtendRoundMapABValue>(() => new RaceExtendRoundMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RaceExtendRoundMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.RaceExtendRoundConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaceExtendRoundMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaceExtendRoundMapABValue(RaceExtendRoundMapABValue other) : this() {
      raceExtendRoundMap_ = other.raceExtendRoundMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaceExtendRoundMapABValue Clone() {
      return new RaceExtendRoundMapABValue(this);
    }

    /// <summary>Field number for the "RaceExtendRoundMap" field.</summary>
    public const int RaceExtendRoundMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.RaceExtendRound>.Codec _map_raceExtendRoundMap_codec
        = new pbc::MapField<int, global::fat.rawdata.RaceExtendRound>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.RaceExtendRound.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.RaceExtendRound> raceExtendRoundMap_ = new pbc::MapField<int, global::fat.rawdata.RaceExtendRound>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.RaceExtendRound> RaceExtendRoundMap {
      get { return raceExtendRoundMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RaceExtendRoundMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RaceExtendRoundMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!RaceExtendRoundMap.Equals(other.RaceExtendRoundMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= RaceExtendRoundMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      raceExtendRoundMap_.WriteTo(output, _map_raceExtendRoundMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      raceExtendRoundMap_.WriteTo(ref output, _map_raceExtendRoundMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += raceExtendRoundMap_.CalculateSize(_map_raceExtendRoundMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RaceExtendRoundMapABValue other) {
      if (other == null) {
        return;
      }
      raceExtendRoundMap_.Add(other.raceExtendRoundMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            raceExtendRoundMap_.AddEntriesFrom(input, _map_raceExtendRoundMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            raceExtendRoundMap_.AddEntriesFrom(ref input, _map_raceExtendRoundMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RaceExtendRoundConf : pb::IMessage<RaceExtendRoundConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RaceExtendRoundConf> _parser = new pb::MessageParser<RaceExtendRoundConf>(() => new RaceExtendRoundConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RaceExtendRoundConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.RaceExtendRoundConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaceExtendRoundConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaceExtendRoundConf(RaceExtendRoundConf other) : this() {
      raceExtendRoundMap_ = other.raceExtendRoundMap_.Clone();
      raceExtendRoundMapAB_ = other.raceExtendRoundMapAB_.Clone();
      raceExtendRoundMapABPatch_ = other.raceExtendRoundMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaceExtendRoundConf Clone() {
      return new RaceExtendRoundConf(this);
    }

    /// <summary>Field number for the "RaceExtendRoundMap" field.</summary>
    public const int RaceExtendRoundMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.RaceExtendRound>.Codec _map_raceExtendRoundMap_codec
        = new pbc::MapField<int, global::fat.rawdata.RaceExtendRound>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.RaceExtendRound.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.RaceExtendRound> raceExtendRoundMap_ = new pbc::MapField<int, global::fat.rawdata.RaceExtendRound>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.RaceExtendRound> RaceExtendRoundMap {
      get { return raceExtendRoundMap_; }
    }

    /// <summary>Field number for the "RaceExtendRoundMapAB" field.</summary>
    public const int RaceExtendRoundMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.RaceExtendRoundMapABValue>.Codec _map_raceExtendRoundMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.RaceExtendRoundMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.RaceExtendRoundMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.RaceExtendRoundMapABValue> raceExtendRoundMapAB_ = new pbc::MapField<string, global::fat.rawdata.RaceExtendRoundMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.RaceExtendRoundMapABValue> RaceExtendRoundMapAB {
      get { return raceExtendRoundMapAB_; }
    }

    /// <summary>Field number for the "RaceExtendRoundMapABPatch" field.</summary>
    public const int RaceExtendRoundMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.RaceExtendRoundMapABValue>.Codec _map_raceExtendRoundMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.RaceExtendRoundMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.RaceExtendRoundMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.RaceExtendRoundMapABValue> raceExtendRoundMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.RaceExtendRoundMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.RaceExtendRoundMapABValue> RaceExtendRoundMapABPatch {
      get { return raceExtendRoundMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RaceExtendRoundConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RaceExtendRoundConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!RaceExtendRoundMap.Equals(other.RaceExtendRoundMap)) return false;
      if (!RaceExtendRoundMapAB.Equals(other.RaceExtendRoundMapAB)) return false;
      if (!RaceExtendRoundMapABPatch.Equals(other.RaceExtendRoundMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= RaceExtendRoundMap.GetHashCode();
      hash ^= RaceExtendRoundMapAB.GetHashCode();
      hash ^= RaceExtendRoundMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      raceExtendRoundMap_.WriteTo(output, _map_raceExtendRoundMap_codec);
      raceExtendRoundMapAB_.WriteTo(output, _map_raceExtendRoundMapAB_codec);
      raceExtendRoundMapABPatch_.WriteTo(output, _map_raceExtendRoundMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      raceExtendRoundMap_.WriteTo(ref output, _map_raceExtendRoundMap_codec);
      raceExtendRoundMapAB_.WriteTo(ref output, _map_raceExtendRoundMapAB_codec);
      raceExtendRoundMapABPatch_.WriteTo(ref output, _map_raceExtendRoundMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += raceExtendRoundMap_.CalculateSize(_map_raceExtendRoundMap_codec);
      size += raceExtendRoundMapAB_.CalculateSize(_map_raceExtendRoundMapAB_codec);
      size += raceExtendRoundMapABPatch_.CalculateSize(_map_raceExtendRoundMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RaceExtendRoundConf other) {
      if (other == null) {
        return;
      }
      raceExtendRoundMap_.Add(other.raceExtendRoundMap_);
      raceExtendRoundMapAB_.Add(other.raceExtendRoundMapAB_);
      raceExtendRoundMapABPatch_.Add(other.raceExtendRoundMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            raceExtendRoundMap_.AddEntriesFrom(input, _map_raceExtendRoundMap_codec);
            break;
          }
          case 18: {
            raceExtendRoundMapAB_.AddEntriesFrom(input, _map_raceExtendRoundMapAB_codec);
            break;
          }
          case 26: {
            raceExtendRoundMapABPatch_.AddEntriesFrom(input, _map_raceExtendRoundMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            raceExtendRoundMap_.AddEntriesFrom(ref input, _map_raceExtendRoundMap_codec);
            break;
          }
          case 18: {
            raceExtendRoundMapAB_.AddEntriesFrom(ref input, _map_raceExtendRoundMapAB_codec);
            break;
          }
          case 26: {
            raceExtendRoundMapABPatch_.AddEntriesFrom(ref input, _map_raceExtendRoundMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
