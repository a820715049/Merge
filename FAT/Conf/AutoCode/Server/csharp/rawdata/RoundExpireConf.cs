// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/RoundExpireConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/RoundExpireConf.proto</summary>
  public static partial class RoundExpireConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/RoundExpireConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoundExpireConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1yYXdkYXRhL1JvdW5kRXhwaXJlQ29uZi5wcm90bxIHcmF3ZGF0YSIrCgtS",
            "b3VuZEV4cGlyZRIMCgRmcm9tGAEgASgFEg4KBnJ3ZE51bRgCIAEoBSJJChdS",
            "b3VuZEV4cGlyZVNsaWNlQUJWYWx1ZRIuChBSb3VuZEV4cGlyZVNsaWNlGAEg",
            "AygLMhQucmF3ZGF0YS5Sb3VuZEV4cGlyZSKmAwoPUm91bmRFeHBpcmVDb25m",
            "Ei4KEFJvdW5kRXhwaXJlU2xpY2UYASADKAsyFC5yYXdkYXRhLlJvdW5kRXhw",
            "aXJlEkwKElJvdW5kRXhwaXJlU2xpY2VBQhgCIAMoCzIwLnJhd2RhdGEuUm91",
            "bmRFeHBpcmVDb25mLlJvdW5kRXhwaXJlU2xpY2VBQkVudHJ5ElYKF1JvdW5k",
            "RXhwaXJlU2xpY2VBQlBhdGNoGAMgAygLMjUucmF3ZGF0YS5Sb3VuZEV4cGly",
            "ZUNvbmYuUm91bmRFeHBpcmVTbGljZUFCUGF0Y2hFbnRyeRpbChdSb3VuZEV4",
            "cGlyZVNsaWNlQUJFbnRyeRILCgNrZXkYASABKAkSLwoFdmFsdWUYAiABKAsy",
            "IC5yYXdkYXRhLlJvdW5kRXhwaXJlU2xpY2VBQlZhbHVlOgI4ARpgChxSb3Vu",
            "ZEV4cGlyZVNsaWNlQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIvCgV2YWx1",
            "ZRgCIAEoCzIgLnJhd2RhdGEuUm91bmRFeHBpcmVTbGljZUFCVmFsdWU6AjgB",
            "Qj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3",
            "ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.RoundExpire), global::fat.rawdata.RoundExpire.Parser, new[]{ "From", "RwdNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.RoundExpireSliceABValue), global::fat.rawdata.RoundExpireSliceABValue.Parser, new[]{ "RoundExpireSlice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.RoundExpireConf), global::fat.rawdata.RoundExpireConf.Parser, new[]{ "RoundExpireSlice", "RoundExpireSliceAB", "RoundExpireSliceABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="RoundExpire",table="RoundExpireSlice",table_wrapper="RoundExpireConf",map="false",map_key_type="",data="RoundExpireConf")
  /// annotation@ab(table_ab="RoundExpireSliceAB",table_ab_patch="RoundExpireSliceABPatch",table_ab_value="RoundExpireSliceABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// </summary>
  public sealed partial class RoundExpire : pb::IMessage<RoundExpire>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundExpire> _parser = new pb::MessageParser<RoundExpire>(() => new RoundExpire());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundExpire> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.RoundExpireConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundExpire() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundExpire(RoundExpire other) : this() {
      from_ = other.from_;
      rwdNum_ = other.rwdNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundExpire Clone() {
      return new RoundExpire(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private int from_;
    /// <summary>
    /// 区间左侧值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "rwdNum" field.</summary>
    public const int RwdNumFieldNumber = 2;
    private int rwdNum_;
    /// <summary>
    /// 奖励数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RwdNum {
      get { return rwdNum_; }
      set {
        rwdNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundExpire);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundExpire other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (RwdNum != other.RwdNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != 0) hash ^= From.GetHashCode();
      if (RwdNum != 0) hash ^= RwdNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (RwdNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RwdNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (RwdNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RwdNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
      }
      if (RwdNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RwdNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundExpire other) {
      if (other == null) {
        return;
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.RwdNum != 0) {
        RwdNum = other.RwdNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            RwdNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            RwdNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoundExpireSliceABValue : pb::IMessage<RoundExpireSliceABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundExpireSliceABValue> _parser = new pb::MessageParser<RoundExpireSliceABValue>(() => new RoundExpireSliceABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundExpireSliceABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.RoundExpireConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundExpireSliceABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundExpireSliceABValue(RoundExpireSliceABValue other) : this() {
      roundExpireSlice_ = other.roundExpireSlice_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundExpireSliceABValue Clone() {
      return new RoundExpireSliceABValue(this);
    }

    /// <summary>Field number for the "RoundExpireSlice" field.</summary>
    public const int RoundExpireSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.RoundExpire> _repeated_roundExpireSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.RoundExpire.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.RoundExpire> roundExpireSlice_ = new pbc::RepeatedField<global::fat.rawdata.RoundExpire>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.RoundExpire> RoundExpireSlice {
      get { return roundExpireSlice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundExpireSliceABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundExpireSliceABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roundExpireSlice_.Equals(other.roundExpireSlice_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roundExpireSlice_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      roundExpireSlice_.WriteTo(output, _repeated_roundExpireSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      roundExpireSlice_.WriteTo(ref output, _repeated_roundExpireSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roundExpireSlice_.CalculateSize(_repeated_roundExpireSlice_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundExpireSliceABValue other) {
      if (other == null) {
        return;
      }
      roundExpireSlice_.Add(other.roundExpireSlice_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roundExpireSlice_.AddEntriesFrom(input, _repeated_roundExpireSlice_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            roundExpireSlice_.AddEntriesFrom(ref input, _repeated_roundExpireSlice_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoundExpireConf : pb::IMessage<RoundExpireConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundExpireConf> _parser = new pb::MessageParser<RoundExpireConf>(() => new RoundExpireConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundExpireConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.RoundExpireConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundExpireConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundExpireConf(RoundExpireConf other) : this() {
      roundExpireSlice_ = other.roundExpireSlice_.Clone();
      roundExpireSliceAB_ = other.roundExpireSliceAB_.Clone();
      roundExpireSliceABPatch_ = other.roundExpireSliceABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundExpireConf Clone() {
      return new RoundExpireConf(this);
    }

    /// <summary>Field number for the "RoundExpireSlice" field.</summary>
    public const int RoundExpireSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.RoundExpire> _repeated_roundExpireSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.RoundExpire.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.RoundExpire> roundExpireSlice_ = new pbc::RepeatedField<global::fat.rawdata.RoundExpire>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.RoundExpire> RoundExpireSlice {
      get { return roundExpireSlice_; }
    }

    /// <summary>Field number for the "RoundExpireSliceAB" field.</summary>
    public const int RoundExpireSliceABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.RoundExpireSliceABValue>.Codec _map_roundExpireSliceAB_codec
        = new pbc::MapField<string, global::fat.rawdata.RoundExpireSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.RoundExpireSliceABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.RoundExpireSliceABValue> roundExpireSliceAB_ = new pbc::MapField<string, global::fat.rawdata.RoundExpireSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.RoundExpireSliceABValue> RoundExpireSliceAB {
      get { return roundExpireSliceAB_; }
    }

    /// <summary>Field number for the "RoundExpireSliceABPatch" field.</summary>
    public const int RoundExpireSliceABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.RoundExpireSliceABValue>.Codec _map_roundExpireSliceABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.RoundExpireSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.RoundExpireSliceABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.RoundExpireSliceABValue> roundExpireSliceABPatch_ = new pbc::MapField<string, global::fat.rawdata.RoundExpireSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.RoundExpireSliceABValue> RoundExpireSliceABPatch {
      get { return roundExpireSliceABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundExpireConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundExpireConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roundExpireSlice_.Equals(other.roundExpireSlice_)) return false;
      if (!RoundExpireSliceAB.Equals(other.RoundExpireSliceAB)) return false;
      if (!RoundExpireSliceABPatch.Equals(other.RoundExpireSliceABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roundExpireSlice_.GetHashCode();
      hash ^= RoundExpireSliceAB.GetHashCode();
      hash ^= RoundExpireSliceABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      roundExpireSlice_.WriteTo(output, _repeated_roundExpireSlice_codec);
      roundExpireSliceAB_.WriteTo(output, _map_roundExpireSliceAB_codec);
      roundExpireSliceABPatch_.WriteTo(output, _map_roundExpireSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      roundExpireSlice_.WriteTo(ref output, _repeated_roundExpireSlice_codec);
      roundExpireSliceAB_.WriteTo(ref output, _map_roundExpireSliceAB_codec);
      roundExpireSliceABPatch_.WriteTo(ref output, _map_roundExpireSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roundExpireSlice_.CalculateSize(_repeated_roundExpireSlice_codec);
      size += roundExpireSliceAB_.CalculateSize(_map_roundExpireSliceAB_codec);
      size += roundExpireSliceABPatch_.CalculateSize(_map_roundExpireSliceABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundExpireConf other) {
      if (other == null) {
        return;
      }
      roundExpireSlice_.Add(other.roundExpireSlice_);
      roundExpireSliceAB_.Add(other.roundExpireSliceAB_);
      roundExpireSliceABPatch_.Add(other.roundExpireSliceABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roundExpireSlice_.AddEntriesFrom(input, _repeated_roundExpireSlice_codec);
            break;
          }
          case 18: {
            roundExpireSliceAB_.AddEntriesFrom(input, _map_roundExpireSliceAB_codec);
            break;
          }
          case 26: {
            roundExpireSliceABPatch_.AddEntriesFrom(input, _map_roundExpireSliceABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            roundExpireSlice_.AddEntriesFrom(ref input, _repeated_roundExpireSlice_codec);
            break;
          }
          case 18: {
            roundExpireSliceAB_.AddEntriesFrom(ref input, _map_roundExpireSliceAB_codec);
            break;
          }
          case 26: {
            roundExpireSliceABPatch_.AddEntriesFrom(ref input, _map_roundExpireSliceABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
