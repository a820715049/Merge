// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventIndepenBingoConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventIndepenBingoConf.proto</summary>
  public static partial class EventIndepenBingoConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventIndepenBingoConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventIndepenBingoConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNyYXdkYXRhL0V2ZW50SW5kZXBlbkJpbmdvQ29uZi5wcm90bxIHcmF3ZGF0",
            "YSKJAwoRRXZlbnRJbmRlcGVuQmluZ28SCgoCaWQYASABKAUSEgoKYmluZ29U",
            "aGVtZRgDIAEoBRIPCgdib2FyZElkGAQgASgFEhIKCmVuZFJlY3ljbGUYEyAD",
            "KAkSEAoIZW5kVGhlbWUYBSABKAUSDwoHZ3JhZGVJZBgGIAEoBRIYChBncm91",
            "cENob29zZVRoZW1lGAsgASgFEhEKCWhlbHBUaGVtZRgMIAEoBRIRCglpc09u",
            "Qm9udXMYFCABKAgSEgoKaXNPbkJ1YmJsZRgVIAEoCBIRCglpdGVtVGhlbWUY",
            "ByABKAUSFQoNbGV2ZWxDb21wbGV0ZRgNIAEoBRIUCgxsb2FkaW5nVGhlbWUY",
            "DiABKAUSEQoJbWFpblRoZW1lGA8gASgFEgwKBG5hbWUYCCABKAkSFQoNbmV3",
            "Um91bmRUaGVtZRgQIAEoBRIbChNzcGF3bmVyUHJldmlld1RoZW1lGBEgASgF",
            "EhIKCnN0YXJ0VGhlbWUYCiABKAUSDwoHc3RvcmFnZRgSIAEoBSLUAQobRXZl",
            "bnRJbmRlcGVuQmluZ29NYXBBQlZhbHVlElwKFEV2ZW50SW5kZXBlbkJpbmdv",
            "TWFwGAEgAygLMj4ucmF3ZGF0YS5FdmVudEluZGVwZW5CaW5nb01hcEFCVmFs",
            "dWUuRXZlbnRJbmRlcGVuQmluZ29NYXBFbnRyeRpXChlFdmVudEluZGVwZW5C",
            "aW5nb01hcEVudHJ5EgsKA2tleRgBIAEoBRIpCgV2YWx1ZRgCIAEoCzIaLnJh",
            "d2RhdGEuRXZlbnRJbmRlcGVuQmluZ286AjgBItkEChVFdmVudEluZGVwZW5C",
            "aW5nb0NvbmYSVgoURXZlbnRJbmRlcGVuQmluZ29NYXAYASADKAsyOC5yYXdk",
            "YXRhLkV2ZW50SW5kZXBlbkJpbmdvQ29uZi5FdmVudEluZGVwZW5CaW5nb01h",
            "cEVudHJ5EloKFkV2ZW50SW5kZXBlbkJpbmdvTWFwQUIYAiADKAsyOi5yYXdk",
            "YXRhLkV2ZW50SW5kZXBlbkJpbmdvQ29uZi5FdmVudEluZGVwZW5CaW5nb01h",
            "cEFCRW50cnkSZAobRXZlbnRJbmRlcGVuQmluZ29NYXBBQlBhdGNoGAMgAygL",
            "Mj8ucmF3ZGF0YS5FdmVudEluZGVwZW5CaW5nb0NvbmYuRXZlbnRJbmRlcGVu",
            "QmluZ29NYXBBQlBhdGNoRW50cnkaVwoZRXZlbnRJbmRlcGVuQmluZ29NYXBF",
            "bnRyeRILCgNrZXkYASABKAUSKQoFdmFsdWUYAiABKAsyGi5yYXdkYXRhLkV2",
            "ZW50SW5kZXBlbkJpbmdvOgI4ARpjChtFdmVudEluZGVwZW5CaW5nb01hcEFC",
            "RW50cnkSCwoDa2V5GAEgASgJEjMKBXZhbHVlGAIgASgLMiQucmF3ZGF0YS5F",
            "dmVudEluZGVwZW5CaW5nb01hcEFCVmFsdWU6AjgBGmgKIEV2ZW50SW5kZXBl",
            "bkJpbmdvTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIzCgV2YWx1ZRgC",
            "IAEoCzIkLnJhd2RhdGEuRXZlbnRJbmRlcGVuQmluZ29NYXBBQlZhbHVlOgI4",
            "AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jh",
            "d2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventIndepenBingo), global::fat.rawdata.EventIndepenBingo.Parser, new[]{ "Id", "BingoTheme", "BoardId", "EndRecycle", "EndTheme", "GradeId", "GroupChooseTheme", "HelpTheme", "IsOnBonus", "IsOnBubble", "ItemTheme", "LevelComplete", "LoadingTheme", "MainTheme", "Name", "NewRoundTheme", "SpawnerPreviewTheme", "StartTheme", "Storage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventIndepenBingoMapABValue), global::fat.rawdata.EventIndepenBingoMapABValue.Parser, new[]{ "EventIndepenBingoMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventIndepenBingoConf), global::fat.rawdata.EventIndepenBingoConf.Parser, new[]{ "EventIndepenBingoMap", "EventIndepenBingoMapAB", "EventIndepenBingoMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventIndepenBingo",table="EventIndepenBingoMap",table_wrapper="EventIndepenBingoConf",map="true",map_key_type="int32",data="EventIndepenBingoConf")
  /// annotation@ab(table_ab="EventIndepenBingoMapAB",table_ab_patch="EventIndepenBingoMapABPatch",table_ab_value="EventIndepenBingoMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventIndepenBingo(id="id")
  /// </summary>
  public sealed partial class EventIndepenBingo : pb::IMessage<EventIndepenBingo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventIndepenBingo> _parser = new pb::MessageParser<EventIndepenBingo>(() => new EventIndepenBingo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventIndepenBingo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventIndepenBingoConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventIndepenBingo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventIndepenBingo(EventIndepenBingo other) : this() {
      id_ = other.id_;
      bingoTheme_ = other.bingoTheme_;
      boardId_ = other.boardId_;
      endRecycle_ = other.endRecycle_.Clone();
      endTheme_ = other.endTheme_;
      gradeId_ = other.gradeId_;
      groupChooseTheme_ = other.groupChooseTheme_;
      helpTheme_ = other.helpTheme_;
      isOnBonus_ = other.isOnBonus_;
      isOnBubble_ = other.isOnBubble_;
      itemTheme_ = other.itemTheme_;
      levelComplete_ = other.levelComplete_;
      loadingTheme_ = other.loadingTheme_;
      mainTheme_ = other.mainTheme_;
      name_ = other.name_;
      newRoundTheme_ = other.newRoundTheme_;
      spawnerPreviewTheme_ = other.spawnerPreviewTheme_;
      startTheme_ = other.startTheme_;
      storage_ = other.storage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventIndepenBingo Clone() {
      return new EventIndepenBingo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "bingoTheme" field.</summary>
    public const int BingoThemeFieldNumber = 3;
    private int bingoTheme_;
    /// <summary>
    /// bingo奖励
    /// 详情弹板
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BingoTheme {
      get { return bingoTheme_; }
      set {
        bingoTheme_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 4;
    private int boardId_;
    /// <summary>
    /// 适用棋盘
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "endRecycle" field.</summary>
    public const int EndRecycleFieldNumber = 19;
    private static readonly pb::FieldCodec<string> _repeated_endRecycle_codec
        = pb::FieldCodec.ForString(154);
    private readonly pbc::RepeatedField<string> endRecycle_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 活动结束回收棋子
    /// (≤难度值:奖励id:奖励数量,）
    /// 难度区间闭口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> EndRecycle {
      get { return endRecycle_; }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 5;
    private int endTheme_;
    /// <summary>
    /// 活动结束
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "gradeId" field.</summary>
    public const int GradeIdFieldNumber = 6;
    private int gradeId_;
    /// <summary>
    /// 关卡信息
    /// （受档位组控制）
    /// （GradeIndexMapping.id）
    /// （EventItemBingoDetail.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GradeId {
      get { return gradeId_; }
      set {
        gradeId_ = value;
      }
    }

    /// <summary>Field number for the "groupChooseTheme" field.</summary>
    public const int GroupChooseThemeFieldNumber = 11;
    private int groupChooseTheme_;
    /// <summary>
    /// 选组界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupChooseTheme {
      get { return groupChooseTheme_; }
      set {
        groupChooseTheme_ = value;
      }
    }

    /// <summary>Field number for the "helpTheme" field.</summary>
    public const int HelpThemeFieldNumber = 12;
    private int helpTheme_;
    /// <summary>
    /// 帮助
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpTheme {
      get { return helpTheme_; }
      set {
        helpTheme_ = value;
      }
    }

    /// <summary>Field number for the "isOnBonus" field.</summary>
    public const int IsOnBonusFieldNumber = 20;
    private bool isOnBonus_;
    /// <summary>
    /// 开启mergeBonus
    /// (空=FALSE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnBonus {
      get { return isOnBonus_; }
      set {
        isOnBonus_ = value;
      }
    }

    /// <summary>Field number for the "isOnBubble" field.</summary>
    public const int IsOnBubbleFieldNumber = 21;
    private bool isOnBubble_;
    /// <summary>
    /// 开启合成气泡
    /// (空=FALSE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnBubble {
      get { return isOnBubble_; }
      set {
        isOnBubble_ = value;
      }
    }

    /// <summary>Field number for the "itemTheme" field.</summary>
    public const int ItemThemeFieldNumber = 7;
    private int itemTheme_;
    /// <summary>
    /// 棋子详情
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemTheme {
      get { return itemTheme_; }
      set {
        itemTheme_ = value;
      }
    }

    /// <summary>Field number for the "levelComplete" field.</summary>
    public const int LevelCompleteFieldNumber = 13;
    private int levelComplete_;
    /// <summary>
    /// 关卡完成&amp;下一关
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelComplete {
      get { return levelComplete_; }
      set {
        levelComplete_ = value;
      }
    }

    /// <summary>Field number for the "loadingTheme" field.</summary>
    public const int LoadingThemeFieldNumber = 14;
    private int loadingTheme_;
    /// <summary>
    /// loading
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoadingTheme {
      get { return loadingTheme_; }
      set {
        loadingTheme_ = value;
      }
    }

    /// <summary>Field number for the "mainTheme" field.</summary>
    public const int MainThemeFieldNumber = 15;
    private int mainTheme_;
    /// <summary>
    /// 主界面
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainTheme {
      get { return mainTheme_; }
      set {
        mainTheme_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 8;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "newRoundTheme" field.</summary>
    public const int NewRoundThemeFieldNumber = 16;
    private int newRoundTheme_;
    /// <summary>
    /// 新一轮
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewRoundTheme {
      get { return newRoundTheme_; }
      set {
        newRoundTheme_ = value;
      }
    }

    /// <summary>Field number for the "spawnerPreviewTheme" field.</summary>
    public const int SpawnerPreviewThemeFieldNumber = 17;
    private int spawnerPreviewTheme_;
    /// <summary>
    /// 生成器预览
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpawnerPreviewTheme {
      get { return spawnerPreviewTheme_; }
      set {
        spawnerPreviewTheme_ = value;
      }
    }

    /// <summary>Field number for the "startTheme" field.</summary>
    public const int StartThemeFieldNumber = 10;
    private int startTheme_;
    /// <summary>
    /// 开启
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTheme {
      get { return startTheme_; }
      set {
        startTheme_ = value;
      }
    }

    /// <summary>Field number for the "storage" field.</summary>
    public const int StorageFieldNumber = 18;
    private int storage_;
    /// <summary>
    /// 仓库格子数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Storage {
      get { return storage_; }
      set {
        storage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventIndepenBingo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventIndepenBingo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BingoTheme != other.BingoTheme) return false;
      if (BoardId != other.BoardId) return false;
      if(!endRecycle_.Equals(other.endRecycle_)) return false;
      if (EndTheme != other.EndTheme) return false;
      if (GradeId != other.GradeId) return false;
      if (GroupChooseTheme != other.GroupChooseTheme) return false;
      if (HelpTheme != other.HelpTheme) return false;
      if (IsOnBonus != other.IsOnBonus) return false;
      if (IsOnBubble != other.IsOnBubble) return false;
      if (ItemTheme != other.ItemTheme) return false;
      if (LevelComplete != other.LevelComplete) return false;
      if (LoadingTheme != other.LoadingTheme) return false;
      if (MainTheme != other.MainTheme) return false;
      if (Name != other.Name) return false;
      if (NewRoundTheme != other.NewRoundTheme) return false;
      if (SpawnerPreviewTheme != other.SpawnerPreviewTheme) return false;
      if (StartTheme != other.StartTheme) return false;
      if (Storage != other.Storage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BingoTheme != 0) hash ^= BingoTheme.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      hash ^= endRecycle_.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      if (GradeId != 0) hash ^= GradeId.GetHashCode();
      if (GroupChooseTheme != 0) hash ^= GroupChooseTheme.GetHashCode();
      if (HelpTheme != 0) hash ^= HelpTheme.GetHashCode();
      if (IsOnBonus != false) hash ^= IsOnBonus.GetHashCode();
      if (IsOnBubble != false) hash ^= IsOnBubble.GetHashCode();
      if (ItemTheme != 0) hash ^= ItemTheme.GetHashCode();
      if (LevelComplete != 0) hash ^= LevelComplete.GetHashCode();
      if (LoadingTheme != 0) hash ^= LoadingTheme.GetHashCode();
      if (MainTheme != 0) hash ^= MainTheme.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NewRoundTheme != 0) hash ^= NewRoundTheme.GetHashCode();
      if (SpawnerPreviewTheme != 0) hash ^= SpawnerPreviewTheme.GetHashCode();
      if (StartTheme != 0) hash ^= StartTheme.GetHashCode();
      if (Storage != 0) hash ^= Storage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BingoTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BingoTheme);
      }
      if (BoardId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BoardId);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EndTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GradeId);
      }
      if (ItemTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ItemTheme);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(StartTheme);
      }
      if (GroupChooseTheme != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(GroupChooseTheme);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(HelpTheme);
      }
      if (LevelComplete != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LevelComplete);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(LoadingTheme);
      }
      if (MainTheme != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MainTheme);
      }
      if (NewRoundTheme != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(NewRoundTheme);
      }
      if (SpawnerPreviewTheme != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SpawnerPreviewTheme);
      }
      if (Storage != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Storage);
      }
      endRecycle_.WriteTo(output, _repeated_endRecycle_codec);
      if (IsOnBonus != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsOnBonus);
      }
      if (IsOnBubble != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsOnBubble);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BingoTheme != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BingoTheme);
      }
      if (BoardId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BoardId);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EndTheme);
      }
      if (GradeId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GradeId);
      }
      if (ItemTheme != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ItemTheme);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (StartTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(StartTheme);
      }
      if (GroupChooseTheme != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(GroupChooseTheme);
      }
      if (HelpTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(HelpTheme);
      }
      if (LevelComplete != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LevelComplete);
      }
      if (LoadingTheme != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(LoadingTheme);
      }
      if (MainTheme != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MainTheme);
      }
      if (NewRoundTheme != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(NewRoundTheme);
      }
      if (SpawnerPreviewTheme != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SpawnerPreviewTheme);
      }
      if (Storage != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Storage);
      }
      endRecycle_.WriteTo(ref output, _repeated_endRecycle_codec);
      if (IsOnBonus != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsOnBonus);
      }
      if (IsOnBubble != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsOnBubble);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BingoTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BingoTheme);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      size += endRecycle_.CalculateSize(_repeated_endRecycle_codec);
      if (EndTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      if (GradeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GradeId);
      }
      if (GroupChooseTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupChooseTheme);
      }
      if (HelpTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HelpTheme);
      }
      if (IsOnBonus != false) {
        size += 2 + 1;
      }
      if (IsOnBubble != false) {
        size += 2 + 1;
      }
      if (ItemTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemTheme);
      }
      if (LevelComplete != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelComplete);
      }
      if (LoadingTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoadingTheme);
      }
      if (MainTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainTheme);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NewRoundTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewRoundTheme);
      }
      if (SpawnerPreviewTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpawnerPreviewTheme);
      }
      if (StartTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTheme);
      }
      if (Storage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Storage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventIndepenBingo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BingoTheme != 0) {
        BingoTheme = other.BingoTheme;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      endRecycle_.Add(other.endRecycle_);
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      if (other.GradeId != 0) {
        GradeId = other.GradeId;
      }
      if (other.GroupChooseTheme != 0) {
        GroupChooseTheme = other.GroupChooseTheme;
      }
      if (other.HelpTheme != 0) {
        HelpTheme = other.HelpTheme;
      }
      if (other.IsOnBonus != false) {
        IsOnBonus = other.IsOnBonus;
      }
      if (other.IsOnBubble != false) {
        IsOnBubble = other.IsOnBubble;
      }
      if (other.ItemTheme != 0) {
        ItemTheme = other.ItemTheme;
      }
      if (other.LevelComplete != 0) {
        LevelComplete = other.LevelComplete;
      }
      if (other.LoadingTheme != 0) {
        LoadingTheme = other.LoadingTheme;
      }
      if (other.MainTheme != 0) {
        MainTheme = other.MainTheme;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NewRoundTheme != 0) {
        NewRoundTheme = other.NewRoundTheme;
      }
      if (other.SpawnerPreviewTheme != 0) {
        SpawnerPreviewTheme = other.SpawnerPreviewTheme;
      }
      if (other.StartTheme != 0) {
        StartTheme = other.StartTheme;
      }
      if (other.Storage != 0) {
        Storage = other.Storage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            BingoTheme = input.ReadInt32();
            break;
          }
          case 32: {
            BoardId = input.ReadInt32();
            break;
          }
          case 40: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 48: {
            GradeId = input.ReadInt32();
            break;
          }
          case 56: {
            ItemTheme = input.ReadInt32();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 80: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 88: {
            GroupChooseTheme = input.ReadInt32();
            break;
          }
          case 96: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 104: {
            LevelComplete = input.ReadInt32();
            break;
          }
          case 112: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 120: {
            MainTheme = input.ReadInt32();
            break;
          }
          case 128: {
            NewRoundTheme = input.ReadInt32();
            break;
          }
          case 136: {
            SpawnerPreviewTheme = input.ReadInt32();
            break;
          }
          case 144: {
            Storage = input.ReadInt32();
            break;
          }
          case 154: {
            endRecycle_.AddEntriesFrom(input, _repeated_endRecycle_codec);
            break;
          }
          case 160: {
            IsOnBonus = input.ReadBool();
            break;
          }
          case 168: {
            IsOnBubble = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            BingoTheme = input.ReadInt32();
            break;
          }
          case 32: {
            BoardId = input.ReadInt32();
            break;
          }
          case 40: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 48: {
            GradeId = input.ReadInt32();
            break;
          }
          case 56: {
            ItemTheme = input.ReadInt32();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 80: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 88: {
            GroupChooseTheme = input.ReadInt32();
            break;
          }
          case 96: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 104: {
            LevelComplete = input.ReadInt32();
            break;
          }
          case 112: {
            LoadingTheme = input.ReadInt32();
            break;
          }
          case 120: {
            MainTheme = input.ReadInt32();
            break;
          }
          case 128: {
            NewRoundTheme = input.ReadInt32();
            break;
          }
          case 136: {
            SpawnerPreviewTheme = input.ReadInt32();
            break;
          }
          case 144: {
            Storage = input.ReadInt32();
            break;
          }
          case 154: {
            endRecycle_.AddEntriesFrom(ref input, _repeated_endRecycle_codec);
            break;
          }
          case 160: {
            IsOnBonus = input.ReadBool();
            break;
          }
          case 168: {
            IsOnBubble = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventIndepenBingoMapABValue : pb::IMessage<EventIndepenBingoMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventIndepenBingoMapABValue> _parser = new pb::MessageParser<EventIndepenBingoMapABValue>(() => new EventIndepenBingoMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventIndepenBingoMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventIndepenBingoConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventIndepenBingoMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventIndepenBingoMapABValue(EventIndepenBingoMapABValue other) : this() {
      eventIndepenBingoMap_ = other.eventIndepenBingoMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventIndepenBingoMapABValue Clone() {
      return new EventIndepenBingoMapABValue(this);
    }

    /// <summary>Field number for the "EventIndepenBingoMap" field.</summary>
    public const int EventIndepenBingoMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventIndepenBingo>.Codec _map_eventIndepenBingoMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventIndepenBingo>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventIndepenBingo.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventIndepenBingo> eventIndepenBingoMap_ = new pbc::MapField<int, global::fat.rawdata.EventIndepenBingo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventIndepenBingo> EventIndepenBingoMap {
      get { return eventIndepenBingoMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventIndepenBingoMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventIndepenBingoMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventIndepenBingoMap.Equals(other.EventIndepenBingoMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventIndepenBingoMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventIndepenBingoMap_.WriteTo(output, _map_eventIndepenBingoMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventIndepenBingoMap_.WriteTo(ref output, _map_eventIndepenBingoMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventIndepenBingoMap_.CalculateSize(_map_eventIndepenBingoMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventIndepenBingoMapABValue other) {
      if (other == null) {
        return;
      }
      eventIndepenBingoMap_.Add(other.eventIndepenBingoMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventIndepenBingoMap_.AddEntriesFrom(input, _map_eventIndepenBingoMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventIndepenBingoMap_.AddEntriesFrom(ref input, _map_eventIndepenBingoMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventIndepenBingoConf : pb::IMessage<EventIndepenBingoConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventIndepenBingoConf> _parser = new pb::MessageParser<EventIndepenBingoConf>(() => new EventIndepenBingoConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventIndepenBingoConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventIndepenBingoConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventIndepenBingoConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventIndepenBingoConf(EventIndepenBingoConf other) : this() {
      eventIndepenBingoMap_ = other.eventIndepenBingoMap_.Clone();
      eventIndepenBingoMapAB_ = other.eventIndepenBingoMapAB_.Clone();
      eventIndepenBingoMapABPatch_ = other.eventIndepenBingoMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventIndepenBingoConf Clone() {
      return new EventIndepenBingoConf(this);
    }

    /// <summary>Field number for the "EventIndepenBingoMap" field.</summary>
    public const int EventIndepenBingoMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventIndepenBingo>.Codec _map_eventIndepenBingoMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventIndepenBingo>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventIndepenBingo.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventIndepenBingo> eventIndepenBingoMap_ = new pbc::MapField<int, global::fat.rawdata.EventIndepenBingo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventIndepenBingo> EventIndepenBingoMap {
      get { return eventIndepenBingoMap_; }
    }

    /// <summary>Field number for the "EventIndepenBingoMapAB" field.</summary>
    public const int EventIndepenBingoMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventIndepenBingoMapABValue>.Codec _map_eventIndepenBingoMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventIndepenBingoMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventIndepenBingoMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventIndepenBingoMapABValue> eventIndepenBingoMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventIndepenBingoMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventIndepenBingoMapABValue> EventIndepenBingoMapAB {
      get { return eventIndepenBingoMapAB_; }
    }

    /// <summary>Field number for the "EventIndepenBingoMapABPatch" field.</summary>
    public const int EventIndepenBingoMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventIndepenBingoMapABValue>.Codec _map_eventIndepenBingoMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventIndepenBingoMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventIndepenBingoMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventIndepenBingoMapABValue> eventIndepenBingoMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventIndepenBingoMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventIndepenBingoMapABValue> EventIndepenBingoMapABPatch {
      get { return eventIndepenBingoMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventIndepenBingoConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventIndepenBingoConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventIndepenBingoMap.Equals(other.EventIndepenBingoMap)) return false;
      if (!EventIndepenBingoMapAB.Equals(other.EventIndepenBingoMapAB)) return false;
      if (!EventIndepenBingoMapABPatch.Equals(other.EventIndepenBingoMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventIndepenBingoMap.GetHashCode();
      hash ^= EventIndepenBingoMapAB.GetHashCode();
      hash ^= EventIndepenBingoMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventIndepenBingoMap_.WriteTo(output, _map_eventIndepenBingoMap_codec);
      eventIndepenBingoMapAB_.WriteTo(output, _map_eventIndepenBingoMapAB_codec);
      eventIndepenBingoMapABPatch_.WriteTo(output, _map_eventIndepenBingoMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventIndepenBingoMap_.WriteTo(ref output, _map_eventIndepenBingoMap_codec);
      eventIndepenBingoMapAB_.WriteTo(ref output, _map_eventIndepenBingoMapAB_codec);
      eventIndepenBingoMapABPatch_.WriteTo(ref output, _map_eventIndepenBingoMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventIndepenBingoMap_.CalculateSize(_map_eventIndepenBingoMap_codec);
      size += eventIndepenBingoMapAB_.CalculateSize(_map_eventIndepenBingoMapAB_codec);
      size += eventIndepenBingoMapABPatch_.CalculateSize(_map_eventIndepenBingoMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventIndepenBingoConf other) {
      if (other == null) {
        return;
      }
      eventIndepenBingoMap_.Add(other.eventIndepenBingoMap_);
      eventIndepenBingoMapAB_.Add(other.eventIndepenBingoMapAB_);
      eventIndepenBingoMapABPatch_.Add(other.eventIndepenBingoMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventIndepenBingoMap_.AddEntriesFrom(input, _map_eventIndepenBingoMap_codec);
            break;
          }
          case 18: {
            eventIndepenBingoMapAB_.AddEntriesFrom(input, _map_eventIndepenBingoMapAB_codec);
            break;
          }
          case 26: {
            eventIndepenBingoMapABPatch_.AddEntriesFrom(input, _map_eventIndepenBingoMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventIndepenBingoMap_.AddEntriesFrom(ref input, _map_eventIndepenBingoMap_codec);
            break;
          }
          case 18: {
            eventIndepenBingoMapAB_.AddEntriesFrom(ref input, _map_eventIndepenBingoMapAB_codec);
            break;
          }
          case 26: {
            eventIndepenBingoMapABPatch_.AddEntriesFrom(ref input, _map_eventIndepenBingoMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
