// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/LoginSignConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/LoginSignConf.proto</summary>
  public static partial class LoginSignConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/LoginSignConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginSignConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtyYXdkYXRhL0xvZ2luU2lnbkNvbmYucHJvdG8SB3Jhd2RhdGEaGnJhd2Rh",
            "dGEvRmVhdHVyZUVudHJ5LnByb3RvGhNyYXdkYXRhL1RvYXN0LnByb3RvIroB",
            "CglMb2dpblNpZ24SEAoIaXNBY3RpdmUYASABKAgSDwoHaXNDeWNsZRgCIAEo",
            "CBIiCgNrZXkYAyABKA4yFS5yYXdkYXRhLkZlYXR1cmVFbnRyeRINCgVwb3B1",
            "cBgIIAEoBRIPCgdyZXdhcmRzGAQgAygFEhAKCHN0YXJ0VXRjGAUgASgFEh8K",
            "B3RvYXN0SWQYBiABKA4yDi5yYXdkYXRhLlRvYXN0EhMKC3RvdGFsUmV3YXJk",
            "GAcgAygFIkMKFUxvZ2luU2lnblNsaWNlQUJWYWx1ZRIqCg5Mb2dpblNpZ25T",
            "bGljZRgBIAMoCzISLnJhd2RhdGEuTG9naW5TaWduIowDCg1Mb2dpblNpZ25D",
            "b25mEioKDkxvZ2luU2lnblNsaWNlGAEgAygLMhIucmF3ZGF0YS5Mb2dpblNp",
            "Z24SRgoQTG9naW5TaWduU2xpY2VBQhgCIAMoCzIsLnJhd2RhdGEuTG9naW5T",
            "aWduQ29uZi5Mb2dpblNpZ25TbGljZUFCRW50cnkSUAoVTG9naW5TaWduU2xp",
            "Y2VBQlBhdGNoGAMgAygLMjEucmF3ZGF0YS5Mb2dpblNpZ25Db25mLkxvZ2lu",
            "U2lnblNsaWNlQUJQYXRjaEVudHJ5GlcKFUxvZ2luU2lnblNsaWNlQUJFbnRy",
            "eRILCgNrZXkYASABKAkSLQoFdmFsdWUYAiABKAsyHi5yYXdkYXRhLkxvZ2lu",
            "U2lnblNsaWNlQUJWYWx1ZToCOAEaXAoaTG9naW5TaWduU2xpY2VBQlBhdGNo",
            "RW50cnkSCwoDa2V5GAEgASgJEi0KBXZhbHVlGAIgASgLMh4ucmF3ZGF0YS5M",
            "b2dpblNpZ25TbGljZUFCVmFsdWU6AjgBQj1aLWdpdGxhYi5mdW5wbHVzLmlv",
            "L2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3ZGF0YaoCC2ZhdC5yYXdkYXRhYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.rawdata.FeatureEntryReflection.Descriptor, global::fat.rawdata.ToastReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.LoginSign), global::fat.rawdata.LoginSign.Parser, new[]{ "IsActive", "IsCycle", "Key", "Popup", "Rewards", "StartUtc", "ToastId", "TotalReward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.LoginSignSliceABValue), global::fat.rawdata.LoginSignSliceABValue.Parser, new[]{ "LoginSignSlice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.LoginSignConf), global::fat.rawdata.LoginSignConf.Parser, new[]{ "LoginSignSlice", "LoginSignSliceAB", "LoginSignSliceABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="LoginSign",table="LoginSignSlice",table_wrapper="LoginSignConf",map="false",map_key_type="",data="LoginSignConf")
  /// annotation@ab(table_ab="LoginSignSliceAB",table_ab_patch="LoginSignSliceABPatch",table_ab_value="LoginSignSliceABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// </summary>
  public sealed partial class LoginSign : pb::IMessage<LoginSign>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoginSign> _parser = new pb::MessageParser<LoginSign>(() => new LoginSign());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginSign> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.LoginSignConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginSign() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginSign(LoginSign other) : this() {
      isActive_ = other.isActive_;
      isCycle_ = other.isCycle_;
      key_ = other.key_;
      popup_ = other.popup_;
      rewards_ = other.rewards_.Clone();
      startUtc_ = other.startUtc_;
      toastId_ = other.toastId_;
      totalReward_ = other.totalReward_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginSign Clone() {
      return new LoginSign(this);
    }

    /// <summary>Field number for the "isActive" field.</summary>
    public const int IsActiveFieldNumber = 1;
    private bool isActive_;
    /// <summary>
    /// 决定签到功能是否能被触发
    /// （不会影响已有的活动实例）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "isCycle" field.</summary>
    public const int IsCycleFieldNumber = 2;
    private bool isCycle_;
    /// <summary>
    /// 决定签到功能是否循环重置
    /// （如累计签到30次后，是否还要继续刷新重置）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCycle {
      get { return isCycle_; }
      set {
        isCycle_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private global::fat.rawdata.FeatureEntry key_ = global::fat.rawdata.FeatureEntry.FeatureNone;
    /// <summary>
    /// 唯一ID
    /// （FeatureEntry@enum）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.rawdata.FeatureEntry Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "popup" field.</summary>
    public const int PopupFieldNumber = 8;
    private int popup_;
    /// <summary>
    /// 弹窗id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Popup {
      get { return popup_; }
      set {
        popup_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_rewards_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> rewards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 签到奖励
    /// （LoginSignReward.pool）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "startUtc" field.</summary>
    public const int StartUtcFieldNumber = 5;
    private int startUtc_;
    /// <summary>
    /// 刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartUtc {
      get { return startUtc_; }
      set {
        startUtc_ = value;
      }
    }

    /// <summary>Field number for the "toastId" field.</summary>
    public const int ToastIdFieldNumber = 6;
    private global::fat.rawdata.Toast toastId_ = global::fat.rawdata.Toast.Empty;
    /// <summary>
    /// 提示飘字
    /// （ToastConfig.toastId）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.rawdata.Toast ToastId {
      get { return toastId_; }
      set {
        toastId_ = value;
      }
    }

    /// <summary>Field number for the "totalReward" field.</summary>
    public const int TotalRewardFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_totalReward_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> totalReward_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 累计签到奖励
    /// （LoginSignTotal.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TotalReward {
      get { return totalReward_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginSign);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginSign other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsActive != other.IsActive) return false;
      if (IsCycle != other.IsCycle) return false;
      if (Key != other.Key) return false;
      if (Popup != other.Popup) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      if (StartUtc != other.StartUtc) return false;
      if (ToastId != other.ToastId) return false;
      if(!totalReward_.Equals(other.totalReward_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (IsCycle != false) hash ^= IsCycle.GetHashCode();
      if (Key != global::fat.rawdata.FeatureEntry.FeatureNone) hash ^= Key.GetHashCode();
      if (Popup != 0) hash ^= Popup.GetHashCode();
      hash ^= rewards_.GetHashCode();
      if (StartUtc != 0) hash ^= StartUtc.GetHashCode();
      if (ToastId != global::fat.rawdata.Toast.Empty) hash ^= ToastId.GetHashCode();
      hash ^= totalReward_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsActive != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsActive);
      }
      if (IsCycle != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsCycle);
      }
      if (Key != global::fat.rawdata.FeatureEntry.FeatureNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Key);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (StartUtc != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(StartUtc);
      }
      if (ToastId != global::fat.rawdata.Toast.Empty) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ToastId);
      }
      totalReward_.WriteTo(output, _repeated_totalReward_codec);
      if (Popup != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Popup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsActive != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsActive);
      }
      if (IsCycle != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsCycle);
      }
      if (Key != global::fat.rawdata.FeatureEntry.FeatureNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Key);
      }
      rewards_.WriteTo(ref output, _repeated_rewards_codec);
      if (StartUtc != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(StartUtc);
      }
      if (ToastId != global::fat.rawdata.Toast.Empty) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ToastId);
      }
      totalReward_.WriteTo(ref output, _repeated_totalReward_codec);
      if (Popup != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Popup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (IsCycle != false) {
        size += 1 + 1;
      }
      if (Key != global::fat.rawdata.FeatureEntry.FeatureNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Key);
      }
      if (Popup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Popup);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (StartUtc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartUtc);
      }
      if (ToastId != global::fat.rawdata.Toast.Empty) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ToastId);
      }
      size += totalReward_.CalculateSize(_repeated_totalReward_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginSign other) {
      if (other == null) {
        return;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      if (other.IsCycle != false) {
        IsCycle = other.IsCycle;
      }
      if (other.Key != global::fat.rawdata.FeatureEntry.FeatureNone) {
        Key = other.Key;
      }
      if (other.Popup != 0) {
        Popup = other.Popup;
      }
      rewards_.Add(other.rewards_);
      if (other.StartUtc != 0) {
        StartUtc = other.StartUtc;
      }
      if (other.ToastId != global::fat.rawdata.Toast.Empty) {
        ToastId = other.ToastId;
      }
      totalReward_.Add(other.totalReward_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsActive = input.ReadBool();
            break;
          }
          case 16: {
            IsCycle = input.ReadBool();
            break;
          }
          case 24: {
            Key = (global::fat.rawdata.FeatureEntry) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 40: {
            StartUtc = input.ReadInt32();
            break;
          }
          case 48: {
            ToastId = (global::fat.rawdata.Toast) input.ReadEnum();
            break;
          }
          case 58:
          case 56: {
            totalReward_.AddEntriesFrom(input, _repeated_totalReward_codec);
            break;
          }
          case 64: {
            Popup = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsActive = input.ReadBool();
            break;
          }
          case 16: {
            IsCycle = input.ReadBool();
            break;
          }
          case 24: {
            Key = (global::fat.rawdata.FeatureEntry) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            rewards_.AddEntriesFrom(ref input, _repeated_rewards_codec);
            break;
          }
          case 40: {
            StartUtc = input.ReadInt32();
            break;
          }
          case 48: {
            ToastId = (global::fat.rawdata.Toast) input.ReadEnum();
            break;
          }
          case 58:
          case 56: {
            totalReward_.AddEntriesFrom(ref input, _repeated_totalReward_codec);
            break;
          }
          case 64: {
            Popup = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LoginSignSliceABValue : pb::IMessage<LoginSignSliceABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoginSignSliceABValue> _parser = new pb::MessageParser<LoginSignSliceABValue>(() => new LoginSignSliceABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginSignSliceABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.LoginSignConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginSignSliceABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginSignSliceABValue(LoginSignSliceABValue other) : this() {
      loginSignSlice_ = other.loginSignSlice_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginSignSliceABValue Clone() {
      return new LoginSignSliceABValue(this);
    }

    /// <summary>Field number for the "LoginSignSlice" field.</summary>
    public const int LoginSignSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.LoginSign> _repeated_loginSignSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.LoginSign.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.LoginSign> loginSignSlice_ = new pbc::RepeatedField<global::fat.rawdata.LoginSign>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.LoginSign> LoginSignSlice {
      get { return loginSignSlice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginSignSliceABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginSignSliceABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!loginSignSlice_.Equals(other.loginSignSlice_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= loginSignSlice_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      loginSignSlice_.WriteTo(output, _repeated_loginSignSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      loginSignSlice_.WriteTo(ref output, _repeated_loginSignSlice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += loginSignSlice_.CalculateSize(_repeated_loginSignSlice_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginSignSliceABValue other) {
      if (other == null) {
        return;
      }
      loginSignSlice_.Add(other.loginSignSlice_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            loginSignSlice_.AddEntriesFrom(input, _repeated_loginSignSlice_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            loginSignSlice_.AddEntriesFrom(ref input, _repeated_loginSignSlice_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LoginSignConf : pb::IMessage<LoginSignConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoginSignConf> _parser = new pb::MessageParser<LoginSignConf>(() => new LoginSignConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginSignConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.LoginSignConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginSignConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginSignConf(LoginSignConf other) : this() {
      loginSignSlice_ = other.loginSignSlice_.Clone();
      loginSignSliceAB_ = other.loginSignSliceAB_.Clone();
      loginSignSliceABPatch_ = other.loginSignSliceABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginSignConf Clone() {
      return new LoginSignConf(this);
    }

    /// <summary>Field number for the "LoginSignSlice" field.</summary>
    public const int LoginSignSliceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.rawdata.LoginSign> _repeated_loginSignSlice_codec
        = pb::FieldCodec.ForMessage(10, global::fat.rawdata.LoginSign.Parser);
    private readonly pbc::RepeatedField<global::fat.rawdata.LoginSign> loginSignSlice_ = new pbc::RepeatedField<global::fat.rawdata.LoginSign>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.rawdata.LoginSign> LoginSignSlice {
      get { return loginSignSlice_; }
    }

    /// <summary>Field number for the "LoginSignSliceAB" field.</summary>
    public const int LoginSignSliceABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.LoginSignSliceABValue>.Codec _map_loginSignSliceAB_codec
        = new pbc::MapField<string, global::fat.rawdata.LoginSignSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.LoginSignSliceABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.LoginSignSliceABValue> loginSignSliceAB_ = new pbc::MapField<string, global::fat.rawdata.LoginSignSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.LoginSignSliceABValue> LoginSignSliceAB {
      get { return loginSignSliceAB_; }
    }

    /// <summary>Field number for the "LoginSignSliceABPatch" field.</summary>
    public const int LoginSignSliceABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.LoginSignSliceABValue>.Codec _map_loginSignSliceABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.LoginSignSliceABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.LoginSignSliceABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.LoginSignSliceABValue> loginSignSliceABPatch_ = new pbc::MapField<string, global::fat.rawdata.LoginSignSliceABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.LoginSignSliceABValue> LoginSignSliceABPatch {
      get { return loginSignSliceABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginSignConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginSignConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!loginSignSlice_.Equals(other.loginSignSlice_)) return false;
      if (!LoginSignSliceAB.Equals(other.LoginSignSliceAB)) return false;
      if (!LoginSignSliceABPatch.Equals(other.LoginSignSliceABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= loginSignSlice_.GetHashCode();
      hash ^= LoginSignSliceAB.GetHashCode();
      hash ^= LoginSignSliceABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      loginSignSlice_.WriteTo(output, _repeated_loginSignSlice_codec);
      loginSignSliceAB_.WriteTo(output, _map_loginSignSliceAB_codec);
      loginSignSliceABPatch_.WriteTo(output, _map_loginSignSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      loginSignSlice_.WriteTo(ref output, _repeated_loginSignSlice_codec);
      loginSignSliceAB_.WriteTo(ref output, _map_loginSignSliceAB_codec);
      loginSignSliceABPatch_.WriteTo(ref output, _map_loginSignSliceABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += loginSignSlice_.CalculateSize(_repeated_loginSignSlice_codec);
      size += loginSignSliceAB_.CalculateSize(_map_loginSignSliceAB_codec);
      size += loginSignSliceABPatch_.CalculateSize(_map_loginSignSliceABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginSignConf other) {
      if (other == null) {
        return;
      }
      loginSignSlice_.Add(other.loginSignSlice_);
      loginSignSliceAB_.Add(other.loginSignSliceAB_);
      loginSignSliceABPatch_.Add(other.loginSignSliceABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            loginSignSlice_.AddEntriesFrom(input, _repeated_loginSignSlice_codec);
            break;
          }
          case 18: {
            loginSignSliceAB_.AddEntriesFrom(input, _map_loginSignSliceAB_codec);
            break;
          }
          case 26: {
            loginSignSliceABPatch_.AddEntriesFrom(input, _map_loginSignSliceABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            loginSignSlice_.AddEntriesFrom(ref input, _repeated_loginSignSlice_codec);
            break;
          }
          case 18: {
            loginSignSliceAB_.AddEntriesFrom(ref input, _map_loginSignSliceAB_codec);
            break;
          }
          case 26: {
            loginSignSliceABPatch_.AddEntriesFrom(ref input, _map_loginSignSliceABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
