// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventMiniBoardDetailConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventMiniBoardDetailConf.proto</summary>
  public static partial class EventMiniBoardDetailConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventMiniBoardDetailConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventMiniBoardDetailConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZyYXdkYXRhL0V2ZW50TWluaUJvYXJkRGV0YWlsQ29uZi5wcm90bxIHcmF3",
            "ZGF0YSJ2ChRFdmVudE1pbmlCb2FyZERldGFpbBIKCgJpZBgBIAEoBRIPCgdi",
            "b2FyZElkGAIgASgFEgwKBGRpZmYYBiABKAUSDwoHaXRlbU51bRgDIAEoCRIR",
            "CglsZXZlbEl0ZW0YBCADKAUSDwoHbGV2ZWxpZBgFIAMoBSLmAQoeRXZlbnRN",
            "aW5pQm9hcmREZXRhaWxNYXBBQlZhbHVlEmUKF0V2ZW50TWluaUJvYXJkRGV0",
            "YWlsTWFwGAEgAygLMkQucmF3ZGF0YS5FdmVudE1pbmlCb2FyZERldGFpbE1h",
            "cEFCVmFsdWUuRXZlbnRNaW5pQm9hcmREZXRhaWxNYXBFbnRyeRpdChxFdmVu",
            "dE1pbmlCb2FyZERldGFpbE1hcEVudHJ5EgsKA2tleRgBIAEoBRIsCgV2YWx1",
            "ZRgCIAEoCzIdLnJhd2RhdGEuRXZlbnRNaW5pQm9hcmREZXRhaWw6AjgBIokF",
            "ChhFdmVudE1pbmlCb2FyZERldGFpbENvbmYSXwoXRXZlbnRNaW5pQm9hcmRE",
            "ZXRhaWxNYXAYASADKAsyPi5yYXdkYXRhLkV2ZW50TWluaUJvYXJkRGV0YWls",
            "Q29uZi5FdmVudE1pbmlCb2FyZERldGFpbE1hcEVudHJ5EmMKGUV2ZW50TWlu",
            "aUJvYXJkRGV0YWlsTWFwQUIYAiADKAsyQC5yYXdkYXRhLkV2ZW50TWluaUJv",
            "YXJkRGV0YWlsQ29uZi5FdmVudE1pbmlCb2FyZERldGFpbE1hcEFCRW50cnkS",
            "bQoeRXZlbnRNaW5pQm9hcmREZXRhaWxNYXBBQlBhdGNoGAMgAygLMkUucmF3",
            "ZGF0YS5FdmVudE1pbmlCb2FyZERldGFpbENvbmYuRXZlbnRNaW5pQm9hcmRE",
            "ZXRhaWxNYXBBQlBhdGNoRW50cnkaXQocRXZlbnRNaW5pQm9hcmREZXRhaWxN",
            "YXBFbnRyeRILCgNrZXkYASABKAUSLAoFdmFsdWUYAiABKAsyHS5yYXdkYXRh",
            "LkV2ZW50TWluaUJvYXJkRGV0YWlsOgI4ARppCh5FdmVudE1pbmlCb2FyZERl",
            "dGFpbE1hcEFCRW50cnkSCwoDa2V5GAEgASgJEjYKBXZhbHVlGAIgASgLMicu",
            "cmF3ZGF0YS5FdmVudE1pbmlCb2FyZERldGFpbE1hcEFCVmFsdWU6AjgBGm4K",
            "I0V2ZW50TWluaUJvYXJkRGV0YWlsTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgB",
            "IAEoCRI2CgV2YWx1ZRgCIAEoCzInLnJhd2RhdGEuRXZlbnRNaW5pQm9hcmRE",
            "ZXRhaWxNYXBBQlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQv",
            "Y29uZi9nZW4vZ29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMiniBoardDetail), global::fat.rawdata.EventMiniBoardDetail.Parser, new[]{ "Id", "BoardId", "Diff", "ItemNum", "LevelItem", "Levelid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMiniBoardDetailMapABValue), global::fat.rawdata.EventMiniBoardDetailMapABValue.Parser, new[]{ "EventMiniBoardDetailMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventMiniBoardDetailConf), global::fat.rawdata.EventMiniBoardDetailConf.Parser, new[]{ "EventMiniBoardDetailMap", "EventMiniBoardDetailMapAB", "EventMiniBoardDetailMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventMiniBoardDetail",table="EventMiniBoardDetailMap",table_wrapper="EventMiniBoardDetailConf",map="true",map_key_type="int32",data="EventMiniBoardDetailConf")
  /// annotation@ab(table_ab="EventMiniBoardDetailMapAB",table_ab_patch="EventMiniBoardDetailMapABPatch",table_ab_value="EventMiniBoardDetailMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventMiniBoardDetail(id="id")
  /// </summary>
  public sealed partial class EventMiniBoardDetail : pb::IMessage<EventMiniBoardDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMiniBoardDetail> _parser = new pb::MessageParser<EventMiniBoardDetail>(() => new EventMiniBoardDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMiniBoardDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMiniBoardDetailConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardDetail(EventMiniBoardDetail other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      diff_ = other.diff_;
      itemNum_ = other.itemNum_;
      levelItem_ = other.levelItem_.Clone();
      levelid_ = other.levelid_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardDetail Clone() {
      return new EventMiniBoardDetail(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 棋盘ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "diff" field.</summary>
    public const int DiffFieldNumber = 6;
    private int diff_;
    /// <summary>
    /// 难度
    /// （仅TGA使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diff {
      get { return diff_; }
      set {
        diff_ = value;
      }
    }

    /// <summary>Field number for the "itemNum" field.</summary>
    public const int ItemNumFieldNumber = 3;
    private string itemNum_ = "";
    /// <summary>
    /// 初始值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "levelItem" field.</summary>
    public const int LevelItemFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_levelItem_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> levelItem_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 目标棋子进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LevelItem {
      get { return levelItem_; }
    }

    /// <summary>Field number for the "levelid" field.</summary>
    public const int LevelidFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_levelid_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> levelid_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 对应阶段掉落信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Levelid {
      get { return levelid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMiniBoardDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMiniBoardDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (Diff != other.Diff) return false;
      if (ItemNum != other.ItemNum) return false;
      if(!levelItem_.Equals(other.levelItem_)) return false;
      if(!levelid_.Equals(other.levelid_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (Diff != 0) hash ^= Diff.GetHashCode();
      if (ItemNum.Length != 0) hash ^= ItemNum.GetHashCode();
      hash ^= levelItem_.GetHashCode();
      hash ^= levelid_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (ItemNum.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ItemNum);
      }
      levelItem_.WriteTo(output, _repeated_levelItem_codec);
      levelid_.WriteTo(output, _repeated_levelid_codec);
      if (Diff != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Diff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (ItemNum.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ItemNum);
      }
      levelItem_.WriteTo(ref output, _repeated_levelItem_codec);
      levelid_.WriteTo(ref output, _repeated_levelid_codec);
      if (Diff != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Diff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (Diff != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diff);
      }
      if (ItemNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemNum);
      }
      size += levelItem_.CalculateSize(_repeated_levelItem_codec);
      size += levelid_.CalculateSize(_repeated_levelid_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMiniBoardDetail other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.Diff != 0) {
        Diff = other.Diff;
      }
      if (other.ItemNum.Length != 0) {
        ItemNum = other.ItemNum;
      }
      levelItem_.Add(other.levelItem_);
      levelid_.Add(other.levelid_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 26: {
            ItemNum = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            levelItem_.AddEntriesFrom(input, _repeated_levelItem_codec);
            break;
          }
          case 42:
          case 40: {
            levelid_.AddEntriesFrom(input, _repeated_levelid_codec);
            break;
          }
          case 48: {
            Diff = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 26: {
            ItemNum = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            levelItem_.AddEntriesFrom(ref input, _repeated_levelItem_codec);
            break;
          }
          case 42:
          case 40: {
            levelid_.AddEntriesFrom(ref input, _repeated_levelid_codec);
            break;
          }
          case 48: {
            Diff = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMiniBoardDetailMapABValue : pb::IMessage<EventMiniBoardDetailMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMiniBoardDetailMapABValue> _parser = new pb::MessageParser<EventMiniBoardDetailMapABValue>(() => new EventMiniBoardDetailMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMiniBoardDetailMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMiniBoardDetailConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardDetailMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardDetailMapABValue(EventMiniBoardDetailMapABValue other) : this() {
      eventMiniBoardDetailMap_ = other.eventMiniBoardDetailMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardDetailMapABValue Clone() {
      return new EventMiniBoardDetailMapABValue(this);
    }

    /// <summary>Field number for the "EventMiniBoardDetailMap" field.</summary>
    public const int EventMiniBoardDetailMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoardDetail>.Codec _map_eventMiniBoardDetailMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMiniBoardDetail>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoardDetail.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoardDetail> eventMiniBoardDetailMap_ = new pbc::MapField<int, global::fat.rawdata.EventMiniBoardDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMiniBoardDetail> EventMiniBoardDetailMap {
      get { return eventMiniBoardDetailMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMiniBoardDetailMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMiniBoardDetailMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMiniBoardDetailMap.Equals(other.EventMiniBoardDetailMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMiniBoardDetailMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMiniBoardDetailMap_.WriteTo(output, _map_eventMiniBoardDetailMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMiniBoardDetailMap_.WriteTo(ref output, _map_eventMiniBoardDetailMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMiniBoardDetailMap_.CalculateSize(_map_eventMiniBoardDetailMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMiniBoardDetailMapABValue other) {
      if (other == null) {
        return;
      }
      eventMiniBoardDetailMap_.Add(other.eventMiniBoardDetailMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMiniBoardDetailMap_.AddEntriesFrom(input, _map_eventMiniBoardDetailMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMiniBoardDetailMap_.AddEntriesFrom(ref input, _map_eventMiniBoardDetailMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventMiniBoardDetailConf : pb::IMessage<EventMiniBoardDetailConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventMiniBoardDetailConf> _parser = new pb::MessageParser<EventMiniBoardDetailConf>(() => new EventMiniBoardDetailConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMiniBoardDetailConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventMiniBoardDetailConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardDetailConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardDetailConf(EventMiniBoardDetailConf other) : this() {
      eventMiniBoardDetailMap_ = other.eventMiniBoardDetailMap_.Clone();
      eventMiniBoardDetailMapAB_ = other.eventMiniBoardDetailMapAB_.Clone();
      eventMiniBoardDetailMapABPatch_ = other.eventMiniBoardDetailMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMiniBoardDetailConf Clone() {
      return new EventMiniBoardDetailConf(this);
    }

    /// <summary>Field number for the "EventMiniBoardDetailMap" field.</summary>
    public const int EventMiniBoardDetailMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoardDetail>.Codec _map_eventMiniBoardDetailMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventMiniBoardDetail>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoardDetail.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventMiniBoardDetail> eventMiniBoardDetailMap_ = new pbc::MapField<int, global::fat.rawdata.EventMiniBoardDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventMiniBoardDetail> EventMiniBoardDetailMap {
      get { return eventMiniBoardDetailMap_; }
    }

    /// <summary>Field number for the "EventMiniBoardDetailMapAB" field.</summary>
    public const int EventMiniBoardDetailMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardDetailMapABValue>.Codec _map_eventMiniBoardDetailMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardDetailMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoardDetailMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardDetailMapABValue> eventMiniBoardDetailMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardDetailMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMiniBoardDetailMapABValue> EventMiniBoardDetailMapAB {
      get { return eventMiniBoardDetailMapAB_; }
    }

    /// <summary>Field number for the "EventMiniBoardDetailMapABPatch" field.</summary>
    public const int EventMiniBoardDetailMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardDetailMapABValue>.Codec _map_eventMiniBoardDetailMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardDetailMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventMiniBoardDetailMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventMiniBoardDetailMapABValue> eventMiniBoardDetailMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventMiniBoardDetailMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventMiniBoardDetailMapABValue> EventMiniBoardDetailMapABPatch {
      get { return eventMiniBoardDetailMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMiniBoardDetailConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMiniBoardDetailConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventMiniBoardDetailMap.Equals(other.EventMiniBoardDetailMap)) return false;
      if (!EventMiniBoardDetailMapAB.Equals(other.EventMiniBoardDetailMapAB)) return false;
      if (!EventMiniBoardDetailMapABPatch.Equals(other.EventMiniBoardDetailMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventMiniBoardDetailMap.GetHashCode();
      hash ^= EventMiniBoardDetailMapAB.GetHashCode();
      hash ^= EventMiniBoardDetailMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventMiniBoardDetailMap_.WriteTo(output, _map_eventMiniBoardDetailMap_codec);
      eventMiniBoardDetailMapAB_.WriteTo(output, _map_eventMiniBoardDetailMapAB_codec);
      eventMiniBoardDetailMapABPatch_.WriteTo(output, _map_eventMiniBoardDetailMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventMiniBoardDetailMap_.WriteTo(ref output, _map_eventMiniBoardDetailMap_codec);
      eventMiniBoardDetailMapAB_.WriteTo(ref output, _map_eventMiniBoardDetailMapAB_codec);
      eventMiniBoardDetailMapABPatch_.WriteTo(ref output, _map_eventMiniBoardDetailMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventMiniBoardDetailMap_.CalculateSize(_map_eventMiniBoardDetailMap_codec);
      size += eventMiniBoardDetailMapAB_.CalculateSize(_map_eventMiniBoardDetailMapAB_codec);
      size += eventMiniBoardDetailMapABPatch_.CalculateSize(_map_eventMiniBoardDetailMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMiniBoardDetailConf other) {
      if (other == null) {
        return;
      }
      eventMiniBoardDetailMap_.Add(other.eventMiniBoardDetailMap_);
      eventMiniBoardDetailMapAB_.Add(other.eventMiniBoardDetailMapAB_);
      eventMiniBoardDetailMapABPatch_.Add(other.eventMiniBoardDetailMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventMiniBoardDetailMap_.AddEntriesFrom(input, _map_eventMiniBoardDetailMap_codec);
            break;
          }
          case 18: {
            eventMiniBoardDetailMapAB_.AddEntriesFrom(input, _map_eventMiniBoardDetailMapAB_codec);
            break;
          }
          case 26: {
            eventMiniBoardDetailMapABPatch_.AddEntriesFrom(input, _map_eventMiniBoardDetailMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventMiniBoardDetailMap_.AddEntriesFrom(ref input, _map_eventMiniBoardDetailMap_codec);
            break;
          }
          case 18: {
            eventMiniBoardDetailMapAB_.AddEntriesFrom(ref input, _map_eventMiniBoardDetailMapAB_codec);
            break;
          }
          case 26: {
            eventMiniBoardDetailMapABPatch_.AddEntriesFrom(ref input, _map_eventMiniBoardDetailMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
