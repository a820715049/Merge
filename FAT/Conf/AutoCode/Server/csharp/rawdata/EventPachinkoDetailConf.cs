// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventPachinkoDetailConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventPachinkoDetailConf.proto</summary>
  public static partial class EventPachinkoDetailConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventPachinkoDetailConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventPachinkoDetailConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVyYXdkYXRhL0V2ZW50UGFjaGlua29EZXRhaWxDb25mLnByb3RvEgdyYXdk",
            "YXRhIoQCChNFdmVudFBhY2hpbmtvRGV0YWlsEgoKAmlkGAEgASgFEhgKEElu",
            "Y2x1ZGVEcm9wUmFuZ2UYByADKAUSFwoPY3ljbGVMZXZlbFNjb3JlGAIgASgF",
            "EhcKD2N5Y2xlTGV2ZWxUb2tlbhgDIAEoCRIMCgRkaWZmGAsgASgFEhUKDWlu",
            "Y2x1ZGVCdW1wZXIYCCABKAkSGQoRaW5jbHVkZURyb3BCdXR0b24YBCADKAUS",
            "GAoQaW5jbHVkZU1pbGVzdG9uZRgJIAMoBRISCgpsZXZlbFNjb3JlGAUgAygF",
            "EhIKCmxldmVsVG9rZW4YBiADKAkSEwoLbWFjaGluZUluZm8YCiABKAki4AEK",
            "HUV2ZW50UGFjaGlua29EZXRhaWxNYXBBQlZhbHVlEmIKFkV2ZW50UGFjaGlu",
            "a29EZXRhaWxNYXAYASADKAsyQi5yYXdkYXRhLkV2ZW50UGFjaGlua29EZXRh",
            "aWxNYXBBQlZhbHVlLkV2ZW50UGFjaGlua29EZXRhaWxNYXBFbnRyeRpbChtF",
            "dmVudFBhY2hpbmtvRGV0YWlsTWFwRW50cnkSCwoDa2V5GAEgASgFEisKBXZh",
            "bHVlGAIgASgLMhwucmF3ZGF0YS5FdmVudFBhY2hpbmtvRGV0YWlsOgI4ASL5",
            "BAoXRXZlbnRQYWNoaW5rb0RldGFpbENvbmYSXAoWRXZlbnRQYWNoaW5rb0Rl",
            "dGFpbE1hcBgBIAMoCzI8LnJhd2RhdGEuRXZlbnRQYWNoaW5rb0RldGFpbENv",
            "bmYuRXZlbnRQYWNoaW5rb0RldGFpbE1hcEVudHJ5EmAKGEV2ZW50UGFjaGlu",
            "a29EZXRhaWxNYXBBQhgCIAMoCzI+LnJhd2RhdGEuRXZlbnRQYWNoaW5rb0Rl",
            "dGFpbENvbmYuRXZlbnRQYWNoaW5rb0RldGFpbE1hcEFCRW50cnkSagodRXZl",
            "bnRQYWNoaW5rb0RldGFpbE1hcEFCUGF0Y2gYAyADKAsyQy5yYXdkYXRhLkV2",
            "ZW50UGFjaGlua29EZXRhaWxDb25mLkV2ZW50UGFjaGlua29EZXRhaWxNYXBB",
            "QlBhdGNoRW50cnkaWwobRXZlbnRQYWNoaW5rb0RldGFpbE1hcEVudHJ5EgsK",
            "A2tleRgBIAEoBRIrCgV2YWx1ZRgCIAEoCzIcLnJhd2RhdGEuRXZlbnRQYWNo",
            "aW5rb0RldGFpbDoCOAEaZwodRXZlbnRQYWNoaW5rb0RldGFpbE1hcEFCRW50",
            "cnkSCwoDa2V5GAEgASgJEjUKBXZhbHVlGAIgASgLMiYucmF3ZGF0YS5FdmVu",
            "dFBhY2hpbmtvRGV0YWlsTWFwQUJWYWx1ZToCOAEabAoiRXZlbnRQYWNoaW5r",
            "b0RldGFpbE1hcEFCUGF0Y2hFbnRyeRILCgNrZXkYASABKAkSNQoFdmFsdWUY",
            "AiABKAsyJi5yYXdkYXRhLkV2ZW50UGFjaGlua29EZXRhaWxNYXBBQlZhbHVl",
            "OgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5n",
            "L3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventPachinkoDetail), global::fat.rawdata.EventPachinkoDetail.Parser, new[]{ "Id", "IncludeDropRange", "CycleLevelScore", "CycleLevelToken", "Diff", "IncludeBumper", "IncludeDropButton", "IncludeMilestone", "LevelScore", "LevelToken", "MachineInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventPachinkoDetailMapABValue), global::fat.rawdata.EventPachinkoDetailMapABValue.Parser, new[]{ "EventPachinkoDetailMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventPachinkoDetailConf), global::fat.rawdata.EventPachinkoDetailConf.Parser, new[]{ "EventPachinkoDetailMap", "EventPachinkoDetailMapAB", "EventPachinkoDetailMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventPachinkoDetail",table="EventPachinkoDetailMap",table_wrapper="EventPachinkoDetailConf",map="true",map_key_type="int32",data="EventPachinkoDetailConf")
  /// annotation@ab(table_ab="EventPachinkoDetailMapAB",table_ab_patch="EventPachinkoDetailMapABPatch",table_ab_value="EventPachinkoDetailMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventPachinkoDetail(id="id")
  /// </summary>
  public sealed partial class EventPachinkoDetail : pb::IMessage<EventPachinkoDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventPachinkoDetail> _parser = new pb::MessageParser<EventPachinkoDetail>(() => new EventPachinkoDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventPachinkoDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventPachinkoDetailConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoDetail(EventPachinkoDetail other) : this() {
      id_ = other.id_;
      includeDropRange_ = other.includeDropRange_.Clone();
      cycleLevelScore_ = other.cycleLevelScore_;
      cycleLevelToken_ = other.cycleLevelToken_;
      diff_ = other.diff_;
      includeBumper_ = other.includeBumper_;
      includeDropButton_ = other.includeDropButton_.Clone();
      includeMilestone_ = other.includeMilestone_.Clone();
      levelScore_ = other.levelScore_.Clone();
      levelToken_ = other.levelToken_.Clone();
      machineInfo_ = other.machineInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoDetail Clone() {
      return new EventPachinkoDetail(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// detailId
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "IncludeDropRange" field.</summary>
    public const int IncludeDropRangeFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_includeDropRange_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> includeDropRange_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 掉落区间对应的能量值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IncludeDropRange {
      get { return includeDropRange_; }
    }

    /// <summary>Field number for the "cycleLevelScore" field.</summary>
    public const int CycleLevelScoreFieldNumber = 2;
    private int cycleLevelScore_;
    /// <summary>
    /// 循环进度积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CycleLevelScore {
      get { return cycleLevelScore_; }
      set {
        cycleLevelScore_ = value;
      }
    }

    /// <summary>Field number for the "cycleLevelToken" field.</summary>
    public const int CycleLevelTokenFieldNumber = 3;
    private string cycleLevelToken_ = "";
    /// <summary>
    /// 循环奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CycleLevelToken {
      get { return cycleLevelToken_; }
      set {
        cycleLevelToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "diff" field.</summary>
    public const int DiffFieldNumber = 11;
    private int diff_;
    /// <summary>
    /// 难度
    /// （仅TGA使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diff {
      get { return diff_; }
      set {
        diff_ = value;
      }
    }

    /// <summary>Field number for the "includeBumper" field.</summary>
    public const int IncludeBumperFieldNumber = 8;
    private string includeBumper_ = "";
    /// <summary>
    /// 保险杠
    /// BumperInfo.id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IncludeBumper {
      get { return includeBumper_; }
      set {
        includeBumper_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "includeDropButton" field.</summary>
    public const int IncludeDropButtonFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_includeDropButton_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> includeDropButton_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 掉落孔道
    /// PachinkoDrop.id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IncludeDropButton {
      get { return includeDropButton_; }
    }

    /// <summary>Field number for the "includeMilestone" field.</summary>
    public const int IncludeMilestoneFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_includeMilestone_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> includeMilestone_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 里程碑
    /// EventPachinkoMileStone.id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IncludeMilestone {
      get { return includeMilestone_; }
    }

    /// <summary>Field number for the "levelScore" field.</summary>
    public const int LevelScoreFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_levelScore_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> levelScore_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 进度积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LevelScore {
      get { return levelScore_; }
    }

    /// <summary>Field number for the "levelToken" field.</summary>
    public const int LevelTokenFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_levelToken_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> levelToken_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LevelToken {
      get { return levelToken_; }
    }

    /// <summary>Field number for the "machineInfo" field.</summary>
    public const int MachineInfoFieldNumber = 10;
    private string machineInfo_ = "";
    /// <summary>
    /// 关卡prefab
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachineInfo {
      get { return machineInfo_; }
      set {
        machineInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventPachinkoDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventPachinkoDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!includeDropRange_.Equals(other.includeDropRange_)) return false;
      if (CycleLevelScore != other.CycleLevelScore) return false;
      if (CycleLevelToken != other.CycleLevelToken) return false;
      if (Diff != other.Diff) return false;
      if (IncludeBumper != other.IncludeBumper) return false;
      if(!includeDropButton_.Equals(other.includeDropButton_)) return false;
      if(!includeMilestone_.Equals(other.includeMilestone_)) return false;
      if(!levelScore_.Equals(other.levelScore_)) return false;
      if(!levelToken_.Equals(other.levelToken_)) return false;
      if (MachineInfo != other.MachineInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= includeDropRange_.GetHashCode();
      if (CycleLevelScore != 0) hash ^= CycleLevelScore.GetHashCode();
      if (CycleLevelToken.Length != 0) hash ^= CycleLevelToken.GetHashCode();
      if (Diff != 0) hash ^= Diff.GetHashCode();
      if (IncludeBumper.Length != 0) hash ^= IncludeBumper.GetHashCode();
      hash ^= includeDropButton_.GetHashCode();
      hash ^= includeMilestone_.GetHashCode();
      hash ^= levelScore_.GetHashCode();
      hash ^= levelToken_.GetHashCode();
      if (MachineInfo.Length != 0) hash ^= MachineInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CycleLevelScore != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CycleLevelScore);
      }
      if (CycleLevelToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CycleLevelToken);
      }
      includeDropButton_.WriteTo(output, _repeated_includeDropButton_codec);
      levelScore_.WriteTo(output, _repeated_levelScore_codec);
      levelToken_.WriteTo(output, _repeated_levelToken_codec);
      includeDropRange_.WriteTo(output, _repeated_includeDropRange_codec);
      if (IncludeBumper.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(IncludeBumper);
      }
      includeMilestone_.WriteTo(output, _repeated_includeMilestone_codec);
      if (MachineInfo.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(MachineInfo);
      }
      if (Diff != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Diff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CycleLevelScore != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CycleLevelScore);
      }
      if (CycleLevelToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CycleLevelToken);
      }
      includeDropButton_.WriteTo(ref output, _repeated_includeDropButton_codec);
      levelScore_.WriteTo(ref output, _repeated_levelScore_codec);
      levelToken_.WriteTo(ref output, _repeated_levelToken_codec);
      includeDropRange_.WriteTo(ref output, _repeated_includeDropRange_codec);
      if (IncludeBumper.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(IncludeBumper);
      }
      includeMilestone_.WriteTo(ref output, _repeated_includeMilestone_codec);
      if (MachineInfo.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(MachineInfo);
      }
      if (Diff != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Diff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += includeDropRange_.CalculateSize(_repeated_includeDropRange_codec);
      if (CycleLevelScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CycleLevelScore);
      }
      if (CycleLevelToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CycleLevelToken);
      }
      if (Diff != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diff);
      }
      if (IncludeBumper.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IncludeBumper);
      }
      size += includeDropButton_.CalculateSize(_repeated_includeDropButton_codec);
      size += includeMilestone_.CalculateSize(_repeated_includeMilestone_codec);
      size += levelScore_.CalculateSize(_repeated_levelScore_codec);
      size += levelToken_.CalculateSize(_repeated_levelToken_codec);
      if (MachineInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventPachinkoDetail other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      includeDropRange_.Add(other.includeDropRange_);
      if (other.CycleLevelScore != 0) {
        CycleLevelScore = other.CycleLevelScore;
      }
      if (other.CycleLevelToken.Length != 0) {
        CycleLevelToken = other.CycleLevelToken;
      }
      if (other.Diff != 0) {
        Diff = other.Diff;
      }
      if (other.IncludeBumper.Length != 0) {
        IncludeBumper = other.IncludeBumper;
      }
      includeDropButton_.Add(other.includeDropButton_);
      includeMilestone_.Add(other.includeMilestone_);
      levelScore_.Add(other.levelScore_);
      levelToken_.Add(other.levelToken_);
      if (other.MachineInfo.Length != 0) {
        MachineInfo = other.MachineInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            CycleLevelScore = input.ReadInt32();
            break;
          }
          case 26: {
            CycleLevelToken = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            includeDropButton_.AddEntriesFrom(input, _repeated_includeDropButton_codec);
            break;
          }
          case 42:
          case 40: {
            levelScore_.AddEntriesFrom(input, _repeated_levelScore_codec);
            break;
          }
          case 50: {
            levelToken_.AddEntriesFrom(input, _repeated_levelToken_codec);
            break;
          }
          case 58:
          case 56: {
            includeDropRange_.AddEntriesFrom(input, _repeated_includeDropRange_codec);
            break;
          }
          case 66: {
            IncludeBumper = input.ReadString();
            break;
          }
          case 74:
          case 72: {
            includeMilestone_.AddEntriesFrom(input, _repeated_includeMilestone_codec);
            break;
          }
          case 82: {
            MachineInfo = input.ReadString();
            break;
          }
          case 88: {
            Diff = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            CycleLevelScore = input.ReadInt32();
            break;
          }
          case 26: {
            CycleLevelToken = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            includeDropButton_.AddEntriesFrom(ref input, _repeated_includeDropButton_codec);
            break;
          }
          case 42:
          case 40: {
            levelScore_.AddEntriesFrom(ref input, _repeated_levelScore_codec);
            break;
          }
          case 50: {
            levelToken_.AddEntriesFrom(ref input, _repeated_levelToken_codec);
            break;
          }
          case 58:
          case 56: {
            includeDropRange_.AddEntriesFrom(ref input, _repeated_includeDropRange_codec);
            break;
          }
          case 66: {
            IncludeBumper = input.ReadString();
            break;
          }
          case 74:
          case 72: {
            includeMilestone_.AddEntriesFrom(ref input, _repeated_includeMilestone_codec);
            break;
          }
          case 82: {
            MachineInfo = input.ReadString();
            break;
          }
          case 88: {
            Diff = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventPachinkoDetailMapABValue : pb::IMessage<EventPachinkoDetailMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventPachinkoDetailMapABValue> _parser = new pb::MessageParser<EventPachinkoDetailMapABValue>(() => new EventPachinkoDetailMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventPachinkoDetailMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventPachinkoDetailConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoDetailMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoDetailMapABValue(EventPachinkoDetailMapABValue other) : this() {
      eventPachinkoDetailMap_ = other.eventPachinkoDetailMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoDetailMapABValue Clone() {
      return new EventPachinkoDetailMapABValue(this);
    }

    /// <summary>Field number for the "EventPachinkoDetailMap" field.</summary>
    public const int EventPachinkoDetailMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventPachinkoDetail>.Codec _map_eventPachinkoDetailMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventPachinkoDetail>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPachinkoDetail.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventPachinkoDetail> eventPachinkoDetailMap_ = new pbc::MapField<int, global::fat.rawdata.EventPachinkoDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventPachinkoDetail> EventPachinkoDetailMap {
      get { return eventPachinkoDetailMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventPachinkoDetailMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventPachinkoDetailMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventPachinkoDetailMap.Equals(other.EventPachinkoDetailMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventPachinkoDetailMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventPachinkoDetailMap_.WriteTo(output, _map_eventPachinkoDetailMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventPachinkoDetailMap_.WriteTo(ref output, _map_eventPachinkoDetailMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventPachinkoDetailMap_.CalculateSize(_map_eventPachinkoDetailMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventPachinkoDetailMapABValue other) {
      if (other == null) {
        return;
      }
      eventPachinkoDetailMap_.Add(other.eventPachinkoDetailMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventPachinkoDetailMap_.AddEntriesFrom(input, _map_eventPachinkoDetailMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventPachinkoDetailMap_.AddEntriesFrom(ref input, _map_eventPachinkoDetailMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventPachinkoDetailConf : pb::IMessage<EventPachinkoDetailConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventPachinkoDetailConf> _parser = new pb::MessageParser<EventPachinkoDetailConf>(() => new EventPachinkoDetailConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventPachinkoDetailConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventPachinkoDetailConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoDetailConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoDetailConf(EventPachinkoDetailConf other) : this() {
      eventPachinkoDetailMap_ = other.eventPachinkoDetailMap_.Clone();
      eventPachinkoDetailMapAB_ = other.eventPachinkoDetailMapAB_.Clone();
      eventPachinkoDetailMapABPatch_ = other.eventPachinkoDetailMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventPachinkoDetailConf Clone() {
      return new EventPachinkoDetailConf(this);
    }

    /// <summary>Field number for the "EventPachinkoDetailMap" field.</summary>
    public const int EventPachinkoDetailMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventPachinkoDetail>.Codec _map_eventPachinkoDetailMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventPachinkoDetail>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPachinkoDetail.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventPachinkoDetail> eventPachinkoDetailMap_ = new pbc::MapField<int, global::fat.rawdata.EventPachinkoDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventPachinkoDetail> EventPachinkoDetailMap {
      get { return eventPachinkoDetailMap_; }
    }

    /// <summary>Field number for the "EventPachinkoDetailMapAB" field.</summary>
    public const int EventPachinkoDetailMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventPachinkoDetailMapABValue>.Codec _map_eventPachinkoDetailMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventPachinkoDetailMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPachinkoDetailMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventPachinkoDetailMapABValue> eventPachinkoDetailMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventPachinkoDetailMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventPachinkoDetailMapABValue> EventPachinkoDetailMapAB {
      get { return eventPachinkoDetailMapAB_; }
    }

    /// <summary>Field number for the "EventPachinkoDetailMapABPatch" field.</summary>
    public const int EventPachinkoDetailMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventPachinkoDetailMapABValue>.Codec _map_eventPachinkoDetailMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventPachinkoDetailMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventPachinkoDetailMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventPachinkoDetailMapABValue> eventPachinkoDetailMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventPachinkoDetailMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventPachinkoDetailMapABValue> EventPachinkoDetailMapABPatch {
      get { return eventPachinkoDetailMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventPachinkoDetailConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventPachinkoDetailConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventPachinkoDetailMap.Equals(other.EventPachinkoDetailMap)) return false;
      if (!EventPachinkoDetailMapAB.Equals(other.EventPachinkoDetailMapAB)) return false;
      if (!EventPachinkoDetailMapABPatch.Equals(other.EventPachinkoDetailMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventPachinkoDetailMap.GetHashCode();
      hash ^= EventPachinkoDetailMapAB.GetHashCode();
      hash ^= EventPachinkoDetailMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventPachinkoDetailMap_.WriteTo(output, _map_eventPachinkoDetailMap_codec);
      eventPachinkoDetailMapAB_.WriteTo(output, _map_eventPachinkoDetailMapAB_codec);
      eventPachinkoDetailMapABPatch_.WriteTo(output, _map_eventPachinkoDetailMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventPachinkoDetailMap_.WriteTo(ref output, _map_eventPachinkoDetailMap_codec);
      eventPachinkoDetailMapAB_.WriteTo(ref output, _map_eventPachinkoDetailMapAB_codec);
      eventPachinkoDetailMapABPatch_.WriteTo(ref output, _map_eventPachinkoDetailMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventPachinkoDetailMap_.CalculateSize(_map_eventPachinkoDetailMap_codec);
      size += eventPachinkoDetailMapAB_.CalculateSize(_map_eventPachinkoDetailMapAB_codec);
      size += eventPachinkoDetailMapABPatch_.CalculateSize(_map_eventPachinkoDetailMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventPachinkoDetailConf other) {
      if (other == null) {
        return;
      }
      eventPachinkoDetailMap_.Add(other.eventPachinkoDetailMap_);
      eventPachinkoDetailMapAB_.Add(other.eventPachinkoDetailMapAB_);
      eventPachinkoDetailMapABPatch_.Add(other.eventPachinkoDetailMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventPachinkoDetailMap_.AddEntriesFrom(input, _map_eventPachinkoDetailMap_codec);
            break;
          }
          case 18: {
            eventPachinkoDetailMapAB_.AddEntriesFrom(input, _map_eventPachinkoDetailMapAB_codec);
            break;
          }
          case 26: {
            eventPachinkoDetailMapABPatch_.AddEntriesFrom(input, _map_eventPachinkoDetailMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventPachinkoDetailMap_.AddEntriesFrom(ref input, _map_eventPachinkoDetailMap_codec);
            break;
          }
          case 18: {
            eventPachinkoDetailMapAB_.AddEntriesFrom(ref input, _map_eventPachinkoDetailMapAB_codec);
            break;
          }
          case 26: {
            eventPachinkoDetailMapABPatch_.AddEntriesFrom(ref input, _map_eventPachinkoDetailMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
