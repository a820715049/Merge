// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventRaceConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventRaceConf.proto</summary>
  public static partial class EventRaceConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventRaceConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventRaceConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtyYXdkYXRhL0V2ZW50UmFjZUNvbmYucHJvdG8SB3Jhd2RhdGEiigIKCUV2",
            "ZW50UmFjZRIKCgJpZBgBIAEoBRIPCgdib2FyZElkGAIgASgFEhQKDGN5Y2xl",
            "Um91bmRJZBgDIAEoBRIQCghlbmRUaGVtZRgEIAEoBRISCgpldmVudFRoZW1l",
            "GAYgASgFEhIKCmV4dHJhU2NvcmUYDCABKAUSEAoIaXNSZXZpdmUYDSABKAgS",
            "FQoNbm9ybWFsUm91bmRJZBgHIAMoBRIRCglyYWNlVGhlbWUYCCABKAUSEwoL",
            "cmVmcmVzaFRpbWUYCSABKAUSFgoOcmVxdWlyZVNjb3JlSWQYCiABKAUSFgoO",
            "cm91bmRPdmVyVGhlbWUYCyABKAUSDwoHc3ViVHlwZRgOIAEoBSKkAQoTRXZl",
            "bnRSYWNlTWFwQUJWYWx1ZRJECgxFdmVudFJhY2VNYXAYASADKAsyLi5yYXdk",
            "YXRhLkV2ZW50UmFjZU1hcEFCVmFsdWUuRXZlbnRSYWNlTWFwRW50cnkaRwoR",
            "RXZlbnRSYWNlTWFwRW50cnkSCwoDa2V5GAEgASgFEiEKBXZhbHVlGAIgASgL",
            "MhIucmF3ZGF0YS5FdmVudFJhY2U6AjgBItkDCg1FdmVudFJhY2VDb25mEj4K",
            "DEV2ZW50UmFjZU1hcBgBIAMoCzIoLnJhd2RhdGEuRXZlbnRSYWNlQ29uZi5F",
            "dmVudFJhY2VNYXBFbnRyeRJCCg5FdmVudFJhY2VNYXBBQhgCIAMoCzIqLnJh",
            "d2RhdGEuRXZlbnRSYWNlQ29uZi5FdmVudFJhY2VNYXBBQkVudHJ5EkwKE0V2",
            "ZW50UmFjZU1hcEFCUGF0Y2gYAyADKAsyLy5yYXdkYXRhLkV2ZW50UmFjZUNv",
            "bmYuRXZlbnRSYWNlTWFwQUJQYXRjaEVudHJ5GkcKEUV2ZW50UmFjZU1hcEVu",
            "dHJ5EgsKA2tleRgBIAEoBRIhCgV2YWx1ZRgCIAEoCzISLnJhd2RhdGEuRXZl",
            "bnRSYWNlOgI4ARpTChNFdmVudFJhY2VNYXBBQkVudHJ5EgsKA2tleRgBIAEo",
            "CRIrCgV2YWx1ZRgCIAEoCzIcLnJhd2RhdGEuRXZlbnRSYWNlTWFwQUJWYWx1",
            "ZToCOAEaWAoYRXZlbnRSYWNlTWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEo",
            "CRIrCgV2YWx1ZRgCIAEoCzIcLnJhd2RhdGEuRXZlbnRSYWNlTWFwQUJWYWx1",
            "ZToCOAFCPVotZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2VuL2dvbGFu",
            "Zy9yYXdkYXRhqgILZmF0LnJhd2RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventRace), global::fat.rawdata.EventRace.Parser, new[]{ "Id", "BoardId", "CycleRoundId", "EndTheme", "EventTheme", "ExtraScore", "IsRevive", "NormalRoundId", "RaceTheme", "RefreshTime", "RequireScoreId", "RoundOverTheme", "SubType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventRaceMapABValue), global::fat.rawdata.EventRaceMapABValue.Parser, new[]{ "EventRaceMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventRaceConf), global::fat.rawdata.EventRaceConf.Parser, new[]{ "EventRaceMap", "EventRaceMapAB", "EventRaceMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventRace",table="EventRaceMap",table_wrapper="EventRaceConf",map="true",map_key_type="int32",data="EventRaceConf")
  /// annotation@ab(table_ab="EventRaceMapAB",table_ab_patch="EventRaceMapABPatch",table_ab_value="EventRaceMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventRace(id="id")
  /// </summary>
  public sealed partial class EventRace : pb::IMessage<EventRace>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventRace> _parser = new pb::MessageParser<EventRace>(() => new EventRace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventRaceConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRace(EventRace other) : this() {
      id_ = other.id_;
      boardId_ = other.boardId_;
      cycleRoundId_ = other.cycleRoundId_;
      endTheme_ = other.endTheme_;
      eventTheme_ = other.eventTheme_;
      extraScore_ = other.extraScore_;
      isRevive_ = other.isRevive_;
      normalRoundId_ = other.normalRoundId_.Clone();
      raceTheme_ = other.raceTheme_;
      refreshTime_ = other.refreshTime_;
      requireScoreId_ = other.requireScoreId_;
      roundOverTheme_ = other.roundOverTheme_;
      subType_ = other.subType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRace Clone() {
      return new EventRace(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 2;
    private int boardId_;
    /// <summary>
    /// 适用棋盘
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "cycleRoundId" field.</summary>
    public const int CycleRoundIdFieldNumber = 3;
    private int cycleRoundId_;
    /// <summary>
    /// 循环回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CycleRoundId {
      get { return cycleRoundId_; }
      set {
        cycleRoundId_ = value;
      }
    }

    /// <summary>Field number for the "endTheme" field.</summary>
    public const int EndThemeFieldNumber = 4;
    private int endTheme_;
    /// <summary>
    /// 活动结束弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTheme {
      get { return endTheme_; }
      set {
        endTheme_ = value;
      }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 6;
    private int eventTheme_;
    /// <summary>
    /// 回合开启弹板
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "extraScore" field.</summary>
    public const int ExtraScoreFieldNumber = 12;
    private int extraScore_;
    /// <summary>
    /// 积分模版
    /// （EventExtraScore.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraScore {
      get { return extraScore_; }
      set {
        extraScore_ = value;
      }
    }

    /// <summary>Field number for the "isRevive" field.</summary>
    public const int IsReviveFieldNumber = 13;
    private bool isRevive_;
    /// <summary>
    /// 是否重置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRevive {
      get { return isRevive_; }
      set {
        isRevive_ = value;
      }
    }

    /// <summary>Field number for the "normalRoundId" field.</summary>
    public const int NormalRoundIdFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_normalRoundId_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> normalRoundId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 普通回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NormalRoundId {
      get { return normalRoundId_; }
    }

    /// <summary>Field number for the "raceTheme" field.</summary>
    public const int RaceThemeFieldNumber = 8;
    private int raceTheme_;
    /// <summary>
    /// 排行界面
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RaceTheme {
      get { return raceTheme_; }
      set {
        raceTheme_ = value;
      }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 9;
    private int refreshTime_;
    /// <summary>
    /// 排行刷新间隔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    /// <summary>Field number for the "requireScoreId" field.</summary>
    public const int RequireScoreIdFieldNumber = 10;
    private int requireScoreId_;
    /// <summary>
    /// 积分ID
    /// （ObjBasic.id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireScoreId {
      get { return requireScoreId_; }
      set {
        requireScoreId_ = value;
      }
    }

    /// <summary>Field number for the "roundOverTheme" field.</summary>
    public const int RoundOverThemeFieldNumber = 11;
    private int roundOverTheme_;
    /// <summary>
    /// 回合结束
    /// 活动弹板ID
    /// （EventTheme.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundOverTheme {
      get { return roundOverTheme_; }
      set {
        roundOverTheme_ = value;
      }
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 14;
    private int subType_;
    /// <summary>
    /// 子类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BoardId != other.BoardId) return false;
      if (CycleRoundId != other.CycleRoundId) return false;
      if (EndTheme != other.EndTheme) return false;
      if (EventTheme != other.EventTheme) return false;
      if (ExtraScore != other.ExtraScore) return false;
      if (IsRevive != other.IsRevive) return false;
      if(!normalRoundId_.Equals(other.normalRoundId_)) return false;
      if (RaceTheme != other.RaceTheme) return false;
      if (RefreshTime != other.RefreshTime) return false;
      if (RequireScoreId != other.RequireScoreId) return false;
      if (RoundOverTheme != other.RoundOverTheme) return false;
      if (SubType != other.SubType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (CycleRoundId != 0) hash ^= CycleRoundId.GetHashCode();
      if (EndTheme != 0) hash ^= EndTheme.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (ExtraScore != 0) hash ^= ExtraScore.GetHashCode();
      if (IsRevive != false) hash ^= IsRevive.GetHashCode();
      hash ^= normalRoundId_.GetHashCode();
      if (RaceTheme != 0) hash ^= RaceTheme.GetHashCode();
      if (RefreshTime != 0) hash ^= RefreshTime.GetHashCode();
      if (RequireScoreId != 0) hash ^= RequireScoreId.GetHashCode();
      if (RoundOverTheme != 0) hash ^= RoundOverTheme.GetHashCode();
      if (SubType != 0) hash ^= SubType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (CycleRoundId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CycleRoundId);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTheme);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EventTheme);
      }
      normalRoundId_.WriteTo(output, _repeated_normalRoundId_codec);
      if (RaceTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RaceTheme);
      }
      if (RefreshTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RefreshTime);
      }
      if (RequireScoreId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RequireScoreId);
      }
      if (RoundOverTheme != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RoundOverTheme);
      }
      if (ExtraScore != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ExtraScore);
      }
      if (IsRevive != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsRevive);
      }
      if (SubType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SubType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (BoardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoardId);
      }
      if (CycleRoundId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CycleRoundId);
      }
      if (EndTheme != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTheme);
      }
      if (EventTheme != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EventTheme);
      }
      normalRoundId_.WriteTo(ref output, _repeated_normalRoundId_codec);
      if (RaceTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RaceTheme);
      }
      if (RefreshTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RefreshTime);
      }
      if (RequireScoreId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RequireScoreId);
      }
      if (RoundOverTheme != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RoundOverTheme);
      }
      if (ExtraScore != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ExtraScore);
      }
      if (IsRevive != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsRevive);
      }
      if (SubType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SubType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (CycleRoundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CycleRoundId);
      }
      if (EndTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTheme);
      }
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (ExtraScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraScore);
      }
      if (IsRevive != false) {
        size += 1 + 1;
      }
      size += normalRoundId_.CalculateSize(_repeated_normalRoundId_codec);
      if (RaceTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RaceTheme);
      }
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshTime);
      }
      if (RequireScoreId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequireScoreId);
      }
      if (RoundOverTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundOverTheme);
      }
      if (SubType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRace other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.CycleRoundId != 0) {
        CycleRoundId = other.CycleRoundId;
      }
      if (other.EndTheme != 0) {
        EndTheme = other.EndTheme;
      }
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.ExtraScore != 0) {
        ExtraScore = other.ExtraScore;
      }
      if (other.IsRevive != false) {
        IsRevive = other.IsRevive;
      }
      normalRoundId_.Add(other.normalRoundId_);
      if (other.RaceTheme != 0) {
        RaceTheme = other.RaceTheme;
      }
      if (other.RefreshTime != 0) {
        RefreshTime = other.RefreshTime;
      }
      if (other.RequireScoreId != 0) {
        RequireScoreId = other.RequireScoreId;
      }
      if (other.RoundOverTheme != 0) {
        RoundOverTheme = other.RoundOverTheme;
      }
      if (other.SubType != 0) {
        SubType = other.SubType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            CycleRoundId = input.ReadInt32();
            break;
          }
          case 32: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 48: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            normalRoundId_.AddEntriesFrom(input, _repeated_normalRoundId_codec);
            break;
          }
          case 64: {
            RaceTheme = input.ReadInt32();
            break;
          }
          case 72: {
            RefreshTime = input.ReadInt32();
            break;
          }
          case 80: {
            RequireScoreId = input.ReadInt32();
            break;
          }
          case 88: {
            RoundOverTheme = input.ReadInt32();
            break;
          }
          case 96: {
            ExtraScore = input.ReadInt32();
            break;
          }
          case 104: {
            IsRevive = input.ReadBool();
            break;
          }
          case 112: {
            SubType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            BoardId = input.ReadInt32();
            break;
          }
          case 24: {
            CycleRoundId = input.ReadInt32();
            break;
          }
          case 32: {
            EndTheme = input.ReadInt32();
            break;
          }
          case 48: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            normalRoundId_.AddEntriesFrom(ref input, _repeated_normalRoundId_codec);
            break;
          }
          case 64: {
            RaceTheme = input.ReadInt32();
            break;
          }
          case 72: {
            RefreshTime = input.ReadInt32();
            break;
          }
          case 80: {
            RequireScoreId = input.ReadInt32();
            break;
          }
          case 88: {
            RoundOverTheme = input.ReadInt32();
            break;
          }
          case 96: {
            ExtraScore = input.ReadInt32();
            break;
          }
          case 104: {
            IsRevive = input.ReadBool();
            break;
          }
          case 112: {
            SubType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventRaceMapABValue : pb::IMessage<EventRaceMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventRaceMapABValue> _parser = new pb::MessageParser<EventRaceMapABValue>(() => new EventRaceMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRaceMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventRaceConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceMapABValue(EventRaceMapABValue other) : this() {
      eventRaceMap_ = other.eventRaceMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceMapABValue Clone() {
      return new EventRaceMapABValue(this);
    }

    /// <summary>Field number for the "EventRaceMap" field.</summary>
    public const int EventRaceMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventRace>.Codec _map_eventRaceMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventRace>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRace.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventRace> eventRaceMap_ = new pbc::MapField<int, global::fat.rawdata.EventRace>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventRace> EventRaceMap {
      get { return eventRaceMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRaceMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRaceMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventRaceMap.Equals(other.EventRaceMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventRaceMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventRaceMap_.WriteTo(output, _map_eventRaceMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventRaceMap_.WriteTo(ref output, _map_eventRaceMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventRaceMap_.CalculateSize(_map_eventRaceMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRaceMapABValue other) {
      if (other == null) {
        return;
      }
      eventRaceMap_.Add(other.eventRaceMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventRaceMap_.AddEntriesFrom(input, _map_eventRaceMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventRaceMap_.AddEntriesFrom(ref input, _map_eventRaceMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventRaceConf : pb::IMessage<EventRaceConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventRaceConf> _parser = new pb::MessageParser<EventRaceConf>(() => new EventRaceConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRaceConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventRaceConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceConf(EventRaceConf other) : this() {
      eventRaceMap_ = other.eventRaceMap_.Clone();
      eventRaceMapAB_ = other.eventRaceMapAB_.Clone();
      eventRaceMapABPatch_ = other.eventRaceMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRaceConf Clone() {
      return new EventRaceConf(this);
    }

    /// <summary>Field number for the "EventRaceMap" field.</summary>
    public const int EventRaceMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventRace>.Codec _map_eventRaceMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventRace>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRace.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventRace> eventRaceMap_ = new pbc::MapField<int, global::fat.rawdata.EventRace>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventRace> EventRaceMap {
      get { return eventRaceMap_; }
    }

    /// <summary>Field number for the "EventRaceMapAB" field.</summary>
    public const int EventRaceMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventRaceMapABValue>.Codec _map_eventRaceMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventRaceMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRaceMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventRaceMapABValue> eventRaceMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventRaceMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventRaceMapABValue> EventRaceMapAB {
      get { return eventRaceMapAB_; }
    }

    /// <summary>Field number for the "EventRaceMapABPatch" field.</summary>
    public const int EventRaceMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventRaceMapABValue>.Codec _map_eventRaceMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventRaceMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventRaceMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventRaceMapABValue> eventRaceMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventRaceMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventRaceMapABValue> EventRaceMapABPatch {
      get { return eventRaceMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRaceConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRaceConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventRaceMap.Equals(other.EventRaceMap)) return false;
      if (!EventRaceMapAB.Equals(other.EventRaceMapAB)) return false;
      if (!EventRaceMapABPatch.Equals(other.EventRaceMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventRaceMap.GetHashCode();
      hash ^= EventRaceMapAB.GetHashCode();
      hash ^= EventRaceMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventRaceMap_.WriteTo(output, _map_eventRaceMap_codec);
      eventRaceMapAB_.WriteTo(output, _map_eventRaceMapAB_codec);
      eventRaceMapABPatch_.WriteTo(output, _map_eventRaceMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventRaceMap_.WriteTo(ref output, _map_eventRaceMap_codec);
      eventRaceMapAB_.WriteTo(ref output, _map_eventRaceMapAB_codec);
      eventRaceMapABPatch_.WriteTo(ref output, _map_eventRaceMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventRaceMap_.CalculateSize(_map_eventRaceMap_codec);
      size += eventRaceMapAB_.CalculateSize(_map_eventRaceMapAB_codec);
      size += eventRaceMapABPatch_.CalculateSize(_map_eventRaceMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRaceConf other) {
      if (other == null) {
        return;
      }
      eventRaceMap_.Add(other.eventRaceMap_);
      eventRaceMapAB_.Add(other.eventRaceMapAB_);
      eventRaceMapABPatch_.Add(other.eventRaceMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventRaceMap_.AddEntriesFrom(input, _map_eventRaceMap_codec);
            break;
          }
          case 18: {
            eventRaceMapAB_.AddEntriesFrom(input, _map_eventRaceMapAB_codec);
            break;
          }
          case 26: {
            eventRaceMapABPatch_.AddEntriesFrom(input, _map_eventRaceMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventRaceMap_.AddEntriesFrom(ref input, _map_eventRaceMap_codec);
            break;
          }
          case 18: {
            eventRaceMapAB_.AddEntriesFrom(ref input, _map_eventRaceMapAB_codec);
            break;
          }
          case 26: {
            eventRaceMapABPatch_.AddEntriesFrom(ref input, _map_eventRaceMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
