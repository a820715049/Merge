// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/OrderDiffConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/OrderDiffConf.proto</summary>
  public static partial class OrderDiffConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/OrderDiffConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OrderDiffConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtyYXdkYXRhL09yZGVyRGlmZkNvbmYucHJvdG8SB3Jhd2RhdGEiJQoJT3Jk",
            "ZXJEaWZmEgoKAmlkGAEgASgFEgwKBGRpZmYYAiADKAkipAEKE09yZGVyRGlm",
            "Zk1hcEFCVmFsdWUSRAoMT3JkZXJEaWZmTWFwGAEgAygLMi4ucmF3ZGF0YS5P",
            "cmRlckRpZmZNYXBBQlZhbHVlLk9yZGVyRGlmZk1hcEVudHJ5GkcKEU9yZGVy",
            "RGlmZk1hcEVudHJ5EgsKA2tleRgBIAEoBRIhCgV2YWx1ZRgCIAEoCzISLnJh",
            "d2RhdGEuT3JkZXJEaWZmOgI4ASLZAwoNT3JkZXJEaWZmQ29uZhI+CgxPcmRl",
            "ckRpZmZNYXAYASADKAsyKC5yYXdkYXRhLk9yZGVyRGlmZkNvbmYuT3JkZXJE",
            "aWZmTWFwRW50cnkSQgoOT3JkZXJEaWZmTWFwQUIYAiADKAsyKi5yYXdkYXRh",
            "Lk9yZGVyRGlmZkNvbmYuT3JkZXJEaWZmTWFwQUJFbnRyeRJMChNPcmRlckRp",
            "ZmZNYXBBQlBhdGNoGAMgAygLMi8ucmF3ZGF0YS5PcmRlckRpZmZDb25mLk9y",
            "ZGVyRGlmZk1hcEFCUGF0Y2hFbnRyeRpHChFPcmRlckRpZmZNYXBFbnRyeRIL",
            "CgNrZXkYASABKAUSIQoFdmFsdWUYAiABKAsyEi5yYXdkYXRhLk9yZGVyRGlm",
            "ZjoCOAEaUwoTT3JkZXJEaWZmTWFwQUJFbnRyeRILCgNrZXkYASABKAkSKwoF",
            "dmFsdWUYAiABKAsyHC5yYXdkYXRhLk9yZGVyRGlmZk1hcEFCVmFsdWU6AjgB",
            "GlgKGE9yZGVyRGlmZk1hcEFCUGF0Y2hFbnRyeRILCgNrZXkYASABKAkSKwoF",
            "dmFsdWUYAiABKAsyHC5yYXdkYXRhLk9yZGVyRGlmZk1hcEFCVmFsdWU6AjgB",
            "Qj1aLWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9nb2xhbmcvcmF3",
            "ZGF0YaoCC2ZhdC5yYXdkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.OrderDiff), global::fat.rawdata.OrderDiff.Parser, new[]{ "Id", "Diff" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.OrderDiffMapABValue), global::fat.rawdata.OrderDiffMapABValue.Parser, new[]{ "OrderDiffMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.OrderDiffConf), global::fat.rawdata.OrderDiffConf.Parser, new[]{ "OrderDiffMap", "OrderDiffMapAB", "OrderDiffMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="OrderDiff",table="OrderDiffMap",table_wrapper="OrderDiffConf",map="true",map_key_type="int32",data="OrderDiffConf")
  /// annotation@ab(table_ab="OrderDiffMapAB",table_ab_patch="OrderDiffMapABPatch",table_ab_value="OrderDiffMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@OrderDiff(id="id")
  /// </summary>
  public sealed partial class OrderDiff : pb::IMessage<OrderDiff>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderDiff> _parser = new pb::MessageParser<OrderDiff>(() => new OrderDiff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderDiff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.OrderDiffConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderDiff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderDiff(OrderDiff other) : this() {
      id_ = other.id_;
      diff_ = other.diff_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderDiff Clone() {
      return new OrderDiff(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 订单难度配置ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "diff" field.</summary>
    public const int DiffFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_diff_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> diff_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 难度区间
    /// { a1:b1, a2:b2, ... }
    /// 单棋子,双棋子,...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Diff {
      get { return diff_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderDiff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderDiff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!diff_.Equals(other.diff_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= diff_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      diff_.WriteTo(output, _repeated_diff_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      diff_.WriteTo(ref output, _repeated_diff_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += diff_.CalculateSize(_repeated_diff_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderDiff other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      diff_.Add(other.diff_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            diff_.AddEntriesFrom(input, _repeated_diff_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            diff_.AddEntriesFrom(ref input, _repeated_diff_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OrderDiffMapABValue : pb::IMessage<OrderDiffMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderDiffMapABValue> _parser = new pb::MessageParser<OrderDiffMapABValue>(() => new OrderDiffMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderDiffMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.OrderDiffConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderDiffMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderDiffMapABValue(OrderDiffMapABValue other) : this() {
      orderDiffMap_ = other.orderDiffMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderDiffMapABValue Clone() {
      return new OrderDiffMapABValue(this);
    }

    /// <summary>Field number for the "OrderDiffMap" field.</summary>
    public const int OrderDiffMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.OrderDiff>.Codec _map_orderDiffMap_codec
        = new pbc::MapField<int, global::fat.rawdata.OrderDiff>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.OrderDiff.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.OrderDiff> orderDiffMap_ = new pbc::MapField<int, global::fat.rawdata.OrderDiff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.OrderDiff> OrderDiffMap {
      get { return orderDiffMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderDiffMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderDiffMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!OrderDiffMap.Equals(other.OrderDiffMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= OrderDiffMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      orderDiffMap_.WriteTo(output, _map_orderDiffMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      orderDiffMap_.WriteTo(ref output, _map_orderDiffMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += orderDiffMap_.CalculateSize(_map_orderDiffMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderDiffMapABValue other) {
      if (other == null) {
        return;
      }
      orderDiffMap_.Add(other.orderDiffMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            orderDiffMap_.AddEntriesFrom(input, _map_orderDiffMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            orderDiffMap_.AddEntriesFrom(ref input, _map_orderDiffMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OrderDiffConf : pb::IMessage<OrderDiffConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderDiffConf> _parser = new pb::MessageParser<OrderDiffConf>(() => new OrderDiffConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderDiffConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.OrderDiffConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderDiffConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderDiffConf(OrderDiffConf other) : this() {
      orderDiffMap_ = other.orderDiffMap_.Clone();
      orderDiffMapAB_ = other.orderDiffMapAB_.Clone();
      orderDiffMapABPatch_ = other.orderDiffMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderDiffConf Clone() {
      return new OrderDiffConf(this);
    }

    /// <summary>Field number for the "OrderDiffMap" field.</summary>
    public const int OrderDiffMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.OrderDiff>.Codec _map_orderDiffMap_codec
        = new pbc::MapField<int, global::fat.rawdata.OrderDiff>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.OrderDiff.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.OrderDiff> orderDiffMap_ = new pbc::MapField<int, global::fat.rawdata.OrderDiff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.OrderDiff> OrderDiffMap {
      get { return orderDiffMap_; }
    }

    /// <summary>Field number for the "OrderDiffMapAB" field.</summary>
    public const int OrderDiffMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.OrderDiffMapABValue>.Codec _map_orderDiffMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.OrderDiffMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.OrderDiffMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.OrderDiffMapABValue> orderDiffMapAB_ = new pbc::MapField<string, global::fat.rawdata.OrderDiffMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.OrderDiffMapABValue> OrderDiffMapAB {
      get { return orderDiffMapAB_; }
    }

    /// <summary>Field number for the "OrderDiffMapABPatch" field.</summary>
    public const int OrderDiffMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.OrderDiffMapABValue>.Codec _map_orderDiffMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.OrderDiffMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.OrderDiffMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.OrderDiffMapABValue> orderDiffMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.OrderDiffMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.OrderDiffMapABValue> OrderDiffMapABPatch {
      get { return orderDiffMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderDiffConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderDiffConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!OrderDiffMap.Equals(other.OrderDiffMap)) return false;
      if (!OrderDiffMapAB.Equals(other.OrderDiffMapAB)) return false;
      if (!OrderDiffMapABPatch.Equals(other.OrderDiffMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= OrderDiffMap.GetHashCode();
      hash ^= OrderDiffMapAB.GetHashCode();
      hash ^= OrderDiffMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      orderDiffMap_.WriteTo(output, _map_orderDiffMap_codec);
      orderDiffMapAB_.WriteTo(output, _map_orderDiffMapAB_codec);
      orderDiffMapABPatch_.WriteTo(output, _map_orderDiffMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      orderDiffMap_.WriteTo(ref output, _map_orderDiffMap_codec);
      orderDiffMapAB_.WriteTo(ref output, _map_orderDiffMapAB_codec);
      orderDiffMapABPatch_.WriteTo(ref output, _map_orderDiffMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += orderDiffMap_.CalculateSize(_map_orderDiffMap_codec);
      size += orderDiffMapAB_.CalculateSize(_map_orderDiffMapAB_codec);
      size += orderDiffMapABPatch_.CalculateSize(_map_orderDiffMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderDiffConf other) {
      if (other == null) {
        return;
      }
      orderDiffMap_.Add(other.orderDiffMap_);
      orderDiffMapAB_.Add(other.orderDiffMapAB_);
      orderDiffMapABPatch_.Add(other.orderDiffMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            orderDiffMap_.AddEntriesFrom(input, _map_orderDiffMap_codec);
            break;
          }
          case 18: {
            orderDiffMapAB_.AddEntriesFrom(input, _map_orderDiffMapAB_codec);
            break;
          }
          case 26: {
            orderDiffMapABPatch_.AddEntriesFrom(input, _map_orderDiffMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            orderDiffMap_.AddEntriesFrom(ref input, _map_orderDiffMap_codec);
            break;
          }
          case 18: {
            orderDiffMapAB_.AddEntriesFrom(ref input, _map_orderDiffMapAB_codec);
            break;
          }
          case 26: {
            orderDiffMapABPatch_.AddEntriesFrom(ref input, _map_orderDiffMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
