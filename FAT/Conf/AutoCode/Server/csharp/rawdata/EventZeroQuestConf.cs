// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/EventZeroQuestConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/EventZeroQuestConf.proto</summary>
  public static partial class EventZeroQuestConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/EventZeroQuestConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventZeroQuestConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiByYXdkYXRhL0V2ZW50WmVyb1F1ZXN0Q29uZi5wcm90bxIHcmF3ZGF0YSKC",
            "BQoORXZlbnRaZXJvUXVlc3QSCgoCaWQYASABKAUSDAoEYmFzZRgCIAMoBRIP",
            "Cgdib2FyZElkGAMgASgFEhQKDGNoYWxsZW5nZU51bRgEIAEoBRIVCg1jb21w",
            "bGV0ZVRoZW1lGAUgASgFEjUKB2RpYW1vbmQYBiADKAsyJC5yYXdkYXRhLkV2",
            "ZW50WmVyb1F1ZXN0LkRpYW1vbmRFbnRyeRIvCgRkaWZmGAcgAygLMiEucmF3",
            "ZGF0YS5FdmVudFplcm9RdWVzdC5EaWZmRW50cnkSEgoKZXZlbnRUaGVtZRgI",
            "IAEoBRIRCgloZWxwVGhlbWUYECABKAUSDgoGaXNXYWl0GBIgASgIEgwKBGxv",
            "c2UYCSADKAUSEAoIbnBjVGhlbWUYCiABKAUSLQoDb3V0GAsgAygLMiAucmF3",
            "ZGF0YS5FdmVudFplcm9RdWVzdC5PdXRFbnRyeRIQCghzdGFydE51bRgRIAEo",
            "BRISCgpzdGFydFRoZW1lGAwgASgFEi8KBHRpbWUYDSADKAsyIS5yYXdkYXRh",
            "LkV2ZW50WmVyb1F1ZXN0LlRpbWVFbnRyeRIQCgh0b3RhbE51bRgOIAEoBRIL",
            "CgN3aW4YDyADKAUaLgoMRGlhbW9uZEVudHJ5EgsKA2tleRgBIAEoBRINCgV2",
            "YWx1ZRgCIAEoCToCOAEaKwoJRGlmZkVudHJ5EgsKA2tleRgBIAEoBRINCgV2",
            "YWx1ZRgCIAEoCToCOAEaKgoIT3V0RW50cnkSCwoDa2V5GAEgASgFEg0KBXZh",
            "bHVlGAIgASgJOgI4ARorCglUaW1lRW50cnkSCwoDa2V5GAEgASgFEg0KBXZh",
            "bHVlGAIgASgJOgI4ASLCAQoYRXZlbnRaZXJvUXVlc3RNYXBBQlZhbHVlElMK",
            "EUV2ZW50WmVyb1F1ZXN0TWFwGAEgAygLMjgucmF3ZGF0YS5FdmVudFplcm9R",
            "dWVzdE1hcEFCVmFsdWUuRXZlbnRaZXJvUXVlc3RNYXBFbnRyeRpRChZFdmVu",
            "dFplcm9RdWVzdE1hcEVudHJ5EgsKA2tleRgBIAEoBRImCgV2YWx1ZRgCIAEo",
            "CzIXLnJhd2RhdGEuRXZlbnRaZXJvUXVlc3Q6AjgBIqkEChJFdmVudFplcm9R",
            "dWVzdENvbmYSTQoRRXZlbnRaZXJvUXVlc3RNYXAYASADKAsyMi5yYXdkYXRh",
            "LkV2ZW50WmVyb1F1ZXN0Q29uZi5FdmVudFplcm9RdWVzdE1hcEVudHJ5ElEK",
            "E0V2ZW50WmVyb1F1ZXN0TWFwQUIYAiADKAsyNC5yYXdkYXRhLkV2ZW50WmVy",
            "b1F1ZXN0Q29uZi5FdmVudFplcm9RdWVzdE1hcEFCRW50cnkSWwoYRXZlbnRa",
            "ZXJvUXVlc3RNYXBBQlBhdGNoGAMgAygLMjkucmF3ZGF0YS5FdmVudFplcm9R",
            "dWVzdENvbmYuRXZlbnRaZXJvUXVlc3RNYXBBQlBhdGNoRW50cnkaUQoWRXZl",
            "bnRaZXJvUXVlc3RNYXBFbnRyeRILCgNrZXkYASABKAUSJgoFdmFsdWUYAiAB",
            "KAsyFy5yYXdkYXRhLkV2ZW50WmVyb1F1ZXN0OgI4ARpdChhFdmVudFplcm9R",
            "dWVzdE1hcEFCRW50cnkSCwoDa2V5GAEgASgJEjAKBXZhbHVlGAIgASgLMiEu",
            "cmF3ZGF0YS5FdmVudFplcm9RdWVzdE1hcEFCVmFsdWU6AjgBGmIKHUV2ZW50",
            "WmVyb1F1ZXN0TWFwQUJQYXRjaEVudHJ5EgsKA2tleRgBIAEoCRIwCgV2YWx1",
            "ZRgCIAEoCzIhLnJhd2RhdGEuRXZlbnRaZXJvUXVlc3RNYXBBQlZhbHVlOgI4",
            "AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL3Jh",
            "d2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventZeroQuest), global::fat.rawdata.EventZeroQuest.Parser, new[]{ "Id", "Base", "BoardId", "ChallengeNum", "CompleteTheme", "Diamond", "Diff", "EventTheme", "HelpTheme", "IsWait", "Lose", "NpcTheme", "Out", "StartNum", "StartTheme", "Time", "TotalNum", "Win" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventZeroQuestMapABValue), global::fat.rawdata.EventZeroQuestMapABValue.Parser, new[]{ "EventZeroQuestMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.EventZeroQuestConf), global::fat.rawdata.EventZeroQuestConf.Parser, new[]{ "EventZeroQuestMap", "EventZeroQuestMapAB", "EventZeroQuestMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="EventZeroQuest",table="EventZeroQuestMap",table_wrapper="EventZeroQuestConf",map="true",map_key_type="int32",data="EventZeroQuestConf")
  /// annotation@ab(table_ab="EventZeroQuestMapAB",table_ab_patch="EventZeroQuestMapABPatch",table_ab_value="EventZeroQuestMapABValue",ab_patch="true")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@EventZeroQuest(id="id")
  /// </summary>
  public sealed partial class EventZeroQuest : pb::IMessage<EventZeroQuest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventZeroQuest> _parser = new pb::MessageParser<EventZeroQuest>(() => new EventZeroQuest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventZeroQuest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventZeroQuestConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventZeroQuest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventZeroQuest(EventZeroQuest other) : this() {
      id_ = other.id_;
      base_ = other.base_.Clone();
      boardId_ = other.boardId_;
      challengeNum_ = other.challengeNum_;
      completeTheme_ = other.completeTheme_;
      diamond_ = other.diamond_.Clone();
      diff_ = other.diff_.Clone();
      eventTheme_ = other.eventTheme_;
      helpTheme_ = other.helpTheme_;
      isWait_ = other.isWait_;
      lose_ = other.lose_.Clone();
      npcTheme_ = other.npcTheme_;
      out_ = other.out_.Clone();
      startNum_ = other.startNum_;
      startTheme_ = other.startTheme_;
      time_ = other.time_.Clone();
      totalNum_ = other.totalNum_;
      win_ = other.win_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventZeroQuest Clone() {
      return new EventZeroQuest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 活动id
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_base_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> base_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// groupId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Base {
      get { return base_; }
    }

    /// <summary>Field number for the "boardId" field.</summary>
    public const int BoardIdFieldNumber = 3;
    private int boardId_;
    /// <summary>
    /// 此活动对哪个棋盘生效
    /// （MergeBoard.id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "challengeNum" field.</summary>
    public const int ChallengeNumFieldNumber = 4;
    private int challengeNum_;
    /// <summary>
    /// 挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChallengeNum {
      get { return challengeNum_; }
      set {
        challengeNum_ = value;
      }
    }

    /// <summary>Field number for the "completeTheme" field.</summary>
    public const int CompleteThemeFieldNumber = 5;
    private int completeTheme_;
    /// <summary>
    /// 获胜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompleteTheme {
      get { return completeTheme_; }
      set {
        completeTheme_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 6;
    private static readonly pbc::MapField<int, string>.Codec _map_diamond_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 50);
    private readonly pbc::MapField<int, string> diamond_ = new pbc::MapField<int, string>();
    /// <summary>
    /// 耗钻：升序配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> Diamond {
      get { return diamond_; }
    }

    /// <summary>Field number for the "diff" field.</summary>
    public const int DiffFieldNumber = 7;
    private static readonly pbc::MapField<int, string>.Codec _map_diff_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 58);
    private readonly pbc::MapField<int, string> diff_ = new pbc::MapField<int, string>();
    /// <summary>
    /// 实际难度：升序配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> Diff {
      get { return diff_; }
    }

    /// <summary>Field number for the "eventTheme" field.</summary>
    public const int EventThemeFieldNumber = 8;
    private int eventTheme_;
    /// <summary>
    /// 活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTheme {
      get { return eventTheme_; }
      set {
        eventTheme_ = value;
      }
    }

    /// <summary>Field number for the "helpTheme" field.</summary>
    public const int HelpThemeFieldNumber = 16;
    private int helpTheme_;
    /// <summary>
    /// 帮助
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HelpTheme {
      get { return helpTheme_; }
      set {
        helpTheme_ = value;
      }
    }

    /// <summary>Field number for the "isWait" field.</summary>
    public const int IsWaitFieldNumber = 18;
    private bool isWait_;
    /// <summary>
    /// 是否稍后
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWait {
      get { return isWait_; }
      set {
        isWait_ = value;
      }
    }

    /// <summary>Field number for the "lose" field.</summary>
    public const int LoseFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_lose_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> lose_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// groupId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Lose {
      get { return lose_; }
    }

    /// <summary>Field number for the "npcTheme" field.</summary>
    public const int NpcThemeFieldNumber = 10;
    private int npcTheme_;
    /// <summary>
    /// 匹配
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NpcTheme {
      get { return npcTheme_; }
      set {
        npcTheme_ = value;
      }
    }

    /// <summary>Field number for the "out" field.</summary>
    public const int OutFieldNumber = 11;
    private static readonly pbc::MapField<int, string>.Codec _map_out_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 90);
    private readonly pbc::MapField<int, string> out_ = new pbc::MapField<int, string>();
    /// <summary>
    /// 展示数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> Out {
      get { return out_; }
    }

    /// <summary>Field number for the "startNum" field.</summary>
    public const int StartNumFieldNumber = 17;
    private int startNum_;
    /// <summary>
    /// 初始人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartNum {
      get { return startNum_; }
      set {
        startNum_ = value;
      }
    }

    /// <summary>Field number for the "startTheme" field.</summary>
    public const int StartThemeFieldNumber = 12;
    private int startTheme_;
    /// <summary>
    /// 开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTheme {
      get { return startTheme_; }
      set {
        startTheme_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 13;
    private static readonly pbc::MapField<int, string>.Codec _map_time_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 106);
    private readonly pbc::MapField<int, string> time_ = new pbc::MapField<int, string>();
    /// <summary>
    /// 订单完成时长min：升序配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> Time {
      get { return time_; }
    }

    /// <summary>Field number for the "totalNum" field.</summary>
    public const int TotalNumFieldNumber = 14;
    private int totalNum_;
    /// <summary>
    /// 总参与人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 15;
    private static readonly pb::FieldCodec<int> _repeated_win_codec
        = pb::FieldCodec.ForInt32(122);
    private readonly pbc::RepeatedField<int> win_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// groupId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Win {
      get { return win_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventZeroQuest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventZeroQuest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!base_.Equals(other.base_)) return false;
      if (BoardId != other.BoardId) return false;
      if (ChallengeNum != other.ChallengeNum) return false;
      if (CompleteTheme != other.CompleteTheme) return false;
      if (!Diamond.Equals(other.Diamond)) return false;
      if (!Diff.Equals(other.Diff)) return false;
      if (EventTheme != other.EventTheme) return false;
      if (HelpTheme != other.HelpTheme) return false;
      if (IsWait != other.IsWait) return false;
      if(!lose_.Equals(other.lose_)) return false;
      if (NpcTheme != other.NpcTheme) return false;
      if (!Out.Equals(other.Out)) return false;
      if (StartNum != other.StartNum) return false;
      if (StartTheme != other.StartTheme) return false;
      if (!Time.Equals(other.Time)) return false;
      if (TotalNum != other.TotalNum) return false;
      if(!win_.Equals(other.win_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= base_.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (ChallengeNum != 0) hash ^= ChallengeNum.GetHashCode();
      if (CompleteTheme != 0) hash ^= CompleteTheme.GetHashCode();
      hash ^= Diamond.GetHashCode();
      hash ^= Diff.GetHashCode();
      if (EventTheme != 0) hash ^= EventTheme.GetHashCode();
      if (HelpTheme != 0) hash ^= HelpTheme.GetHashCode();
      if (IsWait != false) hash ^= IsWait.GetHashCode();
      hash ^= lose_.GetHashCode();
      if (NpcTheme != 0) hash ^= NpcTheme.GetHashCode();
      hash ^= Out.GetHashCode();
      if (StartNum != 0) hash ^= StartNum.GetHashCode();
      if (StartTheme != 0) hash ^= StartTheme.GetHashCode();
      hash ^= Time.GetHashCode();
      if (TotalNum != 0) hash ^= TotalNum.GetHashCode();
      hash ^= win_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      base_.WriteTo(output, _repeated_base_codec);
      if (BoardId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BoardId);
      }
      if (ChallengeNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChallengeNum);
      }
      if (CompleteTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CompleteTheme);
      }
      diamond_.WriteTo(output, _map_diamond_codec);
      diff_.WriteTo(output, _map_diff_codec);
      if (EventTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EventTheme);
      }
      lose_.WriteTo(output, _repeated_lose_codec);
      if (NpcTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NpcTheme);
      }
      out_.WriteTo(output, _map_out_codec);
      if (StartTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(StartTheme);
      }
      time_.WriteTo(output, _map_time_codec);
      if (TotalNum != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(TotalNum);
      }
      win_.WriteTo(output, _repeated_win_codec);
      if (HelpTheme != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(HelpTheme);
      }
      if (StartNum != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(StartNum);
      }
      if (IsWait != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsWait);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      base_.WriteTo(ref output, _repeated_base_codec);
      if (BoardId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BoardId);
      }
      if (ChallengeNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChallengeNum);
      }
      if (CompleteTheme != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CompleteTheme);
      }
      diamond_.WriteTo(ref output, _map_diamond_codec);
      diff_.WriteTo(ref output, _map_diff_codec);
      if (EventTheme != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EventTheme);
      }
      lose_.WriteTo(ref output, _repeated_lose_codec);
      if (NpcTheme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NpcTheme);
      }
      out_.WriteTo(ref output, _map_out_codec);
      if (StartTheme != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(StartTheme);
      }
      time_.WriteTo(ref output, _map_time_codec);
      if (TotalNum != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(TotalNum);
      }
      win_.WriteTo(ref output, _repeated_win_codec);
      if (HelpTheme != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(HelpTheme);
      }
      if (StartNum != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(StartNum);
      }
      if (IsWait != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsWait);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += base_.CalculateSize(_repeated_base_codec);
      if (BoardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (ChallengeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChallengeNum);
      }
      if (CompleteTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompleteTheme);
      }
      size += diamond_.CalculateSize(_map_diamond_codec);
      size += diff_.CalculateSize(_map_diff_codec);
      if (EventTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTheme);
      }
      if (HelpTheme != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HelpTheme);
      }
      if (IsWait != false) {
        size += 2 + 1;
      }
      size += lose_.CalculateSize(_repeated_lose_codec);
      if (NpcTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NpcTheme);
      }
      size += out_.CalculateSize(_map_out_codec);
      if (StartNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartNum);
      }
      if (StartTheme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTheme);
      }
      size += time_.CalculateSize(_map_time_codec);
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      size += win_.CalculateSize(_repeated_win_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventZeroQuest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      base_.Add(other.base_);
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.ChallengeNum != 0) {
        ChallengeNum = other.ChallengeNum;
      }
      if (other.CompleteTheme != 0) {
        CompleteTheme = other.CompleteTheme;
      }
      diamond_.Add(other.diamond_);
      diff_.Add(other.diff_);
      if (other.EventTheme != 0) {
        EventTheme = other.EventTheme;
      }
      if (other.HelpTheme != 0) {
        HelpTheme = other.HelpTheme;
      }
      if (other.IsWait != false) {
        IsWait = other.IsWait;
      }
      lose_.Add(other.lose_);
      if (other.NpcTheme != 0) {
        NpcTheme = other.NpcTheme;
      }
      out_.Add(other.out_);
      if (other.StartNum != 0) {
        StartNum = other.StartNum;
      }
      if (other.StartTheme != 0) {
        StartTheme = other.StartTheme;
      }
      time_.Add(other.time_);
      if (other.TotalNum != 0) {
        TotalNum = other.TotalNum;
      }
      win_.Add(other.win_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            base_.AddEntriesFrom(input, _repeated_base_codec);
            break;
          }
          case 24: {
            BoardId = input.ReadInt32();
            break;
          }
          case 32: {
            ChallengeNum = input.ReadInt32();
            break;
          }
          case 40: {
            CompleteTheme = input.ReadInt32();
            break;
          }
          case 50: {
            diamond_.AddEntriesFrom(input, _map_diamond_codec);
            break;
          }
          case 58: {
            diff_.AddEntriesFrom(input, _map_diff_codec);
            break;
          }
          case 64: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            lose_.AddEntriesFrom(input, _repeated_lose_codec);
            break;
          }
          case 80: {
            NpcTheme = input.ReadInt32();
            break;
          }
          case 90: {
            out_.AddEntriesFrom(input, _map_out_codec);
            break;
          }
          case 96: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 106: {
            time_.AddEntriesFrom(input, _map_time_codec);
            break;
          }
          case 112: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 122:
          case 120: {
            win_.AddEntriesFrom(input, _repeated_win_codec);
            break;
          }
          case 128: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 136: {
            StartNum = input.ReadInt32();
            break;
          }
          case 144: {
            IsWait = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            base_.AddEntriesFrom(ref input, _repeated_base_codec);
            break;
          }
          case 24: {
            BoardId = input.ReadInt32();
            break;
          }
          case 32: {
            ChallengeNum = input.ReadInt32();
            break;
          }
          case 40: {
            CompleteTheme = input.ReadInt32();
            break;
          }
          case 50: {
            diamond_.AddEntriesFrom(ref input, _map_diamond_codec);
            break;
          }
          case 58: {
            diff_.AddEntriesFrom(ref input, _map_diff_codec);
            break;
          }
          case 64: {
            EventTheme = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            lose_.AddEntriesFrom(ref input, _repeated_lose_codec);
            break;
          }
          case 80: {
            NpcTheme = input.ReadInt32();
            break;
          }
          case 90: {
            out_.AddEntriesFrom(ref input, _map_out_codec);
            break;
          }
          case 96: {
            StartTheme = input.ReadInt32();
            break;
          }
          case 106: {
            time_.AddEntriesFrom(ref input, _map_time_codec);
            break;
          }
          case 112: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 122:
          case 120: {
            win_.AddEntriesFrom(ref input, _repeated_win_codec);
            break;
          }
          case 128: {
            HelpTheme = input.ReadInt32();
            break;
          }
          case 136: {
            StartNum = input.ReadInt32();
            break;
          }
          case 144: {
            IsWait = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventZeroQuestMapABValue : pb::IMessage<EventZeroQuestMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventZeroQuestMapABValue> _parser = new pb::MessageParser<EventZeroQuestMapABValue>(() => new EventZeroQuestMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventZeroQuestMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventZeroQuestConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventZeroQuestMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventZeroQuestMapABValue(EventZeroQuestMapABValue other) : this() {
      eventZeroQuestMap_ = other.eventZeroQuestMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventZeroQuestMapABValue Clone() {
      return new EventZeroQuestMapABValue(this);
    }

    /// <summary>Field number for the "EventZeroQuestMap" field.</summary>
    public const int EventZeroQuestMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventZeroQuest>.Codec _map_eventZeroQuestMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventZeroQuest>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventZeroQuest.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventZeroQuest> eventZeroQuestMap_ = new pbc::MapField<int, global::fat.rawdata.EventZeroQuest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventZeroQuest> EventZeroQuestMap {
      get { return eventZeroQuestMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventZeroQuestMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventZeroQuestMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventZeroQuestMap.Equals(other.EventZeroQuestMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventZeroQuestMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventZeroQuestMap_.WriteTo(output, _map_eventZeroQuestMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventZeroQuestMap_.WriteTo(ref output, _map_eventZeroQuestMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventZeroQuestMap_.CalculateSize(_map_eventZeroQuestMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventZeroQuestMapABValue other) {
      if (other == null) {
        return;
      }
      eventZeroQuestMap_.Add(other.eventZeroQuestMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventZeroQuestMap_.AddEntriesFrom(input, _map_eventZeroQuestMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventZeroQuestMap_.AddEntriesFrom(ref input, _map_eventZeroQuestMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventZeroQuestConf : pb::IMessage<EventZeroQuestConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventZeroQuestConf> _parser = new pb::MessageParser<EventZeroQuestConf>(() => new EventZeroQuestConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventZeroQuestConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.EventZeroQuestConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventZeroQuestConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventZeroQuestConf(EventZeroQuestConf other) : this() {
      eventZeroQuestMap_ = other.eventZeroQuestMap_.Clone();
      eventZeroQuestMapAB_ = other.eventZeroQuestMapAB_.Clone();
      eventZeroQuestMapABPatch_ = other.eventZeroQuestMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventZeroQuestConf Clone() {
      return new EventZeroQuestConf(this);
    }

    /// <summary>Field number for the "EventZeroQuestMap" field.</summary>
    public const int EventZeroQuestMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.EventZeroQuest>.Codec _map_eventZeroQuestMap_codec
        = new pbc::MapField<int, global::fat.rawdata.EventZeroQuest>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventZeroQuest.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.EventZeroQuest> eventZeroQuestMap_ = new pbc::MapField<int, global::fat.rawdata.EventZeroQuest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.EventZeroQuest> EventZeroQuestMap {
      get { return eventZeroQuestMap_; }
    }

    /// <summary>Field number for the "EventZeroQuestMapAB" field.</summary>
    public const int EventZeroQuestMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventZeroQuestMapABValue>.Codec _map_eventZeroQuestMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.EventZeroQuestMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventZeroQuestMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.EventZeroQuestMapABValue> eventZeroQuestMapAB_ = new pbc::MapField<string, global::fat.rawdata.EventZeroQuestMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventZeroQuestMapABValue> EventZeroQuestMapAB {
      get { return eventZeroQuestMapAB_; }
    }

    /// <summary>Field number for the "EventZeroQuestMapABPatch" field.</summary>
    public const int EventZeroQuestMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.EventZeroQuestMapABValue>.Codec _map_eventZeroQuestMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.EventZeroQuestMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.EventZeroQuestMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.EventZeroQuestMapABValue> eventZeroQuestMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.EventZeroQuestMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.EventZeroQuestMapABValue> EventZeroQuestMapABPatch {
      get { return eventZeroQuestMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventZeroQuestConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventZeroQuestConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EventZeroQuestMap.Equals(other.EventZeroQuestMap)) return false;
      if (!EventZeroQuestMapAB.Equals(other.EventZeroQuestMapAB)) return false;
      if (!EventZeroQuestMapABPatch.Equals(other.EventZeroQuestMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EventZeroQuestMap.GetHashCode();
      hash ^= EventZeroQuestMapAB.GetHashCode();
      hash ^= EventZeroQuestMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      eventZeroQuestMap_.WriteTo(output, _map_eventZeroQuestMap_codec);
      eventZeroQuestMapAB_.WriteTo(output, _map_eventZeroQuestMapAB_codec);
      eventZeroQuestMapABPatch_.WriteTo(output, _map_eventZeroQuestMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      eventZeroQuestMap_.WriteTo(ref output, _map_eventZeroQuestMap_codec);
      eventZeroQuestMapAB_.WriteTo(ref output, _map_eventZeroQuestMapAB_codec);
      eventZeroQuestMapABPatch_.WriteTo(ref output, _map_eventZeroQuestMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += eventZeroQuestMap_.CalculateSize(_map_eventZeroQuestMap_codec);
      size += eventZeroQuestMapAB_.CalculateSize(_map_eventZeroQuestMapAB_codec);
      size += eventZeroQuestMapABPatch_.CalculateSize(_map_eventZeroQuestMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventZeroQuestConf other) {
      if (other == null) {
        return;
      }
      eventZeroQuestMap_.Add(other.eventZeroQuestMap_);
      eventZeroQuestMapAB_.Add(other.eventZeroQuestMapAB_);
      eventZeroQuestMapABPatch_.Add(other.eventZeroQuestMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            eventZeroQuestMap_.AddEntriesFrom(input, _map_eventZeroQuestMap_codec);
            break;
          }
          case 18: {
            eventZeroQuestMapAB_.AddEntriesFrom(input, _map_eventZeroQuestMapAB_codec);
            break;
          }
          case 26: {
            eventZeroQuestMapABPatch_.AddEntriesFrom(input, _map_eventZeroQuestMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            eventZeroQuestMap_.AddEntriesFrom(ref input, _map_eventZeroQuestMap_codec);
            break;
          }
          case 18: {
            eventZeroQuestMapAB_.AddEntriesFrom(ref input, _map_eventZeroQuestMapAB_codec);
            break;
          }
          case 26: {
            eventZeroQuestMapABPatch_.AddEntriesFrom(ref input, _map_eventZeroQuestMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
