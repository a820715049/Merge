// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rawdata/MiniGameBeadsLevelConf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.rawdata {

  /// <summary>Holder for reflection information generated from rawdata/MiniGameBeadsLevelConf.proto</summary>
  public static partial class MiniGameBeadsLevelConfReflection {

    #region Descriptor
    /// <summary>File descriptor for rawdata/MiniGameBeadsLevelConf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MiniGameBeadsLevelConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRyYXdkYXRhL01pbmlHYW1lQmVhZHNMZXZlbENvbmYucHJvdG8SB3Jhd2Rh",
            "dGEibgoSTWluaUdhbWVCZWFkc0xldmVsEgoKAmlkGAEgASgFEhAKCGFjdGl2",
            "ZUx2GAIgASgFEhMKC2d1aWRlQWN0aW9uGAUgASgJEhQKDGd1aWRlU3RhZ2VJ",
            "ZBgGIAMoBRIPCgdzdGFnZUlkGAQgAygFItoBChxNaW5pR2FtZUJlYWRzTGV2",
            "ZWxNYXBBQlZhbHVlEl8KFU1pbmlHYW1lQmVhZHNMZXZlbE1hcBgBIAMoCzJA",
            "LnJhd2RhdGEuTWluaUdhbWVCZWFkc0xldmVsTWFwQUJWYWx1ZS5NaW5pR2Ft",
            "ZUJlYWRzTGV2ZWxNYXBFbnRyeRpZChpNaW5pR2FtZUJlYWRzTGV2ZWxNYXBF",
            "bnRyeRILCgNrZXkYASABKAUSKgoFdmFsdWUYAiABKAsyGy5yYXdkYXRhLk1p",
            "bmlHYW1lQmVhZHNMZXZlbDoCOAEi6QQKFk1pbmlHYW1lQmVhZHNMZXZlbENv",
            "bmYSWQoVTWluaUdhbWVCZWFkc0xldmVsTWFwGAEgAygLMjoucmF3ZGF0YS5N",
            "aW5pR2FtZUJlYWRzTGV2ZWxDb25mLk1pbmlHYW1lQmVhZHNMZXZlbE1hcEVu",
            "dHJ5El0KF01pbmlHYW1lQmVhZHNMZXZlbE1hcEFCGAIgAygLMjwucmF3ZGF0",
            "YS5NaW5pR2FtZUJlYWRzTGV2ZWxDb25mLk1pbmlHYW1lQmVhZHNMZXZlbE1h",
            "cEFCRW50cnkSZwocTWluaUdhbWVCZWFkc0xldmVsTWFwQUJQYXRjaBgDIAMo",
            "CzJBLnJhd2RhdGEuTWluaUdhbWVCZWFkc0xldmVsQ29uZi5NaW5pR2FtZUJl",
            "YWRzTGV2ZWxNYXBBQlBhdGNoRW50cnkaWQoaTWluaUdhbWVCZWFkc0xldmVs",
            "TWFwRW50cnkSCwoDa2V5GAEgASgFEioKBXZhbHVlGAIgASgLMhsucmF3ZGF0",
            "YS5NaW5pR2FtZUJlYWRzTGV2ZWw6AjgBGmUKHE1pbmlHYW1lQmVhZHNMZXZl",
            "bE1hcEFCRW50cnkSCwoDa2V5GAEgASgJEjQKBXZhbHVlGAIgASgLMiUucmF3",
            "ZGF0YS5NaW5pR2FtZUJlYWRzTGV2ZWxNYXBBQlZhbHVlOgI4ARpqCiFNaW5p",
            "R2FtZUJlYWRzTGV2ZWxNYXBBQlBhdGNoRW50cnkSCwoDa2V5GAEgASgJEjQK",
            "BXZhbHVlGAIgASgLMiUucmF3ZGF0YS5NaW5pR2FtZUJlYWRzTGV2ZWxNYXBB",
            "QlZhbHVlOgI4AUI9Wi1naXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4v",
            "Z29sYW5nL3Jhd2RhdGGqAgtmYXQucmF3ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MiniGameBeadsLevel), global::fat.rawdata.MiniGameBeadsLevel.Parser, new[]{ "Id", "ActiveLv", "GuideAction", "GuideStageId", "StageId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MiniGameBeadsLevelMapABValue), global::fat.rawdata.MiniGameBeadsLevelMapABValue.Parser, new[]{ "MiniGameBeadsLevelMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.rawdata.MiniGameBeadsLevelConf), global::fat.rawdata.MiniGameBeadsLevelConf.Parser, new[]{ "MiniGameBeadsLevelMap", "MiniGameBeadsLevelMapAB", "MiniGameBeadsLevelMapABPatch" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// annotation@annotation_type(type="rawdata")
  /// annotation@rawdata(row="MiniGameBeadsLevel",table="MiniGameBeadsLevelMap",table_wrapper="MiniGameBeadsLevelConf",map="true",map_key_type="int32",data="MiniGameBeadsLevelConf")
  /// annotation@ab(table_ab="MiniGameBeadsLevelMapAB",table_ab_patch="MiniGameBeadsLevelMapABPatch",table_ab_value="MiniGameBeadsLevelMapABValue",ab_patch="false")
  /// annotation@filter(just_server="false",just_client="false")
  /// annotation@MiniGameBeadsLevel(id="id")
  /// </summary>
  public sealed partial class MiniGameBeadsLevel : pb::IMessage<MiniGameBeadsLevel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameBeadsLevel> _parser = new pb::MessageParser<MiniGameBeadsLevel>(() => new MiniGameBeadsLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameBeadsLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MiniGameBeadsLevelConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameBeadsLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameBeadsLevel(MiniGameBeadsLevel other) : this() {
      id_ = other.id_;
      activeLv_ = other.activeLv_;
      guideAction_ = other.guideAction_;
      guideStageId_ = other.guideStageId_.Clone();
      stageId_ = other.stageId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameBeadsLevel Clone() {
      return new MiniGameBeadsLevel(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 串珠小游戏
    /// 关卡ID
    /// annotation@field_id(id="true")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "activeLv" field.</summary>
    public const int ActiveLvFieldNumber = 2;
    private int activeLv_;
    /// <summary>
    /// 解锁需要的
    /// 玩家等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveLv {
      get { return activeLv_; }
      set {
        activeLv_ = value;
      }
    }

    /// <summary>Field number for the "guideAction" field.</summary>
    public const int GuideActionFieldNumber = 5;
    private string guideAction_ = "";
    /// <summary>
    /// 起点横,起点纵:终点横:终点纵#
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuideAction {
      get { return guideAction_; }
      set {
        guideAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guideStageId" field.</summary>
    public const int GuideStageIdFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_guideStageId_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> guideStageId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 引导stage组
    /// MiniGameBeadsStage.id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GuideStageId {
      get { return guideStageId_; }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_stageId_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> stageId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 关卡stage组
    /// MiniGameBeadsStage.id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StageId {
      get { return stageId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameBeadsLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameBeadsLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ActiveLv != other.ActiveLv) return false;
      if (GuideAction != other.GuideAction) return false;
      if(!guideStageId_.Equals(other.guideStageId_)) return false;
      if(!stageId_.Equals(other.stageId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ActiveLv != 0) hash ^= ActiveLv.GetHashCode();
      if (GuideAction.Length != 0) hash ^= GuideAction.GetHashCode();
      hash ^= guideStageId_.GetHashCode();
      hash ^= stageId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ActiveLv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActiveLv);
      }
      stageId_.WriteTo(output, _repeated_stageId_codec);
      if (GuideAction.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GuideAction);
      }
      guideStageId_.WriteTo(output, _repeated_guideStageId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ActiveLv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActiveLv);
      }
      stageId_.WriteTo(ref output, _repeated_stageId_codec);
      if (GuideAction.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GuideAction);
      }
      guideStageId_.WriteTo(ref output, _repeated_guideStageId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ActiveLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveLv);
      }
      if (GuideAction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuideAction);
      }
      size += guideStageId_.CalculateSize(_repeated_guideStageId_codec);
      size += stageId_.CalculateSize(_repeated_stageId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameBeadsLevel other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ActiveLv != 0) {
        ActiveLv = other.ActiveLv;
      }
      if (other.GuideAction.Length != 0) {
        GuideAction = other.GuideAction;
      }
      guideStageId_.Add(other.guideStageId_);
      stageId_.Add(other.stageId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ActiveLv = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            stageId_.AddEntriesFrom(input, _repeated_stageId_codec);
            break;
          }
          case 42: {
            GuideAction = input.ReadString();
            break;
          }
          case 50:
          case 48: {
            guideStageId_.AddEntriesFrom(input, _repeated_guideStageId_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ActiveLv = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            stageId_.AddEntriesFrom(ref input, _repeated_stageId_codec);
            break;
          }
          case 42: {
            GuideAction = input.ReadString();
            break;
          }
          case 50:
          case 48: {
            guideStageId_.AddEntriesFrom(ref input, _repeated_guideStageId_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MiniGameBeadsLevelMapABValue : pb::IMessage<MiniGameBeadsLevelMapABValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameBeadsLevelMapABValue> _parser = new pb::MessageParser<MiniGameBeadsLevelMapABValue>(() => new MiniGameBeadsLevelMapABValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameBeadsLevelMapABValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MiniGameBeadsLevelConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameBeadsLevelMapABValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameBeadsLevelMapABValue(MiniGameBeadsLevelMapABValue other) : this() {
      miniGameBeadsLevelMap_ = other.miniGameBeadsLevelMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameBeadsLevelMapABValue Clone() {
      return new MiniGameBeadsLevelMapABValue(this);
    }

    /// <summary>Field number for the "MiniGameBeadsLevelMap" field.</summary>
    public const int MiniGameBeadsLevelMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MiniGameBeadsLevel>.Codec _map_miniGameBeadsLevelMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MiniGameBeadsLevel>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameBeadsLevel.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MiniGameBeadsLevel> miniGameBeadsLevelMap_ = new pbc::MapField<int, global::fat.rawdata.MiniGameBeadsLevel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MiniGameBeadsLevel> MiniGameBeadsLevelMap {
      get { return miniGameBeadsLevelMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameBeadsLevelMapABValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameBeadsLevelMapABValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MiniGameBeadsLevelMap.Equals(other.MiniGameBeadsLevelMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MiniGameBeadsLevelMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      miniGameBeadsLevelMap_.WriteTo(output, _map_miniGameBeadsLevelMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      miniGameBeadsLevelMap_.WriteTo(ref output, _map_miniGameBeadsLevelMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += miniGameBeadsLevelMap_.CalculateSize(_map_miniGameBeadsLevelMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameBeadsLevelMapABValue other) {
      if (other == null) {
        return;
      }
      miniGameBeadsLevelMap_.Add(other.miniGameBeadsLevelMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            miniGameBeadsLevelMap_.AddEntriesFrom(input, _map_miniGameBeadsLevelMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            miniGameBeadsLevelMap_.AddEntriesFrom(ref input, _map_miniGameBeadsLevelMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MiniGameBeadsLevelConf : pb::IMessage<MiniGameBeadsLevelConf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameBeadsLevelConf> _parser = new pb::MessageParser<MiniGameBeadsLevelConf>(() => new MiniGameBeadsLevelConf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameBeadsLevelConf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.rawdata.MiniGameBeadsLevelConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameBeadsLevelConf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameBeadsLevelConf(MiniGameBeadsLevelConf other) : this() {
      miniGameBeadsLevelMap_ = other.miniGameBeadsLevelMap_.Clone();
      miniGameBeadsLevelMapAB_ = other.miniGameBeadsLevelMapAB_.Clone();
      miniGameBeadsLevelMapABPatch_ = other.miniGameBeadsLevelMapABPatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameBeadsLevelConf Clone() {
      return new MiniGameBeadsLevelConf(this);
    }

    /// <summary>Field number for the "MiniGameBeadsLevelMap" field.</summary>
    public const int MiniGameBeadsLevelMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.rawdata.MiniGameBeadsLevel>.Codec _map_miniGameBeadsLevelMap_codec
        = new pbc::MapField<int, global::fat.rawdata.MiniGameBeadsLevel>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameBeadsLevel.Parser), 10);
    private readonly pbc::MapField<int, global::fat.rawdata.MiniGameBeadsLevel> miniGameBeadsLevelMap_ = new pbc::MapField<int, global::fat.rawdata.MiniGameBeadsLevel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.rawdata.MiniGameBeadsLevel> MiniGameBeadsLevelMap {
      get { return miniGameBeadsLevelMap_; }
    }

    /// <summary>Field number for the "MiniGameBeadsLevelMapAB" field.</summary>
    public const int MiniGameBeadsLevelMapABFieldNumber = 2;
    private static readonly pbc::MapField<string, global::fat.rawdata.MiniGameBeadsLevelMapABValue>.Codec _map_miniGameBeadsLevelMapAB_codec
        = new pbc::MapField<string, global::fat.rawdata.MiniGameBeadsLevelMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameBeadsLevelMapABValue.Parser), 18);
    private readonly pbc::MapField<string, global::fat.rawdata.MiniGameBeadsLevelMapABValue> miniGameBeadsLevelMapAB_ = new pbc::MapField<string, global::fat.rawdata.MiniGameBeadsLevelMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MiniGameBeadsLevelMapABValue> MiniGameBeadsLevelMapAB {
      get { return miniGameBeadsLevelMapAB_; }
    }

    /// <summary>Field number for the "MiniGameBeadsLevelMapABPatch" field.</summary>
    public const int MiniGameBeadsLevelMapABPatchFieldNumber = 3;
    private static readonly pbc::MapField<string, global::fat.rawdata.MiniGameBeadsLevelMapABValue>.Codec _map_miniGameBeadsLevelMapABPatch_codec
        = new pbc::MapField<string, global::fat.rawdata.MiniGameBeadsLevelMapABValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::fat.rawdata.MiniGameBeadsLevelMapABValue.Parser), 26);
    private readonly pbc::MapField<string, global::fat.rawdata.MiniGameBeadsLevelMapABValue> miniGameBeadsLevelMapABPatch_ = new pbc::MapField<string, global::fat.rawdata.MiniGameBeadsLevelMapABValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::fat.rawdata.MiniGameBeadsLevelMapABValue> MiniGameBeadsLevelMapABPatch {
      get { return miniGameBeadsLevelMapABPatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameBeadsLevelConf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameBeadsLevelConf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MiniGameBeadsLevelMap.Equals(other.MiniGameBeadsLevelMap)) return false;
      if (!MiniGameBeadsLevelMapAB.Equals(other.MiniGameBeadsLevelMapAB)) return false;
      if (!MiniGameBeadsLevelMapABPatch.Equals(other.MiniGameBeadsLevelMapABPatch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MiniGameBeadsLevelMap.GetHashCode();
      hash ^= MiniGameBeadsLevelMapAB.GetHashCode();
      hash ^= MiniGameBeadsLevelMapABPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      miniGameBeadsLevelMap_.WriteTo(output, _map_miniGameBeadsLevelMap_codec);
      miniGameBeadsLevelMapAB_.WriteTo(output, _map_miniGameBeadsLevelMapAB_codec);
      miniGameBeadsLevelMapABPatch_.WriteTo(output, _map_miniGameBeadsLevelMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      miniGameBeadsLevelMap_.WriteTo(ref output, _map_miniGameBeadsLevelMap_codec);
      miniGameBeadsLevelMapAB_.WriteTo(ref output, _map_miniGameBeadsLevelMapAB_codec);
      miniGameBeadsLevelMapABPatch_.WriteTo(ref output, _map_miniGameBeadsLevelMapABPatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += miniGameBeadsLevelMap_.CalculateSize(_map_miniGameBeadsLevelMap_codec);
      size += miniGameBeadsLevelMapAB_.CalculateSize(_map_miniGameBeadsLevelMapAB_codec);
      size += miniGameBeadsLevelMapABPatch_.CalculateSize(_map_miniGameBeadsLevelMapABPatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameBeadsLevelConf other) {
      if (other == null) {
        return;
      }
      miniGameBeadsLevelMap_.Add(other.miniGameBeadsLevelMap_);
      miniGameBeadsLevelMapAB_.Add(other.miniGameBeadsLevelMapAB_);
      miniGameBeadsLevelMapABPatch_.Add(other.miniGameBeadsLevelMapABPatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            miniGameBeadsLevelMap_.AddEntriesFrom(input, _map_miniGameBeadsLevelMap_codec);
            break;
          }
          case 18: {
            miniGameBeadsLevelMapAB_.AddEntriesFrom(input, _map_miniGameBeadsLevelMapAB_codec);
            break;
          }
          case 26: {
            miniGameBeadsLevelMapABPatch_.AddEntriesFrom(input, _map_miniGameBeadsLevelMapABPatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            miniGameBeadsLevelMap_.AddEntriesFrom(ref input, _map_miniGameBeadsLevelMap_codec);
            break;
          }
          case 18: {
            miniGameBeadsLevelMapAB_.AddEntriesFrom(ref input, _map_miniGameBeadsLevelMapAB_codec);
            break;
          }
          case 26: {
            miniGameBeadsLevelMapABPatch_.AddEntriesFrom(ref input, _map_miniGameBeadsLevelMapABPatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
