// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dbstate/payment.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.dbstate {

  /// <summary>Holder for reflection information generated from dbstate/payment.proto</summary>
  public static partial class PaymentReflection {

    #region Descriptor
    /// <summary>File descriptor for dbstate/payment.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PaymentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVkYnN0YXRlL3BheW1lbnQucHJvdG8SB2Ric3RhdGUi6AEKB1BheW1lbnQS",
            "EQoJUGF5bWVudElkGAEgASgJEgsKA1VpZBgCIAEoBBILCgNUSUQYAyABKAkS",
            "JgoGc3RhdHVzGAQgASgOMhYuZGJzdGF0ZS5QYXltZW50U3RhdHVzEhAKCGN1",
            "cnJlbmN5GAUgASgJEhIKCmFtb3VudENlbnQYBiABKAQSFAoMVkN1cnJlbmN5",
            "S2V5GAcgASgJEhAKCFBhaWRUaW1lGAggASgEEhAKCFBhaWRUeXBlGAkgASgJ",
            "EhIKCkNyZWF0ZVRpbWUYCiABKAQSFAoMVGhyb3VnaENhcmdvGAsgASgJKjMK",
            "DVBheW1lbnRTdGF0dXMSCAoEUGFpZBAAEgsKB1NoaXBwZWQQARILCgdJbnZh",
            "bGlkEAJCPVotZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2VuL2dvbGFu",
            "Zy9kYnN0YXRlqgILZmF0LmRic3RhdGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::fat.dbstate.PaymentStatus), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.dbstate.Payment), global::fat.dbstate.Payment.Parser, new[]{ "PaymentId", "Uid", "TID", "Status", "Currency", "AmountCent", "VCurrencyKey", "PaidTime", "PaidType", "CreateTime", "ThroughCargo" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PaymentStatus {
    [pbr::OriginalName("Paid")] Paid = 0,
    [pbr::OriginalName("Shipped")] Shipped = 1,
    [pbr::OriginalName("Invalid")] Invalid = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// @Entry @NoCache
  /// </summary>
  public sealed partial class Payment : pb::IMessage<Payment>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Payment> _parser = new pb::MessageParser<Payment>(() => new Payment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.dbstate.PaymentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payment(Payment other) : this() {
      paymentId_ = other.paymentId_;
      uid_ = other.uid_;
      tID_ = other.tID_;
      status_ = other.status_;
      currency_ = other.currency_;
      amountCent_ = other.amountCent_;
      vCurrencyKey_ = other.vCurrencyKey_;
      paidTime_ = other.paidTime_;
      paidType_ = other.paidType_;
      createTime_ = other.createTime_;
      throughCargo_ = other.throughCargo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payment Clone() {
      return new Payment(this);
    }

    /// <summary>Field number for the "PaymentId" field.</summary>
    public const int PaymentIdFieldNumber = 1;
    private string paymentId_ = "";
    /// <summary>
    /// @Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentId {
      get { return paymentId_; }
      set {
        paymentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 2;
    private ulong uid_;
    /// <summary>
    /// @Index=1 @Hint
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "TID" field.</summary>
    public const int TIDFieldNumber = 3;
    private string tID_ = "";
    /// <summary>
    /// @Index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TID {
      get { return tID_; }
      set {
        tID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::fat.dbstate.PaymentStatus status_ = global::fat.dbstate.PaymentStatus.Paid;
    /// <summary>
    /// @Index=1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.dbstate.PaymentStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 5;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amountCent" field.</summary>
    public const int AmountCentFieldNumber = 6;
    private ulong amountCent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AmountCent {
      get { return amountCent_; }
      set {
        amountCent_ = value;
      }
    }

    /// <summary>Field number for the "VCurrencyKey" field.</summary>
    public const int VCurrencyKeyFieldNumber = 7;
    private string vCurrencyKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VCurrencyKey {
      get { return vCurrencyKey_; }
      set {
        vCurrencyKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PaidTime" field.</summary>
    public const int PaidTimeFieldNumber = 8;
    private ulong paidTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PaidTime {
      get { return paidTime_; }
      set {
        paidTime_ = value;
      }
    }

    /// <summary>Field number for the "PaidType" field.</summary>
    public const int PaidTypeFieldNumber = 9;
    private string paidType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaidType {
      get { return paidType_; }
      set {
        paidType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CreateTime" field.</summary>
    public const int CreateTimeFieldNumber = 10;
    private ulong createTime_;
    /// <summary>
    /// @Index=1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "ThroughCargo" field.</summary>
    public const int ThroughCargoFieldNumber = 11;
    private string throughCargo_ = "";
    /// <summary>
    /// @Blob
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ThroughCargo {
      get { return throughCargo_; }
      set {
        throughCargo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentId != other.PaymentId) return false;
      if (Uid != other.Uid) return false;
      if (TID != other.TID) return false;
      if (Status != other.Status) return false;
      if (Currency != other.Currency) return false;
      if (AmountCent != other.AmountCent) return false;
      if (VCurrencyKey != other.VCurrencyKey) return false;
      if (PaidTime != other.PaidTime) return false;
      if (PaidType != other.PaidType) return false;
      if (CreateTime != other.CreateTime) return false;
      if (ThroughCargo != other.ThroughCargo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentId.Length != 0) hash ^= PaymentId.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (TID.Length != 0) hash ^= TID.GetHashCode();
      if (Status != global::fat.dbstate.PaymentStatus.Paid) hash ^= Status.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (AmountCent != 0UL) hash ^= AmountCent.GetHashCode();
      if (VCurrencyKey.Length != 0) hash ^= VCurrencyKey.GetHashCode();
      if (PaidTime != 0UL) hash ^= PaidTime.GetHashCode();
      if (PaidType.Length != 0) hash ^= PaidType.GetHashCode();
      if (CreateTime != 0UL) hash ^= CreateTime.GetHashCode();
      if (ThroughCargo.Length != 0) hash ^= ThroughCargo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PaymentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PaymentId);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uid);
      }
      if (TID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TID);
      }
      if (Status != global::fat.dbstate.PaymentStatus.Paid) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Currency);
      }
      if (AmountCent != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(AmountCent);
      }
      if (VCurrencyKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VCurrencyKey);
      }
      if (PaidTime != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(PaidTime);
      }
      if (PaidType.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PaidType);
      }
      if (CreateTime != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(CreateTime);
      }
      if (ThroughCargo.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ThroughCargo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PaymentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PaymentId);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uid);
      }
      if (TID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TID);
      }
      if (Status != global::fat.dbstate.PaymentStatus.Paid) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Currency);
      }
      if (AmountCent != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(AmountCent);
      }
      if (VCurrencyKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VCurrencyKey);
      }
      if (PaidTime != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(PaidTime);
      }
      if (PaidType.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PaidType);
      }
      if (CreateTime != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(CreateTime);
      }
      if (ThroughCargo.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ThroughCargo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentId);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (TID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TID);
      }
      if (Status != global::fat.dbstate.PaymentStatus.Paid) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (AmountCent != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AmountCent);
      }
      if (VCurrencyKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VCurrencyKey);
      }
      if (PaidTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PaidTime);
      }
      if (PaidType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaidType);
      }
      if (CreateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateTime);
      }
      if (ThroughCargo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThroughCargo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payment other) {
      if (other == null) {
        return;
      }
      if (other.PaymentId.Length != 0) {
        PaymentId = other.PaymentId;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.TID.Length != 0) {
        TID = other.TID;
      }
      if (other.Status != global::fat.dbstate.PaymentStatus.Paid) {
        Status = other.Status;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.AmountCent != 0UL) {
        AmountCent = other.AmountCent;
      }
      if (other.VCurrencyKey.Length != 0) {
        VCurrencyKey = other.VCurrencyKey;
      }
      if (other.PaidTime != 0UL) {
        PaidTime = other.PaidTime;
      }
      if (other.PaidType.Length != 0) {
        PaidType = other.PaidType;
      }
      if (other.CreateTime != 0UL) {
        CreateTime = other.CreateTime;
      }
      if (other.ThroughCargo.Length != 0) {
        ThroughCargo = other.ThroughCargo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PaymentId = input.ReadString();
            break;
          }
          case 16: {
            Uid = input.ReadUInt64();
            break;
          }
          case 26: {
            TID = input.ReadString();
            break;
          }
          case 32: {
            Status = (global::fat.dbstate.PaymentStatus) input.ReadEnum();
            break;
          }
          case 42: {
            Currency = input.ReadString();
            break;
          }
          case 48: {
            AmountCent = input.ReadUInt64();
            break;
          }
          case 58: {
            VCurrencyKey = input.ReadString();
            break;
          }
          case 64: {
            PaidTime = input.ReadUInt64();
            break;
          }
          case 74: {
            PaidType = input.ReadString();
            break;
          }
          case 80: {
            CreateTime = input.ReadUInt64();
            break;
          }
          case 90: {
            ThroughCargo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PaymentId = input.ReadString();
            break;
          }
          case 16: {
            Uid = input.ReadUInt64();
            break;
          }
          case 26: {
            TID = input.ReadString();
            break;
          }
          case 32: {
            Status = (global::fat.dbstate.PaymentStatus) input.ReadEnum();
            break;
          }
          case 42: {
            Currency = input.ReadString();
            break;
          }
          case 48: {
            AmountCent = input.ReadUInt64();
            break;
          }
          case 58: {
            VCurrencyKey = input.ReadString();
            break;
          }
          case 64: {
            PaidTime = input.ReadUInt64();
            break;
          }
          case 74: {
            PaidType = input.ReadString();
            break;
          }
          case 80: {
            CreateTime = input.ReadUInt64();
            break;
          }
          case 90: {
            ThroughCargo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
