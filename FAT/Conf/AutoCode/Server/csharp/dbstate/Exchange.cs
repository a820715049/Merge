// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dbstate/exchange.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.dbstate {

  /// <summary>Holder for reflection information generated from dbstate/exchange.proto</summary>
  public static partial class ExchangeReflection {

    #region Descriptor
    /// <summary>File descriptor for dbstate/exchange.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExchangeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZkYnN0YXRlL2V4Y2hhbmdlLnByb3RvEgdkYnN0YXRlGhpyYXdkYXRhL0V4",
            "Y2hhbmdlVHlwZS5wcm90byKoAgoIRXhjaGFuZ2USCgoCSWQYASABKAQSCwoD",
            "dWlkGAIgASgEEhAKCGZyb21fdWlkGAQgASgEEg8KB3NlbmRfdHMYBSABKAMS",
            "EQoJZXhwaXJlX3RzGAYgASgDEisKBWl0ZW1zGAcgAygLMhwuZGJzdGF0ZS5F",
            "eGNoYW5nZS5JdGVtc0VudHJ5Eg8KB2lzX3JlYWQYCCABKAgSLAoNZXhjaGFu",
            "Z2VfdHlwZRgJIAEoDjIVLnJhd2RhdGEuRXhjaGFuZ2VUeXBlEjMKEWV4Y2hh",
            "bmdlX3N1Yl90eXBlGAogASgOMhguZGJzdGF0ZS5FeGNoYW5nZVN1YlR5cGUa",
            "LAoKSXRlbXNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgB",
            "KkQKD0V4Y2hhbmdlU3ViVHlwZRIWChJFWENIQU5HRV9UWVBFX1NFTkQQABIZ",
            "ChVFWENIQU5HRV9UWVBFX1JFUVVFU1QQAUI9Wi1naXRsYWIuZnVucGx1cy5p",
            "by9mYXQvY29uZi9nZW4vZ29sYW5nL2Ric3RhdGWqAgtmYXQuZGJzdGF0ZWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.rawdata.ExchangeTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::fat.dbstate.ExchangeSubType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.dbstate.Exchange), global::fat.dbstate.Exchange.Parser, new[]{ "Id", "Uid", "FromUid", "SendTs", "ExpireTs", "Items", "IsRead", "ExchangeType", "ExchangeSubType" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum ExchangeSubType {
    /// <summary>
    /// 主动发送
    /// </summary>
    [pbr::OriginalName("EXCHANGE_TYPE_SEND")] ExchangeTypeSend = 0,
    /// <summary>
    /// 索取
    /// </summary>
    [pbr::OriginalName("EXCHANGE_TYPE_REQUEST")] ExchangeTypeRequest = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// @Entry @NoCache
  /// </summary>
  public sealed partial class Exchange : pb::IMessage<Exchange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Exchange> _parser = new pb::MessageParser<Exchange>(() => new Exchange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Exchange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.dbstate.ExchangeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exchange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exchange(Exchange other) : this() {
      id_ = other.id_;
      uid_ = other.uid_;
      fromUid_ = other.fromUid_;
      sendTs_ = other.sendTs_;
      expireTs_ = other.expireTs_;
      items_ = other.items_.Clone();
      isRead_ = other.isRead_;
      exchangeType_ = other.exchangeType_;
      exchangeSubType_ = other.exchangeSubType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exchange Clone() {
      return new Exchange(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    /// @Id @AutoIncrement
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private ulong uid_;
    /// <summary>
    ///@Hint @Aggregate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "from_uid" field.</summary>
    public const int FromUidFieldNumber = 4;
    private ulong fromUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromUid {
      get { return fromUid_; }
      set {
        fromUid_ = value;
      }
    }

    /// <summary>Field number for the "send_ts" field.</summary>
    public const int SendTsFieldNumber = 5;
    private long sendTs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTs {
      get { return sendTs_; }
      set {
        sendTs_ = value;
      }
    }

    /// <summary>Field number for the "expire_ts" field.</summary>
    public const int ExpireTsFieldNumber = 6;
    private long expireTs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpireTs {
      get { return expireTs_; }
      set {
        expireTs_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 7;
    private static readonly pbc::MapField<int, int>.Codec _map_items_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 58);
    private readonly pbc::MapField<int, int> items_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "is_read" field.</summary>
    public const int IsReadFieldNumber = 8;
    private bool isRead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRead {
      get { return isRead_; }
      set {
        isRead_ = value;
      }
    }

    /// <summary>Field number for the "exchange_type" field.</summary>
    public const int ExchangeTypeFieldNumber = 9;
    private global::fat.rawdata.ExchangeType exchangeType_ = global::fat.rawdata.ExchangeType.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.rawdata.ExchangeType ExchangeType {
      get { return exchangeType_; }
      set {
        exchangeType_ = value;
      }
    }

    /// <summary>Field number for the "exchange_sub_type" field.</summary>
    public const int ExchangeSubTypeFieldNumber = 10;
    private global::fat.dbstate.ExchangeSubType exchangeSubType_ = global::fat.dbstate.ExchangeSubType.ExchangeTypeSend;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.dbstate.ExchangeSubType ExchangeSubType {
      get { return exchangeSubType_; }
      set {
        exchangeSubType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Exchange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Exchange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Uid != other.Uid) return false;
      if (FromUid != other.FromUid) return false;
      if (SendTs != other.SendTs) return false;
      if (ExpireTs != other.ExpireTs) return false;
      if (!Items.Equals(other.Items)) return false;
      if (IsRead != other.IsRead) return false;
      if (ExchangeType != other.ExchangeType) return false;
      if (ExchangeSubType != other.ExchangeSubType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (FromUid != 0UL) hash ^= FromUid.GetHashCode();
      if (SendTs != 0L) hash ^= SendTs.GetHashCode();
      if (ExpireTs != 0L) hash ^= ExpireTs.GetHashCode();
      hash ^= Items.GetHashCode();
      if (IsRead != false) hash ^= IsRead.GetHashCode();
      if (ExchangeType != global::fat.rawdata.ExchangeType.Default) hash ^= ExchangeType.GetHashCode();
      if (ExchangeSubType != global::fat.dbstate.ExchangeSubType.ExchangeTypeSend) hash ^= ExchangeSubType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uid);
      }
      if (FromUid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(FromUid);
      }
      if (SendTs != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SendTs);
      }
      if (ExpireTs != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ExpireTs);
      }
      items_.WriteTo(output, _map_items_codec);
      if (IsRead != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsRead);
      }
      if (ExchangeType != global::fat.rawdata.ExchangeType.Default) {
        output.WriteRawTag(72);
        output.WriteEnum((int) ExchangeType);
      }
      if (ExchangeSubType != global::fat.dbstate.ExchangeSubType.ExchangeTypeSend) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ExchangeSubType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uid);
      }
      if (FromUid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(FromUid);
      }
      if (SendTs != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SendTs);
      }
      if (ExpireTs != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ExpireTs);
      }
      items_.WriteTo(ref output, _map_items_codec);
      if (IsRead != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsRead);
      }
      if (ExchangeType != global::fat.rawdata.ExchangeType.Default) {
        output.WriteRawTag(72);
        output.WriteEnum((int) ExchangeType);
      }
      if (ExchangeSubType != global::fat.dbstate.ExchangeSubType.ExchangeTypeSend) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ExchangeSubType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (FromUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromUid);
      }
      if (SendTs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTs);
      }
      if (ExpireTs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTs);
      }
      size += items_.CalculateSize(_map_items_codec);
      if (IsRead != false) {
        size += 1 + 1;
      }
      if (ExchangeType != global::fat.rawdata.ExchangeType.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExchangeType);
      }
      if (ExchangeSubType != global::fat.dbstate.ExchangeSubType.ExchangeTypeSend) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExchangeSubType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Exchange other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.FromUid != 0UL) {
        FromUid = other.FromUid;
      }
      if (other.SendTs != 0L) {
        SendTs = other.SendTs;
      }
      if (other.ExpireTs != 0L) {
        ExpireTs = other.ExpireTs;
      }
      items_.Add(other.items_);
      if (other.IsRead != false) {
        IsRead = other.IsRead;
      }
      if (other.ExchangeType != global::fat.rawdata.ExchangeType.Default) {
        ExchangeType = other.ExchangeType;
      }
      if (other.ExchangeSubType != global::fat.dbstate.ExchangeSubType.ExchangeTypeSend) {
        ExchangeSubType = other.ExchangeSubType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Uid = input.ReadUInt64();
            break;
          }
          case 32: {
            FromUid = input.ReadUInt64();
            break;
          }
          case 40: {
            SendTs = input.ReadInt64();
            break;
          }
          case 48: {
            ExpireTs = input.ReadInt64();
            break;
          }
          case 58: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
          case 64: {
            IsRead = input.ReadBool();
            break;
          }
          case 72: {
            ExchangeType = (global::fat.rawdata.ExchangeType) input.ReadEnum();
            break;
          }
          case 80: {
            ExchangeSubType = (global::fat.dbstate.ExchangeSubType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Uid = input.ReadUInt64();
            break;
          }
          case 32: {
            FromUid = input.ReadUInt64();
            break;
          }
          case 40: {
            SendTs = input.ReadInt64();
            break;
          }
          case 48: {
            ExpireTs = input.ReadInt64();
            break;
          }
          case 58: {
            items_.AddEntriesFrom(ref input, _map_items_codec);
            break;
          }
          case 64: {
            IsRead = input.ReadBool();
            break;
          }
          case 72: {
            ExchangeType = (global::fat.rawdata.ExchangeType) input.ReadEnum();
            break;
          }
          case 80: {
            ExchangeSubType = (global::fat.dbstate.ExchangeSubType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
