// Code generated by protokitgo. DO NOT EDIT.
// source: service/rtm_service.proto

#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System;
using System.Collections.Generic;
using global::fat.netutils;
using global::Google.Protobuf;
using msg = fat.msg;

namespace fat.service {
	/// <summary>
	/// 方法定义,支持两种使用方式
	/// - gateway模式，请求路径为：QueryPath，推荐使用该模式
	/// - 传统模式，请求路径为：FullPathHTTP
	/// 两种模式下，请求对象的URI都要使用 URIRequest 而非 XXX.Descriptor.FullName
	/// </summary> 
	public partial class RTMService_GetToken : ProtoServiceInterface{
		public string GetQueryPath() => QueryPath; 
		public string GetURIRequest() => URIRequest; 
		public string GetFullPathHTTP() => FullPathHTTP;

		/// <summary>
		/// 当前 Service 的请求根路径
		/// </summary> 
		public const string QueryPath = "/biz";

		/// <summary>
		/// HTTP 请求全路径，格式为 QueryPath /XXX, 其中XXX部分可以是自定义字符串或URIRequest
		/// </summary>
		public const string FullPathHTTP = "/biz/service.RTMService/GetToken";

		/// <summary>
		/// 是否为 Actor 系统方法
		/// </summary> 
		public static readonly bool IsActor = false;

		/// <summary>
		/// 当为 Actor 系统方法时，是否为 Tell 类型
		/// </summary> 
		public static readonly bool IsTell  = false;

		/// <summary>
		/// 当前方法请求对象的URI
		/// 注意在发起请求的时候，请求对象的URI要使用 URIRequest 而非 XXX.Descriptor.FullName
		/// </summary>
		public const string URIRequest = "/service.RTMService/GetToken";

		/// <summary>
		/// 构造当前方法的请求对象
		/// </summary> 
		/// <returns> 当前方法的请求对象，类型: msg.RTMTokenReq </returns>
		public static msg.RTMTokenReq NewRequest() { return new msg.RTMTokenReq(); }

		/// <summary>
		/// 当前方法返回对象的URI，即: msg.RTMTokenResp.Descriptor.FullName
		/// </summary> 
		public static readonly string URIResponse = "msg.RTMTokenResp";

		/// <summary>
		/// 构造当前方法的返回对象
		/// </summary> 
		/// <returns> 当前方法的返回对象，类型: msg.RTMTokenResp </returns>
		public static msg.RTMTokenResp NewResponse() { return new msg.RTMTokenResp(); }

		/// <summary>
		/// 当前请求的 HTTP 路径，用户自定义的路径 或 自动生成的路径
		/// 由于历史原因，自动生成的路径并不包含QueryPath,但用户自定义的路径可能包含了QueryPath，存在歧义
		/// </summary>
		[Obsolete("不要继续使用 PathHTTP，优先使用 FullPathHTTP", false)]
		public const string PathHTTP = "/service.RTMService/GetToken";
	
		/// <summary>
		/// 当前方法的标签，用于标识该方法的属性与类型
		/// </summary>
		public static readonly string[] Labels = {  };

		/// <summary>
		/// 针对此service自定义SendHelper, 不设定则使用SendHelper.Instance
		/// </summary>
		public static SendHelper CustomSender = null;
		
		/// <summary>
		/// 发送Http请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void PostMessage(msg.RTMTokenReq request, Action<IMessage> callback = null,
			DelegateHttpRequestError delegateHttpRequestError = null, Dictionary<string, string> metadata = null,
			Dictionary<string, string> header = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			header = sendHelper.MergeMetadata(MetaType.HttpHeader, URIRequest, Labels, header);
			sendHelper.HttpClientPost(sendHelper.HttpHost + QueryPath, request, callback, delegateHttpRequestError, metadata, header, URIRequest);
		}

		/// <summary>
		/// 发送TCP/UDP请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void SendMessage(msg.RTMTokenReq request, Action<IMessage> handler = null,
			Dictionary<string, string> metadata = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			sendHelper.ProtokitClientSend(request, handler, metadata, URIRequest);
		}
	}
}

#endregion Designer generated code
