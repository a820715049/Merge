// Code generated by protokitgo. DO NOT EDIT.
// source: service/platform_service.proto

#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System;
using System.Collections.Generic;
using global::fat.netutils;
using global::Google.Protobuf;
using msg = fat.msg;

namespace fat.service {
	/// <summary>
	/// 方法定义,支持两种使用方式
	/// - gateway模式，请求路径为：QueryPath，推荐使用该模式
	/// - 传统模式，请求路径为：FullPathHTTP
	/// 两种模式下，请求对象的URI都要使用 URIRequest 而非 XXX.Descriptor.FullName
	/// </summary> 
	public partial class PlatformService_MakeThroughCargo : ProtoServiceInterface{
		public string GetQueryPath() => QueryPath; 
		public string GetURIRequest() => URIRequest; 
		public string GetFullPathHTTP() => FullPathHTTP;

		/// <summary>
		/// 当前 Service 的请求根路径
		/// </summary> 
		public const string QueryPath = "/biz";

		/// <summary>
		/// HTTP 请求全路径，格式为 QueryPath /XXX, 其中XXX部分可以是自定义字符串或URIRequest
		/// </summary>
		public const string FullPathHTTP = "/biz/service.PlatformService/MakeThroughCargo";

		/// <summary>
		/// 是否为 Actor 系统方法
		/// </summary> 
		public static readonly bool IsActor = false;

		/// <summary>
		/// 当为 Actor 系统方法时，是否为 Tell 类型
		/// </summary> 
		public static readonly bool IsTell  = false;

		/// <summary>
		/// 当前方法请求对象的URI
		/// 注意在发起请求的时候，请求对象的URI要使用 URIRequest 而非 XXX.Descriptor.FullName
		/// </summary>
		public const string URIRequest = "/service.PlatformService/MakeThroughCargo";

		/// <summary>
		/// 构造当前方法的请求对象
		/// </summary> 
		/// <returns> 当前方法的请求对象，类型: msg.MakeThroughCargoReq </returns>
		public static msg.MakeThroughCargoReq NewRequest() { return new msg.MakeThroughCargoReq(); }

		/// <summary>
		/// 当前方法返回对象的URI，即: msg.MakeThroughCargoResp.Descriptor.FullName
		/// </summary> 
		public static readonly string URIResponse = "msg.MakeThroughCargoResp";

		/// <summary>
		/// 构造当前方法的返回对象
		/// </summary> 
		/// <returns> 当前方法的返回对象，类型: msg.MakeThroughCargoResp </returns>
		public static msg.MakeThroughCargoResp NewResponse() { return new msg.MakeThroughCargoResp(); }

		/// <summary>
		/// 当前请求的 HTTP 路径，用户自定义的路径 或 自动生成的路径
		/// 由于历史原因，自动生成的路径并不包含QueryPath,但用户自定义的路径可能包含了QueryPath，存在歧义
		/// </summary>
		[Obsolete("不要继续使用 PathHTTP，优先使用 FullPathHTTP", false)]
		public const string PathHTTP = "/service.PlatformService/MakeThroughCargo";
	
		/// <summary>
		/// 当前方法的标签，用于标识该方法的属性与类型
		/// </summary>
		public static readonly string[] Labels = {  };

		/// <summary>
		/// 针对此service自定义SendHelper, 不设定则使用SendHelper.Instance
		/// </summary>
		public static SendHelper CustomSender = null;
		
		/// <summary>
		/// 发送Http请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void PostMessage(msg.MakeThroughCargoReq request, Action<IMessage> callback = null,
			DelegateHttpRequestError delegateHttpRequestError = null, Dictionary<string, string> metadata = null,
			Dictionary<string, string> header = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			header = sendHelper.MergeMetadata(MetaType.HttpHeader, URIRequest, Labels, header);
			sendHelper.HttpClientPost(sendHelper.HttpHost + QueryPath, request, callback, delegateHttpRequestError, metadata, header, URIRequest);
		}

		/// <summary>
		/// 发送TCP/UDP请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void SendMessage(msg.MakeThroughCargoReq request, Action<IMessage> handler = null,
			Dictionary<string, string> metadata = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			sendHelper.ProtokitClientSend(request, handler, metadata, URIRequest);
		}
	}
	/// <summary>
	/// 方法定义,支持两种使用方式
	/// - gateway模式，请求路径为：QueryPath，推荐使用该模式
	/// - 传统模式，请求路径为：FullPathHTTP
	/// 两种模式下，请求对象的URI都要使用 URIRequest 而非 XXX.Descriptor.FullName
	/// </summary> 
	public partial class PlatformService_DeliverCargo : ProtoServiceInterface{
		public string GetQueryPath() => QueryPath; 
		public string GetURIRequest() => URIRequest; 
		public string GetFullPathHTTP() => FullPathHTTP;

		/// <summary>
		/// 当前 Service 的请求根路径
		/// </summary> 
		public const string QueryPath = "/biz";

		/// <summary>
		/// HTTP 请求全路径，格式为 QueryPath /XXX, 其中XXX部分可以是自定义字符串或URIRequest
		/// </summary>
		public const string FullPathHTTP = "/biz/service.PlatformService/DeliverCargo";

		/// <summary>
		/// 是否为 Actor 系统方法
		/// </summary> 
		public static readonly bool IsActor = false;

		/// <summary>
		/// 当为 Actor 系统方法时，是否为 Tell 类型
		/// </summary> 
		public static readonly bool IsTell  = false;

		/// <summary>
		/// 当前方法请求对象的URI
		/// 注意在发起请求的时候，请求对象的URI要使用 URIRequest 而非 XXX.Descriptor.FullName
		/// </summary>
		public const string URIRequest = "/service.PlatformService/DeliverCargo";

		/// <summary>
		/// 构造当前方法的请求对象
		/// </summary> 
		/// <returns> 当前方法的请求对象，类型: msg.DeliverCargoReq </returns>
		public static msg.DeliverCargoReq NewRequest() { return new msg.DeliverCargoReq(); }

		/// <summary>
		/// 当前方法返回对象的URI，即: msg.DeliverCargoResp.Descriptor.FullName
		/// </summary> 
		public static readonly string URIResponse = "msg.DeliverCargoResp";

		/// <summary>
		/// 构造当前方法的返回对象
		/// </summary> 
		/// <returns> 当前方法的返回对象，类型: msg.DeliverCargoResp </returns>
		public static msg.DeliverCargoResp NewResponse() { return new msg.DeliverCargoResp(); }

		/// <summary>
		/// 当前请求的 HTTP 路径，用户自定义的路径 或 自动生成的路径
		/// 由于历史原因，自动生成的路径并不包含QueryPath,但用户自定义的路径可能包含了QueryPath，存在歧义
		/// </summary>
		[Obsolete("不要继续使用 PathHTTP，优先使用 FullPathHTTP", false)]
		public const string PathHTTP = "/service.PlatformService/DeliverCargo";
	
		/// <summary>
		/// 当前方法的标签，用于标识该方法的属性与类型
		/// </summary>
		public static readonly string[] Labels = {  };

		/// <summary>
		/// 针对此service自定义SendHelper, 不设定则使用SendHelper.Instance
		/// </summary>
		public static SendHelper CustomSender = null;
		
		/// <summary>
		/// 发送Http请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void PostMessage(msg.DeliverCargoReq request, Action<IMessage> callback = null,
			DelegateHttpRequestError delegateHttpRequestError = null, Dictionary<string, string> metadata = null,
			Dictionary<string, string> header = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			header = sendHelper.MergeMetadata(MetaType.HttpHeader, URIRequest, Labels, header);
			sendHelper.HttpClientPost(sendHelper.HttpHost + QueryPath, request, callback, delegateHttpRequestError, metadata, header, URIRequest);
		}

		/// <summary>
		/// 发送TCP/UDP请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void SendMessage(msg.DeliverCargoReq request, Action<IMessage> handler = null,
			Dictionary<string, string> metadata = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			sendHelper.ProtokitClientSend(request, handler, metadata, URIRequest);
		}
	}
	/// <summary>
	/// 方法定义,支持两种使用方式
	/// - gateway模式，请求路径为：QueryPath，推荐使用该模式
	/// - 传统模式，请求路径为：FullPathHTTP
	/// 两种模式下，请求对象的URI都要使用 URIRequest 而非 XXX.Descriptor.FullName
	/// </summary> 
	public partial class PlatformService_DeliverGiftCode : ProtoServiceInterface{
		public string GetQueryPath() => QueryPath; 
		public string GetURIRequest() => URIRequest; 
		public string GetFullPathHTTP() => FullPathHTTP;

		/// <summary>
		/// 当前 Service 的请求根路径
		/// </summary> 
		public const string QueryPath = "/biz";

		/// <summary>
		/// HTTP 请求全路径，格式为 QueryPath /XXX, 其中XXX部分可以是自定义字符串或URIRequest
		/// </summary>
		public const string FullPathHTTP = "/biz/service.PlatformService/DeliverGiftCode";

		/// <summary>
		/// 是否为 Actor 系统方法
		/// </summary> 
		public static readonly bool IsActor = false;

		/// <summary>
		/// 当为 Actor 系统方法时，是否为 Tell 类型
		/// </summary> 
		public static readonly bool IsTell  = false;

		/// <summary>
		/// 当前方法请求对象的URI
		/// 注意在发起请求的时候，请求对象的URI要使用 URIRequest 而非 XXX.Descriptor.FullName
		/// </summary>
		public const string URIRequest = "/service.PlatformService/DeliverGiftCode";

		/// <summary>
		/// 构造当前方法的请求对象
		/// </summary> 
		/// <returns> 当前方法的请求对象，类型: msg.DeliverGiftCodeReq </returns>
		public static msg.DeliverGiftCodeReq NewRequest() { return new msg.DeliverGiftCodeReq(); }

		/// <summary>
		/// 当前方法返回对象的URI，即: msg.DeliverGiftCodeResp.Descriptor.FullName
		/// </summary> 
		public static readonly string URIResponse = "msg.DeliverGiftCodeResp";

		/// <summary>
		/// 构造当前方法的返回对象
		/// </summary> 
		/// <returns> 当前方法的返回对象，类型: msg.DeliverGiftCodeResp </returns>
		public static msg.DeliverGiftCodeResp NewResponse() { return new msg.DeliverGiftCodeResp(); }

		/// <summary>
		/// 当前请求的 HTTP 路径，用户自定义的路径 或 自动生成的路径
		/// 由于历史原因，自动生成的路径并不包含QueryPath,但用户自定义的路径可能包含了QueryPath，存在歧义
		/// </summary>
		[Obsolete("不要继续使用 PathHTTP，优先使用 FullPathHTTP", false)]
		public const string PathHTTP = "/service.PlatformService/DeliverGiftCode";
	
		/// <summary>
		/// 当前方法的标签，用于标识该方法的属性与类型
		/// </summary>
		public static readonly string[] Labels = {  };

		/// <summary>
		/// 针对此service自定义SendHelper, 不设定则使用SendHelper.Instance
		/// </summary>
		public static SendHelper CustomSender = null;
		
		/// <summary>
		/// 发送Http请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void PostMessage(msg.DeliverGiftCodeReq request, Action<IMessage> callback = null,
			DelegateHttpRequestError delegateHttpRequestError = null, Dictionary<string, string> metadata = null,
			Dictionary<string, string> header = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			header = sendHelper.MergeMetadata(MetaType.HttpHeader, URIRequest, Labels, header);
			sendHelper.HttpClientPost(sendHelper.HttpHost + QueryPath, request, callback, delegateHttpRequestError, metadata, header, URIRequest);
		}

		/// <summary>
		/// 发送TCP/UDP请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void SendMessage(msg.DeliverGiftCodeReq request, Action<IMessage> handler = null,
			Dictionary<string, string> metadata = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			sendHelper.ProtokitClientSend(request, handler, metadata, URIRequest);
		}
	}
	/// <summary>
	/// 方法定义,支持两种使用方式
	/// - gateway模式，请求路径为：QueryPath，推荐使用该模式
	/// - 传统模式，请求路径为：FullPathHTTP
	/// 两种模式下，请求对象的URI都要使用 URIRequest 而非 XXX.Descriptor.FullName
	/// </summary> 
	public partial class PlatformService_QAPlatformPaymentNotify : ProtoServiceInterface{
		public string GetQueryPath() => QueryPath; 
		public string GetURIRequest() => URIRequest; 
		public string GetFullPathHTTP() => FullPathHTTP;

		/// <summary>
		/// 当前 Service 的请求根路径
		/// </summary> 
		public const string QueryPath = "/biz";

		/// <summary>
		/// HTTP 请求全路径，格式为 QueryPath /XXX, 其中XXX部分可以是自定义字符串或URIRequest
		/// </summary>
		public const string FullPathHTTP = "/biz/service.PlatformService/QAPlatformPaymentNotify";

		/// <summary>
		/// 是否为 Actor 系统方法
		/// </summary> 
		public static readonly bool IsActor = false;

		/// <summary>
		/// 当为 Actor 系统方法时，是否为 Tell 类型
		/// </summary> 
		public static readonly bool IsTell  = false;

		/// <summary>
		/// 当前方法请求对象的URI
		/// 注意在发起请求的时候，请求对象的URI要使用 URIRequest 而非 XXX.Descriptor.FullName
		/// </summary>
		public const string URIRequest = "/service.PlatformService/QAPlatformPaymentNotify";

		/// <summary>
		/// 构造当前方法的请求对象
		/// </summary> 
		/// <returns> 当前方法的请求对象，类型: msg.QAPlatformPaymentNotifyReq </returns>
		public static msg.QAPlatformPaymentNotifyReq NewRequest() { return new msg.QAPlatformPaymentNotifyReq(); }

		/// <summary>
		/// 当前方法返回对象的URI，即: msg.QAPlatformPaymentNotifyResp.Descriptor.FullName
		/// </summary> 
		public static readonly string URIResponse = "msg.QAPlatformPaymentNotifyResp";

		/// <summary>
		/// 构造当前方法的返回对象
		/// </summary> 
		/// <returns> 当前方法的返回对象，类型: msg.QAPlatformPaymentNotifyResp </returns>
		public static msg.QAPlatformPaymentNotifyResp NewResponse() { return new msg.QAPlatformPaymentNotifyResp(); }

		/// <summary>
		/// 当前请求的 HTTP 路径，用户自定义的路径 或 自动生成的路径
		/// 由于历史原因，自动生成的路径并不包含QueryPath,但用户自定义的路径可能包含了QueryPath，存在歧义
		/// </summary>
		[Obsolete("不要继续使用 PathHTTP，优先使用 FullPathHTTP", false)]
		public const string PathHTTP = "/service.PlatformService/QAPlatformPaymentNotify";
	
		/// <summary>
		/// 当前方法的标签，用于标识该方法的属性与类型
		/// </summary>
		public static readonly string[] Labels = {  };

		/// <summary>
		/// 针对此service自定义SendHelper, 不设定则使用SendHelper.Instance
		/// </summary>
		public static SendHelper CustomSender = null;
		
		/// <summary>
		/// 发送Http请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void PostMessage(msg.QAPlatformPaymentNotifyReq request, Action<IMessage> callback = null,
			DelegateHttpRequestError delegateHttpRequestError = null, Dictionary<string, string> metadata = null,
			Dictionary<string, string> header = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			header = sendHelper.MergeMetadata(MetaType.HttpHeader, URIRequest, Labels, header);
			sendHelper.HttpClientPost(sendHelper.HttpHost + QueryPath, request, callback, delegateHttpRequestError, metadata, header, URIRequest);
		}

		/// <summary>
		/// 发送TCP/UDP请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void SendMessage(msg.QAPlatformPaymentNotifyReq request, Action<IMessage> handler = null,
			Dictionary<string, string> metadata = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			sendHelper.ProtokitClientSend(request, handler, metadata, URIRequest);
		}
	}
	/// <summary>
	/// 方法定义,支持两种使用方式
	/// - gateway模式，请求路径为：QueryPath，推荐使用该模式
	/// - 传统模式，请求路径为：FullPathHTTP
	/// 两种模式下，请求对象的URI都要使用 URIRequest 而非 XXX.Descriptor.FullName
	/// </summary> 
	public partial class PlatformNotifyService_PaymentNotify : ProtoServiceInterface{
		public string GetQueryPath() => QueryPath; 
		public string GetURIRequest() => URIRequest; 
		public string GetFullPathHTTP() => FullPathHTTP;

		/// <summary>
		/// 当前 Service 的请求根路径
		/// </summary> 
		public const string QueryPath = "/platform_notify";

		/// <summary>
		/// HTTP 请求全路径，格式为 QueryPath /XXX, 其中XXX部分可以是自定义字符串或URIRequest
		/// </summary>
		public const string FullPathHTTP = "/platform_notify/payment";

		/// <summary>
		/// 是否为 Actor 系统方法
		/// </summary> 
		public static readonly bool IsActor = false;

		/// <summary>
		/// 当为 Actor 系统方法时，是否为 Tell 类型
		/// </summary> 
		public static readonly bool IsTell  = false;

		/// <summary>
		/// 当前方法请求对象的URI
		/// 注意在发起请求的时候，请求对象的URI要使用 URIRequest 而非 XXX.Descriptor.FullName
		/// </summary>
		public const string URIRequest = "/platform_notify/payment";

		/// <summary>
		/// 构造当前方法的请求对象
		/// </summary> 
		/// <returns> 当前方法的请求对象，类型: msg.PlatformPaymentNotifyReq </returns>
		public static msg.PlatformPaymentNotifyReq NewRequest() { return new msg.PlatformPaymentNotifyReq(); }

		/// <summary>
		/// 当前方法返回对象的URI，即: msg.PlatformPaymentNotifyResp.Descriptor.FullName
		/// </summary> 
		public static readonly string URIResponse = "msg.PlatformPaymentNotifyResp";

		/// <summary>
		/// 构造当前方法的返回对象
		/// </summary> 
		/// <returns> 当前方法的返回对象，类型: msg.PlatformPaymentNotifyResp </returns>
		public static msg.PlatformPaymentNotifyResp NewResponse() { return new msg.PlatformPaymentNotifyResp(); }

		/// <summary>
		/// 当前请求的 HTTP 路径，用户自定义的路径 或 自动生成的路径
		/// 由于历史原因，自动生成的路径并不包含QueryPath,但用户自定义的路径可能包含了QueryPath，存在歧义
		/// </summary>
		[Obsolete("不要继续使用 PathHTTP，优先使用 FullPathHTTP", false)]
		public const string PathHTTP = "/platform_notify/payment";
	
		/// <summary>
		/// 当前方法的标签，用于标识该方法的属性与类型
		/// </summary>
		public static readonly string[] Labels = {  };

		/// <summary>
		/// 针对此service自定义SendHelper, 不设定则使用SendHelper.Instance
		/// </summary>
		public static SendHelper CustomSender = null;
		
		/// <summary>
		/// 发送Http请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void PostMessage(msg.PlatformPaymentNotifyReq request, Action<IMessage> callback = null,
			DelegateHttpRequestError delegateHttpRequestError = null, Dictionary<string, string> metadata = null,
			Dictionary<string, string> header = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			header = sendHelper.MergeMetadata(MetaType.HttpHeader, URIRequest, Labels, header);
			sendHelper.HttpClientPost(sendHelper.HttpHost + QueryPath, request, callback, delegateHttpRequestError, metadata, header, URIRequest);
		}

		/// <summary>
		/// 发送TCP/UDP请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void SendMessage(msg.PlatformPaymentNotifyReq request, Action<IMessage> handler = null,
			Dictionary<string, string> metadata = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			sendHelper.ProtokitClientSend(request, handler, metadata, URIRequest);
		}
	}
	/// <summary>
	/// 方法定义,支持两种使用方式
	/// - gateway模式，请求路径为：QueryPath，推荐使用该模式
	/// - 传统模式，请求路径为：FullPathHTTP
	/// 两种模式下，请求对象的URI都要使用 URIRequest 而非 XXX.Descriptor.FullName
	/// </summary> 
	public partial class PlatformNotifyService_DelAccountNotify : ProtoServiceInterface{
		public string GetQueryPath() => QueryPath; 
		public string GetURIRequest() => URIRequest; 
		public string GetFullPathHTTP() => FullPathHTTP;

		/// <summary>
		/// 当前 Service 的请求根路径
		/// </summary> 
		public const string QueryPath = "/platform_notify";

		/// <summary>
		/// HTTP 请求全路径，格式为 QueryPath /XXX, 其中XXX部分可以是自定义字符串或URIRequest
		/// </summary>
		public const string FullPathHTTP = "/platform_notify/delete_account";

		/// <summary>
		/// 是否为 Actor 系统方法
		/// </summary> 
		public static readonly bool IsActor = false;

		/// <summary>
		/// 当为 Actor 系统方法时，是否为 Tell 类型
		/// </summary> 
		public static readonly bool IsTell  = false;

		/// <summary>
		/// 当前方法请求对象的URI
		/// 注意在发起请求的时候，请求对象的URI要使用 URIRequest 而非 XXX.Descriptor.FullName
		/// </summary>
		public const string URIRequest = "/platform_notify/delete_account";

		/// <summary>
		/// 构造当前方法的请求对象
		/// </summary> 
		/// <returns> 当前方法的请求对象，类型: msg.PlatformDelAccountNotifyReq </returns>
		public static msg.PlatformDelAccountNotifyReq NewRequest() { return new msg.PlatformDelAccountNotifyReq(); }

		/// <summary>
		/// 当前方法返回对象的URI，即: msg.PlatformDelAccountNotifyResp.Descriptor.FullName
		/// </summary> 
		public static readonly string URIResponse = "msg.PlatformDelAccountNotifyResp";

		/// <summary>
		/// 构造当前方法的返回对象
		/// </summary> 
		/// <returns> 当前方法的返回对象，类型: msg.PlatformDelAccountNotifyResp </returns>
		public static msg.PlatformDelAccountNotifyResp NewResponse() { return new msg.PlatformDelAccountNotifyResp(); }

		/// <summary>
		/// 当前请求的 HTTP 路径，用户自定义的路径 或 自动生成的路径
		/// 由于历史原因，自动生成的路径并不包含QueryPath,但用户自定义的路径可能包含了QueryPath，存在歧义
		/// </summary>
		[Obsolete("不要继续使用 PathHTTP，优先使用 FullPathHTTP", false)]
		public const string PathHTTP = "/platform_notify/delete_account";
	
		/// <summary>
		/// 当前方法的标签，用于标识该方法的属性与类型
		/// </summary>
		public static readonly string[] Labels = {  };

		/// <summary>
		/// 针对此service自定义SendHelper, 不设定则使用SendHelper.Instance
		/// </summary>
		public static SendHelper CustomSender = null;
		
		/// <summary>
		/// 发送Http请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void PostMessage(msg.PlatformDelAccountNotifyReq request, Action<IMessage> callback = null,
			DelegateHttpRequestError delegateHttpRequestError = null, Dictionary<string, string> metadata = null,
			Dictionary<string, string> header = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			header = sendHelper.MergeMetadata(MetaType.HttpHeader, URIRequest, Labels, header);
			sendHelper.HttpClientPost(sendHelper.HttpHost + QueryPath, request, callback, delegateHttpRequestError, metadata, header, URIRequest);
		}

		/// <summary>
		/// 发送TCP/UDP请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void SendMessage(msg.PlatformDelAccountNotifyReq request, Action<IMessage> handler = null,
			Dictionary<string, string> metadata = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			sendHelper.ProtokitClientSend(request, handler, metadata, URIRequest);
		}
	}
	/// <summary>
	/// 方法定义,支持两种使用方式
	/// - gateway模式，请求路径为：QueryPath，推荐使用该模式
	/// - 传统模式，请求路径为：FullPathHTTP
	/// 两种模式下，请求对象的URI都要使用 URIRequest 而非 XXX.Descriptor.FullName
	/// </summary> 
	public partial class PlatformNotifyService_GiftCodeNotify : ProtoServiceInterface{
		public string GetQueryPath() => QueryPath; 
		public string GetURIRequest() => URIRequest; 
		public string GetFullPathHTTP() => FullPathHTTP;

		/// <summary>
		/// 当前 Service 的请求根路径
		/// </summary> 
		public const string QueryPath = "/platform_notify";

		/// <summary>
		/// HTTP 请求全路径，格式为 QueryPath /XXX, 其中XXX部分可以是自定义字符串或URIRequest
		/// </summary>
		public const string FullPathHTTP = "/platform_notify/gift_code";

		/// <summary>
		/// 是否为 Actor 系统方法
		/// </summary> 
		public static readonly bool IsActor = false;

		/// <summary>
		/// 当为 Actor 系统方法时，是否为 Tell 类型
		/// </summary> 
		public static readonly bool IsTell  = false;

		/// <summary>
		/// 当前方法请求对象的URI
		/// 注意在发起请求的时候，请求对象的URI要使用 URIRequest 而非 XXX.Descriptor.FullName
		/// </summary>
		public const string URIRequest = "/platform_notify/gift_code";

		/// <summary>
		/// 构造当前方法的请求对象
		/// </summary> 
		/// <returns> 当前方法的请求对象，类型: msg.PlatformGiftCodeNotifyReq </returns>
		public static msg.PlatformGiftCodeNotifyReq NewRequest() { return new msg.PlatformGiftCodeNotifyReq(); }

		/// <summary>
		/// 当前方法返回对象的URI，即: msg.PlatformGiftCodeNotifyResp.Descriptor.FullName
		/// </summary> 
		public static readonly string URIResponse = "msg.PlatformGiftCodeNotifyResp";

		/// <summary>
		/// 构造当前方法的返回对象
		/// </summary> 
		/// <returns> 当前方法的返回对象，类型: msg.PlatformGiftCodeNotifyResp </returns>
		public static msg.PlatformGiftCodeNotifyResp NewResponse() { return new msg.PlatformGiftCodeNotifyResp(); }

		/// <summary>
		/// 当前请求的 HTTP 路径，用户自定义的路径 或 自动生成的路径
		/// 由于历史原因，自动生成的路径并不包含QueryPath,但用户自定义的路径可能包含了QueryPath，存在歧义
		/// </summary>
		[Obsolete("不要继续使用 PathHTTP，优先使用 FullPathHTTP", false)]
		public const string PathHTTP = "/platform_notify/gift_code";
	
		/// <summary>
		/// 当前方法的标签，用于标识该方法的属性与类型
		/// </summary>
		public static readonly string[] Labels = {  };

		/// <summary>
		/// 针对此service自定义SendHelper, 不设定则使用SendHelper.Instance
		/// </summary>
		public static SendHelper CustomSender = null;
		
		/// <summary>
		/// 发送Http请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void PostMessage(msg.PlatformGiftCodeNotifyReq request, Action<IMessage> callback = null,
			DelegateHttpRequestError delegateHttpRequestError = null, Dictionary<string, string> metadata = null,
			Dictionary<string, string> header = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			header = sendHelper.MergeMetadata(MetaType.HttpHeader, URIRequest, Labels, header);
			sendHelper.HttpClientPost(sendHelper.HttpHost + QueryPath, request, callback, delegateHttpRequestError, metadata, header, URIRequest);
		}

		/// <summary>
		/// 发送TCP/UDP请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void SendMessage(msg.PlatformGiftCodeNotifyReq request, Action<IMessage> handler = null,
			Dictionary<string, string> metadata = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			sendHelper.ProtokitClientSend(request, handler, metadata, URIRequest);
		}
	}
	/// <summary>
	/// 方法定义,支持两种使用方式
	/// - gateway模式，请求路径为：QueryPath，推荐使用该模式
	/// - 传统模式，请求路径为：FullPathHTTP
	/// 两种模式下，请求对象的URI都要使用 URIRequest 而非 XXX.Descriptor.FullName
	/// </summary> 
	public partial class PlatformNotifyService_PlatformProbe : ProtoServiceInterface{
		public string GetQueryPath() => QueryPath; 
		public string GetURIRequest() => URIRequest; 
		public string GetFullPathHTTP() => FullPathHTTP;

		/// <summary>
		/// 当前 Service 的请求根路径
		/// </summary> 
		public const string QueryPath = "/platform_notify";

		/// <summary>
		/// HTTP 请求全路径，格式为 QueryPath /XXX, 其中XXX部分可以是自定义字符串或URIRequest
		/// </summary>
		public const string FullPathHTTP = "/platform_notify/probe";

		/// <summary>
		/// 是否为 Actor 系统方法
		/// </summary> 
		public static readonly bool IsActor = false;

		/// <summary>
		/// 当为 Actor 系统方法时，是否为 Tell 类型
		/// </summary> 
		public static readonly bool IsTell  = false;

		/// <summary>
		/// 当前方法请求对象的URI
		/// 注意在发起请求的时候，请求对象的URI要使用 URIRequest 而非 XXX.Descriptor.FullName
		/// </summary>
		public const string URIRequest = "/platform_notify/probe";

		/// <summary>
		/// 构造当前方法的请求对象
		/// </summary> 
		/// <returns> 当前方法的请求对象，类型: msg.PlatformProbeReq </returns>
		public static msg.PlatformProbeReq NewRequest() { return new msg.PlatformProbeReq(); }

		/// <summary>
		/// 当前方法返回对象的URI，即: msg.PlatformProbeResp.Descriptor.FullName
		/// </summary> 
		public static readonly string URIResponse = "msg.PlatformProbeResp";

		/// <summary>
		/// 构造当前方法的返回对象
		/// </summary> 
		/// <returns> 当前方法的返回对象，类型: msg.PlatformProbeResp </returns>
		public static msg.PlatformProbeResp NewResponse() { return new msg.PlatformProbeResp(); }

		/// <summary>
		/// 当前请求的 HTTP 路径，用户自定义的路径 或 自动生成的路径
		/// 由于历史原因，自动生成的路径并不包含QueryPath,但用户自定义的路径可能包含了QueryPath，存在歧义
		/// </summary>
		[Obsolete("不要继续使用 PathHTTP，优先使用 FullPathHTTP", false)]
		public const string PathHTTP = "/platform_notify/probe";
	
		/// <summary>
		/// 当前方法的标签，用于标识该方法的属性与类型
		/// </summary>
		public static readonly string[] Labels = {  };

		/// <summary>
		/// 针对此service自定义SendHelper, 不设定则使用SendHelper.Instance
		/// </summary>
		public static SendHelper CustomSender = null;
		
		/// <summary>
		/// 发送Http请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void PostMessage(msg.PlatformProbeReq request, Action<IMessage> callback = null,
			DelegateHttpRequestError delegateHttpRequestError = null, Dictionary<string, string> metadata = null,
			Dictionary<string, string> header = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			header = sendHelper.MergeMetadata(MetaType.HttpHeader, URIRequest, Labels, header);
			sendHelper.HttpClientPost(sendHelper.HttpHost + QueryPath, request, callback, delegateHttpRequestError, metadata, header, URIRequest);
		}

		/// <summary>
		/// 发送TCP/UDP请求，此方法是对ProtokitHelper的一个简单封装
		/// </summary>
		public static void SendMessage(msg.PlatformProbeReq request, Action<IMessage> handler = null,
			Dictionary<string, string> metadata = null)
		{
			var sendHelper = CustomSender ?? SendHelper.Instance;
			metadata = sendHelper.MergeMetadata(MetaType.PacketMeta, URIRequest, Labels, metadata);
			sendHelper.ProtokitClientSend(request, handler, metadata, URIRequest);
		}
	}
}

#endregion Designer generated code
