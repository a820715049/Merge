// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gamekitdata/server.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.gamekitdata {

  /// <summary>Holder for reflection information generated from gamekitdata/server.proto</summary>
  public static partial class ServerReflection {

    #region Descriptor
    /// <summary>File descriptor for gamekitdata/server.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhnYW1la2l0ZGF0YS9zZXJ2ZXIucHJvdG8SC2dhbWVraXRkYXRhGhZnYW1l",
            "a2l0ZGF0YS9iYXNlLnByb3RvGhlnYW1la2l0ZGF0YS9yYW5raW5nLnByb3Rv",
            "ItIBCgpQbGF5ZXJEYXRhEgwKBEZwSWQYASABKAkSDQoFU25zSWQYAiABKAkS",
            "CwoDVWlkGAMgASgEEhEKCUdhbWVTbnNJZBgEIAEoCRItCghCYXNlRGF0YRgF",
            "IAEoCzIbLmdhbWVraXRkYXRhLlBsYXllckJhc2VEYXRhEisKClN5c3RlbUlu",
            "Zm8YBiABKAsyFy5nYW1la2l0ZGF0YS5TeXN0ZW1JbmZvEisKClNlcnZlckRh",
            "dGEYByABKAsyFy5nYW1la2l0ZGF0YS5TZXJ2ZXJEYXRhIjUKCVBheVJlY29y",
            "ZBIKCgJUcxgBIAEoAxINCgVWYWx1ZRgCIAEoBRINCgVMZXZlbBgDIAEoBSJ7",
            "Cg5UYWdIaXN0b3J5RGF0YRI5CgdSZWNvcmRzGAEgAygLMiguZ2FtZWtpdGRh",
            "dGEuVGFnSGlzdG9yeURhdGEuUmVjb3Jkc0VudHJ5Gi4KDFJlY29yZHNFbnRy",
            "eRILCgNrZXkYASABKAMSDQoFdmFsdWUYAiABKAU6AjgBIuQFCgpTZXJ2ZXJE",
            "YXRhEhMKC0RhdGFWZXJzaW9uGAEgASgFEhMKC01haWxIaXN0b3J5GAUgAygF",
            "EhcKD0RheUxvZ2luSGlzdG9yeRgGIAMoAxJHChBEYXlFbmVyZ3lIaXN0b3J5",
            "GAcgAygLMi0uZ2FtZWtpdGRhdGEuU2VydmVyRGF0YS5EYXlFbmVyZ3lIaXN0",
            "b3J5RW50cnkSLgoOUGF5bWVudEhpc3RvcnkYCCADKAsyFi5nYW1la2l0ZGF0",
            "YS5QYXlSZWNvcmQSHAoUTWlsZXN0b25lVGFza0hpc3RvcnkYCSADKAMSQQoN",
            "RGF5R2VtSGlzdG9yeRgKIAMoCzIqLmdhbWVraXRkYXRhLlNlcnZlckRhdGEu",
            "RGF5R2VtSGlzdG9yeUVudHJ5EkMKDkRheUNvaW5IaXN0b3J5GAsgAygLMisu",
            "Z2FtZWtpdGRhdGEuU2VydmVyRGF0YS5EYXlDb2luSGlzdG9yeUVudHJ5EkMK",
            "DlVzZXJUYWdIaXN0b3J5GAwgAygLMisuZ2FtZWtpdGRhdGEuU2VydmVyRGF0",
            "YS5Vc2VyVGFnSGlzdG9yeUVudHJ5EjUKD1JhbmtpbmdBY3Rpdml0eRgNIAEo",
            "CzIcLmdhbWVraXRkYXRhLlJhbmtpbmdBY3Rpdml0eRo3ChVEYXlFbmVyZ3lI",
            "aXN0b3J5RW50cnkSCwoDa2V5GAEgASgDEg0KBXZhbHVlGAIgASgFOgI4ARo0",
            "ChJEYXlHZW1IaXN0b3J5RW50cnkSCwoDa2V5GAEgASgDEg0KBXZhbHVlGAIg",
            "ASgFOgI4ARo1ChNEYXlDb2luSGlzdG9yeUVudHJ5EgsKA2tleRgBIAEoAxIN",
            "CgV2YWx1ZRgCIAEoBToCOAEaUgoTVXNlclRhZ0hpc3RvcnlFbnRyeRILCgNr",
            "ZXkYASABKAUSKgoFdmFsdWUYAiABKAsyGy5nYW1la2l0ZGF0YS5UYWdIaXN0",
            "b3J5RGF0YToCOAFCRVoxZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2Vu",
            "L2dvbGFuZy9nYW1la2l0ZGF0YaoCD2ZhdC5nYW1la2l0ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.gamekitdata.BaseReflection.Descriptor, global::fat.gamekitdata.RankingReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.PlayerData), global::fat.gamekitdata.PlayerData.Parser, new[]{ "FpId", "SnsId", "Uid", "GameSnsId", "BaseData", "SystemInfo", "ServerData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.PayRecord), global::fat.gamekitdata.PayRecord.Parser, new[]{ "Ts", "Value", "Level" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.TagHistoryData), global::fat.gamekitdata.TagHistoryData.Parser, new[]{ "Records" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ServerData), global::fat.gamekitdata.ServerData.Parser, new[]{ "DataVersion", "MailHistory", "DayLoginHistory", "DayEnergyHistory", "PaymentHistory", "MilestoneTaskHistory", "DayGemHistory", "DayCoinHistory", "UserTagHistory", "RankingActivity" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerData : pb::IMessage<PlayerData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerData> _parser = new pb::MessageParser<PlayerData>(() => new PlayerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData(PlayerData other) : this() {
      fpId_ = other.fpId_;
      snsId_ = other.snsId_;
      uid_ = other.uid_;
      gameSnsId_ = other.gameSnsId_;
      baseData_ = other.baseData_ != null ? other.baseData_.Clone() : null;
      systemInfo_ = other.systemInfo_ != null ? other.systemInfo_.Clone() : null;
      serverData_ = other.serverData_ != null ? other.serverData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData Clone() {
      return new PlayerData(this);
    }

    /// <summary>Field number for the "FpId" field.</summary>
    public const int FpIdFieldNumber = 1;
    private string fpId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FpId {
      get { return fpId_; }
      set {
        fpId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SnsId" field.</summary>
    public const int SnsIdFieldNumber = 2;
    private string snsId_ = "";
    /// <summary>
    /// 社交平台ID 只在创建角色时赋值。如果角色是通过社交平台创建的，那么这个字段必须有值，如果是游客账号创建的，为空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SnsId {
      get { return snsId_; }
      set {
        snsId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 3;
    private ulong uid_;
    /// <summary>
    /// 游戏内部ID 也会暴露给客户端，通信和逻辑中使用，但不在UI显示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "GameSnsId" field.</summary>
    public const int GameSnsIdFieldNumber = 4;
    private string gameSnsId_ = "";
    /// <summary>
    /// 游戏暴露给玩家的ID，UI显示 可与Uid互转
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameSnsId {
      get { return gameSnsId_; }
      set {
        gameSnsId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BaseData" field.</summary>
    public const int BaseDataFieldNumber = 5;
    private global::fat.gamekitdata.PlayerBaseData baseData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.PlayerBaseData BaseData {
      get { return baseData_; }
      set {
        baseData_ = value;
      }
    }

    /// <summary>Field number for the "SystemInfo" field.</summary>
    public const int SystemInfoFieldNumber = 6;
    private global::fat.gamekitdata.SystemInfo systemInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.SystemInfo SystemInfo {
      get { return systemInfo_; }
      set {
        systemInfo_ = value;
      }
    }

    /// <summary>Field number for the "ServerData" field.</summary>
    public const int ServerDataFieldNumber = 7;
    private global::fat.gamekitdata.ServerData serverData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ServerData ServerData {
      get { return serverData_; }
      set {
        serverData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FpId != other.FpId) return false;
      if (SnsId != other.SnsId) return false;
      if (Uid != other.Uid) return false;
      if (GameSnsId != other.GameSnsId) return false;
      if (!object.Equals(BaseData, other.BaseData)) return false;
      if (!object.Equals(SystemInfo, other.SystemInfo)) return false;
      if (!object.Equals(ServerData, other.ServerData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FpId.Length != 0) hash ^= FpId.GetHashCode();
      if (SnsId.Length != 0) hash ^= SnsId.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (GameSnsId.Length != 0) hash ^= GameSnsId.GetHashCode();
      if (baseData_ != null) hash ^= BaseData.GetHashCode();
      if (systemInfo_ != null) hash ^= SystemInfo.GetHashCode();
      if (serverData_ != null) hash ^= ServerData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FpId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FpId);
      }
      if (SnsId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SnsId);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Uid);
      }
      if (GameSnsId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GameSnsId);
      }
      if (baseData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BaseData);
      }
      if (systemInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SystemInfo);
      }
      if (serverData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ServerData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FpId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FpId);
      }
      if (SnsId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SnsId);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Uid);
      }
      if (GameSnsId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GameSnsId);
      }
      if (baseData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BaseData);
      }
      if (systemInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SystemInfo);
      }
      if (serverData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ServerData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FpId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FpId);
      }
      if (SnsId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SnsId);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (GameSnsId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameSnsId);
      }
      if (baseData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
      }
      if (systemInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SystemInfo);
      }
      if (serverData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerData other) {
      if (other == null) {
        return;
      }
      if (other.FpId.Length != 0) {
        FpId = other.FpId;
      }
      if (other.SnsId.Length != 0) {
        SnsId = other.SnsId;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.GameSnsId.Length != 0) {
        GameSnsId = other.GameSnsId;
      }
      if (other.baseData_ != null) {
        if (baseData_ == null) {
          BaseData = new global::fat.gamekitdata.PlayerBaseData();
        }
        BaseData.MergeFrom(other.BaseData);
      }
      if (other.systemInfo_ != null) {
        if (systemInfo_ == null) {
          SystemInfo = new global::fat.gamekitdata.SystemInfo();
        }
        SystemInfo.MergeFrom(other.SystemInfo);
      }
      if (other.serverData_ != null) {
        if (serverData_ == null) {
          ServerData = new global::fat.gamekitdata.ServerData();
        }
        ServerData.MergeFrom(other.ServerData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FpId = input.ReadString();
            break;
          }
          case 18: {
            SnsId = input.ReadString();
            break;
          }
          case 24: {
            Uid = input.ReadUInt64();
            break;
          }
          case 34: {
            GameSnsId = input.ReadString();
            break;
          }
          case 42: {
            if (baseData_ == null) {
              BaseData = new global::fat.gamekitdata.PlayerBaseData();
            }
            input.ReadMessage(BaseData);
            break;
          }
          case 50: {
            if (systemInfo_ == null) {
              SystemInfo = new global::fat.gamekitdata.SystemInfo();
            }
            input.ReadMessage(SystemInfo);
            break;
          }
          case 58: {
            if (serverData_ == null) {
              ServerData = new global::fat.gamekitdata.ServerData();
            }
            input.ReadMessage(ServerData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FpId = input.ReadString();
            break;
          }
          case 18: {
            SnsId = input.ReadString();
            break;
          }
          case 24: {
            Uid = input.ReadUInt64();
            break;
          }
          case 34: {
            GameSnsId = input.ReadString();
            break;
          }
          case 42: {
            if (baseData_ == null) {
              BaseData = new global::fat.gamekitdata.PlayerBaseData();
            }
            input.ReadMessage(BaseData);
            break;
          }
          case 50: {
            if (systemInfo_ == null) {
              SystemInfo = new global::fat.gamekitdata.SystemInfo();
            }
            input.ReadMessage(SystemInfo);
            break;
          }
          case 58: {
            if (serverData_ == null) {
              ServerData = new global::fat.gamekitdata.ServerData();
            }
            input.ReadMessage(ServerData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PayRecord : pb::IMessage<PayRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PayRecord> _parser = new pb::MessageParser<PayRecord>(() => new PayRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayRecord(PayRecord other) : this() {
      ts_ = other.ts_;
      value_ = other.value_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayRecord Clone() {
      return new PayRecord(this);
    }

    /// <summary>Field number for the "Ts" field.</summary>
    public const int TsFieldNumber = 1;
    private long ts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ts {
      get { return ts_; }
      set {
        ts_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ts != other.Ts) return false;
      if (Value != other.Value) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ts != 0L) hash ^= Ts.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ts != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Ts);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ts != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Ts);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ts != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ts);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayRecord other) {
      if (other == null) {
        return;
      }
      if (other.Ts != 0L) {
        Ts = other.Ts;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ts = input.ReadInt64();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ts = input.ReadInt64();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TagHistoryData : pb::IMessage<TagHistoryData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TagHistoryData> _parser = new pb::MessageParser<TagHistoryData>(() => new TagHistoryData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TagHistoryData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagHistoryData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagHistoryData(TagHistoryData other) : this() {
      records_ = other.records_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagHistoryData Clone() {
      return new TagHistoryData(this);
    }

    /// <summary>Field number for the "Records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pbc::MapField<long, int>.Codec _map_records_codec
        = new pbc::MapField<long, int>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForInt32(16, 0), 10);
    private readonly pbc::MapField<long, int> records_ = new pbc::MapField<long, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, int> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TagHistoryData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TagHistoryData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Records.Equals(other.Records)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Records.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      records_.WriteTo(output, _map_records_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      records_.WriteTo(ref output, _map_records_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_map_records_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TagHistoryData other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _map_records_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            records_.AddEntriesFrom(ref input, _map_records_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ServerData : pb::IMessage<ServerData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ServerData> _parser = new pb::MessageParser<ServerData>(() => new ServerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerData(ServerData other) : this() {
      dataVersion_ = other.dataVersion_;
      mailHistory_ = other.mailHistory_.Clone();
      dayLoginHistory_ = other.dayLoginHistory_.Clone();
      dayEnergyHistory_ = other.dayEnergyHistory_.Clone();
      paymentHistory_ = other.paymentHistory_.Clone();
      milestoneTaskHistory_ = other.milestoneTaskHistory_.Clone();
      dayGemHistory_ = other.dayGemHistory_.Clone();
      dayCoinHistory_ = other.dayCoinHistory_.Clone();
      userTagHistory_ = other.userTagHistory_.Clone();
      rankingActivity_ = other.rankingActivity_ != null ? other.rankingActivity_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerData Clone() {
      return new ServerData(this);
    }

    /// <summary>Field number for the "DataVersion" field.</summary>
    public const int DataVersionFieldNumber = 1;
    private int dataVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataVersion {
      get { return dataVersion_; }
      set {
        dataVersion_ = value;
      }
    }

    /// <summary>Field number for the "MailHistory" field.</summary>
    public const int MailHistoryFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_mailHistory_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> mailHistory_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MailHistory {
      get { return mailHistory_; }
    }

    /// <summary>Field number for the "DayLoginHistory" field.</summary>
    public const int DayLoginHistoryFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_dayLoginHistory_codec
        = pb::FieldCodec.ForInt64(50);
    private readonly pbc::RepeatedField<long> dayLoginHistory_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> DayLoginHistory {
      get { return dayLoginHistory_; }
    }

    /// <summary>Field number for the "DayEnergyHistory" field.</summary>
    public const int DayEnergyHistoryFieldNumber = 7;
    private static readonly pbc::MapField<long, int>.Codec _map_dayEnergyHistory_codec
        = new pbc::MapField<long, int>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForInt32(16, 0), 58);
    private readonly pbc::MapField<long, int> dayEnergyHistory_ = new pbc::MapField<long, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, int> DayEnergyHistory {
      get { return dayEnergyHistory_; }
    }

    /// <summary>Field number for the "PaymentHistory" field.</summary>
    public const int PaymentHistoryFieldNumber = 8;
    private static readonly pb::FieldCodec<global::fat.gamekitdata.PayRecord> _repeated_paymentHistory_codec
        = pb::FieldCodec.ForMessage(66, global::fat.gamekitdata.PayRecord.Parser);
    private readonly pbc::RepeatedField<global::fat.gamekitdata.PayRecord> paymentHistory_ = new pbc::RepeatedField<global::fat.gamekitdata.PayRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.gamekitdata.PayRecord> PaymentHistory {
      get { return paymentHistory_; }
    }

    /// <summary>Field number for the "MilestoneTaskHistory" field.</summary>
    public const int MilestoneTaskHistoryFieldNumber = 9;
    private static readonly pb::FieldCodec<long> _repeated_milestoneTaskHistory_codec
        = pb::FieldCodec.ForInt64(74);
    private readonly pbc::RepeatedField<long> milestoneTaskHistory_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> MilestoneTaskHistory {
      get { return milestoneTaskHistory_; }
    }

    /// <summary>Field number for the "DayGemHistory" field.</summary>
    public const int DayGemHistoryFieldNumber = 10;
    private static readonly pbc::MapField<long, int>.Codec _map_dayGemHistory_codec
        = new pbc::MapField<long, int>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForInt32(16, 0), 82);
    private readonly pbc::MapField<long, int> dayGemHistory_ = new pbc::MapField<long, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, int> DayGemHistory {
      get { return dayGemHistory_; }
    }

    /// <summary>Field number for the "DayCoinHistory" field.</summary>
    public const int DayCoinHistoryFieldNumber = 11;
    private static readonly pbc::MapField<long, int>.Codec _map_dayCoinHistory_codec
        = new pbc::MapField<long, int>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForInt32(16, 0), 90);
    private readonly pbc::MapField<long, int> dayCoinHistory_ = new pbc::MapField<long, int>();
    /// <summary>
    ///每日非膨胀金币记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, int> DayCoinHistory {
      get { return dayCoinHistory_; }
    }

    /// <summary>Field number for the "UserTagHistory" field.</summary>
    public const int UserTagHistoryFieldNumber = 12;
    private static readonly pbc::MapField<int, global::fat.gamekitdata.TagHistoryData>.Codec _map_userTagHistory_codec
        = new pbc::MapField<int, global::fat.gamekitdata.TagHistoryData>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.gamekitdata.TagHistoryData.Parser), 98);
    private readonly pbc::MapField<int, global::fat.gamekitdata.TagHistoryData> userTagHistory_ = new pbc::MapField<int, global::fat.gamekitdata.TagHistoryData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.gamekitdata.TagHistoryData> UserTagHistory {
      get { return userTagHistory_; }
    }

    /// <summary>Field number for the "RankingActivity" field.</summary>
    public const int RankingActivityFieldNumber = 13;
    private global::fat.gamekitdata.RankingActivity rankingActivity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.RankingActivity RankingActivity {
      get { return rankingActivity_; }
      set {
        rankingActivity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataVersion != other.DataVersion) return false;
      if(!mailHistory_.Equals(other.mailHistory_)) return false;
      if(!dayLoginHistory_.Equals(other.dayLoginHistory_)) return false;
      if (!DayEnergyHistory.Equals(other.DayEnergyHistory)) return false;
      if(!paymentHistory_.Equals(other.paymentHistory_)) return false;
      if(!milestoneTaskHistory_.Equals(other.milestoneTaskHistory_)) return false;
      if (!DayGemHistory.Equals(other.DayGemHistory)) return false;
      if (!DayCoinHistory.Equals(other.DayCoinHistory)) return false;
      if (!UserTagHistory.Equals(other.UserTagHistory)) return false;
      if (!object.Equals(RankingActivity, other.RankingActivity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataVersion != 0) hash ^= DataVersion.GetHashCode();
      hash ^= mailHistory_.GetHashCode();
      hash ^= dayLoginHistory_.GetHashCode();
      hash ^= DayEnergyHistory.GetHashCode();
      hash ^= paymentHistory_.GetHashCode();
      hash ^= milestoneTaskHistory_.GetHashCode();
      hash ^= DayGemHistory.GetHashCode();
      hash ^= DayCoinHistory.GetHashCode();
      hash ^= UserTagHistory.GetHashCode();
      if (rankingActivity_ != null) hash ^= RankingActivity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DataVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataVersion);
      }
      mailHistory_.WriteTo(output, _repeated_mailHistory_codec);
      dayLoginHistory_.WriteTo(output, _repeated_dayLoginHistory_codec);
      dayEnergyHistory_.WriteTo(output, _map_dayEnergyHistory_codec);
      paymentHistory_.WriteTo(output, _repeated_paymentHistory_codec);
      milestoneTaskHistory_.WriteTo(output, _repeated_milestoneTaskHistory_codec);
      dayGemHistory_.WriteTo(output, _map_dayGemHistory_codec);
      dayCoinHistory_.WriteTo(output, _map_dayCoinHistory_codec);
      userTagHistory_.WriteTo(output, _map_userTagHistory_codec);
      if (rankingActivity_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(RankingActivity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DataVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataVersion);
      }
      mailHistory_.WriteTo(ref output, _repeated_mailHistory_codec);
      dayLoginHistory_.WriteTo(ref output, _repeated_dayLoginHistory_codec);
      dayEnergyHistory_.WriteTo(ref output, _map_dayEnergyHistory_codec);
      paymentHistory_.WriteTo(ref output, _repeated_paymentHistory_codec);
      milestoneTaskHistory_.WriteTo(ref output, _repeated_milestoneTaskHistory_codec);
      dayGemHistory_.WriteTo(ref output, _map_dayGemHistory_codec);
      dayCoinHistory_.WriteTo(ref output, _map_dayCoinHistory_codec);
      userTagHistory_.WriteTo(ref output, _map_userTagHistory_codec);
      if (rankingActivity_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(RankingActivity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataVersion);
      }
      size += mailHistory_.CalculateSize(_repeated_mailHistory_codec);
      size += dayLoginHistory_.CalculateSize(_repeated_dayLoginHistory_codec);
      size += dayEnergyHistory_.CalculateSize(_map_dayEnergyHistory_codec);
      size += paymentHistory_.CalculateSize(_repeated_paymentHistory_codec);
      size += milestoneTaskHistory_.CalculateSize(_repeated_milestoneTaskHistory_codec);
      size += dayGemHistory_.CalculateSize(_map_dayGemHistory_codec);
      size += dayCoinHistory_.CalculateSize(_map_dayCoinHistory_codec);
      size += userTagHistory_.CalculateSize(_map_userTagHistory_codec);
      if (rankingActivity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RankingActivity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerData other) {
      if (other == null) {
        return;
      }
      if (other.DataVersion != 0) {
        DataVersion = other.DataVersion;
      }
      mailHistory_.Add(other.mailHistory_);
      dayLoginHistory_.Add(other.dayLoginHistory_);
      dayEnergyHistory_.Add(other.dayEnergyHistory_);
      paymentHistory_.Add(other.paymentHistory_);
      milestoneTaskHistory_.Add(other.milestoneTaskHistory_);
      dayGemHistory_.Add(other.dayGemHistory_);
      dayCoinHistory_.Add(other.dayCoinHistory_);
      userTagHistory_.Add(other.userTagHistory_);
      if (other.rankingActivity_ != null) {
        if (rankingActivity_ == null) {
          RankingActivity = new global::fat.gamekitdata.RankingActivity();
        }
        RankingActivity.MergeFrom(other.RankingActivity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DataVersion = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            mailHistory_.AddEntriesFrom(input, _repeated_mailHistory_codec);
            break;
          }
          case 50:
          case 48: {
            dayLoginHistory_.AddEntriesFrom(input, _repeated_dayLoginHistory_codec);
            break;
          }
          case 58: {
            dayEnergyHistory_.AddEntriesFrom(input, _map_dayEnergyHistory_codec);
            break;
          }
          case 66: {
            paymentHistory_.AddEntriesFrom(input, _repeated_paymentHistory_codec);
            break;
          }
          case 74:
          case 72: {
            milestoneTaskHistory_.AddEntriesFrom(input, _repeated_milestoneTaskHistory_codec);
            break;
          }
          case 82: {
            dayGemHistory_.AddEntriesFrom(input, _map_dayGemHistory_codec);
            break;
          }
          case 90: {
            dayCoinHistory_.AddEntriesFrom(input, _map_dayCoinHistory_codec);
            break;
          }
          case 98: {
            userTagHistory_.AddEntriesFrom(input, _map_userTagHistory_codec);
            break;
          }
          case 106: {
            if (rankingActivity_ == null) {
              RankingActivity = new global::fat.gamekitdata.RankingActivity();
            }
            input.ReadMessage(RankingActivity);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DataVersion = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            mailHistory_.AddEntriesFrom(ref input, _repeated_mailHistory_codec);
            break;
          }
          case 50:
          case 48: {
            dayLoginHistory_.AddEntriesFrom(ref input, _repeated_dayLoginHistory_codec);
            break;
          }
          case 58: {
            dayEnergyHistory_.AddEntriesFrom(ref input, _map_dayEnergyHistory_codec);
            break;
          }
          case 66: {
            paymentHistory_.AddEntriesFrom(ref input, _repeated_paymentHistory_codec);
            break;
          }
          case 74:
          case 72: {
            milestoneTaskHistory_.AddEntriesFrom(ref input, _repeated_milestoneTaskHistory_codec);
            break;
          }
          case 82: {
            dayGemHistory_.AddEntriesFrom(ref input, _map_dayGemHistory_codec);
            break;
          }
          case 90: {
            dayCoinHistory_.AddEntriesFrom(ref input, _map_dayCoinHistory_codec);
            break;
          }
          case 98: {
            userTagHistory_.AddEntriesFrom(ref input, _map_userTagHistory_codec);
            break;
          }
          case 106: {
            if (rankingActivity_ == null) {
              RankingActivity = new global::fat.gamekitdata.RankingActivity();
            }
            input.ReadMessage(RankingActivity);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
