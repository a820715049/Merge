// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gamekitdata/mini_board.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.gamekitdata {

  /// <summary>Holder for reflection information generated from gamekitdata/mini_board.proto</summary>
  public static partial class MiniBoardReflection {

    #region Descriptor
    /// <summary>File descriptor for gamekitdata/mini_board.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MiniBoardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxnYW1la2l0ZGF0YS9taW5pX2JvYXJkLnByb3RvEgtnYW1la2l0ZGF0YRoX",
            "Z2FtZWtpdGRhdGEvbWVyZ2UucHJvdG8ihwEKEU1pbmlCb2FyZEFjdGl2aXR5",
            "EjUKEU1pbmlCb2FyZERhdGFMaXN0GAEgAygLMhouZ2FtZWtpdGRhdGEuTWlu",
            "aUJvYXJkRGF0YRI7ChJNaW5pQm9hcmRNdWx0aURhdGEYAiABKAsyHy5nYW1l",
            "a2l0ZGF0YS5NaW5pQm9hcmRNdWx0aURhdGEiTgoNTWluaUJvYXJkRGF0YRIW",
            "Cg5CaW5kQWN0aXZpdHlJZBgBIAEoBRIlCglNaW5pQm9hcmQYAiABKAsyEi5n",
            "YW1la2l0ZGF0YS5NZXJnZSJqChJNaW5pQm9hcmRNdWx0aURhdGESFgoOQmlu",
            "ZEFjdGl2aXR5SWQYASABKAUSFQoNQ3VyUm91bmRJbmRleBgCIAEoBRIlCglN",
            "aW5pQm9hcmQYAyABKAsyEi5nYW1la2l0ZGF0YS5NZXJnZUJFWjFnaXRsYWIu",
            "ZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL2dhbWVraXRkYXRhqgIP",
            "ZmF0LmdhbWVraXRkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.gamekitdata.MergeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.MiniBoardActivity), global::fat.gamekitdata.MiniBoardActivity.Parser, new[]{ "MiniBoardDataList", "MiniBoardMultiData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.MiniBoardData), global::fat.gamekitdata.MiniBoardData.Parser, new[]{ "BindActivityId", "MiniBoard" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.MiniBoardMultiData), global::fat.gamekitdata.MiniBoardMultiData.Parser, new[]{ "BindActivityId", "CurRoundIndex", "MiniBoard" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MiniBoardActivity : pb::IMessage<MiniBoardActivity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniBoardActivity> _parser = new pb::MessageParser<MiniBoardActivity>(() => new MiniBoardActivity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniBoardActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MiniBoardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniBoardActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniBoardActivity(MiniBoardActivity other) : this() {
      miniBoardDataList_ = other.miniBoardDataList_.Clone();
      miniBoardMultiData_ = other.miniBoardMultiData_ != null ? other.miniBoardMultiData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniBoardActivity Clone() {
      return new MiniBoardActivity(this);
    }

    /// <summary>Field number for the "MiniBoardDataList" field.</summary>
    public const int MiniBoardDataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.gamekitdata.MiniBoardData> _repeated_miniBoardDataList_codec
        = pb::FieldCodec.ForMessage(10, global::fat.gamekitdata.MiniBoardData.Parser);
    private readonly pbc::RepeatedField<global::fat.gamekitdata.MiniBoardData> miniBoardDataList_ = new pbc::RepeatedField<global::fat.gamekitdata.MiniBoardData>();
    /// <summary>
    ///key 迷你棋盘绑定的活动id value 迷你棋盘相关数据
    ///设计上支持记录多期棋盘数据 使用时目前默认只取第一个数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.gamekitdata.MiniBoardData> MiniBoardDataList {
      get { return miniBoardDataList_; }
    }

    /// <summary>Field number for the "MiniBoardMultiData" field.</summary>
    public const int MiniBoardMultiDataFieldNumber = 2;
    private global::fat.gamekitdata.MiniBoardMultiData miniBoardMultiData_;
    /// <summary>
    ///多轮迷你棋盘 为了简化使用只支持记录最新一期棋盘数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.MiniBoardMultiData MiniBoardMultiData {
      get { return miniBoardMultiData_; }
      set {
        miniBoardMultiData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniBoardActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniBoardActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!miniBoardDataList_.Equals(other.miniBoardDataList_)) return false;
      if (!object.Equals(MiniBoardMultiData, other.MiniBoardMultiData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= miniBoardDataList_.GetHashCode();
      if (miniBoardMultiData_ != null) hash ^= MiniBoardMultiData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      miniBoardDataList_.WriteTo(output, _repeated_miniBoardDataList_codec);
      if (miniBoardMultiData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MiniBoardMultiData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      miniBoardDataList_.WriteTo(ref output, _repeated_miniBoardDataList_codec);
      if (miniBoardMultiData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MiniBoardMultiData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += miniBoardDataList_.CalculateSize(_repeated_miniBoardDataList_codec);
      if (miniBoardMultiData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MiniBoardMultiData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniBoardActivity other) {
      if (other == null) {
        return;
      }
      miniBoardDataList_.Add(other.miniBoardDataList_);
      if (other.miniBoardMultiData_ != null) {
        if (miniBoardMultiData_ == null) {
          MiniBoardMultiData = new global::fat.gamekitdata.MiniBoardMultiData();
        }
        MiniBoardMultiData.MergeFrom(other.MiniBoardMultiData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            miniBoardDataList_.AddEntriesFrom(input, _repeated_miniBoardDataList_codec);
            break;
          }
          case 18: {
            if (miniBoardMultiData_ == null) {
              MiniBoardMultiData = new global::fat.gamekitdata.MiniBoardMultiData();
            }
            input.ReadMessage(MiniBoardMultiData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            miniBoardDataList_.AddEntriesFrom(ref input, _repeated_miniBoardDataList_codec);
            break;
          }
          case 18: {
            if (miniBoardMultiData_ == null) {
              MiniBoardMultiData = new global::fat.gamekitdata.MiniBoardMultiData();
            }
            input.ReadMessage(MiniBoardMultiData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MiniBoardData : pb::IMessage<MiniBoardData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniBoardData> _parser = new pb::MessageParser<MiniBoardData>(() => new MiniBoardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniBoardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MiniBoardReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniBoardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniBoardData(MiniBoardData other) : this() {
      bindActivityId_ = other.bindActivityId_;
      miniBoard_ = other.miniBoard_ != null ? other.miniBoard_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniBoardData Clone() {
      return new MiniBoardData(this);
    }

    /// <summary>Field number for the "BindActivityId" field.</summary>
    public const int BindActivityIdFieldNumber = 1;
    private int bindActivityId_;
    /// <summary>
    ///绑定的活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BindActivityId {
      get { return bindActivityId_; }
      set {
        bindActivityId_ = value;
      }
    }

    /// <summary>Field number for the "MiniBoard" field.</summary>
    public const int MiniBoardFieldNumber = 2;
    private global::fat.gamekitdata.Merge miniBoard_;
    /// <summary>
    ///迷你棋盘核心数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.Merge MiniBoard {
      get { return miniBoard_; }
      set {
        miniBoard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniBoardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniBoardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BindActivityId != other.BindActivityId) return false;
      if (!object.Equals(MiniBoard, other.MiniBoard)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BindActivityId != 0) hash ^= BindActivityId.GetHashCode();
      if (miniBoard_ != null) hash ^= MiniBoard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BindActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BindActivityId);
      }
      if (miniBoard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MiniBoard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BindActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BindActivityId);
      }
      if (miniBoard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MiniBoard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BindActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BindActivityId);
      }
      if (miniBoard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MiniBoard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniBoardData other) {
      if (other == null) {
        return;
      }
      if (other.BindActivityId != 0) {
        BindActivityId = other.BindActivityId;
      }
      if (other.miniBoard_ != null) {
        if (miniBoard_ == null) {
          MiniBoard = new global::fat.gamekitdata.Merge();
        }
        MiniBoard.MergeFrom(other.MiniBoard);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BindActivityId = input.ReadInt32();
            break;
          }
          case 18: {
            if (miniBoard_ == null) {
              MiniBoard = new global::fat.gamekitdata.Merge();
            }
            input.ReadMessage(MiniBoard);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BindActivityId = input.ReadInt32();
            break;
          }
          case 18: {
            if (miniBoard_ == null) {
              MiniBoard = new global::fat.gamekitdata.Merge();
            }
            input.ReadMessage(MiniBoard);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MiniBoardMultiData : pb::IMessage<MiniBoardMultiData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniBoardMultiData> _parser = new pb::MessageParser<MiniBoardMultiData>(() => new MiniBoardMultiData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniBoardMultiData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MiniBoardReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniBoardMultiData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniBoardMultiData(MiniBoardMultiData other) : this() {
      bindActivityId_ = other.bindActivityId_;
      curRoundIndex_ = other.curRoundIndex_;
      miniBoard_ = other.miniBoard_ != null ? other.miniBoard_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniBoardMultiData Clone() {
      return new MiniBoardMultiData(this);
    }

    /// <summary>Field number for the "BindActivityId" field.</summary>
    public const int BindActivityIdFieldNumber = 1;
    private int bindActivityId_;
    /// <summary>
    ///绑定的活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BindActivityId {
      get { return bindActivityId_; }
      set {
        bindActivityId_ = value;
      }
    }

    /// <summary>Field number for the "CurRoundIndex" field.</summary>
    public const int CurRoundIndexFieldNumber = 2;
    private int curRoundIndex_;
    /// <summary>
    ///当前处于的轮次Index 从0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurRoundIndex {
      get { return curRoundIndex_; }
      set {
        curRoundIndex_ = value;
      }
    }

    /// <summary>Field number for the "MiniBoard" field.</summary>
    public const int MiniBoardFieldNumber = 3;
    private global::fat.gamekitdata.Merge miniBoard_;
    /// <summary>
    ///迷你棋盘核心数据 当切换到下一轮后 此数据会被重新赋值 BoardId也会变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.Merge MiniBoard {
      get { return miniBoard_; }
      set {
        miniBoard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniBoardMultiData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniBoardMultiData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BindActivityId != other.BindActivityId) return false;
      if (CurRoundIndex != other.CurRoundIndex) return false;
      if (!object.Equals(MiniBoard, other.MiniBoard)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BindActivityId != 0) hash ^= BindActivityId.GetHashCode();
      if (CurRoundIndex != 0) hash ^= CurRoundIndex.GetHashCode();
      if (miniBoard_ != null) hash ^= MiniBoard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BindActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BindActivityId);
      }
      if (CurRoundIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurRoundIndex);
      }
      if (miniBoard_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MiniBoard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BindActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BindActivityId);
      }
      if (CurRoundIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurRoundIndex);
      }
      if (miniBoard_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MiniBoard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BindActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BindActivityId);
      }
      if (CurRoundIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurRoundIndex);
      }
      if (miniBoard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MiniBoard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniBoardMultiData other) {
      if (other == null) {
        return;
      }
      if (other.BindActivityId != 0) {
        BindActivityId = other.BindActivityId;
      }
      if (other.CurRoundIndex != 0) {
        CurRoundIndex = other.CurRoundIndex;
      }
      if (other.miniBoard_ != null) {
        if (miniBoard_ == null) {
          MiniBoard = new global::fat.gamekitdata.Merge();
        }
        MiniBoard.MergeFrom(other.MiniBoard);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BindActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            CurRoundIndex = input.ReadInt32();
            break;
          }
          case 26: {
            if (miniBoard_ == null) {
              MiniBoard = new global::fat.gamekitdata.Merge();
            }
            input.ReadMessage(MiniBoard);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BindActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            CurRoundIndex = input.ReadInt32();
            break;
          }
          case 26: {
            if (miniBoard_ == null) {
              MiniBoard = new global::fat.gamekitdata.Merge();
            }
            input.ReadMessage(MiniBoard);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
