// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gamekitdata/minigame.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.gamekitdata {

  /// <summary>Holder for reflection information generated from gamekitdata/minigame.proto</summary>
  public static partial class MinigameReflection {

    #region Descriptor
    /// <summary>File descriptor for gamekitdata/minigame.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MinigameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpnYW1la2l0ZGF0YS9taW5pZ2FtZS5wcm90bxILZ2FtZWtpdGRhdGEiOwoM",
            "TWluaUdhbWVEYXRhEisKB0FsbERhdGEYASADKAsyGi5nYW1la2l0ZGF0YS5N",
            "aW5pR2FtZUxldmVsIlsKDU1pbmlHYW1lTGV2ZWwSDgoGR2FtZUlkGAEgASgF",
            "EhMKC1VubG9ja0xldmVsGAIgASgFEhMKC0ZpbmlzaEd1aWRlGAMgASgIEhAK",
            "CFJlZFBvaW50GAQgAygFQkVaMWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25m",
            "L2dlbi9nb2xhbmcvZ2FtZWtpdGRhdGGqAg9mYXQuZ2FtZWtpdGRhdGFiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.MiniGameData), global::fat.gamekitdata.MiniGameData.Parser, new[]{ "AllData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.MiniGameLevel), global::fat.gamekitdata.MiniGameLevel.Parser, new[]{ "GameId", "UnlockLevel", "FinishGuide", "RedPoint" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MiniGameData : pb::IMessage<MiniGameData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameData> _parser = new pb::MessageParser<MiniGameData>(() => new MiniGameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MinigameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameData(MiniGameData other) : this() {
      allData_ = other.allData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameData Clone() {
      return new MiniGameData(this);
    }

    /// <summary>Field number for the "AllData" field.</summary>
    public const int AllDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::fat.gamekitdata.MiniGameLevel> _repeated_allData_codec
        = pb::FieldCodec.ForMessage(10, global::fat.gamekitdata.MiniGameLevel.Parser);
    private readonly pbc::RepeatedField<global::fat.gamekitdata.MiniGameLevel> allData_ = new pbc::RepeatedField<global::fat.gamekitdata.MiniGameLevel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.gamekitdata.MiniGameLevel> AllData {
      get { return allData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!allData_.Equals(other.allData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= allData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      allData_.WriteTo(output, _repeated_allData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      allData_.WriteTo(ref output, _repeated_allData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += allData_.CalculateSize(_repeated_allData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameData other) {
      if (other == null) {
        return;
      }
      allData_.Add(other.allData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            allData_.AddEntriesFrom(input, _repeated_allData_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            allData_.AddEntriesFrom(ref input, _repeated_allData_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MiniGameLevel : pb::IMessage<MiniGameLevel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MiniGameLevel> _parser = new pb::MessageParser<MiniGameLevel>(() => new MiniGameLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniGameLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MinigameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameLevel(MiniGameLevel other) : this() {
      gameId_ = other.gameId_;
      unlockLevel_ = other.unlockLevel_;
      finishGuide_ = other.finishGuide_;
      redPoint_ = other.redPoint_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniGameLevel Clone() {
      return new MiniGameLevel(this);
    }

    /// <summary>Field number for the "GameId" field.</summary>
    public const int GameIdFieldNumber = 1;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "UnlockLevel" field.</summary>
    public const int UnlockLevelFieldNumber = 2;
    private int unlockLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnlockLevel {
      get { return unlockLevel_; }
      set {
        unlockLevel_ = value;
      }
    }

    /// <summary>Field number for the "FinishGuide" field.</summary>
    public const int FinishGuideFieldNumber = 3;
    private bool finishGuide_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FinishGuide {
      get { return finishGuide_; }
      set {
        finishGuide_ = value;
      }
    }

    /// <summary>Field number for the "RedPoint" field.</summary>
    public const int RedPointFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_redPoint_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> redPoint_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RedPoint {
      get { return redPoint_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniGameLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniGameLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (UnlockLevel != other.UnlockLevel) return false;
      if (FinishGuide != other.FinishGuide) return false;
      if(!redPoint_.Equals(other.redPoint_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (UnlockLevel != 0) hash ^= UnlockLevel.GetHashCode();
      if (FinishGuide != false) hash ^= FinishGuide.GetHashCode();
      hash ^= redPoint_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (UnlockLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnlockLevel);
      }
      if (FinishGuide != false) {
        output.WriteRawTag(24);
        output.WriteBool(FinishGuide);
      }
      redPoint_.WriteTo(output, _repeated_redPoint_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (UnlockLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnlockLevel);
      }
      if (FinishGuide != false) {
        output.WriteRawTag(24);
        output.WriteBool(FinishGuide);
      }
      redPoint_.WriteTo(ref output, _repeated_redPoint_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (UnlockLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnlockLevel);
      }
      if (FinishGuide != false) {
        size += 1 + 1;
      }
      size += redPoint_.CalculateSize(_repeated_redPoint_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniGameLevel other) {
      if (other == null) {
        return;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.UnlockLevel != 0) {
        UnlockLevel = other.UnlockLevel;
      }
      if (other.FinishGuide != false) {
        FinishGuide = other.FinishGuide;
      }
      redPoint_.Add(other.redPoint_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            UnlockLevel = input.ReadInt32();
            break;
          }
          case 24: {
            FinishGuide = input.ReadBool();
            break;
          }
          case 34:
          case 32: {
            redPoint_.AddEntriesFrom(input, _repeated_redPoint_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            UnlockLevel = input.ReadInt32();
            break;
          }
          case 24: {
            FinishGuide = input.ReadBool();
            break;
          }
          case 34:
          case 32: {
            redPoint_.AddEntriesFrom(ref input, _repeated_redPoint_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
