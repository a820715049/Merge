// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gamekitdata/merge.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.gamekitdata {

  /// <summary>Holder for reflection information generated from gamekitdata/merge.proto</summary>
  public static partial class MergeReflection {

    #region Descriptor
    /// <summary>File descriptor for gamekitdata/merge.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MergeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdnYW1la2l0ZGF0YS9tZXJnZS5wcm90bxILZ2FtZWtpdGRhdGEiuwIKCkVu",
            "ZXJneUluZm8SDgoGRW5lcmd5GAEgASgFEhUKDUxhc3RBZGRFbmVyZ3kYAiAB",
            "KAMSGwoTRW5lcmd5UHVyY2hhc2VDb3VudBgDIAEoBRIZChFFbmVyZ3lQdXJj",
            "aGFzZURheRgEIAEoBRIUCgxGcmVlU2xvdHNEYXkYBSABKAUSLwoORnJlZVNs",
            "b3RzU3RhdGUYBiADKA4yFy5nYW1la2l0ZGF0YS5Hb29kc1N0YXRlEhcKD0lu",
            "ZmluaXRlRW5kVGltZRgHIAEoAxI7CgpDbGFpbUNvdW50GAggAygLMicuZ2Ft",
            "ZWtpdGRhdGEuRW5lcmd5SW5mby5DbGFpbUNvdW50RW50cnkaMQoPQ2xhaW1D",
            "b3VudEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiPgoR",
            "UmFuZG9tT3V0cHV0UGFyYW0SEgoKUmFuZG9tU2VlZBgBIAEoBRIVCg1SYW5k",
            "b21OZXh0SWR4GAIgASgFIucFCgtNZXJnZUdsb2JhbBIXCg9GcmVlU3BlZWRV",
            "cFVzZWQYASABKAUSGAoQRnJlZVJlY2hhcmdlVXNlZBgCIAEoBRJCCg1GaXhl",
            "ZE91dHB1dElkGAMgAygLMisuZ2FtZWtpdGRhdGEuTWVyZ2VHbG9iYWwuRml4",
            "ZWRPdXRwdXRJZEVudHJ5EkoKEUNhdGVnb3J5U2hvd0NvdW50GAQgAygLMi8u",
            "Z2FtZWtpdGRhdGEuTWVyZ2VHbG9iYWwuQ2F0ZWdvcnlTaG93Q291bnRFbnRy",
            "eRJSChVCdWJibGVTcGF3bk1lcmdlQ291bnQYBSADKAsyMy5nYW1la2l0ZGF0",
            "YS5NZXJnZUdsb2JhbC5CdWJibGVTcGF3bk1lcmdlQ291bnRFbnRyeRI8CgpG",
            "aXhlZEVhdElkGAYgAygLMiguZ2FtZWtpdGRhdGEuTWVyZ2VHbG9iYWwuRml4",
            "ZWRFYXRJZEVudHJ5Ek4KE0ZpeGVkT3V0cHV0QnlJdGVtSWQYByADKAsyMS5n",
            "YW1la2l0ZGF0YS5NZXJnZUdsb2JhbC5GaXhlZE91dHB1dEJ5SXRlbUlkRW50",
            "cnkSFgoORnJlZUJ1YmJsZVVzZWQYCCABKAUaNAoSRml4ZWRPdXRwdXRJZEVu",
            "dHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEaOAoWQ2F0ZWdv",
            "cnlTaG93Q291bnRFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6",
            "AjgBGjwKGkJ1YmJsZVNwYXduTWVyZ2VDb3VudEVudHJ5EgsKA2tleRgBIAEo",
            "BRINCgV2YWx1ZRgCIAEoBToCOAEaMQoPRml4ZWRFYXRJZEVudHJ5EgsKA2tl",
            "eRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEaOgoYRml4ZWRPdXRwdXRCeUl0",
            "ZW1JZEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiVAoI",
            "TWVyZ2VCYWcSCgoCSWQYASABKAUSEwoLSW52Q2FwYWNpdHkYAiABKAUSEAoI",
            "SW52SXRlbXMYAyADKAUSFQoNUmVkUG9pbnRJdGVtcxgEIAMoBSKbAQoLUmFu",
            "ZG9tUGFyYW0SDAoEVHlwZRgBIAEoBRIQCghJbnRQYXJhbRgCIAMoBRI6CglN",
            "YXBQYXJhbTEYAyADKAsyJy5nYW1la2l0ZGF0YS5SYW5kb21QYXJhbS5NYXBQ",
            "YXJhbTFFbnRyeRowCg5NYXBQYXJhbTFFbnRyeRILCgNrZXkYASABKAUSDQoF",
            "dmFsdWUYAiABKAU6AjgBIjgKCE9yZGVyQm94EhcKD09yZGVyQm94SXRlbVRp",
            "ZBgBIAEoBRITCgtMaWZlQ291bnRlchgCIAEoBSIzCgZKdW1wQ0QSFAoMSnVt",
            "cENESXRlbUlkGAEgASgFEhMKC0xpZmVDb3VudGVyGAIgASgFIvUFCgVNZXJn",
            "ZRIRCglXYWl0Q2hlc3QYAyABKAUSFgoOV2FpdENoZXN0U3RhcnQYBCABKAMS",
            "EgoKTGFzdEl0ZW1JZBgFIAEoBRISCgpSZXdhcmRMaXN0GAYgAygFEhMKC0lu",
            "dkNhcGFjaXR5GAkgASgFEhAKCEludkl0ZW1zGAogAygFEiUKBUl0ZW1zGAsg",
            "AygLMhYuZ2FtZWtpdGRhdGEuTWVyZ2VJdGVtEhYKDkxhc3RBY3RpdmVUaW1l",
            "GBAgASgDEg8KB0JvYXJkSWQYEiABKAUSHQoVUmV3YXJkTGlzdFVucmVhZENv",
            "dW50GBQgASgFEg4KBkNsb3VkcxgVIAEoDRIVCg1Db25maWdWZXJzaW9uGBYg",
            "ASgFEhMKC0Rpc2FibGVDb21zGBcgASgEEkQKEVJhbmRvbU91dHB1dEZvcklk",
            "GBggAygLMikuZ2FtZWtpdGRhdGEuTWVyZ2UuUmFuZG9tT3V0cHV0Rm9ySWRF",
            "bnRyeRIoCglJbnZlbnRvcnkYGSADKAsyFS5nYW1la2l0ZGF0YS5NZXJnZUJh",
            "ZxJCChBSYW5kb21QYXJhbUZvcklkGBogAygLMiguZ2FtZWtpdGRhdGEuTWVy",
            "Z2UuUmFuZG9tUGFyYW1Gb3JJZEVudHJ5EhgKEFJld2FyZExpc3RJdGVtSWQY",
            "GyADKAUSJwoIT3JkZXJCb3gYHCABKAsyFS5nYW1la2l0ZGF0YS5PcmRlckJv",
            "eBIjCgZKdW1wQ0QYHSABKAsyEy5nYW1la2l0ZGF0YS5KdW1wQ0QaWAoWUmFu",
            "ZG9tT3V0cHV0Rm9ySWRFbnRyeRILCgNrZXkYASABKAUSLQoFdmFsdWUYAiAB",
            "KAsyHi5nYW1la2l0ZGF0YS5SYW5kb21PdXRwdXRQYXJhbToCOAEaUQoVUmFu",
            "ZG9tUGFyYW1Gb3JJZEVudHJ5EgsKA2tleRgBIAEoBRInCgV2YWx1ZRgCIAEo",
            "CzIYLmdhbWVraXRkYXRhLlJhbmRvbVBhcmFtOgI4ASIhCgVPcmRlchILCgNO",
            "cGMYASABKAUSCwoDUG9zGAIgASgFIisKCE1lcmdlRGVsEhAKCEludkl0ZW1z",
            "GAEgAygFEg0KBUl0ZW1zGAIgAygFIicKCENvbUR5aW5nEgwKBExpZmUYASAB",
            "KAUSDQoFU3RhcnQYAiABKAMikgIKDkNvbUNsaWNrU291cmNlEhUKDVJldml2",
            "ZUNvdW50ZXIYASABKAUSEwoLUmV2aXZlU3RhcnQYAiABKAMSFQoNT3V0cHV0",
            "Q291bnRlchgDIAEoBRITCgtPdXRwdXRTdGFydBgEIAEoAxIWCg5JdGVtSW5S",
            "ZWNoYXJnZRgFIAEoBRIMCgRJdGVtGAYgASgFEhMKC05vQ0RDb3VudGVyGAcg",
            "ASgFEhIKClJhbmRvbVNlZWQYCCABKAUSFQoNUmFuZG9tTmV4dElkeBgJIAEo",
            "BRITCgtPdXRwdXRDb3VudBgKIAEoBRIVCg1Jc0ZpcnN0UmV2aXZlGAsgASgI",
            "EhYKDkJvb3N0SXRlbUNvdW50GAwgASgFIi0KCENvbUNoZXN0Eg4KBk9wZW5l",
            "ZBgBIAEoCBIRCglVc2VkQ291bnQYAiABKAUiKAoJQ29tQnViYmxlEgwKBExp",
            "ZmUYASABKAUSDQoFU3RhcnQYAiABKAMiXQoNQ29tQXV0b1NvdXJjZRIVCg1P",
            "dXRwdXRDb3VudGVyGAEgASgFEg0KBVN0YXJ0GAIgASgDEhEKCUl0ZW1Db3Vu",
            "dBgDIAEoBRITCgtUb3RhbE91dHB1dBgEIAEoBSIbCgZDb21Cb3gSEQoJVXNl",
            "ZENvdW50GAEgASgFIjUKCENvbVNraWxsEhMKC0J1ZmZDb3VudGVyGAEgASgF",
            "EhQKDFN0YWNrQ291bnRlchgCIAEoBSLxAQoPQ29tRWF0aW5nU291cmNlEhEK",
            "CUNvdW50TGVmdBgBIAEoBRIWCg5FYXRpbmdUaW1lTGVmdBgCIAEoBRJCCgtJ",
            "dGVtc1dpdGhpbhgDIAMoCzItLmdhbWVraXRkYXRhLkNvbUVhdGluZ1NvdXJj",
            "ZS5JdGVtc1dpdGhpbkVudHJ5EhUKDVJhbmRvbU5leHRJZHgYBCABKAUSEgoK",
            "UmFuZG9tU2VlZBgFIAEoBRIQCghFYXRHcm91cBgGIAEoBRoyChBJdGVtc1dp",
            "dGhpbkVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiOQoL",
            "Q29tQWN0aXZpdHkSEgoKQWN0aXZpdHlJZBgBIAEoBRIWCg5BY3Rpdml0eUVu",
            "ZXJneRgCIAEoBSI3Cg1Db21Ub29sU291cmNlEhEKCUl0ZW1Db3VudBgBIAEo",
            "BRITCgtUb3RhbE91dHB1dBgCIAEoBSIiCg1Db21TcGVjaWFsQm94EhEKCUl0",
            "ZW1Db3VudBgBIAEoBSKnAQoMQ29tTWl4U291cmNlEhUKDVJldml2ZUNvdW50",
            "ZXIYASABKAUSFQoNT3V0cHV0Q291bnRlchgCIAEoBRIWCg5JdGVtSW5SZWNo",
            "YXJnZRgDIAEoBRIRCglJdGVtQ291bnQYBCABKAUSEwoLT3V0cHV0Q291bnQY",
            "BSABKAUSFQoNSXNGaXJzdFJldml2ZRgGIAEoCBISCgpNaXhlZEl0ZW1zGAcg",
            "AygFIiUKDUNvbVRyaWdTb3VyY2USFAoMVHJpZ2dlckNvdW50GAEgASgFIswF",
            "CglNZXJnZUl0ZW0SCgoCSWQYASABKAUSCwoDVGlkGAIgASgFEg0KBVN0YXRl",
            "GAMgASgFEgkKAVgYBCABKAUSCQoBWRgFIAEoBRILCgNDb20YBiABKA0SJwoI",
            "Q29tRHlpbmcYByABKAsyFS5nYW1la2l0ZGF0YS5Db21EeWluZxIzCg5Db21D",
            "bGlja1NvdXJjZRgIIAEoCzIbLmdhbWVraXRkYXRhLkNvbUNsaWNrU291cmNl",
            "EicKCENvbUNoZXN0GAkgASgLMhUuZ2FtZWtpdGRhdGEuQ29tQ2hlc3QSKQoJ",
            "Q29tQnViYmxlGAogASgLMhYuZ2FtZWtpdGRhdGEuQ29tQnViYmxlEjEKDUNv",
            "bUF1dG9Tb3VyY2UYCyABKAsyGi5nYW1la2l0ZGF0YS5Db21BdXRvU291cmNl",
            "EiMKBkNvbUJveBgMIAEoCzITLmdhbWVraXRkYXRhLkNvbUJveBI1Cg9Db21F",
            "YXRpbmdTb3VyY2UYDSABKAsyHC5nYW1la2l0ZGF0YS5Db21FYXRpbmdTb3Vy",
            "Y2USJwoIQ29tU2tpbGwYDiABKAsyFS5nYW1la2l0ZGF0YS5Db21Ta2lsbBIt",
            "CgtDb21BY3Rpdml0eRgPIAEoCzIYLmdhbWVraXRkYXRhLkNvbUFjdGl2aXR5",
            "EhEKCVN0YXRlQ29uZhgQIAEoBRIxCg1Db21Ub29sU291cmNlGBEgASgLMhou",
            "Z2FtZWtpdGRhdGEuQ29tVG9vbFNvdXJjZRIxCg1Db21TcGVjaWFsQm94GBIg",
            "ASgLMhouZ2FtZWtpdGRhdGEuQ29tU3BlY2lhbEJveBIvCgxDb21NaXhTb3Vy",
            "Y2UYEyABKAsyGS5nYW1la2l0ZGF0YS5Db21NaXhTb3VyY2USMQoNQ29tVHJp",
            "Z1NvdXJjZRgUIAEoCzIaLmdhbWVraXRkYXRhLkNvbVRyaWdTb3VyY2UiKAoL",
            "UmVjb3JkU3RhdGUSCgoCSWQYASABKAUSDQoFU3RhdGUYAiABKAUqaQoKR29v",
            "ZHNTdGF0ZRIWChJHb29kc1N0YXRlQ2FuQ2xhaW0QABIWChJHb29kc1N0YXRl",
            "Tm90U3RhcnQQARIUChBHb29kc1N0YXRlTWlzc2VkEAISFQoRR29vZHNTdGF0",
            "ZUNsYWltZWQQA0JFWjFnaXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4v",
            "Z29sYW5nL2dhbWVraXRkYXRhqgIPZmF0LmdhbWVraXRkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::fat.gamekitdata.GoodsState), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.EnergyInfo), global::fat.gamekitdata.EnergyInfo.Parser, new[]{ "Energy", "LastAddEnergy", "EnergyPurchaseCount", "EnergyPurchaseDay", "FreeSlotsDay", "FreeSlotsState", "InfiniteEndTime", "ClaimCount" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.RandomOutputParam), global::fat.gamekitdata.RandomOutputParam.Parser, new[]{ "RandomSeed", "RandomNextIdx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.MergeGlobal), global::fat.gamekitdata.MergeGlobal.Parser, new[]{ "FreeSpeedUpUsed", "FreeRechargeUsed", "FixedOutputId", "CategoryShowCount", "BubbleSpawnMergeCount", "FixedEatId", "FixedOutputByItemId", "FreeBubbleUsed" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.MergeBag), global::fat.gamekitdata.MergeBag.Parser, new[]{ "Id", "InvCapacity", "InvItems", "RedPointItems" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.RandomParam), global::fat.gamekitdata.RandomParam.Parser, new[]{ "Type", "IntParam", "MapParam1" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.OrderBox), global::fat.gamekitdata.OrderBox.Parser, new[]{ "OrderBoxItemTid", "LifeCounter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.JumpCD), global::fat.gamekitdata.JumpCD.Parser, new[]{ "JumpCDItemId", "LifeCounter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.Merge), global::fat.gamekitdata.Merge.Parser, new[]{ "WaitChest", "WaitChestStart", "LastItemId", "RewardList", "InvCapacity", "InvItems", "Items", "LastActiveTime", "BoardId", "RewardListUnreadCount", "Clouds", "ConfigVersion", "DisableComs", "RandomOutputForId", "Inventory", "RandomParamForId", "RewardListItemId", "OrderBox", "JumpCD" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.Order), global::fat.gamekitdata.Order.Parser, new[]{ "Npc", "Pos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.MergeDel), global::fat.gamekitdata.MergeDel.Parser, new[]{ "InvItems", "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ComDying), global::fat.gamekitdata.ComDying.Parser, new[]{ "Life", "Start" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ComClickSource), global::fat.gamekitdata.ComClickSource.Parser, new[]{ "ReviveCounter", "ReviveStart", "OutputCounter", "OutputStart", "ItemInRecharge", "Item", "NoCDCounter", "RandomSeed", "RandomNextIdx", "OutputCount", "IsFirstRevive", "BoostItemCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ComChest), global::fat.gamekitdata.ComChest.Parser, new[]{ "Opened", "UsedCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ComBubble), global::fat.gamekitdata.ComBubble.Parser, new[]{ "Life", "Start" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ComAutoSource), global::fat.gamekitdata.ComAutoSource.Parser, new[]{ "OutputCounter", "Start", "ItemCount", "TotalOutput" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ComBox), global::fat.gamekitdata.ComBox.Parser, new[]{ "UsedCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ComSkill), global::fat.gamekitdata.ComSkill.Parser, new[]{ "BuffCounter", "StackCounter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ComEatingSource), global::fat.gamekitdata.ComEatingSource.Parser, new[]{ "CountLeft", "EatingTimeLeft", "ItemsWithin", "RandomNextIdx", "RandomSeed", "EatGroup" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ComActivity), global::fat.gamekitdata.ComActivity.Parser, new[]{ "ActivityId", "ActivityEnergy" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ComToolSource), global::fat.gamekitdata.ComToolSource.Parser, new[]{ "ItemCount", "TotalOutput" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ComSpecialBox), global::fat.gamekitdata.ComSpecialBox.Parser, new[]{ "ItemCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ComMixSource), global::fat.gamekitdata.ComMixSource.Parser, new[]{ "ReviveCounter", "OutputCounter", "ItemInRecharge", "ItemCount", "OutputCount", "IsFirstRevive", "MixedItems" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ComTrigSource), global::fat.gamekitdata.ComTrigSource.Parser, new[]{ "TriggerCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.MergeItem), global::fat.gamekitdata.MergeItem.Parser, new[]{ "Id", "Tid", "State", "X", "Y", "Com", "ComDying", "ComClickSource", "ComChest", "ComBubble", "ComAutoSource", "ComBox", "ComEatingSource", "ComSkill", "ComActivity", "StateConf", "ComToolSource", "ComSpecialBox", "ComMixSource", "ComTrigSource" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.RecordState), global::fat.gamekitdata.RecordState.Parser, new[]{ "Id", "State" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum GoodsState {
    [pbr::OriginalName("GoodsStateCanClaim")] CanClaim = 0,
    [pbr::OriginalName("GoodsStateNotStart")] NotStart = 1,
    [pbr::OriginalName("GoodsStateMissed")] Missed = 2,
    [pbr::OriginalName("GoodsStateClaimed")] Claimed = 3,
  }

  #endregion

  #region Messages
  public sealed partial class EnergyInfo : pb::IMessage<EnergyInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EnergyInfo> _parser = new pb::MessageParser<EnergyInfo>(() => new EnergyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnergyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnergyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnergyInfo(EnergyInfo other) : this() {
      energy_ = other.energy_;
      lastAddEnergy_ = other.lastAddEnergy_;
      energyPurchaseCount_ = other.energyPurchaseCount_;
      energyPurchaseDay_ = other.energyPurchaseDay_;
      freeSlotsDay_ = other.freeSlotsDay_;
      freeSlotsState_ = other.freeSlotsState_.Clone();
      infiniteEndTime_ = other.infiniteEndTime_;
      claimCount_ = other.claimCount_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnergyInfo Clone() {
      return new EnergyInfo(this);
    }

    /// <summary>Field number for the "Energy" field.</summary>
    public const int EnergyFieldNumber = 1;
    private int energy_;
    /// <summary>
    /// 能量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "LastAddEnergy" field.</summary>
    public const int LastAddEnergyFieldNumber = 2;
    private long lastAddEnergy_;
    /// <summary>
    /// 上次能量增加时刻
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastAddEnergy {
      get { return lastAddEnergy_; }
      set {
        lastAddEnergy_ = value;
      }
    }

    /// <summary>Field number for the "EnergyPurchaseCount" field.</summary>
    public const int EnergyPurchaseCountFieldNumber = 3;
    private int energyPurchaseCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnergyPurchaseCount {
      get { return energyPurchaseCount_; }
      set {
        energyPurchaseCount_ = value;
      }
    }

    /// <summary>Field number for the "EnergyPurchaseDay" field.</summary>
    public const int EnergyPurchaseDayFieldNumber = 4;
    private int energyPurchaseDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnergyPurchaseDay {
      get { return energyPurchaseDay_; }
      set {
        energyPurchaseDay_ = value;
      }
    }

    /// <summary>Field number for the "FreeSlotsDay" field.</summary>
    public const int FreeSlotsDayFieldNumber = 5;
    private int freeSlotsDay_;
    /// <summary>
    /// 表示免费领体力栏位的刷新天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeSlotsDay {
      get { return freeSlotsDay_; }
      set {
        freeSlotsDay_ = value;
      }
    }

    /// <summary>Field number for the "FreeSlotsState" field.</summary>
    public const int FreeSlotsStateFieldNumber = 6;
    private static readonly pb::FieldCodec<global::fat.gamekitdata.GoodsState> _repeated_freeSlotsState_codec
        = pb::FieldCodec.ForEnum(50, x => (int) x, x => (global::fat.gamekitdata.GoodsState) x);
    private readonly pbc::RepeatedField<global::fat.gamekitdata.GoodsState> freeSlotsState_ = new pbc::RepeatedField<global::fat.gamekitdata.GoodsState>();
    /// <summary>
    /// 表示免费领体力栏位的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.gamekitdata.GoodsState> FreeSlotsState {
      get { return freeSlotsState_; }
    }

    /// <summary>Field number for the "InfiniteEndTime" field.</summary>
    public const int InfiniteEndTimeFieldNumber = 7;
    private long infiniteEndTime_;
    /// <summary>
    /// 表示无限体力结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InfiniteEndTime {
      get { return infiniteEndTime_; }
      set {
        infiniteEndTime_ = value;
      }
    }

    /// <summary>Field number for the "ClaimCount" field.</summary>
    public const int ClaimCountFieldNumber = 8;
    private static readonly pbc::MapField<int, int>.Codec _map_claimCount_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 66);
    private readonly pbc::MapField<int, int> claimCount_ = new pbc::MapField<int, int>();
    /// <summary>
    ///各棋盘的免费能量领取次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> ClaimCount {
      get { return claimCount_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnergyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnergyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Energy != other.Energy) return false;
      if (LastAddEnergy != other.LastAddEnergy) return false;
      if (EnergyPurchaseCount != other.EnergyPurchaseCount) return false;
      if (EnergyPurchaseDay != other.EnergyPurchaseDay) return false;
      if (FreeSlotsDay != other.FreeSlotsDay) return false;
      if(!freeSlotsState_.Equals(other.freeSlotsState_)) return false;
      if (InfiniteEndTime != other.InfiniteEndTime) return false;
      if (!ClaimCount.Equals(other.ClaimCount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Energy != 0) hash ^= Energy.GetHashCode();
      if (LastAddEnergy != 0L) hash ^= LastAddEnergy.GetHashCode();
      if (EnergyPurchaseCount != 0) hash ^= EnergyPurchaseCount.GetHashCode();
      if (EnergyPurchaseDay != 0) hash ^= EnergyPurchaseDay.GetHashCode();
      if (FreeSlotsDay != 0) hash ^= FreeSlotsDay.GetHashCode();
      hash ^= freeSlotsState_.GetHashCode();
      if (InfiniteEndTime != 0L) hash ^= InfiniteEndTime.GetHashCode();
      hash ^= ClaimCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Energy != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Energy);
      }
      if (LastAddEnergy != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastAddEnergy);
      }
      if (EnergyPurchaseCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EnergyPurchaseCount);
      }
      if (EnergyPurchaseDay != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EnergyPurchaseDay);
      }
      if (FreeSlotsDay != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeSlotsDay);
      }
      freeSlotsState_.WriteTo(output, _repeated_freeSlotsState_codec);
      if (InfiniteEndTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(InfiniteEndTime);
      }
      claimCount_.WriteTo(output, _map_claimCount_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Energy != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Energy);
      }
      if (LastAddEnergy != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastAddEnergy);
      }
      if (EnergyPurchaseCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EnergyPurchaseCount);
      }
      if (EnergyPurchaseDay != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EnergyPurchaseDay);
      }
      if (FreeSlotsDay != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeSlotsDay);
      }
      freeSlotsState_.WriteTo(ref output, _repeated_freeSlotsState_codec);
      if (InfiniteEndTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(InfiniteEndTime);
      }
      claimCount_.WriteTo(ref output, _map_claimCount_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Energy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Energy);
      }
      if (LastAddEnergy != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastAddEnergy);
      }
      if (EnergyPurchaseCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnergyPurchaseCount);
      }
      if (EnergyPurchaseDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnergyPurchaseDay);
      }
      if (FreeSlotsDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeSlotsDay);
      }
      size += freeSlotsState_.CalculateSize(_repeated_freeSlotsState_codec);
      if (InfiniteEndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InfiniteEndTime);
      }
      size += claimCount_.CalculateSize(_map_claimCount_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnergyInfo other) {
      if (other == null) {
        return;
      }
      if (other.Energy != 0) {
        Energy = other.Energy;
      }
      if (other.LastAddEnergy != 0L) {
        LastAddEnergy = other.LastAddEnergy;
      }
      if (other.EnergyPurchaseCount != 0) {
        EnergyPurchaseCount = other.EnergyPurchaseCount;
      }
      if (other.EnergyPurchaseDay != 0) {
        EnergyPurchaseDay = other.EnergyPurchaseDay;
      }
      if (other.FreeSlotsDay != 0) {
        FreeSlotsDay = other.FreeSlotsDay;
      }
      freeSlotsState_.Add(other.freeSlotsState_);
      if (other.InfiniteEndTime != 0L) {
        InfiniteEndTime = other.InfiniteEndTime;
      }
      claimCount_.Add(other.claimCount_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Energy = input.ReadInt32();
            break;
          }
          case 16: {
            LastAddEnergy = input.ReadInt64();
            break;
          }
          case 24: {
            EnergyPurchaseCount = input.ReadInt32();
            break;
          }
          case 32: {
            EnergyPurchaseDay = input.ReadInt32();
            break;
          }
          case 40: {
            FreeSlotsDay = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            freeSlotsState_.AddEntriesFrom(input, _repeated_freeSlotsState_codec);
            break;
          }
          case 56: {
            InfiniteEndTime = input.ReadInt64();
            break;
          }
          case 66: {
            claimCount_.AddEntriesFrom(input, _map_claimCount_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Energy = input.ReadInt32();
            break;
          }
          case 16: {
            LastAddEnergy = input.ReadInt64();
            break;
          }
          case 24: {
            EnergyPurchaseCount = input.ReadInt32();
            break;
          }
          case 32: {
            EnergyPurchaseDay = input.ReadInt32();
            break;
          }
          case 40: {
            FreeSlotsDay = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            freeSlotsState_.AddEntriesFrom(ref input, _repeated_freeSlotsState_codec);
            break;
          }
          case 56: {
            InfiniteEndTime = input.ReadInt64();
            break;
          }
          case 66: {
            claimCount_.AddEntriesFrom(ref input, _map_claimCount_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RandomOutputParam : pb::IMessage<RandomOutputParam>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RandomOutputParam> _parser = new pb::MessageParser<RandomOutputParam>(() => new RandomOutputParam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RandomOutputParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomOutputParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomOutputParam(RandomOutputParam other) : this() {
      randomSeed_ = other.randomSeed_;
      randomNextIdx_ = other.randomNextIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomOutputParam Clone() {
      return new RandomOutputParam(this);
    }

    /// <summary>Field number for the "RandomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 1;
    private int randomSeed_;
    /// <summary>
    ///随机种子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "RandomNextIdx" field.</summary>
    public const int RandomNextIdxFieldNumber = 2;
    private int randomNextIdx_;
    /// <summary>
    ///下一个随机idx
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomNextIdx {
      get { return randomNextIdx_; }
      set {
        randomNextIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RandomOutputParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RandomOutputParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RandomSeed != other.RandomSeed) return false;
      if (RandomNextIdx != other.RandomNextIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RandomSeed != 0) hash ^= RandomSeed.GetHashCode();
      if (RandomNextIdx != 0) hash ^= RandomNextIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RandomSeed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RandomSeed);
      }
      if (RandomNextIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RandomNextIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RandomSeed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RandomSeed);
      }
      if (RandomNextIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RandomNextIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RandomSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomSeed);
      }
      if (RandomNextIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomNextIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RandomOutputParam other) {
      if (other == null) {
        return;
      }
      if (other.RandomSeed != 0) {
        RandomSeed = other.RandomSeed;
      }
      if (other.RandomNextIdx != 0) {
        RandomNextIdx = other.RandomNextIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RandomSeed = input.ReadInt32();
            break;
          }
          case 16: {
            RandomNextIdx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RandomSeed = input.ReadInt32();
            break;
          }
          case 16: {
            RandomNextIdx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MergeGlobal : pb::IMessage<MergeGlobal>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MergeGlobal> _parser = new pb::MessageParser<MergeGlobal>(() => new MergeGlobal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MergeGlobal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MergeGlobal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MergeGlobal(MergeGlobal other) : this() {
      freeSpeedUpUsed_ = other.freeSpeedUpUsed_;
      freeRechargeUsed_ = other.freeRechargeUsed_;
      fixedOutputId_ = other.fixedOutputId_.Clone();
      categoryShowCount_ = other.categoryShowCount_.Clone();
      bubbleSpawnMergeCount_ = other.bubbleSpawnMergeCount_.Clone();
      fixedEatId_ = other.fixedEatId_.Clone();
      fixedOutputByItemId_ = other.fixedOutputByItemId_.Clone();
      freeBubbleUsed_ = other.freeBubbleUsed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MergeGlobal Clone() {
      return new MergeGlobal(this);
    }

    /// <summary>Field number for the "FreeSpeedUpUsed" field.</summary>
    public const int FreeSpeedUpUsedFieldNumber = 1;
    private int freeSpeedUpUsed_;
    /// <summary>
    ///免费加速打开用了几次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeSpeedUpUsed {
      get { return freeSpeedUpUsed_; }
      set {
        freeSpeedUpUsed_ = value;
      }
    }

    /// <summary>Field number for the "FreeRechargeUsed" field.</summary>
    public const int FreeRechargeUsedFieldNumber = 2;
    private int freeRechargeUsed_;
    /// <summary>
    ///免费充能充了几次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeRechargeUsed {
      get { return freeRechargeUsed_; }
      set {
        freeRechargeUsed_ = value;
      }
    }

    /// <summary>Field number for the "FixedOutputId" field.</summary>
    public const int FixedOutputIdFieldNumber = 3;
    private static readonly pbc::MapField<int, int>.Codec _map_fixedOutputId_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 26);
    private readonly pbc::MapField<int, int> fixedOutputId_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 固定产出到了第几个 (以链条id为依据)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> FixedOutputId {
      get { return fixedOutputId_; }
    }

    /// <summary>Field number for the "CategoryShowCount" field.</summary>
    public const int CategoryShowCountFieldNumber = 4;
    private static readonly pbc::MapField<int, int>.Codec _map_categoryShowCount_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 34);
    private readonly pbc::MapField<int, int> categoryShowCount_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 合成链解锁到了第几个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> CategoryShowCount {
      get { return categoryShowCount_; }
    }

    /// <summary>Field number for the "BubbleSpawnMergeCount" field.</summary>
    public const int BubbleSpawnMergeCountFieldNumber = 5;
    private static readonly pbc::MapField<int, int>.Codec _map_bubbleSpawnMergeCount_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 42);
    private readonly pbc::MapField<int, int> bubbleSpawnMergeCount_ = new pbc::MapField<int, int>();
    /// <summary>
    ///用于气泡固定产出的合成次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> BubbleSpawnMergeCount {
      get { return bubbleSpawnMergeCount_; }
    }

    /// <summary>Field number for the "FixedEatId" field.</summary>
    public const int FixedEatIdFieldNumber = 6;
    private static readonly pbc::MapField<int, int>.Codec _map_fixedEatId_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 50);
    private readonly pbc::MapField<int, int> fixedEatId_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 固定吃到了第几个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> FixedEatId {
      get { return fixedEatId_; }
    }

    /// <summary>Field number for the "FixedOutputByItemId" field.</summary>
    public const int FixedOutputByItemIdFieldNumber = 7;
    private static readonly pbc::MapField<int, int>.Codec _map_fixedOutputByItemId_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 58);
    private readonly pbc::MapField<int, int> fixedOutputByItemId_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 固定产出到了第几个 (以物品id为依据)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> FixedOutputByItemId {
      get { return fixedOutputByItemId_; }
    }

    /// <summary>Field number for the "FreeBubbleUsed" field.</summary>
    public const int FreeBubbleUsedFieldNumber = 8;
    private int freeBubbleUsed_;
    /// <summary>
    /// 免费气泡用了几次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeBubbleUsed {
      get { return freeBubbleUsed_; }
      set {
        freeBubbleUsed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MergeGlobal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MergeGlobal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FreeSpeedUpUsed != other.FreeSpeedUpUsed) return false;
      if (FreeRechargeUsed != other.FreeRechargeUsed) return false;
      if (!FixedOutputId.Equals(other.FixedOutputId)) return false;
      if (!CategoryShowCount.Equals(other.CategoryShowCount)) return false;
      if (!BubbleSpawnMergeCount.Equals(other.BubbleSpawnMergeCount)) return false;
      if (!FixedEatId.Equals(other.FixedEatId)) return false;
      if (!FixedOutputByItemId.Equals(other.FixedOutputByItemId)) return false;
      if (FreeBubbleUsed != other.FreeBubbleUsed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FreeSpeedUpUsed != 0) hash ^= FreeSpeedUpUsed.GetHashCode();
      if (FreeRechargeUsed != 0) hash ^= FreeRechargeUsed.GetHashCode();
      hash ^= FixedOutputId.GetHashCode();
      hash ^= CategoryShowCount.GetHashCode();
      hash ^= BubbleSpawnMergeCount.GetHashCode();
      hash ^= FixedEatId.GetHashCode();
      hash ^= FixedOutputByItemId.GetHashCode();
      if (FreeBubbleUsed != 0) hash ^= FreeBubbleUsed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FreeSpeedUpUsed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreeSpeedUpUsed);
      }
      if (FreeRechargeUsed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FreeRechargeUsed);
      }
      fixedOutputId_.WriteTo(output, _map_fixedOutputId_codec);
      categoryShowCount_.WriteTo(output, _map_categoryShowCount_codec);
      bubbleSpawnMergeCount_.WriteTo(output, _map_bubbleSpawnMergeCount_codec);
      fixedEatId_.WriteTo(output, _map_fixedEatId_codec);
      fixedOutputByItemId_.WriteTo(output, _map_fixedOutputByItemId_codec);
      if (FreeBubbleUsed != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FreeBubbleUsed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FreeSpeedUpUsed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreeSpeedUpUsed);
      }
      if (FreeRechargeUsed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FreeRechargeUsed);
      }
      fixedOutputId_.WriteTo(ref output, _map_fixedOutputId_codec);
      categoryShowCount_.WriteTo(ref output, _map_categoryShowCount_codec);
      bubbleSpawnMergeCount_.WriteTo(ref output, _map_bubbleSpawnMergeCount_codec);
      fixedEatId_.WriteTo(ref output, _map_fixedEatId_codec);
      fixedOutputByItemId_.WriteTo(ref output, _map_fixedOutputByItemId_codec);
      if (FreeBubbleUsed != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FreeBubbleUsed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FreeSpeedUpUsed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeSpeedUpUsed);
      }
      if (FreeRechargeUsed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeRechargeUsed);
      }
      size += fixedOutputId_.CalculateSize(_map_fixedOutputId_codec);
      size += categoryShowCount_.CalculateSize(_map_categoryShowCount_codec);
      size += bubbleSpawnMergeCount_.CalculateSize(_map_bubbleSpawnMergeCount_codec);
      size += fixedEatId_.CalculateSize(_map_fixedEatId_codec);
      size += fixedOutputByItemId_.CalculateSize(_map_fixedOutputByItemId_codec);
      if (FreeBubbleUsed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeBubbleUsed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MergeGlobal other) {
      if (other == null) {
        return;
      }
      if (other.FreeSpeedUpUsed != 0) {
        FreeSpeedUpUsed = other.FreeSpeedUpUsed;
      }
      if (other.FreeRechargeUsed != 0) {
        FreeRechargeUsed = other.FreeRechargeUsed;
      }
      fixedOutputId_.Add(other.fixedOutputId_);
      categoryShowCount_.Add(other.categoryShowCount_);
      bubbleSpawnMergeCount_.Add(other.bubbleSpawnMergeCount_);
      fixedEatId_.Add(other.fixedEatId_);
      fixedOutputByItemId_.Add(other.fixedOutputByItemId_);
      if (other.FreeBubbleUsed != 0) {
        FreeBubbleUsed = other.FreeBubbleUsed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FreeSpeedUpUsed = input.ReadInt32();
            break;
          }
          case 16: {
            FreeRechargeUsed = input.ReadInt32();
            break;
          }
          case 26: {
            fixedOutputId_.AddEntriesFrom(input, _map_fixedOutputId_codec);
            break;
          }
          case 34: {
            categoryShowCount_.AddEntriesFrom(input, _map_categoryShowCount_codec);
            break;
          }
          case 42: {
            bubbleSpawnMergeCount_.AddEntriesFrom(input, _map_bubbleSpawnMergeCount_codec);
            break;
          }
          case 50: {
            fixedEatId_.AddEntriesFrom(input, _map_fixedEatId_codec);
            break;
          }
          case 58: {
            fixedOutputByItemId_.AddEntriesFrom(input, _map_fixedOutputByItemId_codec);
            break;
          }
          case 64: {
            FreeBubbleUsed = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FreeSpeedUpUsed = input.ReadInt32();
            break;
          }
          case 16: {
            FreeRechargeUsed = input.ReadInt32();
            break;
          }
          case 26: {
            fixedOutputId_.AddEntriesFrom(ref input, _map_fixedOutputId_codec);
            break;
          }
          case 34: {
            categoryShowCount_.AddEntriesFrom(ref input, _map_categoryShowCount_codec);
            break;
          }
          case 42: {
            bubbleSpawnMergeCount_.AddEntriesFrom(ref input, _map_bubbleSpawnMergeCount_codec);
            break;
          }
          case 50: {
            fixedEatId_.AddEntriesFrom(ref input, _map_fixedEatId_codec);
            break;
          }
          case 58: {
            fixedOutputByItemId_.AddEntriesFrom(ref input, _map_fixedOutputByItemId_codec);
            break;
          }
          case 64: {
            FreeBubbleUsed = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MergeBag : pb::IMessage<MergeBag>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MergeBag> _parser = new pb::MessageParser<MergeBag>(() => new MergeBag());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MergeBag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MergeBag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MergeBag(MergeBag other) : this() {
      id_ = other.id_;
      invCapacity_ = other.invCapacity_;
      invItems_ = other.invItems_.Clone();
      redPointItems_ = other.redPointItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MergeBag Clone() {
      return new MergeBag(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "InvCapacity" field.</summary>
    public const int InvCapacityFieldNumber = 2;
    private int invCapacity_;
    /// <summary>
    /// 物品栏容量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvCapacity {
      get { return invCapacity_; }
      set {
        invCapacity_ = value;
      }
    }

    /// <summary>Field number for the "InvItems" field.</summary>
    public const int InvItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_invItems_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> invItems_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 物品栏包含的物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> InvItems {
      get { return invItems_; }
    }

    /// <summary>Field number for the "RedPointItems" field.</summary>
    public const int RedPointItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_redPointItems_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> redPointItems_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 物品栏中需要有红点提示对物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RedPointItems {
      get { return redPointItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MergeBag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MergeBag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (InvCapacity != other.InvCapacity) return false;
      if(!invItems_.Equals(other.invItems_)) return false;
      if(!redPointItems_.Equals(other.redPointItems_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (InvCapacity != 0) hash ^= InvCapacity.GetHashCode();
      hash ^= invItems_.GetHashCode();
      hash ^= redPointItems_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (InvCapacity != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InvCapacity);
      }
      invItems_.WriteTo(output, _repeated_invItems_codec);
      redPointItems_.WriteTo(output, _repeated_redPointItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (InvCapacity != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InvCapacity);
      }
      invItems_.WriteTo(ref output, _repeated_invItems_codec);
      redPointItems_.WriteTo(ref output, _repeated_redPointItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (InvCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InvCapacity);
      }
      size += invItems_.CalculateSize(_repeated_invItems_codec);
      size += redPointItems_.CalculateSize(_repeated_redPointItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MergeBag other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.InvCapacity != 0) {
        InvCapacity = other.InvCapacity;
      }
      invItems_.Add(other.invItems_);
      redPointItems_.Add(other.redPointItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            InvCapacity = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            invItems_.AddEntriesFrom(input, _repeated_invItems_codec);
            break;
          }
          case 34:
          case 32: {
            redPointItems_.AddEntriesFrom(input, _repeated_redPointItems_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            InvCapacity = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            invItems_.AddEntriesFrom(ref input, _repeated_invItems_codec);
            break;
          }
          case 34:
          case 32: {
            redPointItems_.AddEntriesFrom(ref input, _repeated_redPointItems_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RandomParam : pb::IMessage<RandomParam>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RandomParam> _parser = new pb::MessageParser<RandomParam>(() => new RandomParam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RandomParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomParam(RandomParam other) : this() {
      type_ = other.type_;
      intParam_ = other.intParam_.Clone();
      mapParam1_ = other.mapParam1_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomParam Clone() {
      return new RandomParam(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///使用的randommethod
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "IntParam" field.</summary>
    public const int IntParamFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_intParam_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> intParam_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IntParam {
      get { return intParam_; }
    }

    /// <summary>Field number for the "MapParam1" field.</summary>
    public const int MapParam1FieldNumber = 3;
    private static readonly pbc::MapField<int, int>.Codec _map_mapParam1_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 26);
    private readonly pbc::MapField<int, int> mapParam1_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> MapParam1 {
      get { return mapParam1_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RandomParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RandomParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!intParam_.Equals(other.intParam_)) return false;
      if (!MapParam1.Equals(other.MapParam1)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= intParam_.GetHashCode();
      hash ^= MapParam1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      intParam_.WriteTo(output, _repeated_intParam_codec);
      mapParam1_.WriteTo(output, _map_mapParam1_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      intParam_.WriteTo(ref output, _repeated_intParam_codec);
      mapParam1_.WriteTo(ref output, _map_mapParam1_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += intParam_.CalculateSize(_repeated_intParam_codec);
      size += mapParam1_.CalculateSize(_map_mapParam1_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RandomParam other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      intParam_.Add(other.intParam_);
      mapParam1_.Add(other.mapParam1_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            intParam_.AddEntriesFrom(input, _repeated_intParam_codec);
            break;
          }
          case 26: {
            mapParam1_.AddEntriesFrom(input, _map_mapParam1_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            intParam_.AddEntriesFrom(ref input, _repeated_intParam_codec);
            break;
          }
          case 26: {
            mapParam1_.AddEntriesFrom(ref input, _map_mapParam1_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OrderBox : pb::IMessage<OrderBox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderBox> _parser = new pb::MessageParser<OrderBox>(() => new OrderBox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBox(OrderBox other) : this() {
      orderBoxItemTid_ = other.orderBoxItemTid_;
      lifeCounter_ = other.lifeCounter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderBox Clone() {
      return new OrderBox(this);
    }

    /// <summary>Field number for the "OrderBoxItemTid" field.</summary>
    public const int OrderBoxItemTidFieldNumber = 1;
    private int orderBoxItemTid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderBoxItemTid {
      get { return orderBoxItemTid_; }
      set {
        orderBoxItemTid_ = value;
      }
    }

    /// <summary>Field number for the "LifeCounter" field.</summary>
    public const int LifeCounterFieldNumber = 2;
    private int lifeCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LifeCounter {
      get { return lifeCounter_; }
      set {
        lifeCounter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderBoxItemTid != other.OrderBoxItemTid) return false;
      if (LifeCounter != other.LifeCounter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderBoxItemTid != 0) hash ^= OrderBoxItemTid.GetHashCode();
      if (LifeCounter != 0) hash ^= LifeCounter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OrderBoxItemTid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OrderBoxItemTid);
      }
      if (LifeCounter != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LifeCounter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OrderBoxItemTid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OrderBoxItemTid);
      }
      if (LifeCounter != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LifeCounter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderBoxItemTid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderBoxItemTid);
      }
      if (LifeCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LifeCounter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderBox other) {
      if (other == null) {
        return;
      }
      if (other.OrderBoxItemTid != 0) {
        OrderBoxItemTid = other.OrderBoxItemTid;
      }
      if (other.LifeCounter != 0) {
        LifeCounter = other.LifeCounter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OrderBoxItemTid = input.ReadInt32();
            break;
          }
          case 16: {
            LifeCounter = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OrderBoxItemTid = input.ReadInt32();
            break;
          }
          case 16: {
            LifeCounter = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JumpCD : pb::IMessage<JumpCD>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JumpCD> _parser = new pb::MessageParser<JumpCD>(() => new JumpCD());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JumpCD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JumpCD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JumpCD(JumpCD other) : this() {
      jumpCDItemId_ = other.jumpCDItemId_;
      lifeCounter_ = other.lifeCounter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JumpCD Clone() {
      return new JumpCD(this);
    }

    /// <summary>Field number for the "JumpCDItemId" field.</summary>
    public const int JumpCDItemIdFieldNumber = 1;
    private int jumpCDItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JumpCDItemId {
      get { return jumpCDItemId_; }
      set {
        jumpCDItemId_ = value;
      }
    }

    /// <summary>Field number for the "LifeCounter" field.</summary>
    public const int LifeCounterFieldNumber = 2;
    private int lifeCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LifeCounter {
      get { return lifeCounter_; }
      set {
        lifeCounter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JumpCD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JumpCD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JumpCDItemId != other.JumpCDItemId) return false;
      if (LifeCounter != other.LifeCounter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JumpCDItemId != 0) hash ^= JumpCDItemId.GetHashCode();
      if (LifeCounter != 0) hash ^= LifeCounter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (JumpCDItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(JumpCDItemId);
      }
      if (LifeCounter != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LifeCounter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (JumpCDItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(JumpCDItemId);
      }
      if (LifeCounter != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LifeCounter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JumpCDItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JumpCDItemId);
      }
      if (LifeCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LifeCounter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JumpCD other) {
      if (other == null) {
        return;
      }
      if (other.JumpCDItemId != 0) {
        JumpCDItemId = other.JumpCDItemId;
      }
      if (other.LifeCounter != 0) {
        LifeCounter = other.LifeCounter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            JumpCDItemId = input.ReadInt32();
            break;
          }
          case 16: {
            LifeCounter = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            JumpCDItemId = input.ReadInt32();
            break;
          }
          case 16: {
            LifeCounter = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Merge : pb::IMessage<Merge>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Merge> _parser = new pb::MessageParser<Merge>(() => new Merge());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Merge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Merge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Merge(Merge other) : this() {
      waitChest_ = other.waitChest_;
      waitChestStart_ = other.waitChestStart_;
      lastItemId_ = other.lastItemId_;
      rewardList_ = other.rewardList_.Clone();
      invCapacity_ = other.invCapacity_;
      invItems_ = other.invItems_.Clone();
      items_ = other.items_.Clone();
      lastActiveTime_ = other.lastActiveTime_;
      boardId_ = other.boardId_;
      rewardListUnreadCount_ = other.rewardListUnreadCount_;
      clouds_ = other.clouds_;
      configVersion_ = other.configVersion_;
      disableComs_ = other.disableComs_;
      randomOutputForId_ = other.randomOutputForId_.Clone();
      inventory_ = other.inventory_.Clone();
      randomParamForId_ = other.randomParamForId_.Clone();
      rewardListItemId_ = other.rewardListItemId_.Clone();
      orderBox_ = other.orderBox_ != null ? other.orderBox_.Clone() : null;
      jumpCD_ = other.jumpCD_ != null ? other.jumpCD_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Merge Clone() {
      return new Merge(this);
    }

    /// <summary>Field number for the "WaitChest" field.</summary>
    public const int WaitChestFieldNumber = 3;
    private int waitChest_;
    /// <summary>
    /// 等待中的宝箱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitChest {
      get { return waitChest_; }
      set {
        waitChest_ = value;
      }
    }

    /// <summary>Field number for the "WaitChestStart" field.</summary>
    public const int WaitChestStartFieldNumber = 4;
    private long waitChestStart_;
    /// <summary>
    /// 等待中的宝箱的开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WaitChestStart {
      get { return waitChestStart_; }
      set {
        waitChestStart_ = value;
      }
    }

    /// <summary>Field number for the "LastItemId" field.</summary>
    public const int LastItemIdFieldNumber = 5;
    private int lastItemId_;
    /// <summary>
    /// 物品id到了多少
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastItemId {
      get { return lastItemId_; }
      set {
        lastItemId_ = value;
      }
    }

    /// <summary>Field number for the "RewardList" field.</summary>
    public const int RewardListFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_rewardList_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> rewardList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 奖励列表(每次传全量数据)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RewardList {
      get { return rewardList_; }
    }

    /// <summary>Field number for the "InvCapacity" field.</summary>
    public const int InvCapacityFieldNumber = 9;
    private int invCapacity_;
    /// <summary>
    /// 物品栏容量                    //26.0以后作废
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvCapacity {
      get { return invCapacity_; }
      set {
        invCapacity_ = value;
      }
    }

    /// <summary>Field number for the "InvItems" field.</summary>
    public const int InvItemsFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_invItems_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> invItems_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 物品栏包含的物品id     //26.0以后作废
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> InvItems {
      get { return invItems_; }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::fat.gamekitdata.MergeItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(90, global::fat.gamekitdata.MergeItem.Parser);
    private readonly pbc::RepeatedField<global::fat.gamekitdata.MergeItem> items_ = new pbc::RepeatedField<global::fat.gamekitdata.MergeItem>();
    /// <summary>
    /// 所有物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.gamekitdata.MergeItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "LastActiveTime" field.</summary>
    public const int LastActiveTimeFieldNumber = 16;
    private long lastActiveTime_;
    /// <summary>
    /// 上次活跃时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastActiveTime {
      get { return lastActiveTime_; }
      set {
        lastActiveTime_ = value;
      }
    }

    /// <summary>Field number for the "BoardId" field.</summary>
    public const int BoardIdFieldNumber = 18;
    private int boardId_;
    /// <summary>
    /// 当前所在的盘面id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardId {
      get { return boardId_; }
      set {
        boardId_ = value;
      }
    }

    /// <summary>Field number for the "RewardListUnreadCount" field.</summary>
    public const int RewardListUnreadCountFieldNumber = 20;
    private int rewardListUnreadCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardListUnreadCount {
      get { return rewardListUnreadCount_; }
      set {
        rewardListUnreadCount_ = value;
      }
    }

    /// <summary>Field number for the "Clouds" field.</summary>
    public const int CloudsFieldNumber = 21;
    private uint clouds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Clouds {
      get { return clouds_; }
      set {
        clouds_ = value;
      }
    }

    /// <summary>Field number for the "ConfigVersion" field.</summary>
    public const int ConfigVersionFieldNumber = 22;
    private int configVersion_;
    /// <summary>
    /// 棋盘初始盘面对应的配置版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigVersion {
      get { return configVersion_; }
      set {
        configVersion_ = value;
      }
    }

    /// <summary>Field number for the "DisableComs" field.</summary>
    public const int DisableComsFieldNumber = 23;
    private ulong disableComs_;
    /// <summary>
    ///禁止的组件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DisableComs {
      get { return disableComs_; }
      set {
        disableComs_ = value;
      }
    }

    /// <summary>Field number for the "RandomOutputForId" field.</summary>
    public const int RandomOutputForIdFieldNumber = 24;
    private static readonly pbc::MapField<int, global::fat.gamekitdata.RandomOutputParam>.Codec _map_randomOutputForId_codec
        = new pbc::MapField<int, global::fat.gamekitdata.RandomOutputParam>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.gamekitdata.RandomOutputParam.Parser), 194);
    private readonly pbc::MapField<int, global::fat.gamekitdata.RandomOutputParam> randomOutputForId_ = new pbc::MapField<int, global::fat.gamekitdata.RandomOutputParam>();
    /// <summary>
    ///以id为单位的随机产出数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.gamekitdata.RandomOutputParam> RandomOutputForId {
      get { return randomOutputForId_; }
    }

    /// <summary>Field number for the "Inventory" field.</summary>
    public const int InventoryFieldNumber = 25;
    private static readonly pb::FieldCodec<global::fat.gamekitdata.MergeBag> _repeated_inventory_codec
        = pb::FieldCodec.ForMessage(202, global::fat.gamekitdata.MergeBag.Parser);
    private readonly pbc::RepeatedField<global::fat.gamekitdata.MergeBag> inventory_ = new pbc::RepeatedField<global::fat.gamekitdata.MergeBag>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.gamekitdata.MergeBag> Inventory {
      get { return inventory_; }
    }

    /// <summary>Field number for the "RandomParamForId" field.</summary>
    public const int RandomParamForIdFieldNumber = 26;
    private static readonly pbc::MapField<int, global::fat.gamekitdata.RandomParam>.Codec _map_randomParamForId_codec
        = new pbc::MapField<int, global::fat.gamekitdata.RandomParam>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.gamekitdata.RandomParam.Parser), 210);
    private readonly pbc::MapField<int, global::fat.gamekitdata.RandomParam> randomParamForId_ = new pbc::MapField<int, global::fat.gamekitdata.RandomParam>();
    /// <summary>
    ///以id为单位的随机产出数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.gamekitdata.RandomParam> RandomParamForId {
      get { return randomParamForId_; }
    }

    /// <summary>Field number for the "RewardListItemId" field.</summary>
    public const int RewardListItemIdFieldNumber = 27;
    private static readonly pb::FieldCodec<int> _repeated_rewardListItemId_codec
        = pb::FieldCodec.ForInt32(218);
    private readonly pbc::RepeatedField<int> rewardListItemId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///代替上面的RewardList
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RewardListItemId {
      get { return rewardListItemId_; }
    }

    /// <summary>Field number for the "OrderBox" field.</summary>
    public const int OrderBoxFieldNumber = 28;
    private global::fat.gamekitdata.OrderBox orderBox_;
    /// <summary>
    /// 订单礼盒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.OrderBox OrderBox {
      get { return orderBox_; }
      set {
        orderBox_ = value;
      }
    }

    /// <summary>Field number for the "JumpCD" field.</summary>
    public const int JumpCDFieldNumber = 29;
    private global::fat.gamekitdata.JumpCD jumpCD_;
    /// <summary>
    /// 跳过冷却
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.JumpCD JumpCD {
      get { return jumpCD_; }
      set {
        jumpCD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Merge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Merge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WaitChest != other.WaitChest) return false;
      if (WaitChestStart != other.WaitChestStart) return false;
      if (LastItemId != other.LastItemId) return false;
      if(!rewardList_.Equals(other.rewardList_)) return false;
      if (InvCapacity != other.InvCapacity) return false;
      if(!invItems_.Equals(other.invItems_)) return false;
      if(!items_.Equals(other.items_)) return false;
      if (LastActiveTime != other.LastActiveTime) return false;
      if (BoardId != other.BoardId) return false;
      if (RewardListUnreadCount != other.RewardListUnreadCount) return false;
      if (Clouds != other.Clouds) return false;
      if (ConfigVersion != other.ConfigVersion) return false;
      if (DisableComs != other.DisableComs) return false;
      if (!RandomOutputForId.Equals(other.RandomOutputForId)) return false;
      if(!inventory_.Equals(other.inventory_)) return false;
      if (!RandomParamForId.Equals(other.RandomParamForId)) return false;
      if(!rewardListItemId_.Equals(other.rewardListItemId_)) return false;
      if (!object.Equals(OrderBox, other.OrderBox)) return false;
      if (!object.Equals(JumpCD, other.JumpCD)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WaitChest != 0) hash ^= WaitChest.GetHashCode();
      if (WaitChestStart != 0L) hash ^= WaitChestStart.GetHashCode();
      if (LastItemId != 0) hash ^= LastItemId.GetHashCode();
      hash ^= rewardList_.GetHashCode();
      if (InvCapacity != 0) hash ^= InvCapacity.GetHashCode();
      hash ^= invItems_.GetHashCode();
      hash ^= items_.GetHashCode();
      if (LastActiveTime != 0L) hash ^= LastActiveTime.GetHashCode();
      if (BoardId != 0) hash ^= BoardId.GetHashCode();
      if (RewardListUnreadCount != 0) hash ^= RewardListUnreadCount.GetHashCode();
      if (Clouds != 0) hash ^= Clouds.GetHashCode();
      if (ConfigVersion != 0) hash ^= ConfigVersion.GetHashCode();
      if (DisableComs != 0UL) hash ^= DisableComs.GetHashCode();
      hash ^= RandomOutputForId.GetHashCode();
      hash ^= inventory_.GetHashCode();
      hash ^= RandomParamForId.GetHashCode();
      hash ^= rewardListItemId_.GetHashCode();
      if (orderBox_ != null) hash ^= OrderBox.GetHashCode();
      if (jumpCD_ != null) hash ^= JumpCD.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WaitChest != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WaitChest);
      }
      if (WaitChestStart != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(WaitChestStart);
      }
      if (LastItemId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LastItemId);
      }
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (InvCapacity != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(InvCapacity);
      }
      invItems_.WriteTo(output, _repeated_invItems_codec);
      items_.WriteTo(output, _repeated_items_codec);
      if (LastActiveTime != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(LastActiveTime);
      }
      if (BoardId != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(BoardId);
      }
      if (RewardListUnreadCount != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(RewardListUnreadCount);
      }
      if (Clouds != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Clouds);
      }
      if (ConfigVersion != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ConfigVersion);
      }
      if (DisableComs != 0UL) {
        output.WriteRawTag(184, 1);
        output.WriteUInt64(DisableComs);
      }
      randomOutputForId_.WriteTo(output, _map_randomOutputForId_codec);
      inventory_.WriteTo(output, _repeated_inventory_codec);
      randomParamForId_.WriteTo(output, _map_randomParamForId_codec);
      rewardListItemId_.WriteTo(output, _repeated_rewardListItemId_codec);
      if (orderBox_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(OrderBox);
      }
      if (jumpCD_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(JumpCD);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WaitChest != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WaitChest);
      }
      if (WaitChestStart != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(WaitChestStart);
      }
      if (LastItemId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LastItemId);
      }
      rewardList_.WriteTo(ref output, _repeated_rewardList_codec);
      if (InvCapacity != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(InvCapacity);
      }
      invItems_.WriteTo(ref output, _repeated_invItems_codec);
      items_.WriteTo(ref output, _repeated_items_codec);
      if (LastActiveTime != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(LastActiveTime);
      }
      if (BoardId != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(BoardId);
      }
      if (RewardListUnreadCount != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(RewardListUnreadCount);
      }
      if (Clouds != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Clouds);
      }
      if (ConfigVersion != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ConfigVersion);
      }
      if (DisableComs != 0UL) {
        output.WriteRawTag(184, 1);
        output.WriteUInt64(DisableComs);
      }
      randomOutputForId_.WriteTo(ref output, _map_randomOutputForId_codec);
      inventory_.WriteTo(ref output, _repeated_inventory_codec);
      randomParamForId_.WriteTo(ref output, _map_randomParamForId_codec);
      rewardListItemId_.WriteTo(ref output, _repeated_rewardListItemId_codec);
      if (orderBox_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(OrderBox);
      }
      if (jumpCD_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(JumpCD);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WaitChest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitChest);
      }
      if (WaitChestStart != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WaitChestStart);
      }
      if (LastItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastItemId);
      }
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (InvCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InvCapacity);
      }
      size += invItems_.CalculateSize(_repeated_invItems_codec);
      size += items_.CalculateSize(_repeated_items_codec);
      if (LastActiveTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastActiveTime);
      }
      if (BoardId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoardId);
      }
      if (RewardListUnreadCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RewardListUnreadCount);
      }
      if (Clouds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Clouds);
      }
      if (ConfigVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ConfigVersion);
      }
      if (DisableComs != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(DisableComs);
      }
      size += randomOutputForId_.CalculateSize(_map_randomOutputForId_codec);
      size += inventory_.CalculateSize(_repeated_inventory_codec);
      size += randomParamForId_.CalculateSize(_map_randomParamForId_codec);
      size += rewardListItemId_.CalculateSize(_repeated_rewardListItemId_codec);
      if (orderBox_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderBox);
      }
      if (jumpCD_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(JumpCD);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Merge other) {
      if (other == null) {
        return;
      }
      if (other.WaitChest != 0) {
        WaitChest = other.WaitChest;
      }
      if (other.WaitChestStart != 0L) {
        WaitChestStart = other.WaitChestStart;
      }
      if (other.LastItemId != 0) {
        LastItemId = other.LastItemId;
      }
      rewardList_.Add(other.rewardList_);
      if (other.InvCapacity != 0) {
        InvCapacity = other.InvCapacity;
      }
      invItems_.Add(other.invItems_);
      items_.Add(other.items_);
      if (other.LastActiveTime != 0L) {
        LastActiveTime = other.LastActiveTime;
      }
      if (other.BoardId != 0) {
        BoardId = other.BoardId;
      }
      if (other.RewardListUnreadCount != 0) {
        RewardListUnreadCount = other.RewardListUnreadCount;
      }
      if (other.Clouds != 0) {
        Clouds = other.Clouds;
      }
      if (other.ConfigVersion != 0) {
        ConfigVersion = other.ConfigVersion;
      }
      if (other.DisableComs != 0UL) {
        DisableComs = other.DisableComs;
      }
      randomOutputForId_.Add(other.randomOutputForId_);
      inventory_.Add(other.inventory_);
      randomParamForId_.Add(other.randomParamForId_);
      rewardListItemId_.Add(other.rewardListItemId_);
      if (other.orderBox_ != null) {
        if (orderBox_ == null) {
          OrderBox = new global::fat.gamekitdata.OrderBox();
        }
        OrderBox.MergeFrom(other.OrderBox);
      }
      if (other.jumpCD_ != null) {
        if (jumpCD_ == null) {
          JumpCD = new global::fat.gamekitdata.JumpCD();
        }
        JumpCD.MergeFrom(other.JumpCD);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 24: {
            WaitChest = input.ReadInt32();
            break;
          }
          case 32: {
            WaitChestStart = input.ReadInt64();
            break;
          }
          case 40: {
            LastItemId = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
          case 72: {
            InvCapacity = input.ReadInt32();
            break;
          }
          case 82:
          case 80: {
            invItems_.AddEntriesFrom(input, _repeated_invItems_codec);
            break;
          }
          case 90: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 128: {
            LastActiveTime = input.ReadInt64();
            break;
          }
          case 144: {
            BoardId = input.ReadInt32();
            break;
          }
          case 160: {
            RewardListUnreadCount = input.ReadInt32();
            break;
          }
          case 168: {
            Clouds = input.ReadUInt32();
            break;
          }
          case 176: {
            ConfigVersion = input.ReadInt32();
            break;
          }
          case 184: {
            DisableComs = input.ReadUInt64();
            break;
          }
          case 194: {
            randomOutputForId_.AddEntriesFrom(input, _map_randomOutputForId_codec);
            break;
          }
          case 202: {
            inventory_.AddEntriesFrom(input, _repeated_inventory_codec);
            break;
          }
          case 210: {
            randomParamForId_.AddEntriesFrom(input, _map_randomParamForId_codec);
            break;
          }
          case 218:
          case 216: {
            rewardListItemId_.AddEntriesFrom(input, _repeated_rewardListItemId_codec);
            break;
          }
          case 226: {
            if (orderBox_ == null) {
              OrderBox = new global::fat.gamekitdata.OrderBox();
            }
            input.ReadMessage(OrderBox);
            break;
          }
          case 234: {
            if (jumpCD_ == null) {
              JumpCD = new global::fat.gamekitdata.JumpCD();
            }
            input.ReadMessage(JumpCD);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 24: {
            WaitChest = input.ReadInt32();
            break;
          }
          case 32: {
            WaitChestStart = input.ReadInt64();
            break;
          }
          case 40: {
            LastItemId = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            rewardList_.AddEntriesFrom(ref input, _repeated_rewardList_codec);
            break;
          }
          case 72: {
            InvCapacity = input.ReadInt32();
            break;
          }
          case 82:
          case 80: {
            invItems_.AddEntriesFrom(ref input, _repeated_invItems_codec);
            break;
          }
          case 90: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
          case 128: {
            LastActiveTime = input.ReadInt64();
            break;
          }
          case 144: {
            BoardId = input.ReadInt32();
            break;
          }
          case 160: {
            RewardListUnreadCount = input.ReadInt32();
            break;
          }
          case 168: {
            Clouds = input.ReadUInt32();
            break;
          }
          case 176: {
            ConfigVersion = input.ReadInt32();
            break;
          }
          case 184: {
            DisableComs = input.ReadUInt64();
            break;
          }
          case 194: {
            randomOutputForId_.AddEntriesFrom(ref input, _map_randomOutputForId_codec);
            break;
          }
          case 202: {
            inventory_.AddEntriesFrom(ref input, _repeated_inventory_codec);
            break;
          }
          case 210: {
            randomParamForId_.AddEntriesFrom(ref input, _map_randomParamForId_codec);
            break;
          }
          case 218:
          case 216: {
            rewardListItemId_.AddEntriesFrom(ref input, _repeated_rewardListItemId_codec);
            break;
          }
          case 226: {
            if (orderBox_ == null) {
              OrderBox = new global::fat.gamekitdata.OrderBox();
            }
            input.ReadMessage(OrderBox);
            break;
          }
          case 234: {
            if (jumpCD_ == null) {
              JumpCD = new global::fat.gamekitdata.JumpCD();
            }
            input.ReadMessage(JumpCD);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Order : pb::IMessage<Order>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Order> _parser = new pb::MessageParser<Order>(() => new Order());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Order> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order(Order other) : this() {
      npc_ = other.npc_;
      pos_ = other.pos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Order Clone() {
      return new Order(this);
    }

    /// <summary>Field number for the "Npc" field.</summary>
    public const int NpcFieldNumber = 1;
    private int npc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Npc {
      get { return npc_; }
      set {
        npc_ = value;
      }
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Order);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Order other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Npc != other.Npc) return false;
      if (Pos != other.Pos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Npc != 0) hash ^= Npc.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Npc != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Npc);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Npc != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Npc);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Npc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Npc);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Order other) {
      if (other == null) {
        return;
      }
      if (other.Npc != 0) {
        Npc = other.Npc;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Npc = input.ReadInt32();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Npc = input.ReadInt32();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MergeDel : pb::IMessage<MergeDel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MergeDel> _parser = new pb::MessageParser<MergeDel>(() => new MergeDel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MergeDel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MergeDel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MergeDel(MergeDel other) : this() {
      invItems_ = other.invItems_.Clone();
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MergeDel Clone() {
      return new MergeDel(this);
    }

    /// <summary>Field number for the "InvItems" field.</summary>
    public const int InvItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_invItems_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> invItems_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> InvItems {
      get { return invItems_; }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_items_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> items_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MergeDel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MergeDel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!invItems_.Equals(other.invItems_)) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= invItems_.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      invItems_.WriteTo(output, _repeated_invItems_codec);
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      invItems_.WriteTo(ref output, _repeated_invItems_codec);
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += invItems_.CalculateSize(_repeated_invItems_codec);
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MergeDel other) {
      if (other == null) {
        return;
      }
      invItems_.Add(other.invItems_);
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            invItems_.AddEntriesFrom(input, _repeated_invItems_codec);
            break;
          }
          case 18:
          case 16: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            invItems_.AddEntriesFrom(ref input, _repeated_invItems_codec);
            break;
          }
          case 18:
          case 16: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComDying : pb::IMessage<ComDying>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComDying> _parser = new pb::MessageParser<ComDying>(() => new ComDying());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComDying> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComDying() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComDying(ComDying other) : this() {
      life_ = other.life_;
      start_ = other.start_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComDying Clone() {
      return new ComDying(this);
    }

    /// <summary>Field number for the "Life" field.</summary>
    public const int LifeFieldNumber = 1;
    private int life_;
    /// <summary>
    /// 还剩多少时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Life {
      get { return life_; }
      set {
        life_ = value;
      }
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 2;
    private long start_;
    /// <summary>
    /// 开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComDying);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComDying other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Life != other.Life) return false;
      if (Start != other.Start) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Life != 0) hash ^= Life.GetHashCode();
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Life != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Life);
      }
      if (Start != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Start);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Life != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Life);
      }
      if (Start != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Start);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Life != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Life);
      }
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComDying other) {
      if (other == null) {
        return;
      }
      if (other.Life != 0) {
        Life = other.Life;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Life = input.ReadInt32();
            break;
          }
          case 16: {
            Start = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Life = input.ReadInt32();
            break;
          }
          case 16: {
            Start = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComClickSource : pb::IMessage<ComClickSource>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComClickSource> _parser = new pb::MessageParser<ComClickSource>(() => new ComClickSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComClickSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComClickSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComClickSource(ComClickSource other) : this() {
      reviveCounter_ = other.reviveCounter_;
      reviveStart_ = other.reviveStart_;
      outputCounter_ = other.outputCounter_;
      outputStart_ = other.outputStart_;
      itemInRecharge_ = other.itemInRecharge_;
      item_ = other.item_;
      noCDCounter_ = other.noCDCounter_;
      randomSeed_ = other.randomSeed_;
      randomNextIdx_ = other.randomNextIdx_;
      outputCount_ = other.outputCount_;
      isFirstRevive_ = other.isFirstRevive_;
      boostItemCount_ = other.boostItemCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComClickSource Clone() {
      return new ComClickSource(this);
    }

    /// <summary>Field number for the "ReviveCounter" field.</summary>
    public const int ReviveCounterFieldNumber = 1;
    private int reviveCounter_;
    /// <summary>
    /// 剩多少时间重生
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReviveCounter {
      get { return reviveCounter_; }
      set {
        reviveCounter_ = value;
      }
    }

    /// <summary>Field number for the "ReviveStart" field.</summary>
    public const int ReviveStartFieldNumber = 2;
    private long reviveStart_;
    /// <summary>
    /// 重生开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReviveStart {
      get { return reviveStart_; }
      set {
        reviveStart_ = value;
      }
    }

    /// <summary>Field number for the "OutputCounter" field.</summary>
    public const int OutputCounterFieldNumber = 3;
    private int outputCounter_;
    /// <summary>
    /// 剩多少时间产出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutputCounter {
      get { return outputCounter_; }
      set {
        outputCounter_ = value;
      }
    }

    /// <summary>Field number for the "OutputStart" field.</summary>
    public const int OutputStartFieldNumber = 4;
    private long outputStart_;
    /// <summary>
    /// 产出开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OutputStart {
      get { return outputStart_; }
      set {
        outputStart_ = value;
      }
    }

    /// <summary>Field number for the "ItemInRecharge" field.</summary>
    public const int ItemInRechargeFieldNumber = 5;
    private int itemInRecharge_;
    /// <summary>
    /// 有几个物品正在产出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemInRecharge {
      get { return itemInRecharge_; }
      set {
        itemInRecharge_ = value;
      }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 6;
    private int item_;
    /// <summary>
    /// 有几个物品已经产出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "NoCDCounter" field.</summary>
    public const int NoCDCounterFieldNumber = 7;
    private int noCDCounter_;
    /// <summary>
    /// 代表无cd结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoCDCounter {
      get { return noCDCounter_; }
      set {
        noCDCounter_ = value;
      }
    }

    /// <summary>Field number for the "RandomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 8;
    private int randomSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "RandomNextIdx" field.</summary>
    public const int RandomNextIdxFieldNumber = 9;
    private int randomNextIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomNextIdx {
      get { return randomNextIdx_; }
      set {
        randomNextIdx_ = value;
      }
    }

    /// <summary>Field number for the "OutputCount" field.</summary>
    public const int OutputCountFieldNumber = 10;
    private int outputCount_;
    /// <summary>
    ///一共生产了多少（只有会死的生成器才有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutputCount {
      get { return outputCount_; }
      set {
        outputCount_ = value;
      }
    }

    /// <summary>Field number for the "IsFirstRevive" field.</summary>
    public const int IsFirstReviveFieldNumber = 11;
    private bool isFirstRevive_;
    /// <summary>
    ///是否在进行第一次revive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFirstRevive {
      get { return isFirstRevive_; }
      set {
        isFirstRevive_ = value;
      }
    }

    /// <summary>Field number for the "BoostItemCount" field.</summary>
    public const int BoostItemCountFieldNumber = 12;
    private int boostItemCount_;
    /// <summary>
    /// 灯泡/特殊道具/产出+1可使用次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoostItemCount {
      get { return boostItemCount_; }
      set {
        boostItemCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComClickSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComClickSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReviveCounter != other.ReviveCounter) return false;
      if (ReviveStart != other.ReviveStart) return false;
      if (OutputCounter != other.OutputCounter) return false;
      if (OutputStart != other.OutputStart) return false;
      if (ItemInRecharge != other.ItemInRecharge) return false;
      if (Item != other.Item) return false;
      if (NoCDCounter != other.NoCDCounter) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if (RandomNextIdx != other.RandomNextIdx) return false;
      if (OutputCount != other.OutputCount) return false;
      if (IsFirstRevive != other.IsFirstRevive) return false;
      if (BoostItemCount != other.BoostItemCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReviveCounter != 0) hash ^= ReviveCounter.GetHashCode();
      if (ReviveStart != 0L) hash ^= ReviveStart.GetHashCode();
      if (OutputCounter != 0) hash ^= OutputCounter.GetHashCode();
      if (OutputStart != 0L) hash ^= OutputStart.GetHashCode();
      if (ItemInRecharge != 0) hash ^= ItemInRecharge.GetHashCode();
      if (Item != 0) hash ^= Item.GetHashCode();
      if (NoCDCounter != 0) hash ^= NoCDCounter.GetHashCode();
      if (RandomSeed != 0) hash ^= RandomSeed.GetHashCode();
      if (RandomNextIdx != 0) hash ^= RandomNextIdx.GetHashCode();
      if (OutputCount != 0) hash ^= OutputCount.GetHashCode();
      if (IsFirstRevive != false) hash ^= IsFirstRevive.GetHashCode();
      if (BoostItemCount != 0) hash ^= BoostItemCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ReviveCounter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReviveCounter);
      }
      if (ReviveStart != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ReviveStart);
      }
      if (OutputCounter != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OutputCounter);
      }
      if (OutputStart != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(OutputStart);
      }
      if (ItemInRecharge != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ItemInRecharge);
      }
      if (Item != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Item);
      }
      if (NoCDCounter != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NoCDCounter);
      }
      if (RandomSeed != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RandomSeed);
      }
      if (RandomNextIdx != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RandomNextIdx);
      }
      if (OutputCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(OutputCount);
      }
      if (IsFirstRevive != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsFirstRevive);
      }
      if (BoostItemCount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BoostItemCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ReviveCounter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReviveCounter);
      }
      if (ReviveStart != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ReviveStart);
      }
      if (OutputCounter != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OutputCounter);
      }
      if (OutputStart != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(OutputStart);
      }
      if (ItemInRecharge != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ItemInRecharge);
      }
      if (Item != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Item);
      }
      if (NoCDCounter != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NoCDCounter);
      }
      if (RandomSeed != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RandomSeed);
      }
      if (RandomNextIdx != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RandomNextIdx);
      }
      if (OutputCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(OutputCount);
      }
      if (IsFirstRevive != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsFirstRevive);
      }
      if (BoostItemCount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BoostItemCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReviveCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReviveCounter);
      }
      if (ReviveStart != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReviveStart);
      }
      if (OutputCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputCounter);
      }
      if (OutputStart != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OutputStart);
      }
      if (ItemInRecharge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemInRecharge);
      }
      if (Item != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Item);
      }
      if (NoCDCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NoCDCounter);
      }
      if (RandomSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomSeed);
      }
      if (RandomNextIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomNextIdx);
      }
      if (OutputCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputCount);
      }
      if (IsFirstRevive != false) {
        size += 1 + 1;
      }
      if (BoostItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoostItemCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComClickSource other) {
      if (other == null) {
        return;
      }
      if (other.ReviveCounter != 0) {
        ReviveCounter = other.ReviveCounter;
      }
      if (other.ReviveStart != 0L) {
        ReviveStart = other.ReviveStart;
      }
      if (other.OutputCounter != 0) {
        OutputCounter = other.OutputCounter;
      }
      if (other.OutputStart != 0L) {
        OutputStart = other.OutputStart;
      }
      if (other.ItemInRecharge != 0) {
        ItemInRecharge = other.ItemInRecharge;
      }
      if (other.Item != 0) {
        Item = other.Item;
      }
      if (other.NoCDCounter != 0) {
        NoCDCounter = other.NoCDCounter;
      }
      if (other.RandomSeed != 0) {
        RandomSeed = other.RandomSeed;
      }
      if (other.RandomNextIdx != 0) {
        RandomNextIdx = other.RandomNextIdx;
      }
      if (other.OutputCount != 0) {
        OutputCount = other.OutputCount;
      }
      if (other.IsFirstRevive != false) {
        IsFirstRevive = other.IsFirstRevive;
      }
      if (other.BoostItemCount != 0) {
        BoostItemCount = other.BoostItemCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReviveCounter = input.ReadInt32();
            break;
          }
          case 16: {
            ReviveStart = input.ReadInt64();
            break;
          }
          case 24: {
            OutputCounter = input.ReadInt32();
            break;
          }
          case 32: {
            OutputStart = input.ReadInt64();
            break;
          }
          case 40: {
            ItemInRecharge = input.ReadInt32();
            break;
          }
          case 48: {
            Item = input.ReadInt32();
            break;
          }
          case 56: {
            NoCDCounter = input.ReadInt32();
            break;
          }
          case 64: {
            RandomSeed = input.ReadInt32();
            break;
          }
          case 72: {
            RandomNextIdx = input.ReadInt32();
            break;
          }
          case 80: {
            OutputCount = input.ReadInt32();
            break;
          }
          case 88: {
            IsFirstRevive = input.ReadBool();
            break;
          }
          case 96: {
            BoostItemCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ReviveCounter = input.ReadInt32();
            break;
          }
          case 16: {
            ReviveStart = input.ReadInt64();
            break;
          }
          case 24: {
            OutputCounter = input.ReadInt32();
            break;
          }
          case 32: {
            OutputStart = input.ReadInt64();
            break;
          }
          case 40: {
            ItemInRecharge = input.ReadInt32();
            break;
          }
          case 48: {
            Item = input.ReadInt32();
            break;
          }
          case 56: {
            NoCDCounter = input.ReadInt32();
            break;
          }
          case 64: {
            RandomSeed = input.ReadInt32();
            break;
          }
          case 72: {
            RandomNextIdx = input.ReadInt32();
            break;
          }
          case 80: {
            OutputCount = input.ReadInt32();
            break;
          }
          case 88: {
            IsFirstRevive = input.ReadBool();
            break;
          }
          case 96: {
            BoostItemCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComChest : pb::IMessage<ComChest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComChest> _parser = new pb::MessageParser<ComChest>(() => new ComChest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComChest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComChest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComChest(ComChest other) : this() {
      opened_ = other.opened_;
      usedCount_ = other.usedCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComChest Clone() {
      return new ComChest(this);
    }

    /// <summary>Field number for the "Opened" field.</summary>
    public const int OpenedFieldNumber = 1;
    private bool opened_;
    /// <summary>
    /// 是否打开
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Opened {
      get { return opened_; }
      set {
        opened_ = value;
      }
    }

    /// <summary>Field number for the "UsedCount" field.</summary>
    public const int UsedCountFieldNumber = 2;
    private int usedCount_;
    /// <summary>
    /// 点了几次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsedCount {
      get { return usedCount_; }
      set {
        usedCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComChest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComChest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Opened != other.Opened) return false;
      if (UsedCount != other.UsedCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Opened != false) hash ^= Opened.GetHashCode();
      if (UsedCount != 0) hash ^= UsedCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Opened != false) {
        output.WriteRawTag(8);
        output.WriteBool(Opened);
      }
      if (UsedCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UsedCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Opened != false) {
        output.WriteRawTag(8);
        output.WriteBool(Opened);
      }
      if (UsedCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UsedCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Opened != false) {
        size += 1 + 1;
      }
      if (UsedCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsedCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComChest other) {
      if (other == null) {
        return;
      }
      if (other.Opened != false) {
        Opened = other.Opened;
      }
      if (other.UsedCount != 0) {
        UsedCount = other.UsedCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Opened = input.ReadBool();
            break;
          }
          case 16: {
            UsedCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Opened = input.ReadBool();
            break;
          }
          case 16: {
            UsedCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComBubble : pb::IMessage<ComBubble>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComBubble> _parser = new pb::MessageParser<ComBubble>(() => new ComBubble());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComBubble> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComBubble() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComBubble(ComBubble other) : this() {
      life_ = other.life_;
      start_ = other.start_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComBubble Clone() {
      return new ComBubble(this);
    }

    /// <summary>Field number for the "Life" field.</summary>
    public const int LifeFieldNumber = 1;
    private int life_;
    /// <summary>
    /// 还剩多少时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Life {
      get { return life_; }
      set {
        life_ = value;
      }
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 2;
    private long start_;
    /// <summary>
    /// 开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComBubble);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComBubble other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Life != other.Life) return false;
      if (Start != other.Start) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Life != 0) hash ^= Life.GetHashCode();
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Life != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Life);
      }
      if (Start != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Start);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Life != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Life);
      }
      if (Start != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Start);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Life != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Life);
      }
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComBubble other) {
      if (other == null) {
        return;
      }
      if (other.Life != 0) {
        Life = other.Life;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Life = input.ReadInt32();
            break;
          }
          case 16: {
            Start = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Life = input.ReadInt32();
            break;
          }
          case 16: {
            Start = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComAutoSource : pb::IMessage<ComAutoSource>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComAutoSource> _parser = new pb::MessageParser<ComAutoSource>(() => new ComAutoSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComAutoSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComAutoSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComAutoSource(ComAutoSource other) : this() {
      outputCounter_ = other.outputCounter_;
      start_ = other.start_;
      itemCount_ = other.itemCount_;
      totalOutput_ = other.totalOutput_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComAutoSource Clone() {
      return new ComAutoSource(this);
    }

    /// <summary>Field number for the "OutputCounter" field.</summary>
    public const int OutputCounterFieldNumber = 1;
    private int outputCounter_;
    /// <summary>
    /// 剩多少时间产出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutputCounter {
      get { return outputCounter_; }
      set {
        outputCounter_ = value;
      }
    }

    /// <summary>Field number for the "Start" field.</summary>
    public const int StartFieldNumber = 2;
    private long start_;
    /// <summary>
    /// 开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "ItemCount" field.</summary>
    public const int ItemCountFieldNumber = 3;
    private int itemCount_;
    /// <summary>
    /// 有几个物品已经产出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    /// <summary>Field number for the "TotalOutput" field.</summary>
    public const int TotalOutputFieldNumber = 4;
    private int totalOutput_;
    /// <summary>
    ///共产出几个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalOutput {
      get { return totalOutput_; }
      set {
        totalOutput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComAutoSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComAutoSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputCounter != other.OutputCounter) return false;
      if (Start != other.Start) return false;
      if (ItemCount != other.ItemCount) return false;
      if (TotalOutput != other.TotalOutput) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutputCounter != 0) hash ^= OutputCounter.GetHashCode();
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (ItemCount != 0) hash ^= ItemCount.GetHashCode();
      if (TotalOutput != 0) hash ^= TotalOutput.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OutputCounter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OutputCounter);
      }
      if (Start != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Start);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemCount);
      }
      if (TotalOutput != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalOutput);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OutputCounter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OutputCounter);
      }
      if (Start != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Start);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemCount);
      }
      if (TotalOutput != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalOutput);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutputCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputCounter);
      }
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (TotalOutput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalOutput);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComAutoSource other) {
      if (other == null) {
        return;
      }
      if (other.OutputCounter != 0) {
        OutputCounter = other.OutputCounter;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.ItemCount != 0) {
        ItemCount = other.ItemCount;
      }
      if (other.TotalOutput != 0) {
        TotalOutput = other.TotalOutput;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OutputCounter = input.ReadInt32();
            break;
          }
          case 16: {
            Start = input.ReadInt64();
            break;
          }
          case 24: {
            ItemCount = input.ReadInt32();
            break;
          }
          case 32: {
            TotalOutput = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OutputCounter = input.ReadInt32();
            break;
          }
          case 16: {
            Start = input.ReadInt64();
            break;
          }
          case 24: {
            ItemCount = input.ReadInt32();
            break;
          }
          case 32: {
            TotalOutput = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComBox : pb::IMessage<ComBox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComBox> _parser = new pb::MessageParser<ComBox>(() => new ComBox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComBox(ComBox other) : this() {
      usedCount_ = other.usedCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComBox Clone() {
      return new ComBox(this);
    }

    /// <summary>Field number for the "UsedCount" field.</summary>
    public const int UsedCountFieldNumber = 1;
    private int usedCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsedCount {
      get { return usedCount_; }
      set {
        usedCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UsedCount != other.UsedCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UsedCount != 0) hash ^= UsedCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UsedCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UsedCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UsedCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UsedCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UsedCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsedCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComBox other) {
      if (other == null) {
        return;
      }
      if (other.UsedCount != 0) {
        UsedCount = other.UsedCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UsedCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UsedCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComSkill : pb::IMessage<ComSkill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComSkill> _parser = new pb::MessageParser<ComSkill>(() => new ComSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComSkill(ComSkill other) : this() {
      buffCounter_ = other.buffCounter_;
      stackCounter_ = other.stackCounter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComSkill Clone() {
      return new ComSkill(this);
    }

    /// <summary>Field number for the "BuffCounter" field.</summary>
    public const int BuffCounterFieldNumber = 1;
    private int buffCounter_;
    /// <summary>
    /// buff持续计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffCounter {
      get { return buffCounter_; }
      set {
        buffCounter_ = value;
      }
    }

    /// <summary>Field number for the "StackCounter" field.</summary>
    public const int StackCounterFieldNumber = 2;
    private int stackCounter_;
    /// <summary>
    /// 堆叠计数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StackCounter {
      get { return stackCounter_; }
      set {
        stackCounter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuffCounter != other.BuffCounter) return false;
      if (StackCounter != other.StackCounter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuffCounter != 0) hash ^= BuffCounter.GetHashCode();
      if (StackCounter != 0) hash ^= StackCounter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BuffCounter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuffCounter);
      }
      if (StackCounter != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StackCounter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BuffCounter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuffCounter);
      }
      if (StackCounter != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StackCounter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuffCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffCounter);
      }
      if (StackCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StackCounter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComSkill other) {
      if (other == null) {
        return;
      }
      if (other.BuffCounter != 0) {
        BuffCounter = other.BuffCounter;
      }
      if (other.StackCounter != 0) {
        StackCounter = other.StackCounter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BuffCounter = input.ReadInt32();
            break;
          }
          case 16: {
            StackCounter = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BuffCounter = input.ReadInt32();
            break;
          }
          case 16: {
            StackCounter = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComEatingSource : pb::IMessage<ComEatingSource>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComEatingSource> _parser = new pb::MessageParser<ComEatingSource>(() => new ComEatingSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComEatingSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComEatingSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComEatingSource(ComEatingSource other) : this() {
      countLeft_ = other.countLeft_;
      eatingTimeLeft_ = other.eatingTimeLeft_;
      itemsWithin_ = other.itemsWithin_.Clone();
      randomNextIdx_ = other.randomNextIdx_;
      randomSeed_ = other.randomSeed_;
      eatGroup_ = other.eatGroup_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComEatingSource Clone() {
      return new ComEatingSource(this);
    }

    /// <summary>Field number for the "CountLeft" field.</summary>
    public const int CountLeftFieldNumber = 1;
    private int countLeft_;
    /// <summary>
    /// 表示还能点多少下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountLeft {
      get { return countLeft_; }
      set {
        countLeft_ = value;
      }
    }

    /// <summary>Field number for the "EatingTimeLeft" field.</summary>
    public const int EatingTimeLeftFieldNumber = 2;
    private int eatingTimeLeft_;
    /// <summary>
    /// 表示原材料要加工多久
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EatingTimeLeft {
      get { return eatingTimeLeft_; }
      set {
        eatingTimeLeft_ = value;
      }
    }

    /// <summary>Field number for the "ItemsWithin" field.</summary>
    public const int ItemsWithinFieldNumber = 3;
    private static readonly pbc::MapField<int, int>.Codec _map_itemsWithin_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 26);
    private readonly pbc::MapField<int, int> itemsWithin_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 表示加入了哪些原材料
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> ItemsWithin {
      get { return itemsWithin_; }
    }

    /// <summary>Field number for the "RandomNextIdx" field.</summary>
    public const int RandomNextIdxFieldNumber = 4;
    private int randomNextIdx_;
    /// <summary>
    /// 伪随机参数1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomNextIdx {
      get { return randomNextIdx_; }
      set {
        randomNextIdx_ = value;
      }
    }

    /// <summary>Field number for the "RandomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 5;
    private int randomSeed_;
    /// <summary>
    /// 伪随机参数2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "EatGroup" field.</summary>
    public const int EatGroupFieldNumber = 6;
    private int eatGroup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EatGroup {
      get { return eatGroup_; }
      set {
        eatGroup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComEatingSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComEatingSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CountLeft != other.CountLeft) return false;
      if (EatingTimeLeft != other.EatingTimeLeft) return false;
      if (!ItemsWithin.Equals(other.ItemsWithin)) return false;
      if (RandomNextIdx != other.RandomNextIdx) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if (EatGroup != other.EatGroup) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CountLeft != 0) hash ^= CountLeft.GetHashCode();
      if (EatingTimeLeft != 0) hash ^= EatingTimeLeft.GetHashCode();
      hash ^= ItemsWithin.GetHashCode();
      if (RandomNextIdx != 0) hash ^= RandomNextIdx.GetHashCode();
      if (RandomSeed != 0) hash ^= RandomSeed.GetHashCode();
      if (EatGroup != 0) hash ^= EatGroup.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CountLeft != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CountLeft);
      }
      if (EatingTimeLeft != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EatingTimeLeft);
      }
      itemsWithin_.WriteTo(output, _map_itemsWithin_codec);
      if (RandomNextIdx != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RandomNextIdx);
      }
      if (RandomSeed != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RandomSeed);
      }
      if (EatGroup != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EatGroup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CountLeft != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CountLeft);
      }
      if (EatingTimeLeft != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EatingTimeLeft);
      }
      itemsWithin_.WriteTo(ref output, _map_itemsWithin_codec);
      if (RandomNextIdx != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RandomNextIdx);
      }
      if (RandomSeed != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RandomSeed);
      }
      if (EatGroup != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EatGroup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CountLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountLeft);
      }
      if (EatingTimeLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EatingTimeLeft);
      }
      size += itemsWithin_.CalculateSize(_map_itemsWithin_codec);
      if (RandomNextIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomNextIdx);
      }
      if (RandomSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomSeed);
      }
      if (EatGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EatGroup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComEatingSource other) {
      if (other == null) {
        return;
      }
      if (other.CountLeft != 0) {
        CountLeft = other.CountLeft;
      }
      if (other.EatingTimeLeft != 0) {
        EatingTimeLeft = other.EatingTimeLeft;
      }
      itemsWithin_.Add(other.itemsWithin_);
      if (other.RandomNextIdx != 0) {
        RandomNextIdx = other.RandomNextIdx;
      }
      if (other.RandomSeed != 0) {
        RandomSeed = other.RandomSeed;
      }
      if (other.EatGroup != 0) {
        EatGroup = other.EatGroup;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CountLeft = input.ReadInt32();
            break;
          }
          case 16: {
            EatingTimeLeft = input.ReadInt32();
            break;
          }
          case 26: {
            itemsWithin_.AddEntriesFrom(input, _map_itemsWithin_codec);
            break;
          }
          case 32: {
            RandomNextIdx = input.ReadInt32();
            break;
          }
          case 40: {
            RandomSeed = input.ReadInt32();
            break;
          }
          case 48: {
            EatGroup = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CountLeft = input.ReadInt32();
            break;
          }
          case 16: {
            EatingTimeLeft = input.ReadInt32();
            break;
          }
          case 26: {
            itemsWithin_.AddEntriesFrom(ref input, _map_itemsWithin_codec);
            break;
          }
          case 32: {
            RandomNextIdx = input.ReadInt32();
            break;
          }
          case 40: {
            RandomSeed = input.ReadInt32();
            break;
          }
          case 48: {
            EatGroup = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 记录各种活动数据
  /// </summary>
  public sealed partial class ComActivity : pb::IMessage<ComActivity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComActivity> _parser = new pb::MessageParser<ComActivity>(() => new ComActivity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComActivity(ComActivity other) : this() {
      activityId_ = other.activityId_;
      activityEnergy_ = other.activityEnergy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComActivity Clone() {
      return new ComActivity(this);
    }

    /// <summary>Field number for the "ActivityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    /// <summary>
    /// 活动实例id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "ActivityEnergy" field.</summary>
    public const int ActivityEnergyFieldNumber = 2;
    private int activityEnergy_;
    /// <summary>
    /// 活动体力(pvp活动)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityEnergy {
      get { return activityEnergy_; }
      set {
        activityEnergy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (ActivityEnergy != other.ActivityEnergy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (ActivityEnergy != 0) hash ^= ActivityEnergy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (ActivityEnergy != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActivityEnergy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (ActivityEnergy != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActivityEnergy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (ActivityEnergy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityEnergy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComActivity other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.ActivityEnergy != 0) {
        ActivityEnergy = other.ActivityEnergy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            ActivityEnergy = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 16: {
            ActivityEnergy = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComToolSource : pb::IMessage<ComToolSource>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComToolSource> _parser = new pb::MessageParser<ComToolSource>(() => new ComToolSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComToolSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComToolSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComToolSource(ComToolSource other) : this() {
      itemCount_ = other.itemCount_;
      totalOutput_ = other.totalOutput_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComToolSource Clone() {
      return new ComToolSource(this);
    }

    /// <summary>Field number for the "ItemCount" field.</summary>
    public const int ItemCountFieldNumber = 1;
    private int itemCount_;
    /// <summary>
    /// 库存
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    /// <summary>Field number for the "TotalOutput" field.</summary>
    public const int TotalOutputFieldNumber = 2;
    private int totalOutput_;
    /// <summary>
    /// 共产出几个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalOutput {
      get { return totalOutput_; }
      set {
        totalOutput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComToolSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComToolSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemCount != other.ItemCount) return false;
      if (TotalOutput != other.TotalOutput) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemCount != 0) hash ^= ItemCount.GetHashCode();
      if (TotalOutput != 0) hash ^= TotalOutput.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ItemCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemCount);
      }
      if (TotalOutput != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalOutput);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ItemCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemCount);
      }
      if (TotalOutput != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalOutput);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (TotalOutput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalOutput);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComToolSource other) {
      if (other == null) {
        return;
      }
      if (other.ItemCount != 0) {
        ItemCount = other.ItemCount;
      }
      if (other.TotalOutput != 0) {
        TotalOutput = other.TotalOutput;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemCount = input.ReadInt32();
            break;
          }
          case 16: {
            TotalOutput = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemCount = input.ReadInt32();
            break;
          }
          case 16: {
            TotalOutput = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComSpecialBox : pb::IMessage<ComSpecialBox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComSpecialBox> _parser = new pb::MessageParser<ComSpecialBox>(() => new ComSpecialBox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComSpecialBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComSpecialBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComSpecialBox(ComSpecialBox other) : this() {
      itemCount_ = other.itemCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComSpecialBox Clone() {
      return new ComSpecialBox(this);
    }

    /// <summary>Field number for the "ItemCount" field.</summary>
    public const int ItemCountFieldNumber = 1;
    private int itemCount_;
    /// <summary>
    /// 库存
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComSpecialBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComSpecialBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemCount != other.ItemCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemCount != 0) hash ^= ItemCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ItemCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ItemCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComSpecialBox other) {
      if (other == null) {
        return;
      }
      if (other.ItemCount != 0) {
        ItemCount = other.ItemCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ItemCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComMixSource : pb::IMessage<ComMixSource>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComMixSource> _parser = new pb::MessageParser<ComMixSource>(() => new ComMixSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComMixSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMixSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMixSource(ComMixSource other) : this() {
      reviveCounter_ = other.reviveCounter_;
      outputCounter_ = other.outputCounter_;
      itemInRecharge_ = other.itemInRecharge_;
      itemCount_ = other.itemCount_;
      outputCount_ = other.outputCount_;
      isFirstRevive_ = other.isFirstRevive_;
      mixedItems_ = other.mixedItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComMixSource Clone() {
      return new ComMixSource(this);
    }

    /// <summary>Field number for the "ReviveCounter" field.</summary>
    public const int ReviveCounterFieldNumber = 1;
    private int reviveCounter_;
    /// <summary>
    /// 剩多少时间重生
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReviveCounter {
      get { return reviveCounter_; }
      set {
        reviveCounter_ = value;
      }
    }

    /// <summary>Field number for the "OutputCounter" field.</summary>
    public const int OutputCounterFieldNumber = 2;
    private int outputCounter_;
    /// <summary>
    /// 剩多少时间产出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutputCounter {
      get { return outputCounter_; }
      set {
        outputCounter_ = value;
      }
    }

    /// <summary>Field number for the "ItemInRecharge" field.</summary>
    public const int ItemInRechargeFieldNumber = 3;
    private int itemInRecharge_;
    /// <summary>
    /// 有几个物品正在产出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemInRecharge {
      get { return itemInRecharge_; }
      set {
        itemInRecharge_ = value;
      }
    }

    /// <summary>Field number for the "ItemCount" field.</summary>
    public const int ItemCountFieldNumber = 4;
    private int itemCount_;
    /// <summary>
    /// 有几个物品已经产出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    /// <summary>Field number for the "OutputCount" field.</summary>
    public const int OutputCountFieldNumber = 5;
    private int outputCount_;
    /// <summary>
    /// 一共生产了多少（只有会死的生成器才有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutputCount {
      get { return outputCount_; }
      set {
        outputCount_ = value;
      }
    }

    /// <summary>Field number for the "IsFirstRevive" field.</summary>
    public const int IsFirstReviveFieldNumber = 6;
    private bool isFirstRevive_;
    /// <summary>
    /// 是否在进行第一次revive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFirstRevive {
      get { return isFirstRevive_; }
      set {
        isFirstRevive_ = value;
      }
    }

    /// <summary>Field number for the "MixedItems" field.</summary>
    public const int MixedItemsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_mixedItems_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> mixedItems_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 记录当前已被mix的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MixedItems {
      get { return mixedItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComMixSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComMixSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReviveCounter != other.ReviveCounter) return false;
      if (OutputCounter != other.OutputCounter) return false;
      if (ItemInRecharge != other.ItemInRecharge) return false;
      if (ItemCount != other.ItemCount) return false;
      if (OutputCount != other.OutputCount) return false;
      if (IsFirstRevive != other.IsFirstRevive) return false;
      if(!mixedItems_.Equals(other.mixedItems_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReviveCounter != 0) hash ^= ReviveCounter.GetHashCode();
      if (OutputCounter != 0) hash ^= OutputCounter.GetHashCode();
      if (ItemInRecharge != 0) hash ^= ItemInRecharge.GetHashCode();
      if (ItemCount != 0) hash ^= ItemCount.GetHashCode();
      if (OutputCount != 0) hash ^= OutputCount.GetHashCode();
      if (IsFirstRevive != false) hash ^= IsFirstRevive.GetHashCode();
      hash ^= mixedItems_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ReviveCounter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReviveCounter);
      }
      if (OutputCounter != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OutputCounter);
      }
      if (ItemInRecharge != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemInRecharge);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemCount);
      }
      if (OutputCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OutputCount);
      }
      if (IsFirstRevive != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsFirstRevive);
      }
      mixedItems_.WriteTo(output, _repeated_mixedItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ReviveCounter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReviveCounter);
      }
      if (OutputCounter != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OutputCounter);
      }
      if (ItemInRecharge != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemInRecharge);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemCount);
      }
      if (OutputCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OutputCount);
      }
      if (IsFirstRevive != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsFirstRevive);
      }
      mixedItems_.WriteTo(ref output, _repeated_mixedItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReviveCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReviveCounter);
      }
      if (OutputCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputCounter);
      }
      if (ItemInRecharge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemInRecharge);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (OutputCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputCount);
      }
      if (IsFirstRevive != false) {
        size += 1 + 1;
      }
      size += mixedItems_.CalculateSize(_repeated_mixedItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComMixSource other) {
      if (other == null) {
        return;
      }
      if (other.ReviveCounter != 0) {
        ReviveCounter = other.ReviveCounter;
      }
      if (other.OutputCounter != 0) {
        OutputCounter = other.OutputCounter;
      }
      if (other.ItemInRecharge != 0) {
        ItemInRecharge = other.ItemInRecharge;
      }
      if (other.ItemCount != 0) {
        ItemCount = other.ItemCount;
      }
      if (other.OutputCount != 0) {
        OutputCount = other.OutputCount;
      }
      if (other.IsFirstRevive != false) {
        IsFirstRevive = other.IsFirstRevive;
      }
      mixedItems_.Add(other.mixedItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReviveCounter = input.ReadInt32();
            break;
          }
          case 16: {
            OutputCounter = input.ReadInt32();
            break;
          }
          case 24: {
            ItemInRecharge = input.ReadInt32();
            break;
          }
          case 32: {
            ItemCount = input.ReadInt32();
            break;
          }
          case 40: {
            OutputCount = input.ReadInt32();
            break;
          }
          case 48: {
            IsFirstRevive = input.ReadBool();
            break;
          }
          case 58:
          case 56: {
            mixedItems_.AddEntriesFrom(input, _repeated_mixedItems_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ReviveCounter = input.ReadInt32();
            break;
          }
          case 16: {
            OutputCounter = input.ReadInt32();
            break;
          }
          case 24: {
            ItemInRecharge = input.ReadInt32();
            break;
          }
          case 32: {
            ItemCount = input.ReadInt32();
            break;
          }
          case 40: {
            OutputCount = input.ReadInt32();
            break;
          }
          case 48: {
            IsFirstRevive = input.ReadBool();
            break;
          }
          case 58:
          case 56: {
            mixedItems_.AddEntriesFrom(ref input, _repeated_mixedItems_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ComTrigSource : pb::IMessage<ComTrigSource>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ComTrigSource> _parser = new pb::MessageParser<ComTrigSource>(() => new ComTrigSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComTrigSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComTrigSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComTrigSource(ComTrigSource other) : this() {
      triggerCount_ = other.triggerCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComTrigSource Clone() {
      return new ComTrigSource(this);
    }

    /// <summary>Field number for the "TriggerCount" field.</summary>
    public const int TriggerCountFieldNumber = 1;
    private int triggerCount_;
    /// <summary>
    ///当前已经触发的次数 默认0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TriggerCount {
      get { return triggerCount_; }
      set {
        triggerCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComTrigSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComTrigSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TriggerCount != other.TriggerCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TriggerCount != 0) hash ^= TriggerCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TriggerCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TriggerCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TriggerCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TriggerCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TriggerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComTrigSource other) {
      if (other == null) {
        return;
      }
      if (other.TriggerCount != 0) {
        TriggerCount = other.TriggerCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TriggerCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TriggerCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MergeItem : pb::IMessage<MergeItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MergeItem> _parser = new pb::MessageParser<MergeItem>(() => new MergeItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MergeItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MergeItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MergeItem(MergeItem other) : this() {
      id_ = other.id_;
      tid_ = other.tid_;
      state_ = other.state_;
      x_ = other.x_;
      y_ = other.y_;
      com_ = other.com_;
      comDying_ = other.comDying_ != null ? other.comDying_.Clone() : null;
      comClickSource_ = other.comClickSource_ != null ? other.comClickSource_.Clone() : null;
      comChest_ = other.comChest_ != null ? other.comChest_.Clone() : null;
      comBubble_ = other.comBubble_ != null ? other.comBubble_.Clone() : null;
      comAutoSource_ = other.comAutoSource_ != null ? other.comAutoSource_.Clone() : null;
      comBox_ = other.comBox_ != null ? other.comBox_.Clone() : null;
      comEatingSource_ = other.comEatingSource_ != null ? other.comEatingSource_.Clone() : null;
      comSkill_ = other.comSkill_ != null ? other.comSkill_.Clone() : null;
      comActivity_ = other.comActivity_ != null ? other.comActivity_.Clone() : null;
      stateConf_ = other.stateConf_;
      comToolSource_ = other.comToolSource_ != null ? other.comToolSource_.Clone() : null;
      comSpecialBox_ = other.comSpecialBox_ != null ? other.comSpecialBox_.Clone() : null;
      comMixSource_ = other.comMixSource_ != null ? other.comMixSource_.Clone() : null;
      comTrigSource_ = other.comTrigSource_ != null ? other.comTrigSource_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MergeItem Clone() {
      return new MergeItem(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Tid" field.</summary>
    public const int TidFieldNumber = 2;
    private int tid_;
    /// <summary>
    /// 物品tid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    /// <summary>
    /// 状态，0为正常，1为frozen，2为locked
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 4;
    private int x_;
    /// <summary>
    /// x坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 5;
    private int y_;
    /// <summary>
    /// y坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Com" field.</summary>
    public const int ComFieldNumber = 6;
    private uint com_;
    /// <summary>
    /// 所有component(按位mask字段)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Com {
      get { return com_; }
      set {
        com_ = value;
      }
    }

    /// <summary>Field number for the "ComDying" field.</summary>
    public const int ComDyingFieldNumber = 7;
    private global::fat.gamekitdata.ComDying comDying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ComDying ComDying {
      get { return comDying_; }
      set {
        comDying_ = value;
      }
    }

    /// <summary>Field number for the "ComClickSource" field.</summary>
    public const int ComClickSourceFieldNumber = 8;
    private global::fat.gamekitdata.ComClickSource comClickSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ComClickSource ComClickSource {
      get { return comClickSource_; }
      set {
        comClickSource_ = value;
      }
    }

    /// <summary>Field number for the "ComChest" field.</summary>
    public const int ComChestFieldNumber = 9;
    private global::fat.gamekitdata.ComChest comChest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ComChest ComChest {
      get { return comChest_; }
      set {
        comChest_ = value;
      }
    }

    /// <summary>Field number for the "ComBubble" field.</summary>
    public const int ComBubbleFieldNumber = 10;
    private global::fat.gamekitdata.ComBubble comBubble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ComBubble ComBubble {
      get { return comBubble_; }
      set {
        comBubble_ = value;
      }
    }

    /// <summary>Field number for the "ComAutoSource" field.</summary>
    public const int ComAutoSourceFieldNumber = 11;
    private global::fat.gamekitdata.ComAutoSource comAutoSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ComAutoSource ComAutoSource {
      get { return comAutoSource_; }
      set {
        comAutoSource_ = value;
      }
    }

    /// <summary>Field number for the "ComBox" field.</summary>
    public const int ComBoxFieldNumber = 12;
    private global::fat.gamekitdata.ComBox comBox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ComBox ComBox {
      get { return comBox_; }
      set {
        comBox_ = value;
      }
    }

    /// <summary>Field number for the "ComEatingSource" field.</summary>
    public const int ComEatingSourceFieldNumber = 13;
    private global::fat.gamekitdata.ComEatingSource comEatingSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ComEatingSource ComEatingSource {
      get { return comEatingSource_; }
      set {
        comEatingSource_ = value;
      }
    }

    /// <summary>Field number for the "ComSkill" field.</summary>
    public const int ComSkillFieldNumber = 14;
    private global::fat.gamekitdata.ComSkill comSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ComSkill ComSkill {
      get { return comSkill_; }
      set {
        comSkill_ = value;
      }
    }

    /// <summary>Field number for the "ComActivity" field.</summary>
    public const int ComActivityFieldNumber = 15;
    private global::fat.gamekitdata.ComActivity comActivity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ComActivity ComActivity {
      get { return comActivity_; }
      set {
        comActivity_ = value;
      }
    }

    /// <summary>Field number for the "StateConf" field.</summary>
    public const int StateConfFieldNumber = 16;
    private int stateConf_;
    /// <summary>
    /// 状态初始参数 高16位记录state/低16位记录param / 现在记录了解锁等级，背景图案等信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StateConf {
      get { return stateConf_; }
      set {
        stateConf_ = value;
      }
    }

    /// <summary>Field number for the "ComToolSource" field.</summary>
    public const int ComToolSourceFieldNumber = 17;
    private global::fat.gamekitdata.ComToolSource comToolSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ComToolSource ComToolSource {
      get { return comToolSource_; }
      set {
        comToolSource_ = value;
      }
    }

    /// <summary>Field number for the "ComSpecialBox" field.</summary>
    public const int ComSpecialBoxFieldNumber = 18;
    private global::fat.gamekitdata.ComSpecialBox comSpecialBox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ComSpecialBox ComSpecialBox {
      get { return comSpecialBox_; }
      set {
        comSpecialBox_ = value;
      }
    }

    /// <summary>Field number for the "ComMixSource" field.</summary>
    public const int ComMixSourceFieldNumber = 19;
    private global::fat.gamekitdata.ComMixSource comMixSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ComMixSource ComMixSource {
      get { return comMixSource_; }
      set {
        comMixSource_ = value;
      }
    }

    /// <summary>Field number for the "ComTrigSource" field.</summary>
    public const int ComTrigSourceFieldNumber = 20;
    private global::fat.gamekitdata.ComTrigSource comTrigSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ComTrigSource ComTrigSource {
      get { return comTrigSource_; }
      set {
        comTrigSource_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MergeItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MergeItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Tid != other.Tid) return false;
      if (State != other.State) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Com != other.Com) return false;
      if (!object.Equals(ComDying, other.ComDying)) return false;
      if (!object.Equals(ComClickSource, other.ComClickSource)) return false;
      if (!object.Equals(ComChest, other.ComChest)) return false;
      if (!object.Equals(ComBubble, other.ComBubble)) return false;
      if (!object.Equals(ComAutoSource, other.ComAutoSource)) return false;
      if (!object.Equals(ComBox, other.ComBox)) return false;
      if (!object.Equals(ComEatingSource, other.ComEatingSource)) return false;
      if (!object.Equals(ComSkill, other.ComSkill)) return false;
      if (!object.Equals(ComActivity, other.ComActivity)) return false;
      if (StateConf != other.StateConf) return false;
      if (!object.Equals(ComToolSource, other.ComToolSource)) return false;
      if (!object.Equals(ComSpecialBox, other.ComSpecialBox)) return false;
      if (!object.Equals(ComMixSource, other.ComMixSource)) return false;
      if (!object.Equals(ComTrigSource, other.ComTrigSource)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Tid != 0) hash ^= Tid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Com != 0) hash ^= Com.GetHashCode();
      if (comDying_ != null) hash ^= ComDying.GetHashCode();
      if (comClickSource_ != null) hash ^= ComClickSource.GetHashCode();
      if (comChest_ != null) hash ^= ComChest.GetHashCode();
      if (comBubble_ != null) hash ^= ComBubble.GetHashCode();
      if (comAutoSource_ != null) hash ^= ComAutoSource.GetHashCode();
      if (comBox_ != null) hash ^= ComBox.GetHashCode();
      if (comEatingSource_ != null) hash ^= ComEatingSource.GetHashCode();
      if (comSkill_ != null) hash ^= ComSkill.GetHashCode();
      if (comActivity_ != null) hash ^= ComActivity.GetHashCode();
      if (StateConf != 0) hash ^= StateConf.GetHashCode();
      if (comToolSource_ != null) hash ^= ComToolSource.GetHashCode();
      if (comSpecialBox_ != null) hash ^= ComSpecialBox.GetHashCode();
      if (comMixSource_ != null) hash ^= ComMixSource.GetHashCode();
      if (comTrigSource_ != null) hash ^= ComTrigSource.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Tid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tid);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (X != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Y);
      }
      if (Com != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Com);
      }
      if (comDying_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ComDying);
      }
      if (comClickSource_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ComClickSource);
      }
      if (comChest_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ComChest);
      }
      if (comBubble_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ComBubble);
      }
      if (comAutoSource_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ComAutoSource);
      }
      if (comBox_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ComBox);
      }
      if (comEatingSource_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ComEatingSource);
      }
      if (comSkill_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ComSkill);
      }
      if (comActivity_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(ComActivity);
      }
      if (StateConf != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(StateConf);
      }
      if (comToolSource_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ComToolSource);
      }
      if (comSpecialBox_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(ComSpecialBox);
      }
      if (comMixSource_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ComMixSource);
      }
      if (comTrigSource_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(ComTrigSource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Tid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tid);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (X != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Y);
      }
      if (Com != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Com);
      }
      if (comDying_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ComDying);
      }
      if (comClickSource_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ComClickSource);
      }
      if (comChest_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ComChest);
      }
      if (comBubble_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ComBubble);
      }
      if (comAutoSource_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ComAutoSource);
      }
      if (comBox_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ComBox);
      }
      if (comEatingSource_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ComEatingSource);
      }
      if (comSkill_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ComSkill);
      }
      if (comActivity_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(ComActivity);
      }
      if (StateConf != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(StateConf);
      }
      if (comToolSource_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ComToolSource);
      }
      if (comSpecialBox_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(ComSpecialBox);
      }
      if (comMixSource_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ComMixSource);
      }
      if (comTrigSource_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(ComTrigSource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Com != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Com);
      }
      if (comDying_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComDying);
      }
      if (comClickSource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComClickSource);
      }
      if (comChest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComChest);
      }
      if (comBubble_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComBubble);
      }
      if (comAutoSource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComAutoSource);
      }
      if (comBox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComBox);
      }
      if (comEatingSource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComEatingSource);
      }
      if (comSkill_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComSkill);
      }
      if (comActivity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComActivity);
      }
      if (StateConf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StateConf);
      }
      if (comToolSource_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ComToolSource);
      }
      if (comSpecialBox_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ComSpecialBox);
      }
      if (comMixSource_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ComMixSource);
      }
      if (comTrigSource_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ComTrigSource);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MergeItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Tid != 0) {
        Tid = other.Tid;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Com != 0) {
        Com = other.Com;
      }
      if (other.comDying_ != null) {
        if (comDying_ == null) {
          ComDying = new global::fat.gamekitdata.ComDying();
        }
        ComDying.MergeFrom(other.ComDying);
      }
      if (other.comClickSource_ != null) {
        if (comClickSource_ == null) {
          ComClickSource = new global::fat.gamekitdata.ComClickSource();
        }
        ComClickSource.MergeFrom(other.ComClickSource);
      }
      if (other.comChest_ != null) {
        if (comChest_ == null) {
          ComChest = new global::fat.gamekitdata.ComChest();
        }
        ComChest.MergeFrom(other.ComChest);
      }
      if (other.comBubble_ != null) {
        if (comBubble_ == null) {
          ComBubble = new global::fat.gamekitdata.ComBubble();
        }
        ComBubble.MergeFrom(other.ComBubble);
      }
      if (other.comAutoSource_ != null) {
        if (comAutoSource_ == null) {
          ComAutoSource = new global::fat.gamekitdata.ComAutoSource();
        }
        ComAutoSource.MergeFrom(other.ComAutoSource);
      }
      if (other.comBox_ != null) {
        if (comBox_ == null) {
          ComBox = new global::fat.gamekitdata.ComBox();
        }
        ComBox.MergeFrom(other.ComBox);
      }
      if (other.comEatingSource_ != null) {
        if (comEatingSource_ == null) {
          ComEatingSource = new global::fat.gamekitdata.ComEatingSource();
        }
        ComEatingSource.MergeFrom(other.ComEatingSource);
      }
      if (other.comSkill_ != null) {
        if (comSkill_ == null) {
          ComSkill = new global::fat.gamekitdata.ComSkill();
        }
        ComSkill.MergeFrom(other.ComSkill);
      }
      if (other.comActivity_ != null) {
        if (comActivity_ == null) {
          ComActivity = new global::fat.gamekitdata.ComActivity();
        }
        ComActivity.MergeFrom(other.ComActivity);
      }
      if (other.StateConf != 0) {
        StateConf = other.StateConf;
      }
      if (other.comToolSource_ != null) {
        if (comToolSource_ == null) {
          ComToolSource = new global::fat.gamekitdata.ComToolSource();
        }
        ComToolSource.MergeFrom(other.ComToolSource);
      }
      if (other.comSpecialBox_ != null) {
        if (comSpecialBox_ == null) {
          ComSpecialBox = new global::fat.gamekitdata.ComSpecialBox();
        }
        ComSpecialBox.MergeFrom(other.ComSpecialBox);
      }
      if (other.comMixSource_ != null) {
        if (comMixSource_ == null) {
          ComMixSource = new global::fat.gamekitdata.ComMixSource();
        }
        ComMixSource.MergeFrom(other.ComMixSource);
      }
      if (other.comTrigSource_ != null) {
        if (comTrigSource_ == null) {
          ComTrigSource = new global::fat.gamekitdata.ComTrigSource();
        }
        ComTrigSource.MergeFrom(other.ComTrigSource);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Tid = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 32: {
            X = input.ReadInt32();
            break;
          }
          case 40: {
            Y = input.ReadInt32();
            break;
          }
          case 48: {
            Com = input.ReadUInt32();
            break;
          }
          case 58: {
            if (comDying_ == null) {
              ComDying = new global::fat.gamekitdata.ComDying();
            }
            input.ReadMessage(ComDying);
            break;
          }
          case 66: {
            if (comClickSource_ == null) {
              ComClickSource = new global::fat.gamekitdata.ComClickSource();
            }
            input.ReadMessage(ComClickSource);
            break;
          }
          case 74: {
            if (comChest_ == null) {
              ComChest = new global::fat.gamekitdata.ComChest();
            }
            input.ReadMessage(ComChest);
            break;
          }
          case 82: {
            if (comBubble_ == null) {
              ComBubble = new global::fat.gamekitdata.ComBubble();
            }
            input.ReadMessage(ComBubble);
            break;
          }
          case 90: {
            if (comAutoSource_ == null) {
              ComAutoSource = new global::fat.gamekitdata.ComAutoSource();
            }
            input.ReadMessage(ComAutoSource);
            break;
          }
          case 98: {
            if (comBox_ == null) {
              ComBox = new global::fat.gamekitdata.ComBox();
            }
            input.ReadMessage(ComBox);
            break;
          }
          case 106: {
            if (comEatingSource_ == null) {
              ComEatingSource = new global::fat.gamekitdata.ComEatingSource();
            }
            input.ReadMessage(ComEatingSource);
            break;
          }
          case 114: {
            if (comSkill_ == null) {
              ComSkill = new global::fat.gamekitdata.ComSkill();
            }
            input.ReadMessage(ComSkill);
            break;
          }
          case 122: {
            if (comActivity_ == null) {
              ComActivity = new global::fat.gamekitdata.ComActivity();
            }
            input.ReadMessage(ComActivity);
            break;
          }
          case 128: {
            StateConf = input.ReadInt32();
            break;
          }
          case 138: {
            if (comToolSource_ == null) {
              ComToolSource = new global::fat.gamekitdata.ComToolSource();
            }
            input.ReadMessage(ComToolSource);
            break;
          }
          case 146: {
            if (comSpecialBox_ == null) {
              ComSpecialBox = new global::fat.gamekitdata.ComSpecialBox();
            }
            input.ReadMessage(ComSpecialBox);
            break;
          }
          case 154: {
            if (comMixSource_ == null) {
              ComMixSource = new global::fat.gamekitdata.ComMixSource();
            }
            input.ReadMessage(ComMixSource);
            break;
          }
          case 162: {
            if (comTrigSource_ == null) {
              ComTrigSource = new global::fat.gamekitdata.ComTrigSource();
            }
            input.ReadMessage(ComTrigSource);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Tid = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 32: {
            X = input.ReadInt32();
            break;
          }
          case 40: {
            Y = input.ReadInt32();
            break;
          }
          case 48: {
            Com = input.ReadUInt32();
            break;
          }
          case 58: {
            if (comDying_ == null) {
              ComDying = new global::fat.gamekitdata.ComDying();
            }
            input.ReadMessage(ComDying);
            break;
          }
          case 66: {
            if (comClickSource_ == null) {
              ComClickSource = new global::fat.gamekitdata.ComClickSource();
            }
            input.ReadMessage(ComClickSource);
            break;
          }
          case 74: {
            if (comChest_ == null) {
              ComChest = new global::fat.gamekitdata.ComChest();
            }
            input.ReadMessage(ComChest);
            break;
          }
          case 82: {
            if (comBubble_ == null) {
              ComBubble = new global::fat.gamekitdata.ComBubble();
            }
            input.ReadMessage(ComBubble);
            break;
          }
          case 90: {
            if (comAutoSource_ == null) {
              ComAutoSource = new global::fat.gamekitdata.ComAutoSource();
            }
            input.ReadMessage(ComAutoSource);
            break;
          }
          case 98: {
            if (comBox_ == null) {
              ComBox = new global::fat.gamekitdata.ComBox();
            }
            input.ReadMessage(ComBox);
            break;
          }
          case 106: {
            if (comEatingSource_ == null) {
              ComEatingSource = new global::fat.gamekitdata.ComEatingSource();
            }
            input.ReadMessage(ComEatingSource);
            break;
          }
          case 114: {
            if (comSkill_ == null) {
              ComSkill = new global::fat.gamekitdata.ComSkill();
            }
            input.ReadMessage(ComSkill);
            break;
          }
          case 122: {
            if (comActivity_ == null) {
              ComActivity = new global::fat.gamekitdata.ComActivity();
            }
            input.ReadMessage(ComActivity);
            break;
          }
          case 128: {
            StateConf = input.ReadInt32();
            break;
          }
          case 138: {
            if (comToolSource_ == null) {
              ComToolSource = new global::fat.gamekitdata.ComToolSource();
            }
            input.ReadMessage(ComToolSource);
            break;
          }
          case 146: {
            if (comSpecialBox_ == null) {
              ComSpecialBox = new global::fat.gamekitdata.ComSpecialBox();
            }
            input.ReadMessage(ComSpecialBox);
            break;
          }
          case 154: {
            if (comMixSource_ == null) {
              ComMixSource = new global::fat.gamekitdata.ComMixSource();
            }
            input.ReadMessage(ComMixSource);
            break;
          }
          case 162: {
            if (comTrigSource_ == null) {
              ComTrigSource = new global::fat.gamekitdata.ComTrigSource();
            }
            input.ReadMessage(ComTrigSource);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RecordState : pb::IMessage<RecordState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RecordState> _parser = new pb::MessageParser<RecordState>(() => new RecordState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MergeReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordState(RecordState other) : this() {
      id_ = other.id_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordState Clone() {
      return new RecordState(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordState other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
