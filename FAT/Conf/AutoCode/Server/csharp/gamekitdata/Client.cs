// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gamekitdata/client.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.gamekitdata {

  /// <summary>Holder for reflection information generated from gamekitdata/client.proto</summary>
  public static partial class ClientReflection {

    #region Descriptor
    /// <summary>File descriptor for gamekitdata/client.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhnYW1la2l0ZGF0YS9jbGllbnQucHJvdG8SC2dhbWVraXRkYXRhGhpnYW1l",
            "a2l0ZGF0YS9hY3Rpdml0eS5wcm90bxoWZ2FtZWtpdGRhdGEvYmFzZS5wcm90",
            "bxogZ2FtZWtpdGRhdGEvYm9hcmRfYWN0aXZpdHkucHJvdG8aH2dhbWVraXRk",
            "YXRhL2NhcmRfYWN0aXZpdHkucHJvdG8aI2dhbWVraXRkYXRhL2NvbmRpdGlv",
            "bl90cmlnZ2VyLnByb3RvGh1nYW1la2l0ZGF0YS9kYWlseV9ldmVudC5wcm90",
            "bxojZ2FtZWtpdGRhdGEvZGVjb3JhdGVfYWN0aXZpdHkucHJvdG8aFWdhbWVr",
            "aXRkYXRhL2lhcC5wcm90bxobZ2FtZWtpdGRhdGEvbWFwX3NjZW5lLnByb3Rv",
            "GhdnYW1la2l0ZGF0YS9tZXJnZS5wcm90bxocZ2FtZWtpdGRhdGEvbWluaV9i",
            "b2FyZC5wcm90bxoaZ2FtZWtpdGRhdGEvbWluaWdhbWUucHJvdG8aF2dhbWVr",
            "aXRkYXRhL29yZGVyLnByb3RvGhxnYW1la2l0ZGF0YS9yZW1vdGVfYXBpLnBy",
            "b3RvGhZnYW1la2l0ZGF0YS9zaG9wLnByb3RvIoUBCgtTY3JlZW5Qb3B1cBI0",
            "CgZSZWNvcmQYASADKAsyJC5nYW1la2l0ZGF0YS5TY3JlZW5Qb3B1cC5SZWNv",
            "cmRFbnRyeRIRCglSZWZyZXNoVFMYAiABKAMaLQoLUmVjb3JkRW50cnkSCwoD",
            "a2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASJtCgpVc2VyUmVjb3JkEjEK",
            "BUxldmVsGAEgAygLMiIuZ2FtZWtpdGRhdGEuVXNlclJlY29yZC5MZXZlbEVu",
            "dHJ5GiwKCkxldmVsRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgD",
            "OgI4ASJQCgxIYW5kYm9va0RhdGESDgoGVW5yZWFkGAEgASgIEhcKD01lcmdl",
            "SXRlbVVubG9jaxgCIAMoBBIXCg9NZXJnZUl0ZW1SZXdhcmQYAyADKAQiQwoH",
            "QWRzRGF0YRINCgVBZHNJZBgBIAEoBRISCgpXYXRjaENvdW50GAIgASgFEhUK",
            "DU5leHRSZXNldFRpbWUYAyABKAMiHgoIVHV0b3JpYWwSEgoKRmluaXNoTWFz",
            "axgEIAMoBCJ6ChJDbGllbnRTdG9yYWdlU3RhdGUSNwoERGF0YRgBIAMoCzIp",
            "LmdhbWVraXRkYXRhLkNsaWVudFN0b3JhZ2VTdGF0ZS5EYXRhRW50cnkaKwoJ",
            "RGF0YUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEidAoR",
            "UGxheWVyR2VuZXJhbERhdGESJwoIVHV0b3JpYWwYASABKAsyFS5nYW1la2l0",
            "ZGF0YS5UdXRvcmlhbBI2Cg1DbGllbnRTdG9yYWdlGAIgASgLMh8uZ2FtZWtp",
            "dGRhdGEuQ2xpZW50U3RvcmFnZVN0YXRlIqAICg5QbGF5ZXJHYW1lRGF0YRIh",
            "CgVNZXJnZRgBIAEoCzISLmdhbWVraXRkYXRhLk1lcmdlEi0KC01lcmdlR2xv",
            "YmFsGAIgASgLMhguZ2FtZWtpdGRhdGEuTWVyZ2VHbG9iYWwSKwoKRW5lcmd5",
            "SW5mbxgDIAEoCzIXLmdhbWVraXRkYXRhLkVuZXJneUluZm8SLwoMSGFuZGJv",
            "b2tEYXRhGAQgASgLMhkuZ2FtZWtpdGRhdGEuSGFuZGJvb2tEYXRhEioKCU1h",
            "aW5PcmRlchgFIAEoCzIXLmdhbWVraXRkYXRhLk9yZGVyR3JvdXASJwoITWFw",
            "U2NlbmUYBiABKAsyFS5nYW1la2l0ZGF0YS5NYXBTY2VuZRInCghTaG9wSW5m",
            "bxgHIAEoCzIVLmdhbWVraXRkYXRhLlNob3BJbmZvEisKCkRhaWx5RXZlbnQY",
            "CCABKAsyFy5nYW1la2l0ZGF0YS5EYWlseUV2ZW50EikKC0Fkc0RhdGFMaXN0",
            "GAogAygLMhQuZ2FtZWtpdGRhdGEuQWRzRGF0YRInCghBY3Rpdml0eRgLIAEo",
            "CzIVLmdhbWVraXRkYXRhLkFjdGl2aXR5Ei0KC1NjcmVlblBvcHVwGAwgASgL",
            "MhguZ2FtZWtpdGRhdGEuU2NyZWVuUG9wdXASLwoMQ2FyZEFjdGl2aXR5GA0g",
            "ASgLMhkuZ2FtZWtpdGRhdGEuQ2FyZEFjdGl2aXR5EjcKEERlY29yYXRlQWN0",
            "aXZpdHkYDiABKAsyHS5nYW1la2l0ZGF0YS5EZWNvcmF0ZUFjdGl2aXR5Ei4K",
            "B1RyaWdnZXIYDyABKAsyHS5nYW1la2l0ZGF0YS5Db25kaXRpb25UcmlnZ2Vy",
            "EicKBlJlY29yZBgQIAEoCzIXLmdhbWVraXRkYXRhLlVzZXJSZWNvcmQSOQoR",
            "TWluaUJvYXJkQWN0aXZpdHkYESABKAsyHi5nYW1la2l0ZGF0YS5NaW5pQm9h",
            "cmRBY3Rpdml0eRIvCgxNaW5pR2FtZURhdGEYEiABKAsyGS5nYW1la2l0ZGF0",
            "YS5NaW5pR2FtZURhdGESMQoNUmVtb3RlQXBpRGF0YRgTIAEoCzIaLmdhbWVr",
            "aXRkYXRhLlJlbW90ZUFwaURhdGESMQoNQm9hcmRBY3Rpdml0eRgUIAEoCzIa",
            "LmdhbWVraXRkYXRhLkJvYXJkQWN0aXZpdHkSKwoKU2lnbkluRGF0YRgVIAEo",
            "CzIXLmdhbWVraXRkYXRhLlNpZ25JbkRhdGESMwoOVXNlclRhZ0FwaURhdGEY",
            "FiABKAsyGy5nYW1la2l0ZGF0YS5Vc2VyVGFnQXBpRGF0YRI5ChFDb21tdW5p",
            "dHlMaW5rRGF0YRgXIAEoCzIeLmdhbWVraXRkYXRhLkNvbW11bml0eUxpbmtE",
            "YXRhIt4BCgpDbGllbnREYXRhEg8KB1ZlcnNpb24YASABKAUSEgoKTGFzdFVw",
            "ZGF0ZRgCIAEoAxIYChBMYXN0U3luY0J5Q2xpZW50GAMgASgDEjkKEVBsYXll",
            "ckdlbmVyYWxEYXRhGAQgASgLMh4uZ2FtZWtpdGRhdGEuUGxheWVyR2VuZXJh",
            "bERhdGESMwoOUGxheWVyR2FtZURhdGEYBSABKAsyGy5nYW1la2l0ZGF0YS5Q",
            "bGF5ZXJHYW1lRGF0YRIhCgNJQVAYBiABKAsyFC5nYW1la2l0ZGF0YS5JQVBE",
            "YXRhInEKDUxvY2FsU2F2ZURhdGESMwoOUGxheWVyQmFzZURhdGEYASABKAsy",
            "Gy5nYW1la2l0ZGF0YS5QbGF5ZXJCYXNlRGF0YRIrCgpDbGllbnREYXRhGAIg",
            "ASgLMhcuZ2FtZWtpdGRhdGEuQ2xpZW50RGF0YSJ3CgpTaWduSW5EYXRhEhMK",
            "C1RvdGFsU2lnbkluGAEgASgFEhkKEUNvbnNlY3V0aXZlU2lnbkluGAIgASgF",
            "EhIKCkxhc3RTaWduSW4YAyABKAkSDwoHcmV3YXJkcxgEIAMoBRIUCgxNaWxl",
            "c3RvbmVOdW0YBSABKAUigQEKEUNvbW11bml0eUxpbmtEYXRhEjwKB2xpbmtE",
            "aWMYASADKAsyKy5nYW1la2l0ZGF0YS5Db21tdW5pdHlMaW5rRGF0YS5MaW5r",
            "RGljRW50cnkaLgoMTGlua0RpY0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1",
            "ZRgCIAEoBToCOAFCRVoxZ2l0bGFiLmZ1bnBsdXMuaW8vZmF0L2NvbmYvZ2Vu",
            "L2dvbGFuZy9nYW1la2l0ZGF0YaoCD2ZhdC5nYW1la2l0ZGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.gamekitdata.ActivityReflection.Descriptor, global::fat.gamekitdata.BaseReflection.Descriptor, global::fat.gamekitdata.BoardActivityReflection.Descriptor, global::fat.gamekitdata.CardActivityReflection.Descriptor, global::fat.gamekitdata.ConditionTriggerReflection.Descriptor, global::fat.gamekitdata.DailyEventReflection.Descriptor, global::fat.gamekitdata.DecorateActivityReflection.Descriptor, global::fat.gamekitdata.IapReflection.Descriptor, global::fat.gamekitdata.MapSceneReflection.Descriptor, global::fat.gamekitdata.MergeReflection.Descriptor, global::fat.gamekitdata.MiniBoardReflection.Descriptor, global::fat.gamekitdata.MinigameReflection.Descriptor, global::fat.gamekitdata.OrderReflection.Descriptor, global::fat.gamekitdata.RemoteApiReflection.Descriptor, global::fat.gamekitdata.ShopReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ScreenPopup), global::fat.gamekitdata.ScreenPopup.Parser, new[]{ "Record", "RefreshTS" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.UserRecord), global::fat.gamekitdata.UserRecord.Parser, new[]{ "Level" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.HandbookData), global::fat.gamekitdata.HandbookData.Parser, new[]{ "Unread", "MergeItemUnlock", "MergeItemReward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.AdsData), global::fat.gamekitdata.AdsData.Parser, new[]{ "AdsId", "WatchCount", "NextResetTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.Tutorial), global::fat.gamekitdata.Tutorial.Parser, new[]{ "FinishMask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ClientStorageState), global::fat.gamekitdata.ClientStorageState.Parser, new[]{ "Data" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.PlayerGeneralData), global::fat.gamekitdata.PlayerGeneralData.Parser, new[]{ "Tutorial", "ClientStorage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.PlayerGameData), global::fat.gamekitdata.PlayerGameData.Parser, new[]{ "Merge", "MergeGlobal", "EnergyInfo", "HandbookData", "MainOrder", "MapScene", "ShopInfo", "DailyEvent", "AdsDataList", "Activity", "ScreenPopup", "CardActivity", "DecorateActivity", "Trigger", "Record", "MiniBoardActivity", "MiniGameData", "RemoteApiData", "BoardActivity", "SignInData", "UserTagApiData", "CommunityLinkData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ClientData), global::fat.gamekitdata.ClientData.Parser, new[]{ "Version", "LastUpdate", "LastSyncByClient", "PlayerGeneralData", "PlayerGameData", "IAP" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.LocalSaveData), global::fat.gamekitdata.LocalSaveData.Parser, new[]{ "PlayerBaseData", "ClientData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.SignInData), global::fat.gamekitdata.SignInData.Parser, new[]{ "TotalSignIn", "ConsecutiveSignIn", "LastSignIn", "Rewards", "MilestoneNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.CommunityLinkData), global::fat.gamekitdata.CommunityLinkData.Parser, new[]{ "LinkDic" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ScreenPopup : pb::IMessage<ScreenPopup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ScreenPopup> _parser = new pb::MessageParser<ScreenPopup>(() => new ScreenPopup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScreenPopup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ClientReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenPopup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenPopup(ScreenPopup other) : this() {
      record_ = other.record_.Clone();
      refreshTS_ = other.refreshTS_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenPopup Clone() {
      return new ScreenPopup(this);
    }

    /// <summary>Field number for the "Record" field.</summary>
    public const int RecordFieldNumber = 1;
    private static readonly pbc::MapField<int, int>.Codec _map_record_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 10);
    private readonly pbc::MapField<int, int> record_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Record {
      get { return record_; }
    }

    /// <summary>Field number for the "RefreshTS" field.</summary>
    public const int RefreshTSFieldNumber = 2;
    private long refreshTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RefreshTS {
      get { return refreshTS_; }
      set {
        refreshTS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScreenPopup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScreenPopup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Record.Equals(other.Record)) return false;
      if (RefreshTS != other.RefreshTS) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Record.GetHashCode();
      if (RefreshTS != 0L) hash ^= RefreshTS.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      record_.WriteTo(output, _map_record_codec);
      if (RefreshTS != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RefreshTS);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      record_.WriteTo(ref output, _map_record_codec);
      if (RefreshTS != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RefreshTS);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += record_.CalculateSize(_map_record_codec);
      if (RefreshTS != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RefreshTS);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScreenPopup other) {
      if (other == null) {
        return;
      }
      record_.Add(other.record_);
      if (other.RefreshTS != 0L) {
        RefreshTS = other.RefreshTS;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            record_.AddEntriesFrom(input, _map_record_codec);
            break;
          }
          case 16: {
            RefreshTS = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            record_.AddEntriesFrom(ref input, _map_record_codec);
            break;
          }
          case 16: {
            RefreshTS = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserRecord : pb::IMessage<UserRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserRecord> _parser = new pb::MessageParser<UserRecord>(() => new UserRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ClientReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserRecord(UserRecord other) : this() {
      level_ = other.level_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserRecord Clone() {
      return new UserRecord(this);
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 1;
    private static readonly pbc::MapField<int, long>.Codec _map_level_codec
        = new pbc::MapField<int, long>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<int, long> level_ = new pbc::MapField<int, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, long> Level {
      get { return level_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Level.Equals(other.Level)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      level_.WriteTo(output, _map_level_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      level_.WriteTo(ref output, _map_level_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += level_.CalculateSize(_map_level_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserRecord other) {
      if (other == null) {
        return;
      }
      level_.Add(other.level_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            level_.AddEntriesFrom(input, _map_level_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            level_.AddEntriesFrom(ref input, _map_level_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HandbookData : pb::IMessage<HandbookData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HandbookData> _parser = new pb::MessageParser<HandbookData>(() => new HandbookData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandbookData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ClientReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookData(HandbookData other) : this() {
      unread_ = other.unread_;
      mergeItemUnlock_ = other.mergeItemUnlock_.Clone();
      mergeItemReward_ = other.mergeItemReward_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandbookData Clone() {
      return new HandbookData(this);
    }

    /// <summary>Field number for the "Unread" field.</summary>
    public const int UnreadFieldNumber = 1;
    private bool unread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unread {
      get { return unread_; }
      set {
        unread_ = value;
      }
    }

    /// <summary>Field number for the "MergeItemUnlock" field.</summary>
    public const int MergeItemUnlockFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_mergeItemUnlock_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> mergeItemUnlock_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> MergeItemUnlock {
      get { return mergeItemUnlock_; }
    }

    /// <summary>Field number for the "MergeItemReward" field.</summary>
    public const int MergeItemRewardFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_mergeItemReward_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> mergeItemReward_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> MergeItemReward {
      get { return mergeItemReward_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandbookData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandbookData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Unread != other.Unread) return false;
      if(!mergeItemUnlock_.Equals(other.mergeItemUnlock_)) return false;
      if(!mergeItemReward_.Equals(other.mergeItemReward_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Unread != false) hash ^= Unread.GetHashCode();
      hash ^= mergeItemUnlock_.GetHashCode();
      hash ^= mergeItemReward_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Unread != false) {
        output.WriteRawTag(8);
        output.WriteBool(Unread);
      }
      mergeItemUnlock_.WriteTo(output, _repeated_mergeItemUnlock_codec);
      mergeItemReward_.WriteTo(output, _repeated_mergeItemReward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Unread != false) {
        output.WriteRawTag(8);
        output.WriteBool(Unread);
      }
      mergeItemUnlock_.WriteTo(ref output, _repeated_mergeItemUnlock_codec);
      mergeItemReward_.WriteTo(ref output, _repeated_mergeItemReward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Unread != false) {
        size += 1 + 1;
      }
      size += mergeItemUnlock_.CalculateSize(_repeated_mergeItemUnlock_codec);
      size += mergeItemReward_.CalculateSize(_repeated_mergeItemReward_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandbookData other) {
      if (other == null) {
        return;
      }
      if (other.Unread != false) {
        Unread = other.Unread;
      }
      mergeItemUnlock_.Add(other.mergeItemUnlock_);
      mergeItemReward_.Add(other.mergeItemReward_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Unread = input.ReadBool();
            break;
          }
          case 18:
          case 16: {
            mergeItemUnlock_.AddEntriesFrom(input, _repeated_mergeItemUnlock_codec);
            break;
          }
          case 26:
          case 24: {
            mergeItemReward_.AddEntriesFrom(input, _repeated_mergeItemReward_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Unread = input.ReadBool();
            break;
          }
          case 18:
          case 16: {
            mergeItemUnlock_.AddEntriesFrom(ref input, _repeated_mergeItemUnlock_codec);
            break;
          }
          case 26:
          case 24: {
            mergeItemReward_.AddEntriesFrom(ref input, _repeated_mergeItemReward_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AdsData : pb::IMessage<AdsData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdsData> _parser = new pb::MessageParser<AdsData>(() => new AdsData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdsData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ClientReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdsData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdsData(AdsData other) : this() {
      adsId_ = other.adsId_;
      watchCount_ = other.watchCount_;
      nextResetTime_ = other.nextResetTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdsData Clone() {
      return new AdsData(this);
    }

    /// <summary>Field number for the "AdsId" field.</summary>
    public const int AdsIdFieldNumber = 1;
    private int adsId_;
    /// <summary>
    ///广告口Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdsId {
      get { return adsId_; }
      set {
        adsId_ = value;
      }
    }

    /// <summary>Field number for the "WatchCount" field.</summary>
    public const int WatchCountFieldNumber = 2;
    private int watchCount_;
    /// <summary>
    ///该广告口今日已观看次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WatchCount {
      get { return watchCount_; }
      set {
        watchCount_ = value;
      }
    }

    /// <summary>Field number for the "NextResetTime" field.</summary>
    public const int NextResetTimeFieldNumber = 3;
    private long nextResetTime_;
    /// <summary>
    ///该广告口下次重置次数的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextResetTime {
      get { return nextResetTime_; }
      set {
        nextResetTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdsData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdsData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AdsId != other.AdsId) return false;
      if (WatchCount != other.WatchCount) return false;
      if (NextResetTime != other.NextResetTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AdsId != 0) hash ^= AdsId.GetHashCode();
      if (WatchCount != 0) hash ^= WatchCount.GetHashCode();
      if (NextResetTime != 0L) hash ^= NextResetTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AdsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AdsId);
      }
      if (WatchCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WatchCount);
      }
      if (NextResetTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NextResetTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AdsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AdsId);
      }
      if (WatchCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WatchCount);
      }
      if (NextResetTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NextResetTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AdsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdsId);
      }
      if (WatchCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WatchCount);
      }
      if (NextResetTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextResetTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdsData other) {
      if (other == null) {
        return;
      }
      if (other.AdsId != 0) {
        AdsId = other.AdsId;
      }
      if (other.WatchCount != 0) {
        WatchCount = other.WatchCount;
      }
      if (other.NextResetTime != 0L) {
        NextResetTime = other.NextResetTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AdsId = input.ReadInt32();
            break;
          }
          case 16: {
            WatchCount = input.ReadInt32();
            break;
          }
          case 24: {
            NextResetTime = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AdsId = input.ReadInt32();
            break;
          }
          case 16: {
            WatchCount = input.ReadInt32();
            break;
          }
          case 24: {
            NextResetTime = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Tutorial : pb::IMessage<Tutorial>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Tutorial> _parser = new pb::MessageParser<Tutorial>(() => new Tutorial());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tutorial> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ClientReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tutorial() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tutorial(Tutorial other) : this() {
      finishMask_ = other.finishMask_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tutorial Clone() {
      return new Tutorial(this);
    }

    /// <summary>Field number for the "FinishMask" field.</summary>
    public const int FinishMaskFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_finishMask_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> finishMask_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> FinishMask {
      get { return finishMask_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tutorial);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tutorial other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!finishMask_.Equals(other.finishMask_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= finishMask_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      finishMask_.WriteTo(output, _repeated_finishMask_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      finishMask_.WriteTo(ref output, _repeated_finishMask_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += finishMask_.CalculateSize(_repeated_finishMask_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tutorial other) {
      if (other == null) {
        return;
      }
      finishMask_.Add(other.finishMask_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 34:
          case 32: {
            finishMask_.AddEntriesFrom(input, _repeated_finishMask_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 34:
          case 32: {
            finishMask_.AddEntriesFrom(ref input, _repeated_finishMask_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ClientStorageState : pb::IMessage<ClientStorageState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientStorageState> _parser = new pb::MessageParser<ClientStorageState>(() => new ClientStorageState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientStorageState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ClientReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientStorageState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientStorageState(ClientStorageState other) : this() {
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientStorageState Clone() {
      return new ClientStorageState(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_data_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 10);
    private readonly pbc::MapField<string, string> data_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientStorageState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientStorageState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Data.Equals(other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      data_.WriteTo(output, _map_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      data_.WriteTo(ref output, _map_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_map_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientStorageState other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            data_.AddEntriesFrom(input, _map_data_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            data_.AddEntriesFrom(ref input, _map_data_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerGeneralData : pb::IMessage<PlayerGeneralData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerGeneralData> _parser = new pb::MessageParser<PlayerGeneralData>(() => new PlayerGeneralData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerGeneralData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ClientReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGeneralData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGeneralData(PlayerGeneralData other) : this() {
      tutorial_ = other.tutorial_ != null ? other.tutorial_.Clone() : null;
      clientStorage_ = other.clientStorage_ != null ? other.clientStorage_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGeneralData Clone() {
      return new PlayerGeneralData(this);
    }

    /// <summary>Field number for the "Tutorial" field.</summary>
    public const int TutorialFieldNumber = 1;
    private global::fat.gamekitdata.Tutorial tutorial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.Tutorial Tutorial {
      get { return tutorial_; }
      set {
        tutorial_ = value;
      }
    }

    /// <summary>Field number for the "ClientStorage" field.</summary>
    public const int ClientStorageFieldNumber = 2;
    private global::fat.gamekitdata.ClientStorageState clientStorage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ClientStorageState ClientStorage {
      get { return clientStorage_; }
      set {
        clientStorage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerGeneralData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerGeneralData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Tutorial, other.Tutorial)) return false;
      if (!object.Equals(ClientStorage, other.ClientStorage)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tutorial_ != null) hash ^= Tutorial.GetHashCode();
      if (clientStorage_ != null) hash ^= ClientStorage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (tutorial_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Tutorial);
      }
      if (clientStorage_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ClientStorage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (tutorial_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Tutorial);
      }
      if (clientStorage_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ClientStorage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tutorial_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tutorial);
      }
      if (clientStorage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientStorage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerGeneralData other) {
      if (other == null) {
        return;
      }
      if (other.tutorial_ != null) {
        if (tutorial_ == null) {
          Tutorial = new global::fat.gamekitdata.Tutorial();
        }
        Tutorial.MergeFrom(other.Tutorial);
      }
      if (other.clientStorage_ != null) {
        if (clientStorage_ == null) {
          ClientStorage = new global::fat.gamekitdata.ClientStorageState();
        }
        ClientStorage.MergeFrom(other.ClientStorage);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tutorial_ == null) {
              Tutorial = new global::fat.gamekitdata.Tutorial();
            }
            input.ReadMessage(Tutorial);
            break;
          }
          case 18: {
            if (clientStorage_ == null) {
              ClientStorage = new global::fat.gamekitdata.ClientStorageState();
            }
            input.ReadMessage(ClientStorage);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (tutorial_ == null) {
              Tutorial = new global::fat.gamekitdata.Tutorial();
            }
            input.ReadMessage(Tutorial);
            break;
          }
          case 18: {
            if (clientStorage_ == null) {
              ClientStorage = new global::fat.gamekitdata.ClientStorageState();
            }
            input.ReadMessage(ClientStorage);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerGameData : pb::IMessage<PlayerGameData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerGameData> _parser = new pb::MessageParser<PlayerGameData>(() => new PlayerGameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerGameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ClientReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGameData(PlayerGameData other) : this() {
      merge_ = other.merge_ != null ? other.merge_.Clone() : null;
      mergeGlobal_ = other.mergeGlobal_ != null ? other.mergeGlobal_.Clone() : null;
      energyInfo_ = other.energyInfo_ != null ? other.energyInfo_.Clone() : null;
      handbookData_ = other.handbookData_ != null ? other.handbookData_.Clone() : null;
      mainOrder_ = other.mainOrder_ != null ? other.mainOrder_.Clone() : null;
      mapScene_ = other.mapScene_ != null ? other.mapScene_.Clone() : null;
      shopInfo_ = other.shopInfo_ != null ? other.shopInfo_.Clone() : null;
      dailyEvent_ = other.dailyEvent_ != null ? other.dailyEvent_.Clone() : null;
      adsDataList_ = other.adsDataList_.Clone();
      activity_ = other.activity_ != null ? other.activity_.Clone() : null;
      screenPopup_ = other.screenPopup_ != null ? other.screenPopup_.Clone() : null;
      cardActivity_ = other.cardActivity_ != null ? other.cardActivity_.Clone() : null;
      decorateActivity_ = other.decorateActivity_ != null ? other.decorateActivity_.Clone() : null;
      trigger_ = other.trigger_ != null ? other.trigger_.Clone() : null;
      record_ = other.record_ != null ? other.record_.Clone() : null;
      miniBoardActivity_ = other.miniBoardActivity_ != null ? other.miniBoardActivity_.Clone() : null;
      miniGameData_ = other.miniGameData_ != null ? other.miniGameData_.Clone() : null;
      remoteApiData_ = other.remoteApiData_ != null ? other.remoteApiData_.Clone() : null;
      boardActivity_ = other.boardActivity_ != null ? other.boardActivity_.Clone() : null;
      signInData_ = other.signInData_ != null ? other.signInData_.Clone() : null;
      userTagApiData_ = other.userTagApiData_ != null ? other.userTagApiData_.Clone() : null;
      communityLinkData_ = other.communityLinkData_ != null ? other.communityLinkData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGameData Clone() {
      return new PlayerGameData(this);
    }

    /// <summary>Field number for the "Merge" field.</summary>
    public const int MergeFieldNumber = 1;
    private global::fat.gamekitdata.Merge merge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.Merge Merge {
      get { return merge_; }
      set {
        merge_ = value;
      }
    }

    /// <summary>Field number for the "MergeGlobal" field.</summary>
    public const int MergeGlobalFieldNumber = 2;
    private global::fat.gamekitdata.MergeGlobal mergeGlobal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.MergeGlobal MergeGlobal {
      get { return mergeGlobal_; }
      set {
        mergeGlobal_ = value;
      }
    }

    /// <summary>Field number for the "EnergyInfo" field.</summary>
    public const int EnergyInfoFieldNumber = 3;
    private global::fat.gamekitdata.EnergyInfo energyInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.EnergyInfo EnergyInfo {
      get { return energyInfo_; }
      set {
        energyInfo_ = value;
      }
    }

    /// <summary>Field number for the "HandbookData" field.</summary>
    public const int HandbookDataFieldNumber = 4;
    private global::fat.gamekitdata.HandbookData handbookData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.HandbookData HandbookData {
      get { return handbookData_; }
      set {
        handbookData_ = value;
      }
    }

    /// <summary>Field number for the "MainOrder" field.</summary>
    public const int MainOrderFieldNumber = 5;
    private global::fat.gamekitdata.OrderGroup mainOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.OrderGroup MainOrder {
      get { return mainOrder_; }
      set {
        mainOrder_ = value;
      }
    }

    /// <summary>Field number for the "MapScene" field.</summary>
    public const int MapSceneFieldNumber = 6;
    private global::fat.gamekitdata.MapScene mapScene_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.MapScene MapScene {
      get { return mapScene_; }
      set {
        mapScene_ = value;
      }
    }

    /// <summary>Field number for the "ShopInfo" field.</summary>
    public const int ShopInfoFieldNumber = 7;
    private global::fat.gamekitdata.ShopInfo shopInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ShopInfo ShopInfo {
      get { return shopInfo_; }
      set {
        shopInfo_ = value;
      }
    }

    /// <summary>Field number for the "DailyEvent" field.</summary>
    public const int DailyEventFieldNumber = 8;
    private global::fat.gamekitdata.DailyEvent dailyEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.DailyEvent DailyEvent {
      get { return dailyEvent_; }
      set {
        dailyEvent_ = value;
      }
    }

    /// <summary>Field number for the "AdsDataList" field.</summary>
    public const int AdsDataListFieldNumber = 10;
    private static readonly pb::FieldCodec<global::fat.gamekitdata.AdsData> _repeated_adsDataList_codec
        = pb::FieldCodec.ForMessage(82, global::fat.gamekitdata.AdsData.Parser);
    private readonly pbc::RepeatedField<global::fat.gamekitdata.AdsData> adsDataList_ = new pbc::RepeatedField<global::fat.gamekitdata.AdsData>();
    /// <summary>
    ///GiftPack GiftPack = 9;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.gamekitdata.AdsData> AdsDataList {
      get { return adsDataList_; }
    }

    /// <summary>Field number for the "Activity" field.</summary>
    public const int ActivityFieldNumber = 11;
    private global::fat.gamekitdata.Activity activity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.Activity Activity {
      get { return activity_; }
      set {
        activity_ = value;
      }
    }

    /// <summary>Field number for the "ScreenPopup" field.</summary>
    public const int ScreenPopupFieldNumber = 12;
    private global::fat.gamekitdata.ScreenPopup screenPopup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ScreenPopup ScreenPopup {
      get { return screenPopup_; }
      set {
        screenPopup_ = value;
      }
    }

    /// <summary>Field number for the "CardActivity" field.</summary>
    public const int CardActivityFieldNumber = 13;
    private global::fat.gamekitdata.CardActivity cardActivity_;
    /// <summary>
    ///集卡活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.CardActivity CardActivity {
      get { return cardActivity_; }
      set {
        cardActivity_ = value;
      }
    }

    /// <summary>Field number for the "DecorateActivity" field.</summary>
    public const int DecorateActivityFieldNumber = 14;
    private global::fat.gamekitdata.DecorateActivity decorateActivity_;
    /// <summary>
    ///装饰区活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.DecorateActivity DecorateActivity {
      get { return decorateActivity_; }
      set {
        decorateActivity_ = value;
      }
    }

    /// <summary>Field number for the "Trigger" field.</summary>
    public const int TriggerFieldNumber = 15;
    private global::fat.gamekitdata.ConditionTrigger trigger_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ConditionTrigger Trigger {
      get { return trigger_; }
      set {
        trigger_ = value;
      }
    }

    /// <summary>Field number for the "Record" field.</summary>
    public const int RecordFieldNumber = 16;
    private global::fat.gamekitdata.UserRecord record_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.UserRecord Record {
      get { return record_; }
      set {
        record_ = value;
      }
    }

    /// <summary>Field number for the "MiniBoardActivity" field.</summary>
    public const int MiniBoardActivityFieldNumber = 17;
    private global::fat.gamekitdata.MiniBoardActivity miniBoardActivity_;
    /// <summary>
    ///迷你棋盘活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.MiniBoardActivity MiniBoardActivity {
      get { return miniBoardActivity_; }
      set {
        miniBoardActivity_ = value;
      }
    }

    /// <summary>Field number for the "MiniGameData" field.</summary>
    public const int MiniGameDataFieldNumber = 18;
    private global::fat.gamekitdata.MiniGameData miniGameData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.MiniGameData MiniGameData {
      get { return miniGameData_; }
      set {
        miniGameData_ = value;
      }
    }

    /// <summary>Field number for the "RemoteApiData" field.</summary>
    public const int RemoteApiDataFieldNumber = 19;
    private global::fat.gamekitdata.RemoteApiData remoteApiData_;
    /// <summary>
    ///api相关的数据存储
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.RemoteApiData RemoteApiData {
      get { return remoteApiData_; }
      set {
        remoteApiData_ = value;
      }
    }

    /// <summary>Field number for the "BoardActivity" field.</summary>
    public const int BoardActivityFieldNumber = 20;
    private global::fat.gamekitdata.BoardActivity boardActivity_;
    /// <summary>
    ///通用棋盘活动数据类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.BoardActivity BoardActivity {
      get { return boardActivity_; }
      set {
        boardActivity_ = value;
      }
    }

    /// <summary>Field number for the "SignInData" field.</summary>
    public const int SignInDataFieldNumber = 21;
    private global::fat.gamekitdata.SignInData signInData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.SignInData SignInData {
      get { return signInData_; }
      set {
        signInData_ = value;
      }
    }

    /// <summary>Field number for the "UserTagApiData" field.</summary>
    public const int UserTagApiDataFieldNumber = 22;
    private global::fat.gamekitdata.UserTagApiData userTagApiData_;
    /// <summary>
    ///存储通过难度API获取到的用户分层标签信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.UserTagApiData UserTagApiData {
      get { return userTagApiData_; }
      set {
        userTagApiData_ = value;
      }
    }

    /// <summary>Field number for the "CommunityLinkData" field.</summary>
    public const int CommunityLinkDataFieldNumber = 23;
    private global::fat.gamekitdata.CommunityLinkData communityLinkData_;
    /// <summary>
    ///存储社区数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.CommunityLinkData CommunityLinkData {
      get { return communityLinkData_; }
      set {
        communityLinkData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerGameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerGameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Merge, other.Merge)) return false;
      if (!object.Equals(MergeGlobal, other.MergeGlobal)) return false;
      if (!object.Equals(EnergyInfo, other.EnergyInfo)) return false;
      if (!object.Equals(HandbookData, other.HandbookData)) return false;
      if (!object.Equals(MainOrder, other.MainOrder)) return false;
      if (!object.Equals(MapScene, other.MapScene)) return false;
      if (!object.Equals(ShopInfo, other.ShopInfo)) return false;
      if (!object.Equals(DailyEvent, other.DailyEvent)) return false;
      if(!adsDataList_.Equals(other.adsDataList_)) return false;
      if (!object.Equals(Activity, other.Activity)) return false;
      if (!object.Equals(ScreenPopup, other.ScreenPopup)) return false;
      if (!object.Equals(CardActivity, other.CardActivity)) return false;
      if (!object.Equals(DecorateActivity, other.DecorateActivity)) return false;
      if (!object.Equals(Trigger, other.Trigger)) return false;
      if (!object.Equals(Record, other.Record)) return false;
      if (!object.Equals(MiniBoardActivity, other.MiniBoardActivity)) return false;
      if (!object.Equals(MiniGameData, other.MiniGameData)) return false;
      if (!object.Equals(RemoteApiData, other.RemoteApiData)) return false;
      if (!object.Equals(BoardActivity, other.BoardActivity)) return false;
      if (!object.Equals(SignInData, other.SignInData)) return false;
      if (!object.Equals(UserTagApiData, other.UserTagApiData)) return false;
      if (!object.Equals(CommunityLinkData, other.CommunityLinkData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (merge_ != null) hash ^= Merge.GetHashCode();
      if (mergeGlobal_ != null) hash ^= MergeGlobal.GetHashCode();
      if (energyInfo_ != null) hash ^= EnergyInfo.GetHashCode();
      if (handbookData_ != null) hash ^= HandbookData.GetHashCode();
      if (mainOrder_ != null) hash ^= MainOrder.GetHashCode();
      if (mapScene_ != null) hash ^= MapScene.GetHashCode();
      if (shopInfo_ != null) hash ^= ShopInfo.GetHashCode();
      if (dailyEvent_ != null) hash ^= DailyEvent.GetHashCode();
      hash ^= adsDataList_.GetHashCode();
      if (activity_ != null) hash ^= Activity.GetHashCode();
      if (screenPopup_ != null) hash ^= ScreenPopup.GetHashCode();
      if (cardActivity_ != null) hash ^= CardActivity.GetHashCode();
      if (decorateActivity_ != null) hash ^= DecorateActivity.GetHashCode();
      if (trigger_ != null) hash ^= Trigger.GetHashCode();
      if (record_ != null) hash ^= Record.GetHashCode();
      if (miniBoardActivity_ != null) hash ^= MiniBoardActivity.GetHashCode();
      if (miniGameData_ != null) hash ^= MiniGameData.GetHashCode();
      if (remoteApiData_ != null) hash ^= RemoteApiData.GetHashCode();
      if (boardActivity_ != null) hash ^= BoardActivity.GetHashCode();
      if (signInData_ != null) hash ^= SignInData.GetHashCode();
      if (userTagApiData_ != null) hash ^= UserTagApiData.GetHashCode();
      if (communityLinkData_ != null) hash ^= CommunityLinkData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (merge_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Merge);
      }
      if (mergeGlobal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MergeGlobal);
      }
      if (energyInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EnergyInfo);
      }
      if (handbookData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(HandbookData);
      }
      if (mainOrder_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MainOrder);
      }
      if (mapScene_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MapScene);
      }
      if (shopInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ShopInfo);
      }
      if (dailyEvent_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DailyEvent);
      }
      adsDataList_.WriteTo(output, _repeated_adsDataList_codec);
      if (activity_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Activity);
      }
      if (screenPopup_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ScreenPopup);
      }
      if (cardActivity_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(CardActivity);
      }
      if (decorateActivity_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(DecorateActivity);
      }
      if (trigger_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Trigger);
      }
      if (record_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Record);
      }
      if (miniBoardActivity_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(MiniBoardActivity);
      }
      if (miniGameData_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MiniGameData);
      }
      if (remoteApiData_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(RemoteApiData);
      }
      if (boardActivity_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(BoardActivity);
      }
      if (signInData_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(SignInData);
      }
      if (userTagApiData_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(UserTagApiData);
      }
      if (communityLinkData_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(CommunityLinkData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (merge_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Merge);
      }
      if (mergeGlobal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MergeGlobal);
      }
      if (energyInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EnergyInfo);
      }
      if (handbookData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(HandbookData);
      }
      if (mainOrder_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MainOrder);
      }
      if (mapScene_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MapScene);
      }
      if (shopInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ShopInfo);
      }
      if (dailyEvent_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DailyEvent);
      }
      adsDataList_.WriteTo(ref output, _repeated_adsDataList_codec);
      if (activity_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Activity);
      }
      if (screenPopup_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ScreenPopup);
      }
      if (cardActivity_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(CardActivity);
      }
      if (decorateActivity_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(DecorateActivity);
      }
      if (trigger_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Trigger);
      }
      if (record_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Record);
      }
      if (miniBoardActivity_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(MiniBoardActivity);
      }
      if (miniGameData_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MiniGameData);
      }
      if (remoteApiData_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(RemoteApiData);
      }
      if (boardActivity_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(BoardActivity);
      }
      if (signInData_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(SignInData);
      }
      if (userTagApiData_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(UserTagApiData);
      }
      if (communityLinkData_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(CommunityLinkData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (merge_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Merge);
      }
      if (mergeGlobal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MergeGlobal);
      }
      if (energyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnergyInfo);
      }
      if (handbookData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandbookData);
      }
      if (mainOrder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainOrder);
      }
      if (mapScene_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapScene);
      }
      if (shopInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShopInfo);
      }
      if (dailyEvent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyEvent);
      }
      size += adsDataList_.CalculateSize(_repeated_adsDataList_codec);
      if (activity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activity);
      }
      if (screenPopup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScreenPopup);
      }
      if (cardActivity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardActivity);
      }
      if (decorateActivity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DecorateActivity);
      }
      if (trigger_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trigger);
      }
      if (record_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      if (miniBoardActivity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MiniBoardActivity);
      }
      if (miniGameData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MiniGameData);
      }
      if (remoteApiData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RemoteApiData);
      }
      if (boardActivity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BoardActivity);
      }
      if (signInData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SignInData);
      }
      if (userTagApiData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserTagApiData);
      }
      if (communityLinkData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CommunityLinkData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerGameData other) {
      if (other == null) {
        return;
      }
      if (other.merge_ != null) {
        if (merge_ == null) {
          Merge = new global::fat.gamekitdata.Merge();
        }
        Merge.MergeFrom(other.Merge);
      }
      if (other.mergeGlobal_ != null) {
        if (mergeGlobal_ == null) {
          MergeGlobal = new global::fat.gamekitdata.MergeGlobal();
        }
        MergeGlobal.MergeFrom(other.MergeGlobal);
      }
      if (other.energyInfo_ != null) {
        if (energyInfo_ == null) {
          EnergyInfo = new global::fat.gamekitdata.EnergyInfo();
        }
        EnergyInfo.MergeFrom(other.EnergyInfo);
      }
      if (other.handbookData_ != null) {
        if (handbookData_ == null) {
          HandbookData = new global::fat.gamekitdata.HandbookData();
        }
        HandbookData.MergeFrom(other.HandbookData);
      }
      if (other.mainOrder_ != null) {
        if (mainOrder_ == null) {
          MainOrder = new global::fat.gamekitdata.OrderGroup();
        }
        MainOrder.MergeFrom(other.MainOrder);
      }
      if (other.mapScene_ != null) {
        if (mapScene_ == null) {
          MapScene = new global::fat.gamekitdata.MapScene();
        }
        MapScene.MergeFrom(other.MapScene);
      }
      if (other.shopInfo_ != null) {
        if (shopInfo_ == null) {
          ShopInfo = new global::fat.gamekitdata.ShopInfo();
        }
        ShopInfo.MergeFrom(other.ShopInfo);
      }
      if (other.dailyEvent_ != null) {
        if (dailyEvent_ == null) {
          DailyEvent = new global::fat.gamekitdata.DailyEvent();
        }
        DailyEvent.MergeFrom(other.DailyEvent);
      }
      adsDataList_.Add(other.adsDataList_);
      if (other.activity_ != null) {
        if (activity_ == null) {
          Activity = new global::fat.gamekitdata.Activity();
        }
        Activity.MergeFrom(other.Activity);
      }
      if (other.screenPopup_ != null) {
        if (screenPopup_ == null) {
          ScreenPopup = new global::fat.gamekitdata.ScreenPopup();
        }
        ScreenPopup.MergeFrom(other.ScreenPopup);
      }
      if (other.cardActivity_ != null) {
        if (cardActivity_ == null) {
          CardActivity = new global::fat.gamekitdata.CardActivity();
        }
        CardActivity.MergeFrom(other.CardActivity);
      }
      if (other.decorateActivity_ != null) {
        if (decorateActivity_ == null) {
          DecorateActivity = new global::fat.gamekitdata.DecorateActivity();
        }
        DecorateActivity.MergeFrom(other.DecorateActivity);
      }
      if (other.trigger_ != null) {
        if (trigger_ == null) {
          Trigger = new global::fat.gamekitdata.ConditionTrigger();
        }
        Trigger.MergeFrom(other.Trigger);
      }
      if (other.record_ != null) {
        if (record_ == null) {
          Record = new global::fat.gamekitdata.UserRecord();
        }
        Record.MergeFrom(other.Record);
      }
      if (other.miniBoardActivity_ != null) {
        if (miniBoardActivity_ == null) {
          MiniBoardActivity = new global::fat.gamekitdata.MiniBoardActivity();
        }
        MiniBoardActivity.MergeFrom(other.MiniBoardActivity);
      }
      if (other.miniGameData_ != null) {
        if (miniGameData_ == null) {
          MiniGameData = new global::fat.gamekitdata.MiniGameData();
        }
        MiniGameData.MergeFrom(other.MiniGameData);
      }
      if (other.remoteApiData_ != null) {
        if (remoteApiData_ == null) {
          RemoteApiData = new global::fat.gamekitdata.RemoteApiData();
        }
        RemoteApiData.MergeFrom(other.RemoteApiData);
      }
      if (other.boardActivity_ != null) {
        if (boardActivity_ == null) {
          BoardActivity = new global::fat.gamekitdata.BoardActivity();
        }
        BoardActivity.MergeFrom(other.BoardActivity);
      }
      if (other.signInData_ != null) {
        if (signInData_ == null) {
          SignInData = new global::fat.gamekitdata.SignInData();
        }
        SignInData.MergeFrom(other.SignInData);
      }
      if (other.userTagApiData_ != null) {
        if (userTagApiData_ == null) {
          UserTagApiData = new global::fat.gamekitdata.UserTagApiData();
        }
        UserTagApiData.MergeFrom(other.UserTagApiData);
      }
      if (other.communityLinkData_ != null) {
        if (communityLinkData_ == null) {
          CommunityLinkData = new global::fat.gamekitdata.CommunityLinkData();
        }
        CommunityLinkData.MergeFrom(other.CommunityLinkData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (merge_ == null) {
              Merge = new global::fat.gamekitdata.Merge();
            }
            input.ReadMessage(Merge);
            break;
          }
          case 18: {
            if (mergeGlobal_ == null) {
              MergeGlobal = new global::fat.gamekitdata.MergeGlobal();
            }
            input.ReadMessage(MergeGlobal);
            break;
          }
          case 26: {
            if (energyInfo_ == null) {
              EnergyInfo = new global::fat.gamekitdata.EnergyInfo();
            }
            input.ReadMessage(EnergyInfo);
            break;
          }
          case 34: {
            if (handbookData_ == null) {
              HandbookData = new global::fat.gamekitdata.HandbookData();
            }
            input.ReadMessage(HandbookData);
            break;
          }
          case 42: {
            if (mainOrder_ == null) {
              MainOrder = new global::fat.gamekitdata.OrderGroup();
            }
            input.ReadMessage(MainOrder);
            break;
          }
          case 50: {
            if (mapScene_ == null) {
              MapScene = new global::fat.gamekitdata.MapScene();
            }
            input.ReadMessage(MapScene);
            break;
          }
          case 58: {
            if (shopInfo_ == null) {
              ShopInfo = new global::fat.gamekitdata.ShopInfo();
            }
            input.ReadMessage(ShopInfo);
            break;
          }
          case 66: {
            if (dailyEvent_ == null) {
              DailyEvent = new global::fat.gamekitdata.DailyEvent();
            }
            input.ReadMessage(DailyEvent);
            break;
          }
          case 82: {
            adsDataList_.AddEntriesFrom(input, _repeated_adsDataList_codec);
            break;
          }
          case 90: {
            if (activity_ == null) {
              Activity = new global::fat.gamekitdata.Activity();
            }
            input.ReadMessage(Activity);
            break;
          }
          case 98: {
            if (screenPopup_ == null) {
              ScreenPopup = new global::fat.gamekitdata.ScreenPopup();
            }
            input.ReadMessage(ScreenPopup);
            break;
          }
          case 106: {
            if (cardActivity_ == null) {
              CardActivity = new global::fat.gamekitdata.CardActivity();
            }
            input.ReadMessage(CardActivity);
            break;
          }
          case 114: {
            if (decorateActivity_ == null) {
              DecorateActivity = new global::fat.gamekitdata.DecorateActivity();
            }
            input.ReadMessage(DecorateActivity);
            break;
          }
          case 122: {
            if (trigger_ == null) {
              Trigger = new global::fat.gamekitdata.ConditionTrigger();
            }
            input.ReadMessage(Trigger);
            break;
          }
          case 130: {
            if (record_ == null) {
              Record = new global::fat.gamekitdata.UserRecord();
            }
            input.ReadMessage(Record);
            break;
          }
          case 138: {
            if (miniBoardActivity_ == null) {
              MiniBoardActivity = new global::fat.gamekitdata.MiniBoardActivity();
            }
            input.ReadMessage(MiniBoardActivity);
            break;
          }
          case 146: {
            if (miniGameData_ == null) {
              MiniGameData = new global::fat.gamekitdata.MiniGameData();
            }
            input.ReadMessage(MiniGameData);
            break;
          }
          case 154: {
            if (remoteApiData_ == null) {
              RemoteApiData = new global::fat.gamekitdata.RemoteApiData();
            }
            input.ReadMessage(RemoteApiData);
            break;
          }
          case 162: {
            if (boardActivity_ == null) {
              BoardActivity = new global::fat.gamekitdata.BoardActivity();
            }
            input.ReadMessage(BoardActivity);
            break;
          }
          case 170: {
            if (signInData_ == null) {
              SignInData = new global::fat.gamekitdata.SignInData();
            }
            input.ReadMessage(SignInData);
            break;
          }
          case 178: {
            if (userTagApiData_ == null) {
              UserTagApiData = new global::fat.gamekitdata.UserTagApiData();
            }
            input.ReadMessage(UserTagApiData);
            break;
          }
          case 186: {
            if (communityLinkData_ == null) {
              CommunityLinkData = new global::fat.gamekitdata.CommunityLinkData();
            }
            input.ReadMessage(CommunityLinkData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (merge_ == null) {
              Merge = new global::fat.gamekitdata.Merge();
            }
            input.ReadMessage(Merge);
            break;
          }
          case 18: {
            if (mergeGlobal_ == null) {
              MergeGlobal = new global::fat.gamekitdata.MergeGlobal();
            }
            input.ReadMessage(MergeGlobal);
            break;
          }
          case 26: {
            if (energyInfo_ == null) {
              EnergyInfo = new global::fat.gamekitdata.EnergyInfo();
            }
            input.ReadMessage(EnergyInfo);
            break;
          }
          case 34: {
            if (handbookData_ == null) {
              HandbookData = new global::fat.gamekitdata.HandbookData();
            }
            input.ReadMessage(HandbookData);
            break;
          }
          case 42: {
            if (mainOrder_ == null) {
              MainOrder = new global::fat.gamekitdata.OrderGroup();
            }
            input.ReadMessage(MainOrder);
            break;
          }
          case 50: {
            if (mapScene_ == null) {
              MapScene = new global::fat.gamekitdata.MapScene();
            }
            input.ReadMessage(MapScene);
            break;
          }
          case 58: {
            if (shopInfo_ == null) {
              ShopInfo = new global::fat.gamekitdata.ShopInfo();
            }
            input.ReadMessage(ShopInfo);
            break;
          }
          case 66: {
            if (dailyEvent_ == null) {
              DailyEvent = new global::fat.gamekitdata.DailyEvent();
            }
            input.ReadMessage(DailyEvent);
            break;
          }
          case 82: {
            adsDataList_.AddEntriesFrom(ref input, _repeated_adsDataList_codec);
            break;
          }
          case 90: {
            if (activity_ == null) {
              Activity = new global::fat.gamekitdata.Activity();
            }
            input.ReadMessage(Activity);
            break;
          }
          case 98: {
            if (screenPopup_ == null) {
              ScreenPopup = new global::fat.gamekitdata.ScreenPopup();
            }
            input.ReadMessage(ScreenPopup);
            break;
          }
          case 106: {
            if (cardActivity_ == null) {
              CardActivity = new global::fat.gamekitdata.CardActivity();
            }
            input.ReadMessage(CardActivity);
            break;
          }
          case 114: {
            if (decorateActivity_ == null) {
              DecorateActivity = new global::fat.gamekitdata.DecorateActivity();
            }
            input.ReadMessage(DecorateActivity);
            break;
          }
          case 122: {
            if (trigger_ == null) {
              Trigger = new global::fat.gamekitdata.ConditionTrigger();
            }
            input.ReadMessage(Trigger);
            break;
          }
          case 130: {
            if (record_ == null) {
              Record = new global::fat.gamekitdata.UserRecord();
            }
            input.ReadMessage(Record);
            break;
          }
          case 138: {
            if (miniBoardActivity_ == null) {
              MiniBoardActivity = new global::fat.gamekitdata.MiniBoardActivity();
            }
            input.ReadMessage(MiniBoardActivity);
            break;
          }
          case 146: {
            if (miniGameData_ == null) {
              MiniGameData = new global::fat.gamekitdata.MiniGameData();
            }
            input.ReadMessage(MiniGameData);
            break;
          }
          case 154: {
            if (remoteApiData_ == null) {
              RemoteApiData = new global::fat.gamekitdata.RemoteApiData();
            }
            input.ReadMessage(RemoteApiData);
            break;
          }
          case 162: {
            if (boardActivity_ == null) {
              BoardActivity = new global::fat.gamekitdata.BoardActivity();
            }
            input.ReadMessage(BoardActivity);
            break;
          }
          case 170: {
            if (signInData_ == null) {
              SignInData = new global::fat.gamekitdata.SignInData();
            }
            input.ReadMessage(SignInData);
            break;
          }
          case 178: {
            if (userTagApiData_ == null) {
              UserTagApiData = new global::fat.gamekitdata.UserTagApiData();
            }
            input.ReadMessage(UserTagApiData);
            break;
          }
          case 186: {
            if (communityLinkData_ == null) {
              CommunityLinkData = new global::fat.gamekitdata.CommunityLinkData();
            }
            input.ReadMessage(CommunityLinkData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ClientData : pb::IMessage<ClientData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientData> _parser = new pb::MessageParser<ClientData>(() => new ClientData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ClientReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientData(ClientData other) : this() {
      version_ = other.version_;
      lastUpdate_ = other.lastUpdate_;
      lastSyncByClient_ = other.lastSyncByClient_;
      playerGeneralData_ = other.playerGeneralData_ != null ? other.playerGeneralData_.Clone() : null;
      playerGameData_ = other.playerGameData_ != null ? other.playerGameData_.Clone() : null;
      iAP_ = other.iAP_ != null ? other.iAP_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientData Clone() {
      return new ClientData(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    /// <summary>
    /// 存档版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "LastUpdate" field.</summary>
    public const int LastUpdateFieldNumber = 2;
    private long lastUpdate_;
    /// <summary>
    /// 上次存档被修改的时间戳（本地计算的服务器时间）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    /// <summary>Field number for the "LastSyncByClient" field.</summary>
    public const int LastSyncByClientFieldNumber = 3;
    private long lastSyncByClient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastSyncByClient {
      get { return lastSyncByClient_; }
      set {
        lastSyncByClient_ = value;
      }
    }

    /// <summary>Field number for the "PlayerGeneralData" field.</summary>
    public const int PlayerGeneralDataFieldNumber = 4;
    private global::fat.gamekitdata.PlayerGeneralData playerGeneralData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.PlayerGeneralData PlayerGeneralData {
      get { return playerGeneralData_; }
      set {
        playerGeneralData_ = value;
      }
    }

    /// <summary>Field number for the "PlayerGameData" field.</summary>
    public const int PlayerGameDataFieldNumber = 5;
    private global::fat.gamekitdata.PlayerGameData playerGameData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.PlayerGameData PlayerGameData {
      get { return playerGameData_; }
      set {
        playerGameData_ = value;
      }
    }

    /// <summary>Field number for the "IAP" field.</summary>
    public const int IAPFieldNumber = 6;
    private global::fat.gamekitdata.IAPData iAP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.IAPData IAP {
      get { return iAP_; }
      set {
        iAP_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (LastUpdate != other.LastUpdate) return false;
      if (LastSyncByClient != other.LastSyncByClient) return false;
      if (!object.Equals(PlayerGeneralData, other.PlayerGeneralData)) return false;
      if (!object.Equals(PlayerGameData, other.PlayerGameData)) return false;
      if (!object.Equals(IAP, other.IAP)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (LastUpdate != 0L) hash ^= LastUpdate.GetHashCode();
      if (LastSyncByClient != 0L) hash ^= LastSyncByClient.GetHashCode();
      if (playerGeneralData_ != null) hash ^= PlayerGeneralData.GetHashCode();
      if (playerGameData_ != null) hash ^= PlayerGameData.GetHashCode();
      if (iAP_ != null) hash ^= IAP.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (LastUpdate != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastUpdate);
      }
      if (LastSyncByClient != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LastSyncByClient);
      }
      if (playerGeneralData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayerGeneralData);
      }
      if (playerGameData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerGameData);
      }
      if (iAP_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(IAP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (LastUpdate != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastUpdate);
      }
      if (LastSyncByClient != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LastSyncByClient);
      }
      if (playerGeneralData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayerGeneralData);
      }
      if (playerGameData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerGameData);
      }
      if (iAP_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(IAP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (LastUpdate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastUpdate);
      }
      if (LastSyncByClient != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastSyncByClient);
      }
      if (playerGeneralData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerGeneralData);
      }
      if (playerGameData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerGameData);
      }
      if (iAP_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IAP);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientData other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.LastUpdate != 0L) {
        LastUpdate = other.LastUpdate;
      }
      if (other.LastSyncByClient != 0L) {
        LastSyncByClient = other.LastSyncByClient;
      }
      if (other.playerGeneralData_ != null) {
        if (playerGeneralData_ == null) {
          PlayerGeneralData = new global::fat.gamekitdata.PlayerGeneralData();
        }
        PlayerGeneralData.MergeFrom(other.PlayerGeneralData);
      }
      if (other.playerGameData_ != null) {
        if (playerGameData_ == null) {
          PlayerGameData = new global::fat.gamekitdata.PlayerGameData();
        }
        PlayerGameData.MergeFrom(other.PlayerGameData);
      }
      if (other.iAP_ != null) {
        if (iAP_ == null) {
          IAP = new global::fat.gamekitdata.IAPData();
        }
        IAP.MergeFrom(other.IAP);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 16: {
            LastUpdate = input.ReadInt64();
            break;
          }
          case 24: {
            LastSyncByClient = input.ReadInt64();
            break;
          }
          case 34: {
            if (playerGeneralData_ == null) {
              PlayerGeneralData = new global::fat.gamekitdata.PlayerGeneralData();
            }
            input.ReadMessage(PlayerGeneralData);
            break;
          }
          case 42: {
            if (playerGameData_ == null) {
              PlayerGameData = new global::fat.gamekitdata.PlayerGameData();
            }
            input.ReadMessage(PlayerGameData);
            break;
          }
          case 50: {
            if (iAP_ == null) {
              IAP = new global::fat.gamekitdata.IAPData();
            }
            input.ReadMessage(IAP);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 16: {
            LastUpdate = input.ReadInt64();
            break;
          }
          case 24: {
            LastSyncByClient = input.ReadInt64();
            break;
          }
          case 34: {
            if (playerGeneralData_ == null) {
              PlayerGeneralData = new global::fat.gamekitdata.PlayerGeneralData();
            }
            input.ReadMessage(PlayerGeneralData);
            break;
          }
          case 42: {
            if (playerGameData_ == null) {
              PlayerGameData = new global::fat.gamekitdata.PlayerGameData();
            }
            input.ReadMessage(PlayerGameData);
            break;
          }
          case 50: {
            if (iAP_ == null) {
              IAP = new global::fat.gamekitdata.IAPData();
            }
            input.ReadMessage(IAP);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 为方便本地存档 包装一个SaveData结构将两部分数据容纳一下
  /// </summary>
  public sealed partial class LocalSaveData : pb::IMessage<LocalSaveData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LocalSaveData> _parser = new pb::MessageParser<LocalSaveData>(() => new LocalSaveData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalSaveData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ClientReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalSaveData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalSaveData(LocalSaveData other) : this() {
      playerBaseData_ = other.playerBaseData_ != null ? other.playerBaseData_.Clone() : null;
      clientData_ = other.clientData_ != null ? other.clientData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalSaveData Clone() {
      return new LocalSaveData(this);
    }

    /// <summary>Field number for the "PlayerBaseData" field.</summary>
    public const int PlayerBaseDataFieldNumber = 1;
    private global::fat.gamekitdata.PlayerBaseData playerBaseData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.PlayerBaseData PlayerBaseData {
      get { return playerBaseData_; }
      set {
        playerBaseData_ = value;
      }
    }

    /// <summary>Field number for the "ClientData" field.</summary>
    public const int ClientDataFieldNumber = 2;
    private global::fat.gamekitdata.ClientData clientData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.ClientData ClientData {
      get { return clientData_; }
      set {
        clientData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalSaveData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalSaveData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerBaseData, other.PlayerBaseData)) return false;
      if (!object.Equals(ClientData, other.ClientData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerBaseData_ != null) hash ^= PlayerBaseData.GetHashCode();
      if (clientData_ != null) hash ^= ClientData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (playerBaseData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerBaseData);
      }
      if (clientData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ClientData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (playerBaseData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerBaseData);
      }
      if (clientData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ClientData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerBaseData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerBaseData);
      }
      if (clientData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalSaveData other) {
      if (other == null) {
        return;
      }
      if (other.playerBaseData_ != null) {
        if (playerBaseData_ == null) {
          PlayerBaseData = new global::fat.gamekitdata.PlayerBaseData();
        }
        PlayerBaseData.MergeFrom(other.PlayerBaseData);
      }
      if (other.clientData_ != null) {
        if (clientData_ == null) {
          ClientData = new global::fat.gamekitdata.ClientData();
        }
        ClientData.MergeFrom(other.ClientData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerBaseData_ == null) {
              PlayerBaseData = new global::fat.gamekitdata.PlayerBaseData();
            }
            input.ReadMessage(PlayerBaseData);
            break;
          }
          case 18: {
            if (clientData_ == null) {
              ClientData = new global::fat.gamekitdata.ClientData();
            }
            input.ReadMessage(ClientData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (playerBaseData_ == null) {
              PlayerBaseData = new global::fat.gamekitdata.PlayerBaseData();
            }
            input.ReadMessage(PlayerBaseData);
            break;
          }
          case 18: {
            if (clientData_ == null) {
              ClientData = new global::fat.gamekitdata.ClientData();
            }
            input.ReadMessage(ClientData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SignInData : pb::IMessage<SignInData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SignInData> _parser = new pb::MessageParser<SignInData>(() => new SignInData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignInData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ClientReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignInData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignInData(SignInData other) : this() {
      totalSignIn_ = other.totalSignIn_;
      consecutiveSignIn_ = other.consecutiveSignIn_;
      lastSignIn_ = other.lastSignIn_;
      rewards_ = other.rewards_.Clone();
      milestoneNum_ = other.milestoneNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignInData Clone() {
      return new SignInData(this);
    }

    /// <summary>Field number for the "TotalSignIn" field.</summary>
    public const int TotalSignInFieldNumber = 1;
    private int totalSignIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalSignIn {
      get { return totalSignIn_; }
      set {
        totalSignIn_ = value;
      }
    }

    /// <summary>Field number for the "ConsecutiveSignIn" field.</summary>
    public const int ConsecutiveSignInFieldNumber = 2;
    private int consecutiveSignIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConsecutiveSignIn {
      get { return consecutiveSignIn_; }
      set {
        consecutiveSignIn_ = value;
      }
    }

    /// <summary>Field number for the "LastSignIn" field.</summary>
    public const int LastSignInFieldNumber = 3;
    private string lastSignIn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastSignIn {
      get { return lastSignIn_; }
      set {
        lastSignIn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_rewards_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> rewards_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "MilestoneNum" field.</summary>
    public const int MilestoneNumFieldNumber = 5;
    private int milestoneNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MilestoneNum {
      get { return milestoneNum_; }
      set {
        milestoneNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignInData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignInData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalSignIn != other.TotalSignIn) return false;
      if (ConsecutiveSignIn != other.ConsecutiveSignIn) return false;
      if (LastSignIn != other.LastSignIn) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      if (MilestoneNum != other.MilestoneNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalSignIn != 0) hash ^= TotalSignIn.GetHashCode();
      if (ConsecutiveSignIn != 0) hash ^= ConsecutiveSignIn.GetHashCode();
      if (LastSignIn.Length != 0) hash ^= LastSignIn.GetHashCode();
      hash ^= rewards_.GetHashCode();
      if (MilestoneNum != 0) hash ^= MilestoneNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalSignIn != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalSignIn);
      }
      if (ConsecutiveSignIn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConsecutiveSignIn);
      }
      if (LastSignIn.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LastSignIn);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (MilestoneNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MilestoneNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalSignIn != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalSignIn);
      }
      if (ConsecutiveSignIn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConsecutiveSignIn);
      }
      if (LastSignIn.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LastSignIn);
      }
      rewards_.WriteTo(ref output, _repeated_rewards_codec);
      if (MilestoneNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MilestoneNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalSignIn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalSignIn);
      }
      if (ConsecutiveSignIn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConsecutiveSignIn);
      }
      if (LastSignIn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastSignIn);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (MilestoneNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MilestoneNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignInData other) {
      if (other == null) {
        return;
      }
      if (other.TotalSignIn != 0) {
        TotalSignIn = other.TotalSignIn;
      }
      if (other.ConsecutiveSignIn != 0) {
        ConsecutiveSignIn = other.ConsecutiveSignIn;
      }
      if (other.LastSignIn.Length != 0) {
        LastSignIn = other.LastSignIn;
      }
      rewards_.Add(other.rewards_);
      if (other.MilestoneNum != 0) {
        MilestoneNum = other.MilestoneNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalSignIn = input.ReadInt32();
            break;
          }
          case 16: {
            ConsecutiveSignIn = input.ReadInt32();
            break;
          }
          case 26: {
            LastSignIn = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 40: {
            MilestoneNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalSignIn = input.ReadInt32();
            break;
          }
          case 16: {
            ConsecutiveSignIn = input.ReadInt32();
            break;
          }
          case 26: {
            LastSignIn = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            rewards_.AddEntriesFrom(ref input, _repeated_rewards_codec);
            break;
          }
          case 40: {
            MilestoneNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CommunityLinkData : pb::IMessage<CommunityLinkData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommunityLinkData> _parser = new pb::MessageParser<CommunityLinkData>(() => new CommunityLinkData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommunityLinkData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ClientReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityLinkData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityLinkData(CommunityLinkData other) : this() {
      linkDic_ = other.linkDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunityLinkData Clone() {
      return new CommunityLinkData(this);
    }

    /// <summary>Field number for the "linkDic" field.</summary>
    public const int LinkDicFieldNumber = 1;
    private static readonly pbc::MapField<int, int>.Codec _map_linkDic_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 10);
    private readonly pbc::MapField<int, int> linkDic_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> LinkDic {
      get { return linkDic_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommunityLinkData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommunityLinkData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!LinkDic.Equals(other.LinkDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= LinkDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      linkDic_.WriteTo(output, _map_linkDic_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      linkDic_.WriteTo(ref output, _map_linkDic_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += linkDic_.CalculateSize(_map_linkDic_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommunityLinkData other) {
      if (other == null) {
        return;
      }
      linkDic_.Add(other.linkDic_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            linkDic_.AddEntriesFrom(input, _map_linkDic_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            linkDic_.AddEntriesFrom(ref input, _map_linkDic_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
