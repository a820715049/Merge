// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gamekitdata/base.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.gamekitdata {

  /// <summary>Holder for reflection information generated from gamekitdata/base.proto</summary>
  public static partial class BaseReflection {

    #region Descriptor
    /// <summary>File descriptor for gamekitdata/base.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZnYW1la2l0ZGF0YS9iYXNlLnByb3RvEgtnYW1la2l0ZGF0YRobZ2FtZWtp",
            "dGRhdGEvZW51bV9kYXRhLnByb3RvIrMBCgpTeXN0ZW1JbmZvEg4KBkRldmlj",
            "ZRgBIAEoCRIKCgJPcxgCIAEoCRIRCglPc1ZlcnNpb24YAyABKAkSDwoHQ291",
            "bnRyeRgEIAEoCRIQCghMYW5ndWFnZRgFIAEoCRIQCghUaW1lWm9uZRgGIAEo",
            "CRIPCgdDaGFubmVsGAcgASgJEhIKCkFwcFZlcnNpb24YCCABKAkSCgoCSVAY",
            "CSABKAkSEAoIRGV2aWNlSWQYCiABKAkijwEKDlBsYXllck9wZW5JbmZvEgsK",
            "A1VpZBgBIAEoBBIMCgRGcGlkGAIgASgJEg0KBUxldmVsGAMgASgFEi8KDEZh",
            "Y2Vib29rSW5mbxgEIAEoCzIZLmdhbWVraXRkYXRhLkZhY2Vib29rSW5mbxIQ",
            "CghJc09ubGluZRgPIAEoCBIQCghMYXN0U3luYxgQIAEoAyIjCgZSZXdhcmQS",
            "CgoCSWQYASABKAUSDQoFQ291bnQYAiABKAUifgoLVXNlclRhZ0RhdGESEAoI",
            "VXBkYXRlVFMYASABKAMSMAoERGF0YRgCIAMoCzIiLmdhbWVraXRkYXRhLlVz",
            "ZXJUYWdEYXRhLkRhdGFFbnRyeRorCglEYXRhRW50cnkSCwoDa2V5GAEgASgF",
            "Eg0KBXZhbHVlGAIgASgFOgI4ASKBAQoOVXNlclRhZ0FwaURhdGESDQoFUmVx",
            "VFMYASABKAMSMwoERGF0YRgCIAMoCzIlLmdhbWVraXRkYXRhLlVzZXJUYWdB",
            "cGlEYXRhLkRhdGFFbnRyeRorCglEYXRhRW50cnkSCwoDa2V5GAEgASgFEg0K",
            "BXZhbHVlGAIgASgFOgI4ASI4CgxGYWNlYm9va0luZm8SCgoCSWQYASABKAkS",
            "DAoETmFtZRgCIAEoCRIOCgZBdmF0YXIYAyABKAkimwQKDlBsYXllckJhc2VE",
            "YXRhEgwKBEZwSWQYASABKAkSDQoFU25zSWQYAiABKAkSCwoDVWlkGAMgASgE",
            "EgwKBE5hbWUYBCABKAkSDgoGQXZhdGFyGAUgASgJEhEKCUNyZWF0ZWRBdBgG",
            "IAEoAxINCgVMZXZlbBgHIAEoBRILCgNFeHAYCCABKAUSEAoITGFuZ3VhZ2UY",
            "CSABKAkSJwoIVXNlclR5cGUYCiABKA4yFS5nYW1la2l0ZGF0YS5Vc2VyVHlw",
            "ZRI1CgVDb2lucxgLIAMoCzImLmdhbWVraXRkYXRhLlBsYXllckJhc2VEYXRh",
            "LkNvaW5zRW50cnkSDgoGR3JvdXBzGAwgAygFEg8KB1BsYXlEYXkYDSABKAUS",
            "EQoJUGxheURheVRzGA4gASgDEhUKDUFjdGl2ZVNlY29uZHMYDyABKAUSEAoI",
            "TGFzdFN5bmMYECABKAMSEQoJTGFzdFN0b3JlGBEgASgDEhEKCUxvZ2luVGlt",
            "ZRgSIAEoAxItCgtVc2VyVGFnRGF0YRgUIAEoCzIYLmdhbWVraXRkYXRhLlVz",
            "ZXJUYWdEYXRhEi8KDEZhY2Vib29rSW5mbxgVIAEoCzIZLmdhbWVraXRkYXRh",
            "LkZhY2Vib29rSW5mbxIPCgdFeHBEZWJ0GBYgASgFGiwKCkNvaW5zRW50cnkS",
            "CwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4AUJFWjFnaXRsYWIuZnVu",
            "cGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL2dhbWVraXRkYXRhqgIPZmF0",
            "LmdhbWVraXRkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.gamekitdata.EnumDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.SystemInfo), global::fat.gamekitdata.SystemInfo.Parser, new[]{ "Device", "Os", "OsVersion", "Country", "Language", "TimeZone", "Channel", "AppVersion", "IP", "DeviceId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.PlayerOpenInfo), global::fat.gamekitdata.PlayerOpenInfo.Parser, new[]{ "Uid", "Fpid", "Level", "FacebookInfo", "IsOnline", "LastSync" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.Reward), global::fat.gamekitdata.Reward.Parser, new[]{ "Id", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.UserTagData), global::fat.gamekitdata.UserTagData.Parser, new[]{ "UpdateTS", "Data" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.UserTagApiData), global::fat.gamekitdata.UserTagApiData.Parser, new[]{ "ReqTS", "Data" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.FacebookInfo), global::fat.gamekitdata.FacebookInfo.Parser, new[]{ "Id", "Name", "Avatar" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.PlayerBaseData), global::fat.gamekitdata.PlayerBaseData.Parser, new[]{ "FpId", "SnsId", "Uid", "Name", "Avatar", "CreatedAt", "Level", "Exp", "Language", "UserType", "Coins", "Groups", "PlayDay", "PlayDayTs", "ActiveSeconds", "LastSync", "LastStore", "LoginTime", "UserTagData", "FacebookInfo", "ExpDebt" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SystemInfo : pb::IMessage<SystemInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SystemInfo> _parser = new pb::MessageParser<SystemInfo>(() => new SystemInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.BaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemInfo(SystemInfo other) : this() {
      device_ = other.device_;
      os_ = other.os_;
      osVersion_ = other.osVersion_;
      country_ = other.country_;
      language_ = other.language_;
      timeZone_ = other.timeZone_;
      channel_ = other.channel_;
      appVersion_ = other.appVersion_;
      iP_ = other.iP_;
      deviceId_ = other.deviceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemInfo Clone() {
      return new SystemInfo(this);
    }

    /// <summary>Field number for the "Device" field.</summary>
    public const int DeviceFieldNumber = 1;
    private string device_ = "";
    /// <summary>
    ///设备型号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return device_; }
      set {
        device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Os" field.</summary>
    public const int OsFieldNumber = 2;
    private string os_ = "";
    /// <summary>
    ///操作系统类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Os {
      get { return os_; }
      set {
        os_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OsVersion" field.</summary>
    public const int OsVersionFieldNumber = 3;
    private string osVersion_ = "";
    /// <summary>
    ///操作系统版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OsVersion {
      get { return osVersion_; }
      set {
        osVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Country" field.</summary>
    public const int CountryFieldNumber = 4;
    private string country_ = "";
    /// <summary>
    ///国家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Language" field.</summary>
    public const int LanguageFieldNumber = 5;
    private string language_ = "";
    /// <summary>
    ///语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TimeZone" field.</summary>
    public const int TimeZoneFieldNumber = 6;
    private string timeZone_ = "";
    /// <summary>
    ///时区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimeZone {
      get { return timeZone_; }
      set {
        timeZone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Channel" field.</summary>
    public const int ChannelFieldNumber = 7;
    private string channel_ = "";
    /// <summary>
    ///渠道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AppVersion" field.</summary>
    public const int AppVersionFieldNumber = 8;
    private string appVersion_ = "";
    /// <summary>
    ///时区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppVersion {
      get { return appVersion_; }
      set {
        appVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IP" field.</summary>
    public const int IPFieldNumber = 9;
    private string iP_ = "";
    /// <summary>
    ///IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IP {
      get { return iP_; }
      set {
        iP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeviceId" field.</summary>
    public const int DeviceIdFieldNumber = 10;
    private string deviceId_ = "";
    /// <summary>
    ///设备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SystemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SystemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Device != other.Device) return false;
      if (Os != other.Os) return false;
      if (OsVersion != other.OsVersion) return false;
      if (Country != other.Country) return false;
      if (Language != other.Language) return false;
      if (TimeZone != other.TimeZone) return false;
      if (Channel != other.Channel) return false;
      if (AppVersion != other.AppVersion) return false;
      if (IP != other.IP) return false;
      if (DeviceId != other.DeviceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Device.Length != 0) hash ^= Device.GetHashCode();
      if (Os.Length != 0) hash ^= Os.GetHashCode();
      if (OsVersion.Length != 0) hash ^= OsVersion.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (TimeZone.Length != 0) hash ^= TimeZone.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (AppVersion.Length != 0) hash ^= AppVersion.GetHashCode();
      if (IP.Length != 0) hash ^= IP.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Device.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Device);
      }
      if (Os.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Os);
      }
      if (OsVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OsVersion);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Country);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Language);
      }
      if (TimeZone.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TimeZone);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Channel);
      }
      if (AppVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AppVersion);
      }
      if (IP.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(IP);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DeviceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Device.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Device);
      }
      if (Os.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Os);
      }
      if (OsVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OsVersion);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Country);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Language);
      }
      if (TimeZone.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TimeZone);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Channel);
      }
      if (AppVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AppVersion);
      }
      if (IP.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(IP);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DeviceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Device.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (Os.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Os);
      }
      if (OsVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OsVersion);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (TimeZone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeZone);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (AppVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppVersion);
      }
      if (IP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IP);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SystemInfo other) {
      if (other == null) {
        return;
      }
      if (other.Device.Length != 0) {
        Device = other.Device;
      }
      if (other.Os.Length != 0) {
        Os = other.Os;
      }
      if (other.OsVersion.Length != 0) {
        OsVersion = other.OsVersion;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.TimeZone.Length != 0) {
        TimeZone = other.TimeZone;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.AppVersion.Length != 0) {
        AppVersion = other.AppVersion;
      }
      if (other.IP.Length != 0) {
        IP = other.IP;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Device = input.ReadString();
            break;
          }
          case 18: {
            Os = input.ReadString();
            break;
          }
          case 26: {
            OsVersion = input.ReadString();
            break;
          }
          case 34: {
            Country = input.ReadString();
            break;
          }
          case 42: {
            Language = input.ReadString();
            break;
          }
          case 50: {
            TimeZone = input.ReadString();
            break;
          }
          case 58: {
            Channel = input.ReadString();
            break;
          }
          case 66: {
            AppVersion = input.ReadString();
            break;
          }
          case 74: {
            IP = input.ReadString();
            break;
          }
          case 82: {
            DeviceId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Device = input.ReadString();
            break;
          }
          case 18: {
            Os = input.ReadString();
            break;
          }
          case 26: {
            OsVersion = input.ReadString();
            break;
          }
          case 34: {
            Country = input.ReadString();
            break;
          }
          case 42: {
            Language = input.ReadString();
            break;
          }
          case 50: {
            TimeZone = input.ReadString();
            break;
          }
          case 58: {
            Channel = input.ReadString();
            break;
          }
          case 66: {
            AppVersion = input.ReadString();
            break;
          }
          case 74: {
            IP = input.ReadString();
            break;
          }
          case 82: {
            DeviceId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerOpenInfo : pb::IMessage<PlayerOpenInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerOpenInfo> _parser = new pb::MessageParser<PlayerOpenInfo>(() => new PlayerOpenInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerOpenInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.BaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOpenInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOpenInfo(PlayerOpenInfo other) : this() {
      uid_ = other.uid_;
      fpid_ = other.fpid_;
      level_ = other.level_;
      facebookInfo_ = other.facebookInfo_ != null ? other.facebookInfo_.Clone() : null;
      isOnline_ = other.isOnline_;
      lastSync_ = other.lastSync_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOpenInfo Clone() {
      return new PlayerOpenInfo(this);
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 1;
    private ulong uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "Fpid" field.</summary>
    public const int FpidFieldNumber = 2;
    private string fpid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fpid {
      get { return fpid_; }
      set {
        fpid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "FacebookInfo" field.</summary>
    public const int FacebookInfoFieldNumber = 4;
    private global::fat.gamekitdata.FacebookInfo facebookInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.FacebookInfo FacebookInfo {
      get { return facebookInfo_; }
      set {
        facebookInfo_ = value;
      }
    }

    /// <summary>Field number for the "IsOnline" field.</summary>
    public const int IsOnlineFieldNumber = 15;
    private bool isOnline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnline {
      get { return isOnline_; }
      set {
        isOnline_ = value;
      }
    }

    /// <summary>Field number for the "LastSync" field.</summary>
    public const int LastSyncFieldNumber = 16;
    private long lastSync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastSync {
      get { return lastSync_; }
      set {
        lastSync_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerOpenInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerOpenInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Fpid != other.Fpid) return false;
      if (Level != other.Level) return false;
      if (!object.Equals(FacebookInfo, other.FacebookInfo)) return false;
      if (IsOnline != other.IsOnline) return false;
      if (LastSync != other.LastSync) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (Fpid.Length != 0) hash ^= Fpid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (facebookInfo_ != null) hash ^= FacebookInfo.GetHashCode();
      if (IsOnline != false) hash ^= IsOnline.GetHashCode();
      if (LastSync != 0L) hash ^= LastSync.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
      if (Fpid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Fpid);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (facebookInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FacebookInfo);
      }
      if (IsOnline != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsOnline);
      }
      if (LastSync != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(LastSync);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
      if (Fpid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Fpid);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (facebookInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FacebookInfo);
      }
      if (IsOnline != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsOnline);
      }
      if (LastSync != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(LastSync);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (Fpid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fpid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (facebookInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FacebookInfo);
      }
      if (IsOnline != false) {
        size += 1 + 1;
      }
      if (LastSync != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastSync);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerOpenInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.Fpid.Length != 0) {
        Fpid = other.Fpid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.facebookInfo_ != null) {
        if (facebookInfo_ == null) {
          FacebookInfo = new global::fat.gamekitdata.FacebookInfo();
        }
        FacebookInfo.MergeFrom(other.FacebookInfo);
      }
      if (other.IsOnline != false) {
        IsOnline = other.IsOnline;
      }
      if (other.LastSync != 0L) {
        LastSync = other.LastSync;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
          case 18: {
            Fpid = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 34: {
            if (facebookInfo_ == null) {
              FacebookInfo = new global::fat.gamekitdata.FacebookInfo();
            }
            input.ReadMessage(FacebookInfo);
            break;
          }
          case 120: {
            IsOnline = input.ReadBool();
            break;
          }
          case 128: {
            LastSync = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
          case 18: {
            Fpid = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 34: {
            if (facebookInfo_ == null) {
              FacebookInfo = new global::fat.gamekitdata.FacebookInfo();
            }
            input.ReadMessage(FacebookInfo);
            break;
          }
          case 120: {
            IsOnline = input.ReadBool();
            break;
          }
          case 128: {
            LastSync = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 奖励
  /// </summary>
  public sealed partial class Reward : pb::IMessage<Reward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Reward> _parser = new pb::MessageParser<Reward>(() => new Reward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.BaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reward(Reward other) : this() {
      id_ = other.id_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reward Clone() {
      return new Reward(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 奖励Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    /// 奖励数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reward other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserTagData : pb::IMessage<UserTagData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserTagData> _parser = new pb::MessageParser<UserTagData>(() => new UserTagData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserTagData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.BaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTagData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTagData(UserTagData other) : this() {
      updateTS_ = other.updateTS_;
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTagData Clone() {
      return new UserTagData(this);
    }

    /// <summary>Field number for the "UpdateTS" field.</summary>
    public const int UpdateTSFieldNumber = 1;
    private long updateTS_;
    /// <summary>
    /// 更新时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdateTS {
      get { return updateTS_; }
      set {
        updateTS_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pbc::MapField<int, int>.Codec _map_data_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 18);
    private readonly pbc::MapField<int, int> data_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 用户标签 key: UserGradeId(标签种类) value: UserGradeValue(标签值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserTagData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserTagData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UpdateTS != other.UpdateTS) return false;
      if (!Data.Equals(other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UpdateTS != 0L) hash ^= UpdateTS.GetHashCode();
      hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UpdateTS != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UpdateTS);
      }
      data_.WriteTo(output, _map_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UpdateTS != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UpdateTS);
      }
      data_.WriteTo(ref output, _map_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpdateTS != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdateTS);
      }
      size += data_.CalculateSize(_map_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserTagData other) {
      if (other == null) {
        return;
      }
      if (other.UpdateTS != 0L) {
        UpdateTS = other.UpdateTS;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UpdateTS = input.ReadInt64();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _map_data_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UpdateTS = input.ReadInt64();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(ref input, _map_data_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///存储通过难度API获取到的用户分层标签信息
  /// </summary>
  public sealed partial class UserTagApiData : pb::IMessage<UserTagApiData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserTagApiData> _parser = new pb::MessageParser<UserTagApiData>(() => new UserTagApiData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserTagApiData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.BaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTagApiData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTagApiData(UserTagApiData other) : this() {
      reqTS_ = other.reqTS_;
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTagApiData Clone() {
      return new UserTagApiData(this);
    }

    /// <summary>Field number for the "ReqTS" field.</summary>
    public const int ReqTSFieldNumber = 1;
    private long reqTS_;
    /// <summary>
    /// 记录当前难度API发起请求的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReqTS {
      get { return reqTS_; }
      set {
        reqTS_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pbc::MapField<int, int>.Codec _map_data_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 18);
    private readonly pbc::MapField<int, int> data_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 用户标签 key: UserGradeId(标签种类) value: UserGradeValue(标签值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserTagApiData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserTagApiData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqTS != other.ReqTS) return false;
      if (!Data.Equals(other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReqTS != 0L) hash ^= ReqTS.GetHashCode();
      hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ReqTS != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReqTS);
      }
      data_.WriteTo(output, _map_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ReqTS != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReqTS);
      }
      data_.WriteTo(ref output, _map_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReqTS != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReqTS);
      }
      size += data_.CalculateSize(_map_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserTagApiData other) {
      if (other == null) {
        return;
      }
      if (other.ReqTS != 0L) {
        ReqTS = other.ReqTS;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReqTS = input.ReadInt64();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _map_data_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ReqTS = input.ReadInt64();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(ref input, _map_data_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FacebookInfo : pb::IMessage<FacebookInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FacebookInfo> _parser = new pb::MessageParser<FacebookInfo>(() => new FacebookInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FacebookInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.BaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FacebookInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FacebookInfo(FacebookInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      avatar_ = other.avatar_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FacebookInfo Clone() {
      return new FacebookInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FacebookInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FacebookInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Avatar != other.Avatar) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FacebookInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerBaseData : pb::IMessage<PlayerBaseData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerBaseData> _parser = new pb::MessageParser<PlayerBaseData>(() => new PlayerBaseData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerBaseData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.BaseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBaseData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBaseData(PlayerBaseData other) : this() {
      fpId_ = other.fpId_;
      snsId_ = other.snsId_;
      uid_ = other.uid_;
      name_ = other.name_;
      avatar_ = other.avatar_;
      createdAt_ = other.createdAt_;
      level_ = other.level_;
      exp_ = other.exp_;
      language_ = other.language_;
      userType_ = other.userType_;
      coins_ = other.coins_.Clone();
      groups_ = other.groups_.Clone();
      playDay_ = other.playDay_;
      playDayTs_ = other.playDayTs_;
      activeSeconds_ = other.activeSeconds_;
      lastSync_ = other.lastSync_;
      lastStore_ = other.lastStore_;
      loginTime_ = other.loginTime_;
      userTagData_ = other.userTagData_ != null ? other.userTagData_.Clone() : null;
      facebookInfo_ = other.facebookInfo_ != null ? other.facebookInfo_.Clone() : null;
      expDebt_ = other.expDebt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBaseData Clone() {
      return new PlayerBaseData(this);
    }

    /// <summary>Field number for the "FpId" field.</summary>
    public const int FpIdFieldNumber = 1;
    private string fpId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FpId {
      get { return fpId_; }
      set {
        fpId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SnsId" field.</summary>
    public const int SnsIdFieldNumber = 2;
    private string snsId_ = "";
    /// <summary>
    /// 社交平台ID 只在创建角色时赋值。如果角色是通过社交平台创建的，那么这个字段必须有值，如果是游客账号创建的，为空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SnsId {
      get { return snsId_; }
      set {
        snsId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 3;
    private ulong uid_;
    /// <summary>
    /// 游戏内部ID 也会暴露给客户端，通信和逻辑中使用，但不在UI显示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Avatar" field.</summary>
    public const int AvatarFieldNumber = 5;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CreatedAt" field.</summary>
    public const int CreatedAtFieldNumber = 6;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 7;
    private int level_;
    /// <summary>
    /// 级别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 8;
    private int exp_;
    /// <summary>
    /// 经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "Language" field.</summary>
    public const int LanguageFieldNumber = 9;
    private string language_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserType" field.</summary>
    public const int UserTypeFieldNumber = 10;
    private global::fat.gamekitdata.UserType userType_ = global::fat.gamekitdata.UserType.Normal;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.UserType UserType {
      get { return userType_; }
      set {
        userType_ = value;
      }
    }

    /// <summary>Field number for the "Coins" field.</summary>
    public const int CoinsFieldNumber = 11;
    private static readonly pbc::MapField<int, int>.Codec _map_coins_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 90);
    private readonly pbc::MapField<int, int> coins_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Coins {
      get { return coins_; }
    }

    /// <summary>Field number for the "Groups" field.</summary>
    public const int GroupsFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_groups_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> groups_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "PlayDay" field.</summary>
    public const int PlayDayFieldNumber = 13;
    private int playDay_;
    /// <summary>
    /// 玩了几天游戏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayDay {
      get { return playDay_; }
      set {
        playDay_ = value;
      }
    }

    /// <summary>Field number for the "PlayDayTs" field.</summary>
    public const int PlayDayTsFieldNumber = 14;
    private long playDayTs_;
    /// <summary>
    /// 上次刷新PlayDay的时间戳(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayDayTs {
      get { return playDayTs_; }
      set {
        playDayTs_ = value;
      }
    }

    /// <summary>Field number for the "ActiveSeconds" field.</summary>
    public const int ActiveSecondsFieldNumber = 15;
    private int activeSeconds_;
    /// <summary>
    /// 玩家活跃时长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveSeconds {
      get { return activeSeconds_; }
      set {
        activeSeconds_ = value;
      }
    }

    /// <summary>Field number for the "LastSync" field.</summary>
    public const int LastSyncFieldNumber = 16;
    private long lastSync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastSync {
      get { return lastSync_; }
      set {
        lastSync_ = value;
      }
    }

    /// <summary>Field number for the "LastStore" field.</summary>
    public const int LastStoreFieldNumber = 17;
    private long lastStore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastStore {
      get { return lastStore_; }
      set {
        lastStore_ = value;
      }
    }

    /// <summary>Field number for the "LoginTime" field.</summary>
    public const int LoginTimeFieldNumber = 18;
    private long loginTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LoginTime {
      get { return loginTime_; }
      set {
        loginTime_ = value;
      }
    }

    /// <summary>Field number for the "UserTagData" field.</summary>
    public const int UserTagDataFieldNumber = 20;
    private global::fat.gamekitdata.UserTagData userTagData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.UserTagData UserTagData {
      get { return userTagData_; }
      set {
        userTagData_ = value;
      }
    }

    /// <summary>Field number for the "FacebookInfo" field.</summary>
    public const int FacebookInfoFieldNumber = 21;
    private global::fat.gamekitdata.FacebookInfo facebookInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.FacebookInfo FacebookInfo {
      get { return facebookInfo_; }
      set {
        facebookInfo_ = value;
      }
    }

    /// <summary>Field number for the "ExpDebt" field.</summary>
    public const int ExpDebtFieldNumber = 22;
    private int expDebt_;
    /// <summary>
    /// 经验值欠费额度, 记录用户等级强行提升时, 需要补齐的额度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpDebt {
      get { return expDebt_; }
      set {
        expDebt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerBaseData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerBaseData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FpId != other.FpId) return false;
      if (SnsId != other.SnsId) return false;
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Avatar != other.Avatar) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (Language != other.Language) return false;
      if (UserType != other.UserType) return false;
      if (!Coins.Equals(other.Coins)) return false;
      if(!groups_.Equals(other.groups_)) return false;
      if (PlayDay != other.PlayDay) return false;
      if (PlayDayTs != other.PlayDayTs) return false;
      if (ActiveSeconds != other.ActiveSeconds) return false;
      if (LastSync != other.LastSync) return false;
      if (LastStore != other.LastStore) return false;
      if (LoginTime != other.LoginTime) return false;
      if (!object.Equals(UserTagData, other.UserTagData)) return false;
      if (!object.Equals(FacebookInfo, other.FacebookInfo)) return false;
      if (ExpDebt != other.ExpDebt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FpId.Length != 0) hash ^= FpId.GetHashCode();
      if (SnsId.Length != 0) hash ^= SnsId.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (UserType != global::fat.gamekitdata.UserType.Normal) hash ^= UserType.GetHashCode();
      hash ^= Coins.GetHashCode();
      hash ^= groups_.GetHashCode();
      if (PlayDay != 0) hash ^= PlayDay.GetHashCode();
      if (PlayDayTs != 0L) hash ^= PlayDayTs.GetHashCode();
      if (ActiveSeconds != 0) hash ^= ActiveSeconds.GetHashCode();
      if (LastSync != 0L) hash ^= LastSync.GetHashCode();
      if (LastStore != 0L) hash ^= LastStore.GetHashCode();
      if (LoginTime != 0L) hash ^= LoginTime.GetHashCode();
      if (userTagData_ != null) hash ^= UserTagData.GetHashCode();
      if (facebookInfo_ != null) hash ^= FacebookInfo.GetHashCode();
      if (ExpDebt != 0) hash ^= ExpDebt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FpId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FpId);
      }
      if (SnsId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SnsId);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Avatar);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CreatedAt);
      }
      if (Level != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Exp);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Language);
      }
      if (UserType != global::fat.gamekitdata.UserType.Normal) {
        output.WriteRawTag(80);
        output.WriteEnum((int) UserType);
      }
      coins_.WriteTo(output, _map_coins_codec);
      groups_.WriteTo(output, _repeated_groups_codec);
      if (PlayDay != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(PlayDay);
      }
      if (PlayDayTs != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(PlayDayTs);
      }
      if (ActiveSeconds != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ActiveSeconds);
      }
      if (LastSync != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(LastSync);
      }
      if (LastStore != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(LastStore);
      }
      if (LoginTime != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(LoginTime);
      }
      if (userTagData_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(UserTagData);
      }
      if (facebookInfo_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(FacebookInfo);
      }
      if (ExpDebt != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ExpDebt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FpId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FpId);
      }
      if (SnsId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SnsId);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Avatar);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CreatedAt);
      }
      if (Level != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Exp);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Language);
      }
      if (UserType != global::fat.gamekitdata.UserType.Normal) {
        output.WriteRawTag(80);
        output.WriteEnum((int) UserType);
      }
      coins_.WriteTo(ref output, _map_coins_codec);
      groups_.WriteTo(ref output, _repeated_groups_codec);
      if (PlayDay != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(PlayDay);
      }
      if (PlayDayTs != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(PlayDayTs);
      }
      if (ActiveSeconds != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ActiveSeconds);
      }
      if (LastSync != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(LastSync);
      }
      if (LastStore != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(LastStore);
      }
      if (LoginTime != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(LoginTime);
      }
      if (userTagData_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(UserTagData);
      }
      if (facebookInfo_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(FacebookInfo);
      }
      if (ExpDebt != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ExpDebt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FpId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FpId);
      }
      if (SnsId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SnsId);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (UserType != global::fat.gamekitdata.UserType.Normal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UserType);
      }
      size += coins_.CalculateSize(_map_coins_codec);
      size += groups_.CalculateSize(_repeated_groups_codec);
      if (PlayDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayDay);
      }
      if (PlayDayTs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayDayTs);
      }
      if (ActiveSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveSeconds);
      }
      if (LastSync != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastSync);
      }
      if (LastStore != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastStore);
      }
      if (LoginTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LoginTime);
      }
      if (userTagData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserTagData);
      }
      if (facebookInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FacebookInfo);
      }
      if (ExpDebt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExpDebt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerBaseData other) {
      if (other == null) {
        return;
      }
      if (other.FpId.Length != 0) {
        FpId = other.FpId;
      }
      if (other.SnsId.Length != 0) {
        SnsId = other.SnsId;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.UserType != global::fat.gamekitdata.UserType.Normal) {
        UserType = other.UserType;
      }
      coins_.Add(other.coins_);
      groups_.Add(other.groups_);
      if (other.PlayDay != 0) {
        PlayDay = other.PlayDay;
      }
      if (other.PlayDayTs != 0L) {
        PlayDayTs = other.PlayDayTs;
      }
      if (other.ActiveSeconds != 0) {
        ActiveSeconds = other.ActiveSeconds;
      }
      if (other.LastSync != 0L) {
        LastSync = other.LastSync;
      }
      if (other.LastStore != 0L) {
        LastStore = other.LastStore;
      }
      if (other.LoginTime != 0L) {
        LoginTime = other.LoginTime;
      }
      if (other.userTagData_ != null) {
        if (userTagData_ == null) {
          UserTagData = new global::fat.gamekitdata.UserTagData();
        }
        UserTagData.MergeFrom(other.UserTagData);
      }
      if (other.facebookInfo_ != null) {
        if (facebookInfo_ == null) {
          FacebookInfo = new global::fat.gamekitdata.FacebookInfo();
        }
        FacebookInfo.MergeFrom(other.FacebookInfo);
      }
      if (other.ExpDebt != 0) {
        ExpDebt = other.ExpDebt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FpId = input.ReadString();
            break;
          }
          case 18: {
            SnsId = input.ReadString();
            break;
          }
          case 24: {
            Uid = input.ReadUInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Avatar = input.ReadString();
            break;
          }
          case 48: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 56: {
            Level = input.ReadInt32();
            break;
          }
          case 64: {
            Exp = input.ReadInt32();
            break;
          }
          case 74: {
            Language = input.ReadString();
            break;
          }
          case 80: {
            UserType = (global::fat.gamekitdata.UserType) input.ReadEnum();
            break;
          }
          case 90: {
            coins_.AddEntriesFrom(input, _map_coins_codec);
            break;
          }
          case 98:
          case 96: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
          case 104: {
            PlayDay = input.ReadInt32();
            break;
          }
          case 112: {
            PlayDayTs = input.ReadInt64();
            break;
          }
          case 120: {
            ActiveSeconds = input.ReadInt32();
            break;
          }
          case 128: {
            LastSync = input.ReadInt64();
            break;
          }
          case 136: {
            LastStore = input.ReadInt64();
            break;
          }
          case 144: {
            LoginTime = input.ReadInt64();
            break;
          }
          case 162: {
            if (userTagData_ == null) {
              UserTagData = new global::fat.gamekitdata.UserTagData();
            }
            input.ReadMessage(UserTagData);
            break;
          }
          case 170: {
            if (facebookInfo_ == null) {
              FacebookInfo = new global::fat.gamekitdata.FacebookInfo();
            }
            input.ReadMessage(FacebookInfo);
            break;
          }
          case 176: {
            ExpDebt = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FpId = input.ReadString();
            break;
          }
          case 18: {
            SnsId = input.ReadString();
            break;
          }
          case 24: {
            Uid = input.ReadUInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Avatar = input.ReadString();
            break;
          }
          case 48: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 56: {
            Level = input.ReadInt32();
            break;
          }
          case 64: {
            Exp = input.ReadInt32();
            break;
          }
          case 74: {
            Language = input.ReadString();
            break;
          }
          case 80: {
            UserType = (global::fat.gamekitdata.UserType) input.ReadEnum();
            break;
          }
          case 90: {
            coins_.AddEntriesFrom(ref input, _map_coins_codec);
            break;
          }
          case 98:
          case 96: {
            groups_.AddEntriesFrom(ref input, _repeated_groups_codec);
            break;
          }
          case 104: {
            PlayDay = input.ReadInt32();
            break;
          }
          case 112: {
            PlayDayTs = input.ReadInt64();
            break;
          }
          case 120: {
            ActiveSeconds = input.ReadInt32();
            break;
          }
          case 128: {
            LastSync = input.ReadInt64();
            break;
          }
          case 136: {
            LastStore = input.ReadInt64();
            break;
          }
          case 144: {
            LoginTime = input.ReadInt64();
            break;
          }
          case 162: {
            if (userTagData_ == null) {
              UserTagData = new global::fat.gamekitdata.UserTagData();
            }
            input.ReadMessage(UserTagData);
            break;
          }
          case 170: {
            if (facebookInfo_ == null) {
              FacebookInfo = new global::fat.gamekitdata.FacebookInfo();
            }
            input.ReadMessage(FacebookInfo);
            break;
          }
          case 176: {
            ExpDebt = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
