// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gamekitdata/card_activity.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.gamekitdata {

  /// <summary>Holder for reflection information generated from gamekitdata/card_activity.proto</summary>
  public static partial class CardActivityReflection {

    #region Descriptor
    /// <summary>File descriptor for gamekitdata/card_activity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CardActivityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9nYW1la2l0ZGF0YS9jYXJkX2FjdGl2aXR5LnByb3RvEgtnYW1la2l0ZGF0",
            "YSL3AwoMQ2FyZEFjdGl2aXR5EkUKDkNhcmRBY3RJbmZvTWFwGAEgAygLMi0u",
            "Z2FtZWtpdGRhdGEuQ2FyZEFjdGl2aXR5LkNhcmRBY3RJbmZvTWFwRW50cnkS",
            "FgoOVG90YWxKb2luQ291bnQYAiABKAUSSQoQQ2FyZFJvdW5kSW5mb01hcBgD",
            "IAMoCzIvLmdhbWVraXRkYXRhLkNhcmRBY3Rpdml0eS5DYXJkUm91bmRJbmZv",
            "TWFwRW50cnkSHQoVTmV4dFJlZnJlc2hHaXZlQ2FyZFRzGAQgASgDEhYKDkN1",
            "ckdpdmVDYXJkTnVtGAUgASgFEj0KE1NwZWNpYWxQYWNrSW5mb0xpc3QYBiAD",
            "KAsyIC5nYW1la2l0ZGF0YS5DYXJkU3BlY2lhbFBhY2tJbmZvEhwKFE5leHRT",
            "aG93RXhjaGFuZ2VSUFRzGAcgASgDGlQKE0NhcmRBY3RJbmZvTWFwRW50cnkS",
            "CwoDa2V5GAEgASgFEiwKBXZhbHVlGAIgASgLMh0uZ2FtZWtpdGRhdGEuQ2Fy",
            "ZEFjdGl2aXR5SW5mbzoCOAEaUwoVQ2FyZFJvdW5kSW5mb01hcEVudHJ5EgsK",
            "A2tleRgBIAEoBRIpCgV2YWx1ZRgCIAEoCzIaLmdhbWVraXRkYXRhLkNhcmRS",
            "b3VuZEluZm86AjgBItcCChBDYXJkQWN0aXZpdHlJbmZvEhcKD0NhcmRMaW1p",
            "dFRlbXBJZBgBIAEoBRIXCg9Ub3RhbENvc3RFbmVyZ3kYAiABKAQSFQoNU3Rh",
            "cnRUb3RhbElBUBgDIAEoBRIYChBJc1JlY0FsYnVtUmV3YXJkGAQgASgIEhkK",
            "EVJlY1Jld2FyZEdyb3VwSWRzGAUgAygFEkMKC0NhcmRJbmZvTWFwGAYgAygL",
            "Mi4uZ2FtZWtpdGRhdGEuQ2FyZEFjdGl2aXR5SW5mby5DYXJkSW5mb01hcEVu",
            "dHJ5EjUKEUNhcmRKb2tlckluZm9MaXN0GAcgAygLMhouZ2FtZWtpdGRhdGEu",
            "Q2FyZEpva2VySW5mbxpJChBDYXJkSW5mb01hcEVudHJ5EgsKA2tleRgBIAEo",
            "BRIkCgV2YWx1ZRgCIAEoCzIVLmdhbWVraXRkYXRhLkNhcmRJbmZvOgI4ASLU",
            "AQoNQ2FyZFJvdW5kSW5mbxIZChFDdXJPcGVuQWxidW1JbmRleBgBIAEoBRI0",
            "ChBDdXJPcGVuQWxidW1JbmZvGAIgASgLMhouZ2FtZWtpdGRhdGEuQ2FyZEFs",
            "YnVtSW5mbxI1ChFDYXJkSm9rZXJJbmZvTGlzdBgDIAMoCzIaLmdhbWVraXRk",
            "YXRhLkNhcmRKb2tlckluZm8SOwoQU3RhckV4Y2hhbmdlSW5mbxgEIAEoCzIh",
            "LmdhbWVraXRkYXRhLkNhcmRTdGFyRXhjaGFuZ2VJbmZvIpoCCg1DYXJkQWxi",
            "dW1JbmZvEhcKD0NhcmRMaW1pdFRlbXBJZBgBIAEoBRIXCg9Ub3RhbENvc3RF",
            "bmVyZ3kYAiABKAQSFQoNU3RhcnRUb3RhbElBUBgDIAEoBRIYChBJc1JlY0Fs",
            "YnVtUmV3YXJkGAQgASgIEhkKEVJlY1Jld2FyZEdyb3VwSWRzGAUgAygFEkAK",
            "C0NhcmRJbmZvTWFwGAYgAygLMisuZ2FtZWtpdGRhdGEuQ2FyZEFsYnVtSW5m",
            "by5DYXJkSW5mb01hcEVudHJ5GkkKEENhcmRJbmZvTWFwRW50cnkSCwoDa2V5",
            "GAEgASgFEiQKBXZhbHVlGAIgASgLMhUuZ2FtZWtpdGRhdGEuQ2FyZEluZm86",
            "AjgBIksKCENhcmRJbmZvEg8KB0xpbWl0SWQYASABKAUSDQoFSXNPd24YAiAB",
            "KAgSDQoFSXNOZXcYAyABKAgSEAoIT3duQ291bnQYBCABKAUiNwoNQ2FyZEpv",
            "a2VySW5mbxIPCgdKb2tlcklkGAEgASgFEhUKDUpva2VyRXhwaXJlVHMYAiAB",
            "KAMiZwoUQ2FyZFN0YXJFeGNoYW5nZUluZm8SGQoRVG90YWxGaXhlZFN0YXJO",
            "dW0YASABKAUSGAoQVG90YWxVc2VkU3Rhck51bRgCIAEoBRIaChJTdGFyRXhj",
            "aGFuZ2VDZExpc3QYAyADKAMiOQoTQ2FyZFNwZWNpYWxQYWNrSW5mbxIOCgZQ",
            "YWNrSWQYASABKAUSEgoKQ2FyZElkUG9vbBgCIAEoCUJFWjFnaXRsYWIuZnVu",
            "cGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5nL2dhbWVraXRkYXRhqgIPZmF0",
            "LmdhbWVraXRkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.CardActivity), global::fat.gamekitdata.CardActivity.Parser, new[]{ "CardActInfoMap", "TotalJoinCount", "CardRoundInfoMap", "NextRefreshGiveCardTs", "CurGiveCardNum", "SpecialPackInfoList", "NextShowExchangeRPTs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.CardActivityInfo), global::fat.gamekitdata.CardActivityInfo.Parser, new[]{ "CardLimitTempId", "TotalCostEnergy", "StartTotalIAP", "IsRecAlbumReward", "RecRewardGroupIds", "CardInfoMap", "CardJokerInfoList" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.CardRoundInfo), global::fat.gamekitdata.CardRoundInfo.Parser, new[]{ "CurOpenAlbumIndex", "CurOpenAlbumInfo", "CardJokerInfoList", "StarExchangeInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.CardAlbumInfo), global::fat.gamekitdata.CardAlbumInfo.Parser, new[]{ "CardLimitTempId", "TotalCostEnergy", "StartTotalIAP", "IsRecAlbumReward", "RecRewardGroupIds", "CardInfoMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.CardInfo), global::fat.gamekitdata.CardInfo.Parser, new[]{ "LimitId", "IsOwn", "IsNew", "OwnCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.CardJokerInfo), global::fat.gamekitdata.CardJokerInfo.Parser, new[]{ "JokerId", "JokerExpireTs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.CardStarExchangeInfo), global::fat.gamekitdata.CardStarExchangeInfo.Parser, new[]{ "TotalFixedStarNum", "TotalUsedStarNum", "StarExchangeCdList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.CardSpecialPackInfo), global::fat.gamekitdata.CardSpecialPackInfo.Parser, new[]{ "PackId", "CardIdPool" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CardActivity : pb::IMessage<CardActivity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardActivity> _parser = new pb::MessageParser<CardActivity>(() => new CardActivity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.CardActivityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardActivity(CardActivity other) : this() {
      cardActInfoMap_ = other.cardActInfoMap_.Clone();
      totalJoinCount_ = other.totalJoinCount_;
      cardRoundInfoMap_ = other.cardRoundInfoMap_.Clone();
      nextRefreshGiveCardTs_ = other.nextRefreshGiveCardTs_;
      curGiveCardNum_ = other.curGiveCardNum_;
      specialPackInfoList_ = other.specialPackInfoList_.Clone();
      nextShowExchangeRPTs_ = other.nextShowExchangeRPTs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardActivity Clone() {
      return new CardActivity(this);
    }

    /// <summary>Field number for the "CardActInfoMap" field.</summary>
    public const int CardActInfoMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.gamekitdata.CardActivityInfo>.Codec _map_cardActInfoMap_codec
        = new pbc::MapField<int, global::fat.gamekitdata.CardActivityInfo>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.gamekitdata.CardActivityInfo.Parser), 10);
    private readonly pbc::MapField<int, global::fat.gamekitdata.CardActivityInfo> cardActInfoMap_ = new pbc::MapField<int, global::fat.gamekitdata.CardActivityInfo>();
    /// <summary>
    ///此字段11.0版本之后不再使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.gamekitdata.CardActivityInfo> CardActInfoMap {
      get { return cardActInfoMap_; }
    }

    /// <summary>Field number for the "TotalJoinCount" field.</summary>
    public const int TotalJoinCountFieldNumber = 2;
    private int totalJoinCount_;
    /// <summary>
    ///累计参与集卡活动的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalJoinCount {
      get { return totalJoinCount_; }
      set {
        totalJoinCount_ = value;
      }
    }

    /// <summary>Field number for the "CardRoundInfoMap" field.</summary>
    public const int CardRoundInfoMapFieldNumber = 3;
    private static readonly pbc::MapField<int, global::fat.gamekitdata.CardRoundInfo>.Codec _map_cardRoundInfoMap_codec
        = new pbc::MapField<int, global::fat.gamekitdata.CardRoundInfo>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.gamekitdata.CardRoundInfo.Parser), 26);
    private readonly pbc::MapField<int, global::fat.gamekitdata.CardRoundInfo> cardRoundInfoMap_ = new pbc::MapField<int, global::fat.gamekitdata.CardRoundInfo>();
    /// <summary>
    ///11.0版本新加的字段，存储最近两次的集卡活动数据 key为卡牌活动id 若当前已经存了两期活动数据，如果有新一期活动要开，会删除存档中最老的活动数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.gamekitdata.CardRoundInfo> CardRoundInfoMap {
      get { return cardRoundInfoMap_; }
    }

    /// <summary>Field number for the "NextRefreshGiveCardTs" field.</summary>
    public const int NextRefreshGiveCardTsFieldNumber = 4;
    private long nextRefreshGiveCardTs_;
    /// <summary>
    ///下次赠卡次数重置时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextRefreshGiveCardTs {
      get { return nextRefreshGiveCardTs_; }
      set {
        nextRefreshGiveCardTs_ = value;
      }
    }

    /// <summary>Field number for the "CurGiveCardNum" field.</summary>
    public const int CurGiveCardNumFieldNumber = 5;
    private int curGiveCardNum_;
    /// <summary>
    ///今日已赠卡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurGiveCardNum {
      get { return curGiveCardNum_; }
      set {
        curGiveCardNum_ = value;
      }
    }

    /// <summary>Field number for the "SpecialPackInfoList" field.</summary>
    public const int SpecialPackInfoListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::fat.gamekitdata.CardSpecialPackInfo> _repeated_specialPackInfoList_codec
        = pb::FieldCodec.ForMessage(50, global::fat.gamekitdata.CardSpecialPackInfo.Parser);
    private readonly pbc::RepeatedField<global::fat.gamekitdata.CardSpecialPackInfo> specialPackInfoList_ = new pbc::RepeatedField<global::fat.gamekitdata.CardSpecialPackInfo>();
    /// <summary>
    ///1/N闪卡必得功能数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.gamekitdata.CardSpecialPackInfo> SpecialPackInfoList {
      get { return specialPackInfoList_; }
    }

    /// <summary>Field number for the "NextShowExchangeRPTs" field.</summary>
    public const int NextShowExchangeRPTsFieldNumber = 7;
    private long nextShowExchangeRPTs_;
    /// <summary>
    ///卡册星星兑换入口红点刷新显示时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextShowExchangeRPTs {
      get { return nextShowExchangeRPTs_; }
      set {
        nextShowExchangeRPTs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!CardActInfoMap.Equals(other.CardActInfoMap)) return false;
      if (TotalJoinCount != other.TotalJoinCount) return false;
      if (!CardRoundInfoMap.Equals(other.CardRoundInfoMap)) return false;
      if (NextRefreshGiveCardTs != other.NextRefreshGiveCardTs) return false;
      if (CurGiveCardNum != other.CurGiveCardNum) return false;
      if(!specialPackInfoList_.Equals(other.specialPackInfoList_)) return false;
      if (NextShowExchangeRPTs != other.NextShowExchangeRPTs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= CardActInfoMap.GetHashCode();
      if (TotalJoinCount != 0) hash ^= TotalJoinCount.GetHashCode();
      hash ^= CardRoundInfoMap.GetHashCode();
      if (NextRefreshGiveCardTs != 0L) hash ^= NextRefreshGiveCardTs.GetHashCode();
      if (CurGiveCardNum != 0) hash ^= CurGiveCardNum.GetHashCode();
      hash ^= specialPackInfoList_.GetHashCode();
      if (NextShowExchangeRPTs != 0L) hash ^= NextShowExchangeRPTs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      cardActInfoMap_.WriteTo(output, _map_cardActInfoMap_codec);
      if (TotalJoinCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalJoinCount);
      }
      cardRoundInfoMap_.WriteTo(output, _map_cardRoundInfoMap_codec);
      if (NextRefreshGiveCardTs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(NextRefreshGiveCardTs);
      }
      if (CurGiveCardNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurGiveCardNum);
      }
      specialPackInfoList_.WriteTo(output, _repeated_specialPackInfoList_codec);
      if (NextShowExchangeRPTs != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(NextShowExchangeRPTs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      cardActInfoMap_.WriteTo(ref output, _map_cardActInfoMap_codec);
      if (TotalJoinCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalJoinCount);
      }
      cardRoundInfoMap_.WriteTo(ref output, _map_cardRoundInfoMap_codec);
      if (NextRefreshGiveCardTs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(NextRefreshGiveCardTs);
      }
      if (CurGiveCardNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurGiveCardNum);
      }
      specialPackInfoList_.WriteTo(ref output, _repeated_specialPackInfoList_codec);
      if (NextShowExchangeRPTs != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(NextShowExchangeRPTs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cardActInfoMap_.CalculateSize(_map_cardActInfoMap_codec);
      if (TotalJoinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalJoinCount);
      }
      size += cardRoundInfoMap_.CalculateSize(_map_cardRoundInfoMap_codec);
      if (NextRefreshGiveCardTs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextRefreshGiveCardTs);
      }
      if (CurGiveCardNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurGiveCardNum);
      }
      size += specialPackInfoList_.CalculateSize(_repeated_specialPackInfoList_codec);
      if (NextShowExchangeRPTs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextShowExchangeRPTs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardActivity other) {
      if (other == null) {
        return;
      }
      cardActInfoMap_.Add(other.cardActInfoMap_);
      if (other.TotalJoinCount != 0) {
        TotalJoinCount = other.TotalJoinCount;
      }
      cardRoundInfoMap_.Add(other.cardRoundInfoMap_);
      if (other.NextRefreshGiveCardTs != 0L) {
        NextRefreshGiveCardTs = other.NextRefreshGiveCardTs;
      }
      if (other.CurGiveCardNum != 0) {
        CurGiveCardNum = other.CurGiveCardNum;
      }
      specialPackInfoList_.Add(other.specialPackInfoList_);
      if (other.NextShowExchangeRPTs != 0L) {
        NextShowExchangeRPTs = other.NextShowExchangeRPTs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cardActInfoMap_.AddEntriesFrom(input, _map_cardActInfoMap_codec);
            break;
          }
          case 16: {
            TotalJoinCount = input.ReadInt32();
            break;
          }
          case 26: {
            cardRoundInfoMap_.AddEntriesFrom(input, _map_cardRoundInfoMap_codec);
            break;
          }
          case 32: {
            NextRefreshGiveCardTs = input.ReadInt64();
            break;
          }
          case 40: {
            CurGiveCardNum = input.ReadInt32();
            break;
          }
          case 50: {
            specialPackInfoList_.AddEntriesFrom(input, _repeated_specialPackInfoList_codec);
            break;
          }
          case 56: {
            NextShowExchangeRPTs = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            cardActInfoMap_.AddEntriesFrom(ref input, _map_cardActInfoMap_codec);
            break;
          }
          case 16: {
            TotalJoinCount = input.ReadInt32();
            break;
          }
          case 26: {
            cardRoundInfoMap_.AddEntriesFrom(ref input, _map_cardRoundInfoMap_codec);
            break;
          }
          case 32: {
            NextRefreshGiveCardTs = input.ReadInt64();
            break;
          }
          case 40: {
            CurGiveCardNum = input.ReadInt32();
            break;
          }
          case 50: {
            specialPackInfoList_.AddEntriesFrom(ref input, _repeated_specialPackInfoList_codec);
            break;
          }
          case 56: {
            NextShowExchangeRPTs = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///此结构11.0版本之后不再使用
  /// </summary>
  public sealed partial class CardActivityInfo : pb::IMessage<CardActivityInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardActivityInfo> _parser = new pb::MessageParser<CardActivityInfo>(() => new CardActivityInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardActivityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.CardActivityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardActivityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardActivityInfo(CardActivityInfo other) : this() {
      cardLimitTempId_ = other.cardLimitTempId_;
      totalCostEnergy_ = other.totalCostEnergy_;
      startTotalIAP_ = other.startTotalIAP_;
      isRecAlbumReward_ = other.isRecAlbumReward_;
      recRewardGroupIds_ = other.recRewardGroupIds_.Clone();
      cardInfoMap_ = other.cardInfoMap_.Clone();
      cardJokerInfoList_ = other.cardJokerInfoList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardActivityInfo Clone() {
      return new CardActivityInfo(this);
    }

    /// <summary>Field number for the "CardLimitTempId" field.</summary>
    public const int CardLimitTempIdFieldNumber = 1;
    private int cardLimitTempId_;
    /// <summary>
    ///本期卡牌活动针对卡片限制条件信息(CardLimit)要统一使用的模板Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardLimitTempId {
      get { return cardLimitTempId_; }
      set {
        cardLimitTempId_ = value;
      }
    }

    /// <summary>Field number for the "TotalCostEnergy" field.</summary>
    public const int TotalCostEnergyFieldNumber = 2;
    private ulong totalCostEnergy_;
    /// <summary>
    ///活动期间总共消耗的能量值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalCostEnergy {
      get { return totalCostEnergy_; }
      set {
        totalCostEnergy_ = value;
      }
    }

    /// <summary>Field number for the "StartTotalIAP" field.</summary>
    public const int StartTotalIAPFieldNumber = 3;
    private int startTotalIAP_;
    /// <summary>
    ///活动开始时该玩家已经累计充值过的金额(以服务器为准单位美分)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTotalIAP {
      get { return startTotalIAP_; }
      set {
        startTotalIAP_ = value;
      }
    }

    /// <summary>Field number for the "IsRecAlbumReward" field.</summary>
    public const int IsRecAlbumRewardFieldNumber = 4;
    private bool isRecAlbumReward_;
    /// <summary>
    ///是否已领取整个卡册集齐后的最终奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRecAlbumReward {
      get { return isRecAlbumReward_; }
      set {
        isRecAlbumReward_ = value;
      }
    }

    /// <summary>Field number for the "RecRewardGroupIds" field.</summary>
    public const int RecRewardGroupIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_recRewardGroupIds_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> recRewardGroupIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取奖励的卡组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RecRewardGroupIds {
      get { return recRewardGroupIds_; }
    }

    /// <summary>Field number for the "CardInfoMap" field.</summary>
    public const int CardInfoMapFieldNumber = 6;
    private static readonly pbc::MapField<int, global::fat.gamekitdata.CardInfo>.Codec _map_cardInfoMap_codec
        = new pbc::MapField<int, global::fat.gamekitdata.CardInfo>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.gamekitdata.CardInfo.Parser), 50);
    private readonly pbc::MapField<int, global::fat.gamekitdata.CardInfo> cardInfoMap_ = new pbc::MapField<int, global::fat.gamekitdata.CardInfo>();
    /// <summary>
    ///本期卡牌活动涉及到的所有的卡片信息 key为卡片id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.gamekitdata.CardInfo> CardInfoMap {
      get { return cardInfoMap_; }
    }

    /// <summary>Field number for the "CardJokerInfoList" field.</summary>
    public const int CardJokerInfoListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::fat.gamekitdata.CardJokerInfo> _repeated_cardJokerInfoList_codec
        = pb::FieldCodec.ForMessage(58, global::fat.gamekitdata.CardJokerInfo.Parser);
    private readonly pbc::RepeatedField<global::fat.gamekitdata.CardJokerInfo> cardJokerInfoList_ = new pbc::RepeatedField<global::fat.gamekitdata.CardJokerInfo>();
    /// <summary>
    ///本期卡牌活动目前获得的所有万能卡信息 已按规则排好序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.gamekitdata.CardJokerInfo> CardJokerInfoList {
      get { return cardJokerInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardActivityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardActivityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardLimitTempId != other.CardLimitTempId) return false;
      if (TotalCostEnergy != other.TotalCostEnergy) return false;
      if (StartTotalIAP != other.StartTotalIAP) return false;
      if (IsRecAlbumReward != other.IsRecAlbumReward) return false;
      if(!recRewardGroupIds_.Equals(other.recRewardGroupIds_)) return false;
      if (!CardInfoMap.Equals(other.CardInfoMap)) return false;
      if(!cardJokerInfoList_.Equals(other.cardJokerInfoList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardLimitTempId != 0) hash ^= CardLimitTempId.GetHashCode();
      if (TotalCostEnergy != 0UL) hash ^= TotalCostEnergy.GetHashCode();
      if (StartTotalIAP != 0) hash ^= StartTotalIAP.GetHashCode();
      if (IsRecAlbumReward != false) hash ^= IsRecAlbumReward.GetHashCode();
      hash ^= recRewardGroupIds_.GetHashCode();
      hash ^= CardInfoMap.GetHashCode();
      hash ^= cardJokerInfoList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CardLimitTempId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardLimitTempId);
      }
      if (TotalCostEnergy != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TotalCostEnergy);
      }
      if (StartTotalIAP != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StartTotalIAP);
      }
      if (IsRecAlbumReward != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsRecAlbumReward);
      }
      recRewardGroupIds_.WriteTo(output, _repeated_recRewardGroupIds_codec);
      cardInfoMap_.WriteTo(output, _map_cardInfoMap_codec);
      cardJokerInfoList_.WriteTo(output, _repeated_cardJokerInfoList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CardLimitTempId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardLimitTempId);
      }
      if (TotalCostEnergy != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TotalCostEnergy);
      }
      if (StartTotalIAP != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StartTotalIAP);
      }
      if (IsRecAlbumReward != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsRecAlbumReward);
      }
      recRewardGroupIds_.WriteTo(ref output, _repeated_recRewardGroupIds_codec);
      cardInfoMap_.WriteTo(ref output, _map_cardInfoMap_codec);
      cardJokerInfoList_.WriteTo(ref output, _repeated_cardJokerInfoList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardLimitTempId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardLimitTempId);
      }
      if (TotalCostEnergy != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalCostEnergy);
      }
      if (StartTotalIAP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTotalIAP);
      }
      if (IsRecAlbumReward != false) {
        size += 1 + 1;
      }
      size += recRewardGroupIds_.CalculateSize(_repeated_recRewardGroupIds_codec);
      size += cardInfoMap_.CalculateSize(_map_cardInfoMap_codec);
      size += cardJokerInfoList_.CalculateSize(_repeated_cardJokerInfoList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardActivityInfo other) {
      if (other == null) {
        return;
      }
      if (other.CardLimitTempId != 0) {
        CardLimitTempId = other.CardLimitTempId;
      }
      if (other.TotalCostEnergy != 0UL) {
        TotalCostEnergy = other.TotalCostEnergy;
      }
      if (other.StartTotalIAP != 0) {
        StartTotalIAP = other.StartTotalIAP;
      }
      if (other.IsRecAlbumReward != false) {
        IsRecAlbumReward = other.IsRecAlbumReward;
      }
      recRewardGroupIds_.Add(other.recRewardGroupIds_);
      cardInfoMap_.Add(other.cardInfoMap_);
      cardJokerInfoList_.Add(other.cardJokerInfoList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CardLimitTempId = input.ReadInt32();
            break;
          }
          case 16: {
            TotalCostEnergy = input.ReadUInt64();
            break;
          }
          case 24: {
            StartTotalIAP = input.ReadInt32();
            break;
          }
          case 32: {
            IsRecAlbumReward = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            recRewardGroupIds_.AddEntriesFrom(input, _repeated_recRewardGroupIds_codec);
            break;
          }
          case 50: {
            cardInfoMap_.AddEntriesFrom(input, _map_cardInfoMap_codec);
            break;
          }
          case 58: {
            cardJokerInfoList_.AddEntriesFrom(input, _repeated_cardJokerInfoList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CardLimitTempId = input.ReadInt32();
            break;
          }
          case 16: {
            TotalCostEnergy = input.ReadUInt64();
            break;
          }
          case 24: {
            StartTotalIAP = input.ReadInt32();
            break;
          }
          case 32: {
            IsRecAlbumReward = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            recRewardGroupIds_.AddEntriesFrom(ref input, _repeated_recRewardGroupIds_codec);
            break;
          }
          case 50: {
            cardInfoMap_.AddEntriesFrom(ref input, _map_cardInfoMap_codec);
            break;
          }
          case 58: {
            cardJokerInfoList_.AddEntriesFrom(ref input, _repeated_cardJokerInfoList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///11.0版本新加的结构，CardActivityInfo不再使用
  /// </summary>
  public sealed partial class CardRoundInfo : pb::IMessage<CardRoundInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardRoundInfo> _parser = new pb::MessageParser<CardRoundInfo>(() => new CardRoundInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardRoundInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.CardActivityReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardRoundInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardRoundInfo(CardRoundInfo other) : this() {
      curOpenAlbumIndex_ = other.curOpenAlbumIndex_;
      curOpenAlbumInfo_ = other.curOpenAlbumInfo_ != null ? other.curOpenAlbumInfo_.Clone() : null;
      cardJokerInfoList_ = other.cardJokerInfoList_.Clone();
      starExchangeInfo_ = other.starExchangeInfo_ != null ? other.starExchangeInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardRoundInfo Clone() {
      return new CardRoundInfo(this);
    }

    /// <summary>Field number for the "CurOpenAlbumIndex" field.</summary>
    public const int CurOpenAlbumIndexFieldNumber = 1;
    private int curOpenAlbumIndex_;
    /// <summary>
    ///当前正在开启的卡册序号,默认从0开始,需要使用此序号去EventCardRound.includeAlbumId中去索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurOpenAlbumIndex {
      get { return curOpenAlbumIndex_; }
      set {
        curOpenAlbumIndex_ = value;
      }
    }

    /// <summary>Field number for the "CurOpenAlbumInfo" field.</summary>
    public const int CurOpenAlbumInfoFieldNumber = 2;
    private global::fat.gamekitdata.CardAlbumInfo curOpenAlbumInfo_;
    /// <summary>
    ///当前正在开启的卡册信息 每次开启新的卡册时都会随机新的数据 并把上一次的覆盖掉
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.CardAlbumInfo CurOpenAlbumInfo {
      get { return curOpenAlbumInfo_; }
      set {
        curOpenAlbumInfo_ = value;
      }
    }

    /// <summary>Field number for the "CardJokerInfoList" field.</summary>
    public const int CardJokerInfoListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::fat.gamekitdata.CardJokerInfo> _repeated_cardJokerInfoList_codec
        = pb::FieldCodec.ForMessage(26, global::fat.gamekitdata.CardJokerInfo.Parser);
    private readonly pbc::RepeatedField<global::fat.gamekitdata.CardJokerInfo> cardJokerInfoList_ = new pbc::RepeatedField<global::fat.gamekitdata.CardJokerInfo>();
    /// <summary>
    ///本期卡牌活动目前获得的所有万能卡信息 已按规则排好序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.gamekitdata.CardJokerInfo> CardJokerInfoList {
      get { return cardJokerInfoList_; }
    }

    /// <summary>Field number for the "StarExchangeInfo" field.</summary>
    public const int StarExchangeInfoFieldNumber = 4;
    private global::fat.gamekitdata.CardStarExchangeInfo starExchangeInfo_;
    /// <summary>
    ///卡片星星兑换功能数据结构
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.CardStarExchangeInfo StarExchangeInfo {
      get { return starExchangeInfo_; }
      set {
        starExchangeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardRoundInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardRoundInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurOpenAlbumIndex != other.CurOpenAlbumIndex) return false;
      if (!object.Equals(CurOpenAlbumInfo, other.CurOpenAlbumInfo)) return false;
      if(!cardJokerInfoList_.Equals(other.cardJokerInfoList_)) return false;
      if (!object.Equals(StarExchangeInfo, other.StarExchangeInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurOpenAlbumIndex != 0) hash ^= CurOpenAlbumIndex.GetHashCode();
      if (curOpenAlbumInfo_ != null) hash ^= CurOpenAlbumInfo.GetHashCode();
      hash ^= cardJokerInfoList_.GetHashCode();
      if (starExchangeInfo_ != null) hash ^= StarExchangeInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurOpenAlbumIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurOpenAlbumIndex);
      }
      if (curOpenAlbumInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CurOpenAlbumInfo);
      }
      cardJokerInfoList_.WriteTo(output, _repeated_cardJokerInfoList_codec);
      if (starExchangeInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StarExchangeInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurOpenAlbumIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurOpenAlbumIndex);
      }
      if (curOpenAlbumInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CurOpenAlbumInfo);
      }
      cardJokerInfoList_.WriteTo(ref output, _repeated_cardJokerInfoList_codec);
      if (starExchangeInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StarExchangeInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurOpenAlbumIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurOpenAlbumIndex);
      }
      if (curOpenAlbumInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurOpenAlbumInfo);
      }
      size += cardJokerInfoList_.CalculateSize(_repeated_cardJokerInfoList_codec);
      if (starExchangeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StarExchangeInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardRoundInfo other) {
      if (other == null) {
        return;
      }
      if (other.CurOpenAlbumIndex != 0) {
        CurOpenAlbumIndex = other.CurOpenAlbumIndex;
      }
      if (other.curOpenAlbumInfo_ != null) {
        if (curOpenAlbumInfo_ == null) {
          CurOpenAlbumInfo = new global::fat.gamekitdata.CardAlbumInfo();
        }
        CurOpenAlbumInfo.MergeFrom(other.CurOpenAlbumInfo);
      }
      cardJokerInfoList_.Add(other.cardJokerInfoList_);
      if (other.starExchangeInfo_ != null) {
        if (starExchangeInfo_ == null) {
          StarExchangeInfo = new global::fat.gamekitdata.CardStarExchangeInfo();
        }
        StarExchangeInfo.MergeFrom(other.StarExchangeInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurOpenAlbumIndex = input.ReadInt32();
            break;
          }
          case 18: {
            if (curOpenAlbumInfo_ == null) {
              CurOpenAlbumInfo = new global::fat.gamekitdata.CardAlbumInfo();
            }
            input.ReadMessage(CurOpenAlbumInfo);
            break;
          }
          case 26: {
            cardJokerInfoList_.AddEntriesFrom(input, _repeated_cardJokerInfoList_codec);
            break;
          }
          case 34: {
            if (starExchangeInfo_ == null) {
              StarExchangeInfo = new global::fat.gamekitdata.CardStarExchangeInfo();
            }
            input.ReadMessage(StarExchangeInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurOpenAlbumIndex = input.ReadInt32();
            break;
          }
          case 18: {
            if (curOpenAlbumInfo_ == null) {
              CurOpenAlbumInfo = new global::fat.gamekitdata.CardAlbumInfo();
            }
            input.ReadMessage(CurOpenAlbumInfo);
            break;
          }
          case 26: {
            cardJokerInfoList_.AddEntriesFrom(ref input, _repeated_cardJokerInfoList_codec);
            break;
          }
          case 34: {
            if (starExchangeInfo_ == null) {
              StarExchangeInfo = new global::fat.gamekitdata.CardStarExchangeInfo();
            }
            input.ReadMessage(StarExchangeInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///11.0版本新加的结构，CardActivityInfo不再使用
  /// </summary>
  public sealed partial class CardAlbumInfo : pb::IMessage<CardAlbumInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardAlbumInfo> _parser = new pb::MessageParser<CardAlbumInfo>(() => new CardAlbumInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardAlbumInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.CardActivityReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAlbumInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAlbumInfo(CardAlbumInfo other) : this() {
      cardLimitTempId_ = other.cardLimitTempId_;
      totalCostEnergy_ = other.totalCostEnergy_;
      startTotalIAP_ = other.startTotalIAP_;
      isRecAlbumReward_ = other.isRecAlbumReward_;
      recRewardGroupIds_ = other.recRewardGroupIds_.Clone();
      cardInfoMap_ = other.cardInfoMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardAlbumInfo Clone() {
      return new CardAlbumInfo(this);
    }

    /// <summary>Field number for the "CardLimitTempId" field.</summary>
    public const int CardLimitTempIdFieldNumber = 1;
    private int cardLimitTempId_;
    /// <summary>
    ///本卡册针对卡片限制条件信息(CardLimit)要统一使用的模板Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardLimitTempId {
      get { return cardLimitTempId_; }
      set {
        cardLimitTempId_ = value;
      }
    }

    /// <summary>Field number for the "TotalCostEnergy" field.</summary>
    public const int TotalCostEnergyFieldNumber = 2;
    private ulong totalCostEnergy_;
    /// <summary>
    ///本卡册开启期间总共消耗的能量值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalCostEnergy {
      get { return totalCostEnergy_; }
      set {
        totalCostEnergy_ = value;
      }
    }

    /// <summary>Field number for the "StartTotalIAP" field.</summary>
    public const int StartTotalIAPFieldNumber = 3;
    private int startTotalIAP_;
    /// <summary>
    ///本卡册开始时该玩家已经累计充值过的金额(以服务器为准单位美分)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTotalIAP {
      get { return startTotalIAP_; }
      set {
        startTotalIAP_ = value;
      }
    }

    /// <summary>Field number for the "IsRecAlbumReward" field.</summary>
    public const int IsRecAlbumRewardFieldNumber = 4;
    private bool isRecAlbumReward_;
    /// <summary>
    ///是否已领取整个卡册集齐后的最终奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRecAlbumReward {
      get { return isRecAlbumReward_; }
      set {
        isRecAlbumReward_ = value;
      }
    }

    /// <summary>Field number for the "RecRewardGroupIds" field.</summary>
    public const int RecRewardGroupIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_recRewardGroupIds_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> recRewardGroupIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已领取奖励的卡组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RecRewardGroupIds {
      get { return recRewardGroupIds_; }
    }

    /// <summary>Field number for the "CardInfoMap" field.</summary>
    public const int CardInfoMapFieldNumber = 6;
    private static readonly pbc::MapField<int, global::fat.gamekitdata.CardInfo>.Codec _map_cardInfoMap_codec
        = new pbc::MapField<int, global::fat.gamekitdata.CardInfo>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.gamekitdata.CardInfo.Parser), 50);
    private readonly pbc::MapField<int, global::fat.gamekitdata.CardInfo> cardInfoMap_ = new pbc::MapField<int, global::fat.gamekitdata.CardInfo>();
    /// <summary>
    ///本卡册涉及到的所有的卡片信息 key为卡片id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.gamekitdata.CardInfo> CardInfoMap {
      get { return cardInfoMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardAlbumInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardAlbumInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardLimitTempId != other.CardLimitTempId) return false;
      if (TotalCostEnergy != other.TotalCostEnergy) return false;
      if (StartTotalIAP != other.StartTotalIAP) return false;
      if (IsRecAlbumReward != other.IsRecAlbumReward) return false;
      if(!recRewardGroupIds_.Equals(other.recRewardGroupIds_)) return false;
      if (!CardInfoMap.Equals(other.CardInfoMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardLimitTempId != 0) hash ^= CardLimitTempId.GetHashCode();
      if (TotalCostEnergy != 0UL) hash ^= TotalCostEnergy.GetHashCode();
      if (StartTotalIAP != 0) hash ^= StartTotalIAP.GetHashCode();
      if (IsRecAlbumReward != false) hash ^= IsRecAlbumReward.GetHashCode();
      hash ^= recRewardGroupIds_.GetHashCode();
      hash ^= CardInfoMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CardLimitTempId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardLimitTempId);
      }
      if (TotalCostEnergy != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TotalCostEnergy);
      }
      if (StartTotalIAP != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StartTotalIAP);
      }
      if (IsRecAlbumReward != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsRecAlbumReward);
      }
      recRewardGroupIds_.WriteTo(output, _repeated_recRewardGroupIds_codec);
      cardInfoMap_.WriteTo(output, _map_cardInfoMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CardLimitTempId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardLimitTempId);
      }
      if (TotalCostEnergy != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TotalCostEnergy);
      }
      if (StartTotalIAP != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StartTotalIAP);
      }
      if (IsRecAlbumReward != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsRecAlbumReward);
      }
      recRewardGroupIds_.WriteTo(ref output, _repeated_recRewardGroupIds_codec);
      cardInfoMap_.WriteTo(ref output, _map_cardInfoMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardLimitTempId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardLimitTempId);
      }
      if (TotalCostEnergy != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalCostEnergy);
      }
      if (StartTotalIAP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTotalIAP);
      }
      if (IsRecAlbumReward != false) {
        size += 1 + 1;
      }
      size += recRewardGroupIds_.CalculateSize(_repeated_recRewardGroupIds_codec);
      size += cardInfoMap_.CalculateSize(_map_cardInfoMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardAlbumInfo other) {
      if (other == null) {
        return;
      }
      if (other.CardLimitTempId != 0) {
        CardLimitTempId = other.CardLimitTempId;
      }
      if (other.TotalCostEnergy != 0UL) {
        TotalCostEnergy = other.TotalCostEnergy;
      }
      if (other.StartTotalIAP != 0) {
        StartTotalIAP = other.StartTotalIAP;
      }
      if (other.IsRecAlbumReward != false) {
        IsRecAlbumReward = other.IsRecAlbumReward;
      }
      recRewardGroupIds_.Add(other.recRewardGroupIds_);
      cardInfoMap_.Add(other.cardInfoMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CardLimitTempId = input.ReadInt32();
            break;
          }
          case 16: {
            TotalCostEnergy = input.ReadUInt64();
            break;
          }
          case 24: {
            StartTotalIAP = input.ReadInt32();
            break;
          }
          case 32: {
            IsRecAlbumReward = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            recRewardGroupIds_.AddEntriesFrom(input, _repeated_recRewardGroupIds_codec);
            break;
          }
          case 50: {
            cardInfoMap_.AddEntriesFrom(input, _map_cardInfoMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CardLimitTempId = input.ReadInt32();
            break;
          }
          case 16: {
            TotalCostEnergy = input.ReadUInt64();
            break;
          }
          case 24: {
            StartTotalIAP = input.ReadInt32();
            break;
          }
          case 32: {
            IsRecAlbumReward = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            recRewardGroupIds_.AddEntriesFrom(ref input, _repeated_recRewardGroupIds_codec);
            break;
          }
          case 50: {
            cardInfoMap_.AddEntriesFrom(ref input, _map_cardInfoMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardInfo : pb::IMessage<CardInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardInfo> _parser = new pb::MessageParser<CardInfo>(() => new CardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.CardActivityReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInfo(CardInfo other) : this() {
      limitId_ = other.limitId_;
      isOwn_ = other.isOwn_;
      isNew_ = other.isNew_;
      ownCount_ = other.ownCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInfo Clone() {
      return new CardInfo(this);
    }

    /// <summary>Field number for the "LimitId" field.</summary>
    public const int LimitIdFieldNumber = 1;
    private int limitId_;
    /// <summary>
    ///此卡片的限制条件信息(CardLimit.id) 每次开启新一轮卡册时都会随机一次并存档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitId {
      get { return limitId_; }
      set {
        limitId_ = value;
      }
    }

    /// <summary>Field number for the "IsOwn" field.</summary>
    public const int IsOwnFieldNumber = 2;
    private bool isOwn_;
    /// <summary>
    ///此卡片是否已拥有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOwn {
      get { return isOwn_; }
      set {
        isOwn_ = value;
      }
    }

    /// <summary>Field number for the "IsNew" field.</summary>
    public const int IsNewFieldNumber = 3;
    private bool isNew_;
    /// <summary>
    ///此卡片是否为新卡(获得后是否被查看过,用于红点显示) 默认false,第一次拥有此卡后此值为true，查看完此卡后此值设为false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNew {
      get { return isNew_; }
      set {
        isNew_ = value;
      }
    }

    /// <summary>Field number for the "OwnCount" field.</summary>
    public const int OwnCountFieldNumber = 4;
    private int ownCount_;
    /// <summary>
    ///此卡片已拥有的张数 默认为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwnCount {
      get { return ownCount_; }
      set {
        ownCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LimitId != other.LimitId) return false;
      if (IsOwn != other.IsOwn) return false;
      if (IsNew != other.IsNew) return false;
      if (OwnCount != other.OwnCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LimitId != 0) hash ^= LimitId.GetHashCode();
      if (IsOwn != false) hash ^= IsOwn.GetHashCode();
      if (IsNew != false) hash ^= IsNew.GetHashCode();
      if (OwnCount != 0) hash ^= OwnCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LimitId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LimitId);
      }
      if (IsOwn != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOwn);
      }
      if (IsNew != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsNew);
      }
      if (OwnCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OwnCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LimitId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LimitId);
      }
      if (IsOwn != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOwn);
      }
      if (IsNew != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsNew);
      }
      if (OwnCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OwnCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LimitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitId);
      }
      if (IsOwn != false) {
        size += 1 + 1;
      }
      if (IsNew != false) {
        size += 1 + 1;
      }
      if (OwnCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardInfo other) {
      if (other == null) {
        return;
      }
      if (other.LimitId != 0) {
        LimitId = other.LimitId;
      }
      if (other.IsOwn != false) {
        IsOwn = other.IsOwn;
      }
      if (other.IsNew != false) {
        IsNew = other.IsNew;
      }
      if (other.OwnCount != 0) {
        OwnCount = other.OwnCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LimitId = input.ReadInt32();
            break;
          }
          case 16: {
            IsOwn = input.ReadBool();
            break;
          }
          case 24: {
            IsNew = input.ReadBool();
            break;
          }
          case 32: {
            OwnCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LimitId = input.ReadInt32();
            break;
          }
          case 16: {
            IsOwn = input.ReadBool();
            break;
          }
          case 24: {
            IsNew = input.ReadBool();
            break;
          }
          case 32: {
            OwnCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CardJokerInfo : pb::IMessage<CardJokerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardJokerInfo> _parser = new pb::MessageParser<CardJokerInfo>(() => new CardJokerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardJokerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.CardActivityReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardJokerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardJokerInfo(CardJokerInfo other) : this() {
      jokerId_ = other.jokerId_;
      jokerExpireTs_ = other.jokerExpireTs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardJokerInfo Clone() {
      return new CardJokerInfo(this);
    }

    /// <summary>Field number for the "JokerId" field.</summary>
    public const int JokerIdFieldNumber = 1;
    private int jokerId_;
    /// <summary>
    ///万能卡配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JokerId {
      get { return jokerId_; }
      set {
        jokerId_ = value;
      }
    }

    /// <summary>Field number for the "JokerExpireTs" field.</summary>
    public const int JokerExpireTsFieldNumber = 2;
    private long jokerExpireTs_;
    /// <summary>
    ///万能卡过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long JokerExpireTs {
      get { return jokerExpireTs_; }
      set {
        jokerExpireTs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardJokerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardJokerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JokerId != other.JokerId) return false;
      if (JokerExpireTs != other.JokerExpireTs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JokerId != 0) hash ^= JokerId.GetHashCode();
      if (JokerExpireTs != 0L) hash ^= JokerExpireTs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (JokerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(JokerId);
      }
      if (JokerExpireTs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(JokerExpireTs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (JokerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(JokerId);
      }
      if (JokerExpireTs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(JokerExpireTs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JokerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JokerId);
      }
      if (JokerExpireTs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JokerExpireTs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardJokerInfo other) {
      if (other == null) {
        return;
      }
      if (other.JokerId != 0) {
        JokerId = other.JokerId;
      }
      if (other.JokerExpireTs != 0L) {
        JokerExpireTs = other.JokerExpireTs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            JokerId = input.ReadInt32();
            break;
          }
          case 16: {
            JokerExpireTs = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            JokerId = input.ReadInt32();
            break;
          }
          case 16: {
            JokerExpireTs = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///卡片星星兑换功能数据结构
  /// </summary>
  public sealed partial class CardStarExchangeInfo : pb::IMessage<CardStarExchangeInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardStarExchangeInfo> _parser = new pb::MessageParser<CardStarExchangeInfo>(() => new CardStarExchangeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardStarExchangeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.CardActivityReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardStarExchangeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardStarExchangeInfo(CardStarExchangeInfo other) : this() {
      totalFixedStarNum_ = other.totalFixedStarNum_;
      totalUsedStarNum_ = other.totalUsedStarNum_;
      starExchangeCdList_ = other.starExchangeCdList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardStarExchangeInfo Clone() {
      return new CardStarExchangeInfo(this);
    }

    /// <summary>Field number for the "TotalFixedStarNum" field.</summary>
    public const int TotalFixedStarNumFieldNumber = 1;
    private int totalFixedStarNum_;
    /// <summary>
    ///本次卡册活动中玩家累计转化获得的星星固定库存
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalFixedStarNum {
      get { return totalFixedStarNum_; }
      set {
        totalFixedStarNum_ = value;
      }
    }

    /// <summary>Field number for the "TotalUsedStarNum" field.</summary>
    public const int TotalUsedStarNumFieldNumber = 2;
    private int totalUsedStarNum_;
    /// <summary>
    ///本次卡册活动中玩家通过兑换累计消耗的星星数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalUsedStarNum {
      get { return totalUsedStarNum_; }
      set {
        totalUsedStarNum_ = value;
      }
    }

    /// <summary>Field number for the "StarExchangeCdList" field.</summary>
    public const int StarExchangeCdListFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_starExchangeCdList_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> starExchangeCdList_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///本次卡册活动中各个兑换条目下次可兑换时间 取用顺序和配置顺序保持一致
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> StarExchangeCdList {
      get { return starExchangeCdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardStarExchangeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardStarExchangeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalFixedStarNum != other.TotalFixedStarNum) return false;
      if (TotalUsedStarNum != other.TotalUsedStarNum) return false;
      if(!starExchangeCdList_.Equals(other.starExchangeCdList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalFixedStarNum != 0) hash ^= TotalFixedStarNum.GetHashCode();
      if (TotalUsedStarNum != 0) hash ^= TotalUsedStarNum.GetHashCode();
      hash ^= starExchangeCdList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalFixedStarNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalFixedStarNum);
      }
      if (TotalUsedStarNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalUsedStarNum);
      }
      starExchangeCdList_.WriteTo(output, _repeated_starExchangeCdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalFixedStarNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalFixedStarNum);
      }
      if (TotalUsedStarNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalUsedStarNum);
      }
      starExchangeCdList_.WriteTo(ref output, _repeated_starExchangeCdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalFixedStarNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalFixedStarNum);
      }
      if (TotalUsedStarNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalUsedStarNum);
      }
      size += starExchangeCdList_.CalculateSize(_repeated_starExchangeCdList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardStarExchangeInfo other) {
      if (other == null) {
        return;
      }
      if (other.TotalFixedStarNum != 0) {
        TotalFixedStarNum = other.TotalFixedStarNum;
      }
      if (other.TotalUsedStarNum != 0) {
        TotalUsedStarNum = other.TotalUsedStarNum;
      }
      starExchangeCdList_.Add(other.starExchangeCdList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalFixedStarNum = input.ReadInt32();
            break;
          }
          case 16: {
            TotalUsedStarNum = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            starExchangeCdList_.AddEntriesFrom(input, _repeated_starExchangeCdList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalFixedStarNum = input.ReadInt32();
            break;
          }
          case 16: {
            TotalUsedStarNum = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            starExchangeCdList_.AddEntriesFrom(ref input, _repeated_starExchangeCdList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///1/N闪卡必得功能数据结构
  /// </summary>
  public sealed partial class CardSpecialPackInfo : pb::IMessage<CardSpecialPackInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardSpecialPackInfo> _parser = new pb::MessageParser<CardSpecialPackInfo>(() => new CardSpecialPackInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardSpecialPackInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.CardActivityReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardSpecialPackInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardSpecialPackInfo(CardSpecialPackInfo other) : this() {
      packId_ = other.packId_;
      cardIdPool_ = other.cardIdPool_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardSpecialPackInfo Clone() {
      return new CardSpecialPackInfo(this);
    }

    /// <summary>Field number for the "PackId" field.</summary>
    public const int PackIdFieldNumber = 1;
    private int packId_;
    /// <summary>
    ///卡包id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackId {
      get { return packId_; }
      set {
        packId_ = value;
      }
    }

    /// <summary>Field number for the "CardIdPool" field.</summary>
    public const int CardIdPoolFieldNumber = 2;
    private string cardIdPool_ = "";
    /// <summary>
    ///打开本卡包可能获得的卡片奖池 多个id连接 逗号分隔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CardIdPool {
      get { return cardIdPool_; }
      set {
        cardIdPool_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardSpecialPackInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardSpecialPackInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackId != other.PackId) return false;
      if (CardIdPool != other.CardIdPool) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackId != 0) hash ^= PackId.GetHashCode();
      if (CardIdPool.Length != 0) hash ^= CardIdPool.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PackId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PackId);
      }
      if (CardIdPool.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CardIdPool);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PackId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PackId);
      }
      if (CardIdPool.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CardIdPool);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackId);
      }
      if (CardIdPool.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CardIdPool);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardSpecialPackInfo other) {
      if (other == null) {
        return;
      }
      if (other.PackId != 0) {
        PackId = other.PackId;
      }
      if (other.CardIdPool.Length != 0) {
        CardIdPool = other.CardIdPool;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PackId = input.ReadInt32();
            break;
          }
          case 18: {
            CardIdPool = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PackId = input.ReadInt32();
            break;
          }
          case 18: {
            CardIdPool = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
