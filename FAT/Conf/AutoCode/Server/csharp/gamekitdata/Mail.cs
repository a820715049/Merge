// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gamekitdata/mail.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.gamekitdata {

  /// <summary>Holder for reflection information generated from gamekitdata/mail.proto</summary>
  public static partial class MailReflection {

    #region Descriptor
    /// <summary>File descriptor for gamekitdata/mail.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MailReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZnYW1la2l0ZGF0YS9tYWlsLnByb3RvEgtnYW1la2l0ZGF0YRobZ2FtZWtp",
            "dGRhdGEvZW51bV9kYXRhLnByb3RvIg4KDE1haWxUeXBlRGF0YSKGBAoETWFp",
            "bBIKCgJJZBgBIAEoBBILCgNVaWQYAiABKAQSDwoHRnJvbVVpZBgEIAEoBBIN",
            "CgVJc1JhdxgFIAEoCBINCgVUaXRsZRgGIAEoCRIPCgdDb250ZW50GAcgASgJ",
            "EiMKBFR5cGUYCCABKA4yFS5nYW1la2l0ZGF0YS5NYWlsVHlwZRIvCgdSZXdh",
            "cmRzGAkgAygLMh4uZ2FtZWtpdGRhdGEuTWFpbC5SZXdhcmRzRW50cnkSEgoK",
            "Q3JlYXRlVGltZRgKIAEoAxISCgpFeHBpcmVUaW1lGAsgASgDEg4KBklzUmVh",
            "ZBgMIAEoCBIRCglJc0NsYWltZWQYDSABKAgSKgoHRXh0RGF0YRgOIAEoCzIZ",
            "LmdhbWVraXRkYXRhLk1haWxUeXBlRGF0YRIOCgZTb3VyY2UYDyABKAkSDwoH",
            "RXh0SW5mbxgQIAEoCRI5Cg1JbWFnZVBvc2l0aW9uGBEgASgOMiIuZ2FtZWtp",
            "dGRhdGEuTWFpbEltYWdlUG9zaXRpb25UeXBlEhAKCEltYWdlVXJsGBIgASgJ",
            "EiwKCWxpbmtfdHlwZRgTIAEoDjIZLmdhbWVraXRkYXRhLk1haWxMaW5rVHlw",
            "ZRIMCgRMaW5rGBQgASgJGi4KDFJld2FyZHNFbnRyeRILCgNrZXkYASABKAUS",
            "DQoFdmFsdWUYAiABKAU6AjgBQkVaMWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9j",
            "b25mL2dlbi9nb2xhbmcvZ2FtZWtpdGRhdGGqAg9mYXQuZ2FtZWtpdGRhdGFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.gamekitdata.EnumDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.MailTypeData), global::fat.gamekitdata.MailTypeData.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.Mail), global::fat.gamekitdata.Mail.Parser, new[]{ "Id", "Uid", "FromUid", "IsRaw", "Title", "Content", "Type", "Rewards", "CreateTime", "ExpireTime", "IsRead", "IsClaimed", "ExtData", "Source", "ExtInfo", "ImagePosition", "ImageUrl", "LinkType", "Link" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///自定义扩展字段，根据需要进行扩展
  /// </summary>
  public sealed partial class MailTypeData : pb::IMessage<MailTypeData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MailTypeData> _parser = new pb::MessageParser<MailTypeData>(() => new MailTypeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailTypeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MailReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailTypeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailTypeData(MailTypeData other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailTypeData Clone() {
      return new MailTypeData(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailTypeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailTypeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailTypeData other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// @Entry @NoCache
  /// </summary>
  public sealed partial class Mail : pb::IMessage<Mail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Mail> _parser = new pb::MessageParser<Mail>(() => new Mail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.MailReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail(Mail other) : this() {
      id_ = other.id_;
      uid_ = other.uid_;
      fromUid_ = other.fromUid_;
      isRaw_ = other.isRaw_;
      title_ = other.title_;
      content_ = other.content_;
      type_ = other.type_;
      rewards_ = other.rewards_.Clone();
      createTime_ = other.createTime_;
      expireTime_ = other.expireTime_;
      isRead_ = other.isRead_;
      isClaimed_ = other.isClaimed_;
      extData_ = other.extData_ != null ? other.extData_.Clone() : null;
      source_ = other.source_;
      extInfo_ = other.extInfo_;
      imagePosition_ = other.imagePosition_;
      imageUrl_ = other.imageUrl_;
      linkType_ = other.linkType_;
      link_ = other.link_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail Clone() {
      return new Mail(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    /// @Id @AutoIncrement
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 2;
    private ulong uid_;
    /// <summary>
    /// @Index @Hint
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "FromUid" field.</summary>
    public const int FromUidFieldNumber = 4;
    private ulong fromUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromUid {
      get { return fromUid_; }
      set {
        fromUid_ = value;
      }
    }

    /// <summary>Field number for the "IsRaw" field.</summary>
    public const int IsRawFieldNumber = 5;
    private bool isRaw_;
    /// <summary>
    ///true标题和内容不需要走key翻译
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRaw {
      get { return isRaw_; }
      set {
        isRaw_ = value;
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 6;
    private string title_ = "";
    /// <summary>
    ///@Size=256
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 7;
    private string content_ = "";
    /// <summary>
    ///@Size=4096
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 8;
    private global::fat.gamekitdata.MailType type_ = global::fat.gamekitdata.MailType.System;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.MailType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Rewards" field.</summary>
    public const int RewardsFieldNumber = 9;
    private static readonly pbc::MapField<int, int>.Codec _map_rewards_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 74);
    private readonly pbc::MapField<int, int> rewards_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "CreateTime" field.</summary>
    public const int CreateTimeFieldNumber = 10;
    private long createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "ExpireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 11;
    private long expireTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "IsRead" field.</summary>
    public const int IsReadFieldNumber = 12;
    private bool isRead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRead {
      get { return isRead_; }
      set {
        isRead_ = value;
      }
    }

    /// <summary>Field number for the "IsClaimed" field.</summary>
    public const int IsClaimedFieldNumber = 13;
    private bool isClaimed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsClaimed {
      get { return isClaimed_; }
      set {
        isClaimed_ = value;
      }
    }

    /// <summary>Field number for the "ExtData" field.</summary>
    public const int ExtDataFieldNumber = 14;
    private global::fat.gamekitdata.MailTypeData extData_;
    /// <summary>
    ///@Blob
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.MailTypeData ExtData {
      get { return extData_; }
      set {
        extData_ = value;
      }
    }

    /// <summary>Field number for the "Source" field.</summary>
    public const int SourceFieldNumber = 15;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExtInfo" field.</summary>
    public const int ExtInfoFieldNumber = 16;
    private string extInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtInfo {
      get { return extInfo_; }
      set {
        extInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ImagePosition" field.</summary>
    public const int ImagePositionFieldNumber = 17;
    private global::fat.gamekitdata.MailImagePositionType imagePosition_ = global::fat.gamekitdata.MailImagePositionType.MailImagePositionNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.MailImagePositionType ImagePosition {
      get { return imagePosition_; }
      set {
        imagePosition_ = value;
      }
    }

    /// <summary>Field number for the "ImageUrl" field.</summary>
    public const int ImageUrlFieldNumber = 18;
    private string imageUrl_ = "";
    /// <summary>
    ///@Size=512
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "link_type" field.</summary>
    public const int LinkTypeFieldNumber = 19;
    private global::fat.gamekitdata.MailLinkType linkType_ = global::fat.gamekitdata.MailLinkType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.MailLinkType LinkType {
      get { return linkType_; }
      set {
        linkType_ = value;
      }
    }

    /// <summary>Field number for the "Link" field.</summary>
    public const int LinkFieldNumber = 20;
    private string link_ = "";
    /// <summary>
    ///外链 支持{fpid} {uid} 参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Link {
      get { return link_; }
      set {
        link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Uid != other.Uid) return false;
      if (FromUid != other.FromUid) return false;
      if (IsRaw != other.IsRaw) return false;
      if (Title != other.Title) return false;
      if (Content != other.Content) return false;
      if (Type != other.Type) return false;
      if (!Rewards.Equals(other.Rewards)) return false;
      if (CreateTime != other.CreateTime) return false;
      if (ExpireTime != other.ExpireTime) return false;
      if (IsRead != other.IsRead) return false;
      if (IsClaimed != other.IsClaimed) return false;
      if (!object.Equals(ExtData, other.ExtData)) return false;
      if (Source != other.Source) return false;
      if (ExtInfo != other.ExtInfo) return false;
      if (ImagePosition != other.ImagePosition) return false;
      if (ImageUrl != other.ImageUrl) return false;
      if (LinkType != other.LinkType) return false;
      if (Link != other.Link) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (FromUid != 0UL) hash ^= FromUid.GetHashCode();
      if (IsRaw != false) hash ^= IsRaw.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Type != global::fat.gamekitdata.MailType.System) hash ^= Type.GetHashCode();
      hash ^= Rewards.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (ExpireTime != 0L) hash ^= ExpireTime.GetHashCode();
      if (IsRead != false) hash ^= IsRead.GetHashCode();
      if (IsClaimed != false) hash ^= IsClaimed.GetHashCode();
      if (extData_ != null) hash ^= ExtData.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (ExtInfo.Length != 0) hash ^= ExtInfo.GetHashCode();
      if (ImagePosition != global::fat.gamekitdata.MailImagePositionType.MailImagePositionNone) hash ^= ImagePosition.GetHashCode();
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (LinkType != global::fat.gamekitdata.MailLinkType.None) hash ^= LinkType.GetHashCode();
      if (Link.Length != 0) hash ^= Link.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uid);
      }
      if (FromUid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(FromUid);
      }
      if (IsRaw != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRaw);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Content);
      }
      if (Type != global::fat.gamekitdata.MailType.System) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Type);
      }
      rewards_.WriteTo(output, _map_rewards_codec);
      if (CreateTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(CreateTime);
      }
      if (ExpireTime != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(ExpireTime);
      }
      if (IsRead != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsRead);
      }
      if (IsClaimed != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsClaimed);
      }
      if (extData_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ExtData);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Source);
      }
      if (ExtInfo.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ExtInfo);
      }
      if (ImagePosition != global::fat.gamekitdata.MailImagePositionType.MailImagePositionNone) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) ImagePosition);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ImageUrl);
      }
      if (LinkType != global::fat.gamekitdata.MailLinkType.None) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) LinkType);
      }
      if (Link.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Link);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uid);
      }
      if (FromUid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(FromUid);
      }
      if (IsRaw != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRaw);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Content);
      }
      if (Type != global::fat.gamekitdata.MailType.System) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Type);
      }
      rewards_.WriteTo(ref output, _map_rewards_codec);
      if (CreateTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(CreateTime);
      }
      if (ExpireTime != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(ExpireTime);
      }
      if (IsRead != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsRead);
      }
      if (IsClaimed != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsClaimed);
      }
      if (extData_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ExtData);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Source);
      }
      if (ExtInfo.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ExtInfo);
      }
      if (ImagePosition != global::fat.gamekitdata.MailImagePositionType.MailImagePositionNone) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) ImagePosition);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ImageUrl);
      }
      if (LinkType != global::fat.gamekitdata.MailLinkType.None) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) LinkType);
      }
      if (Link.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Link);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (FromUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromUid);
      }
      if (IsRaw != false) {
        size += 1 + 1;
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Type != global::fat.gamekitdata.MailType.System) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += rewards_.CalculateSize(_map_rewards_codec);
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (ExpireTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTime);
      }
      if (IsRead != false) {
        size += 1 + 1;
      }
      if (IsClaimed != false) {
        size += 1 + 1;
      }
      if (extData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExtData);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (ExtInfo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExtInfo);
      }
      if (ImagePosition != global::fat.gamekitdata.MailImagePositionType.MailImagePositionNone) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ImagePosition);
      }
      if (ImageUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (LinkType != global::fat.gamekitdata.MailLinkType.None) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LinkType);
      }
      if (Link.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Link);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mail other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.FromUid != 0UL) {
        FromUid = other.FromUid;
      }
      if (other.IsRaw != false) {
        IsRaw = other.IsRaw;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Type != global::fat.gamekitdata.MailType.System) {
        Type = other.Type;
      }
      rewards_.Add(other.rewards_);
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.ExpireTime != 0L) {
        ExpireTime = other.ExpireTime;
      }
      if (other.IsRead != false) {
        IsRead = other.IsRead;
      }
      if (other.IsClaimed != false) {
        IsClaimed = other.IsClaimed;
      }
      if (other.extData_ != null) {
        if (extData_ == null) {
          ExtData = new global::fat.gamekitdata.MailTypeData();
        }
        ExtData.MergeFrom(other.ExtData);
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.ExtInfo.Length != 0) {
        ExtInfo = other.ExtInfo;
      }
      if (other.ImagePosition != global::fat.gamekitdata.MailImagePositionType.MailImagePositionNone) {
        ImagePosition = other.ImagePosition;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      if (other.LinkType != global::fat.gamekitdata.MailLinkType.None) {
        LinkType = other.LinkType;
      }
      if (other.Link.Length != 0) {
        Link = other.Link;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Uid = input.ReadUInt64();
            break;
          }
          case 32: {
            FromUid = input.ReadUInt64();
            break;
          }
          case 40: {
            IsRaw = input.ReadBool();
            break;
          }
          case 50: {
            Title = input.ReadString();
            break;
          }
          case 58: {
            Content = input.ReadString();
            break;
          }
          case 64: {
            Type = (global::fat.gamekitdata.MailType) input.ReadEnum();
            break;
          }
          case 74: {
            rewards_.AddEntriesFrom(input, _map_rewards_codec);
            break;
          }
          case 80: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 88: {
            ExpireTime = input.ReadInt64();
            break;
          }
          case 96: {
            IsRead = input.ReadBool();
            break;
          }
          case 104: {
            IsClaimed = input.ReadBool();
            break;
          }
          case 114: {
            if (extData_ == null) {
              ExtData = new global::fat.gamekitdata.MailTypeData();
            }
            input.ReadMessage(ExtData);
            break;
          }
          case 122: {
            Source = input.ReadString();
            break;
          }
          case 130: {
            ExtInfo = input.ReadString();
            break;
          }
          case 136: {
            ImagePosition = (global::fat.gamekitdata.MailImagePositionType) input.ReadEnum();
            break;
          }
          case 146: {
            ImageUrl = input.ReadString();
            break;
          }
          case 152: {
            LinkType = (global::fat.gamekitdata.MailLinkType) input.ReadEnum();
            break;
          }
          case 162: {
            Link = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Uid = input.ReadUInt64();
            break;
          }
          case 32: {
            FromUid = input.ReadUInt64();
            break;
          }
          case 40: {
            IsRaw = input.ReadBool();
            break;
          }
          case 50: {
            Title = input.ReadString();
            break;
          }
          case 58: {
            Content = input.ReadString();
            break;
          }
          case 64: {
            Type = (global::fat.gamekitdata.MailType) input.ReadEnum();
            break;
          }
          case 74: {
            rewards_.AddEntriesFrom(ref input, _map_rewards_codec);
            break;
          }
          case 80: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 88: {
            ExpireTime = input.ReadInt64();
            break;
          }
          case 96: {
            IsRead = input.ReadBool();
            break;
          }
          case 104: {
            IsClaimed = input.ReadBool();
            break;
          }
          case 114: {
            if (extData_ == null) {
              ExtData = new global::fat.gamekitdata.MailTypeData();
            }
            input.ReadMessage(ExtData);
            break;
          }
          case 122: {
            Source = input.ReadString();
            break;
          }
          case 130: {
            ExtInfo = input.ReadString();
            break;
          }
          case 136: {
            ImagePosition = (global::fat.gamekitdata.MailImagePositionType) input.ReadEnum();
            break;
          }
          case 146: {
            ImageUrl = input.ReadString();
            break;
          }
          case 152: {
            LinkType = (global::fat.gamekitdata.MailLinkType) input.ReadEnum();
            break;
          }
          case 162: {
            Link = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
