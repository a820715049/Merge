// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gamekitdata/activity.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.gamekitdata {

  /// <summary>Holder for reflection information generated from gamekitdata/activity.proto</summary>
  public static partial class ActivityReflection {

    #region Descriptor
    /// <summary>File descriptor for gamekitdata/activity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ActivityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpnYW1la2l0ZGF0YS9hY3Rpdml0eS5wcm90bxILZ2FtZWtpdGRhdGEaGGdh",
            "bWVraXRkYXRhL3NoYXJlZC5wcm90byKTAQoQQWN0aXZpdHlJbnN0YW5jZRIK",
            "CgJJZBgBIAEoBRIPCgdTdGFydFRTGAIgASgDEg0KBUVuZFRTGAMgASgDEg0K",
            "BVBoYXNlGAUgASgFEg0KBUFjdElkGAYgASgFEicKCEFueVN0YXRlGAcgAygL",
            "MhUuZ2FtZWtpdGRhdGEuQW55U3RhdGUSDAoERnJvbRgIIAEoBSIuCgxUeXBl",
            "SW5zdGFuY2USDQoFQ291bnQYASABKAUSDwoHQ291bnRUUxgCIAEoAyL1AwoI",
            "QWN0aXZpdHkSEAoITlVQYXNzVFMYASABKAMSMQoGQWN0aXZlGAIgAygLMiEu",
            "Z2FtZWtpdGRhdGEuQWN0aXZpdHkuQWN0aXZlRW50cnkSMQoGUmVjb3JkGAMg",
            "AygLMiEuZ2FtZWtpdGRhdGEuQWN0aXZpdHkuUmVjb3JkRW50cnkSEwoLVHlw",
            "ZUNvdW50VFMYBSABKAMSNQoIVHlwZUluZm8YBiADKAsyIy5nYW1la2l0ZGF0",
            "YS5BY3Rpdml0eS5UeXBlSW5mb0VudHJ5EiwKBUxpbWJvGAcgAygLMh0uZ2Ft",
            "ZWtpdGRhdGEuQWN0aXZpdHlJbnN0YW5jZRIuCgdQZW5kaW5nGAggAygLMh0u",
            "Z2FtZWtpdGRhdGEuQWN0aXZpdHlJbnN0YW5jZRpMCgtBY3RpdmVFbnRyeRIL",
            "CgNrZXkYASABKAUSLAoFdmFsdWUYAiABKAsyHS5nYW1la2l0ZGF0YS5BY3Rp",
            "dml0eUluc3RhbmNlOgI4ARotCgtSZWNvcmRFbnRyeRILCgNrZXkYASABKAUS",
            "DQoFdmFsdWUYAiABKAM6AjgBGkoKDVR5cGVJbmZvRW50cnkSCwoDa2V5GAEg",
            "ASgFEigKBXZhbHVlGAIgASgLMhkuZ2FtZWtpdGRhdGEuVHlwZUluc3RhbmNl",
            "OgI4AUJFWjFnaXRsYWIuZnVucGx1cy5pby9mYXQvY29uZi9nZW4vZ29sYW5n",
            "L2dhbWVraXRkYXRhqgIPZmF0LmdhbWVraXRkYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.gamekitdata.SharedReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.ActivityInstance), global::fat.gamekitdata.ActivityInstance.Parser, new[]{ "Id", "StartTS", "EndTS", "Phase", "ActId", "AnyState", "From" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.TypeInstance), global::fat.gamekitdata.TypeInstance.Parser, new[]{ "Count", "CountTS" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.Activity), global::fat.gamekitdata.Activity.Parser, new[]{ "NUPassTS", "Active", "Record", "TypeCountTS", "TypeInfo", "Limbo", "Pending" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ActivityInstance : pb::IMessage<ActivityInstance>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActivityInstance> _parser = new pb::MessageParser<ActivityInstance>(() => new ActivityInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ActivityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityInstance(ActivityInstance other) : this() {
      id_ = other.id_;
      startTS_ = other.startTS_;
      endTS_ = other.endTS_;
      phase_ = other.phase_;
      actId_ = other.actId_;
      anyState_ = other.anyState_.Clone();
      from_ = other.from_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivityInstance Clone() {
      return new ActivityInstance(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "StartTS" field.</summary>
    public const int StartTSFieldNumber = 2;
    private long startTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTS {
      get { return startTS_; }
      set {
        startTS_ = value;
      }
    }

    /// <summary>Field number for the "EndTS" field.</summary>
    public const int EndTSFieldNumber = 3;
    private long endTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTS {
      get { return endTS_; }
      set {
        endTS_ = value;
      }
    }

    /// <summary>Field number for the "Phase" field.</summary>
    public const int PhaseFieldNumber = 5;
    private int phase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Phase {
      get { return phase_; }
      set {
        phase_ = value;
      }
    }

    /// <summary>Field number for the "ActId" field.</summary>
    public const int ActIdFieldNumber = 6;
    private int actId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActId {
      get { return actId_; }
      set {
        actId_ = value;
      }
    }

    /// <summary>Field number for the "AnyState" field.</summary>
    public const int AnyStateFieldNumber = 7;
    private static readonly pb::FieldCodec<global::fat.gamekitdata.AnyState> _repeated_anyState_codec
        = pb::FieldCodec.ForMessage(58, global::fat.gamekitdata.AnyState.Parser);
    private readonly pbc::RepeatedField<global::fat.gamekitdata.AnyState> anyState_ = new pbc::RepeatedField<global::fat.gamekitdata.AnyState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.gamekitdata.AnyState> AnyState {
      get { return anyState_; }
    }

    /// <summary>Field number for the "From" field.</summary>
    public const int FromFieldNumber = 8;
    private int from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivityInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivityInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (StartTS != other.StartTS) return false;
      if (EndTS != other.EndTS) return false;
      if (Phase != other.Phase) return false;
      if (ActId != other.ActId) return false;
      if(!anyState_.Equals(other.anyState_)) return false;
      if (From != other.From) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (StartTS != 0L) hash ^= StartTS.GetHashCode();
      if (EndTS != 0L) hash ^= EndTS.GetHashCode();
      if (Phase != 0) hash ^= Phase.GetHashCode();
      if (ActId != 0) hash ^= ActId.GetHashCode();
      hash ^= anyState_.GetHashCode();
      if (From != 0) hash ^= From.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (StartTS != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTS);
      }
      if (EndTS != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(EndTS);
      }
      if (Phase != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Phase);
      }
      if (ActId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ActId);
      }
      anyState_.WriteTo(output, _repeated_anyState_codec);
      if (From != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(From);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (StartTS != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTS);
      }
      if (EndTS != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(EndTS);
      }
      if (Phase != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Phase);
      }
      if (ActId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ActId);
      }
      anyState_.WriteTo(ref output, _repeated_anyState_codec);
      if (From != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(From);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (StartTS != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTS);
      }
      if (EndTS != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTS);
      }
      if (Phase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Phase);
      }
      if (ActId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActId);
      }
      size += anyState_.CalculateSize(_repeated_anyState_codec);
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivityInstance other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.StartTS != 0L) {
        StartTS = other.StartTS;
      }
      if (other.EndTS != 0L) {
        EndTS = other.EndTS;
      }
      if (other.Phase != 0) {
        Phase = other.Phase;
      }
      if (other.ActId != 0) {
        ActId = other.ActId;
      }
      anyState_.Add(other.anyState_);
      if (other.From != 0) {
        From = other.From;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            StartTS = input.ReadInt64();
            break;
          }
          case 24: {
            EndTS = input.ReadInt64();
            break;
          }
          case 40: {
            Phase = input.ReadInt32();
            break;
          }
          case 48: {
            ActId = input.ReadInt32();
            break;
          }
          case 58: {
            anyState_.AddEntriesFrom(input, _repeated_anyState_codec);
            break;
          }
          case 64: {
            From = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            StartTS = input.ReadInt64();
            break;
          }
          case 24: {
            EndTS = input.ReadInt64();
            break;
          }
          case 40: {
            Phase = input.ReadInt32();
            break;
          }
          case 48: {
            ActId = input.ReadInt32();
            break;
          }
          case 58: {
            anyState_.AddEntriesFrom(ref input, _repeated_anyState_codec);
            break;
          }
          case 64: {
            From = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TypeInstance : pb::IMessage<TypeInstance>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TypeInstance> _parser = new pb::MessageParser<TypeInstance>(() => new TypeInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypeInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ActivityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeInstance(TypeInstance other) : this() {
      count_ = other.count_;
      countTS_ = other.countTS_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeInstance Clone() {
      return new TypeInstance(this);
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "CountTS" field.</summary>
    public const int CountTSFieldNumber = 2;
    private long countTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CountTS {
      get { return countTS_; }
      set {
        countTS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TypeInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypeInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if (CountTS != other.CountTS) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (CountTS != 0L) hash ^= CountTS.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (CountTS != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CountTS);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (CountTS != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CountTS);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (CountTS != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CountTS);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypeInstance other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.CountTS != 0L) {
        CountTS = other.CountTS;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 16: {
            CountTS = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 16: {
            CountTS = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Activity : pb::IMessage<Activity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Activity> _parser = new pb::MessageParser<Activity>(() => new Activity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Activity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.ActivityReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity(Activity other) : this() {
      nUPassTS_ = other.nUPassTS_;
      active_ = other.active_.Clone();
      record_ = other.record_.Clone();
      typeCountTS_ = other.typeCountTS_;
      typeInfo_ = other.typeInfo_.Clone();
      limbo_ = other.limbo_.Clone();
      pending_ = other.pending_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity Clone() {
      return new Activity(this);
    }

    /// <summary>Field number for the "NUPassTS" field.</summary>
    public const int NUPassTSFieldNumber = 1;
    private long nUPassTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NUPassTS {
      get { return nUPassTS_; }
      set {
        nUPassTS_ = value;
      }
    }

    /// <summary>Field number for the "Active" field.</summary>
    public const int ActiveFieldNumber = 2;
    private static readonly pbc::MapField<int, global::fat.gamekitdata.ActivityInstance>.Codec _map_active_codec
        = new pbc::MapField<int, global::fat.gamekitdata.ActivityInstance>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.gamekitdata.ActivityInstance.Parser), 18);
    private readonly pbc::MapField<int, global::fat.gamekitdata.ActivityInstance> active_ = new pbc::MapField<int, global::fat.gamekitdata.ActivityInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.gamekitdata.ActivityInstance> Active {
      get { return active_; }
    }

    /// <summary>Field number for the "Record" field.</summary>
    public const int RecordFieldNumber = 3;
    private static readonly pbc::MapField<int, long>.Codec _map_record_codec
        = new pbc::MapField<int, long>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt64(16, 0L), 26);
    private readonly pbc::MapField<int, long> record_ = new pbc::MapField<int, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, long> Record {
      get { return record_; }
    }

    /// <summary>Field number for the "TypeCountTS" field.</summary>
    public const int TypeCountTSFieldNumber = 5;
    private long typeCountTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TypeCountTS {
      get { return typeCountTS_; }
      set {
        typeCountTS_ = value;
      }
    }

    /// <summary>Field number for the "TypeInfo" field.</summary>
    public const int TypeInfoFieldNumber = 6;
    private static readonly pbc::MapField<int, global::fat.gamekitdata.TypeInstance>.Codec _map_typeInfo_codec
        = new pbc::MapField<int, global::fat.gamekitdata.TypeInstance>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.gamekitdata.TypeInstance.Parser), 50);
    private readonly pbc::MapField<int, global::fat.gamekitdata.TypeInstance> typeInfo_ = new pbc::MapField<int, global::fat.gamekitdata.TypeInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.gamekitdata.TypeInstance> TypeInfo {
      get { return typeInfo_; }
    }

    /// <summary>Field number for the "Limbo" field.</summary>
    public const int LimboFieldNumber = 7;
    private static readonly pb::FieldCodec<global::fat.gamekitdata.ActivityInstance> _repeated_limbo_codec
        = pb::FieldCodec.ForMessage(58, global::fat.gamekitdata.ActivityInstance.Parser);
    private readonly pbc::RepeatedField<global::fat.gamekitdata.ActivityInstance> limbo_ = new pbc::RepeatedField<global::fat.gamekitdata.ActivityInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.gamekitdata.ActivityInstance> Limbo {
      get { return limbo_; }
    }

    /// <summary>Field number for the "Pending" field.</summary>
    public const int PendingFieldNumber = 8;
    private static readonly pb::FieldCodec<global::fat.gamekitdata.ActivityInstance> _repeated_pending_codec
        = pb::FieldCodec.ForMessage(66, global::fat.gamekitdata.ActivityInstance.Parser);
    private readonly pbc::RepeatedField<global::fat.gamekitdata.ActivityInstance> pending_ = new pbc::RepeatedField<global::fat.gamekitdata.ActivityInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.gamekitdata.ActivityInstance> Pending {
      get { return pending_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Activity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Activity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NUPassTS != other.NUPassTS) return false;
      if (!Active.Equals(other.Active)) return false;
      if (!Record.Equals(other.Record)) return false;
      if (TypeCountTS != other.TypeCountTS) return false;
      if (!TypeInfo.Equals(other.TypeInfo)) return false;
      if(!limbo_.Equals(other.limbo_)) return false;
      if(!pending_.Equals(other.pending_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NUPassTS != 0L) hash ^= NUPassTS.GetHashCode();
      hash ^= Active.GetHashCode();
      hash ^= Record.GetHashCode();
      if (TypeCountTS != 0L) hash ^= TypeCountTS.GetHashCode();
      hash ^= TypeInfo.GetHashCode();
      hash ^= limbo_.GetHashCode();
      hash ^= pending_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NUPassTS != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NUPassTS);
      }
      active_.WriteTo(output, _map_active_codec);
      record_.WriteTo(output, _map_record_codec);
      if (TypeCountTS != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TypeCountTS);
      }
      typeInfo_.WriteTo(output, _map_typeInfo_codec);
      limbo_.WriteTo(output, _repeated_limbo_codec);
      pending_.WriteTo(output, _repeated_pending_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NUPassTS != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NUPassTS);
      }
      active_.WriteTo(ref output, _map_active_codec);
      record_.WriteTo(ref output, _map_record_codec);
      if (TypeCountTS != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TypeCountTS);
      }
      typeInfo_.WriteTo(ref output, _map_typeInfo_codec);
      limbo_.WriteTo(ref output, _repeated_limbo_codec);
      pending_.WriteTo(ref output, _repeated_pending_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NUPassTS != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NUPassTS);
      }
      size += active_.CalculateSize(_map_active_codec);
      size += record_.CalculateSize(_map_record_codec);
      if (TypeCountTS != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TypeCountTS);
      }
      size += typeInfo_.CalculateSize(_map_typeInfo_codec);
      size += limbo_.CalculateSize(_repeated_limbo_codec);
      size += pending_.CalculateSize(_repeated_pending_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Activity other) {
      if (other == null) {
        return;
      }
      if (other.NUPassTS != 0L) {
        NUPassTS = other.NUPassTS;
      }
      active_.Add(other.active_);
      record_.Add(other.record_);
      if (other.TypeCountTS != 0L) {
        TypeCountTS = other.TypeCountTS;
      }
      typeInfo_.Add(other.typeInfo_);
      limbo_.Add(other.limbo_);
      pending_.Add(other.pending_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NUPassTS = input.ReadInt64();
            break;
          }
          case 18: {
            active_.AddEntriesFrom(input, _map_active_codec);
            break;
          }
          case 26: {
            record_.AddEntriesFrom(input, _map_record_codec);
            break;
          }
          case 40: {
            TypeCountTS = input.ReadInt64();
            break;
          }
          case 50: {
            typeInfo_.AddEntriesFrom(input, _map_typeInfo_codec);
            break;
          }
          case 58: {
            limbo_.AddEntriesFrom(input, _repeated_limbo_codec);
            break;
          }
          case 66: {
            pending_.AddEntriesFrom(input, _repeated_pending_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NUPassTS = input.ReadInt64();
            break;
          }
          case 18: {
            active_.AddEntriesFrom(ref input, _map_active_codec);
            break;
          }
          case 26: {
            record_.AddEntriesFrom(ref input, _map_record_codec);
            break;
          }
          case 40: {
            TypeCountTS = input.ReadInt64();
            break;
          }
          case 50: {
            typeInfo_.AddEntriesFrom(ref input, _map_typeInfo_codec);
            break;
          }
          case 58: {
            limbo_.AddEntriesFrom(ref input, _repeated_limbo_codec);
            break;
          }
          case 66: {
            pending_.AddEntriesFrom(ref input, _repeated_pending_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
