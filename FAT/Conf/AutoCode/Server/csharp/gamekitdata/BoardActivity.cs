// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gamekitdata/board_activity.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace fat.gamekitdata {

  /// <summary>Holder for reflection information generated from gamekitdata/board_activity.proto</summary>
  public static partial class BoardActivityReflection {

    #region Descriptor
    /// <summary>File descriptor for gamekitdata/board_activity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BoardActivityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBnYW1la2l0ZGF0YS9ib2FyZF9hY3Rpdml0eS5wcm90bxILZ2FtZWtpdGRh",
            "dGEaF2dhbWVraXRkYXRhL21lcmdlLnByb3RvGhhnYW1la2l0ZGF0YS9zaGFy",
            "ZWQucHJvdG8iwAEKDUJvYXJkQWN0aXZpdHkSUgoUQm9hcmRBY3Rpdml0eURh",
            "dGFNYXAYASADKAsyNC5nYW1la2l0ZGF0YS5Cb2FyZEFjdGl2aXR5LkJvYXJk",
            "QWN0aXZpdHlEYXRhTWFwRW50cnkaWwoZQm9hcmRBY3Rpdml0eURhdGFNYXBF",
            "bnRyeRILCgNrZXkYASABKAUSLQoFdmFsdWUYAiABKAsyHi5nYW1la2l0ZGF0",
            "YS5Cb2FyZEFjdGl2aXR5RGF0YToCOAEidwoRQm9hcmRBY3Rpdml0eURhdGES",
            "FgoOQmluZEFjdGl2aXR5SWQYASABKAUSIQoFQm9hcmQYAiABKAsyEi5nYW1l",
            "a2l0ZGF0YS5NZXJnZRInCghBbnlTdGF0ZRgDIAMoCzIVLmdhbWVraXRkYXRh",
            "LkFueVN0YXRlQkVaMWdpdGxhYi5mdW5wbHVzLmlvL2ZhdC9jb25mL2dlbi9n",
            "b2xhbmcvZ2FtZWtpdGRhdGGqAg9mYXQuZ2FtZWtpdGRhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::fat.gamekitdata.MergeReflection.Descriptor, global::fat.gamekitdata.SharedReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.BoardActivity), global::fat.gamekitdata.BoardActivity.Parser, new[]{ "BoardActivityDataMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::fat.gamekitdata.BoardActivityData), global::fat.gamekitdata.BoardActivityData.Parser, new[]{ "BindActivityId", "Board", "AnyState" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BoardActivity : pb::IMessage<BoardActivity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoardActivity> _parser = new pb::MessageParser<BoardActivity>(() => new BoardActivity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoardActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.BoardActivityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardActivity(BoardActivity other) : this() {
      boardActivityDataMap_ = other.boardActivityDataMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardActivity Clone() {
      return new BoardActivity(this);
    }

    /// <summary>Field number for the "BoardActivityDataMap" field.</summary>
    public const int BoardActivityDataMapFieldNumber = 1;
    private static readonly pbc::MapField<int, global::fat.gamekitdata.BoardActivityData>.Codec _map_boardActivityDataMap_codec
        = new pbc::MapField<int, global::fat.gamekitdata.BoardActivityData>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::fat.gamekitdata.BoardActivityData.Parser), 10);
    private readonly pbc::MapField<int, global::fat.gamekitdata.BoardActivityData> boardActivityDataMap_ = new pbc::MapField<int, global::fat.gamekitdata.BoardActivityData>();
    /// <summary>
    ///key:棋盘活动FeatureId, value:棋盘相关数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::fat.gamekitdata.BoardActivityData> BoardActivityDataMap {
      get { return boardActivityDataMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoardActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoardActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!BoardActivityDataMap.Equals(other.BoardActivityDataMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= BoardActivityDataMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      boardActivityDataMap_.WriteTo(output, _map_boardActivityDataMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      boardActivityDataMap_.WriteTo(ref output, _map_boardActivityDataMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += boardActivityDataMap_.CalculateSize(_map_boardActivityDataMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoardActivity other) {
      if (other == null) {
        return;
      }
      boardActivityDataMap_.Add(other.boardActivityDataMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            boardActivityDataMap_.AddEntriesFrom(input, _map_boardActivityDataMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            boardActivityDataMap_.AddEntriesFrom(ref input, _map_boardActivityDataMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BoardActivityData : pb::IMessage<BoardActivityData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoardActivityData> _parser = new pb::MessageParser<BoardActivityData>(() => new BoardActivityData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoardActivityData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::fat.gamekitdata.BoardActivityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardActivityData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardActivityData(BoardActivityData other) : this() {
      bindActivityId_ = other.bindActivityId_;
      board_ = other.board_ != null ? other.board_.Clone() : null;
      anyState_ = other.anyState_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardActivityData Clone() {
      return new BoardActivityData(this);
    }

    /// <summary>Field number for the "BindActivityId" field.</summary>
    public const int BindActivityIdFieldNumber = 1;
    private int bindActivityId_;
    /// <summary>
    ///绑定的活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BindActivityId {
      get { return bindActivityId_; }
      set {
        bindActivityId_ = value;
      }
    }

    /// <summary>Field number for the "Board" field.</summary>
    public const int BoardFieldNumber = 2;
    private global::fat.gamekitdata.Merge board_;
    /// <summary>
    ///棋盘核心数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::fat.gamekitdata.Merge Board {
      get { return board_; }
      set {
        board_ = value;
      }
    }

    /// <summary>Field number for the "AnyState" field.</summary>
    public const int AnyStateFieldNumber = 3;
    private static readonly pb::FieldCodec<global::fat.gamekitdata.AnyState> _repeated_anyState_codec
        = pb::FieldCodec.ForMessage(26, global::fat.gamekitdata.AnyState.Parser);
    private readonly pbc::RepeatedField<global::fat.gamekitdata.AnyState> anyState_ = new pbc::RepeatedField<global::fat.gamekitdata.AnyState>();
    /// <summary>
    ///业务层通用存储字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::fat.gamekitdata.AnyState> AnyState {
      get { return anyState_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoardActivityData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoardActivityData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BindActivityId != other.BindActivityId) return false;
      if (!object.Equals(Board, other.Board)) return false;
      if(!anyState_.Equals(other.anyState_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BindActivityId != 0) hash ^= BindActivityId.GetHashCode();
      if (board_ != null) hash ^= Board.GetHashCode();
      hash ^= anyState_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BindActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BindActivityId);
      }
      if (board_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Board);
      }
      anyState_.WriteTo(output, _repeated_anyState_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BindActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BindActivityId);
      }
      if (board_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Board);
      }
      anyState_.WriteTo(ref output, _repeated_anyState_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BindActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BindActivityId);
      }
      if (board_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Board);
      }
      size += anyState_.CalculateSize(_repeated_anyState_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoardActivityData other) {
      if (other == null) {
        return;
      }
      if (other.BindActivityId != 0) {
        BindActivityId = other.BindActivityId;
      }
      if (other.board_ != null) {
        if (board_ == null) {
          Board = new global::fat.gamekitdata.Merge();
        }
        Board.MergeFrom(other.Board);
      }
      anyState_.Add(other.anyState_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BindActivityId = input.ReadInt32();
            break;
          }
          case 18: {
            if (board_ == null) {
              Board = new global::fat.gamekitdata.Merge();
            }
            input.ReadMessage(Board);
            break;
          }
          case 26: {
            anyState_.AddEntriesFrom(input, _repeated_anyState_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BindActivityId = input.ReadInt32();
            break;
          }
          case 18: {
            if (board_ == null) {
              Board = new global::fat.gamekitdata.Merge();
            }
            input.ReadMessage(Board);
            break;
          }
          case 26: {
            anyState_.AddEntriesFrom(ref input, _repeated_anyState_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
